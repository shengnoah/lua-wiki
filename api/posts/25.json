{"total":667,"pageSize":12,"pageCount":56,"data":[{"title":"","uid":"f73a8e23e6f6f669cf99c7dba8fa0722","slug":"kanbanfiles/大语言模型Lora微调是怎么实现的？","date":"2024-03-14T07:45:09.038Z","updated":"2024-03-14T07:45:09.038Z","comments":true,"path":"api/articles/kanbanfiles/大语言模型Lora微调是怎么实现的？.json","cover":null,"text":"大语言模型Lora微调是怎么实现的？ 大语言模型Lora的微调是通过以下步骤实现的： 数据收集：收集与特定任务相关的大规模文本数据集。这些数据可以是开放式的，例如互联网上的网页、维基百科等，也可以是特定领域的文本数据。 数据预处理：对收集到的文本数据进行预处理，包括去除HTML标...","link":"","photos":[],"count_time":{"symbolsCount":"1.2k","symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},{"title":"","uid":"f73a8e23e6f6f669cf99c7dba8fa0722","slug":"kanbanfiles/梅子青哥窑_冲突文件_root_20231115114817","date":"2024-03-14T07:45:09.038Z","updated":"2024-03-14T07:45:09.038Z","comments":true,"path":"api/articles/kanbanfiles/梅子青哥窑_冲突文件_root_20231115114817.json","cover":null,"text":"梅子青哥窑与弟窑有什么区别？ 梅子青哥窑与弟窑是中国古代青瓷窑口的两个代表。它们的区别主要体现在以下几个方面： 地理位置：梅子青哥窑位于河南省开封市尉氏县梅子山区，而弟窑位于河南省郑州市新郑市。 历史时期：梅子青哥窑是北宋时期的一个重要制瓷窑口，而弟窑则出现在明朝万历年间。 窑瓷...","link":"","photos":[],"count_time":{"symbolsCount":602,"symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},{"title":"Graylog3的Python调用库","uid":"17128178a8a90f40f15298b35f6dcb19","slug":"kanbanfiles/Graylog库引用","date":"2024-03-14T07:45:09.037Z","updated":"2024-03-14T07:45:09.037Z","comments":true,"path":"api/articles/kanbanfiles/Graylog库引用.json","cover":[],"text":"早期的Graylog2时期 ，Python Graylog的库也是Python版本的。到了Graylog3时期，使用了Python3版本，这时候Python的库就不能在Python中使用的， 需要将原有Pygralog2变成支持Python3的版本。 ","link":"","photos":[],"count_time":{"symbolsCount":128,"symbolsTime":"1 mins."},"categories":[{"name":"Sec","slug":"Sec","count":5,"path":"api/categories/Sec.json"},{"name":"Graylog","slug":"Sec/Graylog","count":3,"path":"api/categories/Sec/Graylog.json"}],"tags":[{"name":"Graylog","slug":"Graylog","count":4,"path":"api/tags/Graylog.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},{"title":"","uid":"f73a8e23e6f6f669cf99c7dba8fa0722","slug":"kanbanfiles/Hexo的优秀主题","date":"2024-03-14T07:45:09.037Z","updated":"2024-03-14T07:45:09.037Z","comments":true,"path":"api/articles/kanbanfiles/Hexo的优秀主题.json","cover":null,"text":"有那些优秀的Hexo主题可以选择使用 以下是一些优秀的Hexo主题供选择使用： Next：Next是一款功能强大且高度可定制的Hexo主题，具有响应式布局和多种颜色方案。它支持多种插件和功能，如代码高亮、搜索、多语言支持等。 Landscape：Landscape是Hexo自带的...","link":"","photos":[],"count_time":{"symbolsCount":501,"symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},{"title":"","uid":"f73a8e23e6f6f669cf99c7dba8fa0722","slug":"kanbanfiles/Obsidian的CohereAI插件","date":"2024-03-14T07:45:09.037Z","updated":"2024-03-14T07:45:09.037Z","comments":true,"path":"api/articles/kanbanfiles/Obsidian的CohereAI插件.json","cover":null,"text":"https://dashboard.cohere.com/api-keys Obsidian中使用Cohere AI的API对应使用那个插件。 在Obsidian中使用Cohere AI的API可以使用Obsidian插件“Cohere”来实现。该插件允许用户直接在Obsidia...","link":"","photos":[],"count_time":{"symbolsCount":"1.6k","symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},{"title":"","uid":"f73a8e23e6f6f669cf99c7dba8fa0722","slug":"kanbanfiles/常用的显卡操作命令","date":"2024-03-14T07:45:09.037Z","updated":"2024-03-14T07:45:09.037Z","comments":true,"path":"api/articles/kanbanfiles/常用的显卡操作命令.json","cover":null,"text":"查看显卡信息 lspci | grep nvidia -i lspci -k | grep -A 2 -i “VGA” 查看安装过的CUDA包 dpkg -l | grep cuda dpkg -l | cd 查看显卡状态 gpustat nvidia-smi 禁用 nouvea...","link":"","photos":[],"count_time":{"symbolsCount":"4.5k","symbolsTime":"4 mins."},"categories":[],"tags":[],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},{"title":"","uid":"f73a8e23e6f6f669cf99c7dba8fa0722","slug":"kanbanfiles/CUDA安装","date":"2024-03-14T07:45:09.036Z","updated":"2024-03-14T07:45:09.036Z","comments":true,"path":"api/articles/kanbanfiles/CUDA安装.json","cover":null,"text":"如何用apt-get 安装CUDA 11.8 很抱歉，但是 CUDA 11.8 并不是一个存在的版本。CUDA 最新的稳定版本是 CUDA 11.5。以下是安装 CUDA 11.5 的步骤： 首先，确保你的系统满足 CUDA 11.5 的要求。CUDA 11.5 支持 Linux...","link":"","photos":[],"count_time":{"symbolsCount":"11k","symbolsTime":"10 mins."},"categories":[],"tags":[],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},{"title":"人工神经网络的激活算法","uid":"9d54c438e5c0987af1b3cb3ae965517a","slug":"kanbanfiles/人工神经网络的激活算法","date":"2024-03-14T07:45:09.036Z","updated":"2024-03-14T07:45:09.036Z","comments":true,"path":"api/articles/kanbanfiles/人工神经网络的激活算法.json","cover":null,"text":"人工神经网络的激活算法 人工神经网络激活算法的作用是什么？ 人工神经网络激活算法的作用是将输入信号转换为输出信号，从而模拟生物神经元的激活过程，使神经网络能够学习和处理复杂的非线性关系。激活算法通常在每个神经元中应用，通过对输入信号进行加权求和，并通过激活函数对结果进行非线性映射...","link":"","photos":[],"count_time":{"symbolsCount":"23k","symbolsTime":"21 mins."},"categories":[{"name":"AIGC","slug":"AIGC","count":119,"path":"api/categories/AIGC.json"}],"tags":[{"name":"激活函数","slug":"激活函数","count":1,"path":"api/tags/激活函数.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},{"title":"","uid":"f73a8e23e6f6f669cf99c7dba8fa0722","slug":"kanbanfiles/安全网格","date":"2024-03-14T07:45:09.036Z","updated":"2024-03-14T07:45:09.036Z","comments":true,"path":"api/articles/kanbanfiles/安全网格.json","cover":null,"text":"网络安全中的安全网格指的是什么？ 安全网格是一种网络安全架构，旨在提高网络的可靠性、可扩展性和安全性。它通过将网络划分为多个区域，并在每个区域中部署安全设备和控制机制，来实现对整个网络的保护。每个区域被称为一个网格节点，它们之间通过安全网关进行连接。安全网格可以帮助组织实现对网络...","link":"","photos":[],"count_time":{"symbolsCount":174,"symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},{"title":"","uid":"f73a8e23e6f6f669cf99c7dba8fa0722","slug":"kanbanfiles/Go语言实现代理","date":"2024-03-14T07:45:09.034Z","updated":"2024-03-14T07:45:09.034Z","comments":true,"path":"api/articles/kanbanfiles/Go语言实现代理.json","cover":null,"text":"如何用Go语言实现代理转发HTTP请求的流量，从80端口转发给实际服务上的8000端口。 要使用Go语言实现代理转发HTTP请求的流量，可以使用net/http包和httputil包来处理。以下是一个简单的示例代码： 1234567891011121314151617181920...","link":"","photos":[],"count_time":{"symbolsCount":"3k","symbolsTime":"3 mins."},"categories":[],"tags":[],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},{"title":"X79和X99主板之间差多少？","uid":"6f69935454a41ee16cb899c98008b9e3","slug":"kanbanfiles/X79和X99主板之间差多少？","date":"2024-03-14T07:45:09.034Z","updated":"2024-03-14T07:45:09.034Z","comments":true,"path":"api/articles/kanbanfiles/X79和X99主板之间差多少？.json","cover":null,"text":"X79和X99主板之间差多少？ X79和X99主板之间的差异主要体现在以下几个方面： 芯片组：X79主板采用的是Intel X79芯片组，而X99主板采用的是Intel X99芯片组。X99芯片组相对于X79芯片组有更高级别的功能和性能。 处理器支持：X79主板支持LGA 201...","link":"","photos":[],"count_time":{"symbolsCount":"1.7k","symbolsTime":"2 mins."},"categories":[{"name":"主机硬件","slug":"主机硬件","count":1,"path":"api/categories/主机硬件.json"}],"tags":[{"name":"主板","slug":"主板","count":1,"path":"api/tags/主板.json"},{"name":"x79","slug":"x79","count":1,"path":"api/tags/x79.json"},{"name":"x99","slug":"x99","count":1,"path":"api/tags/x99.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},{"title":"hexo显示gitee图床图片","uid":"7951604bcce5cb8d2f8131e9a9d0848a","slug":"kanbanfiles/hexo显示gitee图床图片不显示图","date":"2024-03-14T07:45:09.034Z","updated":"2024-03-14T07:45:09.034Z","comments":true,"path":"api/articles/kanbanfiles/hexo显示gitee图床图片不显示图.json","cover":null,"text":"\\themes\\butterfly\\layout\\includes目录下有一个head.pug文件，修改该文件的meta信息，会使生成的所有页面都带有该head。 1meta(name=&quot;referrer&quot; content=&quot;no-referrer&...","link":"","photos":[],"count_time":{"symbolsCount":191,"symbolsTime":"1 mins."},"categories":[{"name":"Sec","slug":"Sec","count":5,"path":"api/categories/Sec.json"},{"name":"Graylog","slug":"Sec/Graylog","count":3,"path":"api/categories/Sec/Graylog.json"}],"tags":[{"name":"Graylog","slug":"Graylog","count":4,"path":"api/tags/Graylog.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}]}