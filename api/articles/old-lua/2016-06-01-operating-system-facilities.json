{"title":"Lua操作系统工具库","uid":"690a2272c904046df2d9d8b8e3328a46","slug":"old-lua/2016-06-01-operating-system-facilities","date":"2024-03-14T06:15:59.731Z","updated":"2024-03-14T06:15:59.731Z","comments":true,"path":"api/articles/old-lua/2016-06-01-operating-system-facilities.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":null,"content":"<h1 id=\"Lua-操作系统工具库\"><a href=\"#Lua-操作系统工具库\" class=\"headerlink\" title=\"Lua 操作系统工具库\"></a>Lua 操作系统工具库</h1><p>在很多应用中，我们都需要访问到操作系统级别的函数，操作系统库就给我们提供了这样的工具。下面的列表给出操作系统工具包提供的方法：  </p>\n<table>\n    <tr>\n        <th>S.N.</th>\n        <th>函数与功能</th>\n    </tr>\n    <tr>\n        <td>1</td>\n        <td>os.clock()：以秒为单位返回程序运行所用 CPU 时间的近似值。</td>\n    </tr>\n    <tr>\n        <td>2</td>\n        <td>os.date([format[,time]])：返回时间字符串或包含时间的表，时间按指定格式格式化。</td>\n    </tr>\n    <tr>\n        <td>3</td>\n        <td>os.difftime(t2,t1)：返回从 t1 时刻至 t2 时刻经历的时间。在 POSIX，windows，及其它某些系统中，该值就是 t2-t1。</td>\n    </tr>\n    <tr>\n        <td>4</td>\n        <td>os.execute([command])：该函数等价于 ANSI C 中的 system 函数。传递的参数 command 由操作系统的 shell 执行。如果命令成功结束，则返回的第一个值为 true，否则为 nil。</td>\n    </tr>\n    <tr>\n        <td>5</td>\n        <td>os.exit([code[,close]])：调用 ANSI C 的 exit 函数，结束程序。如果 code 为　true, 则返回状态为 EXIT_SUCESS；若 code 为 false,则返回状态为 EXIT_FAILURE。如果 code 为数值，则返回状态也就为该数值。</td>\n    </tr>\n    <tr>\n        <td>6</td>\n        <td>os.getenv(varname)：返回进程的环境变量 varname 的值，如果此环境变量没有定义则返回 nil。</td>\n    </tr>\n    <tr>\n        <td>7</td>\n        <td>os.remove(filename)：删除文件（或 POSIX 系统中的空目录）。如果函数失败，则返回 nil 以及描述错误的字符串与错误代码。</td>\n    </tr>\n    <tr>\n        <td>8</td>\n        <td>os.rename(oldname,newname)：重命名文件或目录。如果函数失败，则返回 nil 以及描述错误的字符串与错误代码。</td>\n    </tr>\n    <tr>\n        <td>9</td>\n        <td>os.setlocale(locale[,category])：设置程序当前的地区（locale），locale 是一个与操作系统相关的字符串。category 是一个可选的字符串，描述设置更改的范围，包括: all，collate，ctype，monetary，numeric，time。默认为 all。函数返回新地区的名称，如果函数调用失败则返回 nil。</td>\n    </tr>\n    <tr>\n        <td>10</td>\n        <td>os.time([table])：无参数时，返回当前时间；传入参数时，则返回指定参数表示的日期和时间。传入的参数必须包含以下的域:年、月、日。时（默认 12）、分（默认 0）、秒（默认 0）、isdst（默认 nil） 四个域是可选的。</td>\n    </tr>\n    <tr>\n        <td>11</td>\n        <td>os.tmpname()：返回一个可作为临时文件名的字符串。这个临时文件必须显式地打开，使用结束时也必须显式地删除。</td>\n    </tr>\n</table>\n\n<h2 id=\"常用的-OS-函数\"><a href=\"#常用的-OS-函数\" class=\"headerlink\" title=\"常用的 OS 函数\"></a>常用的 OS 函数</h2><p>示例如下：  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- 格式化日期</span><br><span class=\"line\">io.write(&quot;The date is &quot;, os.date(&quot;%m/%d/%Y&quot;),&quot;\\n&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">-- 日期与时间</span><br><span class=\"line\">io.write(&quot;The date and time is &quot;, os.date(),&quot;\\n&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">-- 时间</span><br><span class=\"line\">io.write(&quot;The OS time is &quot;, os.time(),&quot;\\n&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">-- 等待一段时间</span><br><span class=\"line\">for i=1,1000000 do</span><br><span class=\"line\">end</span><br><span class=\"line\"></span><br><span class=\"line\">-- Lua 启动的时长</span><br><span class=\"line\">io.write(&quot;Lua started before &quot;, os.clock(),&quot;\\n&quot;)</span><br><span class=\"line\">```  </span><br><span class=\"line\"></span><br><span class=\"line\">执行上面的程序，我们可以得到如下的输出结果： </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>The date is 01/25/2014<br>The date and time is 01/25/14 07:38:40<br>The OS time is 1390615720<br>Lua started before 0.013</p>\n<pre><code>\n上面的例子只是简单的说明了一下操作系统相关函数的使用，实际开发过程中，可以根据实际情况使用所有函数。可以多做一些练习熟悉上面所列出的函数。\n</code></pre>\n","text":"Lua 操作系统工具库在很多应用中，我们都需要访问到操作系统级别的函数，操作系统库就给我们提供了这样的工具。下面的列表给出操作系统工具包提供的方法： S.N. 函数与功能 1 os.clock()：以秒为单位返回程序运行所用 CPU 时间的近似值。 2 os.date([form...","link":"","photos":[],"count_time":{"symbolsCount":"2k","symbolsTime":"2 mins."},"categories":[{"name":"lua_guide","slug":"lua-guide","count":68,"path":"api/categories/lua-guide.json"}],"tags":[{"name":"lua","slug":"lua","count":153,"path":"api/tags/lua.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Lua-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%B7%A5%E5%85%B7%E5%BA%93\"><span class=\"toc-text\">Lua 操作系统工具库</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%B8%B8%E7%94%A8%E7%9A%84-OS-%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">常用的 OS 函数</span></a></li></ol></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Lua面向对象","uid":"a1b21463fc87d45dd3b0b4f9d1ff1b21","slug":"old-lua/2016-06-01-object-oriented","date":"2024-03-14T06:15:59.731Z","updated":"2024-03-14T06:15:59.731Z","comments":true,"path":"api/articles/old-lua/2016-06-01-object-oriented.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":null,"text":"Lua 面向对象面向对象概述面向对象编程技术是目前最常用的编程技术之一。目前大量的编程语言都支持面向对象的特性： C++ Java Objective-C Smalltalk C# Ruby 面向对象的特征 类（class）：类是可以创建对象，并为状态（成员变量）提供初值及行为实...","link":"","photos":[],"count_time":{"symbolsCount":"4.1k","symbolsTime":"4 mins."},"categories":[{"name":"lua_guide","slug":"lua-guide","count":68,"path":"api/categories/lua-guide.json"}],"tags":[{"name":"lua","slug":"lua","count":153,"path":"api/tags/lua.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"操作符","uid":"67d9d5e60b37525bc4954f8a5bb0acb9","slug":"old-lua/2016-06-01-operators","date":"2024-03-14T06:15:59.731Z","updated":"2024-03-14T06:15:59.731Z","comments":true,"path":"api/articles/old-lua/2016-06-01-operators.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":null,"text":"操作符操作符是用于告诉解释器执行特定的数学或逻辑运算的符号。Lua 语言有丰富的内置操作符，主要包括以下几类： 算术运算操作符 关系运算操作符 逻辑运算操作符 其它操作符 这篇教程将会依次介绍以上四类操作符。 算术去处操作符下面的表中列出了所有 Lua 语言支持的算术运算操作符。...","link":"","photos":[],"count_time":{"symbolsCount":"2.4k","symbolsTime":"2 mins."},"categories":[{"name":"lua_guide","slug":"lua-guide","count":68,"path":"api/categories/lua-guide.json"}],"tags":[{"name":"lua","slug":"lua","count":153,"path":"api/tags/lua.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}