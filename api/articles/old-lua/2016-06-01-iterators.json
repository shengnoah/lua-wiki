{"title":"Lua迭代器","uid":"eacf32e453764fca08d4d96ce1e78183","slug":"old-lua/2016-06-01-iterators","date":"2024-03-14T06:15:59.730Z","updated":"2024-03-14T06:15:59.730Z","comments":true,"path":"api/articles/old-lua/2016-06-01-iterators.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":null,"content":"<h1 id=\"Lua-迭代器\"><a href=\"#Lua-迭代器\" class=\"headerlink\" title=\"Lua 迭代器\"></a>Lua 迭代器</h1><p>迭代器是用于遍历集合或容器中元素的一种结构。在 Lua 语言中，集合往往指的是可以用来创建各种数据结构的表。比如，数组就是用表来创建的。  </p>\n<h2 id=\"通用迭代器\"><a href=\"#通用迭代器\" class=\"headerlink\" title=\"通用迭代器\"></a>通用迭代器</h2><p>通用迭代器可以访问集合中的键值对。下面是通用迭代器的一个简单例子：  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">array = &#123;&quot;Lua&quot;, &quot;Tutorial&quot;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">for key,value in ipairs(array) </span><br><span class=\"line\">do</span><br><span class=\"line\">   print(key, value)</span><br><span class=\"line\">end</span><br><span class=\"line\">```  </span><br><span class=\"line\"></span><br><span class=\"line\">执行的上面的代码，我们可以得到如下的输出结果：  </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>1  Lua<br>2  Tutorial</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">上面的例子中使用了 Lua 提供的默认迭代器函数 ipairs。 </span><br><span class=\"line\"> </span><br><span class=\"line\">在 Lua 语言中，我们使用函数表示迭代器。根据是否在迭代器函数中是否维护状态信息，我们将迭代器分为以下两类：  </span><br><span class=\"line\"></span><br><span class=\"line\">&lt;ul&gt;</span><br><span class=\"line\">\t&lt;li&gt;无状态迭代器&lt;/li&gt;  </span><br><span class=\"line\">\t&lt;li&gt;有状态迭代器&lt;/li&gt;</span><br><span class=\"line\">&lt;/ul&gt;  </span><br><span class=\"line\"></span><br><span class=\"line\">## 无状态迭代器  </span><br><span class=\"line\"></span><br><span class=\"line\">由此迭代器的名称就可以看出来，这一类的迭代器函数中不会保存任何中间状态。 </span><br><span class=\"line\"> </span><br><span class=\"line\">让我们一起来看一下下面这个例子。在这个例子中，我们用一个简单的函数创建了一个自己的迭代器。这个迭代器用以输出 n 个数的平方值。  </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>function square(iteratorMaxCount,currentNumber)<br>   if currentNumber&lt;iteratorMaxCount<br>   then<br>      currentNumber = currentNumber+1<br>   return currentNumber, currentNumber*currentNumber<br>   end<br>end</p>\n<p>for i,n in square,3,0<br>do<br>   print(i,n)<br>end</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">执行上面的代码，我们可以得到如下的输出结果：  </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>1    1<br>2    4<br>3    9</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">我们可以稍微的修改一下上面的代码，使得此迭代器可以像 ipairs 那样工作。如下所示：  </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>function square(iteratorMaxCount,currentNumber)<br>   if currentNumber&lt;iteratorMaxCount<br>   then<br>      currentNumber = currentNumber+1<br>   return currentNumber, currentNumber*currentNumber<br>   end<br>end</p>\n<p>function squares(iteratorMaxCount)<br>   return square,iteratorMaxCount,0<br>end  </p>\n<p>for i,n in squares(3)<br>do<br>    print(i,n)<br>end</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">执行上面的代码，我们可以得到如下的输出结果：  </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>1    1<br>2    4<br>3    9</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">## 有状态迭代器  </span><br><span class=\"line\"></span><br><span class=\"line\">前面的例子使用的迭代器函数是不保存状态的。每次调用迭代器函数时，函数基于传入函数的第二个变量访问集合的下一个元素。在 Lua 中可以使用闭包来存储当前元素的状态。闭包通过函数调用得到变量的值。为了创建一个新的闭包，我们需创建两个函数，包括闭包函数本身和一个工厂函数，其中工厂函数用于创建闭包。  </span><br><span class=\"line\"></span><br><span class=\"line\">下面的示例中，我们将使用闭包来创建我们的迭代器。  </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>array = {“Lua”, “Tutorial”}</p>\n<p>function elementIterator (collection)<br>   local index = 0<br>   local count = #collection<br>   – 返回闭包函数<br>   return function ()<br>      index = index + 1<br>      if index &lt;= count<br>      then<br>         – 返回迭代器的当前元素<br>         return collection[index]<br>      end<br>   end<br>end</p>\n<p>for element in elementIterator(array)<br>do<br>   print(element)<br>end</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">执行上面的代码，我们可以得到如下的输出结果：  </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>Lua<br>Tutorial</p>\n<p>```  </p>\n<p>上面的例子中我们可以看到，在　elementIterator 函数内定义了另外一个匿名函数。此匿名函数中使用了一个外部变量 index (译注：此变量在匿名函数之外，elementIterator 函数内)。每次内部的匿名函数被调用时，都会将 index 的值增加 1，并统计数返回的每个元素。 </p>\n<p>我们可以参照上面的方法使用闭包创建一个迭代器函数。每次我们使用迭代器遍历集合时，它都可以返回多个元素。</p>\n","text":"Lua 迭代器迭代器是用于遍历集合或容器中元素的一种结构。在 Lua 语言中，集合往往指的是可以用来创建各种数据结构的表。比如，数组就是用表来创建的。 通用迭代器通用迭代器可以访问集合中的键值对。下面是通用迭代器的一个简单例子： 12345678910array = &#123;...","link":"","photos":[],"count_time":{"symbolsCount":"2.1k","symbolsTime":"2 mins."},"categories":[{"name":"lua_guide","slug":"lua-guide","count":68,"path":"api/categories/lua-guide.json"}],"tags":[{"name":"lua","slug":"lua","count":153,"path":"api/tags/lua.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Lua-%E8%BF%AD%E4%BB%A3%E5%99%A8\"><span class=\"toc-text\">Lua 迭代器</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%80%9A%E7%94%A8%E8%BF%AD%E4%BB%A3%E5%99%A8\"><span class=\"toc-text\">通用迭代器</span></a></li></ol></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Lua中的 if...else 语句","uid":"90762206aba1aa8a729d07e471d48c2c","slug":"old-lua/2016-06-01-if-else-if-statement","date":"2024-03-14T06:15:59.730Z","updated":"2024-03-14T06:15:59.730Z","comments":true,"path":"api/articles/old-lua/2016-06-01-if-else-if-statement.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":null,"text":"#Lua 中的 if…else 语句 如果 if 语句后面跟上 else 语句，那么条件为假时就执行 else 语句的代码。 ##语法 Lua 语言中 if…else 语句的语法如下所示： 1234567891011121314151617if(boolean_expressio...","link":"","photos":[],"count_time":{"symbolsCount":"1.8k","symbolsTime":"2 mins."},"categories":[{"name":"lua_guide","slug":"lua-guide","count":68,"path":"api/categories/lua-guide.json"}],"tags":[{"name":"lua","slug":"lua","count":153,"path":"api/tags/lua.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"LUA的Loop循环","uid":"50b76913de0a7e15924d6b0f0dac6bf2","slug":"old-lua/2016-06-01-loop","date":"2024-03-14T06:15:59.730Z","updated":"2024-03-14T06:15:59.730Z","comments":true,"path":"api/articles/old-lua/2016-06-01-loop.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":[],"text":"循环 虽然一般情况下，语句都是顺序执行的：函数内的第一条语句先执行，然后是第二条，依次类推。 但是还是可能存在需要执行一段代码多次的情况。 为此编程语言提供各式各样的控制结构实现复杂的程序执行路径。 其中，循环语句可以让我们可以执行一条或一组语句多次。下图中所描述的是大多数语言中...","link":"","photos":[],"count_time":{"symbolsCount":884,"symbolsTime":"1 mins."},"categories":[{"name":"lua_guide","slug":"lua-guide","count":68,"path":"api/categories/lua-guide.json"}],"tags":[{"name":"LUA教程","slug":"LUA教程","count":8,"path":"api/tags/LUA教程.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}