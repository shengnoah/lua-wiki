{"title":"Lua面向对象","uid":"a1b21463fc87d45dd3b0b4f9d1ff1b21","slug":"old-lua/2016-06-01-object-oriented","date":"2024-03-14T07:45:09.098Z","updated":"2024-03-14T07:45:09.098Z","comments":true,"path":"api/articles/old-lua/2016-06-01-object-oriented.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<h1>Lua 面向对象</h1>\n<h2 id=\"面向对象概述\">面向对象概述</h2>\n<p>面向对象编程技术是目前最常用的编程技术之一。目前大量的编程语言都支持面向对象的特性：</p>\n<ul>\n\t<li>C++</li>\n\t<li>Java</li>\n\t<li>Objective-C</li>\n\t<li>Smalltalk</li>\n\t<li>C#</li>\n\t<li>Ruby</li>\n</ul>\n<h2 id=\"面向对象的特征\">面向对象的特征</h2>\n<ul>\n\t<li>类（class）：类是可以创建对象，并为状态（成员变量）提供初值及行为实现的可扩展模板。</li>\n\t<li>对象（objects）：对象是类的实例，每个对象都有独立的内存区域。</li>\n\t<li>继承（inheritance）：继承用于描述一个类的变量和函数被另一个类继承的行为。</li>\n\t<li>封装（encapsulation）：封装是指将数据和函数组织在一个类中。外部可以通过类的方法访问内中的数据。封装也被称之为数据抽象。</li>\n</ul>\n## Lua 中的面向对象  \n<p>在 Lua 中，我们可以使用表和函数实现面向对象。将函数和相关的数据放置于同一个表中就形成了一个对象。继承可以用元表实现，它提供了在父类中查找存在的方法和变量的机制。<br>\nLua 中的表拥有对象的特征，比如状态和独立于其值的标识。两个有相同值的对象（表）是两个不同的对象，但是一个对象在不同的时间可以拥有不同的值。与对象一样，表拥有独立于其创建者和创建位置的生命周期。</p>\n<h2 id=\"一个真实世界的例子\">一个真实世界的例子</h2>\n<p>面向对象已经是一个广泛使用的概念，但是你需要正确清楚地理解它。<br>\n让我们看一个数学方面的例子。我们经常需要处理各种形状，比如圆、矩形、正方形。<br>\n这些形状有一个共同的特征——面积。所以，所有其它的形状都可以从有一个公共特征——面积的基类扩展而来。每个对象都可以有它自己的特征和函数，比如矩阵有属性长、宽和面积，printArea 和 calculateArea 方法。</p>\n<h3 id=\"创建一个简单的类\">创建一个简单的类</h3>\n<p>下面例子实现了矩阵类的三个属性：面积、长和宽。它还同时实现了输出面积的函数 printArea。</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 元类</span></span><br><span class=\"line\">Rectangle = &#123;area = <span class=\"number\">0</span>, length = <span class=\"number\">0</span>, breadth = <span class=\"number\">0</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 继承类的方法 new</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Rectangle:new</span> <span class=\"params\">(o,length,breadth)</span></span></span><br><span class=\"line\">  o = o <span class=\"keyword\">or</span> &#123;&#125;</span><br><span class=\"line\">  <span class=\"built_in\">setmetatable</span>(o, <span class=\"built_in\">self</span>)</span><br><span class=\"line\">  <span class=\"built_in\">self</span>.<span class=\"built_in\">__index</span> = <span class=\"built_in\">self</span></span><br><span class=\"line\">  <span class=\"built_in\">self</span>.length = length <span class=\"keyword\">or</span> <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"built_in\">self</span>.breadth = breadth <span class=\"keyword\">or</span> <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"built_in\">self</span>.area = length*breadth;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> o</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 继承类的方法 printArea</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Rectangle:printArea</span> <span class=\"params\">()</span></span></span><br><span class=\"line\">  <span class=\"built_in\">print</span>(<span class=\"string\">&quot;The area of Rectangle is &quot;</span>,<span class=\"built_in\">self</span>.area)</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\">```  </span><br><span class=\"line\"></span><br><span class=\"line\">### 创建对象  </span><br><span class=\"line\"></span><br><span class=\"line\">创建对象即是为类的实例分配内存空间的过程。每个对象都有自己独立的内存区域，同时还会共享类的数据。  </span><br><span class=\"line\"></span><br><span class=\"line\">```lua</span><br><span class=\"line\">r = Rectangle:new(<span class=\"literal\">nil</span>,<span class=\"number\">10</span>,<span class=\"number\">20</span>)</span><br><span class=\"line\">```  </span><br><span class=\"line\"></span><br><span class=\"line\">### 访问属性</span><br><span class=\"line\"></span><br><span class=\"line\">我们可以使用点操作符访问类中属性。  </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>print(r.length)</p>\n<pre><code>\n### 访问成员方法  \n\n使用冒号操作符可以访问对象的成员方法，如下所示：  \n\n```lua\nr:printArea()\n</code></pre>\n<p>初始化阶段，调用函数为对象分配内存同时设置初值。这与其它与面向对象的语言中的构造器很相似。其实，构造器本身也就和上面的初始化代码一样，并没有什么特别之处。</p>\n<h2 id=\"完整的例子\">完整的例子</h2>\n<p>让我们一起看一个 Lua 实现面向对象的完整例子。</p>\n<pre><code class=\"language-lua\">-- 元类\nShape = &#123;area = 0&#125;\n\n-- 基类方法 new\nfunction Shape:new (o,side)\n  o = o or &#123;&#125;\n  setmetatable(o, self)\n  self.__index = self\n  side = side or 0\n  self.area = side*side;\n  return o\nend\n\n-- 基类方法 printArea\nfunction Shape:printArea ()\n  print(&quot;The area is &quot;,self.area)\nend\n\n-- 创建对象\nmyshape = Shape:new(nil,10)\n\nmyshape:printArea()\n</code></pre>\n<p>运行上面的程序，我们可以得到如下的输出结果：</p>\n<pre><code class=\"language-lua\">The area is \t100\n</code></pre>\n<h3 id=\"Lua-中的继承\">Lua 中的继承</h3>\n<p>继承就是从基对象扩展的过程，正如从图形扩展至矩形、正方形等等。在现实世界中，常用来共享或扩展某些共同的属性和方法。<br>\n让我们看一个简单的类扩展的例子。我们有如下的类：</p>\n<pre><code class=\"language-lua\"> -- 元类\nShape = &#123;area = 0&#125;\n-- 基类方法 new\nfunction Shape:new (o,side)\n  o = o or &#123;&#125;\n  setmetatable(o, self)\n  self.__index = self\n  side = side or 0\n  self.area = side*side;\n  return o\nend\n-- 基类方法 printArea\nfunction Shape:printArea ()\n  print(&quot;The area is &quot;,self.area)\nend\n</code></pre>\n<p>我们从上面的类中扩展出正方形类，如下所示：</p>\n<pre><code class=\"language-lua\">Square = Shape:new()\n-- 继承类方法 new\nfunction Square:new (o,side)\n  o = o or Shape:new(o,side)\n  setmetatable(o, self)\n  self.__index = self\n  return o\nend\n</code></pre>\n<h3 id=\"重写基类的函数\">重写基类的函数</h3>\n<p>继承类可以重写基类的方法，从而根据自己的实际情况实现功能。示例代码如下所示：</p>\n<pre><code class=\"language-lua\">-- 继承方法 printArea\nfunction Square:printArea ()\n  print(&quot;The area of square is &quot;,self.area)\nend\n</code></pre>\n<h2 id=\"继承的完整示例\">继承的完整示例</h2>\n<p>在元表的帮助下，我们可以使用新的 new 方法实现类的扩展（继承）。子类中保存了所有基类的成员变量和方法。</p>\n<pre><code class=\"language-lua\">-- Meta class\nShape = &#123;area = 0&#125;\n-- Base class method new\nfunction Shape:new (o,side)\n  o = o or &#123;&#125;\n  setmetatable(o, self)\n  self.__index = self\n  side = side or 0\n  self.area = side*side;\n  return o\nend\n-- Base class method printArea\nfunction Shape:printArea ()\n  print(&quot;The area is &quot;,self.area)\nend\n\n-- Creating an object\nmyshape = Shape:new(nil,10)\nmyshape:printArea()\n\nSquare = Shape:new()\n-- Derived class method new\nfunction Square:new (o,side)\n  o = o or Shape:new(o,side)\n  setmetatable(o, self)\n  self.__index = self\n  return o\nend\n\n-- Derived class method printArea\nfunction Square:printArea ()\n  print(&quot;The area of square is &quot;,self.area)\nend\n\n-- Creating an object\nmysquare = Square:new(nil,10)\nmysquare:printArea()\n\nRectangle = Shape:new()\n-- Derived class method new\nfunction Rectangle:new (o,length,breadth)\n  o = o or Shape:new(o)\n  setmetatable(o, self)\n  self.__index = self\n  self.area = length * breadth\n  return o\nend\n\n-- Derived class method printArea\nfunction Rectangle:printArea ()\n  print(&quot;The area of Rectangle is &quot;,self.area)\nend\n\n-- Creating an object\nmyrectangle = Rectangle:new(nil,10,20)\nmyrectangle:printArea()\n</code></pre>\n<p>运行上面的程序，我们可以得到如下的输出结果：</p>\n<pre><code class=\"language-lua\">The area is \t100\nThe area of square is \t100\nThe area of Rectangle is \t200\n</code></pre>\n<p>上面的例子中，我们继承基类 Shape 创建了两个子类 Rectange 与 Square。在子类中可以重写基类提供的方法。在这个例子中，子类重写了 printArea 方法。</p>\n","text":"Lua 面向对象 面向对象概述 面向对象编程技术是目前最常用的编程技术之一。目前大量的编程语言都支持面向对象的特性： C++ Java Objective-C Smalltalk C# Ruby 面向对象的特征 类（class）：类是可以创建对象，并为状态（成员变量）提供初值及行...","link":"","photos":[],"count_time":{"symbolsCount":"4.1k","symbolsTime":"4 mins."},"categories":[{"name":"lua_guide","slug":"lua-guide","count":68,"path":"api/categories/lua-guide.json"}],"tags":[{"name":"lua","slug":"lua","count":153,"path":"api/tags/lua.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\"><span class=\"toc-text\">Lua 面向对象</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E6%A6%82%E8%BF%B0\"><span class=\"toc-text\">面向对象概述</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%89%B9%E5%BE%81\"><span class=\"toc-text\">面向对象的特征</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%80%E4%B8%AA%E7%9C%9F%E5%AE%9E%E4%B8%96%E7%95%8C%E7%9A%84%E4%BE%8B%E5%AD%90\"><span class=\"toc-text\">一个真实世界的例子</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E7%B1%BB\"><span class=\"toc-text\">创建一个简单的类</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AE%8C%E6%95%B4%E7%9A%84%E4%BE%8B%E5%AD%90\"><span class=\"toc-text\">完整的例子</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Lua-%E4%B8%AD%E7%9A%84%E7%BB%A7%E6%89%BF\"><span class=\"toc-text\">Lua 中的继承</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%87%8D%E5%86%99%E5%9F%BA%E7%B1%BB%E7%9A%84%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">重写基类的函数</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%BB%A7%E6%89%BF%E7%9A%84%E5%AE%8C%E6%95%B4%E7%A4%BA%E4%BE%8B\"><span class=\"toc-text\">继承的完整示例</span></a></li></ol></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"","uid":"f73a8e23e6f6f669cf99c7dba8fa0722","slug":"old-lua/2016-06-01-Home","date":"2024-03-14T07:45:09.098Z","updated":"2024-03-14T07:45:09.098Z","comments":true,"path":"api/articles/old-lua/2016-06-01-Home.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"Lua基础教程 permalink: /lua_guide/Home/ ","link":"","photos":[],"count_time":{"symbolsCount":36,"symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Lua运行环境","uid":"1c92a7bccc4e1c860aee5220573c9c25","slug":"old-lua/2016-06-01-environment","date":"2024-03-14T07:45:09.097Z","updated":"2024-03-14T07:45:09.098Z","comments":true,"path":"api/articles/old-lua/2016-06-01-environment.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"Lua 运行环境 本地环境搭建 在本地搭建 Lua 编程语言的开发运行环境，你需要在你的计算机上安装如下三个软件：(1) 文本编辑器。(2) Lua 解释器。（3）Lua 编译器。 文本编辑器 文本编辑器用来编辑你的程序代码。有如下几款常用的文本编辑器软件：Windows not...","link":"","photos":[],"count_time":{"symbolsCount":"2k","symbolsTime":"2 mins."},"categories":[{"name":"lua_guide","slug":"lua-guide","count":68,"path":"api/categories/lua-guide.json"}],"tags":[{"name":"lua","slug":"lua","count":153,"path":"api/tags/lua.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}