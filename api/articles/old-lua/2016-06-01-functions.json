{"title":"Lua函数","uid":"4b8da2e6835e8f700ba371a83ecbe6ab","slug":"old-lua/2016-06-01-functions","date":"2024-03-14T06:15:59.730Z","updated":"2024-03-14T06:15:59.730Z","comments":true,"path":"api/articles/old-lua/2016-06-01-functions.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":null,"content":"<h1 id=\"Lua-函数\"><a href=\"#Lua-函数\" class=\"headerlink\" title=\"Lua 函数\"></a>Lua 函数</h1><p>函数用于将一组语句组合起来完成一个任务。你可以将你的代码分割到不同的函数中。如何将你的代码分到不同的函数中完全由你自己决定，不过一般会按照逻辑功能进行划分，每个函数都执行一个特定的任务。 </p>\n<p>在 Lua 中提供了大量的内置函数供我们使用。例如，print() 函数用于将输入的参数输出到终端。 </p>\n<p>函数往往也被称作方法，子例程或过程等等。  </p>\n<h2 id=\"函数定义\"><a href=\"#函数定义\" class=\"headerlink\" title=\"函数定义\"></a>函数定义</h2><p>Lua 中函数定义的语法如下所示：　　</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">optional_function_scope function function_name( argument1, argument2, argument3..., argumentn)</span><br><span class=\"line\">function_body</span><br><span class=\"line\">return result_params_comma_separated</span><br><span class=\"line\">end</span><br><span class=\"line\">```  </span><br><span class=\"line\"></span><br><span class=\"line\">Lua 中函数定义包括函数头和函数名两部分。如下列出函数的所有部分：  </span><br><span class=\"line\"></span><br><span class=\"line\">&lt;ul&gt;</span><br><span class=\"line\">\t&lt;li&gt;可选的函数作用域：你可以使用关键字 local 限制函数的作用域，你也可以忽略此部分而使用默认值。函数作用域默认是全局。&lt;/li&gt;</span><br><span class=\"line\">\t&lt;li&gt;函数名：函数的真正名称。函数名与函数的参数列表一起被称为函数签名。&lt;/li&gt;</span><br><span class=\"line\">\t&lt;li&gt;参数：一个参数就一个占位符一样。函数调用时，把值传递给参数。这个值被称之为实际参数或直参数。参数列表指参数的类型，顺序与数量。参数是可选的，一个函数可以没有参数。&lt;/li&gt;</span><br><span class=\"line\">\t&lt;li&gt;函数体：函数体是代码语句集合，定义了函数的功能。&lt;/li&gt;</span><br><span class=\"line\">\t&lt;li&gt;返回：在 Lua 中，可以使用 return 关键字同时返回多返回值，每个返回值之间使用逗号分隔。&lt;/li&gt;</span><br><span class=\"line\">&lt;/ul&gt;  </span><br><span class=\"line\"></span><br><span class=\"line\">## 示例  </span><br><span class=\"line\"></span><br><span class=\"line\">下面是函数 max() 源代码。此函数接受两个参数 num1 与 num2，返回两个输入参数的最大值。  </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>–[[ function returning the max between two numbers –]]<br>function max(num1, num2)</p>\n<p>   if (num1 &gt; num2) then<br>      result = num1;<br>   else<br>      result = num2;<br>   end</p>\n<p>   return result;<br>end</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">## 函数参数  </span><br><span class=\"line\"></span><br><span class=\"line\">如果函数需要用到参数，则它必须声明接受参数值的变量。这些被声明的变量被称为函数的形式参数或简称形参。 </span><br><span class=\"line\"> </span><br><span class=\"line\">函数的形参与函数中其它局部变量一样，在函数的入口处被创建，函数结束时被销毁。  </span><br><span class=\"line\"></span><br><span class=\"line\">## 调用函数  </span><br><span class=\"line\"></span><br><span class=\"line\">创建函数的时候，我们已经定义了函数做什么。接下来，我们就可以调用函数来完成已定义的任务或功能。</span><br><span class=\"line\">  </span><br><span class=\"line\">当程序中调用一个函数时，程序的控制转移到被调用的函数中。被调用的函数执行定义的任务；当 return 语句被执行或者到达函数末尾时，程序的控制回到主程序中。  </span><br><span class=\"line\"> </span><br><span class=\"line\">调用函数的方法很简单，你只需要将函数要求的参数传递给函数就可以实现函数的调用。如果函数有返回值，你也可以将函数的返回值存储下来。如下如示：  </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>function max(num1, num2)<br>   if (num1 &gt; num2) then<br>      result = num1;<br>   else<br>      result = num2;<br>   end</p>\n<p>   return result;<br>end</p>\n<p>– 调用函数<br>print(“The maximum of the two numbers is “,max(10,4))<br>print(“The maximum of the two numbers is “,max(5,6))</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">执行上面的代码，可以得到如下的输出结果：  </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>The maximum of the two numbers is     10<br>The maximum of the two numbers is     6</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">## 赋值与传递函数  </span><br><span class=\"line\"></span><br><span class=\"line\">在 Lua 语言中，我们可以将函数赋值给一个变量，也可以将函数作为参数传递给另外一个函数。下面是赋值传递函数的一个例子：  </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>myprint = function(param)<br>   print(“This is my print function -   ##”,param,”##”)<br>end</p>\n<p>function add(num1,num2,functionPrint)<br>   result = num1 + num2<br>   functionPrint(result)<br>end<br>myprint(10)<br>add(2,5,myprint)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">执行上面的代码，可以得到如下的输出结果：  </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>This is my print function -   ##    10    ##<br>This is my print function -   ##    7    ##</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">## 变参函数  </span><br><span class=\"line\"></span><br><span class=\"line\">在 Lua 语言中，使用 ... 作为参数可以创建参数个数可变的函数，即变参函数。我们可以使用下面的这个例子来理解变参函数的概念。下面的这个例子中函数返回输入参数的平均值：  </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>function average(…)<br>   result = 0<br>   local arg={…}<br>   for i,v in ipairs(arg) do<br>      result = result + v<br>   end<br>   return result/#arg<br>end</p>\n<p>print(“The average is”,average(10,5,3,4,5,6))</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">执行上面的代码，可以得到如下的输出结果：  </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>The average is    5.5<br>``` </p>\n","text":"Lua 函数函数用于将一组语句组合起来完成一个任务。你可以将你的代码分割到不同的函数中。如何将你的代码分到不同的函数中完全由你自己决定，不过一般会按照逻辑功能进行划分，每个函数都执行一个特定的任务。 在 Lua 中提供了大量的内置函数供我们使用。例如，print() 函数用于将输...","link":"","photos":[],"count_time":{"symbolsCount":"2.4k","symbolsTime":"2 mins."},"categories":[{"name":"lua_guide","slug":"lua-guide","count":68,"path":"api/categories/lua-guide.json"}],"tags":[{"name":"lua","slug":"lua","count":153,"path":"api/tags/lua.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Lua-%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">Lua 函数</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%87%BD%E6%95%B0%E5%AE%9A%E4%B9%89\"><span class=\"toc-text\">函数定义</span></a></li></ol></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Lua文件I/O","uid":"7cdf9755b9d268215aaceca81f7a3596","slug":"old-lua/2016-06-01-file-io1","date":"2024-03-14T06:15:59.730Z","updated":"2024-03-14T06:15:59.730Z","comments":true,"path":"api/articles/old-lua/2016-06-01-file-io1.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":null,"text":"Lua 文件 I/OLua 的 IO 库用于读取或操作文件。Lua IO 库提供两类文件操作，它们分别是隐式文件描述符(implict file descriptors)和显式文件描述符(explicit file descriptors)。 在接下来的例子的，我们会用到一个示例...","link":"","photos":[],"count_time":{"symbolsCount":"3.9k","symbolsTime":"4 mins."},"categories":[{"name":"lua_guide","slug":"lua-guide","count":68,"path":"api/categories/lua-guide.json"}],"tags":[{"name":"lua","slug":"lua","count":153,"path":"api/tags/lua.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Lua游戏开发","uid":"0574a789cafc1558adcaaf40b641bfb0","slug":"old-lua/2016-06-01-game-programming","date":"2024-03-14T06:15:59.730Z","updated":"2024-03-14T06:15:59.730Z","comments":true,"path":"api/articles/old-lua/2016-06-01-game-programming.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":null,"text":"Lua 游戏开发Lua 语言因其结构和语法的简洁性而在各类游戏引擎中被广泛使用。游戏对图形画面要求非常苛刻，这无疑需消耗大量的内存空间，而这些内存空间的管理是非常棘手的问题。Lua 语言有自动的垃圾回收机制，这种自动化的内存管理机制也使得 Lua 受到游戏引擎开发者的青睐。著名的...","link":"","photos":[],"count_time":{"symbolsCount":"2k","symbolsTime":"2 mins."},"categories":[{"name":"lua_guide","slug":"lua-guide","count":68,"path":"api/categories/lua-guide.json"}],"tags":[{"name":"lua","slug":"lua","count":153,"path":"api/tags/lua.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}