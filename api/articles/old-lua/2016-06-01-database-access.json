{"title":"Lua数据库访问","uid":"5593d949c022c9556ceb62d288c587d5","slug":"old-lua/2016-06-01-database-access","date":"2024-03-14T06:15:59.729Z","updated":"2024-03-14T06:15:59.729Z","comments":true,"path":"api/articles/old-lua/2016-06-01-database-access.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":null,"content":"<h1 id=\"Lua-数据库访问\"><a href=\"#Lua-数据库访问\" class=\"headerlink\" title=\"Lua 数据库访问\"></a>Lua 数据库访问</h1><p>简单的数据操作，我们用文件就可以处理。但是，某些时候文件操作存在性能、扩展性等问题。这时候，我们就需要使用数据库。LuaSQL 是一个提供数据库操作的库，它支持多种 SQL 数据库的操作。包括：  </p>\n<ul>\n    <li>SQLite</li>\n    <li>MySQL</li>\n    <li>ODBC</li>\n</ul>  \n在本教程中，我们会讲解用 Lua 语言对 MySQL 数据库与 SQLite 数据库进行操作。这些操作具有一般性，它们也可以移植到其它类型 SQL 数据库中。首先让我们看一下如何操作 MySQL 数据库。  \n\n<h2 id=\"MySQL-数据库环境设置\"><a href=\"#MySQL-数据库环境设置\" class=\"headerlink\" title=\"MySQL 数据库环境设置\"></a>MySQL 数据库环境设置</h2><p>为了下面的例子可以正确演示，我们需要首先初始化数据库设置。我们假设你已经完成了如下的工作：  </p>\n<ul>\n    <li>安装 MySQL 数据库，使用默认用户名 root， 默认密码为： 123456。</li>\n    <li>已经创建数据库 test。</li>\n    <li>已经阅读过关于 MySQL 的基本教程，并掌握了 MySQL 的基本知识。</li>\n</ul>  \n\n<h2 id=\"导入-MySQL\"><a href=\"#导入-MySQL\" class=\"headerlink\" title=\"导入 MySQL\"></a>导入 MySQL</h2><p>假设你已经安装配置正确了，那么我们可以使用 require 语句导入 sqlite 库。安装过程中会产生一个存储数据相关文件的目录 libsql。  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql = require &quot;luasql.mysql&quot;</span><br><span class=\"line\">```  </span><br><span class=\"line\"></span><br><span class=\"line\">我们可以通过 mysql 变量访问 luasql.mysql 中的 mysql 表，该表中存存储数据库操作相关的函数。</span><br><span class=\"line\"></span><br><span class=\"line\">### 建立连接 </span><br><span class=\"line\"></span><br><span class=\"line\">先初始化 MySQL 的环境，再建立一个连接。如下所示：  </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>local env  = mysql.mysql()<br>local conn = env:connect(‘test’,’root’,’123456’)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">上面的程序会与已存在的 MySQL 数据库 test 建立连接。</span><br><span class=\"line\"></span><br><span class=\"line\">### 执行函数</span><br><span class=\"line\"></span><br><span class=\"line\">LuaSQL 库中有一个 execute 函数，此函数可以完成所有数据加操作，包括创建、插入、更新等操作。其语法如下所示：  </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>conn:execute([[ ‘MySQLSTATEMENT’ ]])</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">执行上面的语句这前，我们需要保证与 MySQL 数据库的连接 conn 是打开的，同时将 MySQLSTATEMENT 更改为合法的 SQL 语句。  </span><br><span class=\"line\"></span><br><span class=\"line\">### 创建表</span><br><span class=\"line\"></span><br><span class=\"line\">下面的示例演示如何创建一个数据库表。例子中为表创建了两个属性分别为 id 和 name，其类型分别为整数和 vchar。  </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>mysql = require “luasql.mysql”</p>\n<p>local env  = mysql.mysql()<br>local conn = env:connect(‘test’,’root’,’123456’)<br>print(env,conn)</p>\n<p>status,errorString = conn:execute([[CREATE TABLE sample2 (id INTEGER, name TEXT);]])<br>print(status,errorString )</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">运行上面的程序后，数据库中创建了一个表 sample，该表有两列，属性名分别为 id 和 name。</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>MySQL environment (004BB178)    MySQL connection (004BE3C8)<br>0    nil</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">如果发生错误，则函数将返回一个错误消息，成功执行则返回 nil。下面是错误消息的一个例子：  </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>LuaSQL: Error executing query. MySQL: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near ‘“id INTEGER, name TEXT)’ at line 1</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">### 插入语句  </span><br><span class=\"line\"></span><br><span class=\"line\">ＭySQL 插入语句的示例如下所示：  </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p> conn:execute([[INSERT INTO sample values(‘11’,’Raj’)]])</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">### 更新语句  </span><br><span class=\"line\"></span><br><span class=\"line\">ＭySQL 更新语句的示例如下所示：  </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>conn:execute([[UPDATE sample3 SET name=’John’ where id =’12’]])</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">### 删除语句  </span><br><span class=\"line\"></span><br><span class=\"line\">ＭySQL 删除语句的示例如下所示：  </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>conn:execute([[DELETE from sample3 where id =’12’]])</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">### 查找语句   </span><br><span class=\"line\"></span><br><span class=\"line\">成功查找返回后，我们需要循环遍历返回的所有行以取得我们需要的数据。查找语句的示例如下：  </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>cursor,errorString = conn:execute([[select * from sample]])<br>row = cursor:fetch ({}, “a”)<br>while row do<br>  print(string.format(“Id: %s, Name: %s”, row.id, row.name))<br>  – reusing the table of results<br>  row = cursor:fetch (row, “a”)<br>end</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">上面的代码中，我们先打开了一个 MySQL 连接。通过 execute 函数返回的游标(cursor)，我们可以使用游标遍历返回的表，取得我们查找的数据。</span><br><span class=\"line\"></span><br><span class=\"line\">### 完整示例  </span><br><span class=\"line\"></span><br><span class=\"line\">下面这个例子用到了所有上面提到的数据的操作函数，请看下面这个完整的例子：  </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>mysql = require “luasql.mysql”</p>\n<p>local env  = mysql.mysql()<br>local conn = env:connect(‘test’,’root’,’123456’)<br>print(env,conn)</p>\n<p>status,errorString = conn:execute([[CREATE TABLE sample3 (id INTEGER, name TEXT)]])<br>print(status,errorString )</p>\n<p>status,errorString = conn:execute([[INSERT INTO sample3 values(‘12’,’Raj’)]])<br>print(status,errorString )</p>\n<p>cursor,errorString = conn:execute([[select * from sample3]])<br>print(cursor,errorString)</p>\n<p>row = cursor:fetch ({}, “a”)<br>while row do<br>  print(string.format(“Id: %s, Name: %s”, row.id, row.name))<br>  row = cursor:fetch (row, “a”)<br>end<br>– close everything<br>cursor:close()<br>conn:close()</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">运行上面的程序，我们可以得到如下的输出结果：  </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>MySQL environment (0037B178)    MySQL connection (0037EBA8)<br>0    nil<br>1    nil<br>MySQL cursor (003778A8)    nil<br>Id: 12, Name: Raj</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">## 执行事务  </span><br><span class=\"line\"></span><br><span class=\"line\">事务是数据库中保证数据一致性的一种机制。事务有以下四个性质：  </span><br><span class=\"line\">&lt;ul&gt;</span><br><span class=\"line\">\t&lt;li&gt;原子性：一个事务要么全部执行要么全部不执行。&lt;/li&gt;</span><br><span class=\"line\">\t&lt;li&gt;一致性：事务开始前数据库是一致状态，事务结束后数据库状态也应该是一致的。&lt;/li&gt;</span><br><span class=\"line\">\t&lt;li&gt;隔离性：多个事务并发访问时，事务之间是隔离的，一个事务的中间状态不能被其它事务可见。&lt;/li&gt;</span><br><span class=\"line\">\t&lt;li&gt;持久性： 在事务完成以后，该事务所对数据库所做的更改便持久的保存在数据库之中，并不会被回滚。&lt;/li&gt;\t</span><br><span class=\"line\">&lt;/ul&gt;</span><br><span class=\"line\">事务以 START_TRANSACTION 开始，以 提交（commit）或 回滚（rollback）语句结束。  </span><br><span class=\"line\"></span><br><span class=\"line\">### 事务开始  </span><br><span class=\"line\"></span><br><span class=\"line\">为了初始化一个事务，我们需要先打开一个 MySQL 连接，再执行如下的语句：  </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>conn:execute([[START TRANSACTION;]])</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">### 事务回滚  </span><br><span class=\"line\"></span><br><span class=\"line\">当需要取消事务执行时，我们需要执行如下的语句回滚至更改前的状态。</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>conn:execute([[ROLLBACK;]])</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">### 提交事务  </span><br><span class=\"line\"></span><br><span class=\"line\">开始执行事务后，我们需要使用 commit 语句提交完成的修改内容。</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>conn:execute([[COMMIT;]])</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">前面我们已经了解了 MySQL 的基本知识。接下来，我们将解释一下基本的  SQL 操作。请记住事务的概念，虽然我们在 SQLite3 中我们不在解释它，但是它的概念在 SQLite3 中同样适用。  </span><br><span class=\"line\"></span><br><span class=\"line\">## 导入 SQLite </span><br><span class=\"line\"></span><br><span class=\"line\">假设你已经安装配置正确了，那么就可以使用 require 语句导入 sqlite 库。安装过程中会产生一个存储数据相关文件的目录 libsql。  </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p> sqlite3 = require “luasql.sqlite3”</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">通过 sqlite3 变量可以访问提供的所有数据库操作相关函数。  </span><br><span class=\"line\"></span><br><span class=\"line\">### 建立连接  </span><br><span class=\"line\"></span><br><span class=\"line\">我们先初始化 sqlite 环境，然后为该环境创建一个连接。语法如下：  </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>local env  = sqlite3.sqlite3()<br>local conn = env:connect(‘mydb.sqlite’)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">上面的代码会与一个 sqlite 文件建立连接，如果文件不存在则创建新的 sqlite 文件并与该新文件建立连接。  </span><br><span class=\"line\"></span><br><span class=\"line\">### 执行函数  </span><br><span class=\"line\"></span><br><span class=\"line\">LuaSQL 库中有一个 execute 函数，此函数可以完成所有数据加操作，包括创建、插入、更新等操作。其语法如下所示：  </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>conn:execute([[ ‘SQLite3STATEMENT’ ]])</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">执行上面的语句这前，我们需要保证与 MySQL 数据库的连接 conn 是打开的，同时将 SQLite3STATEMENT 更改为合法的 SQL 语句。  </span><br><span class=\"line\"></span><br><span class=\"line\">### 创建表</span><br><span class=\"line\"></span><br><span class=\"line\">下面的示例演示如何创建一个数据库表。例子中为表创建了两个属性分别为 id 和 name，其类型分别为整数和 vchar。  </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>sqlite3 = require “luasql.sqlite3”</p>\n<p>local env  = sqlite3.sqlite3()<br>local conn = env:connect(‘mydb.sqlite’)<br>print(env,conn)</p>\n<p>status,errorString = conn:execute([[CREATE TABLE sample (‘id’ INTEGER, ‘name’ TEXT)]])<br>print(status,errorString )</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">运行上面的程序后，数据库中创建了一个表 sample，该表有两列，属性名分别为 id 和 name。</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>SQLite3 environment (003EC918)    SQLite3 connection (00421F08)<br>0    nil</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">如果发生错误，则函数将而一个错误消息；若成功执行则返回 nil。下面是错误消息的一个例子：  </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>LuaSQL: unrecognized token: “”‘id’ INTEGER, ‘name’ TEXT)”</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">### 插入语句  </span><br><span class=\"line\"></span><br><span class=\"line\">插入语句的示例如下所示：  </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p> conn:execute([[INSERT INTO sample values(‘11’,’Raj’)]])</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">### 查找语句   </span><br><span class=\"line\"></span><br><span class=\"line\">查找返回后，我们需要循环遍历每行以取得我们需要的数据。查找语句的示例如下：  </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>cursor,errorString = conn:execute([[select * from sample]])<br>row = cursor:fetch ({}, “a”)<br>while row do<br>  print(string.format(“Id: %s, Name: %s”, row.id, row.name))<br>  – reusing the table of results<br>  row = cursor:fetch (row, “a”)<br>end</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">上面的代码中，我们先打开了一个 sqlite3 连接。通过 execute 函数返回的游标(cursor)，我们可以遍历返回的表，以取得我们查找的数据。</span><br><span class=\"line\"></span><br><span class=\"line\">### 完整示例  </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">下面这个例子用到了所有上面提到的数据的操作函数，请看下面这个完整的例子： </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>sqlite3 = require “luasql.sqlite3”</p>\n<p>local env  = sqlite3.sqlite3()<br>local conn = env:connect(‘mydb.sqlite’)<br>print(env,conn)</p>\n<p>status,errorString = conn:execute([[CREATE TABLE sample (‘id’ INTEGER, ‘name’ TEXT)]])<br>print(status,errorString )</p>\n<p>status,errorString = conn:execute([[INSERT INTO sample values(‘1’,’Raj’)]])<br>print(status,errorString )</p>\n<p>cursor,errorString = conn:execute([[select * from sample]])<br>print(cursor,errorString)</p>\n<p>row = cursor:fetch ({}, “a”)<br>while row do<br>  print(string.format(“Id: %s, Name: %s”, row.id, row.name))<br>  row = cursor:fetch (row, “a”)<br>end<br>– close everything<br>cursor:close()<br>conn:close()<br>env:close()</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">运行上面的程序，我们可以得到如下的输出结果：  </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>SQLite3 environment (005EC918)    SQLite3 connection (005E77B0)<br>0    nil<br>1    nil<br>SQLite3 cursor (005E9200)    nil<br>Id: 1, Name: Raj</p>\n<pre><code>\n使用 libsql 库我们可以执行所有的数据库操作。所以，看完这些例子后，请自己多做一些练习。\n</code></pre>\n","text":"Lua 数据库访问简单的数据操作，我们用文件就可以处理。但是，某些时候文件操作存在性能、扩展性等问题。这时候，我们就需要使用数据库。LuaSQL 是一个提供数据库操作的库，它支持多种 SQL 数据库的操作。包括： SQLite MySQL ODBC 在本教程中，我们会讲解用 Lu...","link":"","photos":[],"count_time":{"symbolsCount":"6.2k","symbolsTime":"6 mins."},"categories":[{"name":"lua_guide","slug":"lua-guide","count":68,"path":"api/categories/lua-guide.json"}],"tags":[{"name":"lua","slug":"lua","count":153,"path":"api/tags/lua.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Lua-%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BF%E9%97%AE\"><span class=\"toc-text\">Lua 数据库访问</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#MySQL-%E6%95%B0%E6%8D%AE%E5%BA%93%E7%8E%AF%E5%A2%83%E8%AE%BE%E7%BD%AE\"><span class=\"toc-text\">MySQL 数据库环境设置</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AF%BC%E5%85%A5-MySQL\"><span class=\"toc-text\">导入 MySQL</span></a></li></ol></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Lua协程","uid":"bce3027296f15638c976f1ebef15c96b","slug":"old-lua/2016-06-01-coroutines","date":"2024-03-14T06:15:59.729Z","updated":"2024-03-14T06:15:59.729Z","comments":true,"path":"api/articles/old-lua/2016-06-01-coroutines.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":null,"text":"Lua 协程概述协程具有协同的性质，它允许两个或多个方法以某种可控的方式协同工作。在任何一个时刻，都只有一个协程在运行，只有当正在运行的协程主动挂起时它的执行才会被挂起（暂停）。 上面的定义可能看上去比较模糊。接下来让我讲得很清楚一点，假设我们有两个方法，一个是主程序方法，另一个...","link":"","photos":[],"count_time":{"symbolsCount":"3.9k","symbolsTime":"4 mins."},"categories":[{"name":"lua_guide","slug":"lua-guide","count":68,"path":"api/categories/lua-guide.json"}],"tags":[{"name":"lua","slug":"lua","count":153,"path":"api/tags/lua.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Lua调试","uid":"374513b04e64d95f7bc41ddb08581b8d","slug":"old-lua/2016-06-01-debugging","date":"2024-03-14T06:15:59.729Z","updated":"2024-03-14T06:15:59.729Z","comments":true,"path":"api/articles/old-lua/2016-06-01-debugging.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":null,"text":"Lua 调试Lua 提供一个调试库，这个库中提供了创建自己的调试器所需的所有原语函数。虽然，Lua 没有内置调试器，但是开发者们为 Lua 开发了许多的开源调试器。 Lua 调试库包括的函数如下表所示。 S.N. 方法和描述 1 debug():进入交互式调试模式，在此模式下用户...","link":"","photos":[],"count_time":{"symbolsCount":"4.3k","symbolsTime":"4 mins."},"categories":[{"name":"lua_guide","slug":"lua-guide","count":68,"path":"api/categories/lua-guide.json"}],"tags":[{"name":"lua","slug":"lua","count":153,"path":"api/tags/lua.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}