{"title":"Lua中的 if...else 语句","uid":"90762206aba1aa8a729d07e471d48c2c","slug":"old-lua/2016-06-01-if-else-if-statement","date":"2024-03-14T06:15:59.730Z","updated":"2024-03-14T06:15:59.730Z","comments":true,"path":"api/articles/old-lua/2016-06-01-if-else-if-statement.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":null,"content":"<p>#Lua 中的 if…else 语句  </p>\n<p>如果 if 语句后面跟上 else 语句，那么条件为假时就执行 else 语句的代码。  </p>\n<p>##语法  </p>\n<p>Lua 语言中 if…else 语句的语法如下所示：  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if(boolean_expression)</span><br><span class=\"line\">then</span><br><span class=\"line\">   --[ 如何条件为真，则执行此处代码。 --]</span><br><span class=\"line\">else</span><br><span class=\"line\">   --[ 如何条件为假，则执行此处代码。 --]</span><br><span class=\"line\">end</span><br><span class=\"line\">```  </span><br><span class=\"line\"></span><br><span class=\"line\">当布尔表达式为真时，执行 if 语句的代码块；如果条件为假时，则执行 else 语句的代码块。  </span><br><span class=\"line\">Lua 语言中所有布尔真与非 nil 的组合的结果被当作真，而布尔假与 nil 组合被当作假。值得注意的是，Lua 中零被当作真，这一点与其它大部分语言不一样。</span><br><span class=\"line\"></span><br><span class=\"line\">##流程图  </span><br><span class=\"line\"></span><br><span class=\"line\">![](http://www.tutorialspoint.com/lua/images/if_else_statement.jpg)  </span><br><span class=\"line\"></span><br><span class=\"line\">##示例  </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>–[ 定义局部变量 –]<br>a = 100;<br>–[ 检查条件 –]<br>if( a &lt; 20 )<br>then<br>   –[ 如果条件为真，则输出如下内容 –]<br>   print(“a is less than 20” )<br>else<br>   –[ 如果条件为假，则输出如下内容 –]<br>   print(“a is not less than 20” )<br>end<br>print(“value of a is :”, a)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">执行上面的代码则可以得到如下的输出结果：  </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>a is not less than 20<br>value of a is :    100</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">##if...else if...else 语句  </span><br><span class=\"line\"></span><br><span class=\"line\">if 语句后可以选择跟上 else if...else 语句。该语句对于检测多个条件时非常有用。  </span><br><span class=\"line\">使用 if，else if 以及 else 时，请注意以下三点：  </span><br><span class=\"line\">&lt;ul&gt;</span><br><span class=\"line\">\t&lt;li&gt;if 语句后面至多可以有一个 else 语句。如果有　else if,则此 else 语句必须在 else if 语句之后。&lt;/li&gt;</span><br><span class=\"line\">\t&lt;li&gt;if 语句之后可以有多零个或多个 else if，但是这些 else if 必须在　else 语句之前。&lt;/li&gt;</span><br><span class=\"line\">\t&lt;li&gt;如果一个 if 语句的条件为真时，其后的所有剩余的 else 和 else if 的都不会再执行，也不会测试它们的条件真假。&lt;/li&gt;</span><br><span class=\"line\">&lt;/ul&gt;  </span><br><span class=\"line\"></span><br><span class=\"line\">##语法  </span><br><span class=\"line\"></span><br><span class=\"line\">Lua 中 if...else if...else 语句的语法规则如下：  </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>if(boolean_expression 1)<br>then<br>   –[ 如果布尔表达式 1 为真时，则执行此处代码。–]</p>\n<p>else if( boolean_expression 2)<br>   –[ 如果布尔表达式 2 为真时，则执行此处代码。 –]</p>\n<p>else if( boolean_expression 3)<br>   –[ 如果布尔表达式 3为真时，则执行此处代码。 –]<br>else<br>   –[ 当上面所有布尔表达式条件都为假时执行此处代码。–]<br>end</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">##示例  </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>–[ 定义局部变量 –]<br>a = 100<br>–[ 检查布尔条件 –]<br>if( a == 10 )<br>then<br>   –[ 条件为真时输出如下内容 –]<br>   print(“Value of a is 10” )<br>elseif( a == 20 )<br>then<br>   –[ if else if 条件为真时 –]<br>   print(“Value of a is 20” )<br>elseif( a == 30 )<br>then<br>   –[ if else if 条件为真时 –]<br>   print(“Value of a is 30” )<br>else<br>   –[ 如果上述条件全部为假时 –]<br>   print(“None of the values is matching” )<br>end<br>print(“Exact value of a is: “, a )</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  </span><br><span class=\"line\">执行上面的代码将得到如下的输出结果：  </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>None of the values is matching<br>Exact value of a is:    100</p>\n<pre><code>\n</code></pre>\n","text":"#Lua 中的 if…else 语句 如果 if 语句后面跟上 else 语句，那么条件为假时就执行 else 语句的代码。 ##语法 Lua 语言中 if…else 语句的语法如下所示： 1234567891011121314151617if(boolean_expressio...","link":"","photos":[],"count_time":{"symbolsCount":"1.8k","symbolsTime":"2 mins."},"categories":[{"name":"lua_guide","slug":"lua-guide","count":68,"path":"api/categories/lua-guide.json"}],"tags":[{"name":"lua","slug":"lua","count":153,"path":"api/tags/lua.json"}],"toc":"","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Lua垃圾回收机制","uid":"a34942b7e84e08a52441ea25cc5475d6","slug":"old-lua/2016-06-01-garbage-collection","date":"2024-03-14T06:15:59.730Z","updated":"2024-03-14T06:15:59.730Z","comments":true,"path":"api/articles/old-lua/2016-06-01-garbage-collection.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":null,"text":"Lua 垃圾回收机制Lua 通过特定算法的垃圾回收机制实现自动内存管理。由于自动内存管理机制的存在，作为程序开发人员： 不需要关心对象的内存分配问题。 不再使用对象时，除了将引用它的变量设为 nil，不需要主动释放对象。 Lua 的垃圾回收器会不断运行去收集不再被 Lua 程序访...","link":"","photos":[],"count_time":{"symbolsCount":"1.8k","symbolsTime":"2 mins."},"categories":[{"name":"lua_guide","slug":"lua-guide","count":68,"path":"api/categories/lua-guide.json"}],"tags":[{"name":"lua","slug":"lua","count":153,"path":"api/tags/lua.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Lua迭代器","uid":"eacf32e453764fca08d4d96ce1e78183","slug":"old-lua/2016-06-01-iterators","date":"2024-03-14T06:15:59.730Z","updated":"2024-03-14T06:15:59.730Z","comments":true,"path":"api/articles/old-lua/2016-06-01-iterators.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":null,"text":"Lua 迭代器迭代器是用于遍历集合或容器中元素的一种结构。在 Lua 语言中，集合往往指的是可以用来创建各种数据结构的表。比如，数组就是用表来创建的。 通用迭代器通用迭代器可以访问集合中的键值对。下面是通用迭代器的一个简单例子： 12345678910array = &#123;...","link":"","photos":[],"count_time":{"symbolsCount":"2.1k","symbolsTime":"2 mins."},"categories":[{"name":"lua_guide","slug":"lua-guide","count":68,"path":"api/categories/lua-guide.json"}],"tags":[{"name":"lua","slug":"lua","count":153,"path":"api/tags/lua.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}