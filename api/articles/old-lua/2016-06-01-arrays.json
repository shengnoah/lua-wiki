{"title":"数组","uid":"e16187d7a3c490f96b788338bdd79d24","slug":"old-lua/2016-06-01-arrays","date":"2024-03-14T06:15:59.729Z","updated":"2024-03-14T06:15:59.729Z","comments":true,"path":"api/articles/old-lua/2016-06-01-arrays.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":null,"content":"<h1 id=\"Lua-数组\"><a href=\"#Lua-数组\" class=\"headerlink\" title=\"Lua 数组\"></a>Lua 数组</h1><p>数组是一组有序的对象排列，既可以是一维的也可以是多维的。  </p>\n<p>在 Lua 语言中，数组是用整数索引表实现的。数组的大小并不固定，随着数组元素的增加，它可以动态地增加内存空间大小。  </p>\n<h2 id=\"一维数组\"><a href=\"#一维数组\" class=\"headerlink\" title=\"一维数组\"></a>一维数组</h2><p>一维数组可以使用一个简单的表结构表示。可以通过一个简单循环初始化数组或者读取数组中数据。示例代码如下所示：  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">array = &#123;&quot;Lua&quot;, &quot;Tutorial&quot;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">for i= 0, 2 do</span><br><span class=\"line\">   print(array[i])</span><br><span class=\"line\">end</span><br><span class=\"line\">```  </span><br><span class=\"line\"></span><br><span class=\"line\">执行上面的代码可以得到如下的输出结果：  </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>nil<br>Lua<br>Tutorial</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">从上面的例子中可以看出，当我们尝试着访问数组中一个不存在的索引时，会得到 nil 值。 Lua 语言与 C 语言不同，Lua 数组的索引是从 1 开始的，而 C 语言中索引是从 0 开始的。不过呢，你也可以在索引值为 0 或小于 0 的位置创建对象。下面的代码演示了如何使用负索引值创建并初始化数组：  </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>array = {}</p>\n<p>for i= -2, 2 do<br>   array[i] = i *2<br>end</p>\n<p>for i = -2,2 do<br>   print(array[i])<br>end</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">执行上面的代码可以得到如下的输出结果：  </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>-4<br>-2<br>0<br>2<br>4</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">## 多维数组  </span><br><span class=\"line\"></span><br><span class=\"line\">多维数组有以下两种实现方式：  </span><br><span class=\"line\">&lt;ol&gt;</span><br><span class=\"line\">\t&lt;li&gt;数组的数组（译注：数组的每一个元素是一个数组）。&lt;/li&gt;</span><br><span class=\"line\">\t&lt;li&gt;修改一维数组的索引值（译注：将多维数组映射到一维数组中）。&lt;/li&gt;</span><br><span class=\"line\">&lt;/ol&gt;  </span><br><span class=\"line\"></span><br><span class=\"line\">使用方法一创建 3x3 的二维数组：  </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>– 初始化数组<br>array = {}<br>for i=1,3 do<br>   array[i] = {}<br>      for j=1,3 do<br>         array[i][j] = i*j<br>      end<br>end</p>\n<p>– 访问数组元素<br>for i=1,3 do<br>   for j=1,3 do<br>      print(array[i][j])<br>   end<br>end</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">执行上面的代码可以得到如下的输出结果：  </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>1<br>2<br>3<br>2<br>4<br>6<br>3<br>6<br>9</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">通过修改数组的的索引值实现 3x3 的二维数组，示例代码如下:  </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>– 初始化数组<br>array = {}<br>maxRows = 3<br>maxColumns = 3<br>for row=1,maxRows do<br>   for col=1,maxColumns do<br>      array[row<em>maxColumns +col] = row</em>col<br>   end<br>end</p>\n<p>– 访问数组元素<br>for row=1,maxRows do<br>   for col=1,maxColumns do<br>      print(array[row*maxColumns +col])<br>   end<br>end</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">执行上面的代码可以得到如下的输出结果：  </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>1<br>2<br>3<br>2<br>4<br>6<br>3<br>6<br>9</p>\n<p>```  </p>\n<p>正如从上面例子中所看到的那样，数组中数据是基于索引存储的。这使得数组可以以稀疏的方式存储，这也是 Lua 矩阵的存储方式。正是因为 Lua 中不会存储 nil 值，所以 Lua　不需要使用任何特殊的技术就可以节约大量的空间，这一点在其它语言中是做不到的。</p>\n","text":"Lua 数组数组是一组有序的对象排列，既可以是一维的也可以是多维的。 在 Lua 语言中，数组是用整数索引表实现的。数组的大小并不固定，随着数组元素的增加，它可以动态地增加内存空间大小。 一维数组一维数组可以使用一个简单的表结构表示。可以通过一个简单循环初始化数组或者读取数组中数...","link":"","photos":[],"count_time":{"symbolsCount":"1.4k","symbolsTime":"1 mins."},"categories":[{"name":"Lua","slug":"Lua","count":3,"path":"api/categories/Lua.json"},{"name":"Arrays","slug":"Lua/Arrays","count":1,"path":"api/categories/Lua/Arrays.json"}],"tags":[{"name":"Arrays","slug":"Arrays","count":1,"path":"api/tags/Arrays.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Lua-%E6%95%B0%E7%BB%84\"><span class=\"toc-text\">Lua 数组</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%80%E7%BB%B4%E6%95%B0%E7%BB%84\"><span class=\"toc-text\">一维数组</span></a></li></ol></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"","uid":"f73a8e23e6f6f669cf99c7dba8fa0722","slug":"old-lua/2016-06-01-README","date":"2024-03-14T06:15:59.729Z","updated":"2024-03-14T06:15:59.729Z","comments":true,"path":"api/articles/old-lua/2016-06-01-README.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":null,"text":"Lua 中文指南permalink: /lua_guide/README/Lua 语言是基于 C 语言之上的开源编程语言。它的价值在于其跨平台的特性，从大型服务器系统到小型移动应用都可以看到它的身影。 这篇教程不仅包括 Lua 编程语言的基本知识，还包括 Lua 语言在各类应用场...","link":"","photos":[],"count_time":{"symbolsCount":365,"symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Lua基本语法","uid":"9b97fd5c58ceb41de2e73474e4dfb1f8","slug":"old-lua/2016-06-01-basic-syntax","date":"2024-03-14T06:15:59.729Z","updated":"2024-03-14T06:15:59.729Z","comments":true,"path":"api/articles/old-lua/2016-06-01-basic-syntax.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":null,"text":"基本语法Lua 学起来非常简单。现在，让我们开始创建我们的第一个 Lua 程序吧！ 第一个 Lua 程序Lua 提供交互式编程模式。在这个模式下，你可以一条一条地输入命令，然后立即就可以得到结果。你可以在 shell 中使用 lua -i 或者 lua 命令启动。输入命令后，按下...","link":"","photos":[],"count_time":{"symbolsCount":"2.2k","symbolsTime":"2 mins."},"categories":[{"name":"lua_guide","slug":"lua-guide","count":68,"path":"api/categories/lua-guide.json"}],"tags":[{"name":"lua","slug":"lua","count":153,"path":"api/tags/lua.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}