{"title":"Lua文件I/O","uid":"7cdf9755b9d268215aaceca81f7a3596","slug":"old-lua/2016-06-01-file-io","date":"2024-03-14T07:45:09.105Z","updated":"2024-03-14T07:45:09.105Z","comments":true,"path":"api/articles/old-lua/2016-06-01-file-io.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<h1>Lua 文件 I/O</h1>\n<p>Lua 的 IO 库用于读取或操作文件。Lua IO 库提供两类文件操作，它们分别是隐式文件描述符(implict file descriptors)和显式文件描述符(explicit file descriptors)。</p>\n<p>在接下来的例子的，我们会用到一个示例文件 test.lua，文件内容如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- sample test.lua</span><br><span class=\"line\">-- sample2 test.lua</span><br><span class=\"line\">```  </span><br><span class=\"line\"></span><br><span class=\"line\">简单的打开文件操作可以用如下的语句完成。  </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>file = io.open (filename [, mode])</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">可选的打开文件的模式如下表所示。  </span><br><span class=\"line\"></span><br><span class=\"line\">&lt;table&gt;</span><br><span class=\"line\">\t&lt;tr&gt;</span><br><span class=\"line\">\t\t&lt;th&gt;模式&lt;/th&gt;</span><br><span class=\"line\">\t\t&lt;th&gt;描述&lt;/th&gt;</span><br><span class=\"line\">\t&lt;/tr&gt;</span><br><span class=\"line\">\t&lt;tr&gt;</span><br><span class=\"line\">\t\t&lt;td&gt;&quot;r&quot;&lt;/td&gt;</span><br><span class=\"line\">\t\t&lt;td&gt;只读模式，这也是对已存在的文件的默认打开模式。&lt;/td&gt;</span><br><span class=\"line\">\t&lt;/tr&gt;</span><br><span class=\"line\">\t&lt;tr&gt;</span><br><span class=\"line\">\t\t&lt;td&gt;&quot;w&quot;&lt;/td&gt;</span><br><span class=\"line\">\t\t&lt;td&gt;可写模式，允许修改已经存在的文件和创建新文件。&lt;/td&gt;</span><br><span class=\"line\">\t&lt;/tr&gt;</span><br><span class=\"line\">\t&lt;tr&gt;</span><br><span class=\"line\">\t\t&lt;td&gt;&quot;a&quot;&lt;/td&gt;</span><br><span class=\"line\">\t\t&lt;td&gt;追加模式，对于已存的文件允许追加新内容，但不允许修改原有内容，同时也可以创建新文件。&lt;/td&gt;</span><br><span class=\"line\">\t&lt;/tr&gt;</span><br><span class=\"line\">\t&lt;tr&gt;</span><br><span class=\"line\">\t\t&lt;td&gt;&quot;r+&quot;&lt;/td&gt;</span><br><span class=\"line\">\t\t&lt;td&gt;读写模式打开已存的在文件。&lt;/td&gt;</span><br><span class=\"line\">\t&lt;/tr&gt;</span><br><span class=\"line\">\t&lt;tr&gt;</span><br><span class=\"line\">\t\t&lt;td&gt;&quot;w+&quot;&lt;/td&gt;</span><br><span class=\"line\">\t\t&lt;td&gt;如果文件已存在则删除文件中数据；若文件不存在则新建文件。读写模式打开。&lt;/td&gt;</span><br><span class=\"line\">\t&lt;/tr&gt;</span><br><span class=\"line\">\t&lt;tr&gt;</span><br><span class=\"line\">\t\t&lt;td&gt;&quot;a+&quot;&lt;/td&gt;</span><br><span class=\"line\">\t\t&lt;td&gt;以可读的追加模式打开已存在文件，若文件不存在则新建文件。&lt;/td&gt;</span><br><span class=\"line\">\t&lt;/tr&gt;</span><br><span class=\"line\">&lt;/table&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">## 隐式文件描述符  </span><br><span class=\"line\"></span><br><span class=\"line\">隐式文件描述符使用标准输入输出模式或者使用单个输入文件和输出文件。使用隐匿文件描述符的示例代码如下：  </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>– 只读模式打开文件<br>\nfile = io.open(“test.lua”, “r”)</p>\n<p>– 将 test.lua 设置为默认输入文件<br>\nio.input(file)</p>\n<p>–打印输出文件的第一行<br>\nprint(io.read())</p>\n<p>– 关闭打开的文件<br>\nio.close(file)</p>\n<p>– 以追加模式打开文件<br>\nfile = io.open(“test.lua”, “a”)</p>\n<p>– 将 test.lua 设置为默认的输出文件<br>\nio.output(file)</p>\n<p>– 将内容追加到文件最后一行<br>\nio.write(“-- End of the test.lua file”)</p>\n<p>– 关闭打开的文件<br>\nio.close(file)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">执行上面的程序，我们可以看到输出了 test.lua 文件的第一行。在本例中，输出的结果为：  </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>Sample test.lua</p>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">输出的内容是 test.lua 文件中的第一行。“-- End of the test.lua file” 他会被追加到 test.lua 文件的最后一行。  </span><br><span class=\"line\"></span><br><span class=\"line\">从上面的例子中，你可以看到隐式的描述述如何使用 io.&quot;x&quot;  方法与文件系统交互。上面的例子使用 io.read() 函数时没有使用可选参数。此函数的可选参数包括：  </span><br><span class=\"line\"></span><br><span class=\"line\">&lt;table&gt;</span><br><span class=\"line\">\t&lt;tr&gt;</span><br><span class=\"line\">\t\t&lt;th&gt;模式&lt;/th&gt;</span><br><span class=\"line\">\t\t&lt;th&gt;描述&lt;/th&gt;</span><br><span class=\"line\">\t&lt;/tr&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;tr&gt;</span><br><span class=\"line\">\t\t&lt;td&gt;&quot;*n&quot;&lt;/td&gt;</span><br><span class=\"line\">\t\t&lt;td&gt;从文件当前位置读入一个数字，如果该位置不为数字则返回 nil。&lt;/td&gt;</span><br><span class=\"line\">\t&lt;/tr&gt;</span><br><span class=\"line\">\t&lt;tr&gt;</span><br><span class=\"line\">\t\t&lt;td&gt;&quot;*a&quot;&lt;/td&gt;</span><br><span class=\"line\">\t\t&lt;td&gt;读入从当前文件指针位置开始的整个文件内容。&lt;/td&gt;</span><br><span class=\"line\">\t&lt;/tr&gt;</span><br><span class=\"line\">\t&lt;tr&gt;</span><br><span class=\"line\">\t\t&lt;td&gt;&quot;*i&quot;&lt;/td&gt;</span><br><span class=\"line\">\t\t&lt;td&gt;读入当前行。&lt;/td&gt;</span><br><span class=\"line\">\t&lt;/tr&gt;</span><br><span class=\"line\">\t&lt;tr&gt;</span><br><span class=\"line\">\t\t&lt;td&gt;number&lt;/td&gt;</span><br><span class=\"line\">\t\t&lt;td&gt;读入指定字节数的内容。&lt;/td&gt;</span><br><span class=\"line\">\t&lt;/tr&gt;</span><br><span class=\"line\">&lt;/table&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">另外一些常用的方法：</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;ul&gt;</span><br><span class=\"line\">\t&lt;li&gt;io.tmpfile():返回一个可读写的临时文件，程序结束时该文件被自动删除。&lt;/li&gt;</span><br><span class=\"line\">\t&lt;li&gt;io.type(file):检测输入参数是否为可用的文件句柄。返回 &quot;file&quot; 表示一个打开的句柄；“closed file” 表示已关闭的句柄；nil 表示不是文件句柄。&lt;/li&gt;</span><br><span class=\"line\">\t&lt;li&gt;io.flush():清空输出缓冲区。&lt;/li&gt;</span><br><span class=\"line\">\t&lt;li&gt;io.lines(optional file name): 返回一个通用循环迭代器以遍历文件，每次调用将获得文件中的一行内容,当到文件尾时，将返回nil。若显示提供了文件句柄，则结束时自动关闭文件；使用默认文件时，结束时不会自动关闭文件。&lt;/li&gt;</span><br><span class=\"line\">&lt;/ul&gt;  </span><br><span class=\"line\"></span><br><span class=\"line\">## 显示文件描述符  </span><br><span class=\"line\"></span><br><span class=\"line\">我们也会经常用到显示文件描述符，因为它允许我们同时操作多个文件。这些函数与隐式文件描述符非常相似，只不过我们在这儿使用 file:function_name 而不是使用 io.function_name 而已。下面的例子使用显示文件描述符实现了与前面例子中完全相同的功能。  </span><br><span class=\"line\">　</span><br></pre></td></tr></table></figure>\n<p>– 只读模式打开文件<br>\nfile = io.open(“test.lua”, “r”)</p>\n<p>– 输出文件的第一行<br>\nprint(file:read())</p>\n<p>– 关闭打开的文件<br>\nfile:close()</p>\n<p>– 以追加模式打开文件<br>\nfile = io.open(“test.lua”, “a”)</p>\n<p>– 添加内容到文件的尾行<br>\nfile:write(“–test”)</p>\n<p>– 关闭打开的文件<br>\nfile:close()</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">执行上面的程序，我们可以得到与前面使用隐式文件描述符类似的输出结果：  </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>– Sample test.lua</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">在显式文件描述符中，打开文件的描述与读文件时的参数与隐式文件描述中的完全相同。另外的常用方法包括：</span><br><span class=\"line\">&lt;ul&gt;</span><br><span class=\"line\">\t&lt;li&gt;file:seek(option whence,option offset)：此函数用于移动文件指针至新的位置。参数 whence 可以设置为 “set”，&quot;cur&quot;,&quot;end&quot;，offset 为一个偏移量值，描述相对位置。如果第一个参数为 &quot;set&quot;，则相对位置从文件开始处开始计算；如果第一个参数为 &quot;cur&quot;，则相对位置从文件当前位置处开始计算； 如果第一个参数为 &quot;end&quot;，则相对位置从文件末尾处开始计算。函数的参数默认值分别为 &quot;cur&quot; 和 ０，因此不传递参数调用此函数可以获得文件的当前位置。&lt;/li&gt;</span><br><span class=\"line\">\t&lt;li&gt;file:flush()：清空输出缓冲区。&lt;/li&gt;</span><br><span class=\"line\">\t&lt;li&gt;io.lines(optional file name)：提供一个循环迭代器以遍历文件，如果指定了文件名则当遍历结束后将自动关闭该文件；若使用默认文件，则遍历结束后不会自动关闭文件。&lt;/li&gt;</span><br><span class=\"line\">&lt;/ul&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">下面的例子演示 seek 函数的使用方法。它将文件指针从文件末尾向前移动 25。并使用 read 函数从该位置出输出剩余的文件内容。  </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>– Opens a file in read<br>\nfile = io.open(“test.lua”, “r”)</p>\n<p>file:seek(“end”,-25)<br>\nprint(file:read(“*a”))</p>\n<p>– closes the opened file<br>\nfile:close()</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">执行上的面的程序，你可以得到类似下面的输出结果：  </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>sample2 test.lua<br>\n–test</p>\n<pre><code>\n你还可以尝试不同的参数了解更多的 Lua 文件操作方法。\n</code></pre>\n","text":"Lua 文件 I/O Lua 的 IO 库用于读取或操作文件。Lua IO 库提供两类文件操作，它们分别是隐式文件描述符(implict file descriptors)和显式文件描述符(explicit file descriptors)。 在接下来的例子的，我们会用到一个示...","link":"","photos":[],"count_time":{"symbolsCount":"4k","symbolsTime":"4 mins."},"categories":[{"name":"lua_guide","slug":"lua-guide","count":68,"path":"api/categories/lua-guide.json"}],"tags":[{"name":"lua","slug":"lua","count":153,"path":"api/tags/lua.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\"><span class=\"toc-text\">Lua 文件 I&#x2F;O</span></a></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"数组","uid":"e16187d7a3c490f96b788338bdd79d24","slug":"old-lua/2016-06-01-arrays","date":"2024-03-14T07:45:09.105Z","updated":"2024-03-14T07:45:09.106Z","comments":true,"path":"api/articles/old-lua/2016-06-01-arrays.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"Lua 数组 数组是一组有序的对象排列，既可以是一维的也可以是多维的。 在 Lua 语言中，数组是用整数索引表实现的。数组的大小并不固定，随着数组元素的增加，它可以动态地增加内存空间大小。 一维数组 一维数组可以使用一个简单的表结构表示。可以通过一个简单循环初始化数组或者读取数组...","link":"","photos":[],"count_time":{"symbolsCount":"1.4k","symbolsTime":"1 mins."},"categories":[{"name":"Lua","slug":"Lua","count":3,"path":"api/categories/Lua.json"},{"name":"Arrays","slug":"Lua/Arrays","count":1,"path":"api/categories/Lua/Arrays.json"}],"tags":[{"name":"Arrays","slug":"Arrays","count":1,"path":"api/tags/Arrays.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Lua数学函数库","uid":"3f4bda6307129cf6a3004f8fe27cd085","slug":"old-lua/2016-06-01-math-library","date":"2024-03-14T07:45:09.105Z","updated":"2024-03-14T07:45:09.105Z","comments":true,"path":"api/articles/old-lua/2016-06-01-math-library.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"Lua 数学函数库 在科学计算与工程计算领域，我们都需要用到大量的数学函数。在 Lua 的数学库提供了大量的数学函数，如下表所示： S.N. 函数与功能 1 math.abs(x)：返回 x 的绝对值。 2 math.acos(x)：返回 x 的反余弦值（弧度）。 3 math....","link":"","photos":[],"count_time":{"symbolsCount":"3.3k","symbolsTime":"3 mins."},"categories":[{"name":"lua_guide","slug":"lua-guide","count":68,"path":"api/categories/lua-guide.json"}],"tags":[{"name":"lua","slug":"lua","count":153,"path":"api/tags/lua.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}