{"title":"Lua基本语法","uid":"9b97fd5c58ceb41de2e73474e4dfb1f8","slug":"old-lua/2016-06-01-basic-syntax","date":"2024-03-14T07:45:09.099Z","updated":"2024-03-14T07:45:09.100Z","comments":true,"path":"api/articles/old-lua/2016-06-01-basic-syntax.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<h1>基本语法</h1>\n<p>Lua 学起来非常简单。现在，让我们开始创建我们的第一个 Lua 程序吧！</p>\n<h2 id=\"第一个-Lua-程序\">第一个 Lua 程序</h2>\n<p>Lua 提供交互式编程模式。在这个模式下，你可以一条一条地输入命令，然后立即就可以得到结果。你可以在 shell 中使用 lua -i 或者 lua 命令启动。输入命令后，按下回车键，就启动了交互模式，显示如下:</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ lua -i </span><br><span class=\"line\">$ Lua <span class=\"number\">5.1</span><span class=\"number\">.4</span>  Copyright (C) <span class=\"number\">1994</span><span class=\"number\">-2008</span> Lua.org, PUC-Rio</span><br><span class=\"line\">quit to <span class=\"keyword\">end</span>; cd, dir <span class=\"keyword\">and</span> edit also available</span><br></pre></td></tr></table></figure>\n<p>你可以使用如下命令打印输出：</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$&gt; <span class=\"built_in\">print</span>(<span class=\"string\">&quot;test&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p>按下回车键后，你会得到如下输出结果：</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#x27;test&#x27;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"默认模式编辑\">默认模式编辑</h2>\n<p>使用 Lua 文件做为解释器的参数启动解释器,然后开始执行文件直到文件结束。当脚本执行结束后，解释器就不在活跃了。</p>\n<p>让我们写一个简单的 Lua 程序。所有的 Lua　文件都扩展名都是<code>.lua</code>。因此，将下面的源代码放到 test.lua 文件中。</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;test&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p>假如你已经设置好 Lua 程序的环境，用下面的命令运行程序：</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ lua test.lua</span><br></pre></td></tr></table></figure>\n<p>我们会得到如下的输出结果：</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test</span><br></pre></td></tr></table></figure>\n<p>让我们尝试使用另外的方式运行 Lua 程序。下面是修改后的 test.lua 文件：</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/usr/<span class=\"keyword\">local</span>/bin/lua</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;test&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p>这里，我们假设你的 Lua 解释器程序在 /usr/local/bin/lua 目录下。test.lua 文件中第一行由于以 # 开始而被解释器忽略，运行这个程序可以得到如下的结果：</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ chmod a+rx test.lua</span><br><span class=\"line\">$./test.lua</span><br></pre></td></tr></table></figure>\n<p>我们会得到如下的的输出结果：</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test</span><br></pre></td></tr></table></figure>\n<p>接下来让我们看一下 Lua 程序的基本结构。这样，你可以更容易理解 Lua 编程语言的基本结构单元。</p>\n<h2 id=\"Lua-中的符号\">Lua 中的符号</h2>\n<p>Lua 程序是由大量的符号组成的。这些符号可以分为关键字、标识符、常量、字符串常量几类。例如，下面的 Lua 语句中包含三个符号：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">io.write(&quot;Hello world, from &quot;,_VERSION,&quot;!\\n&quot;)</span><br></pre></td></tr></table></figure>\n<p>这三个符号分别是:</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">io</span>.<span class=\"built_in\">write</span></span><br><span class=\"line\">(</span><br><span class=\"line\"><span class=\"string\">&quot;Hello world, from &quot;</span>,<span class=\"built_in\">_VERSION</span>,<span class=\"string\">&quot;!\\n&quot;</span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<h3 id=\"注释\">注释</h3>\n<p>注释就是 Lua 程序中的帮助文档，Lua 解释器会自动忽略它们。所有注释都以 --[[ 开始，并以 --]]结束。如下所示：</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--[[ my first program in Lua --]]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"标识符\">标识符</h3>\n<p>Lua 中标识符是识别变量、函数或者其它用户自定义项的名字。标符识总是以字母或者下划线开始，其后可以是零个或多个字母、下划线或数字。<br>\nLua 标识符中不允许出现任何标点符号，比如，@，$ 或者 %。Lua 是大小写敏感的语言，因此 Manpower 和 manpower 是 Lua 中两个不同的标识符。下面所列的是一些合法标识符的例子。</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mohd         zara      abc     move_name    a_123</span><br><span class=\"line\">myname50     _temp     j       a23b9        retVal</span><br></pre></td></tr></table></figure>\n<h3 id=\"关键字\">关键字</h3>\n<p>下面列表中所示的是 Lua 中一小部分保留字。这些保留字不能用作常量、变量以及任何标识符的名字。</p>\n<table>\n\t<tr>\n\t<td>and</td>\n\t<td>break</td>\n\t<td>do</td>\n\t<td>else</td>\n\t</tr>\n\t<tr>\n\t<td>elseif</td>\n\t<td>end</td>\n\t<td>false</td>\n\t<td>for</td>\n\t</tr>\n\t<tr>\n\t<td>function</td>\n\t<td>if</td>\n\t<td>in</td>\n\t<td>local</td>\n\t</tr>\n\t<tr>\n\t<td>nil</td>\n\t<td>not</td>\n\t<td>or</td>\n\t<td>repeat</td>\n\t</tr>\n\t<tr>\n\t<td>return</td>\n\t<td>then</td>\n\t<td>true</td>\n\t<td>until</td>\n\t</tr>\n\t<tr>\n\t<td>while</td>\n\t<td></td>\n\t<td></td>\n\t<td></td>\n\t</tr>\n</table>\n<h3 id=\"Lua-中的空白符\">Lua 中的空白符</h3>\n<p>如果 Lua 程序中某一行只包含空格或者注释，那么这样的一行被称之为空行。 Lua 解释器将完全忽略这一行。<br>\n在 Lua 中，空白是用来描述空格、制表符、换行符和注释的术语。空白符用于将语句中的一部分与其它部分区分开，使得解释器可以语句中的一个元素，比如 int，何处结束，以及另一个元素从何处开始。因此，在下面的语句中：</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">local</span> age</span><br></pre></td></tr></table></figure>\n<p>在 local 与 age 之间至少有一个空白符（通常是空格）,这个空白符使得解释器可以将 local 与 age 区分开。另一方面，在下面的语句中：</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fruit = apples + oranges   <span class=\"comment\">--get the total fruit</span></span><br></pre></td></tr></table></figure>\n<p>fruit 与 = 之间以及 = 与 apples 之间的空白符都是可以没有的。但是为了程序的可读性目的，建议你在它们之间使用空白符。</p>\n","text":"基本语法 Lua 学起来非常简单。现在，让我们开始创建我们的第一个 Lua 程序吧！ 第一个 Lua 程序 Lua 提供交互式编程模式。在这个模式下，你可以一条一条地输入命令，然后立即就可以得到结果。你可以在 shell 中使用 lua -i 或者 lua 命令启动。输入命令后，...","link":"","photos":[],"count_time":{"symbolsCount":"2.1k","symbolsTime":"2 mins."},"categories":[{"name":"lua_guide","slug":"lua-guide","count":68,"path":"api/categories/lua-guide.json"}],"tags":[{"name":"lua","slug":"lua","count":153,"path":"api/tags/lua.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\"><span class=\"toc-text\">基本语法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E4%B8%80%E4%B8%AA-Lua-%E7%A8%8B%E5%BA%8F\"><span class=\"toc-text\">第一个 Lua 程序</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%BB%98%E8%AE%A4%E6%A8%A1%E5%BC%8F%E7%BC%96%E8%BE%91\"><span class=\"toc-text\">默认模式编辑</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Lua-%E4%B8%AD%E7%9A%84%E7%AC%A6%E5%8F%B7\"><span class=\"toc-text\">Lua 中的符号</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B3%A8%E9%87%8A\"><span class=\"toc-text\">注释</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%A0%87%E8%AF%86%E7%AC%A6\"><span class=\"toc-text\">标识符</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%85%B3%E9%94%AE%E5%AD%97\"><span class=\"toc-text\">关键字</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Lua-%E4%B8%AD%E7%9A%84%E7%A9%BA%E7%99%BD%E7%AC%A6\"><span class=\"toc-text\">Lua 中的空白符</span></a></li></ol></li></ol></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Lua表","uid":"038bf88a1c7598385fc79ad2a48f60ba","slug":"old-lua/2016-06-01-tables","date":"2024-03-14T07:45:09.100Z","updated":"2024-03-14T07:45:09.101Z","comments":true,"path":"api/articles/old-lua/2016-06-01-tables.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"Lua 表 在 Lua 语言中，表是唯一可以用来创建不同数据类型的数据结构，比如常见的数组和字典都是用表来创建的。 Lua 语言中经常到关联数组这种数据类型，它不仅可以用数值作为索引值，除了 nil 以外的字符串同样可以作为其索引。表没有固定的大小，当数据量增加时表会自动增大。 ...","link":"","photos":[],"count_time":{"symbolsCount":"4.1k","symbolsTime":"4 mins."},"categories":[{"name":"lua_guide","slug":"lua-guide","count":68,"path":"api/categories/lua-guide.json"}],"tags":[{"name":"lua","slug":"lua","count":153,"path":"api/tags/lua.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Lua数据库访问","uid":"5593d949c022c9556ceb62d288c587d5","slug":"old-lua/2016-06-01-database-access","date":"2024-03-14T07:45:09.099Z","updated":"2024-03-14T07:45:09.099Z","comments":true,"path":"api/articles/old-lua/2016-06-01-database-access.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"Lua 数据库访问 简单的数据操作，我们用文件就可以处理。但是，某些时候文件操作存在性能、扩展性等问题。这时候，我们就需要使用数据库。LuaSQL 是一个提供数据库操作的库，它支持多种 SQL 数据库的操作。包括： SQLite MySQL ODBC 在本教程中，我们会讲解用 L...","link":"","photos":[],"count_time":{"symbolsCount":"6.2k","symbolsTime":"6 mins."},"categories":[{"name":"lua_guide","slug":"lua-guide","count":68,"path":"api/categories/lua-guide.json"}],"tags":[{"name":"lua","slug":"lua","count":153,"path":"api/tags/lua.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}