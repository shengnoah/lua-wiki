{"title":"Lua表","uid":"038bf88a1c7598385fc79ad2a48f60ba","slug":"old-lua/2016-06-01-tables","date":"2024-03-14T07:45:09.100Z","updated":"2024-03-14T07:45:09.101Z","comments":true,"path":"api/articles/old-lua/2016-06-01-tables.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<h1>Lua 表</h1>\n<p>在 Lua 语言中，表是唯一可以用来创建不同数据类型的数据结构，比如常见的数组和字典都是用表来创建的。 Lua 语言中经常到关联数组这种数据类型，它不仅可以用数值作为索引值，除了 nil 以外的字符串同样可以作为其索引。表没有固定的大小，当数据量增加时表会自动增大。</p>\n<p>Lua 语言中的各种结构表示都用到了表，包括包（package）的表示。当我们使用方法 string.format 时，我们用到的其实是包 string 中的方法 format。</p>\n<h2 id=\"使用表\">使用表</h2>\n<p>表被称之为对象，它既不是值也不是变量。Lua 用构造表达式 {} 创建一个空表。需要注意的是，在存储表的变量和表本身之间没有什么固定的对应关系（译注：一个表可以被不同的变量引用，一个变量也可以随时改变其所引用的表对象）。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--简单的表初始化</span><br><span class=\"line\">mytable = &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">--简单的表赋值</span><br><span class=\"line\">mytable[1]= &quot;Lua&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">--移除引用</span><br><span class=\"line\">mytable = nil</span><br><span class=\"line\">-- lua 的垃圾回收机制负责回收内存空间</span><br><span class=\"line\">```  </span><br><span class=\"line\"></span><br><span class=\"line\">当我们有一个拥有一系列元素的表时，如果我们将其赋值给 b。那么 a 和 b 都会引用同一个表对象(a 先引用该表)，指向相同的内存空间。而不会再单独为 b 分配内存空间。即使给变量 a 赋值 nil，我们仍然可以用变量 b 访问表本身。如果已经没有变量引用表时，Lua　语言垃圾回收机制负责回收不再使用的内存以被重复使用。</span><br><span class=\"line\">  </span><br><span class=\"line\">下面的示例代码使用到了上面提到的表的特性。　　</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>– 声明空表<br>\nmytable = {}<br>\nprint(&quot;Type of mytable is &quot;,type(mytable))</p>\n<p>mytable[1]= “Lua”<br>\nmytable[“wow”] = “Tutorial”<br>\nprint(&quot;mytable Element at index 1 is &quot;, mytable[1])<br>\nprint(&quot;mytable Element at index wow is &quot;, mytable[“wow”])</p>\n<p>– alternatetable 与 mytable 引用相同的表<br>\nalternatetable = mytable</p>\n<p>print(&quot;alternatetable Element at index 1 is &quot;, alternatetable[1])<br>\nprint(&quot;mytable Element at index wow is &quot;, alternatetable[“wow”])</p>\n<p>alternatetable[“wow”] = “I changed it”</p>\n<p>print(&quot;mytable Element at index wow is &quot;, mytable[“wow”])</p>\n<p>– 只是变量被释放，表本身没有被释放<br>\nalternatetable = nil<br>\nprint(&quot;alternatetable is &quot;, alternatetable)</p>\n<p>– mytable 仍然可以访问<br>\nprint(&quot;mytable Element at index wow is &quot;, mytable[“wow”])</p>\n<p>mytable = nil<br>\nprint(&quot;mytable is &quot;, mytable)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">执行上面的代码，我们可以得到如下的输出结果：  </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>Type of mytable is \ttable<br>\nmytable Element at index 1 is \tLua<br>\nmytable Element at index wow is \tTutorial<br>\nalternatetable Element at index 1 is \tLua<br>\nmytable Element at index wow is \tTutorial<br>\nmytable Element at index wow is \tI changed it<br>\nalternatetable is \tnil<br>\nmytable Element at index wow is \tI changed it<br>\nmytable is \tnil</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">## 表的操作函数  </span><br><span class=\"line\"></span><br><span class=\"line\">下面的表中列出了 Lua 语言内置的表操作函数，具体内容如下所示：  </span><br><span class=\"line\"></span><br><span class=\"line\">&lt;table&gt;</span><br><span class=\"line\">\t&lt;tr&gt;</span><br><span class=\"line\">\t\t&lt;th&gt;S.N.&lt;/th&gt;</span><br><span class=\"line\">\t\t&lt;th&gt;方法与作用&lt;/th&gt;</span><br><span class=\"line\">\t&lt;/tr&gt;</span><br><span class=\"line\">\t&lt;tr&gt;</span><br><span class=\"line\">\t\t&lt;td&gt;1&lt;/td&gt;</span><br><span class=\"line\">\t\t&lt;td&gt;table.concat(table[, sep [, i[,j]]]): 根据指定的参数合并表中的字符串。具体用法参考下面的示例。&lt;/td&gt;</span><br><span class=\"line\">\t&lt;/tr&gt;</span><br><span class=\"line\">\t&lt;tr&gt;</span><br><span class=\"line\">\t\t&lt;td&gt;2&lt;/td&gt;</span><br><span class=\"line\">\t\t&lt;td&gt;table.insert(table,[pos,]value):在表中指定位置插入一个值。&lt;/td&gt;</span><br><span class=\"line\">\t&lt;/tr&gt;</span><br><span class=\"line\">\t&lt;tr&gt;</span><br><span class=\"line\">\t\t&lt;td&gt;3&lt;/td&gt;</span><br><span class=\"line\">\t\t&lt;td&gt;table.maxn(table)：返回表中最大的数值索引。&lt;/td&gt;</span><br><span class=\"line\">\t&lt;/tr&gt;</span><br><span class=\"line\">\t&lt;tr&gt;</span><br><span class=\"line\">\t\t&lt;td&gt;4&lt;/td&gt;</span><br><span class=\"line\">\t\t&lt;td&gt;table.remove(table[,pos]):从表中移出指定的值。&lt;/td&gt;</span><br><span class=\"line\">\t&lt;/tr&gt;\t&lt;tr&gt;</span><br><span class=\"line\">\t\t&lt;td&gt;5&lt;/td&gt;</span><br><span class=\"line\">\t\t&lt;td&gt;table.sort(table[,comp]):根据指定的（可选）比较方法对表进行排序操作。&lt;/td&gt;</span><br><span class=\"line\">\t&lt;/tr&gt;</span><br><span class=\"line\">&lt;/table&gt;  </span><br><span class=\"line\"></span><br><span class=\"line\">让我们一起看一些上述函数使用的例子。  </span><br><span class=\"line\"></span><br><span class=\"line\">### 表连接操作  </span><br><span class=\"line\"></span><br><span class=\"line\">我们可以使用表连接操作连接表中的元素，如下所示。  </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>fruits = {“banana”,“orange”,“apple”}<br>\n– 返回表中字符串连接后的结果<br>\nprint(&quot;Concatenated string &quot;,table.concat(fruits))</p>\n<p>–用字符串连接<br>\nprint(&quot;Concatenated string “,table.concat(fruits,”, &quot;))</p>\n<p>–基于索引连接 fruits<br>\nprint(&quot;Concatenated string “,table.concat(fruits,”, &quot;, 2,3))</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">执行上面的代码，我们可以得到如下的输出结果：  </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>Concatenated string \tbananaorangeapple<br>\nConcatenated string \tbanana, orange, apple<br>\nConcatenated string \torange, apple</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">### 插入与移出操作  </span><br><span class=\"line\"></span><br><span class=\"line\">插入和移除表中元素是对表最常见的操作。使用方法如下所示：  </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>fruits = {“banana”,“orange”,“apple”}</p>\n<p>– 在 fruits 的末尾插入一种水果<br>\ntable.insert(fruits,“mango”)<br>\nprint(&quot;Fruit at index 4 is &quot;,fruits[4])</p>\n<p>– 在索引 2 的位置插入一种水果<br>\ntable.insert(fruits,2,“grapes”)<br>\nprint(&quot;Fruit at index 2 is &quot;,fruits[2])</p>\n<p>print(“The maximum elements in table is”,table.maxn(fruits))</p>\n<p>print(“The last element is”,fruits[5])<br>\ntable.remove(fruits)<br>\nprint(“The previous last element is”,fruits[5])</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">执行上面的代码，我们可以得到如下的输出结果：  </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>Fruit at index 4 is \tmango<br>\nFruit at index 2 is \tgrapes<br>\nThe maximum elements in table is\t5<br>\nThe last element is\tmango<br>\nThe previous last element is\tnil</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">### 表排序操作  </span><br><span class=\"line\"></span><br><span class=\"line\">在程序开发过程中，常常有对表排序的需求。 sort 函数默认使用字母表对表中的元素进行排序（可以通过提供比较函数改变排序策略）。示例代码如下：  </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>fruits = {“banana”,“orange”,“apple”,“grapes”}<br>\nfor k,v in ipairs(fruits) do<br>\nprint(k,v)<br>\nend<br>\ntable.sort(fruits)<br>\nprint(“sorted table”)<br>\nfor k,v in ipairs(fruits) do<br>\nprint(k,v)<br>\nend</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">执行上面的代码，我们可以得到如下的输出结果：  </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>1\tbanana<br>\n2\torange<br>\n3\tapple<br>\n4\tgrapes<br>\nsorted table<br>\n1\tapple<br>\n2\tbanana<br>\n3\tgrapes<br>\n4\torange</p>\n<pre><code></code></pre>\n","text":"Lua 表 在 Lua 语言中，表是唯一可以用来创建不同数据类型的数据结构，比如常见的数组和字典都是用表来创建的。 Lua 语言中经常到关联数组这种数据类型，它不仅可以用数值作为索引值，除了 nil 以外的字符串同样可以作为其索引。表没有固定的大小，当数据量增加时表会自动增大。 ...","link":"","photos":[],"count_time":{"symbolsCount":"4.1k","symbolsTime":"4 mins."},"categories":[{"name":"lua_guide","slug":"lua-guide","count":68,"path":"api/categories/lua-guide.json"}],"tags":[{"name":"lua","slug":"lua","count":153,"path":"api/tags/lua.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\"><span class=\"toc-text\">Lua 表</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8%E8%A1%A8\"><span class=\"toc-text\">使用表</span></a></li></ol></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Lua操作系统工具库","uid":"690a2272c904046df2d9d8b8e3328a46","slug":"old-lua/2016-06-01-operating-system-facilities","date":"2024-03-14T07:45:09.100Z","updated":"2024-03-14T07:45:09.100Z","comments":true,"path":"api/articles/old-lua/2016-06-01-operating-system-facilities.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"Lua 操作系统工具库 在很多应用中，我们都需要访问到操作系统级别的函数，操作系统库就给我们提供了这样的工具。下面的列表给出操作系统工具包提供的方法： S.N. 函数与功能 1 os.clock()：以秒为单位返回程序运行所用 CPU 时间的近似值。 2 os.date([for...","link":"","photos":[],"count_time":{"symbolsCount":"1.8k","symbolsTime":"2 mins."},"categories":[{"name":"lua_guide","slug":"lua-guide","count":68,"path":"api/categories/lua-guide.json"}],"tags":[{"name":"lua","slug":"lua","count":153,"path":"api/tags/lua.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Lua基本语法","uid":"9b97fd5c58ceb41de2e73474e4dfb1f8","slug":"old-lua/2016-06-01-basic-syntax","date":"2024-03-14T07:45:09.099Z","updated":"2024-03-14T07:45:09.100Z","comments":true,"path":"api/articles/old-lua/2016-06-01-basic-syntax.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"基本语法 Lua 学起来非常简单。现在，让我们开始创建我们的第一个 Lua 程序吧！ 第一个 Lua 程序 Lua 提供交互式编程模式。在这个模式下，你可以一条一条地输入命令，然后立即就可以得到结果。你可以在 shell 中使用 lua -i 或者 lua 命令启动。输入命令后，...","link":"","photos":[],"count_time":{"symbolsCount":"2.1k","symbolsTime":"2 mins."},"categories":[{"name":"lua_guide","slug":"lua-guide","count":68,"path":"api/categories/lua-guide.json"}],"tags":[{"name":"lua","slug":"lua","count":153,"path":"api/tags/lua.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}