{"title":"Obsidian插件实现","uid":"5489aee09b1e0d4c387a202c68b698a4","slug":"obsidian/Obsidian插件实现","date":"2024-03-14T06:15:59.728Z","updated":"2024-03-14T06:15:59.728Z","comments":true,"path":"api/articles/obsidian/Obsidian插件实现.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":null,"content":"<h1 id=\"Obsidian插件实现\"><a href=\"#Obsidian插件实现\" class=\"headerlink\" title=\"Obsidian插件实现\"></a>Obsidian插件实现</h1><p>Obsidian插件是用什么语言编写的 ，如何写一个简单的Obsidian插件?</p>\n<p>Obsidian插件是用JavaScript编写的。下面是一个简单的Obsidian插件的示例：</p>\n<ol>\n<li>创建一个新文件夹，命名为”my-plugin”（你可以使用任何你喜欢的文件夹名称）。</li>\n<li>在该文件夹中创建一个名为”main.js”的文件。</li>\n<li>在main.js中添加以下代码：</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">onload</span>: <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Hello from my plugin!&#x27;</span>);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">onunload</span>: <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Goodbye from my plugin!&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>创建一个名为”manifest.json”的文件，并添加以下内容：</li>\n</ol>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;id&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;my-plugin&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;My Plugin&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;version&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;0.1.0&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;description&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;A simple Obsidian plugin.&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;author&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Your Name&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;main&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;./main.js&quot;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>打开Obsidian应用程序，在设置中启用开发者模式。</li>\n<li>在Obsidian侧边栏中找到“Community plugins”选项并点击。</li>\n<li>点击“开发人员设置”按钮，然后点击“加载插件”按钮。</li>\n<li>在弹出的对话框中选择你所创建的插件文件夹（即”my-plugin”）。</li>\n<li>插件将被加载并执行，在控制台中应该会打印出”Hello from my plugin!”。</li>\n<li>每次你在main.js中进行更改之后，都需要重新加载插件才能看到更新。</li>\n</ol>\n<p>这只是一个简单的示例，你可以根据自己的需求在main.js中编写更复杂的逻辑。你还可以在manifest.json中定义其他属性，如图标、依赖项等。要了解更多关于Obsidian插件开发的详细信息，请参阅官方文档。</p>\n<p>写一个Obsidian的Hello World的插件</p>\n<p>要编写一个Obsidian的Hello World插件，你需要按照以下步骤进行操作：</p>\n<ol>\n<li>创建一个新的文件夹，作为插件项目的根目录。</li>\n<li>在该文件夹中创建一个名为<code>main.js</code>的JavaScript文件，作为插件的入口点。</li>\n<li>在<code>main.js</code>中编写以下代码：</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">activate</span>: <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Hello World!&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>在根目录中创建一个名为<code>manifest.json</code>的JSON文件，用于描述插件的元数据信息。在该文件中编写以下代码：</li>\n</ol>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;id&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;hello-world&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Hello World&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;version&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;1.0.0&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;description&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;A Hello World plugin for Obsidian.&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;author&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Your Name&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;main&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;./main.js&quot;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>打开Obsidian，在设置中启用开发者模式。然后点击“开发者工具”菜单。</li>\n<li>在开发者工具中，点击“加载插件”按钮，并选择插件项目根目录。</li>\n<li>插件将被加载，并在控制台输出“Hello World!”。</li>\n</ol>\n<p>这样就成功创建了一个简单的Hello World插件。你可以根据自己的需求进一步扩展和定制该插件。</p>\n<p>如何看Obsidian的控制台，还有插件输出的调试信息？</p>\n<p>要查看Obsidian的控制台，可以按下键盘上的<code>Ctrl + Shift + I</code>，这将打开开发者工具。然后，点击面板上的”Console”选项卡，你就可以看到控制台输出的信息了。</p>\n<p>如果你使用的是插件，并且希望查看插件输出的调试信息，可以在控制台中输入以下命令：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.plugins.enableDevMode()</span><br></pre></td></tr></table></figure>\n\n<p>这将启用插件的开发者模式，并显示插件输出的更多详细信息。然后，你就可以在控制台中查看插件输出的调试信息了。</p>\n<p>请注意，如果你遇到任何问题或错误，请将相关的调试信息包含在报告中，以便开发人员更好地理解并解决问题。</p>\n<p>在实行Obsidian插件的时候，显示下面的话是什么意思？app.js:1 Plugin failure: candylab-plugin TypeError: l is not a constructor</p>\n<p>为什么，如何解决这个问题</p>\n<p>这个错误通常表示在加载Obsidian插件时出现了问题。具体来说，这个错误说明了在加载插件”candylab-plugin”时发生了一个类型错误，其中l不是一个构造函数。</p>\n<p>要解决这个问题，你可以尝试以下几步：</p>\n<ol>\n<li><p>更新插件：检查是否有可用的更新版本，如果有，请尝试更新插件以查看是否能够解决该问题。</p>\n</li>\n<li><p>插件兼容性：确保插件与当前版本的Obsidian兼容。某些插件可能不支持最新的Obsidian版本，因此你可以尝试禁用该插件或寻找其他替代方案。</p>\n</li>\n<li><p>重新安装插件：有时，重新安装插件可以修复加载问题。通过在Obsidian中禁用并重新启用该插件来尝试重新安装它。</p>\n</li>\n<li><p>寻求帮助：如果上述步骤都无法解决问题，你可以考虑向插件开发者寻求帮助。在Obsidian论坛或相关的社区中提问，并提供更详细的错误信息和步骤，以便其他人能够更好地帮助你解决问题。</p>\n</li>\n</ol>\n<p>请注意，这只是一些常见的解决步骤，并不能保证对所有情况都有效。具体问题可能需要进一步调查和定位才能找到最佳解决方案。</p>\n<p><a href=\"https://luhaifeng666.github.io/obsidian-plugin-docs-zh/zh2.0/events.html\">https://luhaifeng666.github.io/obsidian-plugin-docs-zh/zh2.0/events.html</a></p>\n<p>：写一个.ts语言实现的obsidian插件</p>\n<p>下面是一个简单的 TypeScript 语言实现的 Obsidian 插件示例：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Plugin</span>, <span class=\"title class_\">MarkdownView</span>, <span class=\"title class_\">EditorPosition</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;obsidian&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyPlugin</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Plugin</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">async</span> <span class=\"title function_\">onload</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;My plugin loaded&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 注册一个命令，用于在当前光标位置插入文本</span></span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"title function_\">addCommand</span>(&#123;</span><br><span class=\"line\">            <span class=\"attr\">id</span>: <span class=\"string\">&#x27;insert-text&#x27;</span>,</span><br><span class=\"line\">            <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Insert Text&#x27;</span>,</span><br><span class=\"line\">            <span class=\"attr\">callback</span>: <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">const</span> activeView = <span class=\"variable language_\">this</span>.<span class=\"property\">app</span>.<span class=\"property\">workspace</span>.<span class=\"title function_\">getActiveViewOfType</span>(<span class=\"title class_\">MarkdownView</span>);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (activeView) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">const</span> editor = activeView.<span class=\"property\">editor</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">const</span> cursor = editor.<span class=\"title function_\">getCursor</span>();</span><br><span class=\"line\">                    editor.<span class=\"title function_\">replaceRange</span>(<span class=\"string\">&#x27;Hello, World!&#x27;</span>, cursor);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 在文档加载完成后执行一些操作</span></span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"title function_\">registerEvent</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">app</span>.<span class=\"property\">workspace</span>.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;markdown:file-open&#x27;</span>, <span class=\"function\">(<span class=\"params\">file</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`Markdown file opened: <span class=\"subst\">$&#123;file.path&#125;</span>`</span>);</span><br><span class=\"line\">        &#125;));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">onunload</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;My plugin unloaded&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这个示例插件实现了两个功能：</p>\n<ol>\n<li>注册了一个命令 <code>insert-text</code>，当执行该命令时，在当前光标位置插入文本 “Hello, World!”。</li>\n<li>在文档加载完成后打印日志信息。</li>\n</ol>\n<p>要使用这个插件，你需要在 Obsidian 的插件设置中启用开发者模式，并将该 TypeScript 文件放置在你的插件目录下。然后重新加载 Obsidian 插件即可使用。</p>\n<p><a href=\"https://forum-zh.obsidian.md/t/topic/19904\">https://forum-zh.obsidian.md/t/topic/19904</a></p>\n<p><a href=\"https://github.com/thmed/obsidian-vue-sample-plugin/tree/main\">https://github.com/thmed/obsidian-vue-sample-plugin/tree/main</a></p>\n","text":"Obsidian插件实现Obsidian插件是用什么语言编写的 ，如何写一个简单的Obsidian插件? Obsidian插件是用JavaScript编写的。下面是一个简单的Obsidian插件的示例： 创建一个新文件夹，命名为”my-plugin”（你可以使用任何你喜欢的文件夹...","link":"","photos":[],"count_time":{"symbolsCount":"4.3k","symbolsTime":"4 mins."},"categories":[{"name":"AIGC","slug":"AIGC","count":119,"path":"api/categories/AIGC.json"},{"name":"weibo","slug":"AIGC/weibo","count":59,"path":"api/categories/AIGC/weibo.json"}],"tags":[{"name":"weibo","slug":"weibo","count":62,"path":"api/tags/weibo.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Obsidian%E6%8F%92%E4%BB%B6%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">Obsidian插件实现</span></a></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Lua判断","uid":"d6286a3606fee451e0f5f2e41e7f6205","slug":"old-lua/2016-06-01-decision-making","date":"2024-03-14T06:15:59.729Z","updated":"2024-03-14T06:15:59.730Z","comments":true,"path":"api/articles/old-lua/2016-06-01-decision-making.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":[],"text":"决策决策结构要求程序开发人员设置一个或多测试或计算条件。如果条件计算结果为真，则执行一个或多个语句；如果条件为假，则执行另外的语句。 下面是大多数程序语言中的决策结构的一般形式： Lua 语言中所有布尔真和非 nil 值都当作真；把所有的布尔假和 nil 作为假。请注意，Lua ...","link":"","photos":[],"count_time":{"symbolsCount":451,"symbolsTime":"1 mins."},"categories":[{"name":"lua_guide","slug":"lua-guide","count":68,"path":"api/categories/lua-guide.json"}],"tags":[{"name":"lua","slug":"lua","count":153,"path":"api/tags/lua.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Obsidian的Dataview和Database插件","uid":"5f58f8177c391899cad1f2d5f235d2b7","slug":"obsidian/Obsidian的Dataview和Database插件","date":"2024-03-14T06:15:59.728Z","updated":"2024-03-14T06:15:59.728Z","comments":true,"path":"api/articles/obsidian/Obsidian的Dataview和Database插件.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://s2.loli.net/2024/02/07/Z3D6Et2BkCGpKM4.png","text":"Obsidian的Dataview和Database插件Obsidian的两个很有多的插件：Dataview和Database。 这两个插件可以做相反的两个操作。 A).Dataview插件提供了一种类似SQL的功能，可以用类似SQL语言， 让不是计算机专业的人，通过类似SQL的...","link":"","photos":[],"count_time":{"symbolsCount":567,"symbolsTime":"1 mins."},"categories":[{"name":"obsidian","slug":"obsidian","count":8,"path":"api/categories/obsidian.json"}],"tags":[{"name":"dataview","slug":"dataview","count":1,"path":"api/tags/dataview.json"},{"name":"database","slug":"database","count":1,"path":"api/tags/database.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}