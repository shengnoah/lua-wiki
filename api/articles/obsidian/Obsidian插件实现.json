{"title":"Obsidian插件实现","uid":"5489aee09b1e0d4c387a202c68b698a4","slug":"obsidian/Obsidian插件实现","date":"2024-03-14T07:45:09.136Z","updated":"2024-03-14T07:45:09.136Z","comments":true,"path":"api/articles/obsidian/Obsidian插件实现.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<h1 id=\"obsidian插件实现\"><a class=\"markdownIt-Anchor\" href=\"#obsidian插件实现\"></a> Obsidian插件实现</h1>\n<p>Obsidian插件是用什么语言编写的 ，如何写一个简单的Obsidian插件?</p>\n<p>Obsidian插件是用JavaScript编写的。下面是一个简单的Obsidian插件的示例：</p>\n<ol>\n<li class=\"lvl-3\">\n<p>创建一个新文件夹，命名为&quot;my-plugin&quot;（你可以使用任何你喜欢的文件夹名称）。</p>\n</li>\n<li class=\"lvl-3\">\n<p>在该文件夹中创建一个名为&quot;main.js&quot;的文件。</p>\n</li>\n<li class=\"lvl-3\">\n<p>在main.js中添加以下代码：</p>\n</li>\n</ol>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function-variable function\">onload</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello from my plugin!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">onunload</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Goodbye from my plugin!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ol start=\"4\">\n<li class=\"lvl-3\">\n<p>创建一个名为&quot;manifest.json&quot;的文件，并添加以下内容：</p>\n</li>\n</ol>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\"><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"my-plugin\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"My Plugin\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"0.1.0\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"description\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"A simple Obsidian plugin.\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"author\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Your Name\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"main\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./main.js\"</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ol start=\"5\">\n<li class=\"lvl-3\">\n<p>打开Obsidian应用程序，在设置中启用开发者模式。</p>\n</li>\n<li class=\"lvl-3\">\n<p>在Obsidian侧边栏中找到“Community plugins”选项并点击。</p>\n</li>\n<li class=\"lvl-3\">\n<p>点击“开发人员设置”按钮，然后点击“加载插件”按钮。</p>\n</li>\n<li class=\"lvl-3\">\n<p>在弹出的对话框中选择你所创建的插件文件夹（即&quot;my-plugin&quot;）。</p>\n</li>\n<li class=\"lvl-3\">\n<p>插件将被加载并执行，在控制台中应该会打印出&quot;Hello from my plugin!&quot;。</p>\n</li>\n<li class=\"lvl-4\">\n<p>每次你在main.js中进行更改之后，都需要重新加载插件才能看到更新。</p>\n</li>\n</ol>\n<p>这只是一个简单的示例，你可以根据自己的需求在main.js中编写更复杂的逻辑。你还可以在manifest.json中定义其他属性，如图标、依赖项等。要了解更多关于Obsidian插件开发的详细信息，请参阅官方文档。</p>\n<p>写一个Obsidian的Hello World的插件</p>\n<p>要编写一个Obsidian的Hello World插件，你需要按照以下步骤进行操作：</p>\n<ol>\n<li class=\"lvl-3\">\n<p>创建一个新的文件夹，作为插件项目的根目录。</p>\n</li>\n<li class=\"lvl-3\">\n<p>在该文件夹中创建一个名为<code>main.js</code>的JavaScript文件，作为插件的入口点。</p>\n</li>\n<li class=\"lvl-3\">\n<p>在<code>main.js</code>中编写以下代码：</p>\n</li>\n</ol>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function-variable function\">activate</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello World!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ol start=\"4\">\n<li class=\"lvl-3\">\n<p>在根目录中创建一个名为<code>manifest.json</code>的JSON文件，用于描述插件的元数据信息。在该文件中编写以下代码：</p>\n</li>\n</ol>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\"><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"hello-world\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Hello World\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1.0.0\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"description\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"A Hello World plugin for Obsidian.\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"author\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Your Name\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"main\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./main.js\"</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ol start=\"5\">\n<li class=\"lvl-3\">\n<p>打开Obsidian，在设置中启用开发者模式。然后点击“开发者工具”菜单。</p>\n</li>\n<li class=\"lvl-3\">\n<p>在开发者工具中，点击“加载插件”按钮，并选择插件项目根目录。</p>\n</li>\n<li class=\"lvl-3\">\n<p>插件将被加载，并在控制台输出“Hello World!”。</p>\n</li>\n</ol>\n<p>这样就成功创建了一个简单的Hello World插件。你可以根据自己的需求进一步扩展和定制该插件。</p>\n<p>如何看Obsidian的控制台，还有插件输出的调试信息？</p>\n<p>要查看Obsidian的控制台，可以按下键盘上的<code>Ctrl + Shift + I</code>，这将打开开发者工具。然后，点击面板上的&quot;Console&quot;选项卡，你就可以看到控制台输出的信息了。</p>\n<p>如果你使用的是插件，并且希望查看插件输出的调试信息，可以在控制台中输入以下命令：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">app.plugins.enableDevMode()<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>这将启用插件的开发者模式，并显示插件输出的更多详细信息。然后，你就可以在控制台中查看插件输出的调试信息了。</p>\n<p>请注意，如果你遇到任何问题或错误，请将相关的调试信息包含在报告中，以便开发人员更好地理解并解决问题。</p>\n<p>在实行Obsidian插件的时候，显示下面的话是什么意思？app.js:1 Plugin failure: candylab-plugin TypeError: l is not a constructor</p>\n<p>为什么，如何解决这个问题</p>\n<p>这个错误通常表示在加载Obsidian插件时出现了问题。具体来说，这个错误说明了在加载插件&quot;candylab-plugin&quot;时发生了一个类型错误，其中l不是一个构造函数。</p>\n<p>要解决这个问题，你可以尝试以下几步：</p>\n<ol>\n<li class=\"lvl-3\">\n<p>更新插件：检查是否有可用的更新版本，如果有，请尝试更新插件以查看是否能够解决该问题。</p>\n</li>\n<li class=\"lvl-3\">\n<p>插件兼容性：确保插件与当前版本的Obsidian兼容。某些插件可能不支持最新的Obsidian版本，因此你可以尝试禁用该插件或寻找其他替代方案。</p>\n</li>\n<li class=\"lvl-3\">\n<p>重新安装插件：有时，重新安装插件可以修复加载问题。通过在Obsidian中禁用并重新启用该插件来尝试重新安装它。</p>\n</li>\n<li class=\"lvl-3\">\n<p>寻求帮助：如果上述步骤都无法解决问题，你可以考虑向插件开发者寻求帮助。在Obsidian论坛或相关的社区中提问，并提供更详细的错误信息和步骤，以便其他人能够更好地帮助你解决问题。</p>\n</li>\n</ol>\n<p>请注意，这只是一些常见的解决步骤，并不能保证对所有情况都有效。具体问题可能需要进一步调查和定位才能找到最佳解决方案。</p>\n<p><a href=\"https://luhaifeng666.github.io/obsidian-plugin-docs-zh/zh2.0/events.html\">https://luhaifeng666.github.io/obsidian-plugin-docs-zh/zh2.0/events.html</a></p>\n<p>：写一个.ts语言实现的obsidian插件</p>\n<p>下面是一个简单的 TypeScript 语言实现的 Obsidian 插件示例：</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> Plugin<span class=\"token punctuation\">,</span> MarkdownView<span class=\"token punctuation\">,</span> EditorPosition <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'obsidian'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyPlugin</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Plugin</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">async</span> <span class=\"token function\">onload</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'My plugin loaded'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// 注册一个命令，用于在当前光标位置插入文本</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">addCommand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n            id<span class=\"token operator\">:</span> <span class=\"token string\">'insert-text'</span><span class=\"token punctuation\">,</span>\n            name<span class=\"token operator\">:</span> <span class=\"token string\">'Insert Text'</span><span class=\"token punctuation\">,</span>\n            <span class=\"token function-variable function\">callback</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">const</span> activeView <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>app<span class=\"token punctuation\">.</span>workspace<span class=\"token punctuation\">.</span><span class=\"token function\">getActiveViewOfType</span><span class=\"token punctuation\">(</span>MarkdownView<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>activeView<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">const</span> editor <span class=\"token operator\">=</span> activeView<span class=\"token punctuation\">.</span>editor<span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">const</span> cursor <span class=\"token operator\">=</span> editor<span class=\"token punctuation\">.</span><span class=\"token function\">getCursor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    editor<span class=\"token punctuation\">.</span><span class=\"token function\">replaceRange</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello, World!'</span><span class=\"token punctuation\">,</span> cursor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// 在文档加载完成后执行一些操作</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">registerEvent</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>app<span class=\"token punctuation\">.</span>workspace<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'markdown:file-open'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Markdown file opened: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>file<span class=\"token punctuation\">.</span>path<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token function\">onunload</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'My plugin unloaded'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>这个示例插件实现了两个功能：</p>\n<ol>\n<li class=\"lvl-3\">\n<p>注册了一个命令 <code>insert-text</code>，当执行该命令时，在当前光标位置插入文本 “Hello, World!”。</p>\n</li>\n<li class=\"lvl-3\">\n<p>在文档加载完成后打印日志信息。</p>\n</li>\n</ol>\n<p>要使用这个插件，你需要在 Obsidian 的插件设置中启用开发者模式，并将该 TypeScript 文件放置在你的插件目录下。然后重新加载 Obsidian 插件即可使用。</p>\n<p><a href=\"https://forum-zh.obsidian.md/t/topic/19904\">https://forum-zh.obsidian.md/t/topic/19904</a></p>\n<p><a href=\"https://github.com/thmed/obsidian-vue-sample-plugin/tree/main\">https://github.com/thmed/obsidian-vue-sample-plugin/tree/main</a></p>\n","text":" Obsidian插件实现 Obsidian插件是用什么语言编写的 ，如何写一个简单的Obsidian插件? Obsidian插件是用JavaScript编写的。下面是一个简单的Obsidian插件的示例： 创建一个新文件夹，命名为&quot;my-plugin&quot;（你可...","link":"","photos":[],"count_time":{"symbolsCount":"4k","symbolsTime":"4 mins."},"categories":[{"name":"AIGC","slug":"AIGC","count":117,"path":"api/categories/AIGC.json"},{"name":"weibo","slug":"AIGC/weibo","count":59,"path":"api/categories/AIGC/weibo.json"}],"tags":[{"name":"weibo","slug":"weibo","count":62,"path":"api/tags/weibo.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#obsidian%E6%8F%92%E4%BB%B6%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\"> Obsidian插件实现</span></a></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"database插件","uid":"ee05b15db07ec905bf57ae6a80e0b3db","slug":"obsidian/database/database插件","date":"2024-03-14T07:45:09.137Z","updated":"2024-03-14T07:45:09.137Z","comments":true,"path":"api/articles/obsidian/database/database插件.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":" database插件 LLM Meta 70B的大模型 https://labs.perplexity.ai/?continueFlag=b4666e2398caed8b0b3874d42e9b49b2 ","link":"","photos":[],"count_time":{"symbolsCount":104,"symbolsTime":"1 mins."},"categories":[{"name":"obsidian","slug":"obsidian","count":8,"path":"api/categories/obsidian.json"}],"tags":[{"name":"插件","slug":"插件","count":1,"path":"api/tags/插件.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"GPT Builder","uid":"ad2c282bf79c745e4f53e40068af5e71","slug":"weibo/GPT Builder","date":"2024-03-14T07:45:09.136Z","updated":"2024-03-14T07:45:09.136Z","comments":true,"path":"api/articles/weibo/GPT Builder.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":" GPT Builder Open AI 发布文章，介绍了GPTs创建器是如何被创建的，搞笑的是这个GPTs构建器本身也是一个GPTs。 来学习一下Open AI是怎么写GPTs提示词的。 👇下面是GPT Builder具体的构建过程和提示词： GPT Builder 被构建为一...","link":"","photos":[],"count_time":{"symbolsCount":"2.7k","symbolsTime":"2 mins."},"categories":[{"name":"AIGC","slug":"AIGC","count":117,"path":"api/categories/AIGC.json"},{"name":"weibo","slug":"AIGC/weibo","count":59,"path":"api/categories/AIGC/weibo.json"}],"tags":[{"name":"weibo","slug":"weibo","count":62,"path":"api/tags/weibo.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}