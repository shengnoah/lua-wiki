{"title":"EmmyLua 学习使用","uid":"376015f4c2dda13cf46623a4606c4c88","slug":"zl/2016-01-01-901_EmmyLua 学习使用 ","date":"2024-04-03T03:47:36.172Z","updated":"2024-04-03T03:47:36.172Z","comments":true,"path":"api/articles/zl/2016-01-01-901_EmmyLua 学习使用 .json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<h3 id=\"目录\">目录</h3>\n<ol>\n  <li>lua元表</li>\n  <li>class的探索</li>\n</ol>\n<blockquote>\n  <p>一直都在使用Idea加上EmmyLua进行开发，但是当初别人为什么这样选择和选择的优点在哪里自己一概不知，直到前段时间翻到EmmyLua带有注解功能，才明白使用的好处。</p>\n</blockquote>\n<h2 id=\"lua元表\">lua元表</h2>\n<h3 id=\"基本类型\">基本类型</h3>\n<ol>\n  <li>nil</li>\n  <li>boolean</li>\n  <li>number</li>\n  <li>string</li>\n  <li>function</li>\n  <li>userdata</li>\n  <li>thread</li>\n  <li>table</li>\n</ol>\n<p>要想对lua有更加深入的了解，不深入的了解lua的元表是不行的，在lua中元表是你构建一个复杂的数据结构的基础，所以需要对元表有非常深入的了解。</p>\n<p>元表允许改变table的行为，每个行为关联对应的原方法。</p>\n<p>在这里有两个关于元表非常重要的方法：</p>\n<ul>\n  <li>setmetatable(table,metatable)</li>\n  <li>getmetatable(table)</li>\n</ul>\n<p><strong>元表(metatable)中存在 __metatable 键值,则会设置和返回失败</strong></p>\n<p><strong>__metatable键值是用于安全考虑，可以防止获取和修改元表中的内容。</strong></p>\n<p>元方法是关联两个元表的桥梁，是非常重要的，下面介绍几个重要的元方法。</p>\n<h3 id=\"元方法\">元方法</h3>\n<p>元方法一共分为两种：</p>\n<ol>\n  <li>系统使用的元方法</li>\n  <li>自定义的元方法</li>\n</ol>\n<h4 id=\"系统使用的元方法\">系统使用的元方法</h4>\n<p>算术元方法以及逻辑元方法：</p>\n<p>__cancat用于字符串</p>\n<table>\n  <thead>\n    <tr>\n      <th>模式</th>\n      <th>描述</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>__add</td>\n      <td>加</td>\n    </tr>\n    <tr>\n      <td>__sub</td>\n      <td>减</td>\n    </tr>\n    <tr>\n      <td>__mul</td>\n      <td>乘</td>\n    </tr>\n    <tr>\n      <td>__div</td>\n      <td>除</td>\n    </tr>\n    <tr>\n      <td>__mod</td>\n      <td>取余</td>\n    </tr>\n    <tr>\n      <td>__unm</td>\n      <td>负号</td>\n    </tr>\n    <tr>\n      <td>__pow</td>\n      <td>取幂</td>\n    </tr>\n    <tr>\n      <td>__concat</td>\n      <td>…</td>\n    </tr>\n    <tr>\n      <td>__eq</td>\n      <td>==</td>\n    </tr>\n    <tr>\n      <td>__lt</td>\n      <td>&lt;</td>\n    </tr>\n    <tr>\n      <td>__le</td>\n      <td>&lt;=</td>\n    </tr>\n  </tbody>\n</table>\n<div class=\"language-lua highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">local</span> <span class=\"n\">table1</span> <span class=\"o\">=</span> <span class=\"p\">&#123;</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">&#125;</span>\n<span class=\"kd\">local</span> <span class=\"n\">table2</span> <span class=\"o\">=</span> <span class=\"p\">&#123;</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">6</span><span class=\"p\">&#125;</span>\n<span class=\"kd\">local</span> <span class=\"n\">fn</span> <span class=\"o\">=</span> <span class=\"k\">function</span> <span class=\"p\">(</span><span class=\"n\">t1</span><span class=\"p\">,</span><span class=\"n\">t2</span><span class=\"p\">)</span> <span class=\"err\"> </span> <span class=\"err\"> </span> <span class=\"err\"> </span> <span class=\"err\">  </span> <span class=\"c1\">-----table会被传入作为参数</span>\n<span class=\"err\"> </span> <span class=\"kd\">local</span> <span class=\"n\">newtable</span> <span class=\"o\">=</span> <span class=\"p\">&#123;&#125;</span>\n<span class=\"err\"> </span> <span class=\"k\">for</span> <span class=\"n\">i</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">3</span> <span class=\"k\">do</span>\n<span class=\"err\"> </span> <span class=\"err\"> </span> <span class=\"n\">newtable</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">t1</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">t2</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span>\n<span class=\"err\"> </span> <span class=\"k\">end</span>\n<span class=\"err\"> </span>  <span class=\"k\">return</span> <span class=\"n\">newtable</span>\n<span class=\"k\">end</span>\n<span class=\"nb\">setmetatable</span><span class=\"p\">(</span><span class=\"n\">table2</span><span class=\"p\">,&#123;</span><span class=\"n\">__add</span> <span class=\"o\">=</span> <span class=\"n\">fn</span><span class=\"p\">&#125;)</span>\n<span class=\"kd\">local</span> <span class=\"n\">newtable</span> <span class=\"o\">=</span> <span class=\"n\">table1</span><span class=\"o\">+</span><span class=\"n\">table2</span>\n<span class=\"k\">for</span> <span class=\"n\">k</span><span class=\"p\">,</span><span class=\"n\">v</span> <span class=\"k\">in</span> <span class=\"nb\">pairs</span><span class=\"p\">(</span><span class=\"n\">newtable</span><span class=\"p\">)</span> <span class=\"k\">do</span>\n<span class=\"err\"> </span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&#34;newtable --&#34;</span><span class=\"p\">,</span><span class=\"n\">k</span><span class=\"p\">,</span><span class=\"n\">v</span><span class=\"p\">)</span>\n<span class=\"k\">end</span>\n<span class=\"c1\">--打印结果：</span>\n<span class=\"c1\">--newtable --     1    5</span>\n<span class=\"c1\">--newtable --     2    7</span>\n<span class=\"c1\">--newtable --     3    9</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n<div class=\"language-lua highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">local</span> <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"p\">&#123;</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span> <span class=\"p\">&#125;</span>\n<span class=\"kd\">local</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"p\">&#123;</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span> <span class=\"p\">&#125;</span>\n<p><span class=\"kd\">local</span> <span class=\"k\">function</span> <span class=\"nf\">metatableAdd</span><span class=\"p\">(</span><span class=\"n\">t1</span><span class=\"p\">,</span> <span class=\"n\">t2</span><span class=\"p\">)</span><br />\n<span class=\"kd\">local</span> <span class=\"n\">newTable</span> <span class=\"o\">=</span> <span class=\"p\">&#123;&#125;</span><br />\n<span class=\"kd\">local</span> <span class=\"n\">count</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><br />\n<span class=\"k\">while</span> <span class=\"n\">t1</span><span class=\"p\">[</span><span class=\"n\">count</span><span class=\"p\">]</span> <span class=\"ow\">or</span> <span class=\"n\">t2</span><span class=\"p\">[</span><span class=\"n\">count</span><span class=\"p\">]</span> <span class=\"k\">do</span><br />\n<span class=\"n\">newTable</span><span class=\"p\">[</span><span class=\"n\">count</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">t1</span><span class=\"p\">[</span><span class=\"n\">count</span><span class=\"p\">]</span> <span class=\"ow\">or</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"n\">t2</span><span class=\"p\">[</span><span class=\"n\">count</span><span class=\"p\">]</span> <span class=\"ow\">or</span> <span class=\"mi\">0</span><span class=\"p\">)</span><br />\n<span class=\"n\">count</span> <span class=\"o\">=</span> <span class=\"n\">count</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><br />\n<span class=\"k\">end</span><br />\n<span class=\"k\">return</span> <span class=\"n\">newTable</span><br />\n<span class=\"k\">end</span></p>\n<p><span class=\"kd\">local</span> <span class=\"k\">function</span> <span class=\"nf\">metatableMul</span><span class=\"p\">(</span><span class=\"n\">t1</span><span class=\"p\">,</span> <span class=\"n\">t2</span><span class=\"p\">)</span><br />\n<span class=\"kd\">local</span> <span class=\"n\">set</span> <span class=\"o\">=</span> <span class=\"p\">&#123;&#125;</span><br />\n<span class=\"kd\">local</span> <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"p\">&#123;&#125;</span><br />\n<span class=\"k\">for</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">v</span> <span class=\"k\">in</span> <span class=\"nb\">ipairs</span><span class=\"p\">(</span><span class=\"n\">t1</span><span class=\"p\">)</span> <span class=\"k\">do</span><br />\n<span class=\"n\">set</span><span class=\"p\">[</span><span class=\"n\">v</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">v</span><br />\n<span class=\"k\">end</span><br />\n<span class=\"k\">for</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">v</span> <span class=\"k\">in</span> <span class=\"nb\">ipairs</span><span class=\"p\">(</span><span class=\"n\">t2</span><span class=\"p\">)</span> <span class=\"k\">do</span><br />\n<span class=\"n\">set</span><span class=\"p\">[</span><span class=\"n\">v</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">v</span><br />\n<span class=\"k\">end</span><br />\n<span class=\"k\">for</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">v</span> <span class=\"k\">in</span> <span class=\"nb\">pairs</span><span class=\"p\">(</span><span class=\"n\">set</span><span class=\"p\">)</span> <span class=\"k\">do</span><br />\n<span class=\"nb\">table.insert</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">,</span><span class=\"n\">v</span><span class=\"p\">)</span><br />\n<span class=\"k\">end</span><br />\n<span class=\"k\">return</span> <span class=\"n\">result</span><br />\n<span class=\"k\">end</span></p>\n<p><span class=\"kd\">local</span> <span class=\"k\">function</span> <span class=\"nf\">metatableToString</span><span class=\"p\">(</span><span class=\"n\">set</span><span class=\"p\">)</span><br />\n<span class=\"kd\">local</span> <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"p\">&#123;&#125;</span><br />\n<span class=\"k\">for</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">v</span> <span class=\"k\">in</span> <span class=\"nb\">pairs</span><span class=\"p\">(</span><span class=\"n\">set</span><span class=\"p\">)</span> <span class=\"k\">do</span><br />\n<span class=\"nb\">table.insert</span><span class=\"p\">(</span><span class=\"n\">l</span><span class=\"p\">,</span><span class=\"n\">v</span><span class=\"p\">)</span><br />\n<span class=\"k\">end</span><br />\n<span class=\"k\">return</span> <span class=\"s2\">&quot;&#123;&quot;</span> <span class=\"o\">…</span> <span class=\"nb\">table.concat</span><span class=\"p\">(</span><span class=\"n\">l</span><span class=\"p\">,</span><span class=\"s2\">&quot;, &quot;</span><span class=\"p\">)</span> <span class=\"o\">…</span> <span class=\"s2\">&quot;&#125;&quot;</span><br />\n<span class=\"k\">end</span></p>\n<p><span class=\"nb\">setmetatable</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"p\">&#123;</span> <span class=\"n\">__add</span> <span class=\"o\">=</span> <span class=\"n\">metatableAdd</span><span class=\"p\">,</span> <span class=\"n\">__mul</span> <span class=\"o\">=</span> <span class=\"n\">metatableMul</span><span class=\"p\">,</span> <span class=\"n\">__tostring</span> <span class=\"o\">=</span> <span class=\"n\">metatableToString</span> <span class=\"p\">&#125;)</span></p>\n<p><span class=\"kd\">local</span> <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">b</span> <span class=\"o\">+</span> <span class=\"n\">a</span></p>\n<p><span class=\"k\">for</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">v</span> <span class=\"k\">in</span> <span class=\"nb\">ipairs</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">)</span> <span class=\"k\">do</span><br />\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span><br />\n<span class=\"k\">end</span></p>\n<p><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;------&quot;</span><span class=\"p\">)</span></p>\n<p><span class=\"kd\">local</span> <span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"n\">b</span> <span class=\"o\">*</span> <span class=\"n\">a</span></p>\n<p><span class=\"k\">for</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">v</span> <span class=\"k\">in</span> <span class=\"nb\">ipairs</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">)</span> <span class=\"k\">do</span><br />\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span><br />\n<span class=\"k\">end</span></p>\n<p><span class=\"c1\">– 打印b的时候会调用tostring</span><br />\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">)</span></p>\n<p><span class=\"kd\">local</span> <span class=\"k\">function</span> <span class=\"nf\">indexFunc</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">)</span><br />\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"o\">#</span><span class=\"n\">t</span><span class=\"p\">,</span><span class=\"n\">key</span><span class=\"p\">)</span><br />\n<span class=\"k\">end</span></p>\n<p><span class=\"kd\">local</span> <span class=\"n\">metaTableOfB</span> <span class=\"o\">=</span> <span class=\"nb\">getmetatable</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">)</span></p>\n<p><span class=\"n\">metaTableOfB</span><span class=\"p\">.</span><span class=\"n\">__index</span> <span class=\"o\">=</span> <span class=\"n\">indexFunc</span></p>\n<p><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">.</span><span class=\"n\">z</span><span class=\"p\">)</span></p>\n<p><span class=\"c1\">– 输出</span><br />\n<span class=\"c1\">–4\tz</span><br />\n<span class=\"c1\">–nil</span></p>\n<p><span class=\"kd\">local</span> <span class=\"n\">indexTable</span> <span class=\"o\">=</span> <span class=\"p\">&#123;</span><span class=\"n\">z</span> <span class=\"o\">=</span> <span class=\"mi\">90</span><span class=\"p\">&#125;</span></p>\n<p><span class=\"n\">metaTableOfB</span><span class=\"p\">.</span><span class=\"n\">__index</span> <span class=\"o\">=</span> <span class=\"n\">indexTable</span></p>\n<p><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">.</span><span class=\"n\">z</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">.</span><span class=\"n\">c</span><span class=\"p\">)</span></p>\n<p><span class=\"c1\">– 90 nil</span><br />\n</pre></td></tr></tbody></table></code></pre></div></div></p>\n<p><strong>通过上面的例子我们可以理解元表和元方法，可以知道元表是元方法的载体，没有元表，就不存在元方法，没有元方法，元表也没有任何意义。</strong></p>\n<p><strong>我们在对同一类型的东西设置元方法的时候可以对其封装，类似于创建一个对象，每个类被创建出来的时候具有的元方法是一样的。</strong></p>\n<p>两表相加，必须至少其中一个表设置了带__add键的元表，否侧会报错（其他运算符同理），程序会执行__add对应的函数。如果两个表都设置了有__add键的元表，程序会去执行“+”左侧的表中的元表的__add对应的函数。</p>\n<p>table访问的元方法：</p>\n<p><strong>__index 和 __newindex</strong></p>\n<p><strong>__index</strong>的作用，访问当前table的时候，发现没有这个键值（或者键值对应的值为空），那个table就会去寻找metatable中__index元，如果存在__index,就去__index包含表格,就去表中寻找键值。当__index为函数时，则调用方法。方法会默认传入两个参数，一个是self,另一个是key值</p>\n<div class=\"language-lua highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre></td><td class=\"rouge-code\"><pre><span class=\"n\">mytable</span> <span class=\"o\">=</span> <span class=\"nb\">setmetatable</span><span class=\"p\">(&#123;</span><span class=\"n\">key1</span> <span class=\"o\">=</span> <span class=\"s2\">&#34;value1&#34;</span><span class=\"p\">&#125;,</span> <span class=\"p\">&#123;</span> <span class=\"n\">__index</span> <span class=\"o\">=</span> <span class=\"p\">&#123;</span> <span class=\"n\">key2</span> <span class=\"o\">=</span> <span class=\"s2\">&#34;metatablevalue&#34;</span> <span class=\"p\">&#125;</span> <span class=\"p\">&#125;)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">mytable</span><span class=\"p\">.</span><span class=\"n\">key1</span><span class=\"p\">,</span><span class=\"n\">mytable</span><span class=\"p\">.</span><span class=\"n\">key2</span><span class=\"p\">)</span> <span class=\"c1\">--value1    metatablevalue</span>\n<p><span class=\"kd\">local</span> <span class=\"k\">function</span> <span class=\"nf\">fn</span><span class=\"p\">(</span><span class=\"n\">table</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">)</span><br />\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;table and key&quot;</span><span class=\"p\">,</span><span class=\"n\">table</span><span class=\"p\">,</span><span class=\"n\">key</span><span class=\"p\">)</span><br />\n<span class=\"k\">end</span></p>\n<p><span class=\"n\">mytablefun</span> <span class=\"o\">=</span> <span class=\"n\">setmetatabke</span><span class=\"p\">(&#123;</span><span class=\"n\">key1</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;value1&quot;</span><span class=\"p\">&#125;,</span> <span class=\"p\">&#123;</span> <span class=\"n\">__index</span> <span class=\"o\">=</span> <span class=\"n\">fn</span> <span class=\"p\">)</span></p>\n<p></pre></td></tr></tbody></table></code></pre></div></div></p>\n<p>总结：</p>\n<p>Lua 查找一个表元素时的规则，其实就是如下 3 个步骤:</p>\n<ol>\n  <li>在表中查找，如果找到，返回该元素，找不到则继续</li>\n  <li>判断该表是否有元表，如果没有元表，返回 nil，有元表则继续。</li>\n  <li>判断元表有没有 __index 方法，如果 __index 方法为 nil，则返回 nil；如果 __index 方法是一个表，则重复 1、2、3；如果 __index 方法是一个函数，则返回该函数的返回值。</li>\n</ol>\n<p><strong>查询：访问表中不存的字段 :rawget(t, i)</strong></p>\n<p><strong>__newindex</strong>,方法是用来对表进行更新，__index则用来对表访问 。</p>\n<p>当你给表的一个缺少的索引赋值，解释器就会查找__newindex 元方法：如果存在则调用这个函数而不进行赋值操作。</p>\n<p>当table不存在键值的时候，__newindex为table，则可以_newindex包含的table来访问这个key值，如果__newindex为函数，直接直接调用函数。</p>\n<p><strong>更新：向表中不存在索引赋值 :rawset(t, k, v)</strong></p>\n<p><strong>rawget与rawset 直接访问和设置table而不会去访问元方法__index 和 __newindex,也就不会去更新表了，说白了就是操作自身，而不是去访问元表</strong></p>\n<div class=\"language-lua highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n</pre></td><td class=\"rouge-code\"><pre><span class=\"n\">mymetatable</span> <span class=\"o\">=</span> <span class=\"p\">&#123;&#125;</span>\n<span class=\"n\">mytable</span> <span class=\"o\">=</span> <span class=\"nb\">setmetatable</span><span class=\"p\">(&#123;</span><span class=\"n\">key1</span> <span class=\"o\">=</span> <span class=\"s2\">&#34;value1&#34;</span><span class=\"p\">&#125;,</span> <span class=\"p\">&#123;</span> <span class=\"n\">__newindex</span> <span class=\"o\">=</span> <span class=\"n\">mymetatable</span> <span class=\"p\">&#125;)</span>\n<p><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">mytable</span><span class=\"p\">.</span><span class=\"n\">key1</span><span class=\"p\">)</span></p>\n<p><span class=\"n\">mytable</span><span class=\"p\">.</span><span class=\"n\">newkey</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;新值2&quot;</span><br />\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">mytable</span><span class=\"p\">.</span><span class=\"n\">newkey</span><span class=\"p\">,</span><span class=\"n\">mymetatable</span><span class=\"p\">.</span><span class=\"n\">newkey</span><span class=\"p\">)</span></p>\n<p><span class=\"n\">mytable</span><span class=\"p\">.</span><span class=\"n\">key1</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;新值1&quot;</span><br />\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">mytable</span><span class=\"p\">.</span><span class=\"n\">key1</span><span class=\"p\">,</span><span class=\"n\">mymetatable</span><span class=\"p\">.</span><span class=\"n\">key1</span><span class=\"p\">)</span></p>\n<p><span class=\"c1\">– value1</span><br />\n<span class=\"c1\">– nil    新值2</span><br />\n<span class=\"c1\">– 新值1    nil</span></p>\n<p><span class=\"k\">function</span> <span class=\"nf\">fn</span> <span class=\"p\">(</span><span class=\"n\">table</span><span class=\"p\">,</span><span class=\"n\">key</span><span class=\"p\">,</span><span class=\"n\">value</span><span class=\"p\">)</span><br />\n<span class=\"err\"> </span> <span class=\"err\"> </span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">table</span><span class=\"p\">,</span><span class=\"s2\">&quot;</span><span class=\"se\">n</span><span class=\"s2\">&quot;</span><span class=\"p\">,</span><span class=\"n\">key</span><span class=\"p\">,</span><span class=\"s2\">&quot;</span><span class=\"se\">n</span><span class=\"s2\">&quot;</span><span class=\"p\">,</span><span class=\"n\">value</span><span class=\"p\">)</span><br />\n<span class=\"k\">end</span><br />\n<span class=\"kd\">local</span> <span class=\"n\">tableB</span> <span class=\"o\">=</span> <span class=\"p\">&#123;</span><span class=\"n\">k1</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Hi&quot;</span><span class=\"p\">&#125;</span><br />\n<span class=\"nb\">setmetatable</span><span class=\"p\">(</span><span class=\"n\">tableB</span><span class=\"p\">,&#123;</span><span class=\"n\">__newindex</span> <span class=\"o\">=</span> <span class=\"n\">fn</span><span class=\"p\">&#125;)</span> <span class=\"err\">  </span> <span class=\"c1\">—会将table、key、value传给fn作为参数</span><br />\n<span class=\"n\">tableB</span><span class=\"p\">.</span><span class=\"n\">k2</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Good&quot;</span><br />\n<span class=\"c1\">–打印结果：</span><br />\n<span class=\"c1\">–table: 000000000256a650</span><br />\n<span class=\"c1\">–        k2</span><br />\n<span class=\"c1\">–        Good</span><br />\n</pre></td></tr></tbody></table></code></pre></div></div></p>\n<p><strong>__call 元方法</strong>让表成为函数，可以带参数，即此元方法在 Lua 调用一个值时调用</p>\n<div class=\"language-lua highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n</pre></td><td class=\"rouge-code\"><pre><span class=\"k\">function</span> <span class=\"nf\">table_maxn</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">)</span>\n    <span class=\"kd\">local</span> <span class=\"n\">mn</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n    <span class=\"k\">for</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">v</span> <span class=\"k\">in</span> <span class=\"nb\">pairs</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">)</span> <span class=\"k\">do</span>\n        <span class=\"k\">if</span> <span class=\"n\">mn</span> <span class=\"o\">&lt;</span> <span class=\"n\">k</span> <span class=\"k\">then</span>\n            <span class=\"n\">mn</span> <span class=\"o\">=</span> <span class=\"n\">k</span>\n        <span class=\"k\">end</span>\n    <span class=\"k\">end</span>\n    <span class=\"k\">return</span> <span class=\"n\">mn</span>\n<span class=\"k\">end</span>\n<p><span class=\"c1\">– 定义元方法__call</span><br />\n<span class=\"n\">mytable</span> <span class=\"o\">=</span> <span class=\"nb\">setmetatable</span><span class=\"p\">(&#123;</span><span class=\"mi\">10</span><span class=\"p\">&#125;,</span> <span class=\"p\">&#123;</span><br />\n<span class=\"n\">__call</span> <span class=\"o\">=</span> <span class=\"k\">function</span><span class=\"p\">(</span><span class=\"n\">mytable</span><span class=\"p\">,</span> <span class=\"n\">newtable</span><span class=\"p\">)</span><br />\n<span class=\"n\">sum</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><br />\n<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">table_maxn</span><span class=\"p\">(</span><span class=\"n\">mytable</span><span class=\"p\">)</span> <span class=\"k\">do</span><br />\n<span class=\"n\">sum</span> <span class=\"o\">=</span> <span class=\"n\">sum</span> <span class=\"o\">+</span> <span class=\"n\">mytable</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span><br />\n<span class=\"k\">end</span><br />\n<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">table_maxn</span><span class=\"p\">(</span><span class=\"n\">newtable</span><span class=\"p\">)</span> <span class=\"k\">do</span><br />\n<span class=\"n\">sum</span> <span class=\"o\">=</span> <span class=\"n\">sum</span> <span class=\"o\">+</span> <span class=\"n\">newtable</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span><br />\n<span class=\"k\">end</span><br />\n<span class=\"k\">return</span> <span class=\"n\">sum</span><br />\n<span class=\"k\">end</span><br />\n<span class=\"p\">&#125;)</span><br />\n<span class=\"n\">newtable</span> <span class=\"o\">=</span> <span class=\"p\">&#123;</span><span class=\"mi\">10</span><span class=\"p\">,</span><span class=\"mi\">20</span><span class=\"p\">,</span><span class=\"mi\">30</span><span class=\"p\">&#125;</span><br />\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">mytable</span><span class=\"p\">(</span><span class=\"n\">newtable</span><span class=\"p\">))</span><br />\n</pre></td></tr></tbody></table></code></pre></div></div></p>\n<p><strong>__tostring,可以自定义table的输出行为</strong></p>\n<div class=\"language-lua highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">local</span> <span class=\"n\">table</span> <span class=\"o\">=</span> <span class=\"p\">&#123;</span><span class=\"n\">q</span><span class=\"p\">,</span><span class=\"n\">b</span><span class=\"p\">,</span><span class=\"n\">c</span><span class=\"p\">&#125;</span>\n<span class=\"kd\">local</span> <span class=\"k\">function</span> <span class=\"nf\">fn</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">)</span>\n\t<span class=\"k\">return</span> <span class=\"s2\">&#34;Hello here&#34;</span>\n<span class=\"k\">end</span>\n<span class=\"nb\">setmetatable</span><span class=\"p\">(</span><span class=\"n\">table</span><span class=\"p\">,&#123;</span><span class=\"n\">__tostring</span> <span class=\"o\">=</span> <span class=\"n\">fn</span><span class=\"p\">&#125;)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">table</span><span class=\"p\">)</span>\n<p><span class=\"c1\">–打印结果：</span></p>\n<p><span class=\"c1\">–Hello here</span><br />\n</pre></td></tr></tbody></table></code></pre></div></div></p>\n<h2 id=\"class的探索\">class的探索</h2>\n<p>在游戏开发的过程中，一般使用的都是面向对象的开发方式，但在脚本语言中是不存在类、方法以及属性这些概念的，所以要使用这个特性的第一步就是实现一个叫class的全局函数，通过调用这个函数来实现类的生成。但是cocos的这个class还是存在一些问题，接下来认真的解析和测试一下class。</p>\n<p><a href=\"https://blog.csdn.net/mywcyfl/article/details/37706247\">https://blog.csdn.net/mywcyfl/article/details/37706247</a></p>\n<div class=\"language-lua highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n</pre></td><td class=\"rouge-code\"><pre><span class=\"k\">function</span> <span class=\"nf\">class</span><span class=\"p\">(</span><span class=\"n\">classname</span><span class=\"p\">,</span> <span class=\"n\">super</span><span class=\"p\">)</span>\n    <span class=\"kd\">local</span> <span class=\"n\">superType</span> <span class=\"o\">=</span> <span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"n\">super</span><span class=\"p\">)</span>\n    <span class=\"kd\">local</span> <span class=\"n\">cls</span>\n<pre><code>&lt;span class=&quot;c1&quot;&gt;--如果父类既不是函数也不是table则说明父类为空&lt;/span&gt;\n&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;superType&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;#34;function&amp;#34;&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;superType&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;#34;table&amp;#34;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;\n    &lt;span class=&quot;n&quot;&gt;superType&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;\n    &lt;span class=&quot;n&quot;&gt;super&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;\n&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;\n\n&lt;span class=&quot;c1&quot;&gt;--如果父类的类型是函数或者是C对象&lt;/span&gt;\n&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;superType&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;#34;function&amp;#34;&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;super&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__ctype&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;\n    &lt;span class=&quot;c1&quot;&gt;-- inherited from native C++ Object&lt;/span&gt;\n    &lt;span class=&quot;n&quot;&gt;cls&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&#123;&#125;&lt;/span&gt;\n    &lt;span class=&quot;c1&quot;&gt;--如果父类是表则复制成员并且设置这个类的继承信息&lt;/span&gt;\n    &lt;span class=&quot;c1&quot;&gt;--如果是函数类型则设置构造方法并且设置ctor函数&lt;/span&gt;\n    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;superType&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;#34;table&amp;#34;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;\n        &lt;span class=&quot;c1&quot;&gt;-- copy fields from super&lt;/span&gt;\n        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;pairs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;\n        &lt;span class=&quot;n&quot;&gt;cls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__create&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__create&lt;/span&gt;\n        &lt;span class=&quot;n&quot;&gt;cls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;super&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;super&lt;/span&gt;\n    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;\n        &lt;span class=&quot;n&quot;&gt;cls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__create&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;super&lt;/span&gt;\n        &lt;span class=&quot;n&quot;&gt;cls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;\n    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;\n\n    &lt;span class=&quot;c1&quot;&gt;--设置类型的名称&lt;/span&gt;\n    &lt;span class=&quot;n&quot;&gt;cls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__cname&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;classname&lt;/span&gt;\n    &lt;span class=&quot;n&quot;&gt;cls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__ctype&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;\n\n    &lt;span class=&quot;c1&quot;&gt;--定义该类型的创建实例的函数为基类的构造函数后复制到子类实例&lt;/span&gt;\n    &lt;span class=&quot;c1&quot;&gt;--并且调用子数的ctor方法&lt;/span&gt;\n    &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;cls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;\n        &lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;\n        &lt;span class=&quot;c1&quot;&gt;-- copy fields from class to native object&lt;/span&gt;\n        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;pairs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;\n        &lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cls&lt;/span&gt;\n        &lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;\n        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt;\n    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;\n\n&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;\n    &lt;span class=&quot;c1&quot;&gt;--如果是继承自普通的lua表,则设置一下原型，并且构造实例后也会调用ctor方法&lt;/span&gt;\n    &lt;span class=&quot;c1&quot;&gt;-- inherited from Lua Object&lt;/span&gt;\n    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;super&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;\n        &lt;span class=&quot;n&quot;&gt;cls&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&#123;&#125;&lt;/span&gt;\n        &lt;span class=&quot;nb&quot;&gt;setmetatable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&#123;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&#125;)&lt;/span&gt;\n        &lt;span class=&quot;n&quot;&gt;cls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;super&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;super&lt;/span&gt;\n    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;\n        &lt;span class=&quot;n&quot;&gt;cls&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&#123;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&#125;&lt;/span&gt;\n    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;\n\n    &lt;span class=&quot;n&quot;&gt;cls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__cname&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;classname&lt;/span&gt;\n    &lt;span class=&quot;n&quot;&gt;cls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__ctype&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- lua&lt;/span&gt;\n    &lt;span class=&quot;n&quot;&gt;cls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=\n</code></pre>\n","text":"目录 lua元表 class的探索 一直都在使用Idea加上EmmyLua进行开发，但是当初别人为什么这样选择和选择的优点在哪里自己一概不知，直到前段时间翻到EmmyLua带有注解功能，才明白使用的好处。 lua元表 基本类型 nil boolean number string ...","link":"","photos":[],"count_time":{"symbolsCount":"17k","symbolsTime":"15 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%9B%AE%E5%BD%95\"><span class=\"toc-text\">目录</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#lua%E5%85%83%E8%A1%A8\"><span class=\"toc-text\">lua元表</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">基本类型</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%85%83%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">元方法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%B3%BB%E7%BB%9F%E4%BD%BF%E7%94%A8%E7%9A%84%E5%85%83%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">系统使用的元方法</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#class%E7%9A%84%E6%8E%A2%E7%B4%A2\"><span class=\"toc-text\">class的探索</span></a>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"tolua实现分析","uid":"badacccfdd679d5ed5e22c4988c3b87d","slug":"zl/2016-01-01-906_tolua实现分析","date":"2024-04-03T03:47:36.177Z","updated":"2024-04-03T03:47:36.178Z","comments":true,"path":"api/articles/zl/2016-01-01-906_tolua实现分析.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"tolua++如何将c++对象导入到lua里tolua++为每一个传入lua的对象建立一个userdata，userdata的值，是c++对象的地址。userdata的metatable，是一个tolua++建立的，记录了userdata对应c++类型信息的表格，包括导出的成员变...","link":"","photos":[],"count_time":{"symbolsCount":"4.4k","symbolsTime":"4 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Lua数据结构的实现","uid":"5670ddb0c3e7d5212a221b327730f4a2","slug":"zl/2016-01-01-903_Lua数据结构的实现","date":"2024-04-03T03:47:36.172Z","updated":"2024-04-03T03:47:36.176Z","comments":true,"path":"api/articles/zl/2016-01-01-903_Lua数据结构的实现.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":" 《Lua程序设计》笔记：高效地使用table来实现一些传统的数据结构 1 数组Lua库和长度操作符都遵循索引从1开始的约定。 2 多维数组123456789101112131415mt = {}for i=1, N do mt[i] = {} for j=1, M do mt[...","link":"","photos":[],"count_time":{"symbolsCount":"2.1k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}