{"title":"Nginx 安装 Lua 支持","uid":"4602e51bc3f11ea97536361794d2fe48","slug":"zl/2016-01-01-103_Nginx 安装 Lua 支持","date":"2024-04-03T03:47:32.978Z","updated":"2024-04-03T03:47:32.978Z","comments":true,"path":"api/articles/zl/2016-01-01-103_Nginx 安装 Lua 支持.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<p>Nginx 支持 Lua 需要安装 lua-nginx-module 模块，一般常用有 2 种方法: </p>\n<ul>\n<li><p>编译 Nginx 的时候带上 lua-nginx-module 模块一起编译</p>\n</li>\n<li><p>使用 OpenResty: Nginx + 一些模块，默认启用了 Lua 支持(推荐使用此方式)</p>\n<blockquote>\n<p><a href=\"https://openresty.org/cn/openresty.html\" target=\"_blank\" rel=\"noopener noreferrer\">OpenResty</a> is just an enhanced version of <a href=\"https://openresty.org/cn/nginx.html\" target=\"_blank\" rel=\"noopener noreferrer\">Nginx</a> by means of addon modules anyway. You can take advantage of all the exisitng goodies in the <a href=\"https://openresty.org/cn/nginx.html\" target=\"_blank\" rel=\"noopener noreferrer\">Nginx</a> world.</p>\n<p>​</p>\n<p>OpenResty® 是一个基于 <a href=\"https://openresty.org/cn/nginx.html\" target=\"_blank\" rel=\"noopener noreferrer\">Nginx</a> 与 Lua 的高性能 Web 平台，其内部集成了大量精良的 Lua 库、第三方模块以及大多数的依赖项。用于方便地搭建能够处理超高并发、扩展性极高的动态 Web 应用、Web 服务和动态网关。</p>\n<p>OpenResty® 通过汇聚各种设计精良的 <a href=\"https://openresty.org/cn/nginx.html\" target=\"_blank\" rel=\"noopener noreferrer\">Nginx</a> 模块（主要由 OpenResty 团队自主开发），从而将 <a href=\"https://openresty.org/cn/nginx.html\" target=\"_blank\" rel=\"noopener noreferrer\">Nginx</a> 有效地变成一个强大的通用 Web 应用平台。这样，Web 开发人员和系统工程师可以使用 Lua 脚本语言调动 <a href=\"https://openresty.org/cn/nginx.html\" target=\"_blank\" rel=\"noopener noreferrer\">Nginx</a> 支持的各种 C 以及 Lua 模块，快速构造出足以胜任 10K 乃至 1000K 以上单机并发连接的高性能 Web 应用系统。</p>\n<p>OpenResty® 的目标是让你的Web服务直接跑在 <a href=\"https://openresty.org/cn/nginx.html\" target=\"_blank\" rel=\"noopener noreferrer\">Nginx</a> 服务内部，充分利用 <a href=\"https://openresty.org/cn/nginx.html\" target=\"_blank\" rel=\"noopener noreferrer\">Nginx</a> 的非阻塞 I/O 模型，不仅仅对 HTTP 客户端请求,甚至于对远程后端诸如 MySQL、PostgreSQL、Memcached 以及 Redis 等都进行一致的高性能响应。</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"OpenResty\"><a href=\"#OpenResty\" class=\"headerlink\" title=\"OpenResty\"></a>OpenResty</h2><p>OpenResty 的安装很方便，Mac 里使用 brew 安装，对于一些常见的 Linux 发行版本，OpenResty® 提供 <a href=\"https://openresty.org/cn/linux-packages.html\" target=\"_blank\" rel=\"noopener noreferrer\">官方预编译包</a>，CentOS 使用 yum，Ubuntu 使用 apt-get，具体请参考 <a href=\"https://openresty.org/cn/installation.html\" target=\"_blank\" rel=\"noopener noreferrer\">https://openresty.org/cn/installation.html</a>，以下以 Mac 和 CentOS 7 中安装 OpenResty 为例。</p>\n<h3 id=\"Mac-使用-OpenResty\"><a href=\"#Mac-使用-OpenResty\" class=\"headerlink\" title=\"Mac 使用 OpenResty\"></a>Mac 使用 OpenResty</h3><ul>\n<li><p>终端执行 <code>brew install homebrew/nginx/openresty</code> 把 OpenResty 安装到 <strong>/usr/local/Cellar/openresty</strong></p>\n</li>\n<li><p>配置文件位于 <strong>/usr/local/etc/openresty/nginx.conf</strong> (可执行 <code>openresty -V</code> 从输出中找到)</p>\n</li>\n<li><p>启动 Nginx，2 种启动方式都可以</p>\n<ul>\n<li><code>sudo openresty</code> (openresty 其实就是 nginx 的软连接)</li>\n<li><code>sudo nginx</code> (把 /usr/local/Cellar/openresty/1.11.2.5/nginx/sbin 添加到 PATH 里，注意不同版本时的路径不同)</li>\n<li>查看是否启动了 nginx: <code>ps aux | grep nginx</code></li>\n</ul>\n</li>\n<li><p>测试是否支持 Lua</p>\n<ol>\n<li><p><strong>/usr/local/etc/openresty/nginx.conf</strong> 中添加</p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">location /lua {</span><br/><span class=\"line\">    default_type &#39;text/html&#39;;</span><br/><span class=\"line\">    content_by_lua &#39;ngx.say(&#34;hello world&#34;);&#39;;</span><br/><span class=\"line\">}</span><br/></pre></td></tr></tbody></table></figure>\n</li>\n<li><p><code>sudo nginx -t</code> 测试配置没问题，然后 <code>sudo nginx -s reload</code> 重新加载配置 (<code>sudo nginx -s stop</code> 关闭 Nginx)</p>\n</li>\n<li><p><code>curl http://localhost/lua</code> 输出 <strong>hello world</strong> 则说明 Nginx 支持 Lua</p>\n</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"CentOS-7-使用-OpenResty\"><a href=\"#CentOS-7-使用-OpenResty\" class=\"headerlink\" title=\"CentOS 7 使用 OpenResty\"></a>CentOS 7 使用 OpenResty</h3><ul>\n<li><p>终端执行下面 3 条命令把 OpenResty 安装到 <strong>/usr/local/openresty</strong></p>\n<p><code>sudo yum install yum-utils</code></p>\n<p><code>sudo yum-config-manager --add-repo https://openresty.org/package/centos/openresty.repo</code></p>\n<p><code>sudo yum install openresty</code></p>\n</li>\n<li><p>Nginx 的配置文件位于 <strong>/usr/local/openresty/nginx/conf/nginx.conf</strong> (openresty -V 中没有指定)</p>\n</li>\n<li><p>启动 Nginx，2 种启动方式都可以</p>\n<ul>\n<li><code>sudo openresty</code></li>\n<li><code>sudo nginx</code></li>\n<li>查看是否启动了 nginx: <code>ps -ef | grep nginx</code></li>\n</ul>\n</li>\n<li><p>测试是否支持 Lua: 参考上面的方法</p>\n</li>\n</ul>\n<h2 id=\"编译-Nginx-Lua\"><a href=\"#编译-Nginx-Lua\" class=\"headerlink\" title=\"编译 Nginx + Lua\"></a>编译 Nginx + Lua</h2><blockquote>\n<p>编译 Nginx 需要先准备好下面的这些工具，如果不确定是否已安装，可以在编译的时候根据出现的错误提示再进行安装</p>\n<ul>\n<li><code>yum install -y gcc g++ gcc-c++</code></li>\n<li><code>yum -y install zlib zlib-devel openssl openssl--devel pcre pcre-devel</code></li>\n</ul>\n</blockquote>\n<p>Nginx 支持 Lua 需要依赖 LuaJIT-2.0.4.tar.gz，ngx_devel_kit，lua-nginx-module，下面介绍具体的编译过程 (都下载到 /root 目录)</p>\n<ol>\n<li><p>下载安装 <strong>LuaJIT-2.0.4.tar.gz</strong></p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">wget -c http://luajit.org/download/LuaJIT-2.0.4.tar.gz</span><br/><span class=\"line\">tar xzvf LuaJIT-2.0.4.tar.gz</span><br/><span class=\"line\">cd LuaJIT-2.0.4</span><br/><span class=\"line\">make install PREFIX=/usr/local/luajit</span><br/><span class=\"line\"></span><br/><span class=\"line\"># 添加环境变量</span><br/><span class=\"line\">export LUAJIT_LIB=/usr/local/luajit/lib</span><br/><span class=\"line\">export LUAJIT_INC=/usr/local/luajit/include/luajit-2.0</span><br/></pre></td></tr></tbody></table></figure>\n</li>\n<li><p>下载解压 <strong>ngx_devel_kit</strong></p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://github.com/simpl/ngx_devel_kit/archive/v0.3.0.tar.gz</span><br/><span class=\"line\">tar -xzvf v0.3.0.tar.gz</span><br/></pre></td></tr></tbody></table></figure>\n</li>\n<li><p>下载解压 <strong>lua-nginx-module</strong></p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://github.com/openresty/lua-nginx-module/archive/v0.10.8.tar.gz</span><br/><span class=\"line\">tar -xzvf v0.10.8.tar.gz</span><br/></pre></td></tr></tbody></table></figure>\n</li>\n<li><p>下载安装 <strong>nginx-1.10.3.tar.gz</strong></p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/><span class=\"line\">9</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">wget http://nginx.org/download/nginx-1.10.3.tar.gz</span><br/><span class=\"line\">tar -xzvf nginx-1.10.3.tar.gz</span><br/><span class=\"line\">cd nginx-1.10.3</span><br/><span class=\"line\"></span><br/><span class=\"line\"># 注意ngx_devel_kit和lua-nginx-module 以实际解压路径为准</span><br/><span class=\"line\">./configure --add-module=/root/ngx_devel_kit-0.3.0 --add-module=/root/lua-nginx-module-0.10.8</span><br/><span class=\"line\"></span><br/><span class=\"line\">make -j2</span><br/><span class=\"line\">make install</span><br/></pre></td></tr></tbody></table></figure>\n</li>\n<li><p>支持 Nginx 被安装到了 <strong>/usr/local/nginx</strong>，配置文件为 <strong>/usr/local/nginx/conf/nginx.conf</strong></p>\n</li>\n<li><p>验证</p>\n<ul>\n<li><p>将 nginx 做成命令: <code>ln -s /usr/local/nginx/sbin/nginx /usr/bin/nginx</code></p>\n</li>\n<li><p><strong>/usr/local/nginx/conf/nginx.conf</strong> 中添加 Lua 测试代码</p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">location /lua {</span><br/><span class=\"line\">    default_type &#39;text/html&#39;;</span><br/><span class=\"line\">    content_by_lua &#39;ngx.say(&#34;hello world&#34;);&#39;;</span><br/><span class=\"line\">}</span><br/></pre></td></tr></tbody></table></figure>\n</li>\n<li><p>启动 Nginx: <code>sudo nginx</code></p>\n</li>\n<li><p><code>curl http://localhost/lua</code> 输出 <strong>hello world</strong> 则说明 Nginx 支持 Lua</p>\n</li>\n</ul>\n</li>\n</ol>\n<p>上面编译 Nginx 的内容来源于 <a href=\"http://www.cnblogs.com/aoeiuv/p/6856056.html\" target=\"_blank\" rel=\"noopener noreferrer\">http://www.cnblogs.com/aoeiuv/p/6856056.html</a>，编译 Nginx 相对使用 OpenResty 麻烦一些，不过也不难，根据自己的喜好选择即可。</p>","text":"Nginx 支持 Lua 需要安装 lua-nginx-module 模块，一般常用有 2 种方法: 编译 Nginx 的时候带上 lua-nginx-module 模块一起编译 使用 OpenResty: Nginx + 一些模块，默认启用了 Lua 支持(推荐使用此方式) O...","link":"","photos":[],"count_time":{"symbolsCount":"3.6k","symbolsTime":"3 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#OpenResty\"><span class=\"toc-text\">OpenResty</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Mac-%E4%BD%BF%E7%94%A8-OpenResty\"><span class=\"toc-text\">Mac 使用 OpenResty</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#CentOS-7-%E4%BD%BF%E7%94%A8-OpenResty\"><span class=\"toc-text\">CentOS 7 使用 OpenResty</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%BC%96%E8%AF%91-Nginx-Lua\"><span class=\"toc-text\">编译 Nginx + Lua</span></a></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"lua","uid":"df60e476b394b1dd4755ec96c53302ff","slug":"zl/2016-01-01-1044_lua","date":"2024-04-03T03:47:32.979Z","updated":"2024-04-03T03:47:32.980Z","comments":true,"path":"api/articles/zl/2016-01-01-1044_lua.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"lua语法相对简洁它最大的特点就是用同步的代码逻辑实现非阻塞的调用，其次它有单进程内的 LRU cache 和进程间的 share DICT cache，而且它是揉合 nginx 和 LuaJIT 而产生的 参考资料openresty最佳实践 &lt;hr/&gt; ","link":"","photos":[],"count_time":{"symbolsCount":147,"symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"evaluation_nlp","uid":"bdec2772ef3d202943a713a03686eb5c","slug":"zl/2016-01-01-1040_evaluation_nlp","date":"2024-04-03T03:47:32.978Z","updated":"2024-04-03T03:47:32.978Z","comments":true,"path":"api/articles/zl/2016-01-01-1040_evaluation_nlp.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"Automatic Evaluation:Word Error Rate(WER)It is the Levenshtein distance between output and reference divided by the length of the reference....","link":"","photos":[],"count_time":{"symbolsCount":783,"symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}