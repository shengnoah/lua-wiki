{"title":"Hello Lua","uid":"ef463b7b406e150f512c4813745e2197","slug":"zl/2016-01-01-109_Hello Lua","date":"2024-04-03T03:47:33.001Z","updated":"2024-04-03T03:47:33.001Z","comments":true,"path":"api/articles/zl/2016-01-01-109_Hello Lua.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<div class=\"content\" itemprop=\"articleBody\">\n    <p>在游戏开发中，Lua是一种比较热门的轻量级脚本语言。由C实现的Lua可以很好得和C/C++进行交互，同时它可以很方便地和和各种语言结合进行跨平台开发。 特别是在当前最流行的游戏Unity中，为了实现C#脚本热更新，Lua几乎是唯一的解决方案，各种基于Lua的库层出不穷。一直在写C#脚本，还是有必要学习Lua。</p>\n<p>###Lua初见</p>\n<p>一开始就直接打开Lua官方的Reference Manual <a href=\"http://www.lua.org/manual/5.3/contents.html\" target=\"_blank\" rel=\"noopener noreferrer\">Lua Reference Manual</a></p>\n<p>接下来下载好Lua的binary版本，开始学习基本的语法 <a href=\"http://www.runoob.com/lua/lua-tutorial.html\" target=\"_blank\" rel=\"noopener noreferrer\">Lua 基础教程</a></p>\n<p>总体感觉Lua非常的轻巧 基础的数据类型也只有<code>nil boolean number string function userdata thread table</code> (整形和浮点都是number 想起了SQLite) 动态类型语言和Javascript一样 结尾不需要；和Python一样 函数可以是多返回值 没有自带的++ +=等运算符，写的时候特别难受...T_T</p>\n<p>但是有metatable可以进行任意的扩展，这个metatable给我的感觉就像是JS中的prototype</p>\n<p>###定个小目标</p>\n<p>在熟悉了基本的语法和运算后，准备试试Lua的热更新。之前在github发现了一个GUI库imgui，imgui是一个immediate mode gui库。什么是immediate mode gui呢，就是和通常的事件回调式的GUI框架不同的，所有的UI逻辑是线性的，和Unity中的EditorGUI一样，需要不断的刷新。大概就是下面代码的样子 </p><figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">gui.Label(&#34;This is a label&#34;);</span><br/><span class=\"line\">if(gui.button(&#34;This is a button&#34;))</span><br/><span class=\"line\">{</span><br/><span class=\"line\">\t//process button click</span><br/><span class=\"line\">}</span><br/></pre></td></tr></tbody></table></figure><p></p>\n<p>工作中一直在写一些Unity的插件及编辑器脚本，挺喜欢IMGUI这种快速代码实现UI的模式，但是也是有缺点的，比如UI逻辑太复杂时候，有可能会影响绘制帧率造成卡顿。或者是太复杂的UI结构代码的可读性就大大降低。 现在我们有了Lua 那么我们是不是可以用IMGUI绘制一个文本编辑器，然后在里面编写Lua脚本，通过Lua调用 C++的imgui的方法来更新UI呢。 这样就像写Unity的Editor扩展一样，但是不需要重新编译整个项目，加载不同的Lua脚本就能实现热更新UI。</p>\n<p>总结起来我们需要做一下几步 + 在windows下开发 windows程序，调用imgui C++库 + 配置Lua环境 执行Lua脚本 + 编写Lua调用imgui的C函数，互调用操作 + 在imgui中刷新Lua脚本</p>\n<h3 id=\"开始实现\">开始实现</h3>\n<p><strong>创建工程</strong> imgui在github上的repo有demo 我们直接拿来改就行了。选了用opengl进行渲染，而不是dx。毕竟有GLFW GLEW比DX的初始化快多了。</p>\n<p><strong>配置Lua</strong> 把几个Lua头文件的目录加入Include + Lua.h lualib.h 定义了Lua的基本方法 + lauxlib.h 里面有一些比较常用的扩展方法 + luaconf.h 用来控制模块的开关</p>\n<p>Lib就只有一个lua53.lib</p>\n<p><strong>Lua和C++的互调用</strong> 处理Lua与C++的互调用都需要通过Lua C Api来进行</p>\n<p>在Lua5.3中 需要维护一个lua_State 来进行互操作 Lua调用C++需要先定义对应的方法，所有方法都必须带有lua_State的参数，因为Lua和C交互是通过维护一个栈来实现的。Lua调用方法时会先把方法和参数一个个push入栈，对应的C方法会pop出参数执行完再把结果压入栈返回给Lua的脚本 </p><figure class=\"highlight c++\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/><span class=\"line\">9</span><br/><span class=\"line\">10</span><br/><span class=\"line\">11</span><br/><span class=\"line\">12</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br/><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"params\">(lua_State *state)</span></span></span><br/><span class=\"line\"><span class=\"function\"></span>{</span><br/><span class=\"line\">\t<span class=\"comment\">//some implement</span></span><br/><span class=\"line\">}</span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"comment\">//初始化lua_State</span></span><br/><span class=\"line\">lua_State * lstate = luaL_newstate();</span><br/><span class=\"line\"><span class=\"comment\">//加载lua基础库</span></span><br/><span class=\"line\">luaL_oepnlibs(lstate);</span><br/><span class=\"line\"><span class=\"comment\">//注册方法</span></span><br/><span class=\"line\">lua_register(lstate,<span class=\"string\">&#34;luaTestFunc&#34;</span>,luaTestFunc);</span><br/></pre></td></tr></tbody></table></figure><p></p>\n<p>接下来就可以直接在Lua中调用<code>luaTestFunc()</code></p>\n<p>github上有imgui lua的wrap 我们可以直接用，就不需声明那么多方法了</p>\n<p>C++调用Lua方法 使用<code>luaL_loadstring(lua_State*,const char * luacode)</code> 来加载代码 加载完成后我们要把需要调用的方法push到栈顶，然后调用<code>lua_call()</code> 就可以执行了。需要注意的是调用了<code>lua_call</code> 之后我们使用<code>lua_getglobal()</code> push到栈顶的方法会被pop出栈。在imgui中每一帧循环都要调用imgui的绘制方法，所以如果要重复调用一个方法就需要在调用前讲其push到栈顶（不知道有没有其他的方法可以实现）。不这样操作可能会报错就会出现如 </p><figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">lua syntax error:attempt to call a nil value</span><br/><span class=\"line\">lua syntax error:attempt to call a string value</span><br/><span class=\"line\">lua syntax error:attempt to call a string value</span><br/></pre></td></tr></tbody></table></figure><p></p>\n<p>这样的错误其实是调用lua_call 发现在栈顶的不是函数先报错 nil value，然后lua会把这个error string push到栈顶 所以下次调用call就会返回string value，无限循环下去...</p>\n<p>更多的Lua C++的互调用可以参考 <a href=\"https://csl.name/post/lua-and-cpp/\" target=\"_blank\" rel=\"noopener noreferrer\">Lua C++互调用</a></p>\n<p>** 重新加载编写好的Lua脚本 ** 当我们更新了lua脚本之后需要重新加载，首先调用 <code>lua_close()</code> 回收lua_State，接着就是重新加载lua基本库和imgui的库。这一步加载库是比较耗时间的，不知道有没有其他的方式可以动态卸载掉加载的代码块，再重新加载Lua脚本。</p>\n<p>###总结 Lua的栈操作还是不太习惯，总体感觉Lua是一个很简洁易用的脚本语言。模块管理，基本库，metadata等特性还需要再深入接触一下。 在调试互调用的时候还是踩了很多坑，需要好好了解下Lua C Api。基于Lua的imgui UI扩展还会继续完善完善。</p>\n  </div>","text":" 在游戏开发中，Lua是一种比较热门的轻量级脚本语言。由C实现的Lua可以很好得和C/C++进行交互，同时它可以很方便地和和各种语言结合进行跨平台开发。 特别是在当前最流行的游戏Unity中，为了实现C#脚本热更新，Lua几乎是唯一的解决方案，各种基于Lua的库层出不穷。一直在写...","link":"","photos":[],"count_time":{"symbolsCount":"2.7k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%BC%80%E5%A7%8B%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">开始实现</span></a></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"lua-resty-mysql事务封装","uid":"8f8eece15449c0a158005ed99a49a837","slug":"zl/2016-01-01-1105_lua-resty-mysql事务封装","date":"2024-04-03T03:47:33.002Z","updated":"2024-04-03T03:47:33.003Z","comments":true,"path":"api/articles/zl/2016-01-01-1105_lua-resty-mysql事务封装.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"lua-resty-mysql没有提供事务封装，下面提供一个事务的封装例子的主要代码部分。事务是基于session，主要将事务相关语句在同一个session上执行。1234567891011121314151617181920212223242526272829303132333...","link":"","photos":[],"count_time":{"symbolsCount":"4k","symbolsTime":"4 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"evaluación de interfaces","uid":"7ac08056af2688015c5ec13e91c066b9","slug":"zl/2016-01-01-1100_evaluación de interfaces","date":"2024-04-03T03:47:33.001Z","updated":"2024-04-03T03:47:33.002Z","comments":true,"path":"api/articles/zl/2016-01-01-1100_evaluación de interfaces.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":" Plannificación de una evaluación Procedimientos de evaluacion analítica Procedimientos de evaluación empírica IntroducciónLas interfaces de...","link":"","photos":[],"count_time":{"symbolsCount":"2.8k","symbolsTime":"3 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}