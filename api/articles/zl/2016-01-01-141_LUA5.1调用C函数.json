{"title":"LUA5.1调用C函数","uid":"c16303c759dd88967615455485b434a3","slug":"zl/2016-01-01-141_LUA5.1调用C函数","date":"2024-04-03T03:47:33.038Z","updated":"2024-04-03T03:47:33.038Z","comments":true,"path":"api/articles/zl/2016-01-01-141_LUA5.1调用C函数.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<p>Lua利用一个虚拟的栈(stack)来给C传递值或从C获取值。每当Lua调用C函数，都会获得一个新的栈，该栈初始包含所有的调用C函数所需要的参数值（Lua传给C函数的调用实参），并且C函数执行完毕后，会把返回值压入这个栈（Lua从中拿到C函数调用结果）<br/>本文展示了如何在lua中调用c函数的一种方法:通过将c函数编译成库文件(如Linux的.so),成为Lua的模块<br/><br/>luaclib.c<br/></p><figure class=\"highlight c\"><table><tbody><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;lauxlib.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;lualib.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string.h&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"params\">(lua_State* L)</span></span></div><div class=\"line\">{</div><div class=\"line\">    <span class=\"keyword\">double</span> op1 = luaL_checknumber(L,<span class=\"number\">1</span>);</div><div class=\"line\">    <span class=\"keyword\">double</span> op2 = luaL_checknumber(L,<span class=\"number\">2</span>);</div><div class=\"line\">    lua_pushnumber(L, op1 + op2);</div><div class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&#34;test add!!!rn&#34;</span>);</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">lua_sub</span><span class=\"params\">(lua_State* L)</span></span></div><div class=\"line\">{</div><div class=\"line\">    <span class=\"keyword\">double</span> op1 = luaL_checknumber(L,<span class=\"number\">1</span>);</div><div class=\"line\">    <span class=\"keyword\">double</span> op2 = luaL_checknumber(L,<span class=\"number\">2</span>);</div><div class=\"line\">    lua_pushnumber(L, op1 - op2);</div><div class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&#34;test sub!!!rn&#34;</span>);</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 该数组元素类型为lauL_Reg结构,该结构有两个字段,一个字符串和一个函数指针</span></div><div class=\"line\"><span class=\"comment\">// 结构体数组中的最后一个元素的两个字段均为NULL，用于提示Lua注册函数已经到达数组的末尾。</span></div><div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">luaL_Reg</span> <span class=\"title\">libt_reg</span>[] = {</span></div><div class=\"line\">    {<span class=\"string\">&#34;add&#34;</span>, lua_add},</div><div class=\"line\">    {<span class=\"string\">&#34;sub&#34;</span>, lua_sub},</div><div class=\"line\">    {<span class=\"literal\">NULL</span>,<span class=\"literal\">NULL</span>}</div><div class=\"line\">};</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 该C库的唯一入口函数</span></div><div class=\"line\"><span class=\"comment\">// luaopen_xxx 与 lua 中 require 对应 例如testlibs_libtt 对应</span></div><div class=\"line\"><span class=\"comment\">// require &#34;testlibs.libtt&#34; 即目录testlibs下的libtt.so</span></div><div class=\"line\"><span class=\"comment\">// 生成.so 时文件名应取为libtt.so 即 gcc luaclib.c -fPIC -shared -o libtt.so</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">luaopen_testlibs_libtt</span><span class=\"params\">(lua_State *L)</span></span></div><div class=\"line\">{</div><div class=\"line\">    luaL_register(L, <span class=\"string\">&#34;ct&#34;</span>, libt_reg);  <span class=\"comment\">// 根据给定的名称(ct)创建或服用一个table,并用数组libt_reg中的信息填充这个table.在luaL_register返回时会将这个table留在栈中</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;                           <span class=\"comment\">// 最后,luaopen_testlibs_libtt函数返回1,表示将这个table返回给Lua</span></div><div class=\"line\">}</div></pre></td></tr></tbody></table></figure><p></p>\n<p>lua中如何调用:<br/></p><figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">require</span> <span class=\"string\">&#34;testlibs.libtt&#34;</span></div><div class=\"line\"><span class=\"built_in\">print</span>(ct.add(<span class=\"number\">1</span>,<span class=\"number\">2</span>)) <span class=\"comment\">-- ct 对应 luaL_register 中第二个参数libname即上面的&#34;ct&#34; ; add 对应上面 libt_reg中的string类型的函数名</span></div><div class=\"line\"><span class=\"comment\">-- or</span></div><div class=\"line\"><span class=\"keyword\">local</span> c = <span class=\"built_in\">require</span> <span class=\"string\">&#34;testlibs.libtt&#34;</span></div><div class=\"line\"><span class=\"built_in\">print</span>(c.<span class=\"built_in\">sub</span>(<span class=\"number\">7</span>,<span class=\"number\">3</span>))</div></pre></td></tr></tbody></table></figure><p></p>\n<p>参考:<a href=\"https://www.cnblogs.com/sifenkesi/p/3876745.html\" target=\"_blank\" rel=\"external noopener noreferrer\">https://www.cnblogs.com/sifenkesi/p/3876745.html</a><br/>    <a href=\"http://www.lua.org/pil/26.2.htm\" target=\"_blank\" rel=\"external noopener noreferrer\">http://www.lua.org/pil/26.2.htm</a></p>","text":"Lua利用一个虚拟的栈(stack)来给C传递值或从C获取值。每当Lua调用C函数，都会获得一个新的栈，该栈初始包含所有的调用C函数所需要的参数值（Lua传给C函数的调用实参），并且C函数执行完毕后，会把返回值压入这个栈（Lua从中拿到C函数调用结果）本文展示了如何在lua中调用...","link":"","photos":[],"count_time":{"symbolsCount":"1.7k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Unity中使用sLua的 超丶简单基础教程(二)","uid":"bf541aa57d5643f7179ad07349624c98","slug":"zl/2016-01-01-140_Unity中使用sLua的 超丶简单基础教程(二)","date":"2024-04-03T03:47:33.038Z","updated":"2024-04-03T03:47:33.038Z","comments":true,"path":"api/articles/zl/2016-01-01-140_Unity中使用sLua的 超丶简单基础教程(二).json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":" 前言Unity中使用sLua的 超丶简单基础教程(一) 上一篇博客讲了一下简单调用LuaState读取Lua代码并执行 本篇要讲一下如何更改路径并使得Lua可以调用UnityEngine代码的方法 虽然简短但也是长时间爬坑试验出来的(因为基础教程真的好少啊….)希望对大家有帮助...","link":"","photos":[],"count_time":{"symbolsCount":"1.3k","symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Lua_Notes","uid":"a21d0e5f84f6851e30a51261b5834ec0","slug":"zl/2016-01-01-142_Lua_Notes","date":"2024-04-03T03:47:33.038Z","updated":"2024-04-03T03:47:33.039Z","comments":true,"path":"api/articles/zl/2016-01-01-142_Lua_Notes.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"lua脚本语言学习记录 Vim下Lua的补全（只能实现到支持Lua标准库）使用Vundle + vim-lua-ftplugin + vim-misc1、安装Vundle2、在命令行输入vim ~/.vimrc对.vimrc文件进行修改3、在My Bundles here：下加入...","link":"","photos":[],"count_time":{"symbolsCount":"7.2k","symbolsTime":"7 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}