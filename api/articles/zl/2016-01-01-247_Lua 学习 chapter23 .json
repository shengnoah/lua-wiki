{"title":"Lua 学习 chapter23","uid":"6e907151df698343164342aafa63df4c","slug":"zl/2016-01-01-247_Lua 学习 chapter23 ","date":"2024-04-03T03:47:33.111Z","updated":"2024-04-03T03:47:33.112Z","comments":true,"path":"api/articles/zl/2016-01-01-247_Lua 学习 chapter23 .json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<pre><code>\t\t\t&lt;h3 id=&quot;目录&quot;&gt;目录&lt;/h3&gt;\n</code></pre>\n<ol>\n  <li>弱引用表</li>\n  <li>记忆函数</li>\n  <li>环境和模块</li>\n  <li>垃圾收集器</li>\n</ol>\n<h2 id=\"弱引用表\">弱引用表</h2>\n<p>弱引用表是用来告知lua语言一个引用不应该阻止对一个对象回收的机制。所谓弱引用是一种不在垃圾收集器考虑范围内的对象引用。如果一个对象都是所有的引用都是弱引用，那么垃圾回收器就可以回收这个对象，并把所有引用都删除了。\n表是由键值对组成，一般情况下垃圾收集器不会回收一个在可访问表中作为值或者键的对象，键和值都是强引用。\n在一个弱引用表中，键和值都可以是弱引用。</p>\n<p>一个表是否为弱引用表是由原表中的__mode字段决定的，这个字段存在时，其值应该为一个字符串:这个字符串的值为”k”,那么表的键为弱引用，如果是”v”，值为弱应用，”kv”，表示这个表的键和值都是弱引用。</p>\n<div class=\"language-lua highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n</pre></td><td class=\"rouge-code\"><pre><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"p\">&#123;&#125;</span>\n<span class=\"n\">mt</span> <span class=\"o\">=</span> <span class=\"p\">&#123;</span><span class=\"n\">__mode</span> <span class=\"o\">=</span> <span class=\"s2\">\"k\"</span><span class=\"p\">&#125;</span>\n<span class=\"nb\">setmetatable</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">mt</span><span class=\"p\">)</span>\n<span class=\"n\">key</span> <span class=\"o\">=</span> <span class=\"p\">&#123;&#125;</span>\n<span class=\"n\">a</span><span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n<span class=\"n\">key</span> <span class=\"o\">=</span> <span class=\"p\">&#123;&#125;</span>\n<span class=\"n\">a</span><span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>\n<span class=\"nb\">collectgarbage</span><span class=\"p\">()</span><span class=\"c1\">--第一个key就被回收了</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n<h2 id=\"记忆函数\">记忆函数</h2>\n<p>lua语言中处理全局变量的方式：</p>\n<ul>\n  <li>编译器在编译所有代码之前，在外层创建局部变量_ENV</li>\n  <li>编译器将所有自由名称变换为_ENV.var;</li>\n  <li>函数load(or loadfile)使用全局环境初始化代码段的第一个上值，即lua语言内部维护的一个普通表。</li>\n</ul>\n<p>_ENV只是一个普通的变量，将其赋值为nil会使得后续的代码不能直接访问全局变量。\n我们还可以使用_ENV来绕过局部声明的变量，直接访问全局变量。</p>\n<div class=\"language-lua highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">local</span> <span class=\"nb\">print</span><span class=\"p\">,</span> <span class=\"n\">sin</span> <span class=\"o\">=</span> <span class=\"nb\">print</span><span class=\"p\">,</span> <span class=\"nb\">math.sin</span>\n<span class=\"n\">_ENV</span> <span class=\"o\">=</span> <span class=\"kc\">nil</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"mi\">13</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">sin</span><span class=\"p\">(</span><span class=\"mi\">13</span><span class=\"p\">))</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">cos</span><span class=\"p\">(</span><span class=\"mi\">13</span><span class=\"p\">))</span> <span class=\"c1\">--error 访问不到全局</span>\n<p><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"mi\">13</span><br />\n<span class=\"kd\">local</span> <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"mi\">12</span><br />\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span><br />\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">_ENV</span><span class=\"p\">.</span><span class=\"n\">a</span><span class=\"p\">)</span> <span class=\"c1\">–访问全局的a，当然也可以使用_G来访问全局的a</span></p>\n<p><span class=\"n\">_ENV</span> <span class=\"o\">=</span> <span class=\"p\">&#123;&#125;</span><br />\n<span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><br />\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span> <span class=\"c1\">–print is a nil</span></p>\n<p><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"mi\">15</span><br />\n<span class=\"n\">_ENV</span> <span class=\"o\">=</span> <span class=\"p\">&#123;</span><span class=\"n\">g</span> <span class=\"o\">=</span> <span class=\"nb\">_G</span><span class=\"p\">&#125;</span><br />\n<span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><br />\n<span class=\"n\">g</span><span class=\"p\">.</span><span class=\"n\">print</span><span class=\"p\">(</span><span class=\"n\">_ENV</span><span class=\"p\">.</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">g</span><span class=\"p\">.</span><span class=\"n\">a</span><span class=\"p\">&#125;</span> <span class=\"c1\">– 1 , 15</span><br />\n</pre></td></tr></tbody></table></code></pre></div></div></p>\n<p>通常_G和_ENV指向的是同一个表。但是，尽管如此，他们是很不一样的实体。_ENV是一个局部变量，所以对“全局变量”的访问实际上访问的都是_ENV。_G则是一个在任何情况下都没有任何特殊状态的全局变量。_ENV永远指向的是当前的环境；而假设在可见且无人改变过其值的前提下，_G通常指向的是全局变量。</p>\n<p>_ENV的主要作用就是改变当前的环境。</p>\n<h2 id=\"环境和模块\">环境和模块</h2>\n<p>为了防止污染全局环境：</p>\n<div class=\"language-lua highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">local</span> <span class=\"n\">M</span> <span class=\"o\">=</span> <span class=\"p\">&#123;&#125;</span>\n<span class=\"n\">_ENV</span> <span class=\"o\">=</span> <span class=\"p\">&#123;&#125;</span>\n<p><span class=\"k\">function</span> <span class=\"nf\">hello</span><span class=\"p\">()</span><br />\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">“hello”</span><span class=\"p\">)</span><br />\n<span class=\"k\">end</span></p>\n<p><span class=\"k\">function</span> <span class=\"nf\">sayHello</span><span class=\"p\">()</span><br />\n<span class=\"n\">hello</span><span class=\"p\">()</span> <span class=\"c1\">–M.hello</span><br />\n<span class=\"k\">end</span></p>\n<p><span class=\"kd\">local</span> <span class=\"n\">M</span> <span class=\"o\">=</span> <span class=\"p\">&#123;&#125;</span><br />\n<span class=\"kd\">local</span> <span class=\"n\">sqrt</span> <span class=\"o\">=</span> <span class=\"nb\">math.sqrt</span><br />\n<span class=\"kd\">local</span> <span class=\"k\">in</span> <span class=\"o\">=</span> <span class=\"n\">io</span><br />\n<span class=\"n\">_ENV</span> <span class=\"o\">=</span> <span class=\"kc\">nil</span><br />\n<span class=\"c1\">–这样就不能进行外部访问了</span></p>\n<p></pre></td></tr></tbody></table></code></pre></div></div></p>\n<p>load函数通常被加载代码段的上值_ENV初始化为全局变量。</p>\n<p>在lua中，<strong>一个具有弱引用的键和一个强引用的值的表是一个瞬表。</strong></p>\n<div class=\"language-lua highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n</pre></td><td class=\"rouge-code\"><pre><span class=\"n\">o</span> <span class=\"o\">=</span> <span class=\"p\">&#123;</span> <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"s2\">\"hi\"</span><span class=\"p\">&#125;</span>\n<span class=\"nb\">setmetatable</span><span class=\"p\">(</span><span class=\"n\">o</span><span class=\"p\">,</span> <span class=\"p\">&#123;</span><span class=\"n\">__gc</span> <span class=\"o\">=</span> <span class=\"k\">function</span><span class=\"p\">(</span><span class=\"n\">o</span><span class=\"p\">)</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">o</span><span class=\"p\">.</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"k\">end</span><span class=\"p\">&#125;)</span>\n<span class=\"n\">o</span> <span class=\"o\">=</span> <span class=\"kc\">nil</span>\n<span class=\"nb\">collectgarbage</span><span class=\"p\">()</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n<p>元函数__gc表示析构函数，在垃圾回收这个对象的时候会自动调用函数。</p>\n<h2 id=\"垃圾收集器\">垃圾收集器</h2>\n<p>每一个垃圾回收周期由四个阶段组成：标记、清理、清除和析构。</p>\n<ul>\n  <li>标记阶段：把可达对象标记为活跃；</li>\n  <li>清理阶段处：理析构器和弱引用表，这些没有被标记为活跃状态的对象会被标记为活跃（复苏），并放在一个单独的列表中，这个列表将在析构阶段使用。然后，lua遍历弱引用表并从中移除键或者值未被标记的元素。</li>\n  <li>清除阶段：遍历所有对象，对象未被标记为活跃就回收，否则标记为清理标记，然后准备下一个清理周期。</li>\n  <li>析构阶段：调用清理阶段被分离出来的对象的析构器。</li>\n</ul>\n<pre><code>            &lt;hr style=&quot;visibility: hidden;&quot;&gt;\n</code></pre>\n","text":" &lt;h3 id=&quot;目录&quot;&gt;目录&lt;/h3&gt; 弱引用表 记忆函数 环境和模块 垃圾收集器 弱引用表 弱引用表是用来告知lua语言一个引用不应该阻止对一个对象回收的机制。所谓弱引用是一种不在垃圾收集器考虑范围内的对象引用。如果一个对象都是所有...","link":"","photos":[],"count_time":{"symbolsCount":"2k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%BC%B1%E5%BC%95%E7%94%A8%E8%A1%A8\"><span class=\"toc-text\">弱引用表</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%AE%B0%E5%BF%86%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">记忆函数</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%8E%AF%E5%A2%83%E5%92%8C%E6%A8%A1%E5%9D%97\"><span class=\"toc-text\">环境和模块</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8\"><span class=\"toc-text\">垃圾收集器</span></a></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Lua学习笔记(六)","uid":"0b9c1b4241784f620f7351a84c6c8acd","slug":"zl/2016-01-01-248_Lua学习笔记(六)","date":"2024-04-03T03:47:33.112Z","updated":"2024-04-03T03:47:33.112Z","comments":true,"path":"api/articles/zl/2016-01-01-248_Lua学习笔记(六).json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":" 前言 正文 推荐网站 面向对象 四大特征 封装 继承 多态 抽象 如何使用 创建对象 访问属性 访问成员函数 完整实例 继承 重写 数据库 前言Lua的基础教程其实感觉都已经快接近尾声了，这次就直接把面向对象的这个部分以及一些其他的东西讲清楚，然后就结尾吧，其实大部分编程语言的...","link":"","photos":[],"count_time":{"symbolsCount":"3.3k","symbolsTime":"3 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Lua的win和linux环境搭建","uid":"7fe1dad0ab07c1159a9c6ba848add36c","slug":"zl/2016-01-01-246_Lua的win和linux环境搭建","date":"2024-04-03T03:47:33.111Z","updated":"2024-04-03T03:47:33.111Z","comments":true,"path":"api/articles/zl/2016-01-01-246_Lua的win和linux环境搭建.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":" &lt;div class=&quot;post-nav&quot;&gt; &lt;div class=&quot;post-nav-next post-nav-item&quot;&gt; &lt;a href=&quot;https://hulinhong.com/201...","link":"","photos":[],"count_time":{"symbolsCount":"3.2k","symbolsTime":"3 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}