{"title":"design pattern - strategy pattern in c++ and lua","uid":"53dcd05116ae7a84065ab8d8afa36d01","slug":"zl/2016-01-01-1110_design pattern - strategy pattern in c++ and lua","date":"2024-04-03T03:47:33.005Z","updated":"2024-04-03T03:47:33.005Z","comments":true,"path":"api/articles/zl/2016-01-01-1110_design pattern - strategy pattern in c++ and lua.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<ul id=\"markdown-toc\">\n  <li><a href=\"#what-is-strategy-pattern\" id=\"markdown-toc-what-is-strategy-pattern\">What is Strategy Pattern</a></li>\n  <li><a href=\"#example-in-c\" id=\"markdown-toc-example-in-c\">Example in C++</a></li>\n  <li><a href=\"#example-in-lua\" id=\"markdown-toc-example-in-lua\">Example in Lua</a></li>\n</ul>\n<center><br/>\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/4/45/W3sDesign_Strategy_Design_Pattern_UML.jpg\" width=\"800\" itemprop=\"image\"/>\n</center>\n<p><br/>\n<a href=\"https://en.wikipedia.org/wiki/Strategy_pattern\">Strategy Pattern Wiki</a><br/></p>\n<blockquote>\n  <p>In computer programming, the strategy pattern (also known as the policy pattern) is a behavioural software design pattern that enables selecting an algorithm at runtime.</p>\n</blockquote>\n<center><b><br/>\n一一一一一一一一一一一一一一一一一一一一一一一一<br/>\n© Hung-Chi&#39;s Blog<br/>\n<a href=\"https://hungchicheng.github.io/2017/09/25/Design-Patterns-Strategy-Pattern-in-lua-and-C++/\" id=\"link\" target=\"_blank\" rel=\"noopener noreferrer\">\n\thttps://hungchicheng.github.io/2017/09/25/Design-Patterns-Strategy-Pattern-in-lua-and-C++/\n</a><br/>\n一一一一一一一一一一一一一一一一一一一一一一一一\n</b></center>\n<p><br/></p>\n<center>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n</center>\n<h2 id=\"what-is-strategy-pattern\">What is Strategy Pattern</h2>\n<p>The strategy pattern:</p>\n<ol>\n  <li>defines a family of algorithms,</li>\n  <li>encapsulates each algorithm, and</li>\n  <li>makes the algorithms interchangeable within that family.</li>\n</ol>\n<h2 id=\"example-in-c\">Example in C++</h2>\n<p>For example, we create a warrior and archer with different attack strategy.</p>\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"cp\">#include &lt;iostream&gt;\n</span><span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>\n<p><span class=\"k\">class</span> <span class=\"nc\">AttackStrategy</span><span class=\"p\">&#123;</span><br />\n<span class=\"k\">public</span><span class=\"o\">:</span><br />\n<span class=\"k\">virtual</span> <span class=\"kt\">void</span> <span class=\"n\">attack</span><span class=\"p\">()</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span><br />\n<span class=\"p\">&#125;;</span></p>\n<p><span class=\"k\">class</span> <span class=\"nc\">SwordAttackStrategy</span><span class=\"o\">:</span> <span class=\"k\">public</span> <span class=\"n\">AttackStrategy</span><span class=\"p\">&#123;</span><br />\n<span class=\"k\">public</span><span class=\"o\">:</span><br />\n<span class=\"k\">virtual</span> <span class=\"kt\">void</span> <span class=\"n\">attack</span><span class=\"p\">()&#123;</span> <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&quot;use sword to attack&quot;</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span> <span class=\"p\">&#125;</span>  <span class=\"c1\">// override<br />\n</span><span class=\"p\">&#125;;</span></p>\n<p><span class=\"k\">class</span> <span class=\"nc\">ArcheryAttackStrategy</span><span class=\"o\">:</span> <span class=\"k\">public</span> <span class=\"n\">AttackStrategy</span><span class=\"p\">&#123;</span><br />\n<span class=\"k\">public</span><span class=\"o\">:</span><br />\n<span class=\"k\">virtual</span> <span class=\"kt\">void</span> <span class=\"n\">attack</span><span class=\"p\">()&#123;</span> <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&quot;use bow to attack&quot;</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span> <span class=\"p\">&#125;</span>  <span class=\"c1\">// override<br />\n</span><span class=\"p\">&#125;;</span></p>\n<p><span class=\"k\">class</span> <span class=\"nc\">HeroBase</span><span class=\"p\">&#123;</span><br />\n<span class=\"k\">private</span><span class=\"o\">:</span><br />\n<span class=\"n\">AttackStrategy</span> <span class=\"o\"><em></span><span class=\"n\">m_strategy</span><span class=\"p\">;</span><br />\n<span class=\"n\">string</span> <span class=\"n\">m_name</span><span class=\"p\">;</span><br />\n<span class=\"k\">public</span><span class=\"o\">:</span><br />\n<span class=\"n\">HeroBase</span><span class=\"p\">(</span> <span class=\"n\">string</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">AttackStrategy</span> <span class=\"o\"></em></span><span class=\"n\">strategy</span> <span class=\"p\">)</span><span class=\"o\">:</span><span class=\"n\">m_name</span><span class=\"p\">(</span> <span class=\"n\">name</span> <span class=\"p\">),</span><span class=\"n\">m_strategy</span><span class=\"p\">(</span> <span class=\"n\">strategy</span> <span class=\"p\">)&#123;&#125;</span><br />\n<span class=\"kt\">void</span> <span class=\"n\">set_strategy</span><span class=\"p\">(</span> <span class=\"n\">AttackStrategy</span> <span class=\"o\">*</span><span class=\"n\">strategy</span> <span class=\"p\">)&#123;</span> <span class=\"n\">m_strategy</span> <span class=\"o\">=</span> <span class=\"n\">strategy</span><span class=\"p\">;</span> <span class=\"p\">&#125;</span><br />\n<span class=\"kt\">void</span> <span class=\"n\">attack</span><span class=\"p\">()&#123;</span><br />\n<span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">m_name</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span><br />\n<span class=\"n\">m_strategy</span> <span class=\"o\">-&gt;</span> <span class=\"n\">attack</span><span class=\"p\">();</span><br />\n<span class=\"p\">&#125;</span><br />\n<span class=\"p\">&#125;;</span></p>\n<p><span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">(</span> <span class=\"kt\">int</span> <span class=\"n\">argc</span><span class=\"p\">,</span> <span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"n\">argv</span><span class=\"p\">[]</span> <span class=\"p\">)</span><br />\n<span class=\"p\">&#123;</span><br />\n<span class=\"c1\">// warrior<br />\n</span>    <span class=\"n\">SwordAttackStrategy</span> <span class=\"n\">swordAttackStrategy</span><span class=\"p\">;</span><br />\n<span class=\"n\">HeroBase</span> <span class=\"n\">warrior</span><span class=\"p\">(</span> <span class=\"s\">&quot;warrior1&quot;</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">swordAttackStrategy</span> <span class=\"p\">);</span><br />\n<span class=\"n\">warrior</span><span class=\"p\">.</span><span class=\"n\">attack</span><span class=\"p\">();</span><br />\n<span class=\"c1\">// archer<br />\n</span>    <span class=\"n\">ArcheryAttackStrategy</span> <span class=\"n\">archeryAttackStrategy</span><span class=\"p\">;</span><br />\n<span class=\"n\">HeroBase</span> <span class=\"n\">archer</span><span class=\"p\">(</span> <span class=\"s\">&quot;archer1&quot;</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">archeryAttackStrategy</span> <span class=\"p\">);</span><br />\n<span class=\"n\">archer</span><span class=\"p\">.</span><span class=\"n\">attack</span><span class=\"p\">();</span><br />\n<span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span><br />\n<span class=\"p\">&#125;</span><br />\n</code></pre></div></div></p>\n<p>Output:</p>\n<div class=\"language-console highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"go\">warrior1\nuse sword to attack\narcher1\nuse bow to attack\nProgram ended with exit code: 0\n</span></code></pre></div></div>\n<p><a href=\"https://github.com/hungchicheng/DesignPattern/blob/master/C%2B%2B/Strategy.cpp\">Download - Source Code</a><br/>\n<p><br/></p></p>\n<center>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n</center>\n<h2 id=\"example-in-lua\">Example in Lua</h2>\n<div class=\"language-lua highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">function</span> <span class=\"nf\">FuncNew</span><span class=\"p\">(</span> <span class=\"n\">obj</span> <span class=\"p\">)</span> <span class=\"c1\">-- for Inheritance </span>\n    <span class=\"k\">function</span> <span class=\"nf\">obj</span><span class=\"p\">:</span><span class=\"n\">new</span><span class=\"p\">(</span> <span class=\"n\">o</span> <span class=\"p\">)</span>\n        <span class=\"n\">o</span> <span class=\"o\">=</span> <span class=\"n\">o</span> <span class=\"ow\">or</span> <span class=\"p\">&#123;&#125;</span>\n        <span class=\"nb\">setmetatable</span><span class=\"p\">(</span> <span class=\"n\">o</span><span class=\"p\">,</span> <span class=\"n\">self</span> <span class=\"p\">)</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">__index</span> <span class=\"o\">=</span> <span class=\"n\">self</span>\n        <span class=\"k\">return</span> <span class=\"n\">o</span>\n    <span class=\"k\">end</span>\n    <span class=\"k\">return</span> <span class=\"n\">obj</span>\n<span class=\"k\">end</span>\n<p><span class=\"n\">AttackStrategy</span> <span class=\"o\">=</span> <span class=\"p\">&#123;&#125;</span><br />\n<span class=\"k\">function</span> <span class=\"nf\">AttackStrategy</span><span class=\"p\">:</span><span class=\"n\">create</span><span class=\"p\">()</span><br />\n<span class=\"k\">return</span> <span class=\"n\">FuncNew</span><span class=\"p\">(</span> <span class=\"n\">AttackStrategy</span> <span class=\"p\">):</span><span class=\"n\">new</span><span class=\"p\">()</span><br />\n<span class=\"k\">end</span><br />\n<span class=\"k\">function</span> <span class=\"nf\">AttackStrategy</span><span class=\"p\">:</span><span class=\"n\">attack</span><span class=\"p\">()</span> <span class=\"c1\">– virtual</span><br />\n<span class=\"c1\">– do nothing</span><br />\n<span class=\"k\">end</span></p>\n<p><span class=\"n\">SwordAttackStrategy</span> <span class=\"o\">=</span> <span class=\"n\">AttackStrategy</span><span class=\"p\">:</span><span class=\"n\">create</span><span class=\"p\">()</span> <span class=\"c1\">– inheritance AttackStrategy</span><br />\n<span class=\"k\">function</span> <span class=\"nf\">SwordAttackStrategy</span><span class=\"p\">:</span><span class=\"n\">create</span><span class=\"p\">()</span><br />\n<span class=\"k\">return</span> <span class=\"n\">FuncNew</span><span class=\"p\">(</span> <span class=\"n\">SwordAttackStrategy</span> <span class=\"p\">):</span><span class=\"n\">new</span><span class=\"p\">()</span><br />\n<span class=\"k\">end</span><br />\n<span class=\"k\">function</span> <span class=\"nf\">SwordAttackStrategy</span><span class=\"p\">:</span><span class=\"n\">attack</span><span class=\"p\">()</span> <span class=\"c1\">– override</span><br />\n<span class=\"nb\">print</span><span class=\"p\">(</span> <span class=\"s2\">&quot;use sword to attack&quot;</span> <span class=\"p\">)</span><br />\n<span class=\"k\">end</span></p>\n<p><span class=\"n\">ArcheryAttackStrategy</span> <span class=\"o\">=</span> <span class=\"n\">AttackStrategy</span><span class=\"p\">:</span><span class=\"n\">create</span><span class=\"p\">()</span> <span class=\"c1\">– inheritance AttackStrategy</span><br />\n<span class=\"k\">function</span> <span class=\"nf\">ArcheryAttackStrategy</span><span class=\"p\">:</span><span class=\"n\">create</span><span class=\"p\">()</span><br />\n<span class=\"k\">return</span> <span class=\"n\">FuncNew</span><span class=\"p\">(</span> <span class=\"n\">ArcheryAttackStrategy</span> <span class=\"p\">):</span><span class=\"n\">new</span><span class=\"p\">()</span><br />\n<span class=\"k\">end</span><br />\n<span class=\"k\">function</span> <span class=\"nf\">ArcheryAttackStrategy</span><span class=\"p\">:</span><span class=\"n\">attack</span><span class=\"p\">()</span> <span class=\"c1\">– override</span><br />\n<span class=\"nb\">print</span><span class=\"p\">(</span> <span class=\"s2\">&quot;use bow to attack&quot;</span> <span class=\"p\">)</span><br />\n<span class=\"k\">end</span></p>\n<p><span class=\"n\">HeroBase</span> <span class=\"o\">=</span> <span class=\"p\">&#123;&#125;</span><br />\n<span class=\"k\">function</span> <span class=\"nf\">HeroBase</span><span class=\"p\">:</span><span class=\"n\">create</span><span class=\"p\">(</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">s</span> <span class=\"p\">)</span><br />\n<span class=\"k\">return</span> <span class=\"n\">FuncNew</span><span class=\"p\">(</span> <span class=\"n\">HeroBase</span> <span class=\"p\">):</span><span class=\"n\">new</span><span class=\"p\">(&#123;</span><br />\n<span class=\"n\">m_name</span> <span class=\"o\">=</span> <span class=\"n\">n</span><span class=\"p\">,</span><br />\n<span class=\"n\">m_strategy</span> <span class=\"o\">=</span> <span class=\"n\">s</span> <span class=\"ow\">or</span> <span class=\"n\">AttackStrategy</span><span class=\"p\">:</span><span class=\"n\">create</span><span class=\"p\">()</span><br />\n<span class=\"p\">&#125;)</span><br />\n<span class=\"k\">end</span><br />\n<span class=\"k\">function</span> <span class=\"nf\">HeroBase</span><span class=\"p\">:</span><span class=\"n\">attack</span><span class=\"p\">()</span><br />\n<span class=\"nb\">print</span><span class=\"p\">(</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">m_name</span> <span class=\"p\">)</span><br />\n<span class=\"nb\">print</span><span class=\"p\">(</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">m_strategy</span><span class=\"p\">:</span><span class=\"n\">attack</span><span class=\"p\">()</span> <span class=\"p\">)</span><br />\n<span class=\"k\">end</span></p>\n<p><span class=\"c1\">------------------------------------------------------</span></p>\n<p><span class=\"c1\">– local warrior0 = HeroBase:create( &quot;warrior0&quot; )</span><br />\n<span class=\"c1\">– warrior</span><br />\n<span class=\"kd\">local</span> <span class=\"n\">swordAttackStrategy</span> <span class=\"o\">=</span> <span class=\"n\">SwordAttackStrategy</span><span class=\"p\">:</span><span class=\"n\">create</span><span class=\"p\">()</span><br />\n<span class=\"kd\">local</span> <span class=\"n\">warrior1</span> <span class=\"o\">=</span> <span class=\"n\">HeroBase</span><span class=\"p\">:</span><span class=\"n\">create</span><span class=\"p\">(</span> <span class=\"s2\">&quot;warrior1&quot;</span><span class=\"p\">,</span> <span class=\"n\">swordAttackStrategy</span> <span class=\"p\">)</span><br />\n<span class=\"c1\">– archer</span><br />\n<span class=\"kd\">local</span> <span class=\"n\">archeryAttackStrategy</span> <span class=\"o\">=</span> <span class=\"n\">ArcheryAttackStrategy</span><span class=\"p\">:</span><span class=\"n\">create</span><span class=\"p\">()</span><br />\n<span class=\"kd\">local</span> <span class=\"n\">archer1</span> <span class=\"o\">=</span> <span class=\"n\">HeroBase</span><span class=\"p\">:</span><span class=\"n\">create</span><span class=\"p\">(</span> <span class=\"s2\">&quot;archer1&quot;</span><span class=\"p\">,</span> <span class=\"n\">archeryAttackStrategy</span> <span class=\"p\">)</span></p>\n<p><span class=\"c1\">– warrior0:attack()</span><br />\n<span class=\"n\">warrior1</span><span class=\"p\">:</span><span class=\"n\">attack</span><span class=\"p\">()</span><br />\n<span class=\"n\">archer1</span><span class=\"p\">:</span><span class=\"n\">attack</span><span class=\"p\">()</span><br />\n</code></pre></div></div></p>\n<p>Output:</p>\n<div class=\"language-console highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"go\">warrior1\nuse sword to attack\n<p>archer1<br />\nuse bow to attack</p>\n<p>[Finished in 0.0s]<br />\n</span></code></pre></div></div></p>\n<p><a href=\"https://github.com/hungchicheng/DesignPattern/blob/master/Lua/Strategy.lua\">Download - Source Code</a><br/></p>","text":" What is Strategy Pattern Example in C++ Example in Lua Strategy Pattern Wiki In computer programming, the strategy pattern (also known as t...","link":"","photos":[],"count_time":{"symbolsCount":"3.8k","symbolsTime":"3 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#what-is-strategy-pattern\"><span class=\"toc-text\">What is Strategy Pattern</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#example-in-c\"><span class=\"toc-text\">Example in C++</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#example-in-lua\"><span class=\"toc-text\">Example in Lua</span></a></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"systematic evaluation of isoform function in literature reports of alternative splicing","uid":"3769b3f206ef0c6ba037a59bcbcffa39","slug":"zl/2016-01-01-1111_systematic evaluation of isoform function in liter","date":"2024-04-03T03:47:33.005Z","updated":"2024-04-03T03:47:33.005Z","comments":true,"path":"api/articles/zl/2016-01-01-1111_systematic evaluation of isoform function in liter.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":" MathJax.Hub.Config({ TeX: { equationNumbers: { autoNumber: \"AMS\" } } }); Classify distinct functions of isoforms Literature-based analysis ...","link":"","photos":[],"count_time":{"symbolsCount":675,"symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Lua-table","uid":"62c354e3a991cf37c6a0a912575be5ff","slug":"zl/2016-01-01-1112_Lua-table","date":"2024-04-03T03:47:33.005Z","updated":"2024-04-03T03:47:33.005Z","comments":true,"path":"api/articles/zl/2016-01-01-1112_Lua-table.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"by Mingyang Guan2017/9/16 14:00:13 table.pack() and table.unpack() pack函数主要是获取一个索引从一开始的table，并对这个table预定义一个字段n，表示该表的长度。例如： th&gt; t = table....","link":"","photos":[],"count_time":{"symbolsCount":430,"symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}