{"title":"Lua编程7之metatable","uid":"4a86ff56596654fd5f385162dfeb6124","slug":"zl/2016-01-01-194_Lua编程7之metatable","date":"2024-04-03T03:47:33.077Z","updated":"2024-04-03T03:47:33.080Z","comments":true,"path":"api/articles/zl/2016-01-01-194_Lua编程7之metatable.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<pre><code>    &lt;p&gt;思考并回答以下问题：&lt;br&gt;1.如何创建一个空表？&lt;/p&gt;\n</code></pre>\n<p>在 Lua table 中可以访问对应的key来得到value值，但是却无法对两个 table 进行操作。要实现两个table的操作就要使用Lua提供的元表(Metatable)，元表允许我们改变table的行为，每个行为关联了对应的元方法。</p>\n<p>Lua中每一个值都有metatable。metatable是一个普通的table，定义了一个值在特定情况下的操作。你可以通过修改值的metatable来修改这些操作。</p>\n<blockquote>\n<p>在Lua代码中，只能设置table的元表，若要设置其它类型值的元表，则必须通过C代码来完成。</p>\n</blockquote>\n<p>table和userdata可以有各自独立的元表，而其它数据类型的值则共享其类型所属的单一元表。缺省情况下，table在创建时没有元表。</p>\n<p>任何table都可以作为任何值的元表，而一组相关的table也可以共享一个通用的元表，此元表将描述了它们共同的行为。一个table甚至可以作为它自己的元表，用于描述其特有的行为。</p>\n<p>例如，使用元表我们可以定义Lua如何计算两个table的相加操作a+b。</p>\n<p>当Lua试图对两个表进行相加时，先检查两者之一是否有元表，之后检查是否有一个叫<span style=\"color:red\">__add</span>的字段，若找到，则调用对应的值。<span style=\"color:red\">__add</span>等字段其对应的值（往往是一个函数或是table）就是<span style=\"color:red\">** 元方法 ** </span>，前面有两个下划线。</p>\n<p>有两个很重要的函数来处理元表：</p>\n<ul>\n<li><span style=\"color:red\">setmetatable(table,metatable)</span>: 对指定 table 设置元表(metatable)，如果元表(metatable)中存在 __metatable 键值，setmetatable 会失败。</li>\n<li><span style=\"color:red\">getmetatable(table)</span>: 返回对象的元表(metatable)。</li>\n</ul>\n<p>以下实例演示了如何对指定的表设置元表：</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mytable = {}                      </span><br><span class=\"line\">mymetatable = {}                  </span><br><span class=\"line\"><span class=\"built_in\">setmetatable</span>(mytable,mymetatable) </span><br></pre></td></tr></table></figure>\n<p>以上代码也可以直接写成一行：</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mytable = <span class=\"built_in\">setmetatable</span>({},{})</span><br></pre></td></tr></table></figure>\n<p>以下为返回对象元表：</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">getmetatable</span>(mytable) </span><br></pre></td></tr></table></figure>\n<h2 id=\"算术类的元方法\"><a href=\"https://chebincarl.github.io/#%E7%AE%97%E6%9C%AF%E7%B1%BB%E7%9A%84%E5%85%83%E6%96%B9%E6%B3%95\" class=\"headerlink\" title=\"算术类的元方法\"></a><span style=\"color:#EF7060;\">算术类的元方法</span></h2><p>在下面的示例代码中，将用table来表示集合，并且有一些函数用来计算集合的并集和交集等。</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Set = {}</span><br><span class=\"line\"><span class=\"keyword\">local</span> metatable = {} <span class=\"comment\">--元表</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--根据参数列表中的值创建一个新的集合</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(l)</span></span></span><br><span class=\"line\">    <span class=\"keyword\">local</span> set = {}</span><br><span class=\"line\">    <span class=\"comment\">--将所有由该方法创建的集合的元表都指定到metatable</span></span><br><span class=\"line\">    <span class=\"built_in\">setmetatable</span>(set, metatable)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> _, v <span class=\"keyword\">in</span> <span class=\"built_in\">ipairs</span>(l) <span class=\"keyword\">do</span></span><br><span class=\"line\">        set[v] = <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> set</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--取两个集合并集的函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(a, b)</span></span></span><br><span class=\"line\">    <span class=\"keyword\">local</span> res = Set.new {}</span><br><span class=\"line\">    <span class=\"keyword\">for</span> k <span class=\"keyword\">in</span> <span class=\"built_in\">pairs</span>(a) <span class=\"keyword\">do</span></span><br><span class=\"line\">        res[k] = <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> k <span class=\"keyword\">in</span> <span class=\"built_in\">pairs</span>(b) <span class=\"keyword\">do</span></span><br><span class=\"line\">        res[k] = <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> res</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--取两个集合交集的函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Set.intersection</span><span class=\"params\">(a, b)</span></span></span><br><span class=\"line\">    <span class=\"keyword\">local</span> res = Set.new {}</span><br><span class=\"line\">    <span class=\"keyword\">for</span> k <span class=\"keyword\">in</span> <span class=\"built_in\">pairs</span>(a) <span class=\"keyword\">do</span></span><br><span class=\"line\">        res[k] = b[k]</span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> res</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Set.tostring</span><span class=\"params\">(set)</span></span></span><br><span class=\"line\">    <span class=\"keyword\">local</span> l = {}</span><br><span class=\"line\">    <span class=\"keyword\">for</span> e <span class=\"keyword\">in</span> <span class=\"built_in\">pairs</span>(set) <span class=\"keyword\">do</span></span><br><span class=\"line\">        l[#l + <span class=\"number\">1</span>] = e</span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"{\"</span> .. <span class=\"built_in\">table</span>.<span class=\"built_in\">concat</span>(l, <span class=\"string\">\", \"</span>) .. <span class=\"string\">\"}\"</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Set.print</span><span class=\"params\">(s)</span></span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(Set.<span class=\"built_in\">tostring</span>(s))</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--最后将元方法加入到元表中，这样当两个由Set.new方法创建出来的集合进行</span></span><br><span class=\"line\"><span class=\"comment\">--加运算时，将被重定向到Set.union方法，乘法运算将被重定向到Set.intersection</span></span><br><span class=\"line\">metatable.<span class=\"built_in\">__add</span> = Set.union</span><br><span class=\"line\">metatable.<span class=\"built_in\">__mul</span> = Set.intersection</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--下面为测试代码</span></span><br><span class=\"line\">s1 = Set.new {<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">30</span>, <span class=\"number\">50</span>}</span><br><span class=\"line\">s2 = Set.new {<span class=\"number\">30</span>, <span class=\"number\">1</span>}</span><br><span class=\"line\">s3 = s1 + s2</span><br><span class=\"line\">Set.<span class=\"built_in\">print</span>(s3)</span><br><span class=\"line\">Set.<span class=\"built_in\">print</span>(s3 * s1)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--输出结果为：</span></span><br><span class=\"line\"><span class=\"comment\">--{1, 30, 10, 50, 20}</span></span><br><span class=\"line\"><span class=\"comment\">--{30, 10, 50, 20}</span></span><br></pre></td></tr></table></figure>\n<p>在元表中，每种算术操作符都有对应的字段名，对应的操作列表如下：(注意：__是两个下划线)</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\"><center>** 模式 ** </center></th>\n<th align=\"left\"><center>** 描述 ** </center></th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">__add</td>\n<td align=\"left\">对应的运算符 ‘+’.</td>\n</tr>\n<tr>\n<td align=\"left\">__sub</td>\n<td align=\"left\">对应的运算符 ‘-‘.</td>\n</tr>\n<tr>\n<td align=\"left\">__mul</td>\n<td align=\"left\">对应的运算符 ‘*’.</td>\n</tr>\n<tr>\n<td align=\"left\">__div</td>\n<td align=\"left\">对应的运算符 ‘/‘.</td>\n</tr>\n<tr>\n<td align=\"left\">__mod</td>\n<td align=\"left\">对应的运算符 ‘%’.</td>\n</tr>\n<tr>\n<td align=\"left\">__unm</td>\n<td align=\"left\">对应的运算符 ‘-‘.</td>\n</tr>\n<tr>\n<td align=\"left\">__concat</td>\n<td align=\"left\">对应的运算符 ‘..’.</td>\n</tr>\n<tr>\n<td align=\"left\">__eq</td>\n<td align=\"left\">对应的运算符 ‘==’.</td>\n</tr>\n<tr>\n<td align=\"left\">__lt</td>\n<td align=\"left\">对应的运算符 ‘&lt;’.</td>\n</tr>\n<tr>\n<td align=\"left\">__le</td>\n<td align=\"left\">对应的运算符 ‘&lt;=’.</td>\n</tr>\n</tbody></table>\n<p>对于上面的示例代码，我们在算术运算符的两侧均使用了table类型的操作数。那么如果为s1 = s1 + 8，Lua是否还能正常工作呢？答案是肯定的，因为Lua定位表的步骤为，如果第一个值有元表，且存在__add字段，那么Lua将以这个字段为元方法，否则会再去查看第二个值否是有元表且包含__add字段，如果有则以此字段为元方法。最后，如果两个值均不存在元方法，Lua就引发一个错误。然而对于上例中的Set.union函数，如果执行s1 = s1 + 8将会引发一个错误，因为8不是table对象，不能基于它执行pairs方法调用。为了得到更准确的错误信息，我们需要给Set.union函数做如下的修改，如：</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Set.union</span><span class=\"params\">(a,b)</span></span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">getmetatable</span>(a) ~= metatable <span class=\"keyword\">or</span> <span class=\"built_in\">getmetatable</span>(b) ~= metatable <span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"built_in\">error</span>(<span class=\"string\">\"attempt to 'add' a set with a non-set value\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\">    <span class=\"comment\">--后面的代码与上例相同。</span></span><br><span class=\"line\">    ... ...</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"关系类的元方法\"><a href=\"https://chebincarl.github.io/#%E5%85%B3%E7%B3%BB%E7%B1%BB%E7%9A%84%E5%85%83%E6%96%B9%E6%B3%95\" class=\"headerlink\" title=\"关系类的元方法\"></a><span style=\"color:#EF7060;\">关系类的元方法</span></h2><p>元表还可以指定关系操作符的含义，元方法分别为__eq(等于)、__lt(小于)和__le(小于等于)，至于另外3个关系操作符，Lua没有提供相关的元方法，可以通过前面3个关系运算符的取反获得。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\"><center>** 模式 ** </center></th>\n<th align=\"left\"><center>** 描述 ** </center></th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">__eq</td>\n<td align=\"left\">对应的运算符 ‘==’.</td>\n</tr>\n<tr>\n<td align=\"left\">__lt</td>\n<td align=\"left\">对应的运算符 ‘&lt;’.</td>\n</tr>\n<tr>\n<td align=\"left\">__le</td>\n<td align=\"left\">对应的运算符 ‘&lt;=’.</td>\n</tr>\n</tbody></table>\n<p>与算术类的元方法不同，关系类的元方法不能应用于混合的类型。</p>\n<p>示例如下：</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Set = {}</span><br><span class=\"line\"><span class=\"keyword\">local</span> metatable = {}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Set.new</span><span class=\"params\">(l)</span></span></span><br><span class=\"line\">    <span class=\"keyword\">local</span> set = {}</span><br><span class=\"line\">    <span class=\"built_in\">setmetatable</span>(set,metatable)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> _, v <span class=\"keyword\">in</span> <span class=\"built_in\">ipairs</span>(l) <span class=\"keyword\">do</span></span><br><span class=\"line\">        set[v] = <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> set</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">metatable.<span class=\"built_in\">__le</span> = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(a,b)</span></span> </span><br><span class=\"line\">    <span class=\"keyword\">for</span> k <span class=\"keyword\">in</span> <span class=\"built_in\">pairs</span>(a) <span class=\"keyword\">do</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> b[k] <span class=\"keyword\">then</span> <span class=\"keyword\">return</span> <span class=\"literal\">false</span> <span class=\"keyword\">end</span></span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\">metatable.<span class=\"built_in\">__lt</span> = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(a,b)</span></span> <span class=\"keyword\">return</span> a &lt;= b <span class=\"keyword\">and</span> <span class=\"keyword\">not</span> (b &lt;= a) <span class=\"keyword\">end</span></span><br><span class=\"line\">metatable.<span class=\"built_in\">__eq</span> = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(a,b)</span></span> <span class=\"keyword\">return</span> a &lt;= b <span class=\"keyword\">and</span> b &lt;= a <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--下面是测试代码：</span></span><br><span class=\"line\">s1 = Set.new{<span class=\"number\">2</span>,<span class=\"number\">4</span>}</span><br><span class=\"line\">s2 = Set.new{<span class=\"number\">4</span>,<span class=\"number\">10</span>,<span class=\"number\">2</span>}</span><br><span class=\"line\"><span class=\"built_in\">print</span>(s1 &lt;= s2) <span class=\"comment\">--true</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(s1 &lt; s2)  <span class=\"comment\">--true</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(s1 &gt;= s1) <span class=\"comment\">--true</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(s1 &gt; s1)  <span class=\"comment\">--false</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"库定义的元方法\"><a href=\"https://chebincarl.github.io/#%E5%BA%93%E5%AE%9A%E4%B9%89%E7%9A%84%E5%85%83%E6%96%B9%E6%B3%95\" class=\"headerlink\" title=\"库定义的元方法\"></a><span style=\"color:#EF7060;\">库定义的元方法</span></h2><p>除了上述基于操作符的元方法外，Lua还提供了一些针对框架的元方法，如print函数总是调用tostring来格式化其输出。如果当前对象存在__tostring元方法时，tostring将用该元方法的返回值作为自己的返回值，如：</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Set = {}</span><br><span class=\"line\"><span class=\"keyword\">local</span> metatable = {}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Set.new</span><span class=\"params\">(l)</span></span></span><br><span class=\"line\">    <span class=\"keyword\">local</span> set = {}</span><br><span class=\"line\">    <span class=\"built_in\">setmetatable</span>(set,metatable)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> _, v <span class=\"keyword\">in</span> <span class=\"built_in\">ipairs</span>(l) <span class=\"keyword\">do</span></span><br><span class=\"line\">        set[v] = <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> set</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Set.tostring</span><span class=\"params\">(set)</span></span></span><br><span class=\"line\">    <span class=\"keyword\">local</span> l = {}</span><br><span class=\"line\">    <span class=\"keyword\">for</span> e <span class=\"keyword\">in</span> <span class=\"built_in\">pairs</span>(set) <span class=\"keyword\">do</span></span><br><span class=\"line\">        l[#l + <span class=\"number\">1</span>] = e</span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"{\"</span> .. <span class=\"built_in\">table</span>.<span class=\"built_in\">concat</span>(l,<span class=\"string\">\", \"</span>) .. <span class=\"string\">\"}\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">metatable.<span class=\"built_in\">__tostring</span> = Set.<span class=\"built_in\">tostring</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--下面是测试代码：</span></span><br><span class=\"line\">s1 = Set.new{<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">10</span>}</span><br><span class=\"line\"><span class=\"built_in\">print</span>(s1) <span class=\"comment\">--{5,10,4}</span></span><br></pre></td></tr></table></figure>\n<p>函数setmetatable和getmetatable也会用到元表中的一个字段(__metatable)，用于保护元表，如：</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mt.<span class=\"built_in\">__metatable</span> = <span class=\"string\">\"not your business\"</span></span><br><span class=\"line\">s1 = Set.new{}</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">getmetatable</span>(s1))   <span class=\"comment\">--此时将打印\"not your business\"</span></span><br><span class=\"line\"><span class=\"built_in\">setmetatable</span>(s1,{})  <span class=\"comment\">--此时将输出错误信息：\"cannot change protected metatable\"</span></span><br></pre></td></tr></table></figure>\n<p>从上述代码的输出结果即可看出，一旦设置了__metatable字段，getmetatable就会返回这个字段的值，而setmetatable将引发一个错误。</p>\n<h2 id=\"table访问的元方法\"><a href=\"https://chebincarl.github.io/#table%E8%AE%BF%E9%97%AE%E7%9A%84%E5%85%83%E6%96%B9%E6%B3%95\" class=\"headerlink\" title=\"table访问的元方法\"></a><span style=\"color:#EF7060;\">table访问的元方法</span></h2><p>算术类和关系类运算符的元方法都为各种错误情况定义了行为，它们不会改变语言的常规行为。但是Lua还提供了一种可以改变table行为的方法。有两种可以改变的table行为：查询table及修改table中不存在的字段。</p>\n<p>** __index 元方法 **</p>\n<p>这是 metatable 最常用的键（key）。</p>\n<p>当你通过键来访问 table 的时候，如果这个键没有值，那么Lua就会寻找该table的metatable（假定有metatable）中的__index键。如果__index包含一个表，Lua会在表中查找相应的键。</p>\n<p>例如：</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">other = { foo = <span class=\"number\">3</span> } </span><br><span class=\"line\">t = <span class=\"built_in\">setmetatable</span>({}, { <span class=\"built_in\">__index</span> = other }) </span><br><span class=\"line\"><span class=\"built_in\">print</span>(t.foo) <span class=\"comment\">-- 3</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(t.bar) <span class=\"comment\">-- nil</span></span><br></pre></td></tr></table></figure>\n<p>如果__index包含一个函数的话，Lua就会调用那个函数，table和键会作为参数传递给函数。</p>\n<p>__index 元方法查看表中元素是否存在，如果不存在，返回结果为 nil；如果存在则由 __index 返回结果。</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mytable = <span class=\"built_in\">setmetatable</span>({key1 = <span class=\"string\">\"value1\"</span>}, {</span><br><span class=\"line\">  <span class=\"built_in\">__index</span> = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(mytable, key)</span></span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> key == <span class=\"string\">\"key2\"</span> <span class=\"keyword\">then</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">\"metatablevalue\"</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\">})</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(mytable.key1,mytable.key2)</span><br></pre></td></tr></table></figure>\n<p>实例输出结果为：</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">value1    metatablevalue</span><br></pre></td></tr></table></figure>\n<p>实例解析：</p>\n<ul>\n<li>mytable 表赋值为 {key1 = “value1”}。</li>\n<li>mytable 设置了元表，元方法为 __index。</li>\n<li>在mytable表中查找 key1，如果找到，返回该元素，找不到则继续。</li>\n<li>在mytable表中查找 key2，如果找到，返回 metatablevalue，找不到则继续。</li>\n<li>判断元表有没有__index方法，如果__index方法是一个函数，则调用该函数。</li>\n<li>元方法中查看是否传入 “key2” 键的参数（mytable.key2已设置），如果传入 “key2” 参数返回 “metatablevalue”，否则返回 mytable 对应的键值。</li>\n</ul>\n<p>我们还可以将以上代码简单写成：</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mytable = <span class=\"built_in\">setmetatable</span>({key1 = <span class=\"string\">\"value1\"</span>}, { <span class=\"built_in\">__index</span> = { key2 = <span class=\"string\">\"metatablevalue\"</span> } })</span><br><span class=\"line\"><span class=\"built_in\">print</span>(mytable.key1,mytable.key2)</span><br></pre></td></tr></table></figure>\n<p>如果想在访问table时禁用__index元方法，可以通过函数rawget(table,key)完成。通过该方法并不会加速table的访问效率。</p>\n<p>** 总结 **</p>\n<p>Lua查找一个表元素时的规则，其实就是如下3个步骤:</p>\n<ul>\n<li>在表中查找，如果找到，返回该元素，找不到则下一步</li>\n<li>判断该表是否有元表，如果没有元表，返回nil，有元表则下一步</li>\n<li>判断元表有没有__index方法，如果__index方法为nil，则返回nil；如果__index方法是一个表，则重复1、2、3；如果__index方法是一个函数，则返回该函数的返回值。</li>\n</ul>\n<p>** __newindex 元方法 **<br>__newindex 元方法用来对表更新，__index则用来对表访问 。</p>\n<p>当你给表的一个缺少的索引赋值，解释器就会查找__newindex元方法：如果存在则调用这个函数而不进行赋值操作。</p>\n<p>以下实例演示了 __newindex 元方法的应用：</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mymetatable = {}</span><br><span class=\"line\">mytable = <span class=\"built_in\">setmetatable</span>({key1 = <span class=\"string\">\"value1\"</span>}, { <span class=\"built_in\">__newindex</span> = mymetatable })</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(mytable.key1)</span><br><span class=\"line\"></span><br><span class=\"line\">mytable.newkey = <span class=\"string\">\"新值2\"</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(mytable.newkey,mymetatable.newkey)</span><br><span class=\"line\"></span><br><span class=\"line\">mytable.key1 = <span class=\"string\">\"新值1\"</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(mytable.key1,mymetatable.key1)</span><br></pre></td></tr></table></figure>\n<p>以上实例执行输出结果为：</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">value1</span><br><span class=\"line\"><span class=\"literal\">nil</span>    新值<span class=\"number\">2</span></span><br><span class=\"line\">新值<span class=\"number\">1</span>    <span class=\"literal\">nil</span></span><br></pre></td></tr></table></figure>\n<p>以上实例中表设置了元方法__newindex，在对新索引键（newkey）赋值时（mytable.newkey = “新值2”），会调用元方法，而不进行赋值。而如果对已存在的索引键（key1），则会进行赋值，而不调用元方法 __newindex。</p>\n<p>以下实例使用了 rawset 函数来更新表：</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mytable =</span><br><span class=\"line\">    <span class=\"built_in\">setmetatable</span>(</span><br><span class=\"line\">    {key1 = <span class=\"string\">\"value1\"</span>},</span><br><span class=\"line\">    {</span><br><span class=\"line\">        <span class=\"built_in\">__newindex</span> = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(mytable, key, value)</span></span></span><br><span class=\"line\">            <span class=\"built_in\">rawset</span>(mytable, key, <span class=\"string\">'\"'</span> .. value .. <span class=\"string\">'\"'</span>)</span><br><span class=\"line\">        <span class=\"keyword\">end</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">mytable.key1 = <span class=\"string\">\"new value\"</span></span><br><span class=\"line\">mytable.key2 = <span class=\"number\">4</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(mytable.key1, mytable.key2)</span><br></pre></td></tr></table></figure>\n<p>以上实例执行输出结果为：</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">new value    <span class=\"string\">\"4\"</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"总结\"><a href=\"https://chebincarl.github.io/#%E6%80%BB%E7%BB%93\" class=\"headerlink\" title=\"总结\"></a><span style=\"color:#039BE5;\">总结</span></h1><p>从本文中可以知道元表可以很好的简化我们的代码功能，所以了解 Lua 的元表，可以让我们写出更加简单优秀的 Lua 代码。</p>","text":" &lt;p&gt;思考并回答以下问题：&lt;br&gt;1.如何创建一个空表？&lt;/p&gt; 在 Lua table 中可以访问对应的key来得到value值，但是却无法对两个 table 进行操作。要实现两个table的操作就要使用Lua提供的元表(Metatable...","link":"","photos":[],"count_time":{"symbolsCount":"7.1k","symbolsTime":"6 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%AE%97%E6%9C%AF%E7%B1%BB%E7%9A%84%E5%85%83%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">算术类的元方法</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%85%B3%E7%B3%BB%E7%B1%BB%E7%9A%84%E5%85%83%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">关系类的元方法</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%BA%93%E5%AE%9A%E4%B9%89%E7%9A%84%E5%85%83%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">库定义的元方法</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#table%E8%AE%BF%E9%97%AE%E7%9A%84%E5%85%83%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">table访问的元方法</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">总结</span></a>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Lua 学习 chapter5","uid":"c888a1cf7e4d1c58568bc08fa2b4538e","slug":"zl/2016-01-01-199_Lua 学习 chapter5 ","date":"2024-04-03T03:47:33.081Z","updated":"2024-04-03T03:47:33.082Z","comments":true,"path":"api/articles/zl/2016-01-01-199_Lua 学习 chapter5 .json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":" &lt;h3 id=&quot;目录&quot;&gt;目录&lt;/h3&gt; 表索引 表构造器 数组、列表和序列 遍历表 安全访问 表标准库 练习 表索引 a.x 表示的意思和a[“x”]一样，所以前者的可读性更高。 1 2 3 4 5 local a = &#123;&...","link":"","photos":[],"count_time":{"symbolsCount":"2.3k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"unity lua －1 最开始调用","uid":"e114d6fc302998111b5c100fb6afbfcb","slug":"zl/2016-01-01-193_unity lua －1 最开始调用","date":"2024-04-03T03:47:33.076Z","updated":"2024-04-03T03:47:33.077Z","comments":true,"path":"api/articles/zl/2016-01-01-193_unity lua －1 最开始调用.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":" &lt;ul&gt; lua脚本以txt的形式存储在Resources 下面 用LuaSvr svr svr.start调用到脚本 用 svr.luaState.getFunction(“foo”).call 来调用到里面的方法 lua Table – 是一个Key Value...","link":"","photos":[],"count_time":{"symbolsCount":"1.8k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}