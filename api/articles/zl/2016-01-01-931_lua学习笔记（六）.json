{"title":"lua学习笔记（六）","uid":"159171ab2db2dcc9927fd3c20c0193d9","slug":"zl/2016-01-01-931_lua学习笔记（六）","date":"2024-04-03T03:47:36.205Z","updated":"2024-04-03T03:47:36.205Z","comments":true,"path":"api/articles/zl/2016-01-01-931_lua学习笔记（六）.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<h2 id=\"Lua面向对象\"><a href=\"#Lua面向对象\" class=\"headerlink\" title=\"Lua面向对象\"></a>Lua面向对象</h2><h3 id=\"封装\"><a href=\"#封装\" class=\"headerlink\" title=\"封装\"></a>封装</h3><figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/><span class=\"line\">9</span><br/><span class=\"line\">10</span><br/><span class=\"line\">11</span><br/><span class=\"line\">12</span><br/><span class=\"line\">13</span><br/><span class=\"line\">14</span><br/><span class=\"line\">15</span><br/><span class=\"line\">16</span><br/><span class=\"line\">17</span><br/><span class=\"line\">18</span><br/><span class=\"line\">19</span><br/><span class=\"line\">20</span><br/><span class=\"line\">21</span><br/><span class=\"line\">22</span><br/><span class=\"line\">23</span><br/><span class=\"line\">24</span><br/><span class=\"line\">25</span><br/><span class=\"line\">26</span><br/><span class=\"line\">27</span><br/><span class=\"line\">28</span><br/><span class=\"line\">29</span><br/><span class=\"line\">30</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br/><span class=\"line\">People={isHumen=<span class=\"literal\">true</span>}\t\t<span class=\"comment\">-- 此处定义的元素都是相当于C++的静态成员变量</span></span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"comment\">-- 基类方法new</span></span><br/><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(o,n,a)</span></span></span><br/><span class=\"line\">\to=o <span class=\"keyword\">or</span> {}</span><br/><span class=\"line\">\t<span class=\"built_in\">setmetatable</span>(o,self)\t<span class=\"comment\">-- self相当于C++的this指针，但是这里指代的是元类People而不是对象o</span></span><br/><span class=\"line\">\tself.<span class=\"built_in\">__index</span>=self</span><br/><span class=\"line\">\to.name=n\t\t\t\t<span class=\"comment\">-- 用self代替o相当于C++中给静态成员变量赋值</span></span><br/><span class=\"line\">\to.age=a</span><br/><span class=\"line\">\t<span class=\"keyword\">return</span> o</span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"comment\">-- 基类元方法__tostring</span></span><br/><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">People:__tostring</span><span class=\"params\">()</span></span></span><br/><span class=\"line\">\t<span class=\"keyword\">local</span> sum=<span class=\"string\">&#34;名字为：&#34;</span>..self.name..<span class=\"string\">&#34;n年龄为：&#34;</span>..self.age <span class=\"comment\">-- 此处self指代的是实际调用时的对象</span></span><br/><span class=\"line\">\t<span class=\"keyword\">return</span> sum</span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"comment\">-- 基类方法walk</span></span><br/><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">People:walk</span><span class=\"params\">()</span></span></span><br/><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#34;我正在走！&#34;</span>)</span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"comment\">-- 创建对象</span></span><br/><span class=\"line\">me=People:new(<span class=\"literal\">nil</span>,<span class=\"string\">&#34;Jaxes&#34;</span>,<span class=\"number\">21</span>)</span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"comment\">-- 调用对象中的函数</span></span><br/><span class=\"line\"><span class=\"built_in\">print</span>(me)\t\t<span class=\"comment\">-- 等价于print(tostring(me))</span></span><br/><span class=\"line\">me:walk()\t\t<span class=\"comment\">-- 等价于me.walk(me)</span></span><br/></pre></td></tr></tbody></table></figure>\n<h3 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h3><figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/><span class=\"line\">9</span><br/><span class=\"line\">10</span><br/><span class=\"line\">11</span><br/><span class=\"line\">12</span><br/><span class=\"line\">13</span><br/><span class=\"line\">14</span><br/><span class=\"line\">15</span><br/><span class=\"line\">16</span><br/><span class=\"line\">17</span><br/><span class=\"line\">18</span><br/><span class=\"line\">19</span><br/><span class=\"line\">20</span><br/><span class=\"line\">21</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 类Worker派生自People类</span></span><br/><span class=\"line\">Worker=People:new()</span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"comment\">-- 派生类</span></span><br/><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Worker:new</span><span class=\"params\">(o,n,a,id)</span></span></span><br/><span class=\"line\">\to=o <span class=\"keyword\">or</span> People:new(o,n,a)</span><br/><span class=\"line\">\t<span class=\"built_in\">setmetatable</span>(o,self)</span><br/><span class=\"line\">\tself.<span class=\"built_in\">__index</span>=self</span><br/><span class=\"line\">\to.id=id</span><br/><span class=\"line\">\t<span class=\"keyword\">return</span> o</span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Worker:__tostring</span><span class=\"params\">()</span></span></span><br/><span class=\"line\">\t<span class=\"keyword\">local</span> sum=People.<span class=\"built_in\">__tostring</span>(self)</span><br/><span class=\"line\">\tsum=sum..<span class=\"string\">&#34;nID为：&#34;</span>..self.id</span><br/><span class=\"line\">\t<span class=\"keyword\">return</span> sum</span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/><span class=\"line\"></span><br/><span class=\"line\">worker=Worker:new(<span class=\"literal\">nil</span>,<span class=\"string\">&#34;kaka&#34;</span>,<span class=\"number\">55</span>,<span class=\"number\">01</span>)</span><br/><span class=\"line\"><span class=\"built_in\">print</span>(worker)</span><br/><span class=\"line\">worker:walk()\t\t<span class=\"comment\">-- 继承自父类函数walk</span></span><br/></pre></td></tr></tbody></table></figure>\n<h3 id=\"多态\"><a href=\"#多态\" class=\"headerlink\" title=\"多态\"></a>多态</h3><p>这个部分暂时还不清楚怎么搞，暂时做为后续储备内容</p>","text":"Lua面向对象封装123456789101112131415161718192021222324252627282930People={isHumen=true} -- 此处定义的元素都是相当于C++的静态成员变量-- 基类方法newfunction (o,n,a) o=o or...","link":"","photos":[],"count_time":{"symbolsCount":"1k","symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Lua%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">Lua面向对象</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%B0%81%E8%A3%85\"><span class=\"toc-text\">封装</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BB%A7%E6%89%BF\"><span class=\"toc-text\">继承</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%A4%9A%E6%80%81\"><span class=\"toc-text\">多态</span></a></li></ol></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Lua 排序算法","uid":"18c65ae79c1521b9ec150d64b8237a42","slug":"zl/2016-01-01-934_Lua 排序算法 ","date":"2024-04-03T03:47:36.206Z","updated":"2024-04-03T03:47:36.207Z","comments":true,"path":"api/articles/zl/2016-01-01-934_Lua 排序算法 .json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"冒泡排序（Bubble Sort，台湾译为：泡沫排序或气泡排序）是一种简单的排序算法。它重复地走访过要排序的数列，一次比较两个元素，如果他们的顺序错误就把他们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。这个算法的名字由来是因为越小的元素会经...","link":"","photos":[],"count_time":{"symbolsCount":883,"symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"lua","uid":"df60e476b394b1dd4755ec96c53302ff","slug":"zl/2016-01-01-932_lua","date":"2024-04-03T03:47:36.205Z","updated":"2024-04-03T03:47:36.206Z","comments":true,"path":"api/articles/zl/2016-01-01-932_lua.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"元表（类似操作符重载） OpenResty 最佳实践 Lua 提供的所有操作符都可以被重载： 元方法 含义 “add” + 操作 “sub” - 操作 其行为类似于 “add” 操作 “mul” * 操作 其行为类似于 “add” 操作 “div” / 操作 其行为类似于 “ad...","link":"","photos":[],"count_time":{"symbolsCount":"2.3k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}