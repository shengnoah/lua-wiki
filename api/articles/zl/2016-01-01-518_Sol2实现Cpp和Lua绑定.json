{"title":"Sol2实现Cpp和Lua绑定","uid":"a0aa244da9b5db84b7a7c09b4e0b028c","slug":"zl/2016-01-01-518_Sol2实现Cpp和Lua绑定","date":"2024-04-03T03:47:35.795Z","updated":"2024-04-03T03:47:35.795Z","comments":true,"path":"api/articles/zl/2016-01-01-518_Sol2实现Cpp和Lua绑定.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<div class=\"post-nav\">\n          <div class=\"post-nav-next post-nav-item\">\n<pre><code>          &lt;a href=&quot;/2018/06/17/cpp11_raw_string/&quot; rel=&quot;next&quot; title=&quot;C++11的Raw String Literals&quot;&gt;\n            &lt;i class=&quot;fa fa-chevron-left&quot;&gt;&lt;/i&gt; \n            &lt;p class=&quot;post-nav-pre-next-title&quot;&gt;\n              C++11的Raw String Literals\n            &lt;/p&gt; \n          &lt;/a&gt;\n        \n      &lt;/div&gt;\n\n      &lt;span class=&quot;post-nav-divider&quot;&gt;&lt;/span&gt;\n\n      &lt;div class=&quot;post-nav-prev post-nav-item&quot;&gt;\n        \n          &lt;a href=&quot;/2018/08/09/kcpp_intro/&quot; rel=&quot;prev&quot; title=&quot;一个轻量级的kcp会话实现&quot;&gt;\n          &lt;p class=&quot;post-nav-pre-next-title&quot;&gt;\n              一个轻量级的kcp会话实现\n          &lt;/p&gt; \n          &lt;i class=&quot;fa fa-chevron-right&quot;&gt;&lt;/i&gt;\n          &lt;/a&gt;\n        \n      &lt;/div&gt;\n    &lt;/div&gt;\n  \n\n  \n  \n\n  \n  \n\n  \n    &lt;p&gt;Sol是一个用于C++绑定Lua脚本的库，仅由头文件组成，方便集成，并提供了大量易用的API接口，可以便利地将Lua脚本与C++代码绑定起来，而不必去关心如何使用那些晦涩的Lua C API。正如其作者所言，Sol的目的就是提供极其简洁的API，并能高效到与C语言媲美，极大地来方便人们使用。&lt;/p&gt;\n</code></pre>\n<h1 id=\"编译条件\"><a href=\"#编译条件\" class=\"headerlink\" title=\"编译条件\"></a>编译条件</h1><p>Sol支持Lua的绝大多数版本，包括 5.1、5.2、5.3和LuaJit等，但由于代码中用到了许多C++11/14特性，因此编译时需要编译器支持C++14标准甚至C++17标准, 本人测试g++4.8.2无法编译过Sol2.20+的版本, 用g++6.2方能编过.</p>\n<h1 id=\"安装方法\"><a href=\"#安装方法\" class=\"headerlink\" title=\"安装方法\"></a>安装方法</h1><p>去 <a href=\"https://github.com/ThePhD/sol2\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/ThePhD/sol2</a> 下载一个sol.hpp , 然后放到 <code>/usr/local/include</code> 里即可</p>\n<h1 id=\"为什么强大\"><a href=\"#为什么强大\" class=\"headerlink\" title=\"为什么强大\"></a>为什么强大</h1><p>只需要包含一个sol.hpp头文件即可,需要任何其他的东西, 没有什么静态库/动态库之类的东西, 也不需要像tolua++一样那么麻烦每个类都要写pkg文件. 只需要稍微学习一下Sol2的导出API即可.</p>\n<p><strong>. . .</strong></p>\n<h1 id=\"基础使用\"><a href=\"#基础使用\" class=\"headerlink\" title=\"基础使用\"></a>基础使用</h1><p>从Sol的Github仓库clone下代码后，我们发现其目录下很多test开头的cpp/hpp文件，这些文件里面有着大量的Sol的使用示例以及各种特性的展示，而在example目录下的cpp文件都仅仅是一些最基础的使用示例。为了方便测试和体验Sol，你也可以自己建立一些自己的test.cpp文件，首先你要在源文件中include引用sol.hpp头文件，这样才能使用Sol提供的接口。而在使用gcc编译的时候，需要指定关联头文件的路径，可以使用类似于如下命令：</p>\n<p>g++ test.cpp -Isolpath/single/sol -llua -std=c++1z</p>\n<p>其中solpath是你Sol2的具体路径，在Sol2的项目目录下，有一个single/sol/sol.hpp头文件，这个头文件集成了所有的相关代码到一起，所以编译时 -I 后仅指定这一个路径就可以了，同时要保证你的gcc编译器支持C++14或17标准。</p>\n<h1 id=\"一个简单例子\"><a href=\"#一个简单例子\" class=\"headerlink\" title=\"一个简单例子\"></a>一个简单例子</h1><p>例子目录结构如下 : </p>\n<pre><code>├─test_sol2.cpp\n├─assert.hpp\n├─test_sol2.lua\n├─sol.hpp</code></pre><p>编译命令 : <code>g++ *.cpp -llua -std=c++1z</code></p>\n<figure class=\"highlight c++\"><figcaption><span>test_sol2.cpp</span></figcaption><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/><span class=\"line\">9</span><br/><span class=\"line\">10</span><br/><span class=\"line\">11</span><br/><span class=\"line\">12</span><br/><span class=\"line\">13</span><br/><span class=\"line\">14</span><br/><span class=\"line\">15</span><br/><span class=\"line\">16</span><br/><span class=\"line\">17</span><br/><span class=\"line\">18</span><br/><span class=\"line\">19</span><br/><span class=\"line\">20</span><br/><span class=\"line\">21</span><br/><span class=\"line\">22</span><br/><span class=\"line\">23</span><br/><span class=\"line\">24</span><br/><span class=\"line\">25</span><br/><span class=\"line\">26</span><br/><span class=\"line\">27</span><br/><span class=\"line\">28</span><br/><span class=\"line\">29</span><br/><span class=\"line\">30</span><br/><span class=\"line\">31</span><br/><span class=\"line\">32</span><br/><span class=\"line\">33</span><br/><span class=\"line\">34</span><br/><span class=\"line\">35</span><br/><span class=\"line\">36</span><br/><span class=\"line\">37</span><br/><span class=\"line\">38</span><br/><span class=\"line\">39</span><br/><span class=\"line\">40</span><br/><span class=\"line\">41</span><br/><span class=\"line\">42</span><br/><span class=\"line\">43</span><br/><span class=\"line\">44</span><br/><span class=\"line\">45</span><br/><span class=\"line\">46</span><br/><span class=\"line\">47</span><br/><span class=\"line\">48</span><br/><span class=\"line\">49</span><br/><span class=\"line\">50</span><br/><span class=\"line\">51</span><br/><span class=\"line\">52</span><br/><span class=\"line\">53</span><br/><span class=\"line\">54</span><br/><span class=\"line\">55</span><br/><span class=\"line\">56</span><br/><span class=\"line\">57</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br/><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&#34;sol.hpp&#34;</span></span></span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br/><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&#34;assert.hpp&#34;</span></span></span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"params\">()</span></span></span><br/><span class=\"line\"><span class=\"function\"></span>{</span><br/><span class=\"line\">\t<span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">&#34;=== namespacing ===&#34;</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br/><span class=\"line\"></span><br/><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">my_class</span></span></span><br/><span class=\"line\"><span class=\"class\">\t{</span></span><br/><span class=\"line\">\t\t<span class=\"keyword\">int</span> b = <span class=\"number\">24</span>;</span><br/><span class=\"line\"></span><br/><span class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">f</span><span class=\"params\">()</span> <span class=\"keyword\">const</span></span></span><br/><span class=\"line\"><span class=\"function\">\t\t</span>{</span><br/><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"number\">24</span>;</span><br/><span class=\"line\">\t\t}</span><br/><span class=\"line\"></span><br/><span class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">g</span><span class=\"params\">()</span></span></span><br/><span class=\"line\"><span class=\"function\">\t\t</span>{</span><br/><span class=\"line\">\t\t\t++b;</span><br/><span class=\"line\">\t\t}</span><br/><span class=\"line\">\t};</span><br/><span class=\"line\"></span><br/><span class=\"line\">\tsol::state lua;</span><br/><span class=\"line\">\tlua.open_libraries();</span><br/><span class=\"line\"></span><br/><span class=\"line\">\t</span><br/><span class=\"line\">\t<span class=\"comment\">// namespacing is just putting things in a table</span></span><br/><span class=\"line\">\tsol::table bark = lua.create_named_table(<span class=\"string\">&#34;bark&#34;</span>);</span><br/><span class=\"line\">\tbark.new_usertype&lt;my_class&gt;(<span class=\"string\">&#34;my_class&#34;</span>,</span><br/><span class=\"line\">\t\t\t\t\t\t\t\t<span class=\"string\">&#34;f&#34;</span>, &amp;my_class::f,</span><br/><span class=\"line\">\t\t\t\t\t\t\t\t<span class=\"string\">&#34;g&#34;</span>, &amp;my_class::g); <span class=\"comment\">// the usual</span></span><br/><span class=\"line\"></span><br/><span class=\"line\">\t<span class=\"comment\">// can add functions, as well (just like the global table)</span></span><br/><span class=\"line\">\tbark.set_function(<span class=\"string\">&#34;print_my_class&#34;</span>, [](my_class &amp;self) { </span><br/><span class=\"line\">        <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">&#34;my_class { b: &#34;</span> &lt;&lt; self.b &lt;&lt; <span class=\"string\">&#34; }&#34;</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>; </span><br/><span class=\"line\">    });</span><br/><span class=\"line\"></span><br/><span class=\"line\">\t<span class=\"comment\">// // this works</span></span><br/><span class=\"line\">\t<span class=\"comment\">// lua.script(&#34;obj = bark.my_class.new()&#34;);</span></span><br/><span class=\"line\">\t<span class=\"comment\">// lua.script(&#34;obj:g()&#34;);</span></span><br/><span class=\"line\"></span><br/><span class=\"line\">\t<span class=\"comment\">// // calling this function also works</span></span><br/><span class=\"line\">\t<span class=\"comment\">// lua.script(&#34;bark.print_my_class(obj)&#34;);</span></span><br/><span class=\"line\"></span><br/><span class=\"line\">\t<span class=\"comment\">// load and execute from file</span></span><br/><span class=\"line\">\tlua.script_file(<span class=\"string\">&#34;test_sol2.lua&#34;</span>);</span><br/><span class=\"line\"></span><br/><span class=\"line\">\tmy_class &amp;obj = lua[<span class=\"string\">&#34;obj&#34;</span>];</span><br/><span class=\"line\">\tc_assert(obj.b == <span class=\"number\">25</span>);</span><br/><span class=\"line\"></span><br/><span class=\"line\">\t<span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; (obj.b == <span class=\"number\">25</span> ? <span class=\"string\">&#34;assert success&#34;</span> : <span class=\"string\">&#34;assert fail&#34;</span>) &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br/><span class=\"line\"></span><br/><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br/><span class=\"line\">}</span><br/></pre></td></tr></tbody></table></figure>\n<figure class=\"highlight c++\"><figcaption><span>assert.hpp</span></figcaption><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/><span class=\"line\">9</span><br/><span class=\"line\">10</span><br/><span class=\"line\">11</span><br/><span class=\"line\">12</span><br/><span class=\"line\">13</span><br/><span class=\"line\">14</span><br/><span class=\"line\">15</span><br/><span class=\"line\">16</span><br/><span class=\"line\">17</span><br/><span class=\"line\">18</span><br/><span class=\"line\">19</span><br/><span class=\"line\">20</span><br/><span class=\"line\">21</span><br/><span class=\"line\">22</span><br/><span class=\"line\">23</span><br/><span class=\"line\">24</span><br/><span class=\"line\">25</span><br/><span class=\"line\">26</span><br/><span class=\"line\">27</span><br/><span class=\"line\">28</span><br/><span class=\"line\">29</span><br/><span class=\"line\">30</span><br/><span class=\"line\">31</span><br/><span class=\"line\">32</span><br/><span class=\"line\">33</span><br/><span class=\"line\">34</span><br/><span class=\"line\">35</span><br/><span class=\"line\">36</span><br/><span class=\"line\">37</span><br/><span class=\"line\">38</span><br/><span class=\"line\">39</span><br/><span class=\"line\">40</span><br/><span class=\"line\">41</span><br/><span class=\"line\">42</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> EXAMPLES_ASSERT_HPP</span></span><br/><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> EXAMPLES_ASSERT_HPP</span></span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> SOL2_CI</span></span><br/><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">pre_main</span> {</span></span><br/><span class=\"line\">        pre_main() {</span><br/><span class=\"line\">                <span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> _MSC_VER</span></span><br/><span class=\"line\">                _set_abort_behavior(<span class=\"number\">0</span>, _WRITE_ABORT_MSG);</span><br/><span class=\"line\">                <span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br/><span class=\"line\">        }</span><br/><span class=\"line\">} pm;</span><br/><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span> <span class=\"comment\">// Prevent lockup when doing Continuous Integration</span></span></span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> NDEBUG</span></span><br/><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;exception&gt;</span></span></span><br/><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br/><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdlib&gt;</span></span></span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"meta\">#   <span class=\"meta-keyword\">define</span> m_assert(condition, message) </span></span><br/><span class=\"line\">    <span class=\"keyword\">do</span> { </span><br/><span class=\"line\">        <span class=\"keyword\">if</span> (! (condition)) { </span><br/><span class=\"line\">            <span class=\"built_in\">std</span>::<span class=\"built_in\">cerr</span> &lt;&lt; <span class=\"string\">&#34;Assertion `&#34;</span> <span class=\"meta\">#condition <span class=\"meta-string\">&#34;` failed in &#34;</span> &lt;&lt; __FILE__ </span></span><br/><span class=\"line\">                      &lt;&lt; <span class=\"string\">&#34; line &#34;</span> &lt;&lt; __LINE__ &lt;&lt; <span class=\"string\">&#34;: &#34;</span> &lt;&lt; message &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>; </span><br/><span class=\"line\">            <span class=\"built_in\">std</span>::terminate(); </span><br/><span class=\"line\">        } </span><br/><span class=\"line\">    } <span class=\"keyword\">while</span> (<span class=\"literal\">false</span>)</span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"meta\">#   <span class=\"meta-keyword\">define</span> c_assert(condition) </span></span><br/><span class=\"line\">    <span class=\"keyword\">do</span> { </span><br/><span class=\"line\">        <span class=\"keyword\">if</span> (! (condition)) { </span><br/><span class=\"line\">            <span class=\"built_in\">std</span>::<span class=\"built_in\">cerr</span> &lt;&lt; <span class=\"string\">&#34;Assertion `&#34;</span> <span class=\"meta\">#condition <span class=\"meta-string\">&#34;` failed in &#34;</span> &lt;&lt; __FILE__ </span></span><br/><span class=\"line\">                      &lt;&lt; <span class=\"string\">&#34; line &#34;</span> &lt;&lt; __LINE__ &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>; </span><br/><span class=\"line\">            <span class=\"built_in\">std</span>::terminate(); </span><br/><span class=\"line\">        } </span><br/><span class=\"line\">    } <span class=\"keyword\">while</span> (<span class=\"literal\">false</span>)</span><br/><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">else</span></span></span><br/><span class=\"line\"><span class=\"meta\">#   <span class=\"meta-keyword\">define</span> m_assert(condition, message) do { <span class=\"meta-keyword\">if</span> (false) { (void)(condition); </span></span><br/><span class=\"line\">    (<span class=\"keyword\">void</span>)<span class=\"keyword\">sizeof</span>(message); } } <span class=\"keyword\">while</span> (<span class=\"literal\">false</span>)</span><br/><span class=\"line\"><span class=\"meta\">#   <span class=\"meta-keyword\">define</span> c_assert(condition) do { <span class=\"meta-keyword\">if</span> (false) { (void)(condition); } } while (false)</span></span><br/><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span> <span class=\"comment\">// EXAMPLES_ASSERT_HPP</span></span></span><br/></pre></td></tr></tbody></table></figure>\n<figure class=\"highlight lua\"><figcaption><span>test_sol2.lua</span></figcaption><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">obj = bark.my_class.new()</span><br/><span class=\"line\">obj:g()</span><br/><span class=\"line\">bark.print_my_class(obj)</span><br/></pre></td></tr></tbody></table></figure>\n<h2 id=\"打印结果\"><a href=\"#打印结果\" class=\"headerlink\" title=\"打印结果\"></a>打印结果</h2><pre><code>=== namespacing ===\nmy_class &#123; b: 25 &#125;\nassert success</code></pre>","text":" &lt;a href=&quot;/2018/06/17/cpp11_raw_string/&quot; rel=&quot;next&quot; title=&quot;C++11的Raw String Literals&quot;&gt; &lt;i class=&quot...","link":"","photos":[],"count_time":{"symbolsCount":"4.8k","symbolsTime":"4 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%BC%96%E8%AF%91%E6%9D%A1%E4%BB%B6\"><span class=\"toc-text\">编译条件</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">安装方法</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%B8%BA%E4%BB%80%E4%B9%88%E5%BC%BA%E5%A4%A7\"><span class=\"toc-text\">为什么强大</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">基础使用</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E4%BE%8B%E5%AD%90\"><span class=\"toc-text\">一个简单例子</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%89%93%E5%8D%B0%E7%BB%93%E6%9E%9C\"><span class=\"toc-text\">打印结果</span></a></li></ol></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"lua支持init64","uid":"9485aec3aa9494e98d0fdf9b67a599c4","slug":"zl/2016-01-01-523_lua支持init64","date":"2024-04-03T03:47:35.796Z","updated":"2024-04-03T03:47:35.797Z","comments":true,"path":"api/articles/zl/2016-01-01-523_lua支持init64.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"lua5.3提供了很多很好的特性例如string.pack unpack这样的好东西，同时还支持ini64.在lua之前的版本中number只有一种类型double.对于init64基本按照int来处理. 对于64位的解决方案有很多种,基本的思路都是使用8byte的string或...","link":"","photos":[],"count_time":{"symbolsCount":"6.6k","symbolsTime":"6 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Lua中的封装","uid":"a16ffa25bc913f5c0040828aa3005f3e","slug":"zl/2016-01-01-519_Lua中的封装","date":"2024-04-03T03:47:35.795Z","updated":"2024-04-03T03:47:35.795Z","comments":true,"path":"api/articles/zl/2016-01-01-519_Lua中的封装.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"Lua中没有private，table中的key/value可以随意访问，利用metatable虽然可以施加一些限制，但是实际上有各种方法可以绕过这些限制。 下面介绍一种方法，实现真正的封装。 local LuaClass = require &#34;LuaClass&#34;...","link":"","photos":[],"count_time":{"symbolsCount":"3.8k","symbolsTime":"3 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}