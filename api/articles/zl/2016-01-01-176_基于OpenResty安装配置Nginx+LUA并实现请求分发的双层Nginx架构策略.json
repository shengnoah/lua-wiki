{"title":"基于OpenResty安装配置Nginx+LUA并实现请求分发的双层Nginx架构策略","uid":"ba17cf45fbc8e4f389116ffd1e13da5f","slug":"zl/2016-01-01-176_基于OpenResty安装配置Nginx+LUA并实现请求分发的双层Nginx架构策略","date":"2024-04-03T03:47:33.063Z","updated":"2024-04-03T03:47:33.063Z","comments":true,"path":"api/articles/zl/2016-01-01-176_基于OpenResty安装配置Nginx+LUA并实现请求分发的双层Nginx架构策略.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<p>台CentOS6.x<br/>192.168.1.210<br/>192.168.1.211<br/>192.168.1.212<br/>网络拓扑<br/>210和211作为应用层web服务器<br/>212作为网络请求分发代理服务器</p>\n<h1 id=\"Step1-安装Linux依赖\"><a href=\"#Step1-安装Linux依赖\" class=\"headerlink\" title=\"Step1:安装Linux依赖\"></a>Step1:安装Linux依赖</h1><figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y readline-devel pcre-devel openssl-devel gcc</span><br/></pre></td></tr></tbody></table></figure>\n<h1 id=\"Step2-安装Nginx-Openresty\"><a href=\"#Step2-安装Nginx-Openresty\" class=\"headerlink\" title=\"Step2:安装Nginx Openresty\"></a>Step2:安装Nginx Openresty</h1><figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/><span class=\"line\">9</span><br/><span class=\"line\">10</span><br/><span class=\"line\">11</span><br/><span class=\"line\">12</span><br/><span class=\"line\">13</span><br/><span class=\"line\">14</span><br/><span class=\"line\">15</span><br/><span class=\"line\">16</span><br/><span class=\"line\">17</span><br/><span class=\"line\">18</span><br/><span class=\"line\">19</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">wget http://openresty.org/download/ngx_openresty-1.7.7.2.tar.gz  </span><br/><span class=\"line\">tar -xzvf ngx_openresty-1.7.7.2.tar.gz  </span><br/><span class=\"line\">cd /usr/servers/ngx_openresty-1.7.7.2/</span><br/><span class=\"line\"></span><br/><span class=\"line\">cd bundle/LuaJIT-2.1-20150120/  </span><br/><span class=\"line\">make clean &amp;&amp; make &amp;&amp; make install  </span><br/><span class=\"line\">ln -sf luajit-2.1.0-alpha /usr/local/bin/luajit</span><br/><span class=\"line\"></span><br/><span class=\"line\">cd bundle  </span><br/><span class=\"line\">wget https://github.com/FRiCKLE/ngx_cache_purge/archive/2.3.tar.gz  </span><br/><span class=\"line\">tar -xvf 2.3.tar.gz  </span><br/><span class=\"line\"></span><br/><span class=\"line\">cd bundle  </span><br/><span class=\"line\">wget https://github.com/yaoweibin/nginx_upstream_check_module/archive/v0.3.0.tar.gz  </span><br/><span class=\"line\">tar -xvf v0.3.0.tar.gz  </span><br/><span class=\"line\"></span><br/><span class=\"line\">cd /usr/servers/ngx_openresty-1.7.7.2  </span><br/><span class=\"line\">./configure --prefix=/usr/servers --with-http_realip_module  --with-pcre  --with-luajit --add-module=./bundle/ngx_cache_purge-2.3/ --add-module=./bundle/nginx_upstream_check_module-0.3.0/ -j2  </span><br/><span class=\"line\">make &amp;&amp; make install</span><br/></pre></td></tr></tbody></table></figure>\n<h1 id=\"Step3-检查安装并启动\"><a href=\"#Step3-检查安装并启动\" class=\"headerlink\" title=\"Step3:检查安装并启动\"></a>Step3:检查安装并启动</h1><p>安装完成后有以下目录：</p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">cd /usr/servers/  </span><br/><span class=\"line\">ll</span><br/><span class=\"line\"></span><br/><span class=\"line\">/usr/servers/luajit</span><br/><span class=\"line\">/usr/servers/lualib</span><br/><span class=\"line\">/usr/servers/nginx</span><br/></pre></td></tr></tbody></table></figure>\n<p>检查nginx版本</p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/servers/nginx/sbin/nginx -V</span><br/></pre></td></tr></tbody></table></figure>\n<p>启动nginx:</p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/servers/nginx/sbin/nginx</span><br/></pre></td></tr></tbody></table></figure>\n<h1 id=\"Step4-Nginx添加LUA配置\"><a href=\"#Step4-Nginx添加LUA配置\" class=\"headerlink\" title=\"Step4:Nginx添加LUA配置\"></a>Step4:Nginx添加LUA配置</h1><p>使LUA配置按照工程化目录结构进行配置。</p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir /usr/hello</span><br/><span class=\"line\"></span><br/><span class=\"line\">cp -r /usr/servers/lualib /usr/hello/</span><br/></pre></td></tr></tbody></table></figure>\n<p>打开nginx.conf配置文件</p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">vi /usr/servers/nginx/conf/nginx.conf</span><br/></pre></td></tr></tbody></table></figure>\n<p>在http部分添加：</p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">lua_package_path &#34;/usr/hello/lualib/?.lua;;&#34;;  </span><br/><span class=\"line\">lua_package_cpath &#34;/usr/hello/lualib/?.so;;&#34;;  </span><br/><span class=\"line\">include /usr/hello/hello.conf;</span><br/></pre></td></tr></tbody></table></figure>\n<p>创建hello的lua配置和脚本</p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/><span class=\"line\">9</span><br/><span class=\"line\">10</span><br/><span class=\"line\">11</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">vi /usr/hello/hello.conf</span><br/><span class=\"line\"></span><br/><span class=\"line\">server {  </span><br/><span class=\"line\">    listen       80;  </span><br/><span class=\"line\">    server_name  _;  </span><br/><span class=\"line\">  </span><br/><span class=\"line\">    location /hello/test {  </span><br/><span class=\"line\">        default_type &#39;text/html&#39;;   </span><br/><span class=\"line\">        content_by_lua_file /usr/hello/lua/test.lua;  </span><br/><span class=\"line\">    }  </span><br/><span class=\"line\">}</span><br/></pre></td></tr></tbody></table></figure>\n<p>编辑lua脚本:</p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir /usr/hello/lua</span><br/><span class=\"line\"></span><br/><span class=\"line\">vi /usr/hello/lua/test.lua</span><br/><span class=\"line\"></span><br/><span class=\"line\">ngx.say(&#34;hello world&#34;)</span><br/></pre></td></tr></tbody></table></figure>\n<p>Nginx检查配置是否正确</p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">[root@eshop-cache01 hello]# /usr/servers/nginx/sbin/nginx -t  </span><br/><span class=\"line\">nginx: the configuration file /usr/servers/nginx/conf/nginx.conf syntax is ok</span><br/><span class=\"line\">nginx: configuration file /usr/servers/nginx/conf/nginx.conf test is successful</span><br/></pre></td></tr></tbody></table></figure>\n<p>Nginx重新加载配置生效</p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/servers/nginx/sbin/nginx -s reload</span><br/></pre></td></tr></tbody></table></figure>\n<h1 id=\"Step5-访问LUA配置的location路径\"><a href=\"#Step5-访问LUA配置的location路径\" class=\"headerlink\" title=\"Step5:访问LUA配置的location路径\"></a>Step5:访问LUA配置的location路径</h1><figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">curl http://192.168.1.210/hello/test</span><br/></pre></td></tr></tbody></table></figure>\n<p>返回test.lua中脚本输出的“hello world”。</p>\n<h1 id=\"Step6-分发层Nginx安装LUA脚本实现请求分发\"><a href=\"#Step6-分发层Nginx安装LUA脚本实现请求分发\" class=\"headerlink\" title=\"Step6:分发层Nginx安装LUA脚本实现请求分发\"></a>Step6:分发层Nginx安装LUA脚本实现请求分发</h1><p>我们作为一个流量分发的nginx，会发送http请求到后端的应用nginx上面去，所以要先引入lua http lib包。</p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">cd /usr/hello/lualib/resty/  </span><br/><span class=\"line\">wget https://raw.githubusercontent.com/pintsized/lua-resty-http/master/lib/resty/http_headers.lua  </span><br/><span class=\"line\">wget https://raw.githubusercontent.com/pintsized/lua-resty-http/master/lib/resty/http.lua</span><br/></pre></td></tr></tbody></table></figure>\n<p>在分发层Nginx写LUA脚本：</p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/><span class=\"line\">9</span><br/><span class=\"line\">10</span><br/><span class=\"line\">11</span><br/><span class=\"line\">12</span><br/><span class=\"line\">13</span><br/><span class=\"line\">14</span><br/><span class=\"line\">15</span><br/><span class=\"line\">16</span><br/><span class=\"line\">17</span><br/><span class=\"line\">18</span><br/><span class=\"line\">19</span><br/><span class=\"line\">20</span><br/><span class=\"line\">21</span><br/><span class=\"line\">22</span><br/><span class=\"line\">23</span><br/><span class=\"line\">24</span><br/><span class=\"line\">25</span><br/><span class=\"line\">26</span><br/><span class=\"line\">27</span><br/><span class=\"line\">28</span><br/><span class=\"line\">29</span><br/><span class=\"line\">30</span><br/><span class=\"line\">31</span><br/><span class=\"line\">32</span><br/><span class=\"line\">33</span><br/><span class=\"line\">34</span><br/><span class=\"line\">35</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">nano /usr/hello/lua/test.lua</span><br/><span class=\"line\"></span><br/><span class=\"line\">local uri_args = ngx.req.get_uri_args()</span><br/><span class=\"line\">local ecourseId = uri_args[&#34;ecourseId&#34;]</span><br/><span class=\"line\"></span><br/><span class=\"line\">local host = {&#34;192.168.1.210&#34;, &#34;192.168.1.211&#34;}</span><br/><span class=\"line\">local hash = ngx.crc32_long(ecourseId)</span><br/><span class=\"line\">hash = (hash % 2) + 1</span><br/><span class=\"line\">backend = &#34;http://&#34;..host[hash]</span><br/><span class=\"line\"></span><br/><span class=\"line\">local paras = &#34;&#34;;</span><br/><span class=\"line\">local request_args_tab = ngx.req.get_uri_args()</span><br/><span class=\"line\">for k, v in pairs(request_args_tab) do</span><br/><span class=\"line\">    paras=paras..k..&#34;=&#34;..v..&#34;&amp;&#34;</span><br/><span class=\"line\">end</span><br/><span class=\"line\"></span><br/><span class=\"line\">local requestPath = ngx.var.uri</span><br/><span class=\"line\">requestPath = requestPath..&#34;?&#34;..paras</span><br/><span class=\"line\"></span><br/><span class=\"line\">local http = require(&#34;resty.http&#34;)</span><br/><span class=\"line\">local httpc = http.new()</span><br/><span class=\"line\"></span><br/><span class=\"line\">local resp, err = httpc:request_uri(backend, {</span><br/><span class=\"line\">    method = &#34;GET&#34;,</span><br/><span class=\"line\">    path = requestPath</span><br/><span class=\"line\">})</span><br/><span class=\"line\"></span><br/><span class=\"line\">if not resp then</span><br/><span class=\"line\">    ngx.say(&#34;request error :&#34;, err)</span><br/><span class=\"line\">    return</span><br/><span class=\"line\">end</span><br/><span class=\"line\"></span><br/><span class=\"line\">ngx.say(resp.body)</span><br/><span class=\"line\"></span><br/><span class=\"line\">httpc:close()</span><br/></pre></td></tr></tbody></table></figure>\n<p>Nginx重新加载配置生效</p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/servers/nginx/sbin/nginx -s reload</span><br/></pre></td></tr></tbody></table></figure>\n<p>测试请求分发,在浏览器地址栏输入</p>\n<p><a href=\"http://192.168.1.212/hello/test?ecourseId=1\" target=\"_blank\" rel=\"noopener noreferrer\">http://192.168.1.212/hello/test?ecourseId=1</a><br/><a href=\"http://192.168.1.212/hello/test?ecourseId=2\" target=\"_blank\" rel=\"noopener noreferrer\">http://192.168.1.212/hello/test?ecourseId=2</a><br/><a href=\"http://192.168.1.212/hello/test?ecourseId=3\" target=\"_blank\" rel=\"noopener noreferrer\">http://192.168.1.212/hello/test?ecourseId=3</a><br/><a href=\"http://192.168.1.212/hello/test?ecourseId=4\" target=\"_blank\" rel=\"noopener noreferrer\">http://192.168.1.212/hello/test?ecourseId=4</a><br/>查看返回的结果，请求被分发到应用层web服务器节点了。根据ecourseId与应用层web服务节点数取模，找到对应的应用层服务器节点。</p>\n<h1 id=\"Step7-按照相同的方法部署另外两台机器的Nginx\"><a href=\"#Step7-按照相同的方法部署另外两台机器的Nginx\" class=\"headerlink\" title=\"Step7:按照相同的方法部署另外两台机器的Nginx\"></a>Step7:按照相同的方法部署另外两台机器的Nginx</h1><p>安装过程，略…<br/>应用层Nginx添加http请求功能包即可。</p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">cd /usr/hello/lualib/resty/  </span><br/><span class=\"line\">wget https://raw.githubusercontent.com/pintsized/lua-resty-http/master/lib/resty/http_headers.lua  </span><br/><span class=\"line\">wget https://raw.githubusercontent.com/pintsized/lua-resty-http/master/lib/resty/http.lua</span><br/></pre></td></tr></tbody></table></figure>\n<h1 id=\"补充：LUA脚本获取Nginx-Http请求的相关参数说明\"><a href=\"#补充：LUA脚本获取Nginx-Http请求的相关参数说明\" class=\"headerlink\" title=\"补充：LUA脚本获取Nginx Http请求的相关参数说明\"></a>补充：LUA脚本获取Nginx Http请求的相关参数说明</h1><p>1.获取当前请求的url相关信息</p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/><span class=\"line\">9</span><br/><span class=\"line\">10</span><br/><span class=\"line\">11</span><br/><span class=\"line\">12</span><br/><span class=\"line\">13</span><br/><span class=\"line\">14</span><br/><span class=\"line\">15</span><br/><span class=\"line\">16</span><br/><span class=\"line\">17</span><br/><span class=\"line\">18</span><br/><span class=\"line\">19</span><br/><span class=\"line\">20</span><br/><span class=\"line\">21</span><br/><span class=\"line\">22</span><br/><span class=\"line\">23</span><br/><span class=\"line\">24</span><br/><span class=\"line\">25</span><br/><span class=\"line\">26</span><br/><span class=\"line\">27</span><br/><span class=\"line\">28</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">function test()</span><br/><span class=\"line\">-- 这个变量等于包含一些客户端请求参数的原始URI，它无法修改，请查看$uri更改或重写URI。</span><br/><span class=\"line\">local request_uri = ngx.var.request_uri</span><br/><span class=\"line\"> log(tools.gbk_to_u8(&#34;获取当前请求的url==&#34;) .. tools.u8_to_gbk(cjson.encode(request_uri)) )</span><br/><span class=\"line\"></span><br/><span class=\"line\"> -- HTTP方法（如http，https）。按需使用，例：</span><br/><span class=\"line\"> local scheme = ngx.var.scheme server_addr</span><br/><span class=\"line\"> log(tools.gbk_to_u8(&#34;获取当前请求的url scheme==&#34;) .. tools.u8_to_gbk(cjson.encode(scheme)) )</span><br/><span class=\"line\"></span><br/><span class=\"line\"> -- 服务器地址，在完成一次系统调用后可以确定这个值，如果要绕开系统调用，则必须在listen中指定地址并且使用bind参数。</span><br/><span class=\"line\"> local server_addr = ngx.var.server_addruri </span><br/><span class=\"line\"> log(tools.gbk_to_u8(&#34;获取当前请求的url server_addr==&#34;) .. tools.u8_to_gbk(cjson.encode(server_addr)) )</span><br/><span class=\"line\"></span><br/><span class=\"line\">-- 请求中的当前URI(不带请求参数，参数位于$args)，可以不同于浏览器传递的$request_uri的值，它可以通过内部重定向，或者使用index指令进行修改。</span><br/><span class=\"line\"> local uri = ngx.var.uri </span><br/><span class=\"line\"> log(tools.gbk_to_u8(&#34;获取当前请求的url uri==&#34;) .. tools.u8_to_gbk(cjson.encode(uri)) )</span><br/><span class=\"line\"></span><br/><span class=\"line\"> -- 服务器名称</span><br/><span class=\"line\"> local server_name  = ngx.var.server_name  </span><br/><span class=\"line\"> log(tools.gbk_to_u8(&#34;获取当前请求的url server_name ==&#34;) .. tools.u8_to_gbk(cjson.encode(server_name )) </span><br/><span class=\"line\"></span><br/><span class=\"line\"> -- 请求到达服务器的端口号。</span><br/><span class=\"line\">local server_port  = ngx.var.server_name  </span><br/><span class=\"line\"> log(tools.gbk_to_u8(&#34;获取当前请求的url server_port ==&#34;) .. tools.u8_to_gbk(cjson.encode(server_port )) </span><br/><span class=\"line\">end</span><br/><span class=\"line\"></span><br/><span class=\"line\"></span><br/><span class=\"line\">test()</span><br/></pre></td></tr></tbody></table></figure>\n<p>2.获取发送请求端过来的url相关信息</p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">-- 获取远程的IP地址。</span><br/><span class=\"line\">local remote_addr  = ngx.var.remote_addr </span><br/><span class=\"line\"> log(m_uuid,tools.gbk_to_u8(&#34;获取发送请求过来的远程请求remote_addr ==&#34;) .. tools.u8_to_gbk(cjson.encode(remote_addr )) )</span><br/><span class=\"line\"></span><br/><span class=\"line\"> -- 获取远程的端口号</span><br/><span class=\"line\"> local remote_port  = ngx.var.remote_port  </span><br/><span class=\"line\"> log(m_uuid,tools.gbk_to_u8(&#34;获取发送请求过来的远程请求remote_port ==&#34;) .. tools.u8_to_gbk(cjson.encode(remote_port )) )</span><br/></pre></td></tr></tbody></table></figure>","text":"台CentOS6.x192.168.1.210192.168.1.211192.168.1.212网络拓扑210和211作为应用层web服务器212作为网络请求分发代理服务器 Step1:安装Linux依赖1yum install -y readline-devel pcre-d...","link":"","photos":[],"count_time":{"symbolsCount":"5.5k","symbolsTime":"5 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Step1-%E5%AE%89%E8%A3%85Linux%E4%BE%9D%E8%B5%96\"><span class=\"toc-text\">Step1:安装Linux依赖</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Step2-%E5%AE%89%E8%A3%85Nginx-Openresty\"><span class=\"toc-text\">Step2:安装Nginx Openresty</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Step3-%E6%A3%80%E6%9F%A5%E5%AE%89%E8%A3%85%E5%B9%B6%E5%90%AF%E5%8A%A8\"><span class=\"toc-text\">Step3:检查安装并启动</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Step4-Nginx%E6%B7%BB%E5%8A%A0LUA%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">Step4:Nginx添加LUA配置</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Step5-%E8%AE%BF%E9%97%AELUA%E9%85%8D%E7%BD%AE%E7%9A%84location%E8%B7%AF%E5%BE%84\"><span class=\"toc-text\">Step5:访问LUA配置的location路径</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Step6-%E5%88%86%E5%8F%91%E5%B1%82Nginx%E5%AE%89%E8%A3%85LUA%E8%84%9A%E6%9C%AC%E5%AE%9E%E7%8E%B0%E8%AF%B7%E6%B1%82%E5%88%86%E5%8F%91\"><span class=\"toc-text\">Step6:分发层Nginx安装LUA脚本实现请求分发</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Step7-%E6%8C%89%E7%85%A7%E7%9B%B8%E5%90%8C%E7%9A%84%E6%96%B9%E6%B3%95%E9%83%A8%E7%BD%B2%E5%8F%A6%E5%A4%96%E4%B8%A4%E5%8F%B0%E6%9C%BA%E5%99%A8%E7%9A%84Nginx\"><span class=\"toc-text\">Step7:按照相同的方法部署另外两台机器的Nginx</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E8%A1%A5%E5%85%85%EF%BC%9ALUA%E8%84%9A%E6%9C%AC%E8%8E%B7%E5%8F%96Nginx-Http%E8%AF%B7%E6%B1%82%E7%9A%84%E7%9B%B8%E5%85%B3%E5%8F%82%E6%95%B0%E8%AF%B4%E6%98%8E\"><span class=\"toc-text\">补充：LUA脚本获取Nginx Http请求的相关参数说明</span></a></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Lua string.find 中的 “坑”","uid":"f0b579433247a9da11a0809ef2f14994","slug":"zl/2016-01-01-177_Lua string.find 中的 “坑” ","date":"2024-04-03T03:47:33.063Z","updated":"2024-04-03T03:47:33.063Z","comments":true,"path":"api/articles/zl/2016-01-01-177_Lua string.find 中的 “坑” .json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"我们的线上环境，ngx_lua api 都是以模块形式加载到 lua 级别的 vm 中，已达到最大性能。而且我们并没有使用传统的 “包” 的形式来加载(也就是 require &#34;xx.xx.xx&#34; )，而是直接以模块名为加载( require &#34;xx&#3...","link":"","photos":[],"count_time":{"symbolsCount":"3k","symbolsTime":"3 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Lua程序设计（1）","uid":"f7204e4c768f3914953c0add1a30be01","slug":"zl/2016-01-01-173_Lua程序设计（1）","date":"2024-04-03T03:47:33.062Z","updated":"2024-04-03T03:47:33.062Z","comments":true,"path":"api/articles/zl/2016-01-01-173_Lua程序设计（1）.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"Lua中的字符串。 字符串Lua语言中的字符串是一串字节组成的序列，Lua核心并不关心这些字节究竟以何种方式编码文本。 在Lua语言中，字符使用8个比特位来存储。 Lua语言中的字符串是不可变值。 像Lua语言中的其他对象（表、函数等）一样，Lua语言中的字符串也是自动内存管理的...","link":"","photos":[],"count_time":{"symbolsCount":"1.3k","symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}