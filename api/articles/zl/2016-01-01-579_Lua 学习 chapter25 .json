{"title":"Lua 学习 chapter25","uid":"750a10f53a4ef67c79f4f67a9f9da4d0","slug":"zl/2016-01-01-579_Lua 学习 chapter25 ","date":"2024-04-03T03:47:35.828Z","updated":"2024-04-03T03:47:35.828Z","comments":true,"path":"api/articles/zl/2016-01-01-579_Lua 学习 chapter25 .json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<h3 id=\"目录\">目录</h3>\n<ol>\n  <li>自省机制</li>\n  <li>访问变量</li>\n  <li>钩子</li>\n  <li>沙盒</li>\n</ol>\n<blockquote>\n  <p>只有疯狂过，你才知道自己究竟能不能成功。</p>\n</blockquote>\n<h2 id=\"自省机制\">自省机制</h2>\n<p>通过debug.getinfo(foo)，函数就会返回一个包含该函数有关的一些数据的表。</p>\n<h2 id=\"访问变量\">访问变量</h2>\n<p>通过debug.getlocal来检查任意活跃函数的局部变量。还可以通过函数getupvalue来访问一个呗lua函数所使用的的非局部变量。\n我们还可以通过traceback函数来打印堆栈信息。</p>\n<h2 id=\"钩子\">钩子</h2>\n<p>调试库中的钩子机制允许用户注册一个钩子函数，这个钩子函数会在程序运行中某个特定事件发生时被调用：</p>\n<ul>\n  <li>每当调用一个函数时产生的call事件</li>\n  <li>每当函数返回时产生的return事件</li>\n  <li>每当开始执行一行新代码产生的line事件</li>\n  <li>执行完指定数量的指令后产生的count事件</li>\n</ul>\n<p>钩子函数的注册：通过debug.sethook：第一个参数是钩子函数，第二个参数是描述要监控事件掩码字符串，第三个参数是一个用于描述以何种频度获取count事件的可选参数。\n要监控call、return、line事件，把这几个事件的首字母放入掩码字符串。要监控count事件，则需要在第三个参数中指定一个计数器。如果要关闭钩子，不带参数的调用sethook函数即可。</p>\n<div class=\"language-lua highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n</pre></td><td class=\"rouge-code\"><pre><span class=\"k\">function</span> <span class=\"nf\">hello</span><span class=\"p\">(</span><span class=\"n\">event</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&#34;hello&#34;</span><span class=\"p\">,</span> <span class=\"n\">event</span><span class=\"p\">)</span>\n<span class=\"k\">end</span>\n<span class=\"nb\">debug.sethook</span><span class=\"p\">(</span><span class=\"n\">hello</span><span class=\"p\">,</span><span class=\"s2\">&#34;c&#34;</span><span class=\"p\">)</span>\n<span class=\"n\">hello</span><span class=\"p\">()</span>\n<span class=\"cm\">--[[输出\nhello\tcall\nhello\tcall\nhello\tcall\nhellohello\tcall\n\tnil\n]]</span><span class=\"c1\">--</span>\n<p></pre></td></tr></tbody></table></code></pre></div></div></p>\n<p>load函数通常被加载代码段的上值_ENV初始化为全局变量。</p>\n<p>在lua中，<strong>一个具有弱引用的键和一个强引用的值的表是一个瞬表。</strong></p>\n<div class=\"language-lua highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n</pre></td><td class=\"rouge-code\"><pre><span class=\"n\">o</span> <span class=\"o\">=</span> <span class=\"p\">&#123;</span> <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"s2\">&#34;hi&#34;</span><span class=\"p\">&#125;</span>\n<span class=\"nb\">setmetatable</span><span class=\"p\">(</span><span class=\"n\">o</span><span class=\"p\">,</span> <span class=\"p\">&#123;</span><span class=\"n\">__gc</span> <span class=\"o\">=</span> <span class=\"k\">function</span><span class=\"p\">(</span><span class=\"n\">o</span><span class=\"p\">)</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">o</span><span class=\"p\">.</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"k\">end</span><span class=\"p\">&#125;)</span>\n<span class=\"n\">o</span> <span class=\"o\">=</span> <span class=\"kc\">nil</span>\n<span class=\"nb\">collectgarbage</span><span class=\"p\">()</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n<p>元函数__gc表示析构函数，在垃圾回收这个对象的时候会自动调用函数。</p>\n<h2 id=\"垃圾收集器\">垃圾收集器</h2>\n<p>每一个垃圾回收周期由四个阶段组成：标记、清理、清除和析构。</p>\n<ul>\n  <li>标记阶段：把可达对象标记为活跃；</li>\n  <li>清理阶段处：理析构器和弱引用表，这些没有被标记为活跃状态的对象会被标记为活跃（复苏），并放在一个单独的列表中，这个列表将在析构阶段使用。然后，lua遍历弱引用表并从中移除键或者值未被标记的元素。</li>\n  <li>清除阶段：遍历所有对象，对象未被标记为活跃就回收，否则标记为清理标记，然后准备下一个清理周期。</li>\n  <li>析构阶段：调用清理阶段被分离出来的对象的析构器。</li>\n</ul>\n<pre><code>            &lt;hr style=&quot;visibility: hidden;&quot;/&gt;\n            \n            &lt;hr style=&quot;visibility: hidden;&quot;/&gt;\n</code></pre>\n","text":"目录 自省机制 访问变量 钩子 沙盒 只有疯狂过，你才知道自己究竟能不能成功。 自省机制 通过debug.getinfo(foo)，函数就会返回一个包含该函数有关的一些数据的表。 访问变量 通过debug.getlocal来检查任意活跃函数的局部变量。还可以通过函数getupva...","link":"","photos":[],"count_time":{"symbolsCount":"1.3k","symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%9B%AE%E5%BD%95\"><span class=\"toc-text\">目录</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%87%AA%E7%9C%81%E6%9C%BA%E5%88%B6\"><span class=\"toc-text\">自省机制</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%AE%BF%E9%97%AE%E5%8F%98%E9%87%8F\"><span class=\"toc-text\">访问变量</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%92%A9%E5%AD%90\"><span class=\"toc-text\">钩子</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8\"><span class=\"toc-text\">垃圾收集器</span></a>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Lua数据结构 — 闭包（四）","uid":"bd98559f4e69c07adf95186bacd882ab","slug":"zl/2016-01-01-581_Lua数据结构 — 闭包（四）","date":"2024-04-03T03:47:35.829Z","updated":"2024-04-03T03:47:35.830Z","comments":true,"path":"api/articles/zl/2016-01-01-581_Lua数据结构 — 闭包（四）.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":" 文章目录 &lt;/div&gt; &lt;p&gt;前面几篇文章已经说明了Lua里面很常用的几个数据结构，这次要分享的也是常用的数据结构之一 – &lt;strong&gt;函数的结构&lt;/strong&gt;。函数在Lua里也是一种变量，但是它却很特殊，能存储执行语句和...","link":"","photos":[],"count_time":{"symbolsCount":"4.7k","symbolsTime":"4 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"lua学习","uid":"95b16d2adc3f9ac3d9071f8d9e44b9d7","slug":"zl/2016-01-01-578_lua学习","date":"2024-04-03T03:47:35.828Z","updated":"2024-04-03T03:47:35.828Z","comments":true,"path":"api/articles/zl/2016-01-01-578_lua学习.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"一、注释单行注释：两个破折号多行注释：[[ … ]] 二、变量和流程控制所有的数字类型都是double num=42 字符串是Immutable的，和python一样 s = &#39;walternate&#39; t = &#34;double-quotes are also...","link":"","photos":[],"count_time":{"symbolsCount":"7.4k","symbolsTime":"7 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}