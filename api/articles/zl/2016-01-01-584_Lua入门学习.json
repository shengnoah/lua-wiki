{"title":"Lua入门学习","uid":"613f6d850733375f9556ed225c486d2c","slug":"zl/2016-01-01-584_Lua入门学习","date":"2024-04-03T03:47:35.831Z","updated":"2024-04-03T03:47:35.831Z","comments":true,"path":"api/articles/zl/2016-01-01-584_Lua入门学习.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<div class=\"row\">\n                    <div class=\"col-md-10 col-md-offset-1 panel panel-default\">\n<pre><code>                    &lt;aside class=&quot;aside clearfix&quot;&gt;\n                        &lt;a class=&quot;tag label label-info&quot; href=&quot;/tags/lua.html&quot;&gt;lua&lt;/a&gt;\n                    &lt;/aside&gt;\n                    &lt;section class=&quot;brief&quot;&gt;&lt;p&gt;了解到&lt;code&gt;Lua&lt;/code&gt;(一种轻量级、可嵌入式的脚本语言)，其实是很早之前和一些做游戏的朋友聊天的时候知道的，他们在项目中广泛地使用到这个语言。于是自己上网也看了一些lua开发中的一些特定发现，Lua 被运用的领域远不止游戏。特别最近很火的Redis和&lt;code&gt;OpenResty&lt;/code&gt;(一个基于Nginx 与Lua 的高性能Web 平台）其内部集成了大量精良的Lua 库、第三方模块以及大多数的依赖项，开发人员使用Lua编写脚本就能非常轻松开发出高性能的服务了。&lt;/p&gt;\n</code></pre>\n<p><img src=\"http://og0usnhfv.bkt.clouddn.com/lua.png\" alt=\"lua\"/></p>\n<p>若要了解一下lua在行业更深的应用，可以阅读云风的相关文章：<a href=\"https://blog.codingnow.com/eo/luaoeeeaeau/\">点击这里</a></p>\n<p>下面着重的还是Lua入门级别的学习总结</p>\n<h2 id=\"特性\">特性</h2>\n<p>Lua是一个<code>动态弱类型</code>语言，支持增量式垃圾收集策略。有内建的，与操作系统无关的协作式多线程（coroutine）支持。</p>\n<ul>\n<li>可以很方便的和用C/C++互相调用</li>\n<li>很简单，不涉及任何复杂的编程概念，对数据结构的描述能力强</li>\n<li>轻量级，库体积很小，只有几百K。</li>\n<li>学习很容易，开发效率高</li>\n<li>性能好， 支持协程，闭包等简化实现的手段</li>\n</ul>\n<h2 id=\"安装\">安装</h2>\n<p>lua的安装非常简单，直接参考下面的命令</p>\n<p>Linux环境</p>\n<pre><code>curl -R -O http://www.lua.org/ftp/lua-5.3.4.tar.gz\ntar zxf lua-5.3.4.tar.gz\ncd lua-5.3.4\nmake linux test\nmake install\n</code></pre>\n<p>Mac环境</p>\n<pre><code>curl -R -O http://www.lua.org/ftp/lua-5.3.4.tar.gz\ntar zxf lua-5.3.4.tar.gz\ncd lua-5.3.4\nmake macosx test\nmake install\n</code></pre>\n<p>安装完成后，我们在终端里面敲入lua，接口进入lua的命令交互模式</p>\n<pre><code>$ lua\n<p>Lua 5.3.4  Copyright © 1994-2017 <a href=\"http://Lua.org\">Lua.org</a>, PUC-Rio<br />\n&gt; print(&quot;go&quot;)<br />\ngo<br />\n</code></pre></p>\n<h2 id=\"内置类型\">内置类型</h2>\n<p>既然是动态类型的脚本语言，这说明同一个变量可以在不同时刻指向不同类型的数据</p>\n<p>lua的类型主要包含 字符串、函数、布尔、数字、空（nil）、表</p>\n<p>1、lua内置函数 <code>type</code> 能够返回一个值或一个变量所属的类型:</p>\n<p>testtype.lua</p>\n<pre><code>#!/usr/local/bin/lua\nprint(type(&#34;golang&#34;)) \nprint(type(print))         \nprint(type(true))          \nprint(type(1.9))         \nprint(type(nil))          \n</code></pre>\n<p>执行输出</p>\n<pre><code>./testtype.lua\n<p>string<br />\nfunction<br />\nboolean<br />\nnumber<br />\nnil<br />\n</code></pre></p>\n<p>2、字符串</p>\n<p>字符串你可以用单引号，也可以用双引号，还支持C类型的转义，比如：</p>\n<pre><code>‘a’ （响铃）， \n‘b’ （退格）， \n‘f’ （表单）， \n‘n’ （换行）， \n‘r’ （回车）， \n‘t’ （横向制表）， \n‘v’ （纵向制表）， \n‘\\’ （反斜杠）， \n‘”‘ （双引号）， \n‘” （单引号)\n</code></pre>\n<p>下面的四种方式定义了完全相同的字符串（其中的两个中括号可以用于定义有换行的字符串）</p>\n<pre><code>#!/usr/local/bin/lua\na = &#39;gon1.9&#34;&#39;\nprint(a)  \na = &#34;alon1.9&#34;&#34;\nprint(a)  \na = [[go\n1.9&#34;]]    \nprint(a) \n</code></pre>\n<blockquote>\n<p>使用前缀运算符’＃’（也称为长度运算符）可以得到字符串的长度。</p>\n</blockquote>\n<pre><code>#!/usr/local/bin/lua\na = &#34;golang&#34;\nprint(#a)            \nprint(#&#34;123","text":" &lt;aside class=&quot;aside clearfix&quot;&gt; &lt;a class=&quot;tag label label-info&quot; href=&quot;/tags/lua.html&quot;&gt;lua&lt;/a&gt...","link":"","photos":[],"count_time":{"symbolsCount":"2k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%89%B9%E6%80%A7\"><span class=\"toc-text\">特性</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AE%89%E8%A3%85\"><span class=\"toc-text\">安装</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%86%85%E7%BD%AE%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">内置类型</span></a></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Programming in Lua(Thrid Edition)笔记","uid":"a502732b8dc58224e972b6c53538b8c4","slug":"zl/2016-01-01-586_Programming in Lua(Thrid Edition)笔记","date":"2024-04-03T03:47:35.831Z","updated":"2024-04-03T03:47:35.831Z","comments":true,"path":"api/articles/zl/2016-01-01-586_Programming in Lua(Thrid Edition)笔记.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"14 The Environment这章有点难理解，有些段落反复看了好多遍才感觉好像是看懂了。 Lua将所有全局变量存储在一个叫做global environment的table中 1for n in pairs(_G) do print(n) end 对于动态变量名，可动态创建...","link":"","photos":[],"count_time":{"symbolsCount":"5.9k","symbolsTime":"5 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Lua数据结构 — TValue（一）","uid":"a882b094071ae3457c1fc477076c7f1e","slug":"zl/2016-01-01-582_Lua数据结构 — TValue（一）","date":"2024-04-03T03:47:35.830Z","updated":"2024-04-03T03:47:35.830Z","comments":true,"path":"api/articles/zl/2016-01-01-582_Lua数据结构 — TValue（一）.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"数据结构的设计，在一定程度上奠定了整个系统的设计，所以决定写一个对Lua主要数据结构的分析文章，本来打算写一篇就好了，但是每个数据类型其实都有点复杂，一篇的话篇幅太长，所以就拆开几篇来写了。 为什么是从TValue说起，TValue是实现Lua弱数据类型的主要数据结构，不但在脚本...","link":"","photos":[],"count_time":{"symbolsCount":777,"symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}