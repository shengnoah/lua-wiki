{"title":"design pattern - observer pattern in c++ and lua","uid":"0a15add781a9db23ff81d14c8ccc8d4b","slug":"zl/2016-01-01-1109_design pattern - observer pattern in c++ and lua","date":"2024-04-03T03:47:33.004Z","updated":"2024-04-03T03:47:33.004Z","comments":true,"path":"api/articles/zl/2016-01-01-1109_design pattern - observer pattern in c++ and lua.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<ul id=\"markdown-toc\">\n  <li><a href=\"#what-is-observer-pattern\" id=\"markdown-toc-what-is-observer-pattern\">What is Observer Pattern</a></li>\n  <li><a href=\"#example-in-c\" id=\"markdown-toc-example-in-c\">Example in C++</a></li>\n  <li><a href=\"#example-in-lua\" id=\"markdown-toc-example-in-lua\">Example in Lua</a></li>\n</ul>\n<center><br/>\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/0/01/W3sDesign_Observer_Design_Pattern_UML.jpg\" width=\"800\" itemprop=\"image\"/>\n</center>\n<p><br/>\n<a href=\"https://en.wikipedia.org/wiki/Observer_pattern\">Observer Pattern Wiki</a><br/></p>\n<blockquote>\n  <p>The observer pattern is a software design pattern in which an object, called the subject, maintains a list of its dependents, called observers, and notifies them automatically of any state changes, usually by calling one of their methods.\n</p>\n</blockquote>\n<center><b><br/>\n一一一一一一一一一一一一一一一一一一一一一一一一<br/>\n© Hung-Chi&#39;s Blog<br/>\n<a href=\"https://hungchicheng.github.io/2017/09/29/Design-Patterns-Observer-Pattern-in-lua-and-C++/\" id=\"link\" target=\"_blank\" rel=\"noopener noreferrer\">\n\thttps://hungchicheng.github.io/2017/09/29/Design-Patterns-Observer-Pattern-in-lua-and-C++/\n</a><br/>\n一一一一一一一一一一一一一一一一一一一一一一一一\n</b></center>\n<p><br/></p>\n<center>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n</center>\n<h2 id=\"what-is-observer-pattern\">What is Observer Pattern</h2>\n<h2 id=\"example-in-c\">Example in C++</h2>\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"cp\">#include &lt;iostream&gt;\n#include &lt;set&gt;\n</span><span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>\n<p><span class=\"k\">class</span> <span class=\"nc\">Observer</span><span class=\"p\">&#123;</span><br />\n<span class=\"k\">public</span><span class=\"o\">:</span><br />\n<span class=\"k\">virtual</span> <span class=\"kt\">void</span> <span class=\"n\">update</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">p</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span><br />\n<span class=\"p\">&#125;;</span></p>\n<p><span class=\"k\">class</span> <span class=\"nc\">Subject</span><span class=\"p\">&#123;</span><br />\n<span class=\"k\">protected</span><span class=\"o\">:</span><br />\n<span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">set</span><span class=\"o\">&lt;</span> <span class=\"n\">Observer</span><span class=\"o\"><em></span> <span class=\"o\">&gt;</span> <span class=\"n\">m_observerList</span><span class=\"p\">;</span><br />\n<span class=\"k\">public</span><span class=\"o\">:</span><br />\n<span class=\"kt\">void</span> <span class=\"n\">attach</span><span class=\"p\">(</span> <span class=\"n\">Observer</span> <span class=\"o\"></em></span><span class=\"n\">o</span> <span class=\"p\">)&#123;</span> <span class=\"n\">m_observerList</span><span class=\"p\">.</span><span class=\"n\">insert</span><span class=\"p\">(</span> <span class=\"n\">o</span> <span class=\"p\">);</span> <span class=\"p\">&#125;;</span><br />\n<span class=\"kt\">void</span> <span class=\"n\">detach</span><span class=\"p\">(</span> <span class=\"n\">Observer</span> <span class=\"o\">*</span><span class=\"n\">o</span> <span class=\"p\">)&#123;</span> <span class=\"n\">m_observerList</span><span class=\"p\">.</span><span class=\"n\">erase</span><span class=\"p\">(</span> <span class=\"n\">o</span> <span class=\"p\">);</span> <span class=\"p\">&#125;;</span><br />\n<span class=\"k\">virtual</span> <span class=\"kt\">void</span> <span class=\"n\">notify</span> <span class=\"p\">()</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span><br />\n<span class=\"p\">&#125;;</span></p>\n<p><span class=\"k\">class</span>  <span class=\"nc\">Subject1</span><span class=\"o\">:</span><span class=\"k\">public</span> <span class=\"n\">Subject</span><span class=\"p\">&#123;</span><br />\n<span class=\"k\">private</span><span class=\"o\">:</span><br />\n<span class=\"kt\">int</span> <span class=\"n\">m_state</span><span class=\"p\">;</span><br />\n<span class=\"k\">public</span><span class=\"o\">:</span><br />\n<span class=\"kt\">void</span> <span class=\"n\">notify</span> <span class=\"p\">()&#123;</span><br />\n<span class=\"k\">for</span> <span class=\"p\">(</span> <span class=\"k\">auto</span> <span class=\"o\">&amp;</span><span class=\"n\">o</span> <span class=\"o\">:</span> <span class=\"n\">m_observerList</span> <span class=\"p\">)&#123;</span><br />\n<span class=\"n\">o</span><span class=\"o\">-&gt;</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">m_state</span><span class=\"p\">);</span><br />\n<span class=\"p\">&#125;</span><br />\n<span class=\"p\">&#125;;</span><br />\n<span class=\"kt\">void</span> <span class=\"n\">setState</span><span class=\"p\">(</span> <span class=\"kt\">int</span> <span class=\"n\">s</span> <span class=\"p\">)&#123;</span><br />\n<span class=\"n\">m_state</span> <span class=\"o\">=</span> <span class=\"n\">s</span><span class=\"p\">;</span><br />\n<span class=\"n\">notify</span><span class=\"p\">();</span><br />\n<span class=\"p\">&#125;</span><br />\n<span class=\"kt\">int</span> <span class=\"n\">getState</span><span class=\"p\">()&#123;</span> <span class=\"k\">return</span> <span class=\"n\">m_state</span><span class=\"p\">;</span> <span class=\"p\">&#125;</span><br />\n<span class=\"p\">&#125;;</span></p>\n<p><span class=\"k\">class</span> <span class=\"nc\">Observer1</span><span class=\"o\">:</span><span class=\"k\">public</span> <span class=\"n\">Observer</span><span class=\"p\">&#123;</span><br />\n<span class=\"n\">string</span> <span class=\"n\">m_name</span><span class=\"p\">;</span><br />\n<span class=\"kt\">int</span> <span class=\"n\">m_state</span><span class=\"p\">;</span><br />\n<span class=\"k\">public</span><span class=\"o\">:</span><br />\n<span class=\"n\">Observer1</span><span class=\"p\">(</span> <span class=\"n\">string</span> <span class=\"n\">name</span> <span class=\"p\">)</span><span class=\"o\">:</span><span class=\"n\">m_name</span><span class=\"p\">(</span> <span class=\"n\">name</span> <span class=\"p\">)&#123;&#125;</span><br />\n<span class=\"kt\">void</span> <span class=\"n\">update</span><span class=\"p\">(</span> <span class=\"kt\">int</span> <span class=\"n\">p</span> <span class=\"p\">)&#123;</span> <span class=\"n\">m_state</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"p\">;</span> <span class=\"p\">&#125;</span> <span class=\"c1\">// override<br />\n</span>    <span class=\"n\">string</span> <span class=\"n\">getName</span><span class=\"p\">()&#123;</span> <span class=\"k\">return</span> <span class=\"n\">m_name</span><span class=\"p\">;</span> <span class=\"p\">&#125;</span><br />\n<span class=\"kt\">int</span> <span class=\"n\">getState</span><span class=\"p\">()&#123;</span> <span class=\"k\">return</span> <span class=\"n\">m_state</span><span class=\"p\">;</span> <span class=\"p\">&#125;</span><br />\n<span class=\"p\">&#125;;</span></p>\n<p><span class=\"k\">class</span> <span class=\"nc\">Observer2</span><span class=\"o\">:</span><span class=\"k\">public</span> <span class=\"n\">Observer</span><span class=\"p\">&#123;</span><br />\n<span class=\"n\">string</span> <span class=\"n\">m_name</span><span class=\"p\">;</span><br />\n<span class=\"kt\">int</span> <span class=\"n\">m_state</span><span class=\"p\">;</span><br />\n<span class=\"k\">public</span><span class=\"o\">:</span><br />\n<span class=\"n\">Observer2</span><span class=\"p\">(</span> <span class=\"n\">string</span> <span class=\"n\">name</span> <span class=\"p\">)</span><span class=\"o\">:</span><span class=\"n\">m_name</span><span class=\"p\">(</span> <span class=\"n\">name</span> <span class=\"p\">)&#123;&#125;</span><br />\n<span class=\"kt\">void</span> <span class=\"n\">update</span><span class=\"p\">(</span> <span class=\"kt\">int</span> <span class=\"n\">p</span> <span class=\"p\">)&#123;</span> <span class=\"n\">m_state</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"p\">;</span> <span class=\"p\">&#125;</span> <span class=\"c1\">// override<br />\n</span>    <span class=\"n\">string</span> <span class=\"n\">getName</span><span class=\"p\">()&#123;</span> <span class=\"k\">return</span> <span class=\"n\">m_name</span><span class=\"p\">;</span> <span class=\"p\">&#125;</span><br />\n<span class=\"kt\">int</span> <span class=\"n\">getState</span><span class=\"p\">()&#123;</span> <span class=\"k\">return</span> <span class=\"n\">m_state</span><span class=\"p\">;</span> <span class=\"p\">&#125;</span><br />\n<span class=\"p\">&#125;;</span></p>\n<p><span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">argc</span><span class=\"p\">,</span> <span class=\"kt\">char</span><span class=\"o\">*</span> <span class=\"n\">argv</span><span class=\"p\">[])</span><br />\n<span class=\"p\">&#123;</span><br />\n<span class=\"n\">Subject1</span> <span class=\"n\">product</span><span class=\"p\">;</span><br />\n<span class=\"n\">Observer1</span> <span class=\"n\">shop1</span><span class=\"p\">(</span> <span class=\"s\">&quot;shop1–&quot;</span> <span class=\"p\">);</span><br />\n<span class=\"n\">Observer2</span> <span class=\"n\">shop2</span><span class=\"p\">(</span> <span class=\"s\">&quot;shop2–&quot;</span> <span class=\"p\">);</span></p>\n<pre><code>&lt;span class=&quot;n&quot;&gt;product&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shop1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;\n&lt;span class=&quot;n&quot;&gt;product&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shop2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;\n&lt;span class=&quot;n&quot;&gt;product&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;\n&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shop1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shop1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;\n&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shop2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shop2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;\n\n&lt;span class=&quot;n&quot;&gt;product&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;detach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shop2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;\n&lt;span class=&quot;n&quot;&gt;product&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;\n&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shop1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shop1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;\n&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shop2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shop2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;\n\n&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;\n</code></pre>\n<p><span class=\"p\">}</span><br />\n</code></pre></div></div></p>\n<p>Output:</p>\n<div class=\"language-console highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"go\">shop1--12\nshop2--12\nshop1--11\nshop2--12\n</span></code></pre></div></div>\n<p><a href=\"https://github.com/hungchicheng/DesignPattern/blob/master/C%2B%2B/Observer.cpp\">Download - Source Code</a><br/>\n<p><br/></p></p>\n<center>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n</center>\n<h2 id=\"example-in-lua\">Example in Lua</h2>\n<div class=\"language-lua highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">function</span> <span class=\"nf\">FuncNew</span><span class=\"p\">(</span> <span class=\"n\">obj</span> <span class=\"p\">)</span> <span class=\"c1\">-- for Inheritance </span>\n    <span class=\"k\">function</span> <span class=\"nf\">obj</span><span class=\"p\">:</span><span class=\"n\">new</span><span class=\"p\">(</span> <span class=\"n\">o</span> <span class=\"p\">)</span>\n        <span class=\"n\">o</span> <span class=\"o\">=</span> <span class=\"n\">o</span> <span class=\"ow\">or</span> <span class=\"p\">&#123;&#125;</span>\n        <span class=\"nb\">setmetatable</span><span class=\"p\">(</span> <span class=\"n\">o</span><span class=\"p\">,</span> <span class=\"n\">self</span> <span class=\"p\">)</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">__index</span> <span class=\"o\">=</span> <span class=\"n\">self</span>\n        <span class=\"k\">return</span> <span class=\"n\">o</span>\n    <span class=\"k\">end</span>\n    <span class=\"k\">return</span> <span class=\"n\">obj</span>\n<span class=\"k\">end</span>\n<p><span class=\"n\">Observer</span> <span class=\"o\">=</span> <span class=\"p\">&#123;&#125;</span><br />\n<span class=\"k\">function</span> <span class=\"nf\">Observer</span><span class=\"p\">:</span><span class=\"n\">create</span><span class=\"p\">()</span><br />\n<span class=\"k\">function</span> <span class=\"nf\">self</span><span class=\"p\">:</span><span class=\"n\">update</span><span class=\"p\">(</span> <span class=\"n\">p</span> <span class=\"p\">)</span> <span class=\"c1\">– virtual update</span><br />\n<span class=\"c1\">– do nothing</span><br />\n<span class=\"k\">end</span><br />\n<span class=\"k\">return</span> <span class=\"n\">FuncNew</span><span class=\"p\">(</span> <span class=\"n\">Observer</span> <span class=\"p\">):</span><span class=\"n\">new</span><span class=\"p\">()</span><br />\n<span class=\"k\">end</span></p>\n<p><span class=\"n\">Subject</span> <span class=\"o\">=</span> <span class=\"p\">&#123;&#125;</span><br />\n<span class=\"k\">function</span> <span class=\"nf\">Subject</span><span class=\"p\">:</span><span class=\"n\">create</span><span class=\"p\">()</span><br />\n<span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">m_observerList</span> <span class=\"o\">=</span> <span class=\"p\">&#123;&#125;</span><br />\n<span class=\"k\">function</span> <span class=\"nf\">self</span><span class=\"p\">:</span><span class=\"n\">attach</span><span class=\"p\">(</span> <span class=\"n\">observer</span> <span class=\"p\">)</span><br />\n<span class=\"nb\">table.insert</span><span class=\"p\">(</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">m_observerList</span><span class=\"p\">,</span> <span class=\"n\">observer</span> <span class=\"p\">)</span><br />\n<span class=\"k\">end</span><br />\n<span class=\"k\">function</span> <span class=\"nf\">self</span><span class=\"p\">:</span><span class=\"n\">detach</span><span class=\"p\">(</span> <span class=\"n\">observer</span> <span class=\"p\">)</span><br />\n<span class=\"k\">for</span> <span class=\"n\">k</span><span class=\"p\">,</span><span class=\"n\">v</span> <span class=\"k\">in</span> <span class=\"nb\">pairs</span><span class=\"p\">(</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">m_observerList</span> <span class=\"p\">)</span> <span class=\"k\">do</span><br />\n<span class=\"k\">if</span> <span class=\"n\">v</span> <span class=\"o\">==</span> <span class=\"n\">observer</span> <span class=\"k\">then</span><br />\n<span class=\"nb\">table.remove</span><span class=\"p\">(</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">m_observerList</span><span class=\"p\">,</span> <span class=\"n\">k</span> <span class=\"p\">)</span><br />\n<span class=\"k\">end</span><br />\n<span class=\"k\">end</span><br />\n<span class=\"k\">end</span><br />\n<span class=\"k\">function</span> <span class=\"nf\">self</span><span class=\"p\">:</span><span class=\"n\">notify</span><span class=\"p\">()</span> <span class=\"c1\">– virtual notify</span><br />\n<span class=\"c1\">– do nothing</span><br />\n<span class=\"k\">end</span><br />\n<span class=\"k\">return</span> <span class=\"n\">FuncNew</span><span class=\"p\">(</span> <span class=\"n\">Subject</span> <span class=\"p\">):</span><span class=\"n\">new</span><span class=\"p\">()</span><br />\n<span class=\"k\">end</span></p>\n<p><span class=\"n\">Subject1</span> <span class=\"o\">=</span> <span class=\"n\">Subject</span><span class=\"p\">:</span><span class=\"n\">create</span><span class=\"p\">()</span> <span class=\"c1\">– inheritance Subject</span><br />\n<span class=\"k\">function</span> <span class=\"nf\">Subject1</span><span class=\"p\">:</span><span class=\"n\">create</span><span class=\"p\">()</span><br />\n<span class=\"kd\">local</span> <span class=\"n\">m_state</span> <span class=\"o\">=</span> <span class=\"kc\">nil</span><br />\n<span class=\"k\">function</span> <span class=\"nf\">self</span><span class=\"p\">:</span><span class=\"n\">notify</span><span class=\"p\">()</span> <span class=\"c1\">– override notify</span><br />\n<span class=\"k\">for</span> <span class=\"n\">k</span><span class=\"p\">,</span><span class=\"n\">v</span> <span class=\"k\">in</span> <span class=\"nb\">pairs</span><span class=\"p\">(</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">m_observerList</span> <span class=\"p\">)</span> <span class=\"k\">do</span><br />\n<span class=\"n\">v</span><span class=\"p\">:</span><span class=\"n\">update</span><span class=\"p\">(</span> <span class=\"n\">m_state</span> <span class=\"p\">)</span><br />\n<span class=\"k\">end</span><br />\n<span class=\"k\">end</span><br />\n<span class=\"k\">function</span> <span class=\"nf\">self</span><span class=\"p\">:</span><span class=\"n\">setState</span><span class=\"p\">(</span> <span class=\"n\">s</span> <span class=\"p\">)</span><br />\n<span class=\"n\">m_state</span> <span class=\"o\">=</span> <span class=\"n\">s</span><br />\n<span class=\"n\">self</span><span class=\"p\">:</span><span class=\"n\">notify</span><span class=\"p\">()</span><br />\n<span class=\"k\">end</span><br />\n<span class=\"k\">function</span> <span class=\"nf\">self</span><span class=\"p\">:</span><span class=\"n\">getState</span><span class=\"p\">(</span> <span class=\"n\">s</span> <span class=\"p\">)</span><br />\n<span class=\"k\">return</span> <span class=\"n\">m_state</span><br />\n<span class=\"k\">end</span><br />\n<span class=\"k\">return</span> <span class=\"n\">FuncNew</span><span class=\"p\">(</span> <span class=\"n\">Subject1</span> <span class=\"p\">):</span><span class=\"n\">new</span><span class=\"p\">()</span><br />\n<span class=\"k\">end</span></p>\n<p><span class=\"n\">Observer1</span> <span class=\"o\">=</span> <span class=\"n\">Observer</span><span class=\"p\">:</span><span class=\"n\">create</span><span class=\"p\">()</span> <span class=\"c1\">– inheritance Subject</span><br />\n<span class=\"k\">function</span> <span class=\"nf\">Observer1</span><span class=\"p\">:</span><span class=\"n\">create</span><span class=\"p\">(</span> <span class=\"n\">n</span> <span class=\"p\">)</span><br />\n<span class=\"kd\">local</span> <span class=\"n\">m_name</span> <span class=\"o\">=</span> <span class=\"n\">n</span><br />\n<span class=\"kd\">local</span> <span class=\"n\">m_state</span> <span class=\"o\">=</span> <span class=\"kc\">nil</span><br />\n<span class=\"k\">function</span> <span class=\"nf\">self</span><span class=\"p\">:</span><span class=\"n\">update</span><span class=\"p\">(</span> <span class=\"n\">p</span> <span class=\"p\">)</span> <span class=\"c1\">– override update</span><br />\n<span class=\"n\">m_state</span> <span class=\"o\">=</span> <span class=\"n\">p</span><br />\n<span class=\"k\">end</span><br />\n<span class=\"k\">function</span> <span class=\"nf\">self</span><span class=\"p\">:</span><span class=\"n\">getName</span><span class=\"p\">()</span><br />\n<span class=\"k\">return</span> <span class=\"n\">m_name</span><br />\n<span class=\"k\">end</span><br />\n<span class=\"k\">function</span> <span class=\"nf\">self</span><span class=\"p\">:</span><span class=\"n\">getState</span><span class=\"p\">()</span><br />\n<span class=\"k\">return</span> <span class=\"n\">m_state</span><br />\n<span class=\"k\">end</span><br />\n<span class=\"k\">return</span> <span class=\"n\">FuncNew</span><span class=\"p\">(</span> <span class=\"n\">Observer1</span> <span class=\"p\">):</span><span class=\"n\">new</span><span class=\"p\">()</span><br />\n<span class=\"k\">end</span></p>\n<p><span class=\"n\">Observer2</span> <span class=\"o\">=</span> <span class=\"n\">Observer</span><span class=\"p\">:</span><span class=\"n\">create</span><span class=\"p\">()</span> <span class=\"c1\">– inheritance Subject</span><br />\n<span class=\"k\">function</span> <span class=\"nf\">Observer2</span><span class=\"p\">:</span><span class=\"n\">create</span><span class=\"p\">(</span> <span class=\"n\">n</span> <span class=\"p\">)</span><br />\n<span class=\"kd\">local</span> <span class=\"n\">m_name</span> <span class=\"o\">=</span> <span class=\"n\">n</span><br />\n<span class=\"kd\">local</span> <span class=\"n\">m_state</span> <span class=\"o\">=</span> <span class=\"kc\">nil</span><br />\n<span class=\"k\">function</span> <span class=\"nf\">self</span><span class=\"p\">:</span><span class=\"n\">update</span><span class=\"p\">(</span> <span class=\"n\">p</span> <span class=\"p\">)</span> <span class=\"c1\">– override update</span><br />\n<span class=\"n\">m_state</span> <span class=\"o\">=</span> <span class=\"n\">p</span><br />\n<span class=\"k\">end</span><br />\n<span class=\"k\">function</span> <span class=\"nf\">self</span><span class=\"p\">:</span><span class=\"n\">getName</span><span class=\"p\">()</span><br />\n<span class=\"k\">return</span> <span class=\"n\">m_name</span><br />\n<span class=\"k\">end</span><br />\n<span class=\"k\">function</span> <span class=\"nf\">self</span><span class=\"p\">:</span><span class=\"n\">getState</span><span class=\"p\">()</span><br />\n<span class=\"k\">return</span> <span class=\"n\">m_state</span><br />\n<span class=\"k\">end</span><br />\n<span class=\"k\">return</span> <span class=\"n\">FuncNew</span><span class=\"p\">(</span> <span class=\"n\">Observer2</span> <span class=\"p\">):</span><span class=\"n\">new</span><span class=\"p\">()</span><br />\n<span class=\"k\">end</span></p>\n<p><span class=\"c1\">------------------------------------------------------</span></p>\n<p><span class=\"kd\">local</span> <span class=\"n\">product</span> <span class=\"o\">=</span> <span class=\"n\">Subject1</span><span class=\"p\">:</span><span class=\"n\">create</span><span class=\"p\">()</span><br />\n<span class=\"kd\">local</span> <span class=\"n\">shop1</span> <span class=\"o\">=</span> <span class=\"n\">Observer1</span><span class=\"p\">:</span><span class=\"n\">create</span><span class=\"p\">(</span> <span class=\"s2\">&quot;shop1–&quot;</span> <span class=\"p\">)</span><br />\n<span class=\"kd\">local</span> <span class=\"n\">shop2</span> <span class=\"o\">=</span> <span class=\"n\">Observer2</span><span class=\"p\">:</span><span class=\"n\">create</span><span class=\"p\">(</span> <span class=\"s2\">&quot;shop2–&quot;</span> <span class=\"p\">)</span><br />\n<span class=\"n\">product</span><span class=\"p\">:</span><span class=\"n\">attach</span><span class=\"p\">(</span> <span class=\"n\">shop1</span> <span class=\"p\">)</span><br />\n<span class=\"n\">product</span><span class=\"p\">:</span><span class=\"n\">attach</span><span class=\"p\">(</span> <span class=\"n\">shop2</span> <span class=\"p\">)</span><br />\n<span class=\"n\">product</span><span class=\"p\">:</span><span class=\"n\">setState</span><span class=\"p\">(</span> <span class=\"mi\">12</span> <span class=\"p\">)</span><br />\n<span class=\"c1\">–print( shop1.m_state )</span><br />\n<span class=\"nb\">print</span><span class=\"p\">(</span> <span class=\"n\">shop1</span><span class=\"p\">:</span><span class=\"n\">getName</span><span class=\"p\">()</span> <span class=\"o\">…</span> <span class=\"nb\">tostring</span><span class=\"p\">(</span> <span class=\"n\">shop1</span><span class=\"p\">:</span><span class=\"n\">getState</span><span class=\"p\">()</span> <span class=\"p\">)</span> <span class=\"p\">)</span><br />\n<span class=\"nb\">print</span><span class=\"p\">(</span> <span class=\"n\">shop2</span><span class=\"p\">:</span><span class=\"n\">getName</span><span class=\"p\">()</span> <span class=\"o\">…</span> <span class=\"nb\">tostring</span><span class=\"p\">(</span> <span class=\"n\">shop2</span><span class=\"p\">:</span><span class=\"n\">getState</span><span class=\"p\">()</span> <span class=\"p\">)</span> <span class=\"p\">)</span><br />\n<span class=\"nb\">print</span><span class=\"p\">(</span> <span class=\"s2\">&quot;&quot;</span> <span class=\"p\">)</span><br />\n<span class=\"n\">product</span><span class=\"p\">:</span><span class=\"n\">detach</span><span class=\"p\">(</span> <span class=\"n\">shop2</span> <span class=\"p\">)</span><br />\n<span class=\"n\">product</span><span class=\"p\">:</span><span class=\"n\">setState</span><span class=\"p\">(</span> <span class=\"mi\">11</span> <span class=\"p\">)</span><br />\n<span class=\"nb\">print</span><span class=\"p\">(</span> <span class=\"n\">shop1</span><span class=\"p\">:</span><span class=\"n\">getName</span><span class=\"p\">()</span> <span class=\"o\">…</span> <span class=\"nb\">tostring</span><span class=\"p\">(</span> <span class=\"n\">shop1</span><span class=\"p\">:</span><span class=\"n\">getState</span><span class=\"p\">()</span> <span class=\"p\">)</span> <span class=\"p\">)</span><br />\n<span class=\"nb\">print</span><span class=\"p\">(</span> <span class=\"n\">shop2</span><span class=\"p\">:</span><span class=\"n\">getName</span><span class=\"p\">()</span> <span class=\"o\">…</span> <span class=\"nb\">tostring</span><span class=\"p\">(</span> <span class=\"n\">shop2</span><span class=\"p\">:</span><span class=\"n\">getState</span><span class=\"p\">()</span> <span class=\"p\">)</span> <span class=\"p\">)</span><br />\n</code></pre></div></div></p>\n<p>Output:</p>\n<div class=\"language-console highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"go\">shop1--12\nshop2--12\n<p>shop1–11<br />\nshop2–12<br />\n[Finished in 0.0s]<br />\n</span></code></pre></div></div></p>\n<p><a href=\"https://github.com/hungchicheng/DesignPattern/blob/master/Lua/Observer.lua\">Download - Source Code</a><br/></p>","text":" What is Observer Pattern Example in C++ Example in Lua Observer Pattern Wiki The observer pattern is a software design pattern in which an ...","link":"","photos":[],"count_time":{"symbolsCount":"9.2k","symbolsTime":"8 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#what-is-observer-pattern\"><span class=\"toc-text\">What is Observer Pattern</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#example-in-c\"><span class=\"toc-text\">Example in C++</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#example-in-lua\"><span class=\"toc-text\">Example in Lua</span></a></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"design pattern - decorator pattern in c++ and lua","uid":"80c9b0d8afc22af69ad87c186b2a7796","slug":"zl/2016-01-01-1108_design pattern - decorator pattern in c++ and lua","date":"2024-04-03T03:47:33.004Z","updated":"2024-04-03T03:47:33.004Z","comments":true,"path":"api/articles/zl/2016-01-01-1108_design pattern - decorator pattern in c++ and lua.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":" What is Decorator Pattern Example in C++ Example in Lua Decorator Pattern Wiki In object-oriented programming, the decorator pattern is a d...","link":"","photos":[],"count_time":{"symbolsCount":"4.7k","symbolsTime":"4 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"lua 协程和状态","uid":"669a225e8fdbd9153ff437c78e8b7ddb","slug":"zl/2016-01-01-110_lua 协程和状态","date":"2024-04-03T03:47:33.004Z","updated":"2024-04-03T03:47:33.005Z","comments":true,"path":"api/articles/zl/2016-01-01-110_lua 协程和状态.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"协程(协同式多线程)是一种用户级的非抢占式线程。用户级是指它的切换和调度由用户控制，非抢占指一个协程只有在其挂起(yield)或者协程结束才会返回。协程和C线程一样，有自己的堆栈，自己的局部变量，自己的指令指针，并且和其它协程共享全局变量等信息。用户可以实现自己调度协程，这主要得...","link":"","photos":[],"count_time":{"symbolsCount":"3.6k","symbolsTime":"3 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}