{"title":"Lua 学习 chapter25","uid":"750a10f53a4ef67c79f4f67a9f9da4d0","slug":"zl/2016-01-01-815_Lua 学习 chapter25 ","date":"2024-04-03T03:47:36.060Z","updated":"2024-04-03T03:47:36.064Z","comments":true,"path":"api/articles/zl/2016-01-01-815_Lua 学习 chapter25 .json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<h3 id=\"目录\">目录</h3>\n<ol>\n  <li>自省机制</li>\n  <li>访问变量</li>\n  <li>钩子</li>\n  <li>调优</li>\n  <li>沙盒</li>\n</ol>\n<blockquote>\n  <p>只有疯狂过，你才知道自己究竟能不能成功。</p>\n</blockquote>\n<h2 id=\"自省机制\">自省机制</h2>\n<p>通过debug.getinfo(foo)，函数就会返回一个包含该函数有关的一些数据的表。</p>\n<ul>\n  <li>source: 该字段用于说明函数定义的位置。如果函数定义在一个字符串中（通过调用load），那么source就是这个字符串：如果函数定义在一个文件中，那么source就是使用@作为前缀的文件名。</li>\n  <li>short_src:source精简版</li>\n  <li>linedefined:源代码中第一行</li>\n  <li>lastlinedefined：最后一行</li>\n  <li>what:该字段用于说明函数的类型。lua函数就是lua，c函数就是c，位于主函数就是main</li>\n  <li>name:函数的适当名字，例如保存该函数的全局变量名称</li>\n  <li>namewhat：说明一个字段的含义，可能是”global”,”local”,”method”,”field”或”“（空字符串）</li>\n  <li>nups：函数的上值个数</li>\n  <li>nparams：函数参数个数</li>\n  <li>isvararg:该字段表明该函数是否为可变长函数</li>\n  <li>activelines:该字段是一个包含该函数所有活跃行的集合。活跃行（active line)是指除空行和只包含注释的行外的其他行。</li>\n  <li>func:该字段是该函数本身</li>\n</ul>\n<p>当时用数字n作为参数调用函数getinfo(2)时，可以得到有关相应栈层次上活跃函数的数据。栈层次是一个数字，代表某个时刻上活跃的的顶函数。调用getinfo的函数A的层次是1，而调用A的函数的层次是2，以此类推。</p>\n<p>getinfo效率不高，所以这里可以通过第二个参数提高效率：</p>\n<ul>\n  <li>n  选择name和namewhat</li>\n  <li>f  选择func</li>\n  <li>S  选择source，short_src，what，linedefined和lastlinedefined</li>\n  <li>l  选择currentline</li>\n  <li>L  选择activelines</li>\n  <li>u  选择nup、nparams和isvararg</li>\n</ul>\n<p>debug.getinfo(foo,”SL”)</p>\n<div class=\"language-lua highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n</pre></td><td class=\"rouge-code\"><pre><span class=\"k\">function</span> <span class=\"nf\">traceback</span><span class=\"p\">()</span>\n    <span class=\"k\">for</span> <span class=\"n\">level</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"nb\">math.huge</span> <span class=\"k\">do</span>\n        <span class=\"kd\">local</span> <span class=\"n\">info</span> <span class=\"o\">=</span> <span class=\"nb\">debug.getinfo</span><span class=\"p\">(</span><span class=\"n\">level</span><span class=\"p\">,</span><span class=\"s2\">&#34;Sl&#34;</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">info</span> <span class=\"k\">then</span>\n            <span class=\"k\">break</span>\n        <span class=\"k\">end</span>\n        <span class=\"k\">if</span> <span class=\"n\">info</span><span class=\"p\">.</span><span class=\"n\">what</span> <span class=\"o\">==</span> <span class=\"s2\">&#34;C&#34;</span> <span class=\"k\">then</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"nb\">string.format</span><span class=\"p\">(</span><span class=\"s2\">&#34;%dtC fucntion&#34;</span><span class=\"p\">,</span> <span class=\"n\">level</span><span class=\"p\">))</span>\n        <span class=\"k\">else</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"nb\">string.format</span><span class=\"p\">(</span><span class=\"s2\">&#34;%dt[%s]:%d&#34;</span><span class=\"p\">,</span><span class=\"n\">level</span><span class=\"p\">,</span><span class=\"n\">info</span><span class=\"p\">.</span><span class=\"n\">short_src</span><span class=\"p\">,</span><span class=\"n\">info</span><span class=\"p\">.</span><span class=\"n\">currentline</span><span class=\"p\">))</span>\n        <span class=\"k\">end</span>\n    <span class=\"k\">end</span>\n<span class=\"k\">end</span>\n<p><span class=\"n\">traceback</span><span class=\"p\">()</span><br />\n</pre></td></tr></tbody></table></code></pre></div></div></p>\n<h2 id=\"访问变量\">访问变量</h2>\n<p>通过debug.getlocal来检查任意活跃函数的局部变量。还可以通过函数getupvalue来访问一个被lua函数所使用的的非局部变量。</p>\n<p>我们还可以通过traceback函数来打印堆栈信息。</p>\n<h2 id=\"钩子\">钩子</h2>\n<p>调试库中的钩子机制允许用户注册一个钩子函数，这个钩子函数会在程序运行中某个特定事件发生时被调用：</p>\n<ul>\n  <li>每当调用一个函数时产生的call事件</li>\n  <li>每当函数返回时产生的return事件</li>\n  <li>每当开始执行一行新代码产生的line事件</li>\n  <li>执行完指定数量的指令后产生的count事件</li>\n</ul>\n<p>钩子函数的注册：通过debug.sethook：第一个参数是钩子函数，第二个参数是描述要监控事件掩码字符串，第三个参数是一个用于描述以何种频度获取count事件的可选参数。</p>\n<p>要监控call、return、line事件，把这几个事件的首字母放入掩码字符串。要监控count事件，则需要在第三个参数中指定一个计数器。如果要关闭钩子，不带参数的调用sethook函数即可。</p>\n<div class=\"language-lua highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n</pre></td><td class=\"rouge-code\"><pre><span class=\"k\">function</span> <span class=\"nf\">hello</span><span class=\"p\">(</span><span class=\"n\">event</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&#34;hello&#34;</span><span class=\"p\">,</span> <span class=\"n\">event</span><span class=\"p\">)</span>\n<span class=\"k\">end</span>\n<span class=\"nb\">debug.sethook</span><span class=\"p\">(</span><span class=\"n\">hello</span><span class=\"p\">,</span><span class=\"s2\">&#34;c&#34;</span><span class=\"p\">)</span>\n<span class=\"n\">hello</span><span class=\"p\">()</span>\n<span class=\"cm\">--[[输出\nhello\tcall\nhello\tcall\nhello\tcall\nhellohello\tcall\n\tnil\n]]</span><span class=\"c1\">--</span>\n<p></pre></td></tr></tbody></table></code></pre></div></div></p>\n<h2 id=\"调优\">调优</h2>\n<p>可以用来分析程序使用资源的行为，但对于时间方面的调优最好还是使用c，因为钩子函数的调用开销有点大。在这里我们来测试程序执行的每个函数的调用次数。</p>\n<div class=\"language-lua highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">local</span> <span class=\"n\">Counters</span> <span class=\"o\">=</span> <span class=\"p\">&#123;&#125;</span>\n<span class=\"kd\">local</span> <span class=\"n\">Names</span> <span class=\"o\">=</span> <span class=\"p\">&#123;&#125;</span>\n<span class=\"kd\">local</span> <span class=\"k\">function</span> <span class=\"nf\">hook</span><span class=\"p\">()</span>\n    <span class=\"kd\">local</span> <span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"nb\">debug.getinfo</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"s2\">&#34;f&#34;</span><span class=\"p\">).</span><span class=\"n\">func</span>\n    <span class=\"kd\">local</span> <span class=\"n\">count</span> <span class=\"o\">=</span> <span class=\"n\">Counters</span><span class=\"p\">[</span><span class=\"n\">f</span><span class=\"p\">]</span>\n    <span class=\"k\">if</span> <span class=\"n\">count</span> <span class=\"o\">==</span> <span class=\"kc\">nil</span> <span class=\"k\">then</span>\n        <span class=\"n\">Counters</span><span class=\"p\">[</span><span class=\"n\">f</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n        <span class=\"n\">Names</span><span class=\"p\">[</span><span class=\"n\">f</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nb\">debug.getinfo</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"s2\">&#34;Sn&#34;</span><span class=\"p\">)</span>\n    <span class=\"k\">else</span>\n        <span class=\"n\">Counters</span><span class=\"p\">[</span><span class=\"n\">f</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">count</span> <span class=\"o\">+</span> <span class=\"mi\">1</span>\n    <span class=\"k\">end</span>\n<span class=\"k\">end</span>\n<p><span class=\"c1\">– lua profiler main-prog</span><br />\n<span class=\"kd\">local</span> <span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"nb\">assert</span><span class=\"p\">(</span><span class=\"nb\">loadfile</span><span class=\"p\">(</span><span class=\"n\">arg</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]))</span><br />\n<span class=\"n\">debug</span><span class=\"p\">.</span><span class=\"n\">sethool</span><span class=\"p\">(</span><span class=\"n\">hook</span><span class=\"p\">,</span><span class=\"s2\">&quot;c&quot;</span><span class=\"p\">)</span><br />\n<span class=\"n\">f</span><span class=\"p\">()</span><br />\n<span class=\"nb\">debug.sethook</span><span class=\"p\">()</span></p>\n<p></pre></td></tr></tbody></table></code></pre></div></div></p>\n<pre><code>            &lt;hr style=&quot;visibility: hidden;&quot;/&gt;\n            \n            &lt;hr style=&quot;visibility: hidden;&quot;/&gt;\n</code></pre>\n","text":"目录 自省机制 访问变量 钩子 调优 沙盒 只有疯狂过，你才知道自己究竟能不能成功。 自省机制 通过debug.getinfo(foo)，函数就会返回一个包含该函数有关的一些数据的表。 source: 该字段用于说明函数定义的位置。如果函数定义在一个字符串中（通过调用load），...","link":"","photos":[],"count_time":{"symbolsCount":"2.7k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%9B%AE%E5%BD%95\"><span class=\"toc-text\">目录</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%87%AA%E7%9C%81%E6%9C%BA%E5%88%B6\"><span class=\"toc-text\">自省机制</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%AE%BF%E9%97%AE%E5%8F%98%E9%87%8F\"><span class=\"toc-text\">访问变量</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%92%A9%E5%AD%90\"><span class=\"toc-text\">钩子</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%B0%83%E4%BC%98\"><span class=\"toc-text\">调优</span></a>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"使用LUA脚本绕过Applocker的测试分析","uid":"a29901bd86e6f7143bffe0619b53a12b","slug":"zl/2016-01-01-816_使用LUA脚本绕过Applocker的测试分析","date":"2024-04-03T03:47:36.064Z","updated":"2024-04-03T03:47:36.065Z","comments":true,"path":"api/articles/zl/2016-01-01-816_使用LUA脚本绕过Applocker的测试分析.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":" 0x00 前言 在之前的文章《Bypass Windows AppLocker》曾对绕过Applocker的方法进行过学习，而最近看到一篇文章介绍了使用LUA脚本绕过Applocker的方法，学习之后产生了以下疑问：绕过原理是什么呢？能绕过哪种AppLocker的规则呢？适用条...","link":"","photos":[],"count_time":{"symbolsCount":"2.2k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Goto in LuaJIT","uid":"e23987c7aeae824b7623d6980f8e24cf","slug":"zl/2016-01-01-813_Goto in LuaJIT ","date":"2024-04-03T03:47:36.059Z","updated":"2024-04-03T03:47:36.059Z","comments":true,"path":"api/articles/zl/2016-01-01-813_Goto in LuaJIT .json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"Lua 在 5.2 之后的版本，加入了 goto 这个关键字，用来控制程序跳转到指定 label。我们可以利用这个特性，来模拟 continue 的实现。需要注意的是 goto 只能跳转到 label，而 ::name:: 的格式就可以设置一个 label。 for i=1,5 ...","link":"","photos":[],"count_time":{"symbolsCount":"8.3k","symbolsTime":"8 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}