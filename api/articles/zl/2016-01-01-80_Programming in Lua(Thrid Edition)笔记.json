{"title":"Programming in Lua(Thrid Edition)笔记","uid":"a502732b8dc58224e972b6c53538b8c4","slug":"zl/2016-01-01-80_Programming in Lua(Thrid Edition)笔记","date":"2024-04-03T03:47:36.056Z","updated":"2024-04-03T03:47:36.057Z","comments":true,"path":"api/articles/zl/2016-01-01-80_Programming in Lua(Thrid Edition)笔记.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<h3 id=\"5-Functions\"><a href=\"#5-Functions\" class=\"headerlink\" title=\"5 Functions\"></a>5 Functions</h3>\n<ul>\n<li><p>当函数参数为literal string或table constructor时，可以不加括号</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span> <span class=\"string\">&#34;Hello world&#34;</span></span><br/><span class=\"line\"><span class=\"built_in\">dofile</span> <span class=\"string\">&#39;a.lua&#39;</span></span><br/><span class=\"line\"><span class=\"built_in\">print</span> <span class=\"string\">[[a multi-line message]]</span></span><br/><span class=\"line\">f{x=<span class=\"number\">10</span>, y=<span class=\"number\">20</span>}</span><br/><span class=\"line\"><span class=\"built_in\">type</span>{}</span><br/></pre></td></tr></tbody></table></figure>\n</li>\n<li><p><code>:</code>操作符可用于面向对象编程，<code>o:foo(x)</code>相当于<code>o.foo(o, x)</code>，需把o当做第一个额外的参数</p>\n</li>\n<li><p>传给函数的参数个数与其所需的参数个数可以不同，Lua会按照多重赋值的规则对参数赋值：extra arguments are thrown away, extra parameters get nil.此可用于使用默认参数：</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(n)</span></span></span><br/><span class=\"line\">\tn = n <span class=\"keyword\">or</span> <span class=\"number\">1</span></span><br/><span class=\"line\">\tcount = count + n</span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/></pre></td></tr></tbody></table></figure>\n</li>\n<li><p>函数的多重返回值</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">s, e = <span class=\"built_in\">string</span>.<span class=\"built_in\">find</span>(<span class=\"string\">&#34;hello Lua users&#34;</span>, <span class=\"string\">&#34;Lua&#34;</span>)</span><br/><span class=\"line\"><span class=\"built_in\">print</span>(s, e) </span><br/></pre></td></tr></tbody></table></figure>\n</li>\n</ul>\n<p>字符串的第一个字符索引为1</p>\n<ul>\n<li><p>函数返回多值只需把这些值以此写在return后即可</p>\n</li>\n<li><p>函数调用只有在以下四个构造中作为唯一一个或最后一个表达式时才会返回多值，否则只返回一值：multiple assignments，arguments to function calls，tale constructors，return statements，多余的返回值丢弃，多余的变量赋nil</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/><span class=\"line\">9</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span></span></span><br/><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">1</span>,<span class=\"number\">2</span></span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/><span class=\"line\">a,b,c = <span class=\"number\">0</span>,foo() <span class=\"comment\">-- a=0,b=1,c=2</span></span><br/><span class=\"line\">x,y,z = foo(),<span class=\"number\">0</span> <span class=\"comment\">-- x=1,y=0,z=nil</span></span><br/><span class=\"line\"><span class=\"built_in\">print</span>(foo())    <span class=\"comment\">--&gt; 1\t2\t3</span></span><br/><span class=\"line\">t = {foo()}     <span class=\"comment\">--&gt; t = {1, 2, 3}</span></span><br/><span class=\"line\">t = {foo(), <span class=\"number\">0</span>}  <span class=\"comment\">--&gt; t = {1, 0}</span></span><br/><span class=\"line\"><span class=\"keyword\">return</span> foo()    <span class=\"comment\">--&gt; return 1,2,3</span></span><br/></pre></td></tr></tbody></table></figure>\n</li>\n<li><p>返回值可以有多种形式：</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/><span class=\"line\">9</span><br/><span class=\"line\">10</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">(i)</span></span></span><br/><span class=\"line\">\t<span class=\"keyword\">if</span> i == <span class=\"number\">0</span> <span class=\"keyword\">then</span> <span class=\"keyword\">return</span></span><br/><span class=\"line\">\t<span class=\"keyword\">elseif</span> i == <span class=\"number\">1</span> <span class=\"keyword\">then</span> <span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br/><span class=\"line\">\t<span class=\"keyword\">elseif</span> i == <span class=\"number\">2</span> <span class=\"keyword\">then</span> <span class=\"keyword\">return</span> <span class=\"number\">1</span>, <span class=\"number\">2</span></span><br/><span class=\"line\">\t<span class=\"keyword\">end</span></span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/><span class=\"line\"><span class=\"built_in\">print</span>(foo(<span class=\"number\">0</span>)) <span class=\"comment\">-- (no results)</span></span><br/><span class=\"line\"><span class=\"built_in\">print</span>(foo(<span class=\"number\">1</span>)) <span class=\"comment\">--&gt; 1</span></span><br/><span class=\"line\"><span class=\"built_in\">print</span>(foo(<span class=\"number\">2</span>)) <span class=\"comment\">--&gt; 1\t2</span></span><br/><span class=\"line\"><span class=\"built_in\">print</span>(foo(<span class=\"number\">3</span>)) <span class=\"comment\">-- (no results)</span></span><br/></pre></td></tr></tbody></table></figure>\n</li>\n<li><p>给函数表达式加上括号，可以强制其只返回一个值</p>\n</li>\n<li><p>table.unpack()可以返回一个sequence的所有元素，返回元素个数与<code>#</code>操作符结果相同</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">a = {<span class=\"number\">1</span>,<span class=\"number\">2</span>}</span><br/><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">table</span>.<span class=\"built_in\">unpack</span>(a)) <span class=\"comment\">--&gt; 1\t2</span></span><br/><span class=\"line\">a[<span class=\"number\">6</span>] = <span class=\"number\">6</span></span><br/><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">table</span>.<span class=\"built_in\">unpack</span>(a)) <span class=\"comment\">--&gt; 1\t2</span></span><br/><span class=\"line\">a[<span class=\"number\">3</span>] = <span class=\"number\">3</span></span><br/><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">table</span>.<span class=\"built_in\">unpack</span>(a)) <span class=\"comment\">--&gt; 1\t2\t3</span></span><br/></pre></td></tr></tbody></table></figure>\n</li>\n</ul>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">f = <span class=\"built_in\">string</span>.<span class=\"built_in\">find</span></span><br/><span class=\"line\">a = {<span class=\"string\">&#34;hello&#34;</span>, <span class=\"string\">&#34;ll&#34;</span>}</span><br/><span class=\"line\"><span class=\"built_in\">print</span>(f(<span class=\"built_in\">table</span>.<span class=\"built_in\">unpack</span>(a)))</span><br/></pre></td></tr></tbody></table></figure>\n<ul>\n<li><p>可以明确的选取table.unpack()的结果</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">table</span>.<span class=\"built_in\">unpack</span>({<span class=\"string\">&#34;Sun&#34;</span>, <span class=\"string\">&#34;Mon&#34;</span>, <span class=\"string\">&#34;Tue&#34;</span>, <span class=\"string\">&#34;Wed&#34;</span>, <span class=\"string\">&#34;Thi&#34;</span>, <span class=\"string\">&#34;Fri&#34;</span>, <span class=\"string\">&#34;Sat&#34;</span>}, <span class=\"number\">2</span>, <span class=\"number\">4</span>)) <span class=\"comment\">--&gt; Mon\tTue\tWed</span></span><br/></pre></td></tr></tbody></table></figure>\n</li>\n<li><p>用Lua写unpack</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">unpack</span><span class=\"params\">(t, i, n)</span></span> </span><br/><span class=\"line\">\ti = i <span class=\"keyword\">or</span> <span class=\"number\">1</span></span><br/><span class=\"line\">\tn = n <span class=\"keyword\">or</span> #t</span><br/><span class=\"line\">\t<span class=\"keyword\">if</span> i &lt;= n <span class=\"keyword\">then</span></span><br/><span class=\"line\">\t\tretur t[i], <span class=\"built_in\">unpack</span>(t, i + <span class=\"number\">1</span>, n)</span><br/><span class=\"line\">\t<span class=\"keyword\">end</span></span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/></pre></td></tr></tbody></table></figure>\n</li>\n<li><p>可变参数函数，参数用<code>...</code>表示，叫做vararg expression</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span><span class=\"params\">(...)</span></span></span><br/><span class=\"line\">\t<span class=\"keyword\">local</span> s = <span class=\"number\">0</span></span><br/><span class=\"line\">\t<span class=\"keyword\">for</span> i, v <span class=\"keyword\">in</span> <span class=\"built_in\">ipairs</span>{...} <span class=\"keyword\">do</span></span><br/><span class=\"line\">\t\ts = s + v</span><br/><span class=\"line\">\t<span class=\"keyword\">end</span></span><br/><span class=\"line\">\t<span class=\"keyword\">return</span> s</span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/><span class=\"line\"><span class=\"built_in\">print</span>(add(<span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">10</span>, <span class=\"number\">25</span>, <span class=\"number\">12</span>)) <span class=\"comment\">--&gt; 54</span></span><br/></pre></td></tr></tbody></table></figure>\n</li>\n</ul>\n<p><code>print(...)</code>可以打印出所有参数<br/><code>return ...</code>返回所有参数</p>\n<ul>\n<li><p><code>&#123;...&#125;</code>是由所有参数构造的table</p>\n</li>\n<li><p>多参数可转变为可变参数</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">(a, b, c)</span></span></span><br/></pre></td></tr></tbody></table></figure>\n</li>\n</ul>\n<p>变为<br/></p><figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">(...)</span></span></span><br/><span class=\"line\">\t<span class=\"keyword\">local</span> a, b, c = ...</span><br/></pre></td></tr></tbody></table></figure><p></p>\n<ul>\n<li><p>跟踪函数调用：</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo1</span><span class=\"params\">(...)</span></span></span><br/><span class=\"line\">\t<span class=\"built_in\">print</span>(<span class=\"string\">&#34;calling foo:&#34;</span>, ...)</span><br/><span class=\"line\">\t<span class=\"keyword\">return</span> foo(...)</span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/></pre></td></tr></tbody></table></figure>\n</li>\n<li><p>在<code>...</code>之前可以加上任意个固定参数</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">functin fwrite(fmt, ...)</span><br/><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"built_in\">io</span>.<span class=\"built_in\">write</span>(<span class=\"built_in\">string</span>.<span class=\"built_in\">format</span>(fmt, ...))</span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/></pre></td></tr></tbody></table></figure>\n</li>\n<li><p><code>&#123;...&#125;</code>不能检测到末尾的nil，这时可用<code>table.pack(...)</code>构造一个带有表示元素个数的域n的table，但是<code>&#123;...&#125;</code> is cleaner and faster than <code>table.pack(...)</code></p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/><span class=\"line\">9</span><br/><span class=\"line\">10</span><br/><span class=\"line\">11</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">nonils</span><span class=\"params\">(...)</span></span></span><br/><span class=\"line\">\t<span class=\"keyword\">local</span> <span class=\"built_in\">arg</span> = <span class=\"built_in\">table</span>.pack(...)</span><br/><span class=\"line\">\t<span class=\"keyword\">for</span> i = <span class=\"number\">1</span>, <span class=\"built_in\">arg</span>.n <span class=\"keyword\">do</span></span><br/><span class=\"line\">\t\t<span class=\"keyword\">if</span> <span class=\"built_in\">arg</span>[i] == <span class=\"literal\">nil</span> <span class=\"keyword\">then</span> <span class=\"keyword\">return</span> <span class=\"literal\">false</span> <span class=\"keyword\">end</span></span><br/><span class=\"line\">\t<span class=\"keyword\">end</span></span><br/><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/><span class=\"line\"><span class=\"built_in\">print</span>(nonils(<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"literal\">nil</span>)) <span class=\"comment\">--&gt; false</span></span><br/><span class=\"line\"><span class=\"built_in\">print</span>(nonils(<span class=\"number\">2</span>, <span class=\"number\">3</span>))      <span class=\"comment\">--&gt; true</span></span><br/><span class=\"line\"><span class=\"built_in\">print</span>(nonils())          <span class=\"comment\">--&gt; true</span></span><br/><span class=\"line\"><span class=\"built_in\">print</span>(nonils(<span class=\"literal\">nil</span>))       <span class=\"comment\">--&gt; false</span></span><br/></pre></td></tr></tbody></table></figure>\n</li>\n<li><p>named arguments并非Lua直接提供的语法，而是通过传递给函数一个table来间接实现的</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">rename</span><span class=\"params\">(arg)</span></span></span><br/><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"built_in\">os</span>.<span class=\"built_in\">rename</span>(<span class=\"built_in\">arg</span>.old, <span class=\"built_in\">arg</span>.new)</span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/><span class=\"line\"><span class=\"built_in\">rename</span>{old=<span class=\"string\">&#34;old.lua&#34;</span>, new=<span class=\"string\">&#34;new.lua&#34;</span>}</span><br/></pre></td></tr></tbody></table></figure>\n</li>\n</ul>","text":"5 Functions 当函数参数为literal string或table constructor时，可以不加括号 12345print &#34;Hello world&#34;dofile &#39;a.lua&#39;print [[a multi-line messag...","link":"","photos":[],"count_time":{"symbolsCount":"2.8k","symbolsTime":"3 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-Functions\"><span class=\"toc-text\">5 Functions</span></a></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"结合Fluentd实现ngx_lua_waf页面展示","uid":"d818020fe9b5ded46e6f72a0b4292602","slug":"zl/2016-01-01-811_结合Fluentd实现ngx_lua_waf页面展示","date":"2024-04-03T03:47:36.057Z","updated":"2024-04-03T03:47:36.058Z","comments":true,"path":"api/articles/zl/2016-01-01-811_结合Fluentd实现ngx_lua_waf页面展示.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"0x00 概述最近在看lua_waf,看看怎么搞个web界面出来，于是有了这篇笔记。 上图是大佬分享的waf日志处理流程，不过我这篇文章讲的就简单多了，如下, 纯属搞着玩儿： ngx_lua_waf简介 ngx_lua_waf，是一个轻量级、高性能的WAF模块。 防止sql注入，...","link":"","photos":[],"count_time":{"symbolsCount":"8.8k","symbolsTime":"8 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Lua的win和linux环境搭建","uid":"7fe1dad0ab07c1159a9c6ba848add36c","slug":"zl/2016-01-01-809_Lua的win和linux环境搭建","date":"2024-04-03T03:47:36.055Z","updated":"2024-04-03T03:47:36.056Z","comments":true,"path":"api/articles/zl/2016-01-01-809_Lua的win和linux环境搭建.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":" &lt;a href=&quot;/2015/11/03/Linux常用命令笔记整理之tcpdump/&quot; rel=&quot;next&quot; title=&quot;Linux常用命令笔记整理之tcpdump&quot;&gt; &lt;i class=&quo...","link":"","photos":[],"count_time":{"symbolsCount":"3k","symbolsTime":"3 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}