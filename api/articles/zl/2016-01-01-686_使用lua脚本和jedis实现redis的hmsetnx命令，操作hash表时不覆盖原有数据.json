{"title":"使用lua脚本和jedis实现redis的hmsetnx命令，操作hash表时不覆盖原有数据","uid":"902db83d430c7a6c8747f738789d3deb","slug":"zl/2016-01-01-686_使用lua脚本和jedis实现redis的hmsetnx命令，操作hash表时不覆盖原有数据","date":"2024-04-03T03:47:35.919Z","updated":"2024-04-03T03:47:35.919Z","comments":true,"path":"api/articles/zl/2016-01-01-686_使用lua脚本和jedis实现redis的hmsetnx命令，操作hash表时不覆盖原有数据.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<p>redis中set系列命令(包括set,hset等等)，基本上都包括两个版本，纯粹的set和setnx, setnx即set not exist, 也就是只有Key不存在时才会执行set, 而不会覆盖原有的值。</p>\n<p>但是hmset这个命令，包括redis本身，jedis都没有提供nx版本的支持。当然，hset这个命令是有对应的hsetnx版本的，hmset意思就是multi hset,一次可以操作多个key, 从而减小网络开销。</p>\n<p>所以，为了在使用hmset时也能降低网络的消耗，用lua写了一个脚本，实现hmsetnx的效果，即：向Hash表中set键值对时，只有键不存在时才会写入，不会覆盖原有值。</p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/><span class=\"line\">9</span><br/><span class=\"line\">10</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">local key</span><br/><span class=\"line\">for i,j in ipairs(ARGV)</span><br/><span class=\"line\">do\tif i%2 == 0</span><br/><span class=\"line\">\tthen</span><br/><span class=\"line\">\t\tredis.call(&#39;hsetnx&#39;, KEYS[1], key,j)</span><br/><span class=\"line\">\telse</span><br/><span class=\"line\">\t\tkey = j</span><br/><span class=\"line\">\tend</span><br/><span class=\"line\">end</span><br/><span class=\"line\">return 1</span><br/></pre></td></tr></tbody></table></figure>\n<p>脚本的原理还是比较简单，脚本中使用的参数和hmset完全一致。依次读入参数列表，迭代器i是奇数时给key赋值，偶数时执行一次hsetnx,循环结束后也就完成了。</p>\n<p>之后再调用jedis封装好的eval接口，</p>\n<p>Object eval(final String script, final List<string> keys, final List<string> args)</string></string></p>\n<p>或者</p>\n<p>Object eval(final byte[] script, final List<byte[]> keys, final List<byte[]> args）</byte[]></byte[]></p>\n<p>都可以，这两个接口的区别就是是否对参数进行序列化</p>\n<p>keys中只放一个元素，就是hash表本身的key, 然后把键值对按照一个key,一个value的顺序依次放到args里。</p>\n<p>当然，也可以用evalsha命令避免每次操作都要传输脚本本身，这里就不细说了。</p>","text":"redis中set系列命令(包括set,hset等等)，基本上都包括两个版本，纯粹的set和setnx, setnx即set not exist, 也就是只有Key不存在时才会执行set, 而不会覆盖原有的值。 但是hmset这个命令，包括redis本身，jedis都没有提供nx...","link":"","photos":[],"count_time":{"symbolsCount":805,"symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Car Evaluation Analysis","uid":"25140a3756945e2b6db9700c9078fc4a","slug":"zl/2016-01-01-688_Car Evaluation Analysis","date":"2024-04-03T03:47:35.920Z","updated":"2024-04-03T03:47:35.924Z","comments":true,"path":"api/articles/zl/2016-01-01-688_Car Evaluation Analysis.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"汽车数据R语言机器学习分析 title: “Car Evaluation Analysis” author: “Suraj Vidyadaran” date: “Sunday, February 21, 2016” output: md_document 对汽车数据使用17种分类...","link":"","photos":[],"count_time":{"symbolsCount":"24k","symbolsTime":"22 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Linux 下 lua 开发环境安装及安装 luafilesystem","uid":"8f4c30a76f8d788c178eb45d61a32358","slug":"zl/2016-01-01-683_Linux 下 lua 开发环境安装及安装 luafilesystem","date":"2024-04-03T03:47:35.918Z","updated":"2024-04-03T03:47:35.918Z","comments":true,"path":"api/articles/zl/2016-01-01-683_Linux 下 lua 开发环境安装及安装 luafilesystem.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"火云邪神语录：天下武功，无坚不破，唯快不破！Nginx 的看家本领就是速度，Lua 的拿手好戏亦是速度，这两者的结合在速度上无疑有基因上的优势。 最近一直再折腾这个，干脆就稍微整理下。以防后面继续跳坑！ 安装： 1.先安装 lua 的相关依赖安装 C 开发环境由于 gcc 包需要...","link":"","photos":[],"count_time":{"symbolsCount":"3.9k","symbolsTime":"4 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}