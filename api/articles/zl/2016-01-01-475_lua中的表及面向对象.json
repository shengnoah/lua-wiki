{"title":"lua中的表及面向对象","uid":"1ad5c690a0087b80478637ac337433fb","slug":"zl/2016-01-01-475_lua中的表及面向对象","date":"2024-04-03T03:47:35.757Z","updated":"2024-04-03T03:47:35.757Z","comments":true,"path":"api/articles/zl/2016-01-01-475_lua中的表及面向对象.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<p>在lua中，只有唯一的一种数据结构，表。通过表，却可以用来实现类一样的形式，其关键是对于表的元方法的使用，可以有很多奇妙的用处。<br/></p>\n<p>Lua中，所有的值都可以有一个有一个<strong>元表(metatable)</strong>，元表中的元素定义了对于值特定操作的方法，就叫做<strong>元方法</strong>。当然，这些元表是有默认值的，但我们可以通过改变值元表中的元方法来进行特定操作行为的改变。</p>\n<p>可以通过<code>setmetatable()</code>函数来修改一个表的元表，而其他类型的值元表只能通过 C API来改变。</p>\n<p>默认情况下，值是没有元表的，所以我们手动去设置，但 <em>string</em>库为字符串类型设置了一个元表。  </p>\n<h1 id=\"表table\"><a href=\"#表table\" class=\"headerlink\" title=\"表table\"></a>表table</h1><p>lua中没有复杂的数据结构，只有表。通过代码：</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">t = {}</span><br/></pre></td></tr></tbody></table></figure>\n<p>就建立了一个表。可以验证，其确实是没有元表的：</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">getmetatable</span>(t))</span><br/></pre></td></tr></tbody></table></figure>\n<p><code>getmetatable()</code>用来获取一个表的元表。  </p>\n<p>输出将是<em>nil</em>。而对于字符串：</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">getmetatable</span>(<span class=\"string\">&#34;hello world&#34;</span>)</span><br/></pre></td></tr></tbody></table></figure>\n<p>其输出会是类似<code>table: 0x ...</code>这样。表示其有一个元表。</p>\n<h1 id=\"元表的元素\"><a href=\"#元表的元素\" class=\"headerlink\" title=\"元表的元素\"></a>元表的元素</h1><p>一个完整的元表，看起来应该是这样的：</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">mt = { <span class=\"string\">&#34;__ev&#34;</span> = method, ... }</span><br/></pre></td></tr></tbody></table></figure>\n<p>其中<em>ev</em>可以是，<code>__add, _sub, __mul, __div, __mod, __pow, __unm, __idiv, __band, __bor, __bxor, __bnot, __shl, __shr, __concat, __len, __eq, __lt, __le, __index, __newindex。</code>这里面的键被成为事件。</p>\n<h1 id=\"index事件\"><a href=\"#index事件\" class=\"headerlink\" title=\"__index事件\"></a>__index事件</h1><p>我们重点关注一下<code>__index</code>这个事件。</p>\n<p>假如我们有一个表 <code>t = &#123;1, x = 2, y = 3,&#125;</code>，那么，t.x 与 t[“x”]的值应该是一样的：</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">t = {<span class=\"number\">1</span>, x = <span class=\"number\">2</span>, y = <span class=\"number\">3</span>,}</span><br/><span class=\"line\"><span class=\"built_in\">print</span>(t.x, t[<span class=\"string\">&#34;x&#34;</span>])</span><br/><span class=\"line\"><span class=\"built_in\">print</span>(t.n)</span><br/></pre></td></tr></tbody></table></figure>\n<p>以 键 作为索引访问表的元素时，这是正确的。但如果是整数作为索引来访问表元素的话，这就是不对的。<em>t[1]</em>，不会等于 <em>t.1</em>，而会出现一个错误。</p>\n<p>我们特意用<em>t.n</em>来访问一个表中不存在的元素，很明显，其输出是<em>nil</em>。</p>\n<p>我们现在来看一下，官方对于 <code>__index</code>事件的说明：</p>\n<blockquote>\n<p>索引访问<em>table[key]</em>。这个事件会在<em>table</em>不是一个表，或<em>key</em>在表中不存在的时候发生。</p>\n<p>元方法可以是函数和一个表。如果是函数，以<em>table, key</em>作为参数调用这个元方法，函数返回的结果，就是这个索引访问操作的结果；如果元方法是一个表，那么就以<em>key</em>来索引访问这个 作为元方法的表 中元素。（这个索引访问走的常规流程，也有可能引发另外一次元方法的调用）</p>\n</blockquote>\n<p>我们现在给表<em>t</em>，设置一个元表<em>mt</em>，<em>mt</em>内定义了<code>__index</code>的元方法。</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">t = {<span class=\"number\">1</span>, x = <span class=\"number\">2</span>, y = <span class=\"number\">3</span>,}</span><br/><span class=\"line\"><span class=\"built_in\">print</span>(t.x, t[<span class=\"string\">&#34;x&#34;</span>])</span><br/><span class=\"line\"><span class=\"built_in\">print</span>(t.n)</span><br/><span class=\"line\"></span><br/><span class=\"line\">mt = {}</span><br/><span class=\"line\">mt.<span class=\"built_in\">__index</span> = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(table, key)</span></span> <span class=\"built_in\">print</span> <span class=\"string\">&#34;this key is not here&#34;</span>; <span class=\"keyword\">return</span> <span class=\"number\">10</span> <span class=\"keyword\">end</span></span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"built_in\">setmetatable</span>(t, mt)</span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"built_in\">print</span>(t.n)</span><br/></pre></td></tr></tbody></table></figure>\n<p>输出将是：</p>\n<pre><code>    this key is not here\n</code></pre><p>由于访问了不存在的索引，所以触发了<code>__index</code>事件。</p>\n<p>现在，我们把<em>mt</em>中<code>__index</code>的元方法设置为一个表：</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">t = {<span class=\"number\">1</span>, x = <span class=\"number\">2</span>, y = <span class=\"number\">3</span>, func = <span class=\"built_in\">print</span>}</span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"built_in\">print</span> <span class=\"string\">&#34;------------&#34;</span></span><br/><span class=\"line\">mt = {}</span><br/><span class=\"line\">mt.<span class=\"built_in\">__index</span> = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(table, key)</span></span> <span class=\"built_in\">print</span> <span class=\"string\">&#34;oh, I&#39;m in table a, but not in table t&#34;</span>; <span class=\"keyword\">return</span> <span class=\"number\">20</span> <span class=\"keyword\">end</span></span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"built_in\">setmetatable</span>(t, mt)</span><br/><span class=\"line\"><span class=\"built_in\">print</span>(t.n)</span><br/><span class=\"line\"><span class=\"built_in\">print</span>(t.n)</span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"built_in\">print</span> <span class=\"string\">&#34;------------&#34;</span></span><br/><span class=\"line\">a = { n = <span class=\"number\">10</span>}</span><br/><span class=\"line\">mt.<span class=\"built_in\">__index</span> = a</span><br/><span class=\"line\"><span class=\"built_in\">setmetatable</span>(t, mt)</span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"built_in\">print</span>(t.n)</span><br/><span class=\"line\">a.n = <span class=\"number\">10</span>\t</span><br/><span class=\"line\"><span class=\"built_in\">print</span>(t.n)</span><br/></pre></td></tr></tbody></table></figure>\n<p>输出将是:</p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">------------</span><br/><span class=\"line\">oh, I&#39;m in table a, but not in table t</span><br/><span class=\"line\">20</span><br/><span class=\"line\">oh, I&#39;m in table a, but not in table t</span><br/><span class=\"line\">20</span><br/><span class=\"line\">------------</span><br/><span class=\"line\">10</span><br/><span class=\"line\">20</span><br/></pre></td></tr></tbody></table></figure>\n<p>当元方法是一个函数时，索引访问的结果，是元方法调用的结果，同时不存在键不会被加上；而当元方法是一个表时，会从作为元方法的那个表内取出对应的值来 加到当前表上。</p>\n<p>到这里，想必你已经发现了什么。</p>\n<h1 id=\"函数是匿名的\"><a href=\"#函数是匿名的\" class=\"headerlink\" title=\"函数是匿名的\"></a>函数是匿名的</h1><p>Lua中，所有的函数都是匿名的。</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(v)</span></span></span><br/><span class=\"line\">\t<span class=\"keyword\">return</span> v</span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/></pre></td></tr></tbody></table></figure>\n<p>其实与:</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">foo = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(v)</span></span> <span class=\"keyword\">return</span> v <span class=\"keyword\">end</span></span><br/></pre></td></tr></tbody></table></figure>\n<p>是等价的。</p>\n<p>调用函数的时候，括号是必须的。但在只有一个参数，且参数是字符串或表的时候可以省略。</p>\n<p>也就是说：</p>\n<p><code>print(&#34;hello world&#34;) 与 print &#34;hello world&#34;</code>等价。</p>\n<h1 id=\"表中的函数\"><a href=\"#表中的函数\" class=\"headerlink\" title=\"表中的函数\"></a>表中的函数</h1><p>所以：</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"></span><br/><span class=\"line\">t = {}</span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">t.func</span> <span class=\"params\">()</span></span></span><br/><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"string\">&#34;one&#34;</span></span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/><span class=\"line\"><span class=\"built_in\">print</span>(t.func())</span><br/><span class=\"line\"></span><br/><span class=\"line\">t.func = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span></span> <span class=\"keyword\">return</span> <span class=\"string\">&#34;one&#34;</span> <span class=\"keyword\">end</span></span><br/><span class=\"line\"><span class=\"built_in\">print</span>(t.func())</span><br/></pre></td></tr></tbody></table></figure>\n<p>后面对<em>t.func</em>进行赋值的两种形式是等价的，但第一中形式看起来会更加易读一些。</p>\n<h1 id=\"面向对象\"><a href=\"#面向对象\" class=\"headerlink\" title=\"面向对象\"></a>面向对象</h1><p>表也是一个对象。一个对象，简单来说，会具有状态（属性），方法，可以通过方法来改变自身状态等等。</p>\n<p>我们来假设一个钱包的情况。</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">wallet = { remain = <span class=\"number\">0</span> }</span><br/><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">wallet.pay</span><span class=\"params\">(v)</span></span></span><br/><span class=\"line\">\twallet.remain = wallet.remain - v</span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"built_in\">print</span>(a.remain)</span><br/><span class=\"line\">wallet.pay(<span class=\"number\">10</span>)</span><br/><span class=\"line\"><span class=\"built_in\">print</span>(a.remain)</span><br/></pre></td></tr></tbody></table></figure>\n<p>输出是什么？</p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">0</span><br/><span class=\"line\">-10</span><br/></pre></td></tr></tbody></table></figure>\n<p><em>wallet.pay()</em>调用影响了<em>a</em>的值，这说明Lua中，值存储于内存中，变量只是对其的一个引用。</p>\n<p>我们再来看另外一个问题：</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">wallet = <span class=\"literal\">nil</span></span><br/><span class=\"line\">a.pay(<span class=\"number\">10</span>)</span><br/></pre></td></tr></tbody></table></figure>\n<p>输出是：</p>\n<pre><code>attempt to index a nil value (global &#39;wallet&#39;)\n</code></pre><p>我们销毁了<em>wallet</em>变量，这个时候<em>a</em>也无法工作了。这是因为在<em>pay</em>调用中，所操作的对象是<em>wallet</em>。 而我们需要的，是操作<em>a</em>本身。</p>\n<p>在面向对象的概念中，一个对象，调用方法，叫做向这个对象发送消息，换言之，对象就是消息的接收着。</p>\n<p>在上面的例子者，消息的接收者是<em>a</em>，而操纵的对象却是<em>wallet</em>，这是一种非常不好的做法，我们也应在 方法的内部去 操纵全局变量。</p>\n<p>我们需要的，其实是一种操纵消息接收者自身的机制。幸好，Lua提供了这个机制，通过<code>:</code>冒号来调用方法，即可在方法内部使用<em>self</em>这个代表自身的对象。</p>\n<p>将上面的代码进行修改:</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">wodediannaodeMacBook-Air:lua shouzheng.zhang$ lua <span class=\"number\">1.</span>lua</span><br/><span class=\"line\">wallet = { remain = <span class=\"number\">0</span> }</span><br/><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">wallet:pay</span><span class=\"params\">(v)</span></span></span><br/><span class=\"line\">        self.remain = self.remain - v</span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/><span class=\"line\"></span><br/><span class=\"line\">a = wallet</span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"built_in\">print</span>(a.remain)</span><br/><span class=\"line\">wallet:pay(<span class=\"number\">10</span>)</span><br/><span class=\"line\"><span class=\"built_in\">print</span>(a.remain, wallet.remain)</span><br/><span class=\"line\"></span><br/><span class=\"line\"></span><br/><span class=\"line\">wallet = <span class=\"literal\">nil</span></span><br/><span class=\"line\">a:pay(<span class=\"number\">10</span>)</span><br/><span class=\"line\"><span class=\"built_in\">print</span>(a.remain)</span><br/></pre></td></tr></tbody></table></figure>\n<p>如此，通过<code>:</code>调用方法（函数），就少了这么多的麻烦事情了。</p>\n<h1 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h1><p>回到前面那个问题，<em>wallet</em>和<em>a</em>引用的对象都是一样的，所以会造成相互调用间出现影响的情况。</p>\n<p>而通过 <strong>__index事件</strong>一节我们看到，对于 一个表 <em>t</em>，中不存在的元素，其会通过其 元表<em>t.mt</em>中 <code>__index</code>事件的元方法来寻找。而当 元方法是个表时， 还会直接通过 元方法表 中对应的索引值 来初始化自身表内的 键-值对。</p>\n<p>那么，我们可以通过把一个 表　<em>ａ</em>　作为表　<em>ｂ</em>　的<code>＿＿index</code>元方法表，这样，<em>b</em>就能 继承到 <em>a</em> 的所有元素。</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">a = { remain = <span class=\"number\">0</span> }</span><br/><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a:new</span><span class=\"params\">(o)</span></span></span><br/><span class=\"line\">\to = o <span class=\"keyword\">or</span> {}</span><br/><span class=\"line\">\t<span class=\"built_in\">setmetatable</span>(o, self)</span><br/><span class=\"line\">\tself.<span class=\"built_in\">__index</span> = self</span><br/><span class=\"line\">\t<span class=\"keyword\">return</span> o</span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a:withdraw</span><span class=\"params\">(v)</span></span></span><br/><span class=\"line\">\tself.remain = self.remain + v</span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a:pay</span><span class=\"params\">(v)</span></span></span><br/><span class=\"line\">\tself.remain = self.remain - v</span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/></pre></td></tr></tbody></table></figure>\n<p>这里，我们可以把<em>ａ</em>　看成一个类，其方法　<code>new()</code> 创建表<em>o</em>，并把表 <em>a</em> 作为其 元表，同时把 元表 <code>__index</code>事件的值设置为 <em>a</em>，就可以让 <em>o</em>从 <em>a</em> 取得任何其不具有的元素。</p>","text":"在lua中，只有唯一的一种数据结构，表。通过表，却可以用来实现类一样的形式，其关键是对于表的元方法的使用，可以有很多奇妙的用处。 Lua中，所有的值都可以有一个有一个元表(metatable)，元表中的元素定义了对于值特定操作的方法，就叫做元方法。当然，这些元表是有默认值的，但我...","link":"","photos":[],"count_time":{"symbolsCount":"3.8k","symbolsTime":"3 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E8%A1%A8table\"><span class=\"toc-text\">表table</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%85%83%E8%A1%A8%E7%9A%84%E5%85%83%E7%B4%A0\"><span class=\"toc-text\">元表的元素</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#index%E4%BA%8B%E4%BB%B6\"><span class=\"toc-text\">__index事件</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%87%BD%E6%95%B0%E6%98%AF%E5%8C%BF%E5%90%8D%E7%9A%84\"><span class=\"toc-text\">函数是匿名的</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E8%A1%A8%E4%B8%AD%E7%9A%84%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">表中的函数</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">面向对象</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%BB%A7%E6%89%BF\"><span class=\"toc-text\">继承</span></a></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Lua中关于table对象引用传递的注意事项","uid":"701786e387900af8ad697a179cb3c175","slug":"zl/2016-01-01-478_Lua中关于table对象引用传递的注意事项","date":"2024-04-03T03:47:35.760Z","updated":"2024-04-03T03:47:35.760Z","comments":true,"path":"api/articles/zl/2016-01-01-478_Lua中关于table对象引用传递的注意事项.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"最近写了挺长一段时间的Lua，发现Lua这个语言真的是很随意，产生这种感觉的根本原因应该是它把“函数” 作为了“第一类值”，也就是说函数也可以作为变量的“值”，这使得Lua可以随处定义函数，进而改变逻辑的走向，整个流程任你摆布。 虽说把一个函数来回设置方便了许多，但是同样带来了一...","link":"","photos":[],"count_time":{"symbolsCount":"3.3k","symbolsTime":"3 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Lua 学习 chapter22","uid":"4a87df76c39f3f8150fdb435e35555f2","slug":"zl/2016-01-01-477_Lua 学习 chapter22 ","date":"2024-04-03T03:47:35.757Z","updated":"2024-04-03T03:47:35.758Z","comments":true,"path":"api/articles/zl/2016-01-01-477_Lua 学习 chapter22 .json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"目录 具有动态名称的全局变量 非全局环境 环境和模块 只有疯狂过，你才知道自己究竟能不能成功。 具有动态名称的全局变量 在lua中，所有的全局变量都被存在_G中，通过_G[name]可以访问到任意一个全局变量。在lua中，全局变量不需要声明就可以直接使用，但是这个可能会造成非常难...","link":"","photos":[],"count_time":{"symbolsCount":"2.3k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}