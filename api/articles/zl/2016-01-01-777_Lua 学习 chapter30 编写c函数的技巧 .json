{"title":"Lua 学习 chapter30 编写c函数的技巧","uid":"f028d85db621373afc63d8d068278fba","slug":"zl/2016-01-01-777_Lua 学习 chapter30 编写c函数的技巧 ","date":"2024-04-03T03:47:36.013Z","updated":"2024-04-03T03:47:36.015Z","comments":true,"path":"api/articles/zl/2016-01-01-777_Lua 学习 chapter30 编写c函数的技巧 .json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<h3 id=\"目录\">目录</h3>\n<ol>\n  <li>数组操作</li>\n  <li>字符串操作</li>\n  <li>在c函数中保存状态</li>\n</ol>\n<blockquote>\n  <p>生活总需要一点仪式感，然后慢慢的像那个趋向完美的自己靠近。</p>\n</blockquote>\n<h2 id=\"数组操作\">数组操作</h2>\n<p>Lua中的数组就是以特殊的方式使用边。像lua_setttable and lua_gettable这种用来操作的通用函数，也可以用于操作数组，不过C API为使用整数索引的表访问和更新提供了专门的函数：</p>\n<div class=\"language-c highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kt\">void</span> <span class=\"nf\">lua_geti</span> <span class=\"p\">(</span><span class=\"n\">lua_State</span> <span class=\"o\">*</span><span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">index</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">key</span><span class=\"p\">);</span>\n<span class=\"kt\">void</span> <span class=\"nf\">lua_seti</span> <span class=\"p\">(</span><span class=\"n\">lua_State</span> <span class=\"o\">*</span><span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">index</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">key</span><span class=\"p\">);</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n<p>lua_geti相当于：</p>\n<div class=\"language-c highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n</pre></td><td class=\"rouge-code\"><pre><span class=\"n\">lua_pushnumber</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">);</span>\n<span class=\"n\">lua_gettable</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span><span class=\"n\">t</span><span class=\"p\">);</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n<p>lua_seti相当于：</p>\n<div class=\"language-c highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n</pre></td><td class=\"rouge-code\"><pre><span class=\"n\">lua_pushnumber</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">);</span>\n<span class=\"n\">lua_insert</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">);</span>\n<span class=\"n\">lua_settable</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span><span class=\"n\">t</span><span class=\"p\">);</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n<p>eg:函数map，该函数对数组中的所有元素调用一个指定的函数，然后用此函数返回的结果替换掉对应的数组元素。</p>\n<div class=\"language-c highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kt\">int</span> <span class=\"nf\">l_map</span><span class=\"p\">(</span><span class=\"n\">lua_State</span><span class=\"o\">*</span> <span class=\"n\">L</span><span class=\"p\">)</span> <span class=\"p\">&#123;</span>\n\t<span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">;</span>\n\t<span class=\"n\">luaL_checktype</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">LUA_TTABLE</span><span class=\"p\">);</span> <span class=\"c1\">//确保指定的参数具有指定的类型</span>\n\t<span class=\"n\">luaL_checktype</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">LUA_TFUNCTION</span><span class=\"p\">);</span>\n\t<span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"n\">luaL_len</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">);</span> <span class=\"c1\">//类似长度运算符</span>\n\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span>\n\t<span class=\"p\">&#123;</span>\n\t\t<span class=\"n\">lua_pushvalue</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">);</span>\n\t\t<span class=\"n\">lua_geti</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">);</span>\n\t\t<span class=\"n\">lua_call</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">);</span> <span class=\"c1\">//类似以pcall但是会传播错误，而不是返回错误码</span>\n\t\t<span class=\"n\">lua_seti</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">);</span>\n\t<span class=\"p\">&#125;</span>\n\t<span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">&#125;</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n<h2 id=\"字符串操作\">字符串操作</h2>\n<p>当c函数接收到一个lua字符串为参数是，必须遵守两条规则，在使用字符串期间不能从栈中将其弹出，而且不应该修改字符串。</p>\n<p>标准API为两种最用的字符串操作提供了支持，即字符串提取和字符串连接。要提取子串，那么基本的操作lua_pushlstring可以获取字符串长度作为额外的参数。因此，如果要把字符串s从i到j(include)的子串传递给lua：</p>\n<div class=\"language-c highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n</pre></td><td class=\"rouge-code\"><pre><span class=\"n\">lua_pushlstring</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"n\">s</span> <span class=\"o\">+</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span> <span class=\"o\">-</span> <span class=\"n\">i</span> <span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">);</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n<p>eg:函数根据分隔符来分隔字符串：</p>\n<div class=\"language-lua highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n</pre></td><td class=\"rouge-code\"><pre><span class=\"n\">static</span> <span class=\"n\">int</span> <span class=\"n\">l_split</span><span class=\"p\">(</span><span class=\"n\">lua_State</span><span class=\"o\">*</span> <span class=\"n\">L</span><span class=\"p\">)</span> <span class=\"p\">&#123;</span>\n\t<span class=\"n\">const</span> <span class=\"n\">char</span><span class=\"o\">*</span> <span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">luaL_checkstring</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n\t<span class=\"n\">const</span> <span class=\"n\">char</span><span class=\"o\">*</span> <span class=\"n\">sep</span> <span class=\"o\">=</span> <span class=\"n\">luaL_checkstring</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">);</span>\n\t<span class=\"n\">const</span> <span class=\"n\">char</span><span class=\"o\">*</span> <span class=\"n\">e</span><span class=\"p\">;</span>\n\t<span class=\"n\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n\t<span class=\"n\">lua_newtable</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">);</span>\n<pre><code>&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strchr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;\n&lt;span class=&quot;p&quot;&gt;&#123;&lt;/span&gt;\n\t&lt;span class=&quot;n&quot;&gt;lua_pushlstring&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;\n\t&lt;span class=&quot;n&quot;&gt;lua_rawseti&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;\n\t&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;\n&lt;span class=&quot;p&quot;&gt;&#125;&lt;/span&gt;\n&lt;span class=&quot;n&quot;&gt;lua_pushstring&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;\n&lt;span class=&quot;n&quot;&gt;lua_rawseti&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;\n&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;\n</code></pre>\n<p><span class=\"p\">}</span><br />\n</pre></td></tr></tbody></table></code></pre></div></div></p>\n<h2 id=\"在c函数中保存状态\">在c函数中保存状态</h2>\n<p>C API提供了两个类似的地方来存储非局部数据，即注册表(registry)和上值(upvalue).</p>\n<p><strong>注册表</strong></p>\n<p>注册表是一张只能被C代码访问的全局表。通常情况下，我们使用注册表来存储多个模块间的共享数据。</p>\n<p>注册表总是位于伪索引LUA_REGISTRYINDEX中。伪索引就像是一个栈中的索引，但是它所关联的值不在栈中。lua API中大多数接受索引作为参数的函数也能将伪索引作为参数，像lua_remove和lua_insert这种操作栈本身的函数除外。eg:获取注册表中键为“key”的值，可以使用如下的调用。</p>\n<div class=\"language-c highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n</pre></td><td class=\"rouge-code\"><pre><span class=\"n\">lua_getfield</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"n\">LUA_REGISTRYINDEX</span><span class=\"p\">,</span> <span class=\"s\">&#34;Key&#34;</span><span class=\"p\">);</span>\n<p><span class=\"k\">static</span> <span class=\"kt\">char</span> <span class=\"n\">key</span> <span class=\"o\">=</span> <span class=\"sc\">'k'</span><br />\n<span class=\"n\">lua_pushstring</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"n\">mystr</span><span class=\"p\">);</span><br />\n<span class=\"n\">lua_rawsetp</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span><span class=\"n\">LUA_REGISTRYINDEX</span><span class=\"p\">,(</span><span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"p\">)</span> <span class=\"o\">&amp;</span><span class=\"n\">key</span><span class=\"p\">);</span><span class=\"c1\">//设置值到注册表中</span></p>\n<p><span class=\"n\">lua_rawgetp</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span><span class=\"n\">LUA_REGISTRYINDEX</span><span class=\"p\">,(</span><span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"p\">)</span> <span class=\"o\">&amp;</span><span class=\"n\">key</span><span class=\"p\">);</span><span class=\"c1\">//从注册表中取值</span><br />\n<span class=\"n\">mystr</span> <span class=\"o\">=</span> <span class=\"n\">lua_tostring</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">);</span><br />\n</pre></td></tr></tbody></table></code></pre></div></div></p>\n<pre><code>            &lt;hr style=&quot;visibility: hidden;&quot;/&gt;\n            \n            &lt;hr style=&quot;visibility: hidden;&quot;/&gt;\n</code></pre>\n","text":"目录 数组操作 字符串操作 在c函数中保存状态 生活总需要一点仪式感，然后慢慢的像那个趋向完美的自己靠近。 数组操作 Lua中的数组就是以特殊的方式使用边。像lua_setttable and lua_gettable这种用来操作的通用函数，也可以用于操作数组，不过C API为使...","link":"","photos":[],"count_time":{"symbolsCount":"4.9k","symbolsTime":"4 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%9B%AE%E5%BD%95\"><span class=\"toc-text\">目录</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%95%B0%E7%BB%84%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">数组操作</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">字符串操作</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%9C%A8c%E5%87%BD%E6%95%B0%E4%B8%AD%E4%BF%9D%E5%AD%98%E7%8A%B6%E6%80%81\"><span class=\"toc-text\">在c函数中保存状态</span></a>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"lua类机制","uid":"06e23d8cbe40b86c0fe447e69c088be2","slug":"zl/2016-01-01-778_lua类机制","date":"2024-04-03T03:47:36.015Z","updated":"2024-04-03T03:47:36.015Z","comments":true,"path":"api/articles/zl/2016-01-01-778_lua类机制.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"lua类机制的简易实现123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869...","link":"","photos":[],"count_time":{"symbolsCount":"4.1k","symbolsTime":"4 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"lua","uid":"df60e476b394b1dd4755ec96c53302ff","slug":"zl/2016-01-01-776_lua","date":"2024-04-03T03:47:36.012Z","updated":"2024-04-03T03:47:36.013Z","comments":true,"path":"api/articles/zl/2016-01-01-776_lua.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"LuaInterface 库LuaInterface下载地址 LuaInterface是一个用于在Lua语言和Microsoft .NET平台的公共语言运行时（CLR）之间集成的库。 Lua脚本可以使用它来实例化CLR对象，访问属性，调用方法，甚至使用Lua函数处理事件。 Lua...","link":"","photos":[],"count_time":{"symbolsCount":"2.6k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}