{"title":"Lua和C++的交互","uid":"4c0cbe37244e982275e6a931b2589d5a","slug":"zl/2016-01-01-821_Lua和C++的交互 ","date":"2024-04-03T03:47:36.067Z","updated":"2024-04-03T03:47:36.071Z","comments":true,"path":"api/articles/zl/2016-01-01-821_Lua和C++的交互 .json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<h3 id=\"目录\">目录</h3>\n<ol>\n  <li>Lua堆栈</li>\n  <li>Lua堆栈操作</li>\n  <li>C++调用lua</li>\n  <li>Lua调用C++</li>\n</ol>\n<blockquote>\n  <p>There is something beautiful， just to find it.</p>\n</blockquote>\n<h2 id=\"lua堆栈\">Lua堆栈</h2>\n<p>要理解Lua和C++的交互，首先要清楚Lua堆栈。简单来说Lua和C++交互是通过一个无处不在的虚拟堆栈来的。</p>\n<p>在Lua中，lua堆栈是一个结构，堆栈的索引可以是整数或者负数，+1表示栈底，-1表示栈顶。</p>\n<p>存入栈的数据类型包含数值，字符串，指针，table，闭包等。</p>\n<div class=\"language-c highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n</pre></td><td class=\"rouge-code\"><pre><span class=\"n\">lua_pushcclosure</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"n\">func</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"c1\">// 创建并压入一个闭包</span>\n<p><span class=\"n\">lua_createtable</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>        <span class=\"c1\">// 新建并压入一个表</span></p>\n<p><span class=\"n\">lua_pushnumber</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"mi\">343</span><span class=\"p\">)</span>      <span class=\"c1\">// 压入一个数字</span></p>\n<p><span class=\"n\">lua_pushstring</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"err\">“</span><span class=\"n\">mystr</span><span class=\"err\">”</span><span class=\"p\">)</span>   <span class=\"c1\">// 压入一个字符串</span><br />\n</pre></td></tr></tbody></table></code></pre></div></div></p>\n<p>这里要说明的是, 你压入的类型有数值, 字符串, 表和闭包[在c中看来是不同类型的值], 但是最后都是统一用TValue这种数据结构来保存的:), 下面用图简单的说明一下这种数据结构:</p>\n<p><img src=\"https://i.imgur.com/SJLBAAT.png\" alt=\"\"/></p>\n<p>Tvalue结构对应于lua中的所有数据类型，是一个键值对的结构，这就是lua动态类型的实现，它把值和类型绑在一起，用tt记录value的类型，value也是一个联合结构，由value定义，可以\n看到这个联合有四个域，先说明简单的：</p>\n<ul>\n  <li>p:可以存一个指针，实际上是lua中的light userdata结构</li>\n  <li>n：所有数值存在这里，不管是int还是float</li>\n  <li>b:Boolean值</li>\n  <li>gc：其它诸如table，thread，closure，string需要内存管理垃圾回收的类型都存在这里。 gc是一个指针，它可以指向的类型由联合体GCObject来定义。</li>\n</ul>\n<p>从上面我们可以得到结论：</p>\n<ol>\n  <li>lua中，number，boolean，nil，light userdata可以直接存在栈上元素里的，和垃圾回收没有关系。</li>\n  <li>lua中，string，table，closure，userdata，thread存在栈上的元素里的只是指针，它们在声明周期结束的时候被垃圾回收。</li>\n</ol>\n<h2 id=\"lua堆栈操作\">Lua堆栈操作</h2>\n<p>因为Lua与C/C++是通过栈来通信，Lua提供了C API对栈进行操作。</p>\n<div class=\"language-c++ highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n</pre></td><td class=\"rouge-code\"><pre><span class=\"cp\">#include &lt;iostream&gt;  \n#include &lt;string.h&gt;  \n</span><span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>  \n<p><span class=\"k\">extern</span> <span class=\"s\">&quot;C&quot;</span><br />\n<span class=\"p\">&#123;</span><br />\n<span class=\"cp\">#include &quot;lua.h&quot;<br />\n</span>    <span class=\"cp\">#include &quot;lauxlib.h&quot;<br />\n</span>    <span class=\"cp\">#include &quot;lualib.h&quot;<br />\n</span><span class=\"p\">&#125;</span><br />\n<span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"p\">()</span><br />\n<span class=\"p\">&#123;</span><br />\n<span class=\"c1\"><a href=\"//1.xn--state-fg1hyji2zkk5a\">//1.创建一个state</a> </span><br />\n<span class=\"n\">lua_State</span> <span class=\"o\">*</span><span class=\"n\">L</span> <span class=\"o\">=</span> <span class=\"n\">luaL_newstate</span><span class=\"p\">();</span>   <span class=\"c1\">//返回一个指向堆栈的指针</span></p>\n<pre><code>&lt;span class=&quot;c1&quot;&gt;//2.入栈操作  &lt;/span&gt;\n&lt;span class=&quot;n&quot;&gt;lua_pushstring&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#34;I am so cool~&amp;#34;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;   \n&lt;span class=&quot;n&quot;&gt;lua_pushnumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  \n\n&lt;span class=&quot;c1&quot;&gt;//3.取值操作  &lt;/span&gt;\n&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lua_isstring&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&#123;&lt;/span&gt;             &lt;span class=&quot;c1&quot;&gt;//判断是否可以转为string  &lt;/span&gt;\n    &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lua_tostring&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;//转为string并返回  &lt;/span&gt;\n&lt;span class=&quot;p&quot;&gt;&#125;&lt;/span&gt;  \n&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lua_isnumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&#123;&lt;/span&gt;  \n    &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lua_tonumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  \n&lt;span class=&quot;p&quot;&gt;&#125;&lt;/span&gt;  \n\n&lt;span class=&quot;c1&quot;&gt;//4.关闭state  &lt;/span&gt;\n&lt;span class=&quot;n&quot;&gt;lua_close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  \n&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  \n</code></pre>\n<p><span class=\"p\">}</span></p>\n<p><span class=\"kt\">int</span>   <span class=\"nf\">lua_gettop</span> <span class=\"p\">(</span><span class=\"n\">lua_State</span> <span class=\"o\"><em></span><span class=\"n\">L</span><span class=\"p\">);</span>            <span class=\"c1\">//返回栈顶索引（即栈长度）  </span><br />\n<span class=\"kt\">void</span>  <span class=\"nf\">lua_settop</span> <span class=\"p\">(</span><span class=\"n\">lua_State</span> <span class=\"o\"></em></span><span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">idx</span><span class=\"p\">);</span>   <span class=\"c1\">//ua_settop将栈顶设置为一个指定的位置，即修改栈中元素的数量。</span><br />\n<span class=\"c1\">//如果值比原栈顶高，则高的部分nil补足，如果值比原栈低，则原栈高出的部分舍弃。所以可以用lua_settop(0)来清空栈。                </span><br />\n<span class=\"kt\">void</span>  <span class=\"nf\">lua_pushvalue</span> <span class=\"p\">(</span><span class=\"n\">lua_State</span> <span class=\"o\"><em></span><span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">idx</span><span class=\"p\">);</span><span class=\"c1\">//将idx索引上的值的副本压入栈顶  </span><br />\n<span class=\"kt\">void</span>  <span class=\"nf\">lua_remove</span> <span class=\"p\">(</span><span class=\"n\">lua_State</span> <span class=\"o\"></em></span><span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">idx</span><span class=\"p\">);</span>   <span class=\"c1\">//移除idx索引上的值  </span><br />\n<span class=\"kt\">void</span>  <span class=\"nf\">lua_insert</span> <span class=\"p\">(</span><span class=\"n\">lua_State</span> <span class=\"o\"><em></span><span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">idx</span><span class=\"p\">);</span>   <span class=\"c1\">//弹出栈顶元素，并插入索引idx位置  </span><br />\n<span class=\"kt\">void</span>  <span class=\"nf\">lua_replace</span> <span class=\"p\">(</span><span class=\"n\">lua_State</span> <span class=\"o\"></em></span><span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">idx</span><span class=\"p\">);</span>  <span class=\"c1\">//弹出栈顶元素，并替换索引idx位置的值</span></p>\n<p></pre></td></tr></tbody></table></code></pre></div></div></p>\n<h2 id=\"c调用lua\">c++调用lua</h2>\n<p>lua和c通信时有这样一个约定，所有的lua中的值由lua来管理，c++中产生的值lua不知道，<strong>如果你(c/c++)想要什么, 你告诉我(lua), 我来产生, 然后放到栈上, 你只能通过api来操作这个值, 我只管我的世界。</strong></p>\n<p>这里我们写一个hello.lua</p>\n<div class=\"language-lua highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n</pre></td><td class=\"rouge-code\"><pre><span class=\"n\">str</span> <span class=\"o\">=</span> <span class=\"s2\">&#34;I am so cool&#34;</span>  \n<span class=\"n\">tbl</span> <span class=\"o\">=</span> <span class=\"p\">&#123;</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s2\">&#34;shun&#34;</span><span class=\"p\">,</span> <span class=\"n\">id</span> <span class=\"o\">=</span> <span class=\"mi\">20114442</span><span class=\"p\">&#125;</span>  \n<span class=\"k\">function</span> <span class=\"nf\">add</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"n\">b</span><span class=\"p\">)</span>  \n    <span class=\"k\">return</span> <span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"n\">b</span>  \n<span class=\"k\">end</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n<p>写一个c++文件调用lua：</p>\n<div class=\"language-c++ highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n</pre></td><td class=\"rouge-code\"><pre><span class=\"cp\">#include &lt;iostream&gt;  \n#include &lt;string.h&gt;  \n</span><span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>  \n<p><span class=\"k\">extern</span> <span class=\"s\">&quot;C&quot;</span><br />\n<span class=\"p\">&#123;</span><br />\n<span class=\"cp\">#include &quot;lua.h&quot;<br />\n</span>    <span class=\"cp\">#include &quot;lauxlib.h&quot;<br />\n</span>    <span class=\"cp\">#include &quot;lualib.h&quot;<br />\n</span><span class=\"p\">&#125;</span><br />\n<span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"p\">()</span><br />\n<span class=\"p\">&#123;</span><br />\n<span class=\"c1\"><a href=\"//1.xn--Lua-th2el20dgob170e\">//1.创建Lua状态</a>  </span><br />\n<span class=\"n\">lua_State</span> <span class=\"o\">*</span><span class=\"n\">L</span> <span class=\"o\">=</span> <span class=\"n\">luaL_newstate</span><span class=\"p\">();</span><br />\n<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">L</span> <span class=\"o\">==</span> <span class=\"nb\">NULL</span><span class=\"p\">)</span><br />\n<span class=\"p\">&#123;</span><br />\n<span class=\"k\">return</span> <span class=\"p\">;</span><br />\n<span class=\"p\">&#125;</span></p>\n<pre><code>&lt;span class=&quot;c1&quot;&gt;//2.加载Lua文件  &lt;/span&gt;\n&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bRet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;luaL_loadfile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#34;hello.lua&amp;#34;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  \n&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bRet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  \n&lt;span class=&quot;p&quot;&gt;&#123;&lt;/span&gt;  \n    &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#34;load file error&amp;#34;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  \n    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  \n&lt;span class=&quot;p&quot;&gt;&#125;&lt;/span&gt;  \n\n&lt;span class=&quot;c1&quot;&gt;//3.运行Lua文件  参数2：传递参数数量，参数3：返回数量，参数4错误处理函数。&lt;/span&gt;\n&lt;span class=&quot;n&quot;&gt;bRet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lua_pcall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  \n&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bRet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  \n&lt;span class=&quot;p&quot;&gt;&#123;&lt;/span&gt;  \n    &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#34;pcall error&amp;#34;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  \n    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  \n&lt;span class=&quot;p&quot;&gt;&#125;&lt;/span&gt;  \n\n&lt;span class=&quot;c1&quot;&gt;//4.读取变量  &lt;/span&gt;\n&lt;span class=&quot;n&quot;&gt;lua_getglobal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#34;str&amp;#34;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  \n&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lua_tostring&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  \n&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#34;str = &amp;#34;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c_str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;//str = I am so cool~  &lt;/span&gt;\n\n&lt;span class=&quot;c1&quot;&gt;//5.读取table  &lt;/span&gt;\n&lt;span class=&quot;n&quot;&gt;lua_getglobal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#34;tbl&amp;#34;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;   \n&lt;span class=&quot;n&quot;&gt;lua_getfield&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  \n&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lua_tostring&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  \n&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#34;tbl:name = &amp;#34;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c_str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//tbl:name = shun  &lt;/span&gt;\n\n&lt;span class=&quot;c1&quot;&gt;//6.读取函数  &lt;/span&gt;\n&lt;span class=&quot;n&quot;&gt;lua_getglobal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#34;add&amp;#34;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;// 获取函数，压入栈中  &lt;/span&gt;\n&lt;span class=&quot;n&quot;&gt;lua_pushnumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;          &lt;span class=&quot;c1&quot;&gt;// 压入第一个参数  &lt;/span&gt;\n&lt;span class=&quot;n&quot;&gt;lua_pushnumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;          &lt;span class=&quot;c1&quot;&gt;// 压入第二个参数  &lt;/span&gt;\n&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iRet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lua_pcall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// 调用函数，调用完成以后，会将返回值压入栈中，2表示参数个数，1表示返回结果个数。  &lt;/span&gt;\n&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iRet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;                       &lt;span class=&quot;c1&quot;&gt;// 调用出错  &lt;/span&gt;\n&lt;span class=&quot;p&quot;&gt;&#123;&lt;/span&gt;  \n    &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pErrorMsg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lua_tostring&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  \n    &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pErrorMsg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  \n    &lt;span class=&quot;n&quot;&gt;lua_close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  \n    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  \n&lt;span class=&quot;p&quot;&gt;&#125;&lt;/span&gt;  \n&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lua_isnumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;//取值输出  &lt;/span&gt;\n&lt;span class=&quot;p&quot;&gt;&#123;&lt;/span&gt;  \n    &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lua_tonumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  \n    &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#34;Result is &amp;#34;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  \n&lt;span class=&quot;p&quot;&gt;&#125;&lt;/span&gt;  \n\n&lt;span class=&quot;c1&quot;&gt;//至此，栈中的情况是：  &lt;/span&gt;\n&lt;span class=&quot;c1&quot;&gt;//=================== 栈顶 ===================   &lt;/span&gt;\n&lt;span class=&quot;c1&quot;&gt;//  索引  类型      值  &lt;/span&gt;\n&lt;span class=&quot;c1&quot;&gt;//   4   int：      30   &lt;/span&gt;\n&lt;span class=&quot;c1&quot;&gt;//   3   string：   shun   &lt;/span&gt;\n&lt;span class=&quot;c1&quot;&gt;//   2   table:     tbl  &lt;/span&gt;\n&lt;span class=&quot;c1&quot;&gt;//   1   string:    I am so cool~  &lt;/span&gt;\n&lt;span class=&quot;c1&quot;&gt;//=================== 栈底 ===================   &lt;/span&gt;\n\n&lt;span class=&quot;c1&quot;&gt;//7.关闭state  &lt;/span&gt;\n&lt;span class=&quot;n&quot;&gt;lua_close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  \n&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  \n</code></pre>\n<p><span class=\"p\">}</span><br />\n<span class=\"c1\">// 将需要设置的值设置到栈中  ,修改值</span><br />\n<span class=\"n\">lua_pushstring</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"s\">&quot;我是一个大帅锅～&quot;</span><span class=\"p\">);</span><br />\n<span class=\"c1\">// 将这个值设置到table中（此时tbl在栈的位置为2）  </span><br />\n<span class=\"n\">lua_setfield</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s\">&quot;name&quot;</span><span class=\"p\">);</span><br />\n<span class=\"c1\">// 创建一个新的table，并压入栈  </span><br />\n<span class=\"n\">lua_newtable</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">);</span><br />\n<span class=\"c1\">// 往table中设置值  </span><br />\n<span class=\"n\">lua_pushstring</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"s\">&quot;Give me a girl friend !&quot;</span><span class=\"p\">);</span> <span class=\"c1\">//将值压入栈  </span><br />\n<span class=\"n\">lua_setfield</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s\">&quot;str&quot;</span><span class=\"p\">);</span> <span class=\"c1\">//将值设置到table中，并将Give me a girl friend 出栈</span><br />\n</pre></td></tr></tbody></table></code></pre></div></div></p>\n<p><strong>需要注意的是：堆栈操作是基于栈顶的，就是说它只会去操作栈顶的值。</strong></p>\n<p>函数调用流程是先将函数入栈，参数入栈，然后用lua_pcall调用函数，此时栈顶为参数，栈底为函数，所以栈过程大致会是：参数出栈-&gt;保存参数-&gt;参数出栈-&gt;保存参数-&gt;函数出栈-&gt;调用函数-&gt;返回结果入栈。</p>\n<p>类似的还有lua_setfield，设置一个表的值，肯定要先将值出栈，保存，再去找表的位置。</p>\n<div class=\"language-c++ highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n</pre></td><td class=\"rouge-code\"><pre><span class=\"n\">lua_getglobal</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"s\">&#34;add&#34;</span><span class=\"p\">);</span>        <span class=\"c1\">// 获取函数，压入栈中  </span>\n<span class=\"n\">lua_pushnumber</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">);</span>          <span class=\"c1\">// 压入第一个参数  </span>\n<span class=\"n\">lua_pushnumber</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">);</span>          <span class=\"c1\">// 压入第二个参数  </span>\n<span class=\"kt\">int</span> <span class=\"n\">iRet</span><span class=\"o\">=</span> <span class=\"n\">lua_pcall</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">);</span><span class=\"c1\">// 将2个参数出栈，函数出栈，压入函数返回结果  </span>\n<span class=\"n\">lua_pushstring</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"s\">&#34;我是一个大帅锅～&#34;</span><span class=\"p\">);</span>  <span class=\"c1\">//   </span>\n<span class=\"n\">lua_setfield</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s\">&#34;name&#34;</span><span class=\"p\">);</span>             <span class=\"c1\">// 会将&#34;我是一个大帅锅～&#34;出栈</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n<p>lua_getglobal(L,”var”)会执行两步操作：1.将var放入栈中，2.由Lua去寻找变量var的值，并将变量var的值返回栈顶（替换var）。</p>\n<p>lua_getfield(L,-1,”name”)的作用等价于 lua_pushstring(L,”name”) + lua_gettable(L,-2),类似的，会将获得的值替换name。</p>\n<p><img src=\"https://i.imgur.com/N0PZZsz.png\" alt=\"\"/></p>\n<p>可以看出来, lua中提供的一些类型和c中是对应的, 也提供一些c中没有的类型. 其中有一些药特别的说明一下:</p>\n<p>nil值, c中没有对应, 但是可以通过lua_pushnil向lua中压入一个nil值。</p>\n<p><strong>注意: lua_push*族函数都有”创建一个类型的值并压入”的语义, 因为lua中所有的变量都是lua中创建并保存的</strong>, 对于那些和c中有对应关系的lua类型, lua会通过api传来的附加参数, 创建出对应类型的lua变量放在栈顶, 对于c中没有对应类型的lua类型, lua直接创建出对应变量放在栈顶.</p>\n<p>例如:</p>\n<ul>\n  <li>\n    <p>lua_pushstring(L, “string”) lua根据”string”创建一个 TString obj, 绑定到新分配的栈顶元素上</p>\n  </li>\n  <li>\n    <p>lua_pushcclosure(L,func, 0) lua根据func创建一个 Closure obj, 绑定到新分配的栈顶元素上</p>\n  </li>\n  <li>\n    <p>lua_pushnumber(L,5) lua直接修改新分配的栈顶元素, 将5赋值到对应的域</p>\n  </li>\n  <li>\n    <p>lua_createtable(L,0, 0)lua创建一个Tabke obj, 绑定到新分配的栈顶元素上</p>\n  </li>\n</ul>\n<p>总之, 这是一个 c value –&gt; lua value的流向, 不管是想把一个简单的5放入lua的世界, 还是创建一个table, 都会导致：</p>\n<ol>\n  <li>栈顶新分配元素</li>\n  <li>绑定或赋值</li>\n</ol>\n<p>还是为了重复一句话, 一个c value入栈就是进入了lua的世界, lua会生成一个对应的结构并管理起来, 从此就不再依赖这个c value。</p>\n<p>lua value –&gt; c value时, 是通过 lua_to* 族api实现, 很简单, 取出对应的c中的域的值就行了, 只能转化那些c中有对应值的lua value, 比如table就不能to c value, 所以api中夜没有提供 lua_totable这样的接口。</p>\n<h2 id=\"lua调用c\">Lua调用C++</h2>\n<p>有三种方法可以实现Lua调用c++中的代码。</p>\n<p>第一种，直接写到lua源码中，然后重新编译lua文件。</p>\n<p>在lua.c文件中加入自己的函数,别忘记在lua.h头文件中声明：</p>\n<div class=\"language-c++ highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n</pre></td><td class=\"rouge-code\"><pre><span class=\"c1\">// This is my function  </span>\n<span class=\"k\">static</span> <span class=\"kt\">int</span> <span class=\"nf\">getTwoVar</span><span class=\"p\">(</span><span class=\"n\">lua_State</span> <span class=\"o\">*</span><span class=\"n\">L</span><span class=\"p\">)</span>  \n<span class=\"p\">&#123;</span>  \n    <span class=\"c1\">// 向函数栈中压入2个值  </span>\n    <span class=\"n\">lua_pushnumber</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">);</span>  \n    <span class=\"n\">lua_pushstring</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span><span class=\"s\">&#34;hello&#34;</span><span class=\"p\">);</span>  \n<pre><code>&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  \n</code></pre>\n<p><span class=\"p\">}</span></p>\n<p><span class=\"err\">在</span><span class=\"n\">pmain</span><span class=\"err\">函数中，</span><span class=\"n\">luaL_openlibs</span><span class=\"err\">函数后加入以下代码：</span><br />\n<span class=\"c1\">//注册函数  </span><br />\n<span class=\"n\">lua_pushcfunction</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"n\">getTwoVar</span><span class=\"p\">);</span> <span class=\"c1\">//将函数放入栈中  </span><br />\n<span class=\"n\">lua_setglobal</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"s\">&quot;getTwoVar&quot;</span><span class=\"p\">);</span>   <span class=\"c1\">//设置lua全局变量getTwoVar</span><br />\n<span class=\"c1\">//lua_register(L,&quot;getTwoVar&quot;,getTwoVar);</span><br />\n</pre></td></tr></tbody></table></code></pre></div></div></p>\n<p>lua_setglobal会弹出栈顶元素，并为其设置值。</p>\n<p>编译之后可以直接调用函数了，但是不推荐这么做。</p>\n<p>第二种：使用静态依赖的方式：</p>\n<p>创建avg.lua:</p>\n<div class=\"language-lua highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n</pre></td><td class=\"rouge-code\"><pre><span class=\"n\">avg</span><span class=\"p\">,</span> <span class=\"n\">sum</span> <span class=\"o\">=</span> <span class=\"n\">average</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"mi\">40</span><span class=\"p\">,</span> <span class=\"mi\">50</span><span class=\"p\">)</span>  \n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&#34;The average is &#34;</span><span class=\"p\">,</span> <span class=\"n\">avg</span><span class=\"p\">)</span>  \n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&#34;The sum is &#34;</span><span class=\"p\">,</span> <span class=\"n\">sum</span><span class=\"p\">)</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n<p>创建cpp文件：</p>\n<div class=\"language-c++ highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n</pre></td><td class=\"rouge-code\"><pre><span class=\"cp\">#include &lt;stdio.h&gt;  \n</span><span class=\"k\">extern</span> <span class=\"s\">&#34;C&#34;</span> <span class=\"p\">&#123;</span>  \n<span class=\"cp\">#include &#34;lua.h&#34;  \n#include &#34;lualib.h&#34;  \n#include &#34;lauxlib.h&#34;  \n</span><span class=\"p\">&#125;</span>  \n<p><span class=\"cm\">/* 指向Lua解释器的指针 <em>/</span><br />\n<span class=\"n\">lua_State</span><span class=\"o\"></em></span> <span class=\"n\">L</span><span class=\"p\">;</span><br />\n<span class=\"k\">static</span> <span class=\"kt\">int</span> <span class=\"nf\">average</span><span class=\"p\">(</span><span class=\"n\">lua_State</span> <span class=\"o\"><em></span><span class=\"n\">L</span><span class=\"p\">)</span><br />\n<span class=\"p\">&#123;</span><br />\n<span class=\"cm\">/</em> 得到参数个数 */</span><br />\n<span class=\"kt\">int</span> <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"n\">lua_gettop</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">);</span><br />\n<span class=\"kt\">double</span> <span class=\"n\">sum</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span><br />\n<span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"p\">;</span></p>\n<pre><code>&lt;span class=&quot;cm&quot;&gt;/* 循环求参数之和 */&lt;/span&gt;  \n&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  \n&lt;span class=&quot;p&quot;&gt;&#123;&lt;/span&gt;  \n    &lt;span class=&quot;cm&quot;&gt;/* 求和 */&lt;/span&gt;  \n    &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lua_tonumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  \n&lt;span class=&quot;p&quot;&gt;&#125;&lt;/span&gt;  \n&lt;span class=&quot;cm&quot;&gt;/* 压入平均值 */&lt;/span&gt;  \n&lt;span class=&quot;n&quot;&gt;lua_pushnumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  \n&lt;span class=&quot;cm&quot;&gt;/* 压入和 */&lt;/span&gt;  \n&lt;span class=&quot;n&quot;&gt;lua_pushnumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  \n&lt;span class=&quot;cm&quot;&gt;/* 返回返回值的个数 */&lt;/span&gt;  \n&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  \n</code></pre>\n<p><span class=\"p\">}</span></p>\n<p><span class=\"kt\">int</span> <span class=\"nf\">main</span> <span class=\"p\">(</span> <span class=\"kt\">int</span> <span class=\"n\">argc</span><span class=\"p\">,</span> <span class=\"kt\">char</span> <span class=\"o\"><em></span><span class=\"n\">argv</span><span class=\"p\">[]</span> <span class=\"p\">)</span><br />\n<span class=\"p\">{</span><br />\n<span class=\"cm\">/</em> 初始化Lua */</span><br />\n<span class=\"n\">L</span> <span class=\"o\">=</span> <span class=\"n\">lua_open</span><span class=\"p\">();</span></p>\n<pre><code>&lt;span class=&quot;cm&quot;&gt;/* 载入Lua基本库 */&lt;/span&gt;  \n&lt;span class=&quot;n&quot;&gt;luaL_openlibs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  \n&lt;span class=&quot;cm&quot;&gt;/* 注册函数 */&lt;/span&gt;  \n&lt;span class=&quot;n&quot;&gt;lua_register&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#34;average&amp;#34;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;average&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  \n&lt;span class=&quot;cm&quot;&gt;/* 运行脚本 */&lt;/span&gt;  \n&lt;span class=&quot;n&quot;&gt;luaL_dofile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#34;avg.lua&amp;#34;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  \n&lt;span class=&quot;cm&quot;&gt;/* 清除Lua */&lt;/span&gt;  \n&lt;span class=&quot;n&quot;&gt;lua_close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  \n\n&lt;span class=&quot;cm&quot;&gt;/* 暂停 */&lt;/span&gt;  \n&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#34;Press enter to exit…&amp;#34;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  \n&lt;span class=&quot;n&quot;&gt;getchar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;  \n&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  \n</code></pre>\n<p><span class=\"p\">}</span><br />\n</pre></td></tr></tbody></table></code></pre></div></div></p>\n<p>c++来带调用我们的lua文件，很别扭不是么？</p>\n<p>第三种：使用动态库链接：</p>\n<p>我们先新建一个dll工程，工程名为mLualib。（因此最后导出的dll也为mLualib.dll，然后编写我们的c++模块，以函数为例，我们先新建一个.h文件和.cpp文件。</p>\n<p>h文件如下：（如果你不是很能明白头文件的内容，点击这里：http://blog.csdn.net/shun_fzll/article/details/39078971。）</p>\n<div class=\"language-c highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n</pre></td><td class=\"rouge-code\"><pre><span class=\"cp\">#pragma once  \n</span><span class=\"k\">extern</span> <span class=\"s\">&#34;C&#34;</span> <span class=\"p\">&#123;</span>  \n<span class=\"cp\">#include &#34;lua.h&#34;  \n#include &#34;lualib.h&#34;  \n#include &#34;lauxlib.h&#34;  \n</span><span class=\"p\">&#125;</span>  \n<p><span class=\"cp\">#ifdef LUA_EXPORTS<br />\n#define LUA_API __declspec(dllexport)<br />\n#else<br />\n#define LUA_API __declspec(dllimport)<br />\n#endif<br />\n</span><br />\n<span class=\"k\">extern</span> <span class=\"s\">&quot;C&quot;</span> <span class=\"n\">LUA_API</span> <span class=\"kt\">int</span> <span class=\"nf\">luaopen_mLualib</span><span class=\"p\">(</span><span class=\"n\">lua_State</span> <span class=\"o\">*</span><span class=\"n\">L</span><span class=\"p\">);</span><span class=\"c1\">//定义导出函数</span><br />\n</pre></td></tr></tbody></table></code></pre></div></div></p>\n<p>.cpp文件</p>\n<div class=\"language-c highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n</pre></td><td class=\"rouge-code\"><pre><span class=\"cp\">#include &lt;stdio.h&gt;  \n#include &#34;mLualib.h&#34;  \n</span><span class=\"k\">static</span> <span class=\"kt\">int</span> <span class=\"nf\">averageFunc</span><span class=\"p\">(</span><span class=\"n\">lua_State</span> <span class=\"o\">*</span><span class=\"n\">L</span><span class=\"p\">)</span>  \n<span class=\"p\">&#123;</span>  \n    <span class=\"kt\">int</span> <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"n\">lua_gettop</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">);</span>  \n    <span class=\"kt\">double</span> <span class=\"n\">sum</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>  \n    <span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"p\">;</span>  \n<pre><code>&lt;span class=&quot;cm&quot;&gt;/* 循环求参数之和 */&lt;/span&gt;  \n&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  \n    &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lua_tonumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  \n\n&lt;span class=&quot;n&quot;&gt;lua_pushn\n</code></pre>\n","text":"目录 Lua堆栈 Lua堆栈操作 C++调用lua Lua调用C++ There is something beautiful， just to find it. Lua堆栈 要理解Lua和C++的交互，首先要清楚Lua堆栈。简单来说Lua和C++交互是通过一个无处不在的虚拟堆栈...","link":"","photos":[],"count_time":{"symbolsCount":"28k","symbolsTime":"25 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%9B%AE%E5%BD%95\"><span class=\"toc-text\">目录</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#lua%E5%A0%86%E6%A0%88\"><span class=\"toc-text\">Lua堆栈</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#lua%E5%A0%86%E6%A0%88%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">Lua堆栈操作</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#c%E8%B0%83%E7%94%A8lua\"><span class=\"toc-text\">c++调用lua</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#lua%E8%B0%83%E7%94%A8c\"><span class=\"toc-text\">Lua调用C++</span></a>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"lua学习笔记（三）","uid":"a6e7d68214239ff8f600e3be6607e5cf","slug":"zl/2016-01-01-822_lua学习笔记（三）","date":"2024-04-03T03:47:36.071Z","updated":"2024-04-03T03:47:36.072Z","comments":true,"path":"api/articles/zl/2016-01-01-822_lua学习笔记（三）.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"Lua函数函数定义123456[local] function (argument1,argument2) -- do something [return result] -- 可以返回多个值，每个值以逗号隔开end-- 函数名表示该函数的引用，与C/C++的函数指针类似 可变参...","link":"","photos":[],"count_time":{"symbolsCount":"4.1k","symbolsTime":"4 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"php+redis+lua","uid":"47b6c60d1f4ce31d7b8bf3e7b08c7ddf","slug":"zl/2016-01-01-81_php+redis+lua","date":"2024-04-03T03:47:36.066Z","updated":"2024-04-03T03:47:36.066Z","comments":true,"path":"api/articles/zl/2016-01-01-81_php+redis+lua.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"发两个php+redis+lua的例子。 一、直接在redis上运行命令demo1eval &#34;return {KEYS[1],KEYS[2],ARGV[1],ARGV[2]}&#34; 2 key1 key2 first second eval 命令代表后面接的是lua脚...","link":"","photos":[],"count_time":{"symbolsCount":982,"symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}