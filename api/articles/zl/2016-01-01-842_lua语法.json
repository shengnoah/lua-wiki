{"title":"lua语法","uid":"6fd8143c3b34ef934d677c24fc2719a0","slug":"zl/2016-01-01-842_lua语法","date":"2024-04-03T03:47:36.094Z","updated":"2024-04-03T03:47:36.094Z","comments":true,"path":"api/articles/zl/2016-01-01-842_lua语法.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<h3 id=\"lua特性\"><a href=\"#lua特性\" class=\"headerlink\" title=\"lua特性\"></a>lua特性</h3><p>开源，轻量级，c语言编写实现，实现面向对象有点绕，执行效率高</p>\n<h3 id=\"lua开发环境\"><a href=\"#lua开发环境\" class=\"headerlink\" title=\"lua开发环境\"></a>lua开发环境</h3><ol>\n<li><p>linux</p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/><span class=\"line\">9</span><br/><span class=\"line\">10</span><br/><span class=\"line\">11</span><br/><span class=\"line\">12</span><br/><span class=\"line\">13</span><br/><span class=\"line\">14</span><br/><span class=\"line\">15</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">-- 下载lua包、解压</span><br/><span class=\"line\">wget -c http://www.lua.org/ftp/lua-5.3.0.tar.gz</span><br/><span class=\"line\">tar zxvf lua-5.3.0.tar.gz</span><br/><span class=\"line\"></span><br/><span class=\"line\">-- 下载libreadline相关支持</span><br/><span class=\"line\">sudo apt-get install libreadline5</span><br/><span class=\"line\">sudo apt-get install libreadline-gplv2-dev</span><br/><span class=\"line\"></span><br/><span class=\"line\">-- 编译安装</span><br/><span class=\"line\">cd lua-5.3.0</span><br/><span class=\"line\">make linux</span><br/><span class=\"line\">sudo make install</span><br/><span class=\"line\"></span><br/><span class=\"line\">-- 测试命令</span><br/><span class=\"line\">lua</span><br/></pre></td></tr></tbody></table></figure>\n</li>\n<li><p>windows</p>\n<ol>\n<li><a href=\"https://github.com/rjpcomputing/luaforwindows/releases\" target=\"_blank\" rel=\"noopener noreferrer\">运行环境 LuaForWindows –&gt; https://github.com/rjpcomputing/luaforwindows/releases</a></li>\n<li><a href=\"https://blog.csdn.net/u012911347/article/details/82191541\" target=\"_blank\" rel=\"noopener noreferrer\">IDE pycharm –&gt; https://blog.csdn.net/u012911347/article/details/82191541</a></li>\n</ol>\n</li>\n</ol>\n<h3 id=\"基本语法\"><a href=\"#基本语法\" class=\"headerlink\" title=\"基本语法\"></a>基本语法</h3><ol>\n<li>注释</li>\n</ol>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"comment\">--[[</span></span><br/><span class=\"line\"><span class=\"comment\">这是多行注释</span></span><br/><span class=\"line\"><span class=\"comment\">--]]</span></span><br/></pre></td></tr></tbody></table></figure>\n<ol start=\"2\">\n<li>在lua中用end给代码分段(function、if、while、for都是以end结束)，局部变量的作用域是从定义到对应的end结束</li>\n<li>局部变量要用local修饰，没有local修饰的都是全局变量(o my god！！)</li>\n<li>类型有nil、bool、number、string、function、userdata(任意的c数据结构)、thread、table</li>\n<li>lua中只有false和nil是假的，如果写if 0 then 这样后面的语句是会被执行的(是不是感觉很反人类)</li>\n</ol>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"number\">0</span> <span class=\"keyword\">then</span></span><br/><span class=\"line\">  <span class=\"built_in\">print</span>(<span class=\"string\">&#39;0 is true&#39;</span>)</span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/></pre></td></tr></tbody></table></figure>\n<ol start=\"6\">\n<li>type函数的返回类型是string</li>\n</ol>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"built_in\">type</span>(x) == <span class=\"string\">&#39;nil&#39;</span> <span class=\"keyword\">then</span></span><br/><span class=\"line\">  <span class=\"built_in\">print</span>(<span class=\"string\">&#39;x type is nil&#39;</span>)</span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/></pre></td></tr></tbody></table></figure>\n<ol start=\"7\">\n<li>table是lua中最主要的数据结构, table是kv的模式，如果没有写key值lua会默认给一个从1开始的key值</li>\n</ol>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/><span class=\"line\">9</span><br/><span class=\"line\">10</span><br/><span class=\"line\">11</span><br/><span class=\"line\">12</span><br/><span class=\"line\">13</span><br/><span class=\"line\">14</span><br/><span class=\"line\">15</span><br/><span class=\"line\">16</span><br/><span class=\"line\">17</span><br/><span class=\"line\">18</span><br/><span class=\"line\">19</span><br/><span class=\"line\">20</span><br/><span class=\"line\">21</span><br/><span class=\"line\">22</span><br/><span class=\"line\">23</span><br/><span class=\"line\">24</span><br/><span class=\"line\">25</span><br/><span class=\"line\">26</span><br/><span class=\"line\">27</span><br/><span class=\"line\">28</span><br/><span class=\"line\">29</span><br/><span class=\"line\">30</span><br/><span class=\"line\">31</span><br/><span class=\"line\">32</span><br/><span class=\"line\">33</span><br/><span class=\"line\">34</span><br/><span class=\"line\">35</span><br/><span class=\"line\">36</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">local</span> tab01 = {a=<span class=\"string\">&#39;a&#39;</span>,b=<span class=\"string\">&#39;b&#39;</span>,c=<span class=\"string\">&#39;c&#39;</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,d=<span class=\"string\">&#39;d&#39;</span>,<span class=\"number\">3</span>}</span><br/><span class=\"line\"><span class=\"comment\">--print使用..拼接打印</span></span><br/><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#39;a:&#39;</span>..tab01.a)     <span class=\"comment\">-- a:a</span></span><br/><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#39;d:&#39;</span>..tab01[<span class=\"string\">&#39;d&#39;</span>])  <span class=\"comment\">-- d:d</span></span><br/><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#39;1:&#39;</span>..tab01[<span class=\"number\">1</span>])    <span class=\"comment\">-- 1:1</span></span><br/><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#39;3:&#39;</span>..tab01[<span class=\"number\">3</span>])    <span class=\"comment\">-- 3:3</span></span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"comment\">-- insert(table, [pos,], val)</span></span><br/><span class=\"line\"><span class=\"comment\">-- pos不填为尾插。pos这个值最好是正常使用不要越界，因为在排序的时候会出问题</span></span><br/><span class=\"line\">tab02 = {<span class=\"number\">4</span>,<span class=\"number\">3</span>,<span class=\"number\">2</span>,<span class=\"number\">1</span>}</span><br/><span class=\"line\"><span class=\"built_in\">table</span>.<span class=\"built_in\">insert</span>(tab02, <span class=\"number\">4</span>, <span class=\"number\">5</span>)  <span class=\"comment\">-- 在这里pos的值确保在[1, 5]</span></span><br/><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">table</span>.<span class=\"built_in\">concat</span>(tab02)) <span class=\"comment\">--43251</span></span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"comment\">-- 自定义table打印函数</span></span><br/><span class=\"line\">tab_print = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(tab)</span></span></span><br/><span class=\"line\">  <span class=\"keyword\">for</span> k, v <span class=\"keyword\">in</span> <span class=\"built_in\">pairs</span>(tab) <span class=\"keyword\">do</span></span><br/><span class=\"line\">    <span class=\"built_in\">io</span>.<span class=\"built_in\">write</span>(v)</span><br/><span class=\"line\">  <span class=\"keyword\">end</span></span><br/><span class=\"line\">  <span class=\"built_in\">io</span>.<span class=\"built_in\">write</span>(<span class=\"string\">&#39;n&#39;</span>)</span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"comment\">-- sort排序 排序的时候是从1开始到‘第一个为nil’的index，在这个index之后的数据是不会参与排序</span></span><br/><span class=\"line\"><span class=\"comment\">-- 上面的引号解释，如果赋值table内的元素为nil，排序是会出问题的</span></span><br/><span class=\"line\">tab02[<span class=\"number\">100</span>] = <span class=\"number\">0</span></span><br/><span class=\"line\"><span class=\"built_in\">table</span>.<span class=\"built_in\">sort</span>(tab02)</span><br/><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">table</span>.<span class=\"built_in\">concat</span>(tab02))  <span class=\"comment\">--12345</span></span><br/><span class=\"line\">tab_print(tab02)            <span class=\"comment\">-- 123450</span></span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"comment\">-- remove(table, [pos,]) 默认是尾插</span></span><br/><span class=\"line\"><span class=\"built_in\">table</span>.<span class=\"built_in\">remove</span>(tab02, <span class=\"number\">5</span>)</span><br/><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">table</span>.<span class=\"built_in\">concat</span>(tab02))  <span class=\"comment\">--1234</span></span><br/><span class=\"line\">tab_print(tab02)            <span class=\"comment\">-- 12340</span></span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"comment\">-- getn(table)</span></span><br/><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">table</span>.<span class=\"built_in\">getn</span>(tab02))   <span class=\"comment\">--4</span></span><br/><span class=\"line\"><span class=\"built_in\">print</span>(#tab02)              <span class=\"comment\">--4</span></span><br/></pre></td></tr></tbody></table></figure>\n<ol start=\"8\">\n<li>迭代器</li>\n</ol>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/><span class=\"line\">9</span><br/><span class=\"line\">10</span><br/><span class=\"line\">11</span><br/><span class=\"line\">12</span><br/><span class=\"line\">13</span><br/><span class=\"line\">14</span><br/><span class=\"line\">15</span><br/><span class=\"line\">16</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--pairs遍历table中的所kv</span></span><br/><span class=\"line\"><span class=\"comment\">--ipairs遍历table从1开始到‘第一个为nil’的index</span></span><br/><span class=\"line\"><span class=\"keyword\">local</span> tab01 = {a=<span class=\"string\">&#39;a&#39;</span>,b=<span class=\"string\">&#39;b&#39;</span>,c=<span class=\"string\">&#39;c&#39;</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,d=<span class=\"string\">&#39;d&#39;</span>,<span class=\"number\">3</span>}</span><br/><span class=\"line\">tab01[<span class=\"number\">100</span>] = <span class=\"number\">100</span></span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"comment\">--pairs</span></span><br/><span class=\"line\"><span class=\"keyword\">for</span> k, v <span class=\"keyword\">in</span> <span class=\"built_in\">pairs</span>(tab01) <span class=\"keyword\">do</span></span><br/><span class=\"line\">  <span class=\"built_in\">io</span>.<span class=\"built_in\">write</span>(k..<span class=\"string\">&#39;:&#39;</span>..v..<span class=\"string\">&#39;,&#39;</span>)</span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/><span class=\"line\"><span class=\"built_in\">io</span>.<span class=\"built_in\">write</span>(<span class=\"string\">&#39;n&#39;</span>)</span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"comment\">--ipairs</span></span><br/><span class=\"line\"><span class=\"keyword\">for</span> k, v <span class=\"keyword\">in</span> <span class=\"built_in\">ipairs</span>(tab01) <span class=\"keyword\">do</span></span><br/><span class=\"line\">  <span class=\"built_in\">io</span>.<span class=\"built_in\">write</span>(k..<span class=\"string\">&#39;:&#39;</span>..v..<span class=\"string\">&#39;,&#39;</span>)</span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/><span class=\"line\"><span class=\"built_in\">io</span>.<span class=\"built_in\">write</span>(<span class=\"string\">&#39;n&#39;</span>)</span><br/></pre></td></tr></tbody></table></figure>\n<ol start=\"9\">\n<li>自己创建的带状态的迭代器</li>\n</ol>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/><span class=\"line\">9</span><br/><span class=\"line\">10</span><br/><span class=\"line\">11</span><br/><span class=\"line\">12</span><br/><span class=\"line\">13</span><br/><span class=\"line\">14</span><br/><span class=\"line\">15</span><br/><span class=\"line\">16</span><br/><span class=\"line\">17</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 使用闭包函数在1，2之间循环，直到条件不满足的时候跳出闭包函数</span></span><br/><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(tab)</span></span></span><br/><span class=\"line\">  <span class=\"keyword\">local</span> index = <span class=\"number\">0</span></span><br/><span class=\"line\">  <span class=\"keyword\">local</span> count = #tab</span><br/><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span>         <span class=\"comment\">-- 闭包函数 1</span></span><br/><span class=\"line\">    index = index + <span class=\"number\">1</span></span><br/><span class=\"line\">    <span class=\"keyword\">if</span> index &lt;= count <span class=\"keyword\">then</span></span><br/><span class=\"line\">      <span class=\"keyword\">return</span> tab[index]   <span class=\"comment\">-- 返回迭代器的当前元素 2</span></span><br/><span class=\"line\">    <span class=\"keyword\">end</span></span><br/><span class=\"line\">  <span class=\"keyword\">end</span></span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/><span class=\"line\"></span><br/><span class=\"line\">tab = {<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>}</span><br/><span class=\"line\"><span class=\"keyword\">for</span> v <span class=\"keyword\">in</span> iterator(tab) <span class=\"keyword\">do</span></span><br/><span class=\"line\">  <span class=\"built_in\">io</span>.<span class=\"built_in\">write</span>(v..<span class=\"string\">&#39;,&#39;</span>)</span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/><span class=\"line\"><span class=\"built_in\">io</span>.<span class=\"built_in\">write</span>(<span class=\"string\">&#39;n&#39;</span>)</span><br/></pre></td></tr></tbody></table></figure>\n<ol start=\"10\">\n<li>lua的垃圾内存回收机制，当一块内存没有被引用后就会被回收，去除引用的方式是直接给变量赋值为nil</li>\n<li>运算符<ul>\n<li>~= 是不等于  </li>\n<li>..链接两个字符串</li>\n<li># 返回字符或者表的长度</li>\n</ul>\n</li>\n<li><p>string的三种表示 ‘’ “” [[]]，string的拼接也可以用format</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">x=<span class=\"string\">&#39;1&#39;</span></span><br/><span class=\"line\">y=<span class=\"string\">&#34;2&#34;</span></span><br/><span class=\"line\">z=<span class=\"string\">[[3]]</span></span><br/><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">string</span>.<span class=\"built_in\">format</span>(<span class=\"string\">&#34;%s+%s=%s&#34;</span>,x,y,z))</span><br/></pre></td></tr></tbody></table></figure>\n</li>\n<li><p>可变参</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">average</span><span class=\"params\">(...)</span></span></span><br/><span class=\"line\">   sum = <span class=\"number\">0</span></span><br/><span class=\"line\">   <span class=\"keyword\">local</span> args={...}    </span><br/><span class=\"line\">   <span class=\"keyword\">for</span> i,v <span class=\"keyword\">in</span> <span class=\"built_in\">ipairs</span>(args) <span class=\"keyword\">do</span></span><br/><span class=\"line\">      sum = sum + v</span><br/><span class=\"line\">   <span class=\"keyword\">end</span></span><br/><span class=\"line\">   <span class=\"keyword\">return</span> sum/#args</span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/></pre></td></tr></tbody></table></figure>\n</li>\n</ol>\n<h3 id=\"table实现面向对象\"><a href=\"#table实现面向对象\" class=\"headerlink\" title=\"table实现面向对象\"></a>table实现面向对象</h3><ol>\n<li>lua实现面向对象的机制<ol>\n<li>函数也是一个类型，table中可以包含函数</li>\n<li>使用：的函数，会自带一个self参数，用来指明是哪个table调用的</li>\n<li>设置原表setmetatable(table, meta_table)，在table中找不到的元素，lua会去meta_table.__index表中去找， 但是元方法就不会去meta_table.__index中去找</li>\n<li>下面是实现了一个相对目前认为是比较简单的类继承<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/><span class=\"line\">9</span><br/><span class=\"line\">10</span><br/><span class=\"line\">11</span><br/><span class=\"line\">12</span><br/><span class=\"line\">13</span><br/><span class=\"line\">14</span><br/><span class=\"line\">15</span><br/><span class=\"line\">16</span><br/><span class=\"line\">17</span><br/><span class=\"line\">18</span><br/><span class=\"line\">19</span><br/><span class=\"line\">20</span><br/><span class=\"line\">21</span><br/><span class=\"line\">22</span><br/><span class=\"line\">23</span><br/><span class=\"line\">24</span><br/><span class=\"line\">25</span><br/><span class=\"line\">26</span><br/><span class=\"line\">27</span><br/><span class=\"line\">28</span><br/><span class=\"line\">29</span><br/><span class=\"line\">30</span><br/><span class=\"line\">31</span><br/><span class=\"line\">32</span><br/><span class=\"line\">33</span><br/><span class=\"line\">34</span><br/><span class=\"line\">35</span><br/><span class=\"line\">36</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">local</span> Father = {}</span><br/><span class=\"line\"><span class=\"keyword\">local</span> Son = {}</span><br/><span class=\"line\"></span><br/><span class=\"line\">Father.<span class=\"built_in\">__index</span> = Father  <span class=\"comment\">-- 这样写可以少一个中间table</span></span><br/><span class=\"line\">Son.<span class=\"built_in\">__index</span> = Son</span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Father.new</span><span class=\"params\">()</span></span></span><br/><span class=\"line\">  <span class=\"keyword\">local</span> o = {}</span><br/><span class=\"line\">  <span class=\"built_in\">setmetatable</span>(o, Father)</span><br/><span class=\"line\">  <span class=\"keyword\">return</span> o</span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Son.new</span><span class=\"params\">()</span></span></span><br/><span class=\"line\">  <span class=\"keyword\">local</span> o = {}             <span class=\"comment\">-- 1</span></span><br/><span class=\"line\">  <span class=\"built_in\">setmetatable</span>(o, Son)     <span class=\"comment\">-- 2</span></span><br/><span class=\"line\">  <span class=\"keyword\">return</span> o</span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"built_in\">setmetatable</span>(Son, Father)  <span class=\"comment\">-- 3</span></span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Father:printf</span><span class=\"params\">()</span></span></span><br/><span class=\"line\">  <span class=\"built_in\">print</span>(<span class=\"string\">&#34;Father printf&#34;</span>)</span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"comment\">--[[                      -- 注释1</span></span><br/><span class=\"line\"><span class=\"comment\">function Son:printf()</span></span><br/><span class=\"line\"><span class=\"comment\">  print(&#34;Son printf&#34;)</span></span><br/><span class=\"line\"><span class=\"comment\">end</span></span><br/><span class=\"line\"><span class=\"comment\">--]]</span></span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"keyword\">local</span> x = Son.new()</span><br/><span class=\"line\">x:printf()</span><br/><span class=\"line\"><span class=\"comment\">-- 解释下这个x:printf()的调用过程</span></span><br/><span class=\"line\"><span class=\"comment\">-- 1. 首先x是个table</span></span><br/><span class=\"line\"><span class=\"comment\">-- 2. table中没有printf函数就会去Son中找 如果注释1打开就会调用Son:printf()</span></span><br/><span class=\"line\"><span class=\"comment\">-- 3. Son中也没有printf函数就要去Father中找</span></span><br/></pre></td></tr></tbody></table></figure>\n</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"end\"><a href=\"#end\" class=\"headerlink\" title=\"end\"></a>end</h3><p>ok今天就学到这里了，老夫要去健身房lu铁了，感觉lua可能会用的不是很爽</p>","text":"lua特性开源，轻量级，c语言编写实现，实现面向对象有点绕，执行效率高 lua开发环境 linux 123456789101112131415-- 下载lua包、解压wget -c http://www.lua.org/ftp/lua-5.3.0.tar.gztar zxvf l...","link":"","photos":[],"count_time":{"symbolsCount":"4k","symbolsTime":"4 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#lua%E7%89%B9%E6%80%A7\"><span class=\"toc-text\">lua特性</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#lua%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83\"><span class=\"toc-text\">lua开发环境</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95\"><span class=\"toc-text\">基本语法</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#table%E5%AE%9E%E7%8E%B0%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">table实现面向对象</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#end\"><span class=\"toc-text\">end</span></a></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"基于Lua的State Pattern","uid":"5d95e81216fcb87d643bd992efc78ed7","slug":"zl/2016-01-01-844_基于Lua的State Pattern","date":"2024-04-03T03:47:36.098Z","updated":"2024-04-03T03:47:36.100Z","comments":true,"path":"api/articles/zl/2016-01-01-844_基于Lua的State Pattern.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"代码来自于最近写的Pacman，更多请查看 – https://github.com/bennychen/Moai-based-Pacman class.lua实现了在Lua中创建类的模拟，非常方便。class.lua参考自http://lua-users.org/wiki/Si...","link":"","photos":[],"count_time":{"symbolsCount":"4.1k","symbolsTime":"4 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Lua学习笔记——时间和日期","uid":"3c6c860a219c59b8db2e893adbe18723","slug":"zl/2016-01-01-843_Lua学习笔记——时间和日期","date":"2024-04-03T03:47:36.094Z","updated":"2024-04-03T03:47:36.094Z","comments":true,"path":"api/articles/zl/2016-01-01-843_Lua学习笔记——时间和日期.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"思维导图首先我们看一张思维导图： 备注： 1. 纪元：一个固定日期，在 POSIX 和 Windows 平台中这个固定日期是 Jan 01, 1970, 00:00 UTC。 2. 日期表：在 lua 中表示时间的一种方式，这个表具有以下几个重要字段：year、month、day...","link":"","photos":[],"count_time":{"symbolsCount":"1.4k","symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}