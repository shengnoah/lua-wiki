{"title":"SLua for Unity简要技术原理","uid":"a8f379394d3cb6faff62e23fa8836f70","slug":"zl/2016-01-01-636_SLua for Unity简要技术原理","date":"2024-04-03T03:47:35.861Z","updated":"2024-04-03T03:47:35.861Z","comments":true,"path":"api/articles/zl/2016-01-01-636_SLua for Unity简要技术原理.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<p>动态更新对于游戏来说非常重要，它可以极大缩短bug修复、新功能添加的时间成本，同时强制版本更新造成的用户流失也是一大痛点。对于Unity游戏开发者来说，Slua是一个不错的选择。</p>\n<p>这里简要介绍一下Slua的技术原理，Slua Github的项目主页好像没有提及，一些关键代码看起来也都集成到dll文件中了，很难从源码找出一些原理方面的线索。用一个完全不清楚原理的库感觉很慌啊，挖掘了一些有意义的信息，基本可以解释Slua的技术原理，这里罗列一下。</p>","text":"动态更新对于游戏来说非常重要，它可以极大缩短bug修复、新功能添加的时间成本，同时强制版本更新造成的用户流失也是一大痛点。对于Unity游戏开发者来说，Slua是一个不错的选择。 这里简要介绍一下Slua的技术原理，Slua Github的项目主页好像没有提及，一些关键代码看起来...","link":"","photos":[],"count_time":{"symbolsCount":223,"symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Lua","uid":"15b0cdc6d03f6c3f6bf8d3a7ff197317","slug":"zl/2016-01-01-635_Lua ","date":"2024-04-03T03:47:35.861Z","updated":"2024-04-03T03:47:35.861Z","comments":true,"path":"api/articles/zl/2016-01-01-635_Lua .json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":" 元表（metatable） 是 Lua 中的重要概念，每一个 table 都可以加上 metatable，以改变相应的 table 的行为。 Lua 中不能改变其他类型的元表（除了使用调试库），必须使用C API才能做到。 元表也是普通的table，定义了原始值在某些特定操作下...","link":"","photos":[],"count_time":{"symbolsCount":328,"symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Lua之 loadfile ,dofile, loadstring，require","uid":"f40c013476c88f6f6476f708dff98be8","slug":"zl/2016-01-01-637_Lua之 loadfile ,dofile, loadstring，require","date":"2024-04-03T03:47:35.861Z","updated":"2024-04-03T03:47:35.861Z","comments":true,"path":"api/articles/zl/2016-01-01-637_Lua之 loadfile ,dofile, loadstring，require.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":" loadfile——只编译，不运行1.功能：载入文件但不执行代码块，对于相同的文件每次都会执行。只是编译代码，然后将编译结果作为一个函数返回 2.调用：loadfile(&#34;filename&#34;) 3.错误处理：不引发错误，只返回错误值但不处理错误,即返回nil和错...","link":"","photos":[],"count_time":{"symbolsCount":"1.1k","symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}