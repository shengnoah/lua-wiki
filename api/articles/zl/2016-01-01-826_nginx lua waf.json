{"title":"nginx lua waf","uid":"b7629b20ac900d8f1fafabf105306db6","slug":"zl/2016-01-01-826_nginx lua waf","date":"2024-04-03T03:47:36.073Z","updated":"2024-04-03T03:47:36.073Z","comments":true,"path":"api/articles/zl/2016-01-01-826_nginx lua waf.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<h2 id=\"ngx-lua-waf是一个基于lua-nginx-module-openresty-的web应用防火墙\"><a href=\"#ngx-lua-waf是一个基于lua-nginx-module-openresty-的web应用防火墙\" class=\"headerlink\" title=\"ngx_lua_waf是一个基于lua-nginx-module(openresty)的web应用防火墙\"></a><a href=\"https://github.com/loveshell/ngx_lua_waf\" target=\"_blank\" rel=\"external noopener noreferrer\">ngx_lua_waf是一个基于lua-nginx-module(openresty)的web应用防火墙</a></h2><p>###用途：</p>\n<pre><code>防止sql注入，本地包含，部分溢出，fuzzing测试，xss,SSRF等web攻击\n防止svn/备份之类文件泄漏\n防止ApacheBench之类压力测试工具的攻击\n屏蔽常见的扫描黑客工具，扫描器\n屏蔽异常的网络请求\n屏蔽图片附件类目录php执行权限\n防止webshell上传\n</code></pre><p>###推荐安装:</p>\n<p>推荐使用lujit2.1做lua支持</p>\n<p>ngx_lua如果是0.9.2以上版本，建议正则过滤函数改为ngx.re.find，匹配效率会提高三倍左右。</p>\n<p>###使用说明：</p>\n<p>nginx安装路径假设为:/usr/local/nginx/conf/</p>\n<p>把ngx_lua_waf下载到conf目录下,解压命名为waf</p>\n<p>在nginx.conf的http段添加</p>\n<pre><code>lua_package_path &#34;/usr/local/nginx/conf/waf/?.lua&#34;;\nlua_shared_dict limit 10m;\ninit_by_lua_file  /usr/local/nginx/conf/waf/init.lua; \naccess_by_lua_file /usr/local/nginx/conf/waf/waf.lua;\n</code></pre><p>配置config.lua里的waf规则目录(一般在waf/conf/目录下)</p>\n<pre><code>RulePath = &#34;/usr/local/nginx/conf/waf/wafconf/&#34;\n</code></pre><p>绝对路径如有变动，需对应修改</p>\n<p>然后重启nginx即可</p>\n<p>###配置文件详细说明：</p>\n<pre><code>RulePath = &#34;/usr/local/nginx/conf/waf/wafconf/&#34;\n--规则存放目录\nattacklog = &#34;off&#34;\n--是否开启攻击信息记录，需要配置logdir\nlogdir = &#34;/usr/local/nginx/logs/hack/&#34;\n--log存储目录，该目录需要用户自己新建，切需要nginx用户的可写权限\nUrlDeny=&#34;on&#34;\n--是否拦截url访问\nRedirect=&#34;on&#34;\n--是否拦截后重定向\nCookieMatch = &#34;on&#34;\n--是否拦截cookie攻击\npostMatch = &#34;on&#34; \n--是否拦截post攻击\nwhiteModule = &#34;on&#34; \n--是否开启URL白名单\nblack_fileExt=&#123;&#34;php&#34;,&#34;jsp&#34;&#125;\n--填写不允许上传文件后缀类型\nipWhitelist=&#123;&#34;127.0.0.1&#34;&#125;\n--ip白名单，多个ip用逗号分隔\nipBlocklist=&#123;&#34;1.0.0.1&#34;&#125;\n--ip黑名单，多个ip用逗号分隔\nCCDeny=&#34;on&#34;\n--是否开启拦截cc攻击(需要nginx.conf的http段增加lua_shared_dict limit 10m;)\nCCrate = &#34;100/60&#34;\n--设置cc攻击频率，单位为秒.\n--默认1分钟同一个IP只能请求同一个地址100次\nhtml=[[Please go away~~]]\n--警告内容,可在中括号内自定义\n备注:不要乱动双引号，区分大小写\n</code></pre><p>###检查规则是否生效</p>\n<p>部署完毕可以尝试如下命令：        </p>\n<pre><code>curl http://xxxx/test.php?id=../etc/passwd\n返回&#34;Please go away~~&#34;字样，说明规则生效。\n</code></pre><p>注意:默认，本机在白名单不过滤，可自行调整config.lua配置</p>\n<p>###效果图如下：</p>\n<p><img src=\"https://himle.github.io/images/nginx-lua-waf.png\" alt=\"sec\"/></p>\n<p>###规则更新：</p>\n<p>考虑到正则的缓存问题，动态规则会影响性能，所以暂没用共享内存字典和redis之类东西做动态管理。</p>\n<p>规则更新可以把规则文件放置到其他服务器，通过crontab任务定时下载来更新规则，nginx reload即可生效。以保障ngx lua waf的高性能。</p>\n<p>只记录过滤日志，不开启过滤，在代码里在check前面加上–注释即可，如果需要过滤，反之</p>\n<p>###一些说明：</p>\n<pre><code>过滤规则在wafconf下，可根据需求自行调整，每条规则需换行,或者用|分割\n<pre><code>args里面的规则get参数进行过滤的\nurl是只在get请求url过滤的规则        \npost是只在post请求过滤的规则        \nwhitelist是白名单，里面的url匹配到不做过滤        \nuser-agent是对user-agent的过滤规则\n</code></pre>\n<p>默认开启了get和post过滤，需要开启cookie过滤的，编辑waf.lua取消部分–注释即可</p>\n<p>日志文件名称格式如下:虚拟主机名_sec.log<br />\n</code></pre></p>\n","text":"ngx_lua_waf是一个基于lua-nginx-module(openresty)的web应用防火墙###用途： 防止sql注入，本地包含，部分溢出，fuzzing测试，xss,SSRF等web攻击 防止svn/备份之类文件泄漏 防止ApacheBench之类压力测试工具的攻...","link":"","photos":[],"count_time":{"symbolsCount":"2.1k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#ngx-lua-waf%E6%98%AF%E4%B8%80%E4%B8%AA%E5%9F%BA%E4%BA%8Elua-nginx-module-openresty-%E7%9A%84web%E5%BA%94%E7%94%A8%E9%98%B2%E7%81%AB%E5%A2%99\"><span class=\"toc-text\">ngx_lua_waf是一个基于lua-nginx-module(openresty)的web应用防火墙</span></a></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Lua 初步学习","uid":"0516f1c2b440e6827cf564d329f9637c","slug":"zl/2016-01-01-824_Lua 初步学习","date":"2024-04-03T03:47:36.073Z","updated":"2024-04-03T03:47:36.073Z","comments":true,"path":"api/articles/zl/2016-01-01-824_Lua 初步学习.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"1 所谓的“交互式编程” Lua提供了交互式编程模式,我们可以在命令行中输入程序并立即查看效果。 Lua 交互式编程模式可以通过命令 lua -i 或 lua 来启用 2 所谓的“脚本式编程” 我们将代码写入.lua文件，然后执行，就是脚本式编程。 eg: WangBingdeM...","link":"","photos":[],"count_time":{"symbolsCount":680,"symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"lua面向对象学习","uid":"670b7a60e57dc8637ace9a6fd82af9ef","slug":"zl/2016-01-01-827_lua面向对象学习","date":"2024-04-03T03:47:36.073Z","updated":"2024-04-03T03:47:36.074Z","comments":true,"path":"api/articles/zl/2016-01-01-827_lua面向对象学习.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":" 元表和元方法 在Lua中，每个值都有一个元表，table和userdata类型的每个变量都可以有各自独立的元表， 其他类型的值则共享其类型所属的单一元表。 基本的metatable 创建新的table时不会创建元表 getmetatable(table) 获取table或者us...","link":"","photos":[],"count_time":{"symbolsCount":"4.7k","symbolsTime":"4 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}