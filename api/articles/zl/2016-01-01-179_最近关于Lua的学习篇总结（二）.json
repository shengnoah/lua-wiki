{"title":"最近关于Lua的学习篇总结（二）","uid":"8005bd8aaf530dae62b9133c96b42d41","slug":"zl/2016-01-01-179_最近关于Lua的学习篇总结（二）","date":"2024-04-03T03:47:33.064Z","updated":"2024-04-03T03:47:33.065Z","comments":true,"path":"api/articles/zl/2016-01-01-179_最近关于Lua的学习篇总结（二）.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<div id=\"toc\" class=\"toc-article\">\n\t\t\t<strong class=\"toc-title\">Contents</strong>\n<pre><code>\t&lt;/div&gt;\n\t\n\t&lt;h2 id=&quot;1-Lua的介绍&quot;&gt;&lt;a href=&quot;#1-Lua的介绍&quot; class=&quot;headerlink&quot; title=&quot;1.Lua的介绍&quot;&gt;&lt;/a&gt;1.Lua的介绍&lt;/h2&gt;&lt;p&gt;Lua 是一个小巧的脚本语言。是巴西里约热内卢天主教大学（Pontifical Catholic University of Rio de Janeiro）里的一个研究小组，由Roberto Ierusalimschy、Waldemar Celes 和 Luiz Henrique de Figueiredo所组成并于1993年开发。 其设计目的是为了嵌入应用程序中，从而为应用程序提供灵活的扩展和定制功能。Lua由标准C编写而成，几乎在所有操作系统和平台上都可以编译，运行。Lua并没有提供强大的库，这是由它的定位决定的。所以Lua不适合作为开发独立应用程序的语言。Lua 有一个同时进行的JIT项目，提供在特定平台上的即时编译功能。&lt;/p&gt;\n</code></pre>\n<h2 id=\"2-使用lua\"><a href=\"#2-使用lua\" class=\"headerlink\" title=\"2.使用lua\"></a>2.使用lua</h2><p>自行上网下载编写的lua脚本的东西吧</p>\n<h2 id=\"3-编程程序\"><a href=\"#3-编程程序\" class=\"headerlink\" title=\"3.编程程序\"></a>3.编程程序</h2><h3 id=\"3-1永恒的hello-world\"><a href=\"#3-1永恒的hello-world\" class=\"headerlink\" title=\"3.1永恒的hello world\"></a>3.1永恒的hello world</h3><p>print(“Hello World”)</p>\n<h3 id=\"3-2特殊的小状况\"><a href=\"#3-2特殊的小状况\" class=\"headerlink\" title=\"3.2特殊的小状况\"></a>3.2特殊的小状况</h3><p>与其他语言不一样的地方<br/>1.字符串随意用单引号或者多引号<br/>2.可以没有分号</p>\n<h3 id=\"3-3变量\"><a href=\"#3-3变量\" class=\"headerlink\" title=\"3.3变量\"></a>3.3变量</h3><p>在Lua中定义变量是没有类型的，根据存储什么数据，来决定是什么类型<br/>    变量的命名不能以数字开头<br/>    尽量避免下划线加大写字母开头，这种格式Lua自身保留<br/>    推荐使用C#中的命名规范和驼峰命名</p>\n<h3 id=\"3-3-1变量类型\"><a href=\"#3-3-1变量类型\" class=\"headerlink\" title=\"3.3.1变量类型\"></a>3.3.1变量类型</h3><p>1，nil表示空数据，等同于null<br/>2，boolean 布尔类型，存储true和false<br/>3，string 字符串类型，字符串可以用双引号也可以使用单引号表示<br/>4，number小数类型（Lua中没有整数类型）<br/>5，table表类型<br/>    myTable = {34,,34,2,342,4}<br/>    myTable[3]<br/>我们可以使用type()来取得一个变量的类型</p>\n<h3 id=\"3-3-2特殊的地方\"><a href=\"#3-3-2特殊的地方\" class=\"headerlink\" title=\"3.3.2特殊的地方\"></a>3.3.2特殊的地方</h3><p>默认定义的变量都是全局的，定义局部变量需要在前面加一个local；<br/>在代码块中声明的局部变量，当代码块运行结束的时候，这个变量就会被释放；</p>\n<h3 id=\"3-3-3运算符\"><a href=\"#3-3-3运算符\" class=\"headerlink\" title=\"3.3.3运算符\"></a>3.3.3运算符</h3><p>与其他语言一样，and or not。然而并没有特殊符号表示，就是英文</p>\n<h3 id=\"3-3-4流程控制语句\"><a href=\"#3-3-4流程控制语句\" class=\"headerlink\" title=\"3.3.4流程控制语句\"></a>3.3.4流程控制语句</h3><h4 id=\"3-3-4-1-if语句\"><a href=\"#3-3-4-1-if语句\" class=\"headerlink\" title=\"3.3.4.1 if语句\"></a>3.3.4.1 if语句</h4><pre><code>1，    if [condition] then\nend\n<p>2，    if [condition] then<br />\nelse<br />\nend</p>\n<p>3，    if [condition] then<br />\nelseif [condition]<br />\nelse<br />\nend<br />\n</code></pre><h3 id=\"3-3-5循环语句\"><a href=\"#3-3-5循环语句\" class=\"headerlink\" title=\"3.3.5循环语句\"></a>3.3.5循环语句</h3><h4 id=\"3-3-5-1-while语句\"><a href=\"#3-3-5-1-while语句\" class=\"headerlink\" title=\"3.3.5.1 while语句\"></a>3.3.5.1 while语句</h4><pre><code>while [condition] do<br />\nend<br />\n</code></pre><h4 id=\"3-3-5-2-repeat语句\"><a href=\"#3-3-5-2-repeat语句\" class=\"headerlink\" title=\"3.3.5.2 repeat语句\"></a>3.3.5.2 repeat语句</h4><pre><code>repeat<br />\n[code to execute]<br />\nuntil [condition]<br />\n</code></pre><h4 id=\"3-3-5-3-for循环语句\"><a href=\"#3-3-5-3-for循环语句\" class=\"headerlink\" title=\"3.3.5.3 for循环语句\"></a>3.3.5.3 for循环语句</h4><pre><code>for index = [start],[end] do<br />\n[code to execute]<br />\nend<br />\n</code></pre><p>循环语句while就是while，repeat相当于do while，for循环入这个，但是还有另外一种对于表的操作的用法，利用的<br/>    for k,v in (ipairs)tablename then<br/>    print(k,v)<br/>    end</p></p>\n<h3 id=\"3-3-6函数\"><a href=\"#3-3-6函数\" class=\"headerlink\" title=\"3.3.6函数\"></a>3.3.6函数</h3><pre><code>function [function name](param1,param2)\n    [function code]\nend\n</code></pre><h3 id=\"3-3-7lua内置函数\"><a href=\"#3-3-7lua内置函数\" class=\"headerlink\" title=\"3.3.7lua内置函数\"></a>3.3.7lua内置函数</h3><p>上网可以自由查文档即可</p>\n<h3 id=\"3-3-8table表（重点，重中之重）\"><a href=\"#3-3-8table表（重点，重中之重）\" class=\"headerlink\" title=\"3.3.8table表（重点，重中之重）\"></a>3.3.8table表（重点，重中之重）</h3><p>在Lua中的table类似C#中的字典，其实就是一个 key-value键值对的数据结构。但是也可以类似于C#的数组</p>\n<p>1，table的创建<br/>    myTable = {}<br/>    表名后面使用{}赋值，表示一个空的表</p>\n<p>2，table的赋值</p>\n<pre><code>myTable[3]=34  当键是一个数字的时候的赋值方式\nmyTable[&#34;name&#34;]=&#34;seven&#34; 当键是一个字符串的赋值方式\nmyTable.name = &#34;seven&#34;当键是一个字符串的赋值方式\n</code></pre><p>3，table的访问</p>\n<pre><code>myTable[3]  当键是数字的时候，只有这一种访问方式\nmyTable.name 当键是字符串的时候有两种访问方式\nmyTable[&#34;name&#34;]\n</code></pre><p>4，table的第二种创建方式</p>\n<pre><code>myTable = &#123;name=&#34;seven&#34;,age=22,isMan = false&#125;\n（表创建之后依然可以添加数据）\n数据访问\n    myTable.name\n    myTable[&#34;name&#34;]\n</code></pre><p>5，table的第三种方式(类似数组的使用)<br/>    myTable = {34,34,34,3,4,”seven”}<br/>    当没有键的时候，编译器会默认给每一个值，添加一个数字的键，该键从1开始<br/>表的遍历分为两种<br/>    1,如果是只有数字键，并且是连续的可以使用下面的遍历</p>\n<pre><code>for index = 1,table.getn(myTable) do\n    [code to execute]\nend\n<p>2，所有的表都可以通过下面的方式遍历</p>\n<p>for index,value in pairs(myNames) do<br />\nprint(index,value)<br />\nend<br />\n</code></pre><h3 id=\"3-3-9通过表来实现面向对象\"><a href=\"#3-3-9通过表来实现面向对象\" class=\"headerlink\" title=\"3.3.9通过表来实现面向对象\"></a>3.3.9通过表来实现面向对象</h3><pre><code>myTable=&#123;&#125;  申明对象<br />\nlocal this = myTable声明this关键字代表当前对象<br />\n</code></pre><p>–定义并声明对象中的属性<br/>    myTable.name=”seven”<br/>    myTable.age = 22<br/>–定义并声明对象中的方法<br/>    myTable.function = function ()<br/>    [code to execute]<br/>    end<br/>    function myTable.function ()<br/>    [code to execute]<br/>    end</p></p>\n<h3 id=\"3-3-10元表\"><a href=\"#3-3-10元表\" class=\"headerlink\" title=\"3.3.10元表\"></a>3.3.10元表</h3><p>在 Lua table 中我们可以访问对应的key来得到value值，但是却无法对两个 table 进行操作。<br/>因此 Lua 提供了元表(Metatable)，允许我们改变table的行为，每个行为关联了对应的元方法。<br/>给一个table关联元表 就是当你访问的这个table所访问的值不存在的时候 会返回默认的元表里的值</p>\n<p>可以理解成面向对象里的继承</p>\n<p>元表就是它的父类 如果本身有值就用本身的值 没值就用父类的值</p>\n<p>1.在表中查找，如果找到，返回该元素，找不到则继续</p>\n<p>2.判断该表是否有元表（操作指南），如果没有元表，返回nil，有元表则继续</p>\n<p>3.判断元表（操作指南）中有没有关于索引失败的指南（即<strong>index方法），如果没有（即</strong>index方法为nil），则返回nil；如果<strong>index方法是一个表，则重复1、2、3；如果</strong>index方法是一个函数，则返回该函数的返回值<br/>以上均为自我学习作用</p>\n<p>参考若干人士。</p>","text":" Contents &lt;/div&gt; &lt;h2 id=&quot;1-Lua的介绍&quot;&gt;&lt;a href=&quot;#1-Lua的介绍&quot; class=&quot;headerlink&quot; title=&quot;1.Lua的介绍&...","link":"","photos":[],"count_time":{"symbolsCount":"3.1k","symbolsTime":"3 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-%E4%BD%BF%E7%94%A8lua\"><span class=\"toc-text\">2.使用lua</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-%E7%BC%96%E7%A8%8B%E7%A8%8B%E5%BA%8F\"><span class=\"toc-text\">3.编程程序</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-1%E6%B0%B8%E6%81%92%E7%9A%84hello-world\"><span class=\"toc-text\">3.1永恒的hello world</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-2%E7%89%B9%E6%AE%8A%E7%9A%84%E5%B0%8F%E7%8A%B6%E5%86%B5\"><span class=\"toc-text\">3.2特殊的小状况</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-3%E5%8F%98%E9%87%8F\"><span class=\"toc-text\">3.3变量</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-3-1%E5%8F%98%E9%87%8F%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">3.3.1变量类型</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-3-2%E7%89%B9%E6%AE%8A%E7%9A%84%E5%9C%B0%E6%96%B9\"><span class=\"toc-text\">3.3.2特殊的地方</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-3-3%E8%BF%90%E7%AE%97%E7%AC%A6\"><span class=\"toc-text\">3.3.3运算符</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-3-4%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5\"><span class=\"toc-text\">3.3.4流程控制语句</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-3-4-1-if%E8%AF%AD%E5%8F%A5\"><span class=\"toc-text\">3.3.4.1 if语句</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-3-5%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5\"><span class=\"toc-text\">3.3.5循环语句</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-3-5-1-while%E8%AF%AD%E5%8F%A5\"><span class=\"toc-text\">3.3.5.1 while语句</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-3-5-2-repeat%E8%AF%AD%E5%8F%A5\"><span class=\"toc-text\">3.3.5.2 repeat语句</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-3-5-3-for%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5\"><span class=\"toc-text\">3.3.5.3 for循环语句</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-3-6%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">3.3.6函数</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-3-7lua%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">3.3.7lua内置函数</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-3-8table%E8%A1%A8%EF%BC%88%E9%87%8D%E7%82%B9%EF%BC%8C%E9%87%8D%E4%B8%AD%E4%B9%8B%E9%87%8D%EF%BC%89\"><span class=\"toc-text\">3.3.8table表（重点，重中之重）</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-3-9%E9%80%9A%E8%BF%87%E8%A1%A8%E6%9D%A5%E5%AE%9E%E7%8E%B0%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">3.3.9通过表来实现面向对象</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-3-10%E5%85%83%E8%A1%A8\"><span class=\"toc-text\">3.3.10元表</span></a></li></ol></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Lua程序设计第4版","uid":"a9bc700030e302b2b9bb7039bde99630","slug":"zl/2016-01-01-178_Lua程序设计第4版","date":"2024-04-03T03:47:33.064Z","updated":"2024-04-03T03:47:33.064Z","comments":true,"path":"api/articles/zl/2016-01-01-178_Lua程序设计第4版.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"Lua语言入门三目运算12((a and b)or c)或(a and b or c) 惯用写法 x=x or v12--等价于if not x then x = v end type(nil) == nil 疑惑返回是string类型，用nil做比较应用”nil” 1234&g...","link":"","photos":[],"count_time":{"symbolsCount":"1.7k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Unity常见lua解决方案性能比较","uid":"e97d1fc46b73c2427533dd2e3e12edf2","slug":"zl/2016-01-01-175_Unity常见lua解决方案性能比较","date":"2024-04-03T03:47:33.063Z","updated":"2024-04-03T03:47:33.063Z","comments":true,"path":"api/articles/zl/2016-01-01-175_Unity常见lua解决方案性能比较.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"之前由于项目需要，我比较了下Unity常见的几个lua解决方案；最近应鑫哥约稿，整理了一下。Unity不支持热更新这事情一直是一个谜一样的痛点，特别是在我第一个项目上线之后，发现每次更新代价太大了…可惜官方Roadmap上迟迟没有出现这个功能。昨天在群里还看到琨少说天下直接热更新...","link":"","photos":[],"count_time":{"symbolsCount":"1.3k","symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}