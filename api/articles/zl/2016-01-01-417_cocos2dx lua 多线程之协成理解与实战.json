{"title":"cocos2dx lua 多线程之协成理解与实战","uid":"f51b7c82932d35bf6007762646b46c8a","slug":"zl/2016-01-01-417_cocos2dx lua 多线程之协成理解与实战","date":"2024-04-03T03:47:35.706Z","updated":"2024-04-03T03:47:35.706Z","comments":true,"path":"api/articles/zl/2016-01-01-417_cocos2dx lua 多线程之协成理解与实战.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<p>lua是不支持多线程的，一般都是协同来调用的。但是lua却可以调用c函数。于是，我们通过lua调用C接口起一个线程，实现lua多线程的使用。子线程再调用lua中的function。就可以通过子线程获取一些数据。单纯的人儿，以为一切都是美好的。</p>\n<blockquote>\n<p>问题就出现C调用lua中的function, 将数据传给lua。</p>\n</blockquote>\n<h3 id=\"lua的运行\"><a href=\"#lua的运行\" class=\"headerlink\" title=\"lua的运行\"></a>lua的运行</h3><p>首先我们需要知道，lua是解释性语言。是在执行的时候才分配堆栈空间。通过查看lua的源码，我们可以知道，在main函数的开端，lua就创建了一个全局的L（状态机），这个状态机可以说是lua的核心所在。它保存了栈的地址。</p>\n<p>当执行lua脚本时，lua会将全局的变量和function记录在堆中，当执行代码段是，就会将一些局部变量和参数压到栈中进行处理。这一切和c语言的解析是一样的。</p>\n<blockquote>\n<p>我们知道C也是可以调用lua的function的，一般的操作是：</p>\n<blockquote>\n<ol>\n<li>在lua中调用C函数，将需要注册的function，作为参数传给C函数</li>\n<li>C将获取到的function和L（状态机）进行保存。</li>\n<li>C通过向L压栈，将function和一些参数压入。通过lua_call函数进行调用。</li>\n</ol>\n</blockquote>\n</blockquote>\n<blockquote>\n<p>根据上述的解释，我们可以知道。其中C和lua通过通信的是L（状态机）。压入栈之后，通过lua_call,就会进入lua的状态中。lua会处理栈中的内容。</p>\n</blockquote>\n<h3 id=\"问题所在\"><a href=\"#问题所在\" class=\"headerlink\" title=\"问题所在\"></a>问题所在</h3><p>核心问题就是C调用lua的L和lua的L是同一个L。这样就出现一个问题，当主线程的lua脚本才进行压栈操作，而子线程中也进行压栈操作，那岂不是乱了套？在一开始就不应该成功的，为什么会这样呢？通过查看代码，发现lua对进行堆操作的函数中，都加上了线程锁。当主线程进行栈操作时，子线程是不可以对栈进行操作的。</p>\n<p>也就是说，子线程理论上是不会运行的，会卡在栈操作的函数那里。</p>\n<blockquote>\n<p>但是为什么我们在运行的时候并没有出现这个现象呢？通过代码的查询，发现是主线程中有sleep函数，并且子线程中有阻塞，所以能够在几个线程中切换。 如果主线程的while循环中没有sleep，那么就会很快的出现问题。因此，lua从底层就是不支持多线程的。</p>\n</blockquote>\n<h3 id=\"为什么使用协同\"><a href=\"#为什么使用协同\" class=\"headerlink\" title=\"为什么使用协同\"></a>为什么使用协同</h3><p>如果你搜索lua多线程，大多数都会写搜索到协同程序。</p>\n<pre><code>每一个协程有自己的堆栈，自己的局部变量，可以通过yield-resume实现在协程间的切换。不同之处是：Lua协程是非抢占式的多线程，必须手动在不同的协程间切换，且同一时刻只能有一个协程在运行。并且Lua中的协程无法在外部将其停止，而且有可能导致程序阻塞。\n</code></pre><p>正如上诉，协同拥有自己的堆栈，那是用来避免和其他堆栈冲突的。但是两者之间想要通信，就不能通过栈了。因为栈的不同，压入的数据在另一端是无法接收到的。</p>\n<p>但是，我们可以通过一个全局变量进行通信。比如，子线程通过协同的堆栈进行调用lua里面的function。在function中获取传入的值，将它赋值给一个全局变量。那么主线程也能够调用了。</p>\n<h3 id=\"线程与协同\"><a href=\"#线程与协同\" class=\"headerlink\" title=\"线程与协同\"></a>线程与协同</h3><p>协同程序与线程thread差不多，也就是一条执行序列，拥有自己独立的栈、局部变量和命令指针，同时又与其他协同程序共享全局变量和其他大部分东西。可以通过yield-resume实现在协程间的切换。</p>\n<blockquote>\n<p>从概念上讲线程与协同程序的主要区别在于，一个具有多个线程的程序可以同时运行几个线程，而协同程序却需要彼此协作的运行。也就是说多个协同程序在任意时刻只能运行一个协同程序，只有当正在运行的协同程序显式的要求挂起时，它的执行才会暂停。</p>\n</blockquote>\n<ul>\n<li><p>总结区别：</p>\n<ul>\n<li>不同之处是：Lua协程是非抢占式的多线程，必须手动在不同的协程间切换，且同一时刻只能有一个协程在运行。并且Lua中的协程无法在外部将其停止，而且有可能导致程序阻塞。</li>\n</ul>\n</li>\n<li><p>关于更多区别和介绍，可以查看这里</p>\n<ul>\n<li><a href=\"https://www.cnblogs.com/work115/p/5620272.html\" target=\"_blank\" rel=\"noopener noreferrer\">https://www.cnblogs.com/work115/p/5620272.html</a></li>\n<li><a href=\"https://www.cnblogs.com/lxmhhy/p/6041001.html\" target=\"_blank\" rel=\"noopener noreferrer\">https://www.cnblogs.com/lxmhhy/p/6041001.html</a></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"协同程序coroutine\"><a href=\"#协同程序coroutine\" class=\"headerlink\" title=\"协同程序coroutine\"></a>协同程序coroutine</h3><p>Lua将所有关于协同程序的函数放置在一个名为“coroutine”的table中。</p>\n<ul>\n<li>1、coroutine.create创建一个thread类型的值表示新的协同程序，返回一个协同程序。</li>\n<li>2、coroutine.status检查协同程序的状态（挂起suspended、运行running、死亡dead、正常normal）。</li>\n<li>3、coroutine.resume启动或再次启动一个协同程序，并将其状态由挂起改为运行。</li>\n<li>4、coroutine.yield让一个协同程序挂起。</li>\n<li>5、coroutine.wrap同样创建一个新的协同程序，返回一个函数。</li>\n</ul>\n<blockquote>\n<p>注意coroutine的三个状态：<br/>suspended（挂起，协同刚创建完成时或者yield之后）、<br/>running（运行）、<br/>dead（函数走完后的状态，这时候不能再重新resume）。</p>\n</blockquote>\n<h5 id=\"创建协同程序：\"><a href=\"#创建协同程序：\" class=\"headerlink\" title=\"创建协同程序：\"></a>创建协同程序：</h5><p>create函数，接受一个函数值作为协同程序的执行内容，并返回一个协同程序。</p>\n<pre><code>function func( ... )\n print(&#34;iCocos&#34;)\n -- thread: 0x79f721d4\n -- [Finished in 0.0s]\nend\n<p>local  cor  = coroutine.create(func)<br />\nprint(cor)<br />\n</code></pre><h5 id=\"启动或再次启动一个协同程序：\"><a href=\"#启动或再次启动一个协同程序：\" class=\"headerlink\" title=\"启动或再次启动一个协同程序：\"></a>启动或再次启动一个协同程序：</h5><p>resume函数，接受一个协同程序及一个或多个参数用于值传递给协同程序。</p></p>\n<pre><code>function funcA(  _cor, ... )\n print(&#34;A: status_1&#34;,coroutine.status(_cor), ...)\n -- A: status_1  running 1   2   3\nend\nlocal corA = coroutine.create(funcA)\ncoroutine.resume(corA, corA, 1,2,3)\nprint(&#34;A: status_2&#34;, coroutine.status(corA))\n-- A: status_2   dead\n</code></pre><h5 id=\"resume-yield数据交换\"><a href=\"#resume-yield数据交换\" class=\"headerlink\" title=\"resume-yield数据交换\"></a>resume-yield数据交换</h5><p>Lua中协同的强大能力，还在于通过resume-yield来交换数据：</p>\n<ul>\n<li>（1）resume把参数传给程序（相当于函数的参数调用）；</li>\n<li>（2）数据由yield传递给resume;</li>\n<li>（3）resume的参数传递给yield；</li>\n<li>（4）协同代码结束时的返回值，也会传给resume</li>\n</ul>\n<p>协同中的参数传递形势很灵活，一定要注意区分，在启动coroutine的时候，resume的参数是传给主程序的；在唤醒yield的时候，参数是传递给yield的。\n 　　</p>\n<blockquote>\n<p>挂起协同程序：yield函数，让一个协同程序挂起，并等待下次恢复它的运行。它可以接受resume函数传递进来的所有参数。</p>\n</blockquote>\n<pre><code>-- resume  yield 参数传递\nfunction funcB( _cor )\nprint(&#34;A: status_1&#34;, coroutine.status(_cor))\nptint(&#34;A: status_2&#34;, coroutine.yield()) -- 挂起\nend\n<p>local funcB = coroutine.create(funcB) – wrap: wrap函数比create函数更易使用。它提供了一个对于协同程序编程实际所需的功能，即一个可以唤醒协同程序的函数。但也缺乏灵活性。无法检查wrap所创建的协同程序的状态，此外，也无法检测出运行时的错误。<br />\ncoroutine.resume(funcB, funcB) – 启动，没有yield，参数属于主函数<br />\nprint(&quot;A: status_3&quot;, coroutine.status(funcB))<br />\ncoroutine.resume(funcB, 1,2,3) – 从挂起出启动，并给yield传递参数<br />\nprint(&quot;A: status_4&quot;, coroutine.status(funcB))<br />\n</code></pre><p>Lua提供的是一种：”非对称的协同程序“。也就是说，Lua提供了两个函数来控制协同程序的执行，一个用于挂起执行，另一个用于恢复执行。而一些其他的语言则提供了”对称的协同程序“，其中只有一个函数用于转让协同程序之间的执行权。</p></p>\n<h3 id=\"管道与过滤器filter\"><a href=\"#管道与过滤器filter\" class=\"headerlink\" title=\"管道与过滤器filter\"></a>管道与过滤器filter</h3><p>关于协同程序的示例就是”生产者–消费者“的问题。其中涉及到两个函数，一个函数不断的产生值，另一个函数不断的消费这些值。</p>\n<blockquote>\n<p>当消费者需要一个新的值时，它唤醒生产者。生产者返回一个新值后停止运行，等待消费者的再次唤醒。这种设计称为”消费者驱动“。通过resume—yield 函数之间的值交换可以轻易的实现程序。</p>\n</blockquote>\n<p>过滤器filter，是一种位于生产者与消费者之间的处理功能，可以进行数据转换。它既是消费者又是生产者，它唤醒生产者促使其生产新值，然后又将变换后的值传递给消费者。</p>\n<pre><code>--管道与过滤器filter\n--生产者与消费者通过过滤器进行值传递\n--这种模式通过消费者驱动生产者进行产生。\n<p>–计数器函数<br />\nfunction getCount( x )<br />\nreturn function()<br />\nx=x+1<br />\nreturn x<br />\nend<br />\nend<br />\n–创建闭合计数器<br />\nlocal count = getCount(0)<br />\n–发送新值<br />\nfunction send(x)<br />\ncoroutine.yield(x)<br />\nend<br />\n–启动一个协同程序<br />\nfunction receive( pro )<br />\nlocal status,value = coroutine.resume( pro )<br />\nreturn value<br />\nend<br />\n–生产者<br />\nfunction producter()<br />\nwhile true do<br />\nsend( count() )<br />\nend<br />\nend<br />\n–过滤器，接受一个生产者<br />\nfunction filter( pro )<br />\nlocal x = 0<br />\nreturn function()<br />\nwhile true do<br />\nx = receive( pro )<br />\nsend(x)<br />\nend<br />\nend<br />\nend<br />\n–消费者，接受一个生产者协同程序及控制条件，控制条件防止死循环<br />\n–假设有100个消费者，驱动生产者来生产<br />\nfunction consumer( pro,num )<br />\nlocal x = 0<br />\nwhile x &lt; num do<br />\nx = receive( pro )<br />\nprint( x )<br />\nend<br />\nend</p>\n<p>local pro = coroutine.create( producter )<br />\nlocal fil = coroutine.create( filter( pro ) )<br />\nconsumer( fil,100 )</p>\n<p>print( &quot;消费者协同程序状态：&quot;,coroutine.status(pro) )<br />\nprint( &quot;生产者协同程序状态：&quot;,coroutine.status(fil) )<br />\n</code></pre><p>打印结果</p></p>\n<pre><code>1\n2\n3\n...\n-- 消费者协同程序状态：   suspended\n-- 生产者协同程序状态：   suspended\n</code></pre><ul>\n<li>推荐<ul>\n<li><a href=\"https://github.com/lichuang/Lua-Source-Internal/blob/master/doc/ch09-%E5%8D%8F%E7%A8%8B.md\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/lichuang/Lua-Source-Internal/blob/master/doc/ch09-%E5%8D%8F%E7%A8%8B.md</a></li>\n</ul>\n</li>\n</ul>","text":"lua是不支持多线程的，一般都是协同来调用的。但是lua却可以调用c函数。于是，我们通过lua调用C接口起一个线程，实现lua多线程的使用。子线程再调用lua中的function。就可以通过子线程获取一些数据。单纯的人儿，以为一切都是美好的。 问题就出现C调用lua中的funct...","link":"","photos":[],"count_time":{"symbolsCount":"4.8k","symbolsTime":"4 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#lua%E7%9A%84%E8%BF%90%E8%A1%8C\"><span class=\"toc-text\">lua的运行</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%97%AE%E9%A2%98%E6%89%80%E5%9C%A8\"><span class=\"toc-text\">问题所在</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BD%BF%E7%94%A8%E5%8D%8F%E5%90%8C\"><span class=\"toc-text\">为什么使用协同</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BA%BF%E7%A8%8B%E4%B8%8E%E5%8D%8F%E5%90%8C\"><span class=\"toc-text\">线程与协同</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8D%8F%E5%90%8C%E7%A8%8B%E5%BA%8Fcoroutine\"><span class=\"toc-text\">协同程序coroutine</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%88%9B%E5%BB%BA%E5%8D%8F%E5%90%8C%E7%A8%8B%E5%BA%8F%EF%BC%9A\"><span class=\"toc-text\">创建协同程序：</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%90%AF%E5%8A%A8%E6%88%96%E5%86%8D%E6%AC%A1%E5%90%AF%E5%8A%A8%E4%B8%80%E4%B8%AA%E5%8D%8F%E5%90%8C%E7%A8%8B%E5%BA%8F%EF%BC%9A\"><span class=\"toc-text\">启动或再次启动一个协同程序：</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#resume-yield%E6%95%B0%E6%8D%AE%E4%BA%A4%E6%8D%A2\"><span class=\"toc-text\">resume-yield数据交换</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%AE%A1%E9%81%93%E4%B8%8E%E8%BF%87%E6%BB%A4%E5%99%A8filter\"><span class=\"toc-text\">管道与过滤器filter</span></a></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"深入 Lua Garbage Collector(一)","uid":"ec48293e5d778225a61731bb54ded445","slug":"zl/2016-01-01-41_深入 Lua Garbage Collector(一)","date":"2024-04-03T03:47:35.710Z","updated":"2024-04-03T03:47:35.711Z","comments":true,"path":"api/articles/zl/2016-01-01-41_深入 Lua Garbage Collector(一).json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"看到一个 Bob Nystrom 写的 C 语言实现的 Garbage Collector 借着这个小程序顺便深入地了解一下Lua的垃圾回收机制 Garbage Collector算法小结这是之前做的一点小笔记： C Garbage Collector首先还是先来看看这个 C 的...","link":"","photos":[],"count_time":{"symbolsCount":"5.9k","symbolsTime":"5 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"lua通用数据类型","uid":"a671ff4d1c3c5fadfd8ab3ef296a465f","slug":"zl/2016-01-01-418_lua通用数据类型","date":"2024-04-03T03:47:35.706Z","updated":"2024-04-03T03:47:35.706Z","comments":true,"path":"api/articles/zl/2016-01-01-418_lua通用数据类型.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"TValue结构TValue这个结构体是Lua的通用结构体,,Lua中的所有的数据都可以使用这个结构体来表示.很容易想到,在面向对象中,这个结构体是一个基类,派生出来的都是其他的子类. TValue结构体内部有几个宏, 展开之后就是这样的: typedef struct lua_...","link":"","photos":[],"count_time":{"symbolsCount":"2.3k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}