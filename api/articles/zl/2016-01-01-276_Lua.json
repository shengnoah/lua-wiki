{"title":"Lua","uid":"15b0cdc6d03f6c3f6bf8d3a7ff197317","slug":"zl/2016-01-01-276_Lua","date":"2024-04-03T03:47:33.137Z","updated":"2024-04-03T03:47:33.137Z","comments":true,"path":"api/articles/zl/2016-01-01-276_Lua.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<pre><code>    &lt;p&gt;   我们要明确一个前提：Lua是动态型语言，变量是不需要类型定义，只需要为变量赋值。值可以存储在变量中，最为参数传递或结果返回。&lt;br&gt;一 基本类型&lt;br&gt;   Lua有8个基本类型：nil、boolean、number、string、userdata、function、thread、table&lt;/p&gt;\n</code></pre>\n<p>   1 nil<br>      表示一个无效的值，在条件表达式中相当于false<br>    2 boolean<br>       false和ture<br>    3 number<br>       表示双精度类型的实浮点数<br>    4 string<br>       字符串由一对双引号或单引号来表示<br>    5 function<br>       用C或者Lua写的函数<br>    6 userdata<br>       用来表示任意存储在变量中的C数据结构<br>    7 thread<br>       表示执行的独立线路，用于执行协同进程<br>    8 table<br>    Lua中的表（table）其实就是一个‘关联数组’（associative arrays），数组的索引可以是数字或者是字符串。在Lua中，table的创建是通过“构造表达式”来完成，例如最简单的表达式{}，用来创建一个空表。<br>二 简单例子<br>  1  我们可以使用type函数来测试指定变量或者值的类型</p>\n<pre><code>eg：\nWangBingdeMacBook-Pro:Hexo wangbing$ lua -i\nLua 5.3.3  Copyright (C) 1994-2016 Lua.org, PUC-Rio\n&gt; print(type(\"Lua test\"))\nstring\n&gt; print(type(100*1.2))\nnumber\n&gt; print(type(type))\nfunction\n&gt; print(type(false))\nboolean\n&gt;\n</code></pre><p>   2 nil<br>       对于全局变量和table，nil还意味着“删除”操作。给全局变量或者table表里的变量一个nil值,相当于把他们删掉。<br>       nil在进行比较的时候，需要加上双引号”:</p>\n<pre><code>eg：\n&gt;&gt; type(X)==nil\nstdin:9: unexpected symbol near '=='\n&gt; type(X)==\"nil\"\ntrue\n</code></pre><p>   3 boolean（布尔）<br>     Lua中把false和nil看做“假”，其他都为真</p>\n<p>  4 number(数字)<br>     Lua默认只有一种number类型，–double（双精度）类型<br>  5 string （字符串）<br>     用一堆双引号或者单引号表示，也可以用2个方括号“[[]]”来表示“一块”字符串</p>\n<pre><code>eg：\n&gt; string1 = \"SkyLigt 001\"\n&gt; string2 = 'SkyLigt 002'\n&gt; string3 = [[&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;a href=\"www.baidu.com/\"&gt;Lua学习&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;]]\n&gt; print(string1)\nSkyLigt 001\n&gt; print(string2)\nSkyLigt 002\n&gt; print(string3)\n&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;a href=\"www.baidu.com/\"&gt;Lua学习&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;\n&gt;\n</code></pre><p>  在对一个数字字符串进行算术操作时，Lua会尝试将这个数字字符串转成一个数字</p>\n<pre><code>eg:\n&gt; print(\"2\" + 10)\n12.0\n&gt;\n</code></pre><p>字符串的连接使用 ..表示</p>\n<pre><code>eg：\n&gt; print(\"zhangsan\"..\"is studying\"..\"Lua\")\nzhangsanis studyingLua\n&gt;\n</code></pre><p> 字符串的长度使用#表示</p>\n<pre><code>eg：\n&gt; stringLength = \"www.apple.com.hk\"\n&gt; print(#stringLength)\n16\n&gt;\n</code></pre><p>6 table (表)<br>   在Lua中，table的创建是通过”构造表达式”。最简单构造表达式是{}，用来创建一个空表。也可以在表里添加一些数据，直接初始化表</p>\n<pre><code>eg:\n-- 创建一个空的 table\nlocal tbl1 = &#123;&#125;\n<p>– 直接初始表<br />\nlocal tbl2 = &#123;“iOS Team”, “xxxxxx”, “Android Team”, “xxxx”&#125;<br />\n</code></pre><p>   Lua 中的表（table）其实是一个”关联数组”（associative arrays），数组的索引可以是数字或者是字符串.<br>   不同于其他语言的数组把 0 作为数组的初始索引，在 Lua 里表的默认初始索引一般以 1 开始。<br>   table 不会固定长度大小，有新数据添加时 table 长度会自动增长，没初始的 table 都是 nil</p></p>\n<p>7  function（函数）</p>\n<p>  Lua 中，函数是被看作是”第一类值（First-Class Value）”，函数可以存在变量里:<br>  function 可以以匿名函数（anonymous function）的方式通过参数传递</p>\n<p>  8 thread（线程）</p>\n<p>   在 Lua 里，最主要的线程是协同进程（coroutine）。它跟线程（thread）差不多，拥有自己独立的栈、局部变量和命令指针，可以跟其他协同进程共享全局变量和其他大部分东西。<br>  线程跟协程的区别：线程可以同时多个运行，而协程任意时刻只能运行一个，并且处于运行状态的协程只有被挂起（suspend）时才会暂停。</p>\n<p>  9 userdata（自定义类型）</p>\n<p>  userdata 是一种用户自定义数据，用于表示一种由应用进程或 C/C++ 语言库所创建的类型，可以将任意 C/C++ 的任意数据类型的数据（通常是 struct 和 指针）存储到 Lua 变量中调用</p>","text":" &lt;p&gt; 我们要明确一个前提：Lua是动态型语言，变量是不需要类型定义，只需要为变量赋值。值可以存储在变量中，最为参数传递或结果返回。&lt;br&gt;一 基本类型&lt;br&gt; Lua有8个基本类型：nil、boolean、number、string、use...","link":"","photos":[],"count_time":{"symbolsCount":"2.6k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Lua编程4之表达式和语句","uid":"673ce118e6bfa2b1bda337e3ee7a4f70","slug":"zl/2016-01-01-275_Lua编程4之表达式和语句","date":"2024-04-03T03:47:33.137Z","updated":"2024-04-03T03:47:33.137Z","comments":true,"path":"api/articles/zl/2016-01-01-275_Lua编程4之表达式和语句.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":" &lt;p&gt;思考并回答以下问题：&lt;br&gt;1.如何创建一个空表？&lt;/p&gt; 学习了数据类型和变量之后，就可以开始写代码的表达式，然后进一步写语句了。 算术操作符Lua支持常规算术操作符有：二元的“+”、“-”、“*”、“/”、“^”(指数)、“%”(取...","link":"","photos":[],"count_time":{"symbolsCount":"3.9k","symbolsTime":"4 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"lua使用教程","uid":"bb366af0997ddf8c4e47511bb8d73383","slug":"zl/2016-01-01-277_lua使用教程","date":"2024-04-03T03:47:33.137Z","updated":"2024-04-03T03:47:33.138Z","comments":true,"path":"api/articles/zl/2016-01-01-277_lua使用教程.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":" &lt;p&gt;闲来无趣，稍微看了一会lua…&lt;/p&gt; 运行1.命令行运行lua命令，在lua的shell中执行语句12345zhubenshuli@raspberrypi /var/www/lua_program $ luaLua 5.3.1 Copyright...","link":"","photos":[],"count_time":{"symbolsCount":"5.3k","symbolsTime":"5 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}