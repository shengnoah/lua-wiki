{"title":"lua全局变量的二三坑","uid":"f02e724eeb9e2b4681858f231488f1f5","slug":"zl/2016-01-01-755_lua全局变量的二三坑","date":"2024-04-03T03:47:36.002Z","updated":"2024-04-03T03:47:36.002Z","comments":true,"path":"api/articles/zl/2016-01-01-755_lua全局变量的二三坑.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<head>\n  <meta charset=\"utf-8\"/>\n  <title>lua全局变量的二三坑 | CloudKey Ocean</title>\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1\"/>\n<pre><code>&lt;meta name=&quot;keywords&quot; content=&quot;ngx-lua,&quot;/&gt;\n</code></pre>\n  <meta name=\"description\" content=\"背景  最近正在开发关于WebService相关系统，其中有两个模块使用的是（nginx+lua）框架，业务逻辑用lua语言实现。而从这两个新模块上线到正常运行，一共发生了两次请求错乱的线上问题：  123query A:  http:://uriA + argsA在经过proxy（or webui）这一层处理之后，请求传到下一层module变成了queryB，导致请求错乱，影响线上服务。quer\"/>\n<meta property=\"og:type\" content=\"article\"/>\n<meta property=\"og:title\" content=\"lua全局变量的二三坑\"/>\n<meta property=\"og:url\" content=\"http://cloudkey.github.io/2015/12/01/lua-global-variable-trap/index.html\"/>\n<meta property=\"og:site_name\" content=\"CloudKey Ocean\"/>\n<meta property=\"og:description\" content=\"背景  最近正在开发关于WebService相关系统，其中有两个模块使用的是（nginx+lua）框架，业务逻辑用lua语言实现。而从这两个新模块上线到正常运行，一共发生了两次请求错乱的线上问题：  123query A:  http:://uriA + argsA在经过proxy（or webui）这一层处理之后，请求传到下一层module变成了queryB，导致请求错乱，影响线上服务。quer\"/>\n<meta property=\"og:image\" content=\"http://cloudkey.github.iohttps://cloudkey.github.io//images/proxy-global-variable.png\"/>\n<meta property=\"og:image\" content=\"http://cloudkey.github.iohttps://cloudkey.github.io//images/ui-global-invalid-use.png\"/>\n<meta property=\"og:image\" content=\"http://cloudkey.github.iohttps://cloudkey.github.io//images/fix-global-to-local.png\"/>\n<meta property=\"og:updated_time\" content=\"2017-01-21T12:16:27.000Z\"/>\n<meta name=\"twitter:card\" content=\"summary\"/>\n<meta name=\"twitter:title\" content=\"lua全局变量的二三坑\"/>\n<meta name=\"twitter:description\" content=\"背景  最近正在开发关于WebService相关系统，其中有两个模块使用的是（nginx+lua）框架，业务逻辑用lua语言实现。而从这两个新模块上线到正常运行，一共发生了两次请求错乱的线上问题：  123query A:  http:://uriA + argsA在经过proxy（or webui）这一层处理之后，请求传到下一层module变成了queryB，导致请求错乱，影响线上服务。quer\"/>\n<meta name=\"twitter:image\" content=\"http://cloudkey.github.io/images/proxy-global-variable.png\"/>\n<pre><code>&lt;link rel=&quot;icon&quot; href=&quot;/favicon.ico&quot;/&gt;\n</code></pre>\n  <link href=\"/css/styles.css?v=c114cbe6\" rel=\"stylesheet\"/>\n<pre><code>&lt;link rel=&quot;stylesheet&quot; href=&quot;/css/personal-style.css&quot;/&gt;\n</code></pre>\n<script type=\"text/javascript\">\n(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){\n(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),\nm=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)\n})(window,document,'script','//www.google-analytics.com/analytics.js','ga');\n\nga('create', 'UA-56303271-1', 'auto');\nga('send', 'pageview');\n\n</script>\n<pre><code>&lt;script async=&quot;&quot; src=&quot;https://busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js&quot;&gt;&lt;/script&gt;\n</code></pre>\n</head>\n<body>\n<pre><code>&lt;span id=&quot;toolbox-mobile&quot; class=&quot;toolbox-mobile&quot;&gt;盒子&lt;/span&gt;\n</code></pre>\n  <div class=\"post-header CENTER\">\n  <div class=\"toolbox\">\n    <a class=\"toolbox-entry\" href=\"/\">\n      <span class=\"toolbox-entry-text\">盒子</span>\n      <i class=\"icon-angle-down\"></i>\n      <i class=\"icon-home\"></i>\n    </a>\n    <ul class=\"list-toolbox\">\n<pre><code>    &lt;li class=&quot;item-toolbox&quot;&gt;\n      &lt;a class=&quot;ROUND_RECT&quot; href=&quot;/archives/&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_self&quot;&gt;\n        博客\n      &lt;/a&gt;\n    &lt;/li&gt;\n  \n    &lt;li class=&quot;item-toolbox&quot;&gt;\n      &lt;a class=&quot;ROUND_RECT&quot; href=&quot;/category/&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_self&quot;&gt;\n        分类\n      &lt;/a&gt;\n    &lt;/li&gt;\n  \n    &lt;li class=&quot;item-toolbox&quot;&gt;\n      &lt;a class=&quot;ROUND_RECT&quot; href=&quot;/tag/&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_self&quot;&gt;\n        标签\n      &lt;/a&gt;\n    &lt;/li&gt;\n  \n    &lt;li class=&quot;item-toolbox&quot;&gt;\n      &lt;a class=&quot;ROUND_RECT&quot; href=&quot;/link/&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_self&quot;&gt;\n        友链\n      &lt;/a&gt;\n    &lt;/li&gt;\n  \n    &lt;li class=&quot;item-toolbox&quot;&gt;\n      &lt;a class=&quot;ROUND_RECT&quot; href=&quot;/about/&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_self&quot;&gt;\n        关于\n      &lt;/a&gt;\n    &lt;/li&gt;\n  \n    &lt;li class=&quot;item-toolbox&quot;&gt;\n      &lt;a class=&quot;ROUND_RECT&quot; href=&quot;/atom.xml&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;\n        RSS\n      &lt;/a&gt;\n    &lt;/li&gt;\n  \n    &lt;li class=&quot;item-toolbox&quot;&gt;\n      &lt;a class=&quot;ROUND_RECT&quot; href=&quot;/search/&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_self&quot;&gt;\n        搜索\n      &lt;/a&gt;\n    &lt;/li&gt;\n  \n&lt;/ul&gt;\n</code></pre>\n  </div>\n</div>\n  <div id=\"toc\" class=\"toc-article\">\n    <strong class=\"toc-title\">文章目录</strong>\n  </div>\n<div class=\"content content-post CENTER\">\n   <article id=\"post-lua-global-variable-trap\" class=\"article article-type-post\" itemprop=\"blogPost\">\n  <div class=\"article-content\">\n<pre><code>  &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;  最近正在开发关于WebService相关系统，其中有两个模块使用的是（nginx+lua）框架，业务逻辑用lua语言实现。而从这两个新模块上线到正常运行，一共发生了两次请求错乱的线上问题：&lt;br/&gt;  &lt;/p&gt;&lt;figure class=&quot;highlight lua&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;query A:  http:://uriA + argsA&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;在经过proxy（&lt;span class=&quot;keyword&quot;&gt;or&lt;/span&gt; webui）这一层处理之后，请求传到下一层&lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt;变成了queryB，导致请求错乱，影响线上服务。&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;query B:  http:://uriB + argsB&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;\n</code></pre>\n<h2 id=\"第一次踩坑-amp-amp-追查过程-proxy-：\"><a href=\"#第一次踩坑-amp-amp-追查过程-proxy-：\" class=\"headerlink\" title=\"第一次踩坑&amp;&amp;追查过程(proxy)：\"></a>第一次踩坑&amp;&amp;追查过程(proxy)：</h2><ol>\n<li><p>首先确定入口请求的URL A，经过proxy处理之后，NOTICE日志打印的URL，发现前后的URL不一致，怀疑是经过某个module之后，URL被篡改。同时这种现象一般发生在<strong>前后时间比较靠近的请求之间<em> </em></strong>。</p>\n</li>\n<li><p>线上一台proxy机器打开一台nginx debug日志（注意：日志很大，所以时间不能太长），发现了一个比较诡异的现象：</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">10</span>:<span class=\"number\">22</span>:<span class=\"number\">42</span> [<span class=\"built_in\">debug</span>] <span class=\"number\">3505</span>#<span class=\"number\">0</span>: *<span class=\"number\">1</span> lua upstream: B64A2168</div><div class=\"line\"><span class=\"number\">10</span>:<span class=\"number\">22</span>:<span class=\"number\">42</span> [<span class=\"built_in\">debug</span>] <span class=\"number\">3505</span>#<span class=\"number\">0</span>: *<span class=\"number\">2</span> lua upstream: B71D5FF8</div><div class=\"line\"><span class=\"number\">10</span>:<span class=\"number\">22</span>:<span class=\"number\">42</span> [<span class=\"built_in\">debug</span>] <span class=\"number\">3505</span>#<span class=\"number\">0</span>: *<span class=\"number\">1</span> lua upstream: B64A2168</div><div class=\"line\"><span class=\"number\">10</span>:<span class=\"number\">22</span>:<span class=\"number\">42</span> [<span class=\"built_in\">debug</span>] <span class=\"number\">3505</span>#<span class=\"number\">0</span>: *<span class=\"number\">2</span> lua upstream: B71D5FF8</div><div class=\"line\"><span class=\"number\">10</span>:<span class=\"number\">22</span>:<span class=\"number\">42</span> [<span class=\"built_in\">debug</span>] <span class=\"number\">3505</span>#<span class=\"number\">0</span>: *<span class=\"number\">1</span> lua upstream: B64A2168</div><div class=\"line\"><span class=\"number\">10</span>:<span class=\"number\">22</span>:<span class=\"number\">42</span> [<span class=\"built_in\">debug</span>] <span class=\"number\">3505</span>#<span class=\"number\">0</span>: *<span class=\"number\">1</span> lua upstream: B64A2168 &lt;===</div><div class=\"line\"><span class=\"number\">10</span>:<span class=\"number\">22</span>:<span class=\"number\">42</span> [<span class=\"built_in\">debug</span>] <span class=\"number\">3505</span>#<span class=\"number\">0</span>: *<span class=\"number\">2</span> lua upstream: B71D5FF8</div><div class=\"line\"><span class=\"number\">10</span>:<span class=\"number\">22</span>:<span class=\"number\">42</span> [<span class=\"built_in\">debug</span>] <span class=\"number\">3505</span>#<span class=\"number\">0</span>: *<span class=\"number\">2</span> lua upstream: B71D5FF8</div><div class=\"line\"><span class=\"number\">10</span>:<span class=\"number\">22</span>:<span class=\"number\">42</span> [<span class=\"built_in\">debug</span>] <span class=\"number\">3505</span>#<span class=\"number\">0</span>: *<span class=\"number\">1</span> lua upstream: B71D5FF8 &lt;=== </div><div class=\"line\"><span class=\"number\">10</span>:<span class=\"number\">22</span>:<span class=\"number\">42</span> [<span class=\"built_in\">debug</span>] <span class=\"number\">3505</span>#<span class=\"number\">0</span>: *<span class=\"number\">2</span> lua upstream: B71D5FF8</div><div class=\"line\"><span class=\"number\">10</span>:<span class=\"number\">29</span>:<span class=\"number\">23</span> [<span class=\"built_in\">debug</span>] <span class=\"number\">3505</span>#<span class=\"number\">0</span>: *<span class=\"number\">5</span> lua upstream: B64B0A20</div><div class=\"line\"><span class=\"number\">10</span>:<span class=\"number\">29</span>:<span class=\"number\">23</span> [<span class=\"built_in\">debug</span>] <span class=\"number\">3505</span>#<span class=\"number\">0</span>: *<span class=\"number\">6</span> lua upstream: B64B0FA8</div><div class=\"line\"><span class=\"number\">10</span>:<span class=\"number\">29</span>:<span class=\"number\">23</span> [<span class=\"built_in\">debug</span>] <span class=\"number\">3505</span>#<span class=\"number\">0</span>: *<span class=\"number\">5</span> lua upstream: B64B0A20</div><div class=\"line\"><span class=\"number\">10</span>:<span class=\"number\">29</span>:<span class=\"number\">23</span> [<span class=\"built_in\">debug</span>] <span class=\"number\">3505</span>#<span class=\"number\">0</span>: *<span class=\"number\">6</span> lua upstream: B64B0FA8</div><div class=\"line\"><span class=\"number\">10</span>:<span class=\"number\">29</span>:<span class=\"number\">23</span> [<span class=\"built_in\">debug</span>] <span class=\"number\">3505</span>#<span class=\"number\">0</span>: *<span class=\"number\">5</span> lua upstream: B64B0A20</div><div class=\"line\"><span class=\"number\">10</span>:<span class=\"number\">29</span>:<span class=\"number\">23</span> [<span class=\"built_in\">debug</span>] <span class=\"number\">3505</span>#<span class=\"number\">0</span>: *<span class=\"number\">5</span> lua upstream: B64B0A20</div><div class=\"line\"><span class=\"number\">10</span>:<span class=\"number\">29</span>:<span class=\"number\">23</span> [<span class=\"built_in\">debug</span>] <span class=\"number\">3505</span>#<span class=\"number\">0</span>: *<span class=\"number\">6</span> lua upstream: B64B0FA8</div><div class=\"line\"><span class=\"number\">10</span>:<span class=\"number\">29</span>:<span class=\"number\">23</span> [<span class=\"built_in\">debug</span>] <span class=\"number\">3505</span>#<span class=\"number\">0</span>: *<span class=\"number\">6</span> lua upstream: B64B0FA8</div><div class=\"line\"><span class=\"number\">10</span>:<span class=\"number\">29</span>:<span class=\"number\">23</span> [<span class=\"built_in\">debug</span>] <span class=\"number\">3505</span>#<span class=\"number\">0</span>: *<span class=\"number\">5</span> lua upstream: B64B0A20</div><div class=\"line\"><span class=\"number\">10</span>:<span class=\"number\">29</span>:<span class=\"number\">23</span> [<span class=\"built_in\">debug</span>] <span class=\"number\">3505</span>#<span class=\"number\">0</span>: *<span class=\"number\">6</span> lua upstream: B64B0FA8</div></pre></td></tr></tbody></table></figure>\n<p>两个箭头指向的都是req1，但是前后的upstream pointer确发生了改变，第二个箭头表明req1使用了upstream pointer “B71D5FF8”，但是这个pointer这时候req2正在使用，这时候我们觉得很可能是upstream pointer的改变，导致了URL被篡改（也就是reqA -&gt; reqB），但是是什么原因导致upstream pointer改变一时还没有什么头绪。</p>\n</li>\n<li><p>这时候想到了openresty google group和github openresty issue，想看看有没有遇到类似异常情况的。<br/>发现有一个帖子<a href=\"https://github.com/openresty/lua-nginx-module/issues/150\" target=\"_blank\" rel=\"external noopener noreferrer\">It seems the socket upstream pointer changed while processing concurrent requests.</a>有点类似我们的情况，仔细看了一下帖子，楼主和春哥的结论是lua global variable不当使用，造成意外的跨请求socket共享，导致异常出现。</p>\n</li>\n<li><p>使用<a href=\"https://github.com/openresty/nginx-devel-utils/blob/master/lua-releng\" target=\"_blank\" rel=\"external noopener noreferrer\">lua-releng</a>脚本check我们的proxy代码发现：<br/><img src=\"/images/proxy-global-variable.png\" alt=\"proxy-global-variable.png\"/></p>\n</li>\n<li><p>飘红的地方使用了非预期的全局变量，改成local之后，小流量上线验证，不再出现请求错乱的情况。</p>\n</li>\n</ol>\n<h2 id=\"lua全局变量官方说明\"><a href=\"#lua全局变量官方说明\" class=\"headerlink\" title=\"lua全局变量官方说明\"></a>lua全局变量官方说明</h2><p>关于lua变量的作用域，官方文档说明：  <a href=\"https://github.com/openresty/lua-nginx-module#lua-variable-scope\" target=\"_blank\" rel=\"external noopener noreferrer\">lua-variable-scope</a><br/></p><figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">Generally, use of Lua global variables is a really really bad idea <span class=\"keyword\">in</span> the context of ngx_lua because</div><div class=\"line\"><span class=\"number\">1.</span> misuse of Lua globals has very bad side effects <span class=\"keyword\">for</span> concurrent requests when these variables are actually supposed to be <span class=\"keyword\">local</span> only,</div><div class=\"line\"><span class=\"number\">2.</span> Lua global variables <span class=\"built_in\">require</span> Lua <span class=\"built_in\">table</span> look-up <span class=\"keyword\">in</span> the global environment (which is just a Lua <span class=\"built_in\">table</span>), which is kinda expensive, <span class=\"keyword\">and</span></div><div class=\"line\"><span class=\"number\">3.</span> some Lua global variable references are just typos, which are hard to <span class=\"built_in\">debug</span>.</div><div class=\"line\">It<span class=\"string\">&#39;s highly recommended to always declare them via &#34;local&#34; in the scope that is reasonable.</span></div></pre></td></tr></tbody></table></figure><p></p>\n<p>官方说明：在并发场景下，一些应该使用局部变量的地方如果滥用lua的全局变量可能会导致一些异常的情况出现； 同时全局变量的访问开销代价很大；如果出错很难调试。</p>\n<h2 id=\"第二次踩坑-ui-module\"><a href=\"#第二次踩坑-ui-module\" class=\"headerlink\" title=\"第二次踩坑(ui module)\"></a>第二次踩坑(ui module)</h2><p>经过第一次的经验，我们已经将proxy 和 ui 代码进行了全量的check，修复所有非预期的全局变量的使用。<br/>但是，ui上线切新的流量之后，一些服务又出现请求错乱的问题，查看日志发现同一个logid的请求，URL前后又出现不一致情况，并且重试的情况下，有概率的出现。</p>\n<p><strong>当时，第一感觉是全局变量问题，但是我们线上的代码已经用lua-releng脚本check过了，并未有非local变量的情况。</strong></p>\n<p>追查过程：</p>\n<ul>\n<li>因为这次上线是首次使用action/InnerRedirect.lua模块，所以我们的检查重点放在这个module中。</li>\n<li><p>有一个涉及全局变量的地方引起了我们的注意：</p>\n<p><img src=\"/images/ui-global-invalid-use.png\" alt=\"ui-global-invalid-use.png\"/></p>\n<p>飘红的箭头是一个全局的配置，而Conf_Services是一个全局变量，但是这里是赋值给local变量service，而service变量在下面的地方进行了修改：</p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">service.url = path</div><div class=\"line\">service.args = args</div></pre></td></tr></tbody></table></figure>\n<p>相当于我们把一个全局变量赋值给一个已经申明为local的变量，然后直接对这个local table变量进行修改。<br/>这个地方有点怀疑这个<strong>local table变量service，在用全局变量赋值的时候使用的是浅拷贝</strong>，为了验证我们的怀疑，写了下面一个非常简单的lua test script:</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">table_global = { </div><div class=\"line\">    [<span class=\"string\">&#34;key1&#34;</span>] = <span class=\"string\">&#34;key1&#34;</span>,</div><div class=\"line\">    [<span class=\"string\">&#34;key2&#34;</span>] = <span class=\"string\">&#34;key2&#34;</span>,</div><div class=\"line\">    [<span class=\"string\">&#34;key3&#34;</span>] = <span class=\"string\">&#34;key3&#34;</span>,</div><div class=\"line\">}   </div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#34;global table address: &#34;</span>)</div><div class=\"line\"><span class=\"built_in\">print</span>(table_global)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">local</span> tmp_table = table_global</div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#34;local table address: &#34;</span>)</div><div class=\"line\"><span class=\"built_in\">print</span>(tmp_table)</div><div class=\"line\"></div><div class=\"line\">tmp_table[<span class=\"string\">&#34;key3&#34;</span>] = <span class=\"string\">&#34;key333&#34;</span></div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#34;After modidy local table field: &#34;</span>)</div><div class=\"line\"><span class=\"built_in\">print</span>(table_global[<span class=\"string\">&#34;key3&#34;</span>])</div><div class=\"line\"></div><div class=\"line\">TEST RESULT:</div><div class=\"line\">    global <span class=\"built_in\">table</span> address: </div><div class=\"line\">    <span class=\"built_in\">table</span>: <span class=\"number\">0x539de0</span></div><div class=\"line\">    <span class=\"keyword\">local</span> <span class=\"built_in\">table</span> address: </div><div class=\"line\">    <span class=\"built_in\">table</span>: <span class=\"number\">0x539de0</span></div><div class=\"line\">    After modidy <span class=\"keyword\">local</span> <span class=\"built_in\">table</span> field: </div><div class=\"line\">    key333</div></pre></td></tr></tbody></table></figure>\n</li>\n<li><p>更改此处service使用全局配置的方式：</p>\n<p><img src=\"/images/fix-global-to-local.png\" alt=\"fix-global-to-local.png\"/></p>\n<p>上线一台机器出现缩略图错乱的线上机器，不再出现URL被篡改情况。</p>\n<p>而刚才说的只有在第一次请求失败之后，重试才会出现错乱，是因为：在第二次重试的时候，代码逻辑中的<code>compare_str</code>条件才为<code>true</code>，service变量被赋值，因为在重试的时候会出现引入全局变量。</p>\n</li>\n<li><p>lua 中的table使用的是<strong>引用方式<em> </em></strong>，这个大家都清楚，但是<code>table的拷贝是浅拷贝</code>，如果我们在代码不得己需要使用全局的配置，赋值给一个local table，同时在后续的逻辑中更改了这个local table，就有可能会出现引入全局变量的情况。</p>\n</li>\n</ul>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ol>\n<li><p>lua中的全局变量使用需谨慎，可以使用 <a href=\"https://github.com/openresty/nginx-devel-utils/blob/master/lua-releng\" target=\"_blank\" rel=\"external noopener noreferrer\">lua-releng-tool</a> 脚本check非预期的global variable，尽量使用local 申明变量。</p>\n</li>\n<li><p>对于一些全局的Conf，不得不使用全局变量的时候，在table 赋值引用的时候，需要进行特殊处理（例如上面的坑二处理方式）。或者使用clone的方式，进行深拷贝赋值（<a href=\"http://stackoverflow.com/questions/640642/how-do-you-copy-a-lua-table-by-value\" target=\"_blank\" rel=\"external noopener noreferrer\">lua-clone</a>）。</p>\n</li>\n<li><p>后续对新上传SVN的代码都需要使用lua-releng脚本进行check；<br/>同时，在引用全局配置的时候都需要使用特殊方式处理，防止异常case。</p>\n</li>\n</ol>\n  </div>\n</article>\n  <div class=\"box-prev-next clearfix\">\n    <a class=\"show pull-left\" href=\"/2015/11/15/lua-coding-style/\">\n<pre><code>&lt;/a&gt;\n</code></pre>\n  </div>\n</div>\n  <a id=\"backTop\" class=\"back-top\">\n    <i class=\"icon-angle-up\"></i>\n  </a>\n  <div class=\"modal\" id=\"modal\">\n  <span id=\"cover\" class=\"cover hide\"></span>\n  <div id=\"modal-dialog\" class=\"modal-dialog hide-dialog\">\n    <div class=\"modal-header\">\n      <span id=\"close\" class=\"btn-close\">关闭</span>\n    </div>\n    <hr/>\n  </div>\n</div>\n<pre><code>  &lt;div class=&quot;fexo-comments comments-post&quot;&gt;\n</code></pre>\n  <section class=\"disqus-comments\">\n  </section>\n  <script>\n    var disqus_shortname = 'cloudkey';\n    \n    var disqus_url = 'http://cloudkey.github.io/2015/12/01/lua-global-variable-trap/';\n    \n    (function(){\n      var dsq = document.createElement('script');\n      dsq.type = 'text/javascript';\n      dsq.async = true;\n      dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';\n      (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);\n    })();\n  </script>\n  <script id=\"dsq-count-scr\" src=\"//cloudkey.disqus.com/count.js\" async=\"\"></script>\n  </div>\n  <script type=\"text/javascript\">\n  function loadScript(url, callback) {\n    var script = document.createElement('script')\n    script.type = 'text/javascript';\n\n    if (script.readyState) { //IE\n      script.onreadystatechange = function() {\n        if (script.readyState == 'loaded' ||\n          script.readyState == 'complete') {\n          script.onreadystatechange = null;\n          callback();\n        }\n      };\n    } else { //Others\n      script.onload = function() {\n        callback();\n      };\n    }\n\n    script.src = url;\n    document.getElementsByTagName('head')[0].appendChild(script);\n  }\n\n  window.onload = function() {\n    loadScript('/js/bundle.js?235683', function() {\n      // load success\n    });\n  }\n</script>\n</body>","text":" lua全局变量的二三坑 | CloudKey Ocean &lt;meta name=&quot;keywords&quot; content=&quot;ngx-lua,&quot;/&gt; &lt;link rel=&quot;icon&quot; href=&quot;...","link":"","photos":[],"count_time":{"symbolsCount":"9k","symbolsTime":"8 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E4%B8%80%E6%AC%A1%E8%B8%A9%E5%9D%91-amp-amp-%E8%BF%BD%E6%9F%A5%E8%BF%87%E7%A8%8B-proxy-%EF%BC%9A\"><span class=\"toc-text\">第一次踩坑&amp;&amp;追查过程(proxy)：</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#lua%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F%E5%AE%98%E6%96%B9%E8%AF%B4%E6%98%8E\"><span class=\"toc-text\">lua全局变量官方说明</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E4%BA%8C%E6%AC%A1%E8%B8%A9%E5%9D%91-ui-module\"><span class=\"toc-text\">第二次踩坑(ui module)</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">总结</span></a></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"情迁QQ机器人新功能可使用lua脚本编写机器人插件啦 · 情迁美好时光追忆","uid":"21dcfde18a33df87541833facf0c1921","slug":"zl/2016-01-01-756_情迁QQ机器人新功能可使用lua脚本编写机器人插件啦 · 情迁美好时光追忆","date":"2024-04-03T03:47:36.002Z","updated":"2024-04-03T03:47:36.003Z","comments":true,"path":"api/articles/zl/2016-01-01-756_情迁QQ机器人新功能可使用lua脚本编写机器人插件啦 · 情迁美好时光追忆.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"本文将详细介绍Lua机器人插件的使用方法，更详细的内容也可以参考简书哦!机器人1.9.0支持lua插件加载，支持手机端lua编写插件 机器人内置lua编辑器，可以测试，运行机器人功能，lua是一种脚本语言，解释运行，随意修改，无需编译，便于修改和分享，操作简单，开发成本低，传播更...","link":"","photos":[],"count_time":{"symbolsCount":"6k","symbolsTime":"5 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"python dictionary lua table","uid":"82eed199e02852939b0a6c2b11e20502","slug":"zl/2016-01-01-753_python dictionary lua table","date":"2024-04-03T03:47:36.000Z","updated":"2024-04-03T03:47:36.000Z","comments":true,"path":"api/articles/zl/2016-01-01-753_python dictionary lua table.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"python dictionary 与 lua table 公司前端的技术栈是 C++ &amp; lua &amp; python, C++、lua做业务开发，python做工具。lua特别好用的东西就是load, 将某些数据（一般是excel）转成lua的table存储，用的...","link":"","photos":[],"count_time":{"symbolsCount":"5.2k","symbolsTime":"5 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}