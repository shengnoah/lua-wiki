{"title":"LUA 脚本简单教程","uid":"1b94134c8d545218e29a7c184a24543d","slug":"zl/2016-01-01-354_LUA 脚本简单教程","date":"2024-04-03T03:47:35.632Z","updated":"2024-04-03T03:47:35.632Z","comments":true,"path":"api/articles/zl/2016-01-01-354_LUA 脚本简单教程.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<h3 id=\"注释\">注释</h3> <div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>--单行注释\n<p>–[[<br />\n多行注释<br />\n多行注释<br />\n–]]<br />\n</code></pre></div></div> <h3 id=\"变量\">变量</h3> <ul> <li>nil:无效值，比较时需要加上双引号”“，对全局变量和table复制nil，等于删除它们</li> <li>boolean:布尔值</li> <li>number:双精度类型的实浮点数</li> <li>string:字符串，单引号’‘或双引号”“或[[]]</li> <li>function:函数</li> <li>userdata:任意存储在变量中的c数据结构</li> <li>thread:独立线路</li> <li>table:关联数组，索引可以是数字或字符串，{}创建一个空表，数值下标1开始</li> </ul> <h4 id=\"关键字\">关键字</h4> <div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>and    break    do    else    elseif    end    false    for<br />\nfunction    if    in     local    nil    not    or    repeat<br />\nreturn    then    true    until    while<br />\n</code></pre></div></div> <h4 id=\"作用域\">作用域</h4> <p>默认情况下，变量都是全局的，除非显示local声明为局部变量 尽量使用局部变量，因为1.避免命名冲突2.访问局部变量比全局变量快</p> <h4 id=\"赋值\">赋值</h4> <div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>a = &quot;hello&quot; … &quot;world&quot;<br />\na,b = 10,20<br />\n– 这里c的值为nil<br />\na,b,c = 1,2<br />\n</code></pre></div></div> <h3 id=\"运算符\">运算符</h3> <ul> <li>与或非:and or not</li> <li>…:连接两个字符串</li> <li>#:一元运算符，返回字符串或表的长度</li> </ul> <h3 id=\"控制流程\">控制流程</h3> <ol> <li>if语句 <div class=\"language-c highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>     <span class=\"n\">local</span> <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"mi\">10</span><br />\n<span class=\"k\">if</span> <span class=\"n\">a</span> <span class=\"o\">&gt;</span> <span class=\"mi\">10</span><br />\n<span class=\"n\">then</span><br />\n<span class=\"n\">print</span><span class=\"p\">(</span><span class=\"s\">&quot;1&quot;</span><span class=\"p\">)</span><br />\n<span class=\"k\">else</span><br />\n<span class=\"n\">print</span><span class=\"p\">(</span><span class=\"s\">&quot;2&quot;</span><span class=\"p\">)</span><br />\n<span class=\"n\">end</span><br />\n</code></pre></div> </div> </li> <li>循环语句 <div class=\"language-c highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>     <span class=\"o\">–</span> <span class=\"k\">while</span><span class=\"err\">循环</span><br />\n<span class=\"k\">while</span><span class=\"p\">(</span><span class=\"nb\">true</span><span class=\"p\">)</span><br />\n<span class=\"k\">do</span><br />\n<span class=\"n\">print</span><span class=\"p\">(</span><span class=\"s\">&quot;xxx&quot;</span><span class=\"p\">)</span><br />\n<span class=\"n\">end</span><br />\n<span class=\"o\">–</span> <span class=\"k\">for</span><span class=\"err\">循环</span><br />\n<span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"p\">&#123;</span><span class=\"s\">&quot;one&quot;</span><span class=\"p\">,</span><span class=\"s\">&quot;two&quot;</span><span class=\"p\">,</span><span class=\"s\">&quot;three&quot;</span><span class=\"p\">&#125;</span><br />\n<span class=\"k\">for</span> <span class=\"n\">i</span><span class=\"p\">,</span><span class=\"n\">v</span> <span class=\"n\">in</span> <span class=\"n\">ipairs</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span> <span class=\"k\">do</span><br />\n<span class=\"n\">print</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span><span class=\"n\">v</span><span class=\"p\">)</span><br />\n<span class=\"n\">end</span><br />\n<span class=\"o\">–</span> <span class=\"err\">另一种形式</span><br />\n<span class=\"n\">function</span> <span class=\"n\">f</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span><br />\n<span class=\"n\">print</span><span class=\"p\">(</span><span class=\"s\">&quot;function&quot;</span><span class=\"p\">)</span><br />\n<span class=\"k\">return</span> <span class=\"n\">x</span><span class=\"o\">*</span><span class=\"mi\">2</span><br />\n<span class=\"n\">end</span><br />\n<span class=\"k\">for</span> <span class=\"n\">i</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"n\">f</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span> <span class=\"k\">do</span> <span class=\"n\">print</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span><br />\n<span class=\"n\">end</span><br />\n<span class=\"o\">–</span> <span class=\"err\">打印</span><span class=\"mi\">1</span> <span class=\"mi\">3</span> <span class=\"mi\">5</span><br />\n<span class=\"k\">for</span> <span class=\"n\">i</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">2</span> <span class=\"n\">dp</span> <span class=\"n\">print</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span><br />\n<span class=\"n\">end</span><br />\n<span class=\"o\">–</span> <span class=\"n\">repeat</span><span class=\"err\">循环</span><br />\n<span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><br />\n<span class=\"n\">repeat</span><br />\n<span class=\"n\">print</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span><br />\n<span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">a</span><span class=\"o\">+</span><span class=\"mi\">1</span><br />\n<span class=\"n\">util</span><span class=\"p\">(</span><span class=\"n\">a</span> <span class=\"o\">&gt;</span> <span class=\"mi\">15</span><span class=\"p\">)</span><br />\n</code></pre></div> </div> </li> </ol> <h3 id=\"函数\">函数</h3> <div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>function maximum(a)<br />\nlocal mi = 1<br />\nlocal m = a[mi]<br />\nfor i,val in ipairs(a) do<br />\nif val &gt; m then<br />\nmi = i<br />\nm = val<br />\nend<br />\nend<br />\nreturn m,mi<br />\nend</p>\n<p>– 可变参数<br />\nfunction fwrite(fmt, …)  —&gt; 固定的参数fmt<br />\nreturn io.write(string.format(fmt, …))<br />\nend</p>\n<p>– 统计给定可变参数个数<br />\nfunction foo(…)<br />\nfor i = 1, select('#', …) do  –&gt;获取参数总数<br />\nlocal arg = select(i, …); –&gt;读取参数<br />\nprint(&quot;arg&quot;, arg);<br />\nend<br />\nend<br />\n</code></pre></div></div> <h3 id=\"表\">表</h3> <ol> <li>Lua table 使用关联型数组，你可以用任意类型的值来作数组的索引，但这个值不能是 nil。</li> <li>Lua table 是不固定大小的，你可以根据自己需要进行扩容。</li> </ol> <h3 id=\"官方文档地址\">官方文档地址</h3> <p><a href=\"http://www.runoob.com/manual/lua53doc/\">Lua 5.3</a></p></p>\n","text":"注释 --单行注释 –[[ 多行注释 多行注释 –]] 变量 nil:无效值，比较时需要加上双引号”“，对全局变量和table复制nil，等于删除它们 boolean:布尔值 number:双精度类型的实浮点数 string:字符串，单引号’‘或双引号”“或[[]] functi...","link":"","photos":[],"count_time":{"symbolsCount":"1.5k","symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B3%A8%E9%87%8A\"><span class=\"toc-text\">注释</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8F%98%E9%87%8F\"><span class=\"toc-text\">变量</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%85%B3%E9%94%AE%E5%AD%97\"><span class=\"toc-text\">关键字</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%BD%9C%E7%94%A8%E5%9F%9F\"><span class=\"toc-text\">作用域</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%B5%8B%E5%80%BC\"><span class=\"toc-text\">赋值</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%BF%90%E7%AE%97%E7%AC%A6\"><span class=\"toc-text\">运算符</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%8E%A7%E5%88%B6%E6%B5%81%E7%A8%8B\"><span class=\"toc-text\">控制流程</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">函数</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%A1%A8\"><span class=\"toc-text\">表</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3%E5%9C%B0%E5%9D%80\"><span class=\"toc-text\">官方文档地址</span></a></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Lua 排序算法","uid":"18c65ae79c1521b9ec150d64b8237a42","slug":"zl/2016-01-01-355_Lua 排序算法 ","date":"2024-04-03T03:47:35.633Z","updated":"2024-04-03T03:47:35.634Z","comments":true,"path":"api/articles/zl/2016-01-01-355_Lua 排序算法 .json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"归并排序（Merge Sort，台湾译作：合并排序）是建立在归并操作上的一种有效的排序算法。该算法是采用分治法（Divide and Conquer）的一个非常典型的应用。 归并操作(Merge)，也叫归并算法，指的是将两个已经排序的序列合并成一个序列的操作。归并排序算法依赖归并...","link":"","photos":[],"count_time":{"symbolsCount":"6.6k","symbolsTime":"6 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"lua学习2","uid":"69b9fe694fff5591e06878257f99671e","slug":"zl/2016-01-01-351_lua学习2","date":"2024-04-03T03:47:35.631Z","updated":"2024-04-03T03:47:35.631Z","comments":true,"path":"api/articles/zl/2016-01-01-351_lua学习2.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"语句Lua支持多重赋值，就是可以将多个值同时赋值给多个变量。 123456a, b = 3, &#39;a&#39;x ,y = y, x #一行语句进行交换变量a, b, c = 1, 2print(a, b, c) a, b = 1, 2, 3print(a, b) --&g...","link":"","photos":[],"count_time":{"symbolsCount":"3.7k","symbolsTime":"3 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}