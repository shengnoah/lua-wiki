{"title":"Lua中的封装","uid":"a16ffa25bc913f5c0040828aa3005f3e","slug":"zl/2016-01-01-519_Lua中的封装","date":"2024-04-03T03:47:35.795Z","updated":"2024-04-03T03:47:35.795Z","comments":true,"path":"api/articles/zl/2016-01-01-519_Lua中的封装.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<p><code class=\"highlighter-rouge\">Lua</code>中没有<code class=\"highlighter-rouge\">private</code>，<code class=\"highlighter-rouge\">table</code>中的<code class=\"highlighter-rouge\">key/value</code>可以随意访问，利用<code class=\"highlighter-rouge\">metatable</code>虽然可以施加一些限制，但是实际上有各种方法可以绕过这些限制。<br/>\n下面介绍一种方法，实现真正的封装。</p>\n<figure class=\"highlight\"><pre><code class=\"language-lua\" data-lang=\"lua\"><span class=\"kd\">local</span> <span class=\"n\">LuaClass</span> <span class=\"o\">=</span> <span class=\"nb\">require</span> <span class=\"s2\">&#34;LuaClass&#34;</span>\n<span class=\"kd\">local</span> <span class=\"n\">TestClass</span> <span class=\"o\">=</span> <span class=\"n\">LuaClass</span><span class=\"p\">(</span><span class=\"s2\">&#34;TestClass&#34;</span><span class=\"p\">)</span>\n<span class=\"kd\">local</span> <span class=\"n\">PrivateDataMap</span> <span class=\"o\">=</span> <span class=\"n\">LuaClass</span><span class=\"p\">:</span><span class=\"n\">PrivateDataMap</span><span class=\"p\">&#123;</span>\n    <span class=\"s2\">&#34;MemberA&#34;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&#34;MemberB&#34;</span><span class=\"p\">,</span>\n<span class=\"p\">&#125;</span>\n<p><span class=\"k\">function</span> <span class=\"nf\">TestClass</span><span class=\"p\">:</span><span class=\"n\">GetMemberA</span><span class=\"p\">()</span><br />\n<span class=\"k\">return</span> <span class=\"n\">PrivateDataMap</span><span class=\"p\">:</span><span class=\"n\">Get</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"s2\">&quot;MemberA&quot;</span><span class=\"p\">)</span><br />\n<span class=\"k\">end</span></p>\n<p><span class=\"k\">function</span> <span class=\"nf\">TestClass</span><span class=\"p\">:</span><span class=\"n\">SetMemberA</span><span class=\"p\">(</span><span class=\"n\">Value</span><span class=\"p\">)</span><br />\n<span class=\"kd\">local</span> <span class=\"n\">ExistValue</span> <span class=\"o\">=</span> <span class=\"n\">PrivateDataMap</span><span class=\"p\">:</span><span class=\"n\">Get</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"s2\">&quot;MemberA&quot;</span><span class=\"p\">)</span><br />\n<span class=\"k\">if</span> <span class=\"n\">ExistValue</span> <span class=\"o\">~=</span> <span class=\"n\">Value</span> <span class=\"k\">then</span> <span class=\"c1\">– 比较差异</span><br />\n<span class=\"n\">PrivateDataMap</span><span class=\"p\">:</span><span class=\"n\">Set</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"s2\">&quot;MemberA&quot;</span><span class=\"p\">,</span> <span class=\"n\">Value</span><span class=\"p\">)</span><br />\n<span class=\"n\">DispatchXXX</span> <span class=\"c1\">– 触发事件 </span><br />\n<span class=\"k\">end</span><br />\n<span class=\"k\">end</span></p>\n<p><span class=\"k\">function</span> <span class=\"nf\">TestClass</span><span class=\"p\">:</span><span class=\"n\">GetMemberB</span><span class=\"p\">()</span><br />\n<span class=\"k\">return</span> <span class=\"n\">PrivateDataMap</span><span class=\"p\">:</span><span class=\"n\">Get</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"s2\">&quot;MemberB&quot;</span><span class=\"p\">)</span><br />\n<span class=\"k\">end</span></code></pre></figure></p>\n<p>上面这段代码中，每个<code class=\"highlighter-rouge\">object</code>对应两个成员<code class=\"highlighter-rouge\">MemberA</code>、<code class=\"highlighter-rouge\">MemberB</code>，因为<code class=\"highlighter-rouge\">PrivateDataMap</code>是局部变量，所以外部的代码无法直接访问，只能通过<code class=\"highlighter-rouge\">TestClass</code>提供的接口访问这些成员。<br/>\n<code class=\"highlighter-rouge\">PrivateDataMap</code>的实现方法如下：</p>\n<figure class=\"highlight\"><pre><code class=\"language-lua\" data-lang=\"lua\"><span class=\"k\">function</span> <span class=\"nf\">LuaClass</span><span class=\"p\">:</span><span class=\"n\">PrivateDataMap</span><span class=\"p\">(</span><span class=\"n\">MemberNameList</span><span class=\"p\">)</span>\n    <span class=\"kd\">local</span> <span class=\"n\">DataMap</span> <span class=\"o\">=</span> <span class=\"p\">&#123;&#125;</span>\n    <span class=\"k\">function</span> <span class=\"nf\">DataMap</span><span class=\"p\">:</span><span class=\"n\">Set</span><span class=\"p\">(</span><span class=\"n\">Owner</span><span class=\"p\">,</span> <span class=\"n\">MemberName</span><span class=\"p\">,</span> <span class=\"n\">Value</span><span class=\"p\">)</span>\n        <span class=\"kd\">local</span> <span class=\"n\">Owner2ValueMap</span> <span class=\"o\">=</span> <span class=\"n\">DataMap</span><span class=\"p\">[</span><span class=\"n\">MemberName</span><span class=\"p\">]</span>\n        <span class=\"k\">if</span> <span class=\"n\">Owner2ValueMap</span> <span class=\"k\">then</span>\n            <span class=\"n\">Owner2ValueMap</span><span class=\"p\">[</span><span class=\"n\">Owner</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Value</span>\n        <span class=\"k\">end</span>\n    <span class=\"k\">end</span>\n<pre><code>&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;DataMap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Owner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MemberName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;\n    &lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Owner2ValueMap&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DataMap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MemberName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;\n    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Owner2ValueMap&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Owner2ValueMap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Owner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;\n&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;\n\n&lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CommonFunction&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;#34;CommonFunction&amp;#34;&lt;/span&gt;\n&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MemberName&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;pairs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MemberNameList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;\n    &lt;span class=&quot;n&quot;&gt;DataMap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MemberName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CommonFunction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CreateWeakTable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;\n&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;\n&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DataMap&lt;/span&gt;\n</code></pre>\n<p><span class=\"k\">end</span></code></pre></figure></p>\n<p>其中，<code class=\"highlighter-rouge\">object</code>与<code class=\"highlighter-rouge\">member</code>的对应关系存储在<code class=\"highlighter-rouge\">weaktable</code>中，不会影响<code class=\"highlighter-rouge\">object</code>的释放。</p>","text":"Lua中没有private，table中的key/value可以随意访问，利用metatable虽然可以施加一些限制，但是实际上有各种方法可以绕过这些限制。 下面介绍一种方法，实现真正的封装。 local LuaClass = require &#34;LuaClass&#34;...","link":"","photos":[],"count_time":{"symbolsCount":"3.8k","symbolsTime":"3 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Sol2实现Cpp和Lua绑定","uid":"a0aa244da9b5db84b7a7c09b4e0b028c","slug":"zl/2016-01-01-518_Sol2实现Cpp和Lua绑定","date":"2024-04-03T03:47:35.795Z","updated":"2024-04-03T03:47:35.795Z","comments":true,"path":"api/articles/zl/2016-01-01-518_Sol2实现Cpp和Lua绑定.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":" &lt;a href=&quot;/2018/06/17/cpp11_raw_string/&quot; rel=&quot;next&quot; title=&quot;C++11的Raw String Literals&quot;&gt; &lt;i class=&quot...","link":"","photos":[],"count_time":{"symbolsCount":"4.8k","symbolsTime":"4 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"nginx + lua 开发中过程中 post body 过大返回 4xx (续)","uid":"e84c7365bb95758060da0a0503a1f038","slug":"zl/2016-01-01-51_nginx + lua 开发中过程中 post body 过大返回 4xx (续)","date":"2024-04-03T03:47:35.795Z","updated":"2024-04-03T03:47:35.795Z","comments":true,"path":"api/articles/zl/2016-01-01-51_nginx + lua 开发中过程中 post body 过大返回 4xx (续).json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"背景随着业务发展会出现较大的 post body 数据，按照nginx + lua 开发中过程中 post body 过大返回 4xx提到的方式修改后，大部分情况下 post body 正常接收并处理落日志。但会偶现空日志的情况。 问题分析经过多轮本地和沙盒压测，复现了问题。由于...","link":"","photos":[],"count_time":{"symbolsCount":805,"symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}