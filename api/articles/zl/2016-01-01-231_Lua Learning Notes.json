{"title":"Lua Learning Notes","uid":"4b8499e3ac801948195a5de99e588873","slug":"zl/2016-01-01-231_Lua Learning Notes","date":"2024-04-03T03:47:33.101Z","updated":"2024-04-03T03:47:33.101Z","comments":true,"path":"api/articles/zl/2016-01-01-231_Lua Learning Notes.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<h3 id=\"_1\">注释</h3>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">-- 单行注释</span>\n<p><span class=\"cm\">–[[</span><br />\n<span class=\"cm\">    多行注释</span><br />\n<span class=\"cm\">]]</span><br />\n</pre></div></p>\n<h3 id=\"_2\">变量</h3>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"s2\">\"string\"</span>\n<span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>\n<span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"kc\">nil</span> <span class=\"c1\">-- 'b' deleted</span>\n<span class=\"kd\">local</span> <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n</pre></div>\n<p>变量没有类型, 默认为全局变量, 使用<code>local</code>关键字声明局部变量, 要删除变量只需要将其赋值为<code>nil</code>即可</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">3</span> <span class=\"o\">*</span> <span class=\"mi\">5</span> <span class=\"c1\">-- 同时赋值多个变量</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">..</span><span class=\"s1\">','</span><span class=\"o\">..</span><span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"c1\">-- '10, 15', 用..连接字符串</span>\n<span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">x</span> <span class=\"c1\">-- 交换变量的值</span>\n<span class=\"n\">a</span><span class=\"p\">[</span><span class=\"s1\">'x'</span><span class=\"p\">],</span> <span class=\"n\">a</span><span class=\"p\">[</span><span class=\"s1\">'y'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">a</span><span class=\"p\">[</span><span class=\"s1\">'y'</span><span class=\"p\">],</span> <span class=\"n\">a</span><span class=\"p\">[</span><span class=\"s1\">'x'</span><span class=\"p\">]</span>\n<span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">f</span><span class=\"p\">()</span> <span class=\"c1\">-- 将函数f()返回的两个值分别赋给变量a, b</span>\n</pre></div>\n<p>对多个变量同时赋值时, 会先计算等号右侧数据再进行赋值, 可以这样来交换变量的值</p>\n<p>当等号右侧值不够时, 会赋值为<code>nil</code>, 当等号右侧值过多时, 会自动忽略</p>\n<h3 id=\"_3\">数据类型</h3>\n<p><strong><em>nil boolean number string userdata function thread table</em></strong></p>\n<p><code>nil</code>表示无效值, <code>number</code>为实数, <strong>都为双精度浮点数</strong>, <code>table</code>类似于数组或字典, <code>userdata</code>表示存储在Lua变量中的C数据结构, 使用<code>type()</code>函数可以获得数据类型</p>\n<h5 id=\"_4\">字符串</h5>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"s2\">\"string\"</span>\n<span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"s1\">'test'</span>\n<span class=\"n\">html</span> <span class=\"o\">=</span> <span class=\"s\">[[</span>\n<span class=\"s\">&lt;html&gt;</span>\n<span class=\"s\">&lt;head&gt;</span>\n<span class=\"s\">    &lt;title&gt;Title&lt;/title&gt;</span>\n<span class=\"s\">&lt;/head&gt;</span>\n<span class=\"s\">&lt;body&gt;</span>\n<span class=\"s\">    &lt;p&gt;Test&lt;/p&gt;</span>\n<span class=\"s\">&lt;/body&gt;</span>\n<span class=\"s\">&lt;/html&gt;</span>\n<span class=\"s\">]]</span>\n</pre></div>\n<p>用双引号或者单引号来表示字符串, 用两个方括号来表示跨行字符串</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"s1\">'8'</span>\n<span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"s1\">'2'</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"c1\">-- 10</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">a</span> <span class=\"o\">..</span> <span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"c1\">-- '82'</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"mi\">23</span> <span class=\"o\">..</span> <span class=\"mi\">33</span><span class=\"p\">)</span> <span class=\"c1\">-- '2333'</span>\n<p><span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"s1\">‘Hello World!’</span><br />\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"o\">#</span><span class=\"n\">text</span><span class=\"p\">)</span> <span class=\"c1\">– 12</span><br />\n</pre></div></p>\n<p>对字符串进行运算操作时, 会<strong>先将字符串转换成数字</strong>再进行运算, 使用<code>..</code>来连接两个字符串</p>\n<p>使用<code>#str</code>来获取字符串长度</p>\n<h5 id=\"_5\">表</h5>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n<span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'a'</span><span class=\"p\">,</span> <span class=\"s1\">'b'</span><span class=\"p\">,</span> <span class=\"s1\">'c'</span><span class=\"p\">}</span>\n<span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"n\">a</span><span class=\"o\">=</span><span class=\"s1\">'A'</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"o\">=</span><span class=\"s1\">'B'</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"o\">=</span><span class=\"s1\">'C'</span><span class=\"p\">}</span>\n<span class=\"n\">a</span><span class=\"p\">[</span><span class=\"s1\">'KEY'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">'d'</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">])</span> <span class=\"c1\">-- 'b'</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">[</span><span class=\"s1\">'KEY'</span><span class=\"p\">])</span> <span class=\"c1\">-- 'd'</span>\n</pre></div>\n<p>用花括号表示表, 数组默认从<code>1</code>开始索引, 数组的索引可以是数字也可以是字符串</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n<span class=\"n\">a</span><span class=\"p\">[</span><span class=\"s1\">'location'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">'NYC'</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">location</span><span class=\"p\">)</span>\n</pre></div>\n<p>当索引为字符串时, 可以用<code>.</code>来进行索引</p>\n        <a id=\"url\" href=\"https://tunkshif.github.io/\">- INDEX -</a>","text":"注释 -- 单行注释 –[[ 多行注释 ]] 变量 a = \"string\" b = 10 b = nil -- 'b' deleted local c = 0 变量没有类型, 默认为全局变量, 使用local关键字声明局部变量, 要删除变量只需要将其赋值为nil即可 a, b ...","link":"","photos":[],"count_time":{"symbolsCount":"1.2k","symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#_1\"><span class=\"toc-text\">注释</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#_2\"><span class=\"toc-text\">变量</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#_3\"><span class=\"toc-text\">数据类型</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#_4\"><span class=\"toc-text\">字符串</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#_5\"><span class=\"toc-text\">表</span></a></li></ol></li></ol></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Lua 的标准输出与缓存","uid":"eb6769635061336dbbe2c0540f762f81","slug":"zl/2016-01-01-233_Lua 的标准输出与缓存 ","date":"2024-04-03T03:47:33.102Z","updated":"2024-04-03T03:47:33.102Z","comments":true,"path":"api/articles/zl/2016-01-01-233_Lua 的标准输出与缓存 .json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":" &lt;p&gt;最近我遇到了个奇怪的问题，我的一个 Lua 脚本需要通过 shell 的重定向将输出追加到一个日志文档中。但是那个 Lua 脚本的输出在日志文档里看来却不是实时的，输出的文本直到脚本结束时才能看到。&lt;/p&gt; 在 shell 下运行这个进程，是可以看...","link":"","photos":[],"count_time":{"symbolsCount":988,"symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Lua 排序算法","uid":"18c65ae79c1521b9ec150d64b8237a42","slug":"zl/2016-01-01-229_Lua 排序算法 ","date":"2024-04-03T03:47:33.100Z","updated":"2024-04-03T03:47:33.100Z","comments":true,"path":"api/articles/zl/2016-01-01-229_Lua 排序算法 .json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":" &lt;p&gt;选择排序（Selection Sort）是一种简单直观的排序算法。它的工作原理如下，首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置，然后，再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。以此类推，直到所有元素均排序完毕。&...","link":"","photos":[],"count_time":{"symbolsCount":917,"symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}