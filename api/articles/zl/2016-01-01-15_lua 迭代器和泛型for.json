{"title":"lua 迭代器和泛型for","uid":"3b0fab6604d54755a5ebd02f17ce752d","slug":"zl/2016-01-01-15_lua 迭代器和泛型for","date":"2024-04-03T03:47:33.051Z","updated":"2024-04-03T03:47:33.052Z","comments":true,"path":"api/articles/zl/2016-01-01-15_lua 迭代器和泛型for.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<pre><code>          &lt;h2 id=&quot;迭代器和闭包&quot;&gt;迭代器和闭包&lt;/h2&gt;\n</code></pre>\n<ol>\n  <li>迭代器可以遍历集合的每一个元素，在lua中常常使用函数来描述迭代器，每次调用该函数就返回集合的下一个元素。</li>\n  <li>迭代器需要保留上一次成功调用的状态和下一次成功调用的状态，也就是它知道来自于哪里和将要前往哪里。闭包可以实现这个任务。</li>\n  <li>闭包是一个内部函数，它可以访问一个或者多个外部函数的局部变量。每次闭包成功调用后这些局部变量都保存他们的值(状态)。</li>\n  <li>所以一个典型的闭包结构包含两个函数：一个是闭包自己，另一个是工厂（创建闭包的函数）</li>\n</ol>\n<div class=\"language-lua highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">--一个简单的迭代器输出table的元素</span>\n<span class=\"kd\">local</span> <span class=\"k\">function</span> <span class=\"nf\">list_iter</span><span class=\"p\">(</span> <span class=\"n\">t</span> <span class=\"p\">)</span>\n    <span class=\"c1\">--list_iter是工厂函数</span>\n\t<span class=\"kd\">local</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n\t<span class=\"kd\">local</span> <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"n\">table</span><span class=\"p\">.</span><span class=\"n\">getn</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">)</span>\n    <span class=\"c1\">--在这里，t、i、n 都属于闭包外部的局部变量</span>\n    <span class=\"c1\">--返回闭包函数</span>\n\t<span class=\"k\">return</span> <span class=\"k\">function</span> <span class=\"p\">(</span>  <span class=\"p\">)</span>\n\t\t<span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span>\n\t\t<span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span> <span class=\"k\">then</span>\n\t\t\t<span class=\"k\">return</span> <span class=\"n\">t</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span>\n\t\t<span class=\"k\">end</span>\n\t<span class=\"k\">end</span>\n<span class=\"k\">end</span>\n<p><span class=\"kd\">local</span> <span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"p\">&#123;</span><span class=\"mi\">10</span><span class=\"p\">,</span><span class=\"mi\">20</span><span class=\"p\">,</span><span class=\"mi\">30</span><span class=\"p\">&#125;</span><br />\n<span class=\"kd\">local</span> <span class=\"n\">iter</span> <span class=\"o\">=</span> <span class=\"n\">list_iter</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">)</span><br />\n<span class=\"k\">while</span> <span class=\"kc\">true</span> <span class=\"k\">do</span><br />\n<span class=\"kd\">local</span> <span class=\"n\">m</span> <span class=\"o\">=</span> <span class=\"n\">iter</span><span class=\"p\">()</span><br />\n<span class=\"k\">if</span> <span class=\"n\">m</span> <span class=\"o\">==</span> <span class=\"kc\">nil</span> <span class=\"k\">then</span><br />\n<span class=\"k\">break</span><br />\n<span class=\"k\">end</span><br />\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">m</span><span class=\"p\">)</span><br />\n<span class=\"k\">end</span><br />\n<span class=\"c1\">–输出 10 20 30</span><br />\n</code></pre></div></div></p>\n<h2 id=\"泛型for\">泛型for</h2>\n<p>泛型for在自己内部保存迭代函数，实际上它保存三个值：<strong>迭代函数、状态常量、控制变量</strong>。</p>\n<div class=\"language-lua highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">for</span> <span class=\"o\">&lt;</span><span class=\"n\">var</span><span class=\"o\">-</span><span class=\"n\">list</span><span class=\"o\">&gt;</span> <span class=\"k\">in</span> <span class=\"o\">&lt;</span><span class=\"n\">exp</span><span class=\"o\">-</span><span class=\"n\">list</span><span class=\"o\">&gt;</span> <span class=\"k\">do</span>\n    <span class=\"o\">&lt;</span><span class=\"n\">body</span><span class=\"o\">&gt;</span>\n<span class=\"k\">end</span>\n<span class=\"o\">&lt;</span><span class=\"n\">var</span><span class=\"o\">-</span><span class=\"n\">list</span><span class=\"o\">&gt;</span><span class=\"err\">是以一个或多个逗号分隔的变量名列表，</span><span class=\"o\">&lt;</span><span class=\"n\">exp</span><span class=\"o\">-</span><span class=\"n\">list</span><span class=\"o\">&gt;</span><span class=\"err\">是以一个或多个逗号分隔的表达式列表，通常情况下</span><span class=\"n\">exp</span><span class=\"o\">-</span><span class=\"n\">list</span><span class=\"err\">只有一个值：迭代工厂的调用</span>\n<p><span class=\"k\">for</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">v</span> <span class=\"k\">in</span> <span class=\"nb\">pairs</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">)</span> <span class=\"k\">do</span><br />\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">)</span><br />\n<span class=\"k\">end</span><br />\n<span class=\"n\">k</span><span class=\"err\">，</span><span class=\"n\">v</span> <span class=\"err\">为变量列表，</span><span class=\"nb\">pairs</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">)</span><span class=\"err\">为表达式列表</span><br />\n</code></pre></div></div></p>\n<h3 id=\"泛型for的执行过程\">泛型for的执行过程</h3>\n<ul>\n  <li>初始化，计算in后面表达式的值，表达式应该返回泛型for需要的三个值：迭代函数、状态常量、控制变量；如果返回值不够三个用nil补齐，多出则忽略。</li>\n  <li>将状态变量和控制变量作为参数调用迭代函数（注意：对于for结构来说，状态常量没有用处，仅仅在初始化的时候获取值并传递给迭代函数）。</li>\n  <li>将迭代函数返回的值赋给变量列表。</li>\n  <li>如果返回的第一个值为nil，循环结束，否则执行循环体。</li>\n  <li>回到第二步再次调用迭代函数。</li>\n</ul>\n<div class=\"language-lua highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">for</span> <span class=\"n\">var1</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"n\">varn</span> <span class=\"k\">in</span> <span class=\"n\">exp</span><span class=\"o\">-</span><span class=\"n\">list</span> <span class=\"k\">do</span>\n    <span class=\"n\">block</span>\n<span class=\"k\">end</span>\n<span class=\"err\">等价于</span>\n<span class=\"k\">do</span>\n    <span class=\"kd\">local</span> <span class=\"n\">_f</span><span class=\"p\">,</span> <span class=\"n\">_s</span><span class=\"p\">,</span> <span class=\"n\">_var</span> <span class=\"o\">=</span> <span class=\"n\">exp</span><span class=\"o\">-</span><span class=\"n\">list</span>\n    <span class=\"c1\">--_f 是迭代函数，_s 是状态常量，_var 控制变量</span>\n    <span class=\"k\">while</span> <span class=\"kc\">true</span> <span class=\"k\">do</span>\n        <span class=\"kd\">local</span> <span class=\"n\">var1</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"n\">varn</span> <span class=\"o\">=</span> <span class=\"n\">_f</span><span class=\"p\">(</span><span class=\"n\">_s</span><span class=\"p\">,</span> <span class=\"n\">_var</span><span class=\"p\">)</span>\n        <span class=\"n\">_var</span> <span class=\"o\">=</span> <span class=\"n\">var1</span>\n        <span class=\"k\">if</span> <span class=\"n\">_var</span> <span class=\"o\">==</span> <span class=\"kc\">nil</span> <span class=\"k\">then</span>\n            <span class=\"k\">break</span>\n        <span class=\"k\">end</span>\n        <span class=\"n\">block</span>\n    <span class=\"k\">end</span>\n<span class=\"k\">end</span>\n<p><span class=\"c1\">–简单例子</span><br />\n<span class=\"kd\">local</span> <span class=\"k\">function</span> <span class=\"nf\">square</span><span class=\"p\">(</span> <span class=\"n\">state</span><span class=\"p\">,</span> <span class=\"n\">control</span> <span class=\"p\">)</span><br />\n<span class=\"k\">if</span> <span class=\"n\">state</span> <span class=\"o\">&lt;=</span> <span class=\"n\">control</span> <span class=\"k\">then</span><br />\n<span class=\"k\">return</span><br />\n<span class=\"k\">end</span><br />\n<span class=\"n\">control</span> <span class=\"o\">=</span> <span class=\"n\">control</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><br />\n<span class=\"k\">return</span> <span class=\"n\">control</span><span class=\"p\">,</span> <span class=\"n\">control</span><span class=\"o\">*</span><span class=\"n\">control</span><br />\n<span class=\"k\">end</span><br />\n<span class=\"c1\">– 一开始 state = 9， control = 0，</span><br />\n<span class=\"c1\">– state不变，而控制变量 control 等于square的第一个返回值，不断累加 1</span><br />\n<span class=\"k\">for</span> <span class=\"n\">k</span><span class=\"p\">,</span><span class=\"n\">v</span> <span class=\"k\">in</span> <span class=\"n\">square</span><span class=\"p\">,</span><span class=\"mi\">9</span><span class=\"p\">,</span><span class=\"mi\">0</span> <span class=\"k\">do</span><br />\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">k</span><span class=\"p\">,</span><span class=\"n\">v</span><span class=\"p\">)</span><br />\n<span class=\"k\">if</span> <span class=\"n\">k</span> <span class=\"o\">==</span> <span class=\"kc\">nil</span> <span class=\"k\">then</span><br />\n<span class=\"k\">break</span><br />\n<span class=\"k\">end</span><br />\n<span class=\"k\">end</span><br />\n</code></pre></div></div></p>\n<h3 id=\"pairs\">pairs</h3>\n<div class=\"language-lua highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">function</span> <span class=\"nf\">pairs</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"k\">function</span> <span class=\"p\">(</span> <span class=\"n\">tbl</span><span class=\"p\">,</span> <span class=\"n\">k</span> <span class=\"p\">)</span>\n    \t<span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nb\">next</span><span class=\"p\">(</span><span class=\"n\">tbl</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"p\">)</span>\n    \t<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"iter \"</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"p\">,</span><span class=\"n\">v</span><span class=\"p\">)</span>\n    \t<span class=\"k\">if</span> <span class=\"n\">v</span> <span class=\"k\">then</span>\n    \t\t<span class=\"k\">return</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">v</span>\n    \t<span class=\"k\">end</span>\n    <span class=\"k\">end</span><span class=\"p\">,</span> <span class=\"n\">t</span><span class=\"p\">,</span> <span class=\"kc\">nil</span>\n<span class=\"k\">end</span>\n<p><span class=\"kd\">local</span> <span class=\"n\">tt</span> <span class=\"o\">=</span> <span class=\"p\">&#123;&#125;</span><br />\n<span class=\"n\">tt</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><br />\n<span class=\"n\">tt</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">2</span><br />\n<span class=\"n\">tt</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">nil</span><br />\n<span class=\"n\">tt</span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">4</span></p>\n<p><span class=\"c1\">–for k,v in pairs(tt) do</span><br />\n<span class=\"c1\">–\tprint(k,v)</span><br />\n<span class=\"c1\">–end</span></p>\n<p><span class=\"k\">do</span><br />\n<span class=\"kd\">local</span> <span class=\"n\">_f</span><span class=\"p\">,</span> <span class=\"n\">_s</span><span class=\"p\">,</span> <span class=\"n\">_var</span> <span class=\"o\">=</span> <span class=\"nb\">pairs</span><span class=\"p\">(</span><span class=\"n\">tt</span><span class=\"p\">)</span> <span class=\"c1\">– _f 是迭代函数，_s 是状态变量，要迭代的对象，即传入的tt，_var 是控制变量</span><br />\n<span class=\"k\">while</span> <span class=\"kc\">true</span> <span class=\"k\">do</span><br />\n<span class=\"kd\">local</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"n\">_f</span><span class=\"p\">(</span><span class=\"n\">_s</span><span class=\"p\">,</span> <span class=\"n\">_var</span><span class=\"p\">)</span>  <span class=\"c1\">–执行迭代函数，返回 k,v，迭代结束时两个都是nil</span><br />\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">“call iter :”</span><span class=\"p\">,</span><span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">)</span><br />\n<span class=\"n\">_var</span> <span class=\"o\">=</span> <span class=\"n\">k</span>\t<span class=\"c1\">–刷新控制变量</span><br />\n<span class=\"k\">if</span> <span class=\"n\">_var</span> <span class=\"o\">==</span> <span class=\"kc\">nil</span> <span class=\"k\">then</span><br />\n<span class=\"k\">break</span><br />\n<span class=\"k\">end</span><br />\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">“call block :”</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">)</span><br />\n<span class=\"k\">end</span><br />\n<span class=\"k\">end</span></p>\n<p><span class=\"c1\">–输出</span><br />\n<span class=\"cm\">–[[<br />\niterator :      1       1<br />\ncall iter :     1       1<br />\ncall block :    1       1<br />\niterator :      2       2<br />\ncall iter :     2       2<br />\ncall block :    2       2<br />\niterator :      4       4<br />\ncall iter :     4       4<br />\ncall block :    4       4<br />\niterator :      nil     nil<br />\ncall iter :     nil     nil<br />\n]]</span><br />\n</code></pre></div></div></p>\n<h3 id=\"ipairs\">ipairs</h3>\n<div class=\"language-lua highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">local</span> <span class=\"n\">tt</span> <span class=\"o\">=</span> <span class=\"p\">&#123;&#125;</span>\n<span class=\"n\">tt</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n<span class=\"n\">tt</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>\n<span class=\"n\">tt</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">nil</span>\n<span class=\"n\">tt</span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">4</span>\n<p><span class=\"k\">function</span> <span class=\"nf\">ipairs</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">)</span><br />\n<span class=\"k\">return</span> <span class=\"k\">function</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">)</span><br />\n<span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><br />\n<span class=\"k\">if</span> <span class=\"n\">a</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"k\">then</span><br />\n<span class=\"c1\">–从这里可以看出，tt[4]不会被输出了，某个下标的元素不存在就会中断</span><br />\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;iterator : &quot;</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">])</span><br />\n<span class=\"k\">return</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span><br />\n<span class=\"k\">end</span><br />\n<span class=\"k\">end</span><span class=\"p\">,</span> <span class=\"n\">t</span><span class=\"p\">,</span> <span class=\"mi\">0</span><br />\n<span class=\"k\">end</span></p>\n<p><span class=\"c1\">– for i,v in ipairs(tt) do</span><br />\n<span class=\"c1\">– \tprint(i,v)</span><br />\n<span class=\"c1\">– end</span></p>\n<p><span class=\"k\">do</span><br />\n<span class=\"kd\">local</span> <span class=\"n\">_f</span><span class=\"p\">,</span> <span class=\"n\">_s</span><span class=\"p\">,</span> <span class=\"n\">_var</span> <span class=\"o\">=</span> <span class=\"nb\">ipairs</span><span class=\"p\">(</span><span class=\"n\">tt</span><span class=\"p\">)</span>\t<span class=\"c1\">–_f 是迭代函数，_s 是状态变量，要迭代的对象，即传入的tt，_var 是控制变量</span><br />\n<span class=\"k\">while</span> <span class=\"kc\">true</span> <span class=\"k\">do</span><br />\n<span class=\"kd\">local</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"n\">_f</span><span class=\"p\">(</span><span class=\"n\">_s</span><span class=\"p\">,</span> <span class=\"n\">_var</span><span class=\"p\">)</span><br />\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;call iter : &quot;</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">)</span><br />\n<span class=\"n\">_var</span> <span class=\"o\">=</span> <span class=\"n\">i</span><br />\n<span class=\"k\">if</span> <span class=\"n\">_var</span> <span class=\"o\">==</span> <span class=\"kc\">nil</span> <span class=\"k\">then</span><br />\n<span class=\"k\">break</span><br />\n<span class=\"k\">end</span><br />\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;call block : &quot;</span><span class=\"p\">,</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">)</span><br />\n<span class=\"k\">end</span><br />\n<span class=\"k\">end</span></p>\n<p><span class=\"c1\">–输出</span><br />\n<span class=\"cm\">–[[<br />\niterator :      1       1<br />\ncall iter :     1       1<br />\ncall block :    1       1<br />\niterator :      2       2<br />\ncall iter :     2       2<br />\ncall block :    2       2<br />\ncall iter :     nil     nil<br />\n]]</span><br />\n</code></pre></div></div></p>\n<h3 id=\"next\">next</h3>\n<p>next 函数原型是 <strong>next( table [ , index] )</strong></p>\n<p>table 是要遍历的表</p>\n<p>index ：next返回的值即是index索引的下一个值，当index为nil时，将返回第一个索引的值，当索引号为最后一个索引或者表为空时返回nil</p>\n<p>常用 <strong>next(table)</strong> 是否返回nil来判断表是否是空表</p>\n<div class=\"language-lua highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">local</span> <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"p\">&#123;</span><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"s2\">\"a\"</span><span class=\"p\">,</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"s2\">\"b\"</span><span class=\"p\">,</span> <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"s2\">\"c\"</span><span class=\"p\">,</span> <span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"s2\">\"d\"</span><span class=\"p\">&#125;</span>\n<span class=\"kd\">local</span> <span class=\"n\">value</span>\n<span class=\"k\">while</span> <span class=\"nb\">next</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">)</span> <span class=\"k\">do</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"nb\">next</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">))</span>\n    <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"nb\">next</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">)</span>\n<span class=\"k\">end</span>\n<p><span class=\"c1\">–输出</span><br />\n<span class=\"cm\">–[[<br />\na       a<br />\nd       d<br />\nc       c<br />\nb       b<br />\n]]</span><br />\n</code></pre></div></div></p>\n","text":" &lt;h2 id=&quot;迭代器和闭包&quot;&gt;迭代器和闭包&lt;/h2&gt; 迭代器可以遍历集合的每一个元素，在lua中常常使用函数来描述迭代器，每次调用该函数就返回集合的下一个元素。 迭代器需要保留上一次成功调用的状态和下一次成功调用的状态，也就是它知道...","link":"","photos":[],"count_time":{"symbolsCount":"3.7k","symbolsTime":"3 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%B3%9B%E5%9E%8Bfor\"><span class=\"toc-text\">泛型for</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B3%9B%E5%9E%8Bfor%E7%9A%84%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B\"><span class=\"toc-text\">泛型for的执行过程</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#pairs\"><span class=\"toc-text\">pairs</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#ipairs\"><span class=\"toc-text\">ipairs</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#next\"><span class=\"toc-text\">next</span></a></li></ol></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Programming in Lua(Thrid Edition)笔记","uid":"a502732b8dc58224e972b6c53538b8c4","slug":"zl/2016-01-01-159_Programming in Lua(Thrid Edition)笔记","date":"2024-04-03T03:47:33.051Z","updated":"2024-04-03T03:47:33.051Z","comments":true,"path":"api/articles/zl/2016-01-01-159_Programming in Lua(Thrid Edition)笔记.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"16 Object-oriented Programming 对象和方法1234567891011Account = { balance = 0, withdraw = function (self, v) self.balance = self.balance - v end}...","link":"","photos":[],"count_time":{"symbolsCount":"3.5k","symbolsTime":"3 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"cocos2dx lua socket 使用","uid":"52b7141b34fb98dfea442c44e76f4f96","slug":"zl/2016-01-01-158_cocos2dx lua socket 使用","date":"2024-04-03T03:47:33.050Z","updated":"2024-04-03T03:47:33.051Z","comments":true,"path":"api/articles/zl/2016-01-01-158_cocos2dx lua socket 使用.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"从事cocos2dx也有好几年了,从开始的懵懂到现在（不知道如何评价自己，至少能把游戏做出来） 中途磕磕碰碰 想分享下tcp socket在lua中的使用 首先还是引入socket库和定义class和状态码 参考了quick的simple tcp 使用方法 local gameS...","link":"","photos":[],"count_time":{"symbolsCount":"18k","symbolsTime":"17 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}