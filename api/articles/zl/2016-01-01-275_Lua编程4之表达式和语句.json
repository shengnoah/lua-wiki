{"title":"Lua编程4之表达式和语句","uid":"673ce118e6bfa2b1bda337e3ee7a4f70","slug":"zl/2016-01-01-275_Lua编程4之表达式和语句","date":"2024-04-03T03:47:33.137Z","updated":"2024-04-03T03:47:33.137Z","comments":true,"path":"api/articles/zl/2016-01-01-275_Lua编程4之表达式和语句.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<pre><code>    &lt;p&gt;思考并回答以下问题：&lt;br&gt;1.如何创建一个空表？&lt;/p&gt;\n</code></pre>\n<p>学习了数据类型和变量之后，就可以开始写代码的表达式，然后进一步写语句了。</p>\n<h2 id=\"算术操作符\"><a href=\"https://chebincarl.github.io/#%E7%AE%97%E6%9C%AF%E6%93%8D%E4%BD%9C%E7%AC%A6\" class=\"headerlink\" title=\"算术操作符\"></a><span style=\"color:#EF7060;\">算术操作符</span></h2><p>Lua支持常规算术操作符有：二元的“+”、“-”、“*”、“/”、“^”(指数)、“%”(取模)，一元的“-”(负号)。所有这些操作符都可用于实数。</p>\n<p>然而需要特别说明的是取模操作符(%)，Lua中对该操作符的定义为：</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a % b == a - <span class=\"built_in\">floor</span>(a / b) * b</span><br></pre></td></tr></table></figure>\n<p>由此可以推演出x % 1的结果为x的小数部分，而x - x % 1的结果则为x的整数部分。类似的，x - x % 0.01则是x精确到小数点后两位的结果。</p>\n<h2 id=\"关系操作符\"><a href=\"https://chebincarl.github.io/#%E5%85%B3%E7%B3%BB%E6%93%8D%E4%BD%9C%E7%AC%A6\" class=\"headerlink\" title=\"关系操作符\"></a><span style=\"color:#EF7060;\">关系操作符</span></h2><p>Lua支持的关系操作符有：&gt;、&lt;、&gt;=、&lt;=、==、~ =（不等于），所有这些操作符的结果均为true或false。</p>\n<p>操作符==用于相等性测试，操作符~ =用于不等性测试。这两个操作符可以应用于任意两个值。如果两个值的类型不同，Lua就认为他们不等。nil值只与其自身相等。</p>\n<p>对于table、userdata和函数，Lua是通过引用进行比较的。也就是说，只有当他们引用同一个对象时，才视为相等。如：</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = {}</span><br><span class=\"line\">a.x = <span class=\"number\">1</span></span><br><span class=\"line\">a.y = <span class=\"number\">0</span></span><br><span class=\"line\">b = {}</span><br><span class=\"line\">b.x = <span class=\"number\">1</span></span><br><span class=\"line\">b.y = <span class=\"number\">1</span></span><br><span class=\"line\">c = a</span><br></pre></td></tr></table></figure>\n<p>其结果是a == c，但a ~ = b。<br>对于字符串的比较，Lua是按照字符次序比较的。</p>\n<h2 id=\"逻辑操作符\"><a href=\"https://chebincarl.github.io/#%E9%80%BB%E8%BE%91%E6%93%8D%E4%BD%9C%E7%AC%A6\" class=\"headerlink\" title=\"逻辑操作符\"></a><span style=\"color:#EF7060;\">逻辑操作符</span></h2><p>Lua支持的逻辑操作符有：and、or和not。</p>\n<p>与条件控制语句一样，所有的逻辑操作符都将false和nil视为假，其他的结果均为真。</p>\n<p>和其他大多数语言一样，Lua中的and和or都使用“短路原则”。</p>\n<p>在Lua中有一种惯用写法x = x or v，它等价于：if not x then x = v end。</p>\n<p>这里还有一种基于“短路原则”的惯用写法，如：</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x = <span class=\"number\">10</span></span><br><span class=\"line\">y = <span class=\"number\">9</span></span><br><span class=\"line\"><span class=\"built_in\">max</span> = (x &gt; y) <span class=\"keyword\">and</span> x <span class=\"keyword\">or</span> y</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">max</span>) </span><br></pre></td></tr></table></figure>\n<p>这等价于C#语言中max = (x &gt; y) ? x : y。</p>\n<h2 id=\"字符串连接\"><a href=\"https://chebincarl.github.io/#%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BF%9E%E6%8E%A5\" class=\"headerlink\" title=\"字符串连接\"></a><span style=\"color:#EF7060;\">字符串连接</span></h2><p>昨天已经提到了字符串连接操作符(..)，这里再给出一些简单的示例。</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"Hello \"</span> .. <span class=\"string\">\"World) -- Hello World</span></span><br><span class=\"line\"><span class=\"string\">print(0 .. 1)  --01</span></span><br></pre></td></tr></table></figure>\n<p>即使连接操作符的操作数为数值类型，在执行时Lua仍会将其自动转换为字符串。</p>\n<h2 id=\"table构造器\"><a href=\"https://chebincarl.github.io/#table%E6%9E%84%E9%80%A0%E5%99%A8\" class=\"headerlink\" title=\"table构造器\"></a><span style=\"color:#EF7060;\">table构造器</span></h2><p>构造器用于构建和初始化table的表达式。这是Lua特有的表达式，也是Lua中最有用、最通用的机制之一。</p>\n<p>其中最简单的构造器是空构造器<span style=\"color:red\">{}</span>，用于创建空table。</p>\n<p>我们通过构造器还可以初始化数组，如：</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">days = {<span class=\"string\">\"Sunday\"</span>,<span class=\"string\">\"Monday\"</span>,<span class=\"string\">\"Tuesday\"</span>,<span class=\"string\">\"Wednesday\"</span>,<span class=\"string\">\"Thursday\"</span>,<span class=\"string\">\"Friday\"</span>,<span class=\"string\">\"Saturday\"</span>}</span><br><span class=\"line\"><span class=\"keyword\">for</span> i = <span class=\"number\">1</span>,#days <span class=\"keyword\">do</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(days[i])</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--Tuesday</span></span><br><span class=\"line\"><span class=\"comment\">--Wednesday</span></span><br><span class=\"line\"><span class=\"comment\">--Thursday</span></span><br><span class=\"line\"><span class=\"comment\">--Friday</span></span><br><span class=\"line\"><span class=\"comment\">--Saturday</span></span><br></pre></td></tr></table></figure>\n<p>从输出结果可以看出，days在构造后会将自动初始化，其中days[1]被初始化为”Sunday”，days[2]为”Monday”，以此类推。</p>\n<p>Lua中还提供了另外一种特殊的语法用于初始化记录风格的table。<br>如：a = { x = 10, y = 20 }，其等价于：a = {}; a.x = 10; a.y = 20</p>\n<p>在实际编程时我们也可以将这两种初始化方式组合在一起使用，如：</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">polyline = {color = <span class=\"string\">\"blue\"</span>, thickness = <span class=\"number\">2</span>, npoints = <span class=\"number\">4</span>, </span><br><span class=\"line\">    {x = <span class=\"number\">0</span>, y = <span class=\"number\">0</span>},</span><br><span class=\"line\">    {x = <span class=\"number\">10</span>, y = <span class=\"number\">0</span>},</span><br><span class=\"line\">    {x = <span class=\"number\">-10</span>, y = <span class=\"number\">1</span>},</span><br><span class=\"line\">    {x = <span class=\"number\">0</span>, y = <span class=\"number\">1</span>} }</span><br><span class=\"line\"><span class=\"built_in\">print</span>(polyline[<span class=\"string\">\"color\"</span>]);</span><br><span class=\"line\"><span class=\"built_in\">print</span>(polyline[<span class=\"number\">2</span>].x)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(polyline[<span class=\"number\">4</span>].y)</span><br><span class=\"line\"><span class=\"comment\">--输出结果如下：</span></span><br><span class=\"line\"><span class=\"comment\">--blue</span></span><br><span class=\"line\"><span class=\"comment\">--10</span></span><br><span class=\"line\"><span class=\"comment\">--1</span></span><br></pre></td></tr></table></figure>\n<p>除了以上两种构造初始化方式之外，Lua还提供另外一种更为通用的方式，如：</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">opnames = { [<span class=\"string\">\"+\"</span>] = <span class=\"string\">\"add\"</span>, [<span class=\"string\">\"-\"</span>] = <span class=\"string\">\"sub\"</span>, [<span class=\"string\">\"*\"</span>] = <span class=\"string\">\"mul\"</span>, [<span class=\"string\">\"/\"</span>] = <span class=\"string\">\"div\"</span>}</span><br><span class=\"line\"><span class=\"built_in\">print</span>(opnames[<span class=\"string\">\"+\"</span>])</span><br><span class=\"line\">i = <span class=\"number\">20</span>; s = <span class=\"string\">\"-\"</span></span><br><span class=\"line\">a = { [i + <span class=\"number\">0</span>] = s, [i + <span class=\"number\">1</span>] = s .. s, [i + <span class=\"number\">2</span>] = s..s..s }</span><br><span class=\"line\"><span class=\"built_in\">print</span>(a[<span class=\"number\">22</span>])</span><br></pre></td></tr></table></figure>\n<p>对于table的构造器，还有两个需要了解的语法规则，如：</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = { [<span class=\"number\">1</span>] = <span class=\"string\">\"red\"</span>, [<span class=\"number\">2</span>] = <span class=\"string\">\"green\"</span>, [<span class=\"number\">3</span>] = <span class=\"string\">\"blue\"</span>, }</span><br></pre></td></tr></table></figure>\n<p>这里需要注意最后一个元素的后面仍然可以保留逗号(,)，这一点类似于C语言中的枚举。</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = {x = <span class=\"number\">10</span>, y = <span class=\"number\">45</span>; <span class=\"string\">\"one\"</span>, <span class=\"string\">\"two\"</span>, <span class=\"string\">\"three\"</span> }</span><br></pre></td></tr></table></figure>\n<p>可以看到上面的声明中同时存在逗号,和分号;两种元素分隔符，这种写法在Lua中是允许的。我们通常会将分号;用于分隔不同初始化类型的元素，如上例中分号之前的初始化方式为记录初始化方式，而后面则是数组初始化方式。</p>\n<h1 id=\"Lua语句\"><a href=\"https://chebincarl.github.io/#Lua%E8%AF%AD%E5%8F%A5\" class=\"headerlink\" title=\"Lua语句\"></a><span style=\"color:#039BE5;\">Lua语句</span></h1><h2 id=\"赋值语句\"><a href=\"https://chebincarl.github.io/#%E8%B5%8B%E5%80%BC%E8%AF%AD%E5%8F%A5\" class=\"headerlink\" title=\"赋值语句\"></a><span style=\"color:#EF7060;\">赋值语句</span></h2><p>Lua中的赋值语句和其它编程语言基本相同，唯一的差别是Lua支持“多重赋值”，如：a, b = 10, 2 * x，其等价于a = 10; b = 2 * x。</p>\n<p>然而需要说明的是，Lua在赋值之前需要先计算等号右边的表达式，在每一个表达式都得到结果之后再进行赋值。因此，我们可以这样写变量交互：x,y = y,x。</p>\n<p>如果等号右侧的表达式数量少于左侧变量的数量，Lua会将左侧多出的变量的值置为nil，如果相反，Lua将忽略右侧多出的表达式。</p>\n<h2 id=\"局部变量与块\"><a href=\"https://chebincarl.github.io/#%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F%E4%B8%8E%E5%9D%97\" class=\"headerlink\" title=\"局部变量与块\"></a><span style=\"color:#EF7060;\">局部变量与块</span></h2><p>Lua中的局部变量定义语法为：local i = 1，其中local关键字表示该变量为局部变量。和全局变量不同的是，局部变量的作用范围仅限于其所在的进程块。Lua中的进程可以为控制结构的执行体、函数执行体或者是一个进程块，如：</p>\n<p>下面的x变量仅在while循环内有效。</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> i &lt;= x <span class=\"keyword\">do</span></span><br><span class=\"line\">    <span class=\"keyword\">local</span> x = i * <span class=\"number\">2</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(x)</span><br><span class=\"line\">    i = i + <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<p>和其它编程语言一样，如果有可能尽量使用局部变量，以免造成全局环境的变量名污染。同时由于局部变量的有效期更短，这样垃圾收集器可以及时对其进行清理，从而得到更多的可用内存。</p>\n<h2 id=\"流程控制\"><a href=\"https://chebincarl.github.io/#%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6\" class=\"headerlink\" title=\"流程控制\"></a><span style=\"color:#EF7060;\">流程控制</span></h2><p>Lua中提供的控制语句和其它大多数开发语言所提供的基本相同，因此这里仅仅是进行简单的列举。然后再给出差异部分的详细介绍。如：</p>\n<p>** if then else **</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> a &lt; <span class=\"number\">0</span> <span class=\"keyword\">then</span></span><br><span class=\"line\">    b = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">    b = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<p>** if elseif else then **</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> a &lt; <span class=\"number\">0</span> <span class=\"keyword\">then</span> </span><br><span class=\"line\">    b = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">elseif</span> a == <span class=\"number\">0</span> <span class=\"keyword\">then</span></span><br><span class=\"line\">    b = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">    b = <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<p>** while **</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">local</span> i= <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> a[i] <span class=\"keyword\">do</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(a[i])</span><br><span class=\"line\">    i = i + <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<p>** repeat **</p>\n<p>类似C#中的while…do</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">repeat</span></span><br><span class=\"line\">    line = <span class=\"built_in\">io</span>.<span class=\"built_in\">read</span>()</span><br><span class=\"line\"><span class=\"keyword\">until</span> line ~= <span class=\"string\">\"\"</span> <span class=\"comment\">--直到until的条件为真时结束。</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(line)</span><br></pre></td></tr></table></figure>\n<p>** for **</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> var=begin,last,step <span class=\"keyword\">do</span> <span class=\"comment\">--如果没有step变量，begin的缺省步长为1。</span></span><br><span class=\"line\">    i = i + <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<p>需要说明的是，for循环开始处的三个变量begin、last和step，如果它们是表达式的返回值，那么该表达式将仅执行一次。再有就是不要在for的循环体内修改变量var的值，否则会导致不可预知的结果。</p>\n<p>** foreach **</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> i, v <span class=\"keyword\">in</span> <span class=\"built_in\">ipairs</span>(a) <span class=\"keyword\">do</span>  <span class=\"comment\">--ipairs是Lua自带的系统函数，返回遍历数组的迭代器。</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(v)</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> k <span class=\"keyword\">in</span> <span class=\"built_in\">pairs</span>(t) <span class=\"keyword\">do</span>      <span class=\"comment\">--打印table t中的所有key。</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(k)</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<p>见如下示例代码：</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">days = {<span class=\"string\">\"Sunday\"</span>, <span class=\"string\">\"Monday\"</span>, <span class=\"string\">\"Tuesday\"</span>, <span class=\"string\">\"Wednesday\"</span>, <span class=\"string\">\"Thursday\"</span>, <span class=\"string\">\"Friday\"</span>, <span class=\"string\">\"Saturday\"</span> }</span><br><span class=\"line\">revDays = {}</span><br><span class=\"line\"><span class=\"keyword\">for</span> k, v <span class=\"keyword\">in</span> <span class=\"built_in\">ipairs</span>(days) <span class=\"keyword\">do</span></span><br><span class=\"line\">    revDays[v] = k</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> k <span class=\"keyword\">in</span> <span class=\"built_in\">pairs</span>(revDays) <span class=\"keyword\">do</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(k .. <span class=\"string\">\" = \"</span> .. revDays[k])</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--输出结果为：</span></span><br><span class=\"line\"><span class=\"comment\">--Saturday = 7</span></span><br><span class=\"line\"><span class=\"comment\">--Tuesday = 3</span></span><br><span class=\"line\"><span class=\"comment\">--Wednesday = 4</span></span><br><span class=\"line\"><span class=\"comment\">--Friday = 6</span></span><br><span class=\"line\"><span class=\"comment\">--Sunday = 1</span></span><br><span class=\"line\"><span class=\"comment\">--Thursday = 5</span></span><br><span class=\"line\"><span class=\"comment\">--Monday = 2</span></span><br></pre></td></tr></table></figure>\n<p>** break **<br>和C#语言循环中的break语义完全相同，即跳出最内层循环。</p>","text":" &lt;p&gt;思考并回答以下问题：&lt;br&gt;1.如何创建一个空表？&lt;/p&gt; 学习了数据类型和变量之后，就可以开始写代码的表达式，然后进一步写语句了。 算术操作符Lua支持常规算术操作符有：二元的“+”、“-”、“*”、“/”、“^”(指数)、“%”(取...","link":"","photos":[],"count_time":{"symbolsCount":"3.9k","symbolsTime":"4 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%AE%97%E6%9C%AF%E6%93%8D%E4%BD%9C%E7%AC%A6\"><span class=\"toc-text\">算术操作符</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%85%B3%E7%B3%BB%E6%93%8D%E4%BD%9C%E7%AC%A6\"><span class=\"toc-text\">关系操作符</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%80%BB%E8%BE%91%E6%93%8D%E4%BD%9C%E7%AC%A6\"><span class=\"toc-text\">逻辑操作符</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BF%9E%E6%8E%A5\"><span class=\"toc-text\">字符串连接</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#table%E6%9E%84%E9%80%A0%E5%99%A8\"><span class=\"toc-text\">table构造器</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Lua%E8%AF%AD%E5%8F%A5\"><span class=\"toc-text\">Lua语句</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%B5%8B%E5%80%BC%E8%AF%AD%E5%8F%A5\"><span class=\"toc-text\">赋值语句</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F%E4%B8%8E%E5%9D%97\"><span class=\"toc-text\">局部变量与块</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6\"><span class=\"toc-text\">流程控制</span></a></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"基于ngx_lua的分流系统设计","uid":"772134e6021c5f0f3a759af6775d6b20","slug":"zl/2016-01-01-278_基于ngx_lua的分流系统设计","date":"2024-04-03T03:47:33.138Z","updated":"2024-04-03T03:47:33.138Z","comments":true,"path":"api/articles/zl/2016-01-01-278_基于ngx_lua的分流系统设计.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":" &lt;h3 id=&quot;导言&quot;&gt;&lt;a href=&quot;https://fankeke.github.io/#%E5%AF%BC%E8%A8%80&quot; class=&quot;headerlink&quot; title=&quot;导...","link":"","photos":[],"count_time":{"symbolsCount":"1.2k","symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Lua","uid":"15b0cdc6d03f6c3f6bf8d3a7ff197317","slug":"zl/2016-01-01-276_Lua","date":"2024-04-03T03:47:33.137Z","updated":"2024-04-03T03:47:33.137Z","comments":true,"path":"api/articles/zl/2016-01-01-276_Lua.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":" &lt;p&gt; 我们要明确一个前提：Lua是动态型语言，变量是不需要类型定义，只需要为变量赋值。值可以存储在变量中，最为参数传递或结果返回。&lt;br&gt;一 基本类型&lt;br&gt; Lua有8个基本类型：nil、boolean、number、string、use...","link":"","photos":[],"count_time":{"symbolsCount":"2.6k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}