{"title":"wrk搭配lua脚本，个性化压测","uid":"5169212eef43cfe5f6352b48192f0e28","slug":"zl/2016-01-01-951_wrk搭配lua脚本，个性化压测","date":"2024-04-03T03:47:36.225Z","updated":"2024-04-03T03:47:36.226Z","comments":true,"path":"api/articles/zl/2016-01-01-951_wrk搭配lua脚本，个性化压测.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<h2 id=\"压测工具\">压测工具</h2>\n<ul>\n  <li>wrk</li>\n</ul>\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>wrk -t2 -c10 -d10s -s wrk.lua http://www.baidu.com\n</code></pre>\n</div>\n<ul>\n  <li>\n    <p>apache benchmark：性能基准测试时使用</p>\n  </li>\n  <li>\n    <p>Hey：go实现的压测工具</p>\n  </li>\n  <li>\n    <p>http_load：</p>\n  </li>\n</ul>\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>http_load -p 100 -s 10 urls\n</code></pre>\n</div>\n<ul>\n  <li>siege</li>\n</ul>\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>siege -c 200 -r 10 -f baidu.url\n</code></pre>\n</div>\n<h2 id=\"wrk\">wrk</h2>\n<p>对于一些动态构建的请求，比如：认证、校验、MD加密、http请求参数化， ab、http_load、siege都不能满足需求，倒是jmeter、wrk可以。\n更多的lua示例可以参照<a href=\"https://github.com/wg/wrk/tree/master/scripts\">github</a>\nwrk请求压测，调用lua分下面3个阶段：setup、running、done\n<img src=\"http://type.so/usr/uploads/2016/08/970528889.png\" alt=\"\"/></p>\n<ul>\n  <li>wrk的全局属性, 可以直接拿到lua中使用的</li>\n</ul>\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>wrk = &#123;\n  scheme  = &#34;http&#34;,\n  host    = &#34;localhost&#34;,\n  port    = nil,\n  method  = &#34;GET&#34;,\n  path    = &#34;/&#34;,\n  headers = &#123;&#125;,\n  body    = nil,\n  thread  = &lt;userdata&gt;,\n&#125;\n</code></pre>\n</div>\n<ul>\n  <li>wrk的全局方法, 可以直接拿到lua中使用的</li>\n</ul>\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>-- 生成整个request的string，例如：返回\n-- GET / HTTP/1.1\n-- Host: tool.lu\nfunction wrk.format(method, path, headers, body)\n<p>– 获取域名的IP和端口，返回table，例如：返回 <code>&#123;127.0.0.1:80&#125;</code><br />\nfunction wrk.lookup(host, service)</p>\n<p>– 判断addr是否能连接，例如：<code>127.0.0.1:80</code>，返回 true 或 false<br />\nfunction wrk.connect(addr)<br />\n</code></pre></p>\n</div>\n<ul>\n  <li>Setup阶段\nsetup是在线程创建之后，启动之前。</li>\n</ul>\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>function setup(thread)\n<p>– thread提供了1个属性，3个方法<br />\n– thread.addr 设置请求需要打到的ip<br />\n– thread:get(name) 获取线程全局变量<br />\n– thread:set(name, value) 设置线程全局变量<br />\n– thread:stop() 终止线程<br />\n</code></pre></p>\n</div>\n<ul>\n  <li>Running阶段</li>\n</ul>\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>function init(args)\n-- 每个线程仅调用1次，args 用于获取命令行中传入的参数, 例如 --env=pre\n<p>function delay()<br />\n– 每个线程调用多次，发送下一个请求之前的延迟, 单位为ms</p>\n<p>function request()<br />\n– 每个线程调用多次，返回http请求</p>\n<p>function response(status, headers, body)<br />\n– 每个线程调用多次，返回http响应<br />\n</code></pre></p>\n</div>\n<ul>\n  <li>Done阶段</li>\n</ul>\n<p>可以用于自定义结果报表，整个过程中只执行一次</p>\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>function done(summary, latency, requests)\n<p>latency.min              – minimum value seen<br />\nlatency.max              – maximum value seen<br />\nlatency.mean             – average value seen<br />\nlatency.stdev            – standard deviation<br />\nlatency:percentile(99.0) – 99th percentile value<br />\nlatency(i)               – raw value and count</p>\n<p>summary = &#123;<br />\nduration = N,  – run duration in microseconds<br />\nrequests = N,  – total completed requests<br />\nbytes    = N,  – total bytes received<br />\nerrors   = &#123;<br />\nconnect = N, – total socket connection errors<br />\nread    = N, – total socket read errors<br />\nwrite   = N, – total socket write errors<br />\nstatus  = N, – total HTTP status codes &gt; 399<br />\ntimeout = N  – total request timeouts<br />\n&#125;<br />\n&#125;<br />\n</code></pre></p>\n</div>\n<h2 id=\"示例秒杀系统qps压测\">示例，秒杀系统，QPS压测：</h2>\n<ul>\n  <li>接口：</li>\n</ul>\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>GET /miaosha/i/miaosha?goodsRandomName=0e67e331-c521-406a-b705-64e557c4c06c&amp;mobile=15050033920 HTTP/1.1\nHost: 127.0.0.1:8080\n</code></pre>\n</div>\n<ul>\n  <li>lua</li>\n</ul>\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>-- example script that demonstrates use of setup() to pass\n-- data to and from the threads\n<p>local counter = 1<br />\nlocal threads = &#123;&#125;</p>\n<p>function setup(thread)<br />\nthread:set(&quot;id&quot;, counter)<br />\ntable.insert(threads, thread)<br />\ncounter = counter + 1<br />\nend</p>\n<p>function init(args)<br />\nrequests  = 0<br />\nresponses = 0</p>\n<p>local msg = &quot;thread %d created&quot;<br />\nprint(msg:format(id))<br />\nend</p>\n<p>function request()<br />\nrequests = requests + 1<br />\nlocal returnRequest = &quot;/miaosha/i/miaosha?goodsRandomName=0e67e331-c521-406a-b705-64e557c4c06c&quot;<br />\n… &quot;&amp;mobile=&quot; … math.random(15000000000,19999999999)<br />\nprint(wrk.format(nil, returnRequest))<br />\nreturn wrk.format(nil, returnRequest)<br />\nend</p>\n<p>function response(status, headers, body)<br />\nresponses = responses + 1<br />\nend</p>\n<p>function done(summary, latency, requests)<br />\nfor index, thread in ipairs(threads) do<br />\nlocal id        = thread:get(&quot;id&quot;)<br />\nlocal requests  = thread:get(&quot;requests&quot;)<br />\nlocal responses = thread:get(&quot;responses&quot;)<br />\nlocal msg = &quot;thread %d made %d requests and got %d responses&quot;<br />\nprint(msg:format(id, requests, responses))<br />\nend<br />\nend</p>\n<p></code></pre></p>\n</div>\n<ul>\n  <li>run</li>\n</ul>\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>wrk -t400 -c400 -d60s -s wrk.lua http://127.0.0.1:8080\n</code></pre>\n</div>","text":"压测工具 wrk wrk -t2 -c10 -d10s -s wrk.lua http://www.baidu.com apache benchmark：性能基准测试时使用 Hey：go实现的压测工具 http_load： http_load -p 100 -s 10 urls ...","link":"","photos":[],"count_time":{"symbolsCount":"3.4k","symbolsTime":"3 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8E%8B%E6%B5%8B%E5%B7%A5%E5%85%B7\"><span class=\"toc-text\">压测工具</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#wrk\"><span class=\"toc-text\">wrk</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B%E7%A7%92%E6%9D%80%E7%B3%BB%E7%BB%9Fqps%E5%8E%8B%E6%B5%8B\"><span class=\"toc-text\">示例，秒杀系统，QPS压测：</span></a></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Lua热更新注意事项","uid":"6cfaff3d0f2cb19bea925a3c9275e75f","slug":"zl/2016-01-01-950_Lua热更新注意事项 ","date":"2024-04-03T03:47:36.225Z","updated":"2024-04-03T03:47:36.225Z","comments":true,"path":"api/articles/zl/2016-01-01-950_Lua热更新注意事项 .json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"lua热更新，是当下最成熟、最热门，也是使用最多的热更新方案，单说热更新的话，它是完美的解决方案，但要从性能上说，它其实比C#要差上不少，自然而然地，如何优化性能也就成了开发人员最头痛的问题。 本文讲从一些数据调研出发，结合一些大牛的文章，对lua中性能优化的点进行汇总。 关于热...","link":"","photos":[],"count_time":{"symbolsCount":"4.8k","symbolsTime":"4 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Lua初识","uid":"608573cb0fd3dde7a12fef5738615f88","slug":"zl/2016-01-01-949_Lua初识","date":"2024-04-03T03:47:36.224Z","updated":"2024-04-03T03:47:36.224Z","comments":true,"path":"api/articles/zl/2016-01-01-949_Lua初识.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"Lua初识Lua 数据类型8种基本类型:nil :表示无效值(条件表达式代表false)boolean:布尔 包含两个值:true和falsenumber: 表示双精度类型的实浮点数string: 字符串有””或者’’表示userdata: 任意存储中的C数据结构function...","link":"","photos":[],"count_time":{"symbolsCount":"1.9k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}