{"title":"使用Redis+Lua实现分布式限流","uid":"658f1cb108ab3d6ed87e7d4d08617f1c","slug":"zl/2016-01-01-152_使用Redis+Lua实现分布式限流","date":"2024-04-03T03:47:33.046Z","updated":"2024-04-03T03:47:33.046Z","comments":true,"path":"api/articles/zl/2016-01-01-152_使用Redis+Lua实现分布式限流.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<h2 id=\"分布式限流\"><a href=\"#分布式限流\" class=\"headerlink\" title=\"分布式限流\"></a>分布式限流</h2><p>分布式限流最关键的是要将限流服务做成原子化,而解决方案可以使用 Redis+Lua 或者 Nginx+Lua 技术实现,通过这两种技术可以实现高并发和高性能。本文使用 Redis+Lua 实现时间窗内某个接口的请求数限流，实现了该功能后可以改造为限流总并发/请求数和限制总资源数。</p>\n<h2 id=\"Redis-Lua实现脚本\"><a href=\"#Redis-Lua实现脚本\" class=\"headerlink\" title=\"Redis+Lua实现脚本\"></a>Redis+Lua实现脚本</h2>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">local</span> key = KEYS[1] </div><div class=\"line\"><span class=\"built_in\">local</span> <span class=\"built_in\">limit</span> = tonumber(ARGV[1]) <span class=\"comment\">#限流大小</span></div><div class=\"line\"><span class=\"built_in\">local</span> current = tonumber(redis.call(<span class=\"string\">&#39;get&#39;</span>,key) or <span class=\"string\">&#34;0&#34;</span>) <span class=\"comment\">#获取不到 默认为0</span></div><div class=\"line\"><span class=\"keyword\">if</span> current + 1 &gt; <span class=\"built_in\">limit</span> <span class=\"keyword\">then</span> <span class=\"comment\">#如果超出限流大小</span></div><div class=\"line\">   <span class=\"built_in\">return</span> 0</div><div class=\"line\"><span class=\"keyword\">else</span>   <span class=\"comment\">#请求数+1，并设置2秒过期</span></div><div class=\"line\">\tredis.call(<span class=\"string\">&#34;INCRBY&#34;</span>,key,<span class=\"string\">&#34;1&#34;</span>)</div><div class=\"line\">\tredis.call(<span class=\"string\">&#34;expire&#34;</span>,key,<span class=\"string\">&#34;2&#34;</span>)</div><div class=\"line\">\t<span class=\"built_in\">return</span> 1</div><div class=\"line\">end</div></pre></td></tr></tbody></table></figure>\n<h2 id=\"Java中判断是否需要限流的代码\"><a href=\"#Java中判断是否需要限流的代码\" class=\"headerlink\" title=\"Java中判断是否需要限流的代码\"></a>Java中判断是否需要限流的代码</h2><figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>{</div><div class=\"line\">\t<span class=\"comment\">//redis lua 脚本</span></div><div class=\"line\">\tString luaScript = Files.toString(<span class=\"keyword\">new</span> File(<span class=\"string\">&#34;xxxxLimit.lua&#34;</span>)),Charset.defaultCharset());</div><div class=\"line\">\t<span class=\"comment\">//将当前时间戳取秒数（极端情况下机器时钟不准时会存在一些小问题)</span></div><div class=\"line\">\tString key = <span class=\"string\">&#34;ip:&#34;</span> + System.currentTimeMillis()/<span class=\"number\">1000</span>;</div><div class=\"line\">\t<span class=\"comment\">//限流大小</span></div><div class=\"line\">\tString limit = <span class=\"string\">&#34;30&#34;</span>; </div><div class=\"line\">\t<span class=\"comment\">//执行脚本</span></div><div class=\"line\">\t<span class=\"keyword\">return</span> (Long)jedis.eval(luaScript,Lists.newArrayList(key),Lists.newArrayList(limit)) == <span class=\"number\">1</span>;</div><div class=\"line\"></div><div class=\"line\">}</div></pre></td></tr></tbody></table></figure>","text":"分布式限流分布式限流最关键的是要将限流服务做成原子化,而解决方案可以使用 Redis+Lua 或者 Nginx+Lua 技术实现,通过这两种技术可以实现高并发和高性能。本文使用 Redis+Lua 实现时间窗内某个接口的请求数限流，实现了该功能后可以改造为限流总并发/请求数和限制...","link":"","photos":[],"count_time":{"symbolsCount":899,"symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%88%86%E5%B8%83%E5%BC%8F%E9%99%90%E6%B5%81\"><span class=\"toc-text\">分布式限流</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Redis-Lua%E5%AE%9E%E7%8E%B0%E8%84%9A%E6%9C%AC\"><span class=\"toc-text\">Redis+Lua实现脚本</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Java%E4%B8%AD%E5%88%A4%E6%96%AD%E6%98%AF%E5%90%A6%E9%9C%80%E8%A6%81%E9%99%90%E6%B5%81%E7%9A%84%E4%BB%A3%E7%A0%81\"><span class=\"toc-text\">Java中判断是否需要限流的代码</span></a></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"UtraEdit 支持Lua高亮","uid":"8ceb0c7065c3ad0a13f5f37e6d9d02b4","slug":"zl/2016-01-01-157_UtraEdit 支持Lua高亮","date":"2024-04-03T03:47:33.047Z","updated":"2024-04-03T03:47:33.050Z","comments":true,"path":"api/articles/zl/2016-01-01-157_UtraEdit 支持Lua高亮.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"UtraEdit 支持Lua高亮，网上已经有很多方法，但是都是基于相对老一点的 UE，在15.10版本中，UE支持Lua高亮的方法如下： 从网上Down下支持Lua的wordfiles，lua.uew 新建一个目录如D:wordfiles， 将UE安装目录下的所有wordfile...","link":"","photos":[],"count_time":{"symbolsCount":"2.9k","symbolsTime":"3 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Lua表存储优化","uid":"14b404630c970a5576f2e0be3e31af09","slug":"zl/2016-01-01-153_Lua表存储优化","date":"2024-04-03T03:47:33.046Z","updated":"2024-04-03T03:47:33.046Z","comments":true,"path":"api/articles/zl/2016-01-01-153_Lua表存储优化.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"用Python脚本实现对 Lua表的压缩 问题在研发过程中，通常会定义一些Excel表格，规定行列值让策划填写，然后，转成lua的table文件，直接使用。 但是，随着研发进行，项目迭代，表格将越来越大。 如果表格中存在大量重复数据，或者表格中很多列数值重复，则可以通过数据压缩给...","link":"","photos":[],"count_time":{"symbolsCount":"8.2k","symbolsTime":"7 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}