{"title":"Lua学习笔记（5）table的长度","uid":"3eed817c2d771d27a9e65958a41a2de6","slug":"zl/2016-01-01-717_Lua学习笔记（5）table的长度","date":"2024-04-03T03:47:35.951Z","updated":"2024-04-03T03:47:35.952Z","comments":true,"path":"api/articles/zl/2016-01-01-717_Lua学习笔记（5）table的长度.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<p>lua-5.1.5</p>\n<h1 id=\"疑问\">疑问</h1>\n<p>lua获取table长度的接口有很多：</p>\n<ul>\n  <li>table.getn()</li>\n  <li>table.maxn()</li>\n  <li>’#’操作符</li>\n</ul>\n<blockquote>\n  <p>推荐一篇文章：<a href=\"http://rangercyh.blog.51cto.com/1444712/1032925/\">浅析Lua中table的遍历</a></p>\n</blockquote>\n<p>但是也会出现神奇的情况，请看下面一小段代码：</p>\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>local t = &#123;111, x = 222, nil, 333, [10] = 555, &#123;&#125;, nil, nil&#125;\nprint(table.getn(t))    -- 4\nprint(#t)               -- 4\nprint(table.maxn(t))    -- 10\n--local t = &#123;111, nil, x = 222, nil, 333, [10] = 555, &#123;&#125;, nil, nil&#125;\n--local t = &#123;111, x = 222, nil, 333, [10] = 555, nil, &#123;&#125;, nil, nil&#125;\n</code></pre></div></div>\n<p>如果随机在t中插入nil，结果会让你大吃一惊，丈二和尚摸不着头脑。比如:</p>\n<ul>\n  <li>在111后面插入一个nil，结果是: 1, 1, 10</li>\n  <li>在555后面插入一个nil，结果却是：5, 5, 10</li>\n</ul>\n<p><em>这是为什么呢？有没有规律呢？</em></p>\n<h1 id=\"table的操作符\">table的#操作符</h1>\n<p>这里原因我先简单介绍一下，想弄更清楚的请自己看完之后看源代码，算是抛砖引玉^_^！上面的结果千奇百怪主要是和#操作符有关，#操作符最终获取table长度的函数是(文件ltable.c中)：</p>\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>/*\n** Try to find a boundary in table `t&#39;. A `boundary&#39; is an integer index\n** such that t[i] is non-nil and t[i+1] is nil (and 0 if t[1] is nil).\n*/\nint luaH_getn (Table *t) &#123;\n  unsigned int j = t-&gt;sizearray;\n  if (j &gt; 0 &amp;&amp; ttisnil(&amp;t-&gt;array[j - 1])) &#123;\n    /* there is a boundary in the array part: (binary) search for it */\n    unsigned int i = 0;\n    while (j - i &gt; 1) &#123;\n      unsigned int m = (i+j)/2;\n      if (ttisnil(&amp;t-&gt;array[m - 1])) j = m;\n      else i = m;\n    &#125;\n    return i;\n  &#125;\n  /* else must find a boundary in hash part */\n  else if (t-&gt;node == dummynode)  /* hash part is empty? */\n    return j;  /* that is easy... */\n  else return unbound_search(t, j);\n&#125;\n</code></pre></div></div>\n<p>只看很小的一部分：</p>\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>while (j - i &gt; 1) &#123;\n  unsigned int m = (i+j)/2;\n  if (ttisnil(&amp;t-&gt;array[m - 1])) j = m;\n  else i = m;\n&#125;\nreturn i;\n</code></pre></div></div>\n<blockquote>\n  <p>unbound_search函数中也有一部分逻辑和上面代码一样</p>\n</blockquote>\n<p>知道二分查找的人花一点时间应该很快能够理解这段代码的意思，从数组[i-j]中二分查找的方式遍历，如果不为ni的话，相当于长度增加了(i=m)；如果为nil的话，相当于长度减少了，也举个简单的例子：</p>\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>local t = &#123;1, 2, nil&#125;\nprint(&#34;#t1 = &#34;, #t1)\n--[[\ni=0, j=3\n(1)m=1, array[m-1]=1不为nil, i=m=1\n(2)m=2, array[m-1]=2不为nil, i=m=2\n(3)j-i &lt;=1循环结束，return i，结果为2\n]]\n<p>local t = &#123;1, nil, 2, nil&#125;<br />\nprint(&quot;#t1 = &quot;, #t1)<br />\n–[[<br />\ni=0, j=4<br />\n(1)m=2, array[m-1]=nil, j=m=2<br />\n(2)m=1, array[m-1]=1不为nil, i=m=1<br />\n(3)j-i &lt;=1循环结束，return i，结果为1<br />\n]]<br />\n</code></pre></div></div></p>\n<p>可以看到，ni的位置不确定性，让返回的长度变幻莫测了，这也就是为什么上面看到的结果千奇百怪了 ^_^</p>\n<h1 id=\"总结\">总结</h1>\n<ul>\n  <li>lua的’#’操作符获取的长度在table中间有nil的情况很不稳定</li>\n  <li>虽然看到代码还是有一定规律可循的，但我个人认为也不应该把这个规律用来计算这种table的长度</li>\n  <li>再回来看luaH_getn函数开头的一小段代码解释说明，会更容易理解一点:’Try to find a boundary in table <code class=\"highlighter-rouge\">t&#39;. A </code>boundary’ is an integer index such that t[i] is non-nil and t[i+1] is nil (and 0 if t[1] is nil).’</li>\n</ul>\n<h1 id=\"拓展\">拓展</h1>\n<h2 id=\"1unpack\">1.unpack({…})</h2>\n<p>我们会经常用到这种方式，比如传进来的参数是不定长的’…‘，然后用table的操作符’{}’括起来，变成一个table，然后使用unpack解包。恰好，前两天有个同事跟我们分享了这个使用方式的漏洞。一开始有点吃惊，看完上面的一些分析只会，也就能够明晰许多了。下面是同事的分享。</p>\n<h3 id=\"问题代码\">问题代码</h3>\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>function fnUnPack( ... )\n\tlocal p = &#123;...&#125;;\n\treturn unpack(p);\nend\n<p>print(fnUnPack(1, 2, 3));<br />\nprint(fnUnPack(1, 2, 3, nil ,4));<br />\nprint(fnUnPack(1, 2, 3, nil ,4, nil));<br />\n–结果<br />\n1\t2\t3<br />\n1\t2\t3\tnil\t4<br />\n1\t2\t3<br />\n</code></pre></div></div></p>\n<h3 id=\"解决办法\">解决办法</h3>\n<ul>\n  <li>(1)使用table的pack和unpack</li>\n</ul>\n<p>示例代码：</p>\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>function fnUnPack1( ... )\n\tlocal p = table.pack(...);\n\t return table.unpack(p, 1, p.n);\nend\n</code></pre></div></div>\n<blockquote>\n  <p>版本lua-5.2及以上</p>\n</blockquote>\n<ul>\n  <li>(2)使用select</li>\n</ul>\n<p>示例代码：</p>\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>function fnUnPack2( ... )\n\tlocal p = &#123;...&#125;\n\tlocal n = select(&#39;#&#39;, ...)\n\treturn unpack(p, 1, n);\nend\n</code></pre></div></div>\n<h2 id=\"2版本52及以上\">2.版本5.2及以上</h2>\n<ul>\n  <li>lua-5.2以上已经没有table.getn和table.maxn接口了</li>\n</ul>","text":"lua-5.1.5 疑问 lua获取table长度的接口有很多： table.getn() table.maxn() ’#’操作符 推荐一篇文章：浅析Lua中table的遍历 但是也会出现神奇的情况，请看下面一小段代码： local t = &#123;111, x = 222,...","link":"","photos":[],"count_time":{"symbolsCount":"3.1k","symbolsTime":"3 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%96%91%E9%97%AE\"><span class=\"toc-text\">疑问</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#table%E7%9A%84%E6%93%8D%E4%BD%9C%E7%AC%A6\"><span class=\"toc-text\">table的#操作符</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">总结</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%8B%93%E5%B1%95\"><span class=\"toc-text\">拓展</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1unpack\"><span class=\"toc-text\">1.unpack({…})</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%97%AE%E9%A2%98%E4%BB%A3%E7%A0%81\"><span class=\"toc-text\">问题代码</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95\"><span class=\"toc-text\">解决办法</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2%E7%89%88%E6%9C%AC52%E5%8F%8A%E4%BB%A5%E4%B8%8A\"><span class=\"toc-text\">2.版本5.2及以上</span></a></li></ol></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"lua之运算符","uid":"1e80f66d3215934d26ab06a86f32143c","slug":"zl/2016-01-01-719_lua之运算符","date":"2024-04-03T03:47:35.952Z","updated":"2024-04-03T03:47:35.953Z","comments":true,"path":"api/articles/zl/2016-01-01-719_lua之运算符.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"lua运算符 算术运算符 +，-，*（乘），/（除），%（取余），^(乘幂)，-（负号） 关系运算符 ==（等于），~=（不等于），&gt;，&lt;，&gt;=，&lt;= 逻辑运算符 and，or，not 其它运算符 ..（连接符），#（一元运算符，返回字符串或表的长度） 运...","link":"","photos":[],"count_time":{"symbolsCount":448,"symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Lua 正则表达式","uid":"c88054c1f5dd8702b469167d31691978","slug":"zl/2016-01-01-716_Lua 正则表达式","date":"2024-04-03T03:47:35.948Z","updated":"2024-04-03T03:47:35.951Z","comments":true,"path":"api/articles/zl/2016-01-01-716_Lua 正则表达式.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":" Lua字符串匹配 与正则相关的函数 str = &#34;{1:[1,2,3],2:{idx2:2,level:60,reward_idx:2001,ring:100},test:{1:100,2:200}}&#34; string.find(s, pattern[, init...","link":"","photos":[],"count_time":{"symbolsCount":"3.6k","symbolsTime":"3 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}