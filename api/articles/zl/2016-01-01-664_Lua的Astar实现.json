{"title":"Lua的Astar实现","uid":"10105a4388a2165382c1f20c48b78eba","slug":"zl/2016-01-01-664_Lua的Astar实现","date":"2024-04-03T03:47:35.890Z","updated":"2024-04-03T03:47:35.891Z","comments":true,"path":"api/articles/zl/2016-01-01-664_Lua的Astar实现.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<h2 id=\"用Lua实现了一个简单的方块A-寻路。\"><a href=\"#用Lua实现了一个简单的方块A-寻路。\" class=\"headerlink\" title=\"用Lua实现了一个简单的方块A*寻路。\"></a>用Lua实现了一个简单的方块A*寻路。</h2><p>A*寻路的原理是会计算路径，产生一个估值f值，这个估值是由起点到走过的路径g值和当前的位置到终点的估值h组成的。取这个估值的最小值来进行寻路，所以A*寻路的效率是由估值函数的效率决定的。<br/>代码分析：</p>\n<ul>\n<li><p>创建一个节点，该节点保存位置和估值信息，并保留父节点，相当于整个路径是由链式节点组成。</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">local</span> node = {}</div><div class=\"line\">node.<span class=\"built_in\">__index</span> = node</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(pos, h, p)</span></span></div><div class=\"line\">    <span class=\"keyword\">local</span> n = {}</div><div class=\"line\">    n.pos = {x = pos.x, y = pos.y}</div><div class=\"line\">    n.h = h</div><div class=\"line\">    n.parent = p</div><div class=\"line\">    n.g = <span class=\"number\">0</span></div><div class=\"line\">    <span class=\"keyword\">if</span> p ~= <span class=\"literal\">nil</span> <span class=\"keyword\">then</span></div><div class=\"line\">        n.g = p.g + <span class=\"number\">1</span></div><div class=\"line\">    <span class=\"keyword\">end</span></div><div class=\"line\">    n.f = n.g + n.h</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">setmetatable</span>(n, node)</div><div class=\"line\"><span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">node:get_pos</span><span class=\"params\">()</span></span></div><div class=\"line\">    <span class=\"keyword\">return</span> self.pos</div><div class=\"line\"><span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">node:get_g</span><span class=\"params\">()</span></span></div><div class=\"line\">    <span class=\"keyword\">return</span> self.g</div><div class=\"line\"><span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">node:get_f</span><span class=\"params\">()</span></span></div><div class=\"line\">    <span class=\"keyword\">return</span> self.f</div><div class=\"line\"><span class=\"keyword\">end</span></div></pre></td></tr></tbody></table></figure>\n</li>\n<li><p>开始寻路的时候，会把当前节点的四周节点加入开放列表中（寻找路径只会在开放列表中），把障碍物或者已经走过的路径放入关闭列表中（防止重复行走）</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">local</span> astar = {}</div><div class=\"line\">astar.<span class=\"built_in\">close</span> = {}</div><div class=\"line\">astar.<span class=\"built_in\">open</span> = {}</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">local</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">estimate_hvalue</span><span class=\"params\">(srcPos, dstPos)</span></span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">math</span>.<span class=\"built_in\">abs</span>(srcPos.x - dstPos.x) + <span class=\"built_in\">math</span>.<span class=\"built_in\">abs</span>(srcPos.y - dstPos.y);</div><div class=\"line\"><span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">--f值排序</span></div><div class=\"line\"><span class=\"keyword\">local</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">nodeSort</span><span class=\"params\">(l, r)</span></span></div><div class=\"line\">    <span class=\"keyword\">if</span> l:get_f() == r:get_f() <span class=\"keyword\">then</span></div><div class=\"line\">        <span class=\"keyword\">return</span> l:get_g() &gt; r:get_g()</div><div class=\"line\">    <span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> l:get_f() &lt; r:get_f()</div><div class=\"line\"><span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">local</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">contain</span><span class=\"params\">(t, pos)</span></span></div><div class=\"line\">    <span class=\"keyword\">for</span> _, v <span class=\"keyword\">in</span> <span class=\"built_in\">ipairs</span>(t) <span class=\"keyword\">do</span></div><div class=\"line\">        <span class=\"keyword\">if</span> v:get_pos().x == pos.x <span class=\"keyword\">and</span> v:get_pos().y == pos.y <span class=\"keyword\">then</span></div><div class=\"line\">            <span class=\"keyword\">return</span> v</div><div class=\"line\">        <span class=\"keyword\">end</span></div><div class=\"line\">    <span class=\"keyword\">end</span></div><div class=\"line\"><span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">astar:fitNode</span><span class=\"params\">(pos)</span></span></div><div class=\"line\">    <span class=\"keyword\">if</span> self.map[pos.x] ~= <span class=\"literal\">nil</span> <span class=\"keyword\">and</span> self.map[pos.x][pos.y] == <span class=\"number\">0</span> <span class=\"keyword\">then</span></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span></div><div class=\"line\">    <span class=\"keyword\">end</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span></div><div class=\"line\"><span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">--把周围4个节点不是墙或者没走过的节点加入开放列表中，开放列表中按f值从少到多排序</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">astar:addOtherNode</span><span class=\"params\">(curNode)</span></span></div><div class=\"line\">    <span class=\"keyword\">if</span> curNode == <span class=\"literal\">nil</span> <span class=\"keyword\">then</span> <span class=\"keyword\">return</span> <span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">local</span> d = {</div><div class=\"line\">        {x = <span class=\"number\">0</span>, y = <span class=\"number\">1</span>},</div><div class=\"line\">        {x = <span class=\"number\">0</span>, y = <span class=\"number\">-1</span>},</div><div class=\"line\">        {x = <span class=\"number\">-1</span>, y =  <span class=\"number\">0</span>},</div><div class=\"line\">        {x = <span class=\"number\">1</span>, y = <span class=\"number\">0</span>}</div><div class=\"line\">    }</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">table</span>.<span class=\"built_in\">insert</span>(self.<span class=\"built_in\">close</span>, curNode)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">local</span> newPos, h = {x = <span class=\"number\">0</span>, y = <span class=\"number\">0</span>}, <span class=\"number\">0</span></div><div class=\"line\">    <span class=\"keyword\">for</span> _, v <span class=\"keyword\">in</span> <span class=\"built_in\">ipairs</span>(d) <span class=\"keyword\">do</span></div><div class=\"line\">        newPos.x = curNode:get_pos().x + v.x</div><div class=\"line\">        newPos.y = curNode:get_pos().y + v.y</div><div class=\"line\">        h = estimate_hvalue(newPos, self.dstPos)</div><div class=\"line\">        <span class=\"keyword\">if</span> contain(self.<span class=\"built_in\">close</span>, newPos) == <span class=\"literal\">nil</span> <span class=\"keyword\">and</span> self:fitNode(newPos) <span class=\"keyword\">then</span></div><div class=\"line\">            <span class=\"built_in\">table</span>.<span class=\"built_in\">insert</span>(self.<span class=\"built_in\">open</span>, node.new(newPos, h, curNode))</div><div class=\"line\">        <span class=\"keyword\">end</span></div><div class=\"line\">    <span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">table</span>.<span class=\"built_in\">sort</span>(self.<span class=\"built_in\">open</span>, nodeSort)</div><div class=\"line\"><span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">--重复从开放列表中取f值低的节点，直到终点，然后把终点的节点和一连串的父节点组成路径</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">astar:makePath</span><span class=\"params\">()</span></span></div><div class=\"line\">    self.<span class=\"built_in\">close</span> = {}</div><div class=\"line\">    self.<span class=\"built_in\">open</span> = {}</div><div class=\"line\">    <span class=\"keyword\">local</span> <span class=\"built_in\">path</span> = {}</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">local</span> h = estimate_hvalue(self.srcPos, self.dstPos)</div><div class=\"line\">    <span class=\"keyword\">if</span> h == <span class=\"number\">0</span> <span class=\"keyword\">then</span> <span class=\"keyword\">return</span> <span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">local</span> n = node.new(self.srcPos, h, <span class=\"literal\">nil</span>)</div><div class=\"line\">    <span class=\"built_in\">table</span>.<span class=\"built_in\">insert</span>(self.<span class=\"built_in\">open</span>, n)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">local</span> last = <span class=\"literal\">nil</span></div><div class=\"line\">    <span class=\"keyword\">while</span> #self.<span class=\"built_in\">open</span> ~= <span class=\"number\">0</span> <span class=\"keyword\">and</span> last == <span class=\"literal\">nil</span> <span class=\"keyword\">do</span></div><div class=\"line\">        n = <span class=\"built_in\">table</span>.<span class=\"built_in\">remove</span>(self.<span class=\"built_in\">open</span>, <span class=\"number\">1</span>)</div><div class=\"line\">        self:addOtherNode(n)</div><div class=\"line\">        last = contain(self.<span class=\"built_in\">open</span>, self.dstPos)</div><div class=\"line\">    <span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">while</span> last ~= <span class=\"literal\">nil</span> <span class=\"keyword\">do</span></div><div class=\"line\">        <span class=\"built_in\">table</span>.<span class=\"built_in\">insert</span>(<span class=\"built_in\">path</span>, <span class=\"number\">1</span>, last)</div><div class=\"line\">        last = last.parent</div><div class=\"line\">    <span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">path</span></div><div class=\"line\"><span class=\"keyword\">end</span></div></pre></td></tr></tbody></table></figure>\n</li>\n<li><p>加载地图等资源进行寻路</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">local</span> astar = <span class=\"built_in\">require</span> <span class=\"string\">&#34;astar&#34;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">local</span> map = {</div><div class=\"line\">\t{<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>},</div><div class=\"line\">\t{<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>},</div><div class=\"line\">\t{<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>},</div><div class=\"line\">\t{<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>},</div><div class=\"line\">\t{<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>},</div><div class=\"line\">\t{<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>}</div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">printMap</span><span class=\"params\">()</span></span></div><div class=\"line\">    <span class=\"keyword\">for</span> i=<span class=\"number\">1</span>, #map <span class=\"keyword\">do</span></div><div class=\"line\">        <span class=\"keyword\">local</span> s = <span class=\"string\">&#34;&#34;</span></div><div class=\"line\">        <span class=\"keyword\">for</span> j=<span class=\"number\">1</span>, #map[i] <span class=\"keyword\">do</span></div><div class=\"line\">            s = s..<span class=\"built_in\">string</span>.<span class=\"built_in\">format</span>(<span class=\"string\">&#34;%d &#34;</span>, map[i][j])</div><div class=\"line\">        <span class=\"keyword\">end</span></div><div class=\"line\">        <span class=\"built_in\">print</span>(s)</div><div class=\"line\">    <span class=\"keyword\">end</span></div><div class=\"line\"><span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></div><div class=\"line\">    <span class=\"keyword\">local</span> <span class=\"built_in\">path</span> = astar:getPath({x = <span class=\"number\">1</span>, y = <span class=\"number\">1</span>}, {x = <span class=\"number\">3</span>, y = <span class=\"number\">4</span>}, map)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">path</span> ~= <span class=\"literal\">nil</span> <span class=\"keyword\">then</span></div><div class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#34;before&#34;</span>)</div><div class=\"line\">        printMap()</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">local</span> n = <span class=\"literal\">nil</span></div><div class=\"line\">        <span class=\"keyword\">for</span> i=<span class=\"number\">1</span>, #<span class=\"built_in\">path</span> <span class=\"keyword\">do</span></div><div class=\"line\">            n = <span class=\"built_in\">path</span>[i]</div><div class=\"line\">            map[n:get_pos().x][n:get_pos().y] = <span class=\"number\">2</span></div><div class=\"line\">        <span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#34;after&#34;</span>)</div><div class=\"line\">        printMap()</div><div class=\"line\">    <span class=\"keyword\">end</span></div><div class=\"line\"><span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\">main()</div></pre></td></tr></tbody></table></figure>\n</li>\n</ul>\n<p><img src=\"https://tacthgin.github.io/astar_result.png\" alt=\"\"/><br/>0是空地，1是墙壁，2是行走的路径</p>\n<h2 id=\"A-寻路的优化\"><a href=\"#A-寻路的优化\" class=\"headerlink\" title=\"A*寻路的优化\"></a>A*寻路的优化</h2><ul>\n<li>当地图比较大的时候，使用A*寻路的效率就会变低，这时候不用再一次函数计算中得到结果，可以在游戏帧中分几帧来计算。</li>\n<li>像魔兽或者帝国中，一大堆兵团进行寻路时候，可以使用队列中间的一个来进行计算，其他兵种靠偏移量来确定位置。</li>\n</ul>","text":"用Lua实现了一个简单的方块A*寻路。A*寻路的原理是会计算路径，产生一个估值f值，这个估值是由起点到走过的路径g值和当前的位置到终点的估值h组成的。取这个估值的最小值来进行寻路，所以A*寻路的效率是由估值函数的效率决定的。代码分析： 创建一个节点，该节点保存位置和估值信息，并保...","link":"","photos":[],"count_time":{"symbolsCount":"3.6k","symbolsTime":"3 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%94%A8Lua%E5%AE%9E%E7%8E%B0%E4%BA%86%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E6%96%B9%E5%9D%97A-%E5%AF%BB%E8%B7%AF%E3%80%82\"><span class=\"toc-text\">用Lua实现了一个简单的方块A*寻路。</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#A-%E5%AF%BB%E8%B7%AF%E7%9A%84%E4%BC%98%E5%8C%96\"><span class=\"toc-text\">A*寻路的优化</span></a></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"lua","uid":"df60e476b394b1dd4755ec96c53302ff","slug":"zl/2016-01-01-666_lua","date":"2024-04-03T03:47:35.891Z","updated":"2024-04-03T03:47:35.892Z","comments":true,"path":"api/articles/zl/2016-01-01-666_lua.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":" &lt;h3 id=&quot;问题概述&quot;&gt;问题概述&lt;/h3&gt;&lt;p&gt;在一次处理反馈问题过程中发现lua-nginx-module的balancer语法在keepalive场景下存在bug，当nginx通过已经建立的回源连接发送请求给原服务...","link":"","photos":[],"count_time":{"symbolsCount":"5.5k","symbolsTime":"5 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Lua strings","uid":"0adc49d28e6e085c65366848d026e74d","slug":"zl/2016-01-01-663_Lua strings","date":"2024-04-03T03:47:35.887Z","updated":"2024-04-03T03:47:35.887Z","comments":true,"path":"api/articles/zl/2016-01-01-663_Lua strings.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"字符串或串(String)是由数字、字母、下划线组成的一串字符。Lua 语言中字符串可以使用以下三种方式来表示： 单引号间的一串字符。 双引号间的一串字符。 [[和]]间的一串字符。 转义字符用于表示不能直接显示的字符，比如后退键，回车键，等。如在字符串转换双引号可以使用 “””...","link":"","photos":[],"count_time":{"symbolsCount":422,"symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}