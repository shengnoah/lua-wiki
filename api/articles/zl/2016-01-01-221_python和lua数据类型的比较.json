{"title":"python和lua数据类型的比较","uid":"ccf67b3289618f0a2dc00d8aa2b25e73","slug":"zl/2016-01-01-221_python和lua数据类型的比较","date":"2024-04-03T03:47:33.094Z","updated":"2024-04-03T03:47:33.094Z","comments":true,"path":"api/articles/zl/2016-01-01-221_python和lua数据类型的比较.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<pre><code>    &lt;div class=&quot;post-nav&quot;&gt;\n      &lt;div class=&quot;post-nav-next post-nav-item&quot;&gt;\n        \n          &lt;a href=&quot;https://hulinhong.com/2015/07/11/redis%E6%A6%82%E8%A6%81%E4%B9%8B%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/&quot; rel=&quot;next&quot; title=&quot;redis概要之数据类型&quot;&gt;\n            &lt;i class=&quot;fa fa-chevron-left&quot;&gt;&lt;/i&gt; \n            &lt;p class=&quot;post-nav-pre-next-title&quot;&gt;\n              redis概要之数据类型\n            &lt;/p&gt; \n          &lt;/a&gt;\n        \n      &lt;/div&gt;\n\n      &lt;span class=&quot;post-nav-divider&quot;&gt;&lt;/span&gt;\n\n      &lt;div class=&quot;post-nav-prev post-nav-item&quot;&gt;\n        \n          &lt;a href=&quot;https://hulinhong.com/2015/07/11/redis_hiredis_install_tutorial/&quot; rel=&quot;prev&quot; title=&quot;redis和hiredis安装教程&quot;&gt;\n          &lt;p class=&quot;post-nav-pre-next-title&quot;&gt;\n              redis和hiredis安装教程\n          &lt;/p&gt; \n          &lt;i class=&quot;fa fa-chevron-right&quot;&gt;&lt;/i&gt;\n          &lt;/a&gt;\n        \n      &lt;/div&gt;\n    &lt;/div&gt;\n  \n\n  \n  \n\n  \n  \n\n  \n    &lt;h2 id=&quot;List&quot;&gt;&lt;a href=&quot;https://hulinhong.com/#List&quot; class=&quot;headerlink&quot; title=&quot;List  []&quot;&gt;&lt;/a&gt;List  []&lt;/h2&gt;&lt;p&gt;例如 :&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;#!/usr/bin/python&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# -*- coding: UTF-8 -*-&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;list = [ 'runoob', 786 , 2.23, 'john', 70.2 ]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;tinylist = [123, 'john']&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print list               # 输出完整列表&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print list[0]            # 输出列表的第一个元素&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print list[1:3]          # 输出第二个至第三个的元素 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print list[2:]           # 输出从第三个开始至列表末尾的所有元素&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print tinylist * 2       # 输出列表两次&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print list + tinylist    # 打印组合的列表&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;\n</code></pre>\n<p>以上实例输出结果：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">['runoob', 786, 2.23, 'john', 70.2]</span><br><span class=\"line\">runoob</span><br><span class=\"line\">[786, 2.23]</span><br><span class=\"line\">[2.23, 'john', 70.2]</span><br><span class=\"line\">[123, 'john', 123, 'john']</span><br><span class=\"line\">['runoob', 786, 2.23, 'john', 70.2, 123, 'john']</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Tuple（元祖）-相当于只读列表，不可以二次赋值\"><a href=\"https://hulinhong.com/#Tuple%EF%BC%88%E5%85%83%E7%A5%96%EF%BC%89-%E7%9B%B8%E5%BD%93%E4%BA%8E%E5%8F%AA%E8%AF%BB%E5%88%97%E8%A1%A8%EF%BC%8C%E4%B8%8D%E5%8F%AF%E4%BB%A5%E4%BA%8C%E6%AC%A1%E8%B5%8B%E5%80%BC\" class=\"headerlink\" title=\"Tuple（元祖）(),相当于只读列表，不可以二次赋值\"></a>Tuple（元祖）(),相当于只读列表，不可以二次赋值</h2><p><code>tuple = ( 'runoob', 786 , 2.23, 'john', 70.2 )</code>, 除了元祖用()而list用[], 而且元祖只是可读的, 其他的跟list一毛一样</p>\n<h2 id=\"dictionary（字典）-，key值对\"><a href=\"https://hulinhong.com/#dictionary%EF%BC%88%E5%AD%97%E5%85%B8%EF%BC%89-%EF%BC%8Ckey%E5%80%BC%E5%AF%B9\" class=\"headerlink\" title=\"dictionary（字典）{}，key值对\"></a>dictionary（字典）{}，key值对</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/usr/bin/python</span><br><span class=\"line\"># -*- coding: UTF-8 -*-</span><br><span class=\"line\"> </span><br><span class=\"line\">dict = {}</span><br><span class=\"line\">dict['one'] = \"This is one\"</span><br><span class=\"line\">dict[2] = \"This is two\"</span><br><span class=\"line\"> </span><br><span class=\"line\">tinydict = {'name': 'john','code':6734, 'dept': 'sales'}</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">print dict['one']          # 输出键为'one' 的值</span><br><span class=\"line\">print dict[2]              # 输出键为 2 的值</span><br><span class=\"line\">print tinydict             # 输出完整的字典</span><br><span class=\"line\">print tinydict.keys()      # 输出所有键</span><br><span class=\"line\">print tinydict.values()    # 输出所有值</span><br></pre></td></tr></table></figure>\n<p>输出结果为:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">This is one</span><br><span class=\"line\">This is two</span><br><span class=\"line\">{'dept': 'sales', 'code': 6734, 'name': 'john'}</span><br><span class=\"line\">['dept', 'code', 'name']</span><br><span class=\"line\">['sales', 6734, 'john']</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"lua比较特殊的数据类型\"><a href=\"https://hulinhong.com/#lua%E6%AF%94%E8%BE%83%E7%89%B9%E6%AE%8A%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B\" class=\"headerlink\" title=\"lua比较特殊的数据类型\"></a>lua比较特殊的数据类型</h1><h2 id=\"lua变量\"><a href=\"https://hulinhong.com/#lua%E5%8F%98%E9%87%8F\" class=\"headerlink\" title=\"lua变量\"></a>lua变量</h2><blockquote>\n<p>变量在使用前，必须在代码中进行声明，即创建该变量。</p>\n</blockquote>\n<p>编译进程执行代码之前编译器需要知道如何给语句变量开辟存储区，用于存储变量的值。</p>\n<p>Lua 变量有三种类型：全局变量、局部变量、表中的域。</p>\n<blockquote>\n<p>Lua 中的变量全是全局变量，那怕是语句块或是函数里，除非用 local 显式声明为局部变量。</p>\n</blockquote>\n<p>局部变量的作用域为从声明位置开始到所在语句块结束。</p>\n<p>变量的默认值均为 nil。</p>\n<figure class=\"highlight plain\"><figcaption><span>test.lua 文档脚本</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = 5               -- 全局变量</span><br><span class=\"line\">local b = 5         -- 局部变量</span><br><span class=\"line\"></span><br><span class=\"line\">function joke()</span><br><span class=\"line\">    c = 5           -- 全局变量</span><br><span class=\"line\">    local d = 6     -- 局部变量</span><br><span class=\"line\">end</span><br><span class=\"line\"></span><br><span class=\"line\">joke()</span><br><span class=\"line\">print(c,d)          --&gt; 5 nil</span><br><span class=\"line\"></span><br><span class=\"line\">do </span><br><span class=\"line\">    local a = 6     -- 局部变量</span><br><span class=\"line\">    b = 6           -- 全局变量</span><br><span class=\"line\">    print(a,b);     --&gt; 6 6</span><br><span class=\"line\">end</span><br><span class=\"line\"></span><br><span class=\"line\">print(a,b)      --&gt; 5 6</span><br></pre></td></tr></table></figure>\n<p>执行以上实例输出结果为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ lua test.lua </span><br><span class=\"line\">5\tnil</span><br><span class=\"line\">6\t6</span><br><span class=\"line\">5\t6</span><br></pre></td></tr></table></figure>\n<h2 id=\"lua的特有的东西table（表）\"><a href=\"https://hulinhong.com/#lua%E7%9A%84%E7%89%B9%E6%9C%89%E7%9A%84%E4%B8%9C%E8%A5%BFtable%EF%BC%88%E8%A1%A8%EF%BC%89\" class=\"headerlink\" title=\"lua的特有的东西table（表）\"></a>lua的特有的东西table（表）</h2><p>在 Lua 里，table 的创建是通过”构造表达式”来完成，</p>\n<p>最简单构造表达式是{}，用来创建一个空表。</p>\n<p>也可以在表里添加一些数据，直接初始化表:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- 创建一个空的 table</span><br><span class=\"line\">local tbl1 = {}</span><br><span class=\"line\"> </span><br><span class=\"line\">-- 直接初始表</span><br><span class=\"line\">local tbl2 = {\"apple\", \"pear\", \"orange\", \"grape\"}</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- table_test.lua 脚本文档</span><br><span class=\"line\">a = {}</span><br><span class=\"line\">a[\"key\"] = \"value\"</span><br><span class=\"line\">key = 10</span><br><span class=\"line\">a[key] = 22</span><br><span class=\"line\">a[key] = a[key] + 11</span><br><span class=\"line\">for k, v in pairs(a) do</span><br><span class=\"line\">    print(k .. \" : \" .. v)</span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure>\n<p>脚本执行结果为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ lua table_test.lua </span><br><span class=\"line\">key : value</span><br><span class=\"line\">10 : 33</span><br></pre></td></tr></table></figure></p>\n<p>不同于其他语言的数组把 0 作为数组的初始索引，在 Lua 里表的默认初始索引一般以 1 开始。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- table_test2.lua 脚本文档</span><br><span class=\"line\">local tbl = {\"apple\", \"pear\", \"orange\", \"grape\"}</span><br><span class=\"line\">for key, val in pairs(tbl) do</span><br><span class=\"line\">    print(\"Key\", key)</span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure></p>\n<p>脚本执行结果为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ lua table_test2.lua </span><br><span class=\"line\">Key\t1</span><br><span class=\"line\">Key\t2</span><br><span class=\"line\">Key\t3</span><br><span class=\"line\">Key\t4</span><br></pre></td></tr></table></figure></p>\n<p>table 不会固定长度大小，有新数据添加时 table 长度会自动增长，没初始的 table 都是 nil。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- table_test3.lua 脚本文档</span><br><span class=\"line\">a3 = {}</span><br><span class=\"line\">for i = 1, 10 do</span><br><span class=\"line\">    a3[i] = i</span><br><span class=\"line\">end</span><br><span class=\"line\">a3[\"key\"] = \"val\"</span><br><span class=\"line\">print(a3[\"key\"])</span><br><span class=\"line\">print(a3[\"none\"])</span><br></pre></td></tr></table></figure></p>\n<p>脚本执行结果为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ lua table_test3.lua </span><br><span class=\"line\">val</span><br><span class=\"line\">nil</span><br></pre></td></tr></table></figure></p>","text":" &lt;div class=&quot;post-nav&quot;&gt; &lt;div class=&quot;post-nav-next post-nav-item&quot;&gt; &lt;a href=&quot;https://hulinhong.com/201...","link":"","photos":[],"count_time":{"symbolsCount":"5.5k","symbolsTime":"5 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Tuple%EF%BC%88%E5%85%83%E7%A5%96%EF%BC%89-%E7%9B%B8%E5%BD%93%E4%BA%8E%E5%8F%AA%E8%AF%BB%E5%88%97%E8%A1%A8%EF%BC%8C%E4%B8%8D%E5%8F%AF%E4%BB%A5%E4%BA%8C%E6%AC%A1%E8%B5%8B%E5%80%BC\"><span class=\"toc-text\">Tuple（元祖）(),相当于只读列表，不可以二次赋值</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#dictionary%EF%BC%88%E5%AD%97%E5%85%B8%EF%BC%89-%EF%BC%8Ckey%E5%80%BC%E5%AF%B9\"><span class=\"toc-text\">dictionary（字典）{}，key值对</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#lua%E6%AF%94%E8%BE%83%E7%89%B9%E6%AE%8A%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">lua比较特殊的数据类型</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#lua%E5%8F%98%E9%87%8F\"><span class=\"toc-text\">lua变量</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#lua%E7%9A%84%E7%89%B9%E6%9C%89%E7%9A%84%E4%B8%9C%E8%A5%BFtable%EF%BC%88%E8%A1%A8%EF%BC%89\"><span class=\"toc-text\">lua的特有的东西table（表）</span></a></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Lua 学习 chapter7","uid":"d1f12ad6b4cafc4f9e33f041f7e58f17","slug":"zl/2016-01-01-220_Lua 学习 chapter7 ","date":"2024-04-03T03:47:33.094Z","updated":"2024-04-03T03:47:33.094Z","comments":true,"path":"api/articles/zl/2016-01-01-220_Lua 学习 chapter7 .json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":" &lt;h3 id=&quot;目录&quot;&gt;目录&lt;/h3&gt; 简单I/O模型 完整I/O模型 其它文档操作 其它系统调用 简单I/O模型 对于文档操作，I/O提供了两种不同的模型。简单模型虚拟了一个当前输入流和一个当前的输出流，其I/O是通过这些流实现的。...","link":"","photos":[],"count_time":{"symbolsCount":"3k","symbolsTime":"3 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"lua与c相互调用的常用接口","uid":"0a1ee455b871a1fded6bca95611818b9","slug":"zl/2016-01-01-219_lua与c相互调用的常用接口","date":"2024-04-03T03:47:33.093Z","updated":"2024-04-03T03:47:33.093Z","comments":true,"path":"api/articles/zl/2016-01-01-219_lua与c相互调用的常用接口.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":" &lt;p&gt;lua与c交互主要通过栈，栈底为1，栈顶为-1，以下是其相互调用的常用接口：&lt;/p&gt; 栈操作1234567891011121314151617181920212223242526272829303132333435363738int (lua_St...","link":"","photos":[],"count_time":{"symbolsCount":"5.3k","symbolsTime":"5 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}