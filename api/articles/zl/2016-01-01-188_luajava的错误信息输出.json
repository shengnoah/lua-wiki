{"title":"luajava的错误信息输出","uid":"eb7ca1796ca7146b3bcd46c543f1f640","slug":"zl/2016-01-01-188_luajava的错误信息输出","date":"2024-04-03T03:47:33.074Z","updated":"2024-04-03T03:47:33.074Z","comments":true,"path":"api/articles/zl/2016-01-01-188_luajava的错误信息输出.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<p>最近在填新坑, 打算用lua作为脚本语言, 于是选择了luajava来跑脚本.</p>\n<p>始终我对lua不熟, 错误是难免的了, 不料luajava居然没有输出错误信息orz(事实上连普通的输出都没找到, 反正我直接写了个print函数…)</p>\n<p>既然找不到输出, 那我只好想办法把luajava的错误信息转去调用自己写的print了, 于是我想到了或许可以像Java中的<code>try ... catch ...</code>来拦住错误, 然后用 <code>getStackTrace()</code>之类的方法找到调用栈, 最后输出.</p>\n<p>顺着这思路, 我找到了lua的<code>xpcall(&lt;fun:function&gt;, &lt;callback:function&gt;)</code>和<code>debug.traceback([errMsg:string])</code>, 前者接受一个函数和一个出现错误时的执行回调函数, 返回执行的成功与否和错误信息, 后者可选地接受一个错误信息, 并返回错误信息和调用栈.</p>\n<p>那么剩下的就是把程序本体塞到xpcall中, 这个倒没多少难度:</p>\n<pre><code class=\"language-lua\">xpcall(\n  -- $str是我传入的程序本体\n  function() $str end,\n  -- err就是错误信息\n  function(err)\n    -- _print就是我写的, kotlin的print函数\n    _print(debug.traceback(err))\n  end)</code><p>输出:</p><p><img src=\"https://img.dazhuanlan.com/2019/11/28/5ddf8ffb3da53.png!v1\" alt=\"输出\"></p></pre>","text":"最近在填新坑, 打算用lua作为脚本语言, 于是选择了luajava来跑脚本. 始终我对lua不熟, 错误是难免的了, 不料luajava居然没有输出错误信息orz(事实上连普通的输出都没找到, 反正我直接写了个print函数…) 既然找不到输出, 那我只好想办法把luajava...","link":"","photos":[],"count_time":{"symbolsCount":604,"symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"基于XLua的Unity脚本框架的设计与实现","uid":"8912b8abe24cb570896b9c689c6c6d40","slug":"zl/2016-01-01-192_基于XLua的Unity脚本框架的设计与实现","date":"2024-04-03T03:47:33.075Z","updated":"2024-04-03T03:47:33.076Z","comments":true,"path":"api/articles/zl/2016-01-01-192_基于XLua的Unity脚本框架的设计与实现.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":" &lt;p&gt;摘 要：&lt;br&gt;Unity技术的迅速崛起, 让3D移动游戏逐渐流行。随着游戏系统的不断丰富, 游戏开发迭代速度迅速加快。但Unity的原生C#开发效率较慢, 而且在部分平台上无法进行热更新, 无法满足[…]&lt;/p&gt; 行游戏内容的更新,由...","link":"","photos":[],"count_time":{"symbolsCount":"2.1k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"lua c api","uid":"a088e52eeedd5a2e08a78395ae73ef54","slug":"zl/2016-01-01-189_lua c api ","date":"2024-04-03T03:47:33.074Z","updated":"2024-04-03T03:47:33.074Z","comments":true,"path":"api/articles/zl/2016-01-01-189_lua c api .json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":" 一 概述 很多情况下有这种需求：在特定的框架中针对不同的业务做少量修改。使用 C/C++ 开发稳定的框架，调用针对不同业务开发的 Lua 函数可以实现需求。其实从 C/C++ 调用 Lua 函数非常简单，调用时将 Lua 函数压入栈、将函数参数压入栈，调用 lua_pcall ...","link":"","photos":[],"count_time":{"symbolsCount":"9.2k","symbolsTime":"8 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}