{"title":"高并发抢红包方案－－基于Redis lua方案","uid":"f7b1183de71bcce803607b6784e42ffe","slug":"zl/2016-01-01-659_高并发抢红包方案－－基于Redis lua方案","date":"2024-04-03T03:47:35.879Z","updated":"2024-04-03T03:47:35.883Z","comments":true,"path":"api/articles/zl/2016-01-01-659_高并发抢红包方案－－基于Redis lua方案.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<script src=\"assetsjsAPlayer.min.js\"> </script><p>Redis 2.6 内置Lua解释器</p>\n<ul>\n<li>Lua由标准C编写而成，代码简洁优美，完整的Lua解释器不过200k，极易嵌入到其他程序。</li>\n<li>Lua和C/C++代码交互容易， 性能和灵活性大大提高。</li>\n<li>可作为扩展脚本，也可以作为普通的配置文件，实现复杂的配置逻辑，并且容易理解和维护.</li>\n</ul>\n<h2 id=\"Redis–lua脚本\"><a href=\"#Redis–lua脚本\" class=\"headerlink\" title=\"Redis–lua脚本\"></a>Redis–lua脚本</h2><ul>\n<li>减少网络开销：本来多次网络请求的操作，可以用一个请求完成，原先5次请求的逻辑放在redis服务器上完成。使用脚本，减少了网络往返时延。</li>\n<li>原子操作：Redis会将整个脚本作为一个整体执行，中间不会被其他命令插入。</li>\n<li>脚本复用：客户端发送的脚本会永久存储在Redis中，意味着其他客户端可以复用这一脚本而不需要使用代码完成同样的逻辑。<figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">redis&gt; EVAL <span class=\"string\">&#34;return 1+1&#34;</span> 0</span><br/><span class=\"line\">(<span class=\"built_in\">integer</span>) 2</span><br/><span class=\"line\">redis&gt; EVAL <span class=\"string\">&#34;return {KEYS[1], KEYS[2], ARGV[1], ARGV[2]}&#34;</span> 4 <span class=\"string\">&#34;msg&#34;</span> <span class=\"string\">&#34;age&#34;</span> 123 <span class=\"string\">&#34;hello world&#34;</span></span><br/><span class=\"line\">1) <span class=\"string\">&#34;msg&#34;</span> </span><br/><span class=\"line\">2) <span class=\"string\">&#34;age&#34;</span> <span class=\"comment\"># KEYS[2]</span></span><br/><span class=\"line\">3) <span class=\"string\">&#34;123&#34;</span> <span class=\"comment\"># ARGV[1]</span></span><br/><span class=\"line\">4) <span class=\"string\">&#34;hello world&#34;</span> <span class=\"comment\"># ARGV[2]</span></span><br/></pre></td></tr></tbody></table></figure>\n</li>\n</ul>\n<p>但是，<code>脚本执行很慢就会影响redis的高响应。</code></p>\n<h2 id=\"redis集群脚本存在的问题\"><a href=\"#redis集群脚本存在的问题\" class=\"headerlink\" title=\"redis集群脚本存在的问题\"></a>redis集群脚本存在的问题</h2><p><code>问题</code>：集群对于<code>multi-key</code>操作（即一次RPC调用中需要进行多个key的操作）比如Set类型的交集、并集等，则要求这些key必须属于同一个node。<br/></p><figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># There are 16384 hash slots in Redis Cluster.This allows to add an</span></span><br/><span class=\"line\"><span class=\"comment\"># remove nodes in the cluster easily. </span></span><br/><span class=\"line\">Node A contains <span class=\"built_in\">hash</span> slots from 0 to 5500.</span><br/><span class=\"line\">Node B contains <span class=\"built_in\">hash</span> slots from 5501 to 11000.</span><br/><span class=\"line\">Node C contains <span class=\"built_in\">hash</span> slots from 11001 to 16383.</span><br/></pre></td></tr></tbody></table></figure><p></p>\n<p><code>解决方案</code>：Hash tags。每个key都可以包含一个自定义的“tags”，那么在存储时将根据tags计算此key应该分布在哪个node上（存储层面仍然是key),比如“foo”和“{foo}.student”将会被保存在同一个node上。</p>\n<h1 id=\"2-抢红包\"><a href=\"#2-抢红包\" class=\"headerlink\" title=\"2. 抢红包\"></a>2. 抢红包</h1><ul>\n<li>红包操作能够在一次cache请求中完成并返回结果。</li>\n<li>数据格式一致，脚本能够复用。<br/>数据结构<figure class=\"highlight\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">{</span><br/><span class=\"line\">    rid: 123,</span><br/><span class=\"line\">    uid: 456,</span><br/><span class=\"line\">    money: 789</span><br/><span class=\"line\">}</span><br/></pre></td></tr></tbody></table></figure>\n</li>\n</ul>\n<h1 id=\"3-红包\"><a href=\"#3-红包\" class=\"headerlink\" title=\"3. 红包\"></a>3. 红包</h1><h1 id=\"3-相关测试信息\"><a href=\"#3-相关测试信息\" class=\"headerlink\" title=\"3.相关测试信息\"></a>3.<a href=\"http://xiejiangchu.github.io/redis-lua.html\">相关测试信息</a></h1>","text":" Redis 2.6 内置Lua解释器 Lua由标准C编写而成，代码简洁优美，完整的Lua解释器不过200k，极易嵌入到其他程序。 Lua和C/C++代码交互容易， 性能和灵活性大大提高。 可作为扩展脚本，也可以作为普通的配置文件，实现复杂的配置逻辑，并且容易理解和维护. Red...","link":"","photos":[],"count_time":{"symbolsCount":"1.2k","symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Redis%E2%80%93lua%E8%84%9A%E6%9C%AC\"><span class=\"toc-text\">Redis–lua脚本</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#redis%E9%9B%86%E7%BE%A4%E8%84%9A%E6%9C%AC%E5%AD%98%E5%9C%A8%E7%9A%84%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">redis集群脚本存在的问题</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#2-%E6%8A%A2%E7%BA%A2%E5%8C%85\"><span class=\"toc-text\">2. 抢红包</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#3-%E7%BA%A2%E5%8C%85\"><span class=\"toc-text\">3. 红包</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#3-%E7%9B%B8%E5%85%B3%E6%B5%8B%E8%AF%95%E4%BF%A1%E6%81%AF\"><span class=\"toc-text\">3.相关测试信息</span></a>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"LUA 与 C","uid":"d2fdb69df2548aac5f06fae8b66d3deb","slug":"zl/2016-01-01-658_LUA 与 C","date":"2024-04-03T03:47:35.879Z","updated":"2024-04-03T03:47:35.879Z","comments":true,"path":"api/articles/zl/2016-01-01-658_LUA 与 C.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"栈 使用栈进行lua和C数据交换 要将一个值传给lua，需要先将该值压入栈，然后调用lua api函数，lua会从栈中获取该值并从栈中弹出 入栈API 123456void lua_pushnil(lua_State *);void lua_pushboolean(lua_Sta...","link":"","photos":[],"count_time":{"symbolsCount":"1.9k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Redis实现分布式锁Lua脚本","uid":"856aae23dd974ad10df3608af21dd73a","slug":"zl/2016-01-01-657_Redis实现分布式锁Lua脚本","date":"2024-04-03T03:47:35.878Z","updated":"2024-04-03T03:47:35.879Z","comments":true,"path":"api/articles/zl/2016-01-01-657_Redis实现分布式锁Lua脚本.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"简单锁采用键值对存储，键是锁的标识，值是全局唯一值（如uuid）。 获取锁1234567891011121314local key = KEYS[1] -- 锁标识local value = ARGV[1] -- 全局唯一值local ttl = tonumber(ARGV[2]...","link":"","photos":[],"count_time":{"symbolsCount":"3.2k","symbolsTime":"3 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}