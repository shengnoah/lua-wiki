{"title":"快速排序算法的lua实现","uid":"137fe148dad69f7b2b98215db0dc44eb","slug":"zl/2016-01-01-883_快速排序算法的lua实现","date":"2024-04-03T03:47:36.155Z","updated":"2024-04-03T03:47:36.156Z","comments":true,"path":"api/articles/zl/2016-01-01-883_快速排序算法的lua实现.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/><span class=\"line\">9</span><br/><span class=\"line\">10</span><br/><span class=\"line\">11</span><br/><span class=\"line\">12</span><br/><span class=\"line\">13</span><br/><span class=\"line\">14</span><br/><span class=\"line\">15</span><br/><span class=\"line\">16</span><br/><span class=\"line\">17</span><br/><span class=\"line\">18</span><br/><span class=\"line\">19</span><br/><span class=\"line\">20</span><br/><span class=\"line\">21</span><br/><span class=\"line\">22</span><br/><span class=\"line\">23</span><br/><span class=\"line\">24</span><br/><span class=\"line\">25</span><br/><span class=\"line\">26</span><br/><span class=\"line\">27</span><br/><span class=\"line\">28</span><br/><span class=\"line\">29</span><br/><span class=\"line\">30</span><br/><span class=\"line\">31</span><br/><span class=\"line\">32</span><br/><span class=\"line\">33</span><br/><span class=\"line\">34</span><br/><span class=\"line\">35</span><br/><span class=\"line\">36</span><br/><span class=\"line\">37</span><br/><span class=\"line\">38</span><br/><span class=\"line\">39</span><br/><span class=\"line\">40</span><br/><span class=\"line\">41</span><br/><span class=\"line\">42</span><br/><span class=\"line\">43</span><br/><span class=\"line\">44</span><br/><span class=\"line\">45</span><br/><span class=\"line\">46</span><br/><span class=\"line\">47</span><br/><span class=\"line\">48</span><br/><span class=\"line\">49</span><br/><span class=\"line\">50</span><br/><span class=\"line\">51</span><br/><span class=\"line\">52</span><br/><span class=\"line\">53</span><br/><span class=\"line\">54</span><br/><span class=\"line\">55</span><br/><span class=\"line\">56</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">-- 快速排序算法的实现</span><br/><span class=\"line\">--[[</span><br/><span class=\"line\">\t设要排序的数组是A[0]……A[N-1]，首先任意选取一个数据（通常选用数组的第一个数）作为关键数据，然后将所有比它小的数都放到它左边，所有比它大的数都放到它右边，这个过程称为一趟快速排序。值得注意的是，快速排序不是一种稳定的排序算法，也就是说，多个相同的值的相对位置也许会在算法结束时产生变动。</span><br/><span class=\"line\">\t一趟快速排序的算法是：</span><br/><span class=\"line\">\t1）设置两个变量i、j，排序开始的时候：i=1，j=N-1；</span><br/><span class=\"line\">\t2）以第一个数组元素作为关键数据，赋值给key，即key=A[0]；</span><br/><span class=\"line\">\t3）从j开始向前搜索，即由后开始向前搜索(j--)，找到第一个小于key的值A[j]</span><br/><span class=\"line\">\t4）从i开始向后搜索，即由前开始向后搜索(i++)，找到第一个大于key的A[i]</span><br/><span class=\"line\">\t5) 将A[j]与A[i]的值互换</span><br/><span class=\"line\">\t6）重复第3、4、5步，直到i=j； (3,4步中，没找到符合条件的值，即3中A[j]不小于key,4中A[i]不大于key的时候改变j、i的值，使得j=j-1，i=i+1，直至找到为止。找到符合条件的值，进行交换的时候i， j指针位置不变。另外，i==j这一过程一定正好是i+或j-完成的时候，此时令循环结束）。</span><br/><span class=\"line\">]]</span><br/><span class=\"line\"></span><br/><span class=\"line\">function Qsort(tab, left, right)</span><br/><span class=\"line\">\tif right &lt;= left then return end</span><br/><span class=\"line\">\tlocal i = left + 1</span><br/><span class=\"line\">\tlocal j = right</span><br/><span class=\"line\">\tlocal key = tab[left]</span><br/><span class=\"line\">\twhile true do </span><br/><span class=\"line\">\t\t-- 从左往右找比key大的值</span><br/><span class=\"line\">\t\twhile (tab[i] &lt; key) do</span><br/><span class=\"line\">\t\t\ti = i + 1</span><br/><span class=\"line\">\t\t\tif i == right then </span><br/><span class=\"line\">\t\t\t\tbreak</span><br/><span class=\"line\">\t\t\tend</span><br/><span class=\"line\">\t\tend</span><br/><span class=\"line\"></span><br/><span class=\"line\">\t\t-- 从右往左找比key小的值</span><br/><span class=\"line\">\t\twhile (tab[j] &gt; key) do</span><br/><span class=\"line\">\t\t\tj = j - 1</span><br/><span class=\"line\">\t\t\tif j == left then </span><br/><span class=\"line\">\t\t\t\tbreak</span><br/><span class=\"line\">\t\t\tend</span><br/><span class=\"line\">\t\tend</span><br/><span class=\"line\"></span><br/><span class=\"line\">\t\tif i &gt;= j then </span><br/><span class=\"line\">\t\t\tbreak</span><br/><span class=\"line\">\t\tend</span><br/><span class=\"line\"></span><br/><span class=\"line\">\t\tlocal tmp = tab[i]</span><br/><span class=\"line\">\t\ttab[i] = tab[j]</span><br/><span class=\"line\">\t\ttab[j] = tmp</span><br/><span class=\"line\">\tend</span><br/><span class=\"line\"></span><br/><span class=\"line\">\ttab[left] = tab[j]</span><br/><span class=\"line\">\ttab[j] = key</span><br/><span class=\"line\">\tQsort(tab, left, j - 1)</span><br/><span class=\"line\">\tQsort(tab, j + 1, right)</span><br/><span class=\"line\">end</span><br/><span class=\"line\"></span><br/><span class=\"line\">local tab = {6,2,7,3,8,9}</span><br/><span class=\"line\">-- local tab = {5, 4, 3, 2, 1}</span><br/><span class=\"line\">Qsort(tab, 1, #tab)</span><br/><span class=\"line\">for k,v in ipairs(tab) do</span><br/><span class=\"line\">\tprint(k,v)</span><br/><span class=\"line\">end</span><br/><span class=\"line\"></span><br/></pre></td></tr></tbody></table></figure>","text":"1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556-- 快速排序算法的实现--[[ 设要排序的数组是A[0]……A[N-1]...","link":"","photos":[],"count_time":{"symbolsCount":"1.2k","symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Lua Study","uid":"fe1195f4f5556419e838cea354cbb4a3","slug":"zl/2016-01-01-882_Lua Study","date":"2024-04-03T03:47:36.155Z","updated":"2024-04-03T03:47:36.155Z","comments":true,"path":"api/articles/zl/2016-01-01-882_Lua Study.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"本文并不会把Lua语言的所有内容都包含在内，只对个人学习过程中感觉比较重要的部分做一个记录，以便回顾。 类型学习语言首先要了解它提供的类型，Lua语言提供了如下几种。 nil boolean number string userdata function thread table...","link":"","photos":[],"count_time":{"symbolsCount":885,"symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Lua中的表操作","uid":"cc682423b40ae962d737009e42144d09","slug":"zl/2016-01-01-881_Lua中的表操作","date":"2024-04-03T03:47:36.154Z","updated":"2024-04-03T03:47:36.155Z","comments":true,"path":"api/articles/zl/2016-01-01-881_Lua中的表操作.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"「�TODO�」: 表的查找和新增元素 取长度操作Lua中可以用 # 符号对表进行取长度操作. 对Lua中的表进行取长度操作时, 如果没有该表的元方法 __len, 则该取长度操作只对表的数组部分进行. 取长度的入口函数为 luaH_getn, 该函数的目的是找到表 t 的一个边...","link":"","photos":[],"count_time":{"symbolsCount":"2.1k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}