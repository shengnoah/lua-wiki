{"title":"Lua模块与包 · 花生肉泥","uid":"fa26efea87641e4d0b61bbcc2aa1b1af","slug":"zl/2016-01-01-730_Lua模块与包 · 花生肉泥","date":"2024-04-03T03:47:35.974Z","updated":"2024-04-03T03:47:35.975Z","comments":true,"path":"api/articles/zl/2016-01-01-730_Lua模块与包 · 花生肉泥.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<p>lua的模块是由变量，函数等已知元素组成的table，因此创建一个模块很简单，就是创建一个table，然后把需要导出的常量，函数放入其中，最后返回这个table就行。</p>\n<p>例：<br/></p><figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/><span class=\"line\">9</span><br/><span class=\"line\">10</span><br/><span class=\"line\">11</span><br/><span class=\"line\">12</span><br/><span class=\"line\">13</span><br/><span class=\"line\">14</span><br/><span class=\"line\">15</span><br/><span class=\"line\">16</span><br/><span class=\"line\">17</span><br/><span class=\"line\">18</span><br/><span class=\"line\">19</span><br/><span class=\"line\">20</span><br/><span class=\"line\">21</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br/><span class=\"line\"><span class=\"comment\">-- 定义一个名为module的模块</span></span><br/><span class=\"line\">module = {}</span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"comment\">-- 定义一个常量</span></span><br/><span class=\"line\">module.constant = <span class=\"string\">&#34;这是一个常量&#34;</span></span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"comment\">-- 定义一个函数</span></span><br/><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span></span></span><br/><span class=\"line\">     <span class=\"built_in\">io</span>.<span class=\"built_in\">write</span>(<span class=\"string\">&#34;这是一个公有函数！&#34;</span>)</span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"keyword\">local</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func2</span><span class=\"params\">()</span></span></span><br/><span class=\"line\">     <span class=\"built_in\">print</span>(<span class=\"string\">&#34;这是一个私有函数！&#34;</span>)</span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">module.func3</span><span class=\"params\">()</span></span></span><br/><span class=\"line\">     func2()</span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"keyword\">return</span> module</span><br/></pre></td></tr></tbody></table></figure><p></p>\n<p>由上可知，模块的结构就是一个table结构，因此可以像操作调用table里的元素那样来操作调用模块里的常量或变量</p>\n<p>require函数</p>\n<p>lua提供了一个名为require的函数来加载模块，要加载一个模块，只要简单的调用就就可以了<br/>例;<br/></p><figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">&#34;&lt;模块名&gt;&#34;</span>)</span><br/></pre></td></tr></tbody></table></figure><p></p>\n<p>或者<br/></p><figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">require</span> <span class=\"string\">&#34;&lt;模块名&gt;&#34;</span></span><br/></pre></td></tr></tbody></table></figure><p></p>\n<p>执行require后会返回一个由模块常量或函数组成的table，并且还会定义一个包含table的全局变量<br/></p><figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- test_module.lua</span></span><br/><span class=\"line\"><span class=\"comment\">-- module 模块为上文提到的module.lua</span></span><br/><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">&#34;module&#34;</span>)</span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"built_in\">print</span>(module.constant)</span><br/><span class=\"line\"></span><br/><span class=\"line\">module.func3()</span><br/></pre></td></tr></tbody></table></figure><p></p>\n<p>以上代码执行结果为：<br/></p><figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">这是一个常量</span><br/><span class=\"line\">这是一个私有函数！</span><br/></pre></td></tr></tbody></table></figure><p></p>\n<p>或者给加载的模块定义一个别名变量，方便调用：<br/></p><figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- test_module2.lua 文件</span></span><br/><span class=\"line\"><span class=\"comment\">-- module 模块为上文提到的module.lua</span></span><br/><span class=\"line\"><span class=\"comment\">-- 别名变量 m</span></span><br/><span class=\"line\"><span class=\"keyword\">local</span> m = <span class=\"built_in\">require</span>(<span class=\"string\">&#34;module&#34;</span>)</span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"built_in\">print</span>(m.constant)</span><br/><span class=\"line\"></span><br/><span class=\"line\">m.func3()</span><br/></pre></td></tr></tbody></table></figure><p></p>","text":"lua的模块是由变量，函数等已知元素组成的table，因此创建一个模块很简单，就是创建一个table，然后把需要导出的常量，函数放入其中，最后返回这个table就行。 例：123456789101112131415161718192021-- 定义一个名为module的模块mod...","link":"","photos":[],"count_time":{"symbolsCount":881,"symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"cocos2dx lua 绑定详解与实战","uid":"adba9f75759928073dc25e3c54ccdb5c","slug":"zl/2016-01-01-731_cocos2dx lua 绑定详解与实战","date":"2024-04-03T03:47:35.976Z","updated":"2024-04-03T03:47:35.976Z","comments":true,"path":"api/articles/zl/2016-01-01-731_cocos2dx lua 绑定详解与实战.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"我们平时在开发cocos2dx lua游戏的时候的，会遇到这样的情况： 在c++层定义了一些类，我们需要将这些类导出给Lua来使用，从而完成在c++层实现起来容易的需求，这个时候就需要将整个类作为模块导出。 而Cocos2d-x正是采用的这种思想，将Cocos中的类导出供用户使用...","link":"","photos":[],"count_time":{"symbolsCount":"14k","symbolsTime":"12 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Lua学习笔记(4)面向对象实现","uid":"9e83c6c60823836655cba905e4082c95","slug":"zl/2016-01-01-72_Lua学习笔记(4)面向对象实现","date":"2024-04-03T03:47:35.972Z","updated":"2024-04-03T03:47:35.974Z","comments":true,"path":"api/articles/zl/2016-01-01-72_Lua学习笔记(4)面向对象实现.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"百度搜索一下，给出出的解决方案和学习帖子很多，可是我还是有很多的问题！ 什么是面向对象？ lua中怎么实现面向对象？ 什么样的实现既简单又能完成我的功能？ 一定要按照c++的方式实现类的继承吗？ 在学习lua面向对象的过程中我比较喜欢下面两种实现方式： 简单粗暴的实现 参考[1]...","link":"","photos":[],"count_time":{"symbolsCount":"3.3k","symbolsTime":"3 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}