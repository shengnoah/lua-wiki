{"title":"Lua程序设计（4）","uid":"a38c8009ccfd4c73c756fcf8131930d3","slug":"zl/2016-01-01-336_Lua程序设计（4）","date":"2024-04-03T03:47:35.614Z","updated":"2024-04-03T03:47:35.614Z","comments":true,"path":"api/articles/zl/2016-01-01-336_Lua程序设计（4）.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<p>Lua的输入输出、补充知识</p>\n<h3 id=\"输入输出\"><a href=\"#输入输出\" class=\"headerlink\" title=\"输入输出\"></a>输入输出</h3><p>单就Lua语言而言，只提供了ISO C语言标准支持的功能，即基本的文件操作等。</p>\n<h4 id=\"简单I-O模型\"><a href=\"#简单I-O模型\" class=\"headerlink\" title=\"简单I/O模型\"></a>简单I/O模型</h4><p>简单模型虚拟了一个当前输入流和一个当前输出流。函数<code>io.input</code>和函数<code>io.output</code>可以用于改变当前的输入输出流，调用<code>io.input</code>会以只读模式打开指定文件，并将文件设置为当前输入流。之后所有的输入都将来自该文件，除非再次调用<code>io.input</code>。</p>\n<h5 id=\"io-write\"><a href=\"#io-write\" class=\"headerlink\" title=\"io.write\"></a>io.write</h5><p>函数<code>io.write</code>可以读取任意数量的字符串并将其写入当前输入流。由于调用函数时可以使用多个参数，因此应尽量避免使用连接操作符以节省资源。</p>\n<p>作为原则，应该只在”用后即弃”的代码中使用函数print，当需要完全控制输出时，应该使用函数io.write。</p>\n<h5 id=\"io-read\"><a href=\"#io-read\" class=\"headerlink\" title=\"io.read\"></a>io.read</h5><table>\n<thead>\n<tr>\n<th>参数</th>\n<th>操作</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>“a”</td>\n<td>读取整个文件</td>\n</tr>\n<tr>\n<td>“l”</td>\n<td>读取下一行（丢弃换行符）</td>\n</tr>\n<tr>\n<td>“L”</td>\n<td>读取下一行（保留换行符）</td>\n</tr>\n<tr>\n<td>“n”</td>\n<td>读取一个数值</td>\n</tr>\n<tr>\n<td>Num</td>\n<td>以字符串读取num个字符</td>\n</tr>\n</tbody>\n</table>\n<p>调用<code>io.read(&#34;a&#34;)</code>可从当前位置开始读取当前输入文件的全部内容，如果当前处于文件末尾或者文件为空，那么该函数返回一个空字符串。</p>\n<h4 id=\"完整I-O模型\"><a href=\"#完整I-O模型\" class=\"headerlink\" title=\"完整I/O模型\"></a>完整I/O模型</h4><p>可以使用函数<code>io.open</code>来打开一个文件，这个函数有两个参数，一个参数是待打开文件的文件名，另一个参数是一个模式字符串，包括表示只读的r，表示只写的w，表示追加的a，以及一个可选的表示打开二进制文件的b。</p>\n<h3 id=\"补充知识\"><a href=\"#补充知识\" class=\"headerlink\" title=\"补充知识\"></a>补充知识</h3><h4 id=\"局部变量和代码块\"><a href=\"#局部变量和代码块\" class=\"headerlink\" title=\"局部变量和代码块\"></a>局部变量和代码块</h4><p>Lua中的变量在默认情况下是全局变量，所有的局部变量在使用前必须声明。</p>\n<ul>\n<li>局部变量可以避免由于不必要的命名而造成全局变量的混乱。</li>\n<li>局部变量还能避免同一程序中不同代码部分的命名冲突</li>\n<li>访问局部变量比访问全局变量更快</li>\n<li>局部变量会随着其作用域的结束而消失，使得垃圾收集器能够将其释放</li>\n</ul>\n<h4 id=\"控制结构\"><a href=\"#控制结构\" class=\"headerlink\" title=\"控制结构\"></a>控制结构</h4><ul>\n<li><p>if then else</p>\n</li>\n<li><p>elseif</p>\n</li>\n<li><p>while</p>\n</li>\n<li><p>repeat-until：类似于do-while</p>\n</li>\n<li><p>数值型for：</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> var = exp1,exp2,exp3 <span class=\"keyword\">do</span></span><br/><span class=\"line\">\tsomething</span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/></pre></td></tr></tbody></table></figure>\n<p>var值从exp1变化到exp2之前的每次循环会执行something，并在每次循环结束后将步长exp3增加到var上，如果exp3不存在则默认为1，不想设置循环上限，可以使用math.huge。</p>\n</li>\n<li><p>泛型for：</p>\n<p>泛型for遍历迭代函数返回的所有值，例如<code>pairs</code>、<code>ipairs</code>、<code>io.lines</code>等。</p>\n</li>\n<li><p>break、return、goto：标签形如<code>::name::</code></p>\n</li>\n</ul>","text":"Lua的输入输出、补充知识 输入输出单就Lua语言而言，只提供了ISO C语言标准支持的功能，即基本的文件操作等。 简单I/O模型简单模型虚拟了一个当前输入流和一个当前输出流。函数io.input和函数io.output可以用于改变当前的输入输出流，调用io.input会以只读模...","link":"","photos":[],"count_time":{"symbolsCount":"1.1k","symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA\"><span class=\"toc-text\">输入输出</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%AE%80%E5%8D%95I-O%E6%A8%A1%E5%9E%8B\"><span class=\"toc-text\">简单I&#x2F;O模型</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#io-write\"><span class=\"toc-text\">io.write</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#io-read\"><span class=\"toc-text\">io.read</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%AE%8C%E6%95%B4I-O%E6%A8%A1%E5%9E%8B\"><span class=\"toc-text\">完整I&#x2F;O模型</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%A1%A5%E5%85%85%E7%9F%A5%E8%AF%86\"><span class=\"toc-text\">补充知识</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F%E5%92%8C%E4%BB%A3%E7%A0%81%E5%9D%97\"><span class=\"toc-text\">局部变量和代码块</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%8E%A7%E5%88%B6%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">控制结构</span></a></li></ol></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"C++与Lua本质原始交互API","uid":"14791ba8de1523e6c9b46be1ecbacc51","slug":"zl/2016-01-01-339_C++与Lua本质原始交互API","date":"2024-04-03T03:47:35.615Z","updated":"2024-04-03T03:47:35.616Z","comments":true,"path":"api/articles/zl/2016-01-01-339_C++与Lua本质原始交互API.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":" &lt;a href=&quot;/2015/11/11/lua_pairs_ipairs/&quot; rel=&quot;next&quot; title=&quot;Lua中ipairs和pairs的区别与使用&quot;&gt; &lt;i class=&quot;fa...","link":"","photos":[],"count_time":{"symbolsCount":"4.2k","symbolsTime":"4 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Lua编程3之变量","uid":"3ba97d8d6694660cdfa321783f7ec9d9","slug":"zl/2016-01-01-334_Lua编程3之变量","date":"2024-04-03T03:47:35.612Z","updated":"2024-04-03T03:47:35.612Z","comments":true,"path":"api/articles/zl/2016-01-01-334_Lua编程3之变量.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"思考并回答以下问题：1.a, b, c = 0 a和b和c的值分别是多少？2.多值赋值的两种常用场景是什么？3.局部变量的作用域是什么？使用局部变量的两个好处是什么？4.全局变量_G是什么类型？有什么作用？5.全局环境存在什么问题？ 变量在使用前，必须在代码中进行声明，即创建该变...","link":"","photos":[],"count_time":{"symbolsCount":"3.1k","symbolsTime":"3 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}