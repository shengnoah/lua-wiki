{"title":"StackExchange.Redis加载Lua脚本进行模糊查询的批量删除和修改","uid":"f637a9bed7edc1a303f75d2f48bec364","slug":"zl/2016-01-01-823_StackExchange.Redis加载Lua脚本进行模糊查询的批量删除和修改","date":"2024-04-03T03:47:36.072Z","updated":"2024-04-03T03:47:36.073Z","comments":true,"path":"api/articles/zl/2016-01-01-823_StackExchange.Redis加载Lua脚本进行模糊查询的批量删除和修改.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<ul id=\"markdown-toc\">\n  <li><a href=\"#通过keys进行模糊查询后的批量操作\" id=\"markdown-toc-通过keys进行模糊查询后的批量操作\">通过keys进行模糊查询后的批量操作</a></li>\n  <li><a href=\"#对hash集合下的key进行模糊查询后的批量操作\" id=\"markdown-toc-对hash集合下的key进行模糊查询后的批量操作\">对Hash集合下的key进行模糊查询后的批量操作</a></li>\n  <li><a href=\"#对set集合下的值进行模糊查询后的批量操作\" id=\"markdown-toc-对set集合下的值进行模糊查询后的批量操作\">对Set集合下的值进行模糊查询后的批量操作</a></li>\n  <li><a href=\"#注意\" id=\"markdown-toc-注意\">注意</a></li>\n</ul>\n<h2 id=\"通过keys进行模糊查询后的批量操作\">通过keys进行模糊查询后的批量操作</h2>\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>     <span class=\"n\">var</span> <span class=\"n\">redis</span> <span class=\"o\">=</span> <span class=\"n\">ConnectionMultiplexer</span><span class=\"o\">.</span><span class=\"na\">Connect</span><span class=\"o\">(</span><span class=\"s\">&#34;127.0.0.1:6379,allowAdmin = true&#34;</span><span class=\"o\">);</span>\n     <span class=\"n\">redis</span><span class=\"o\">.</span><span class=\"na\">GetDatabase</span><span class=\"o\">().</span><span class=\"na\">ScriptEvaluate</span><span class=\"o\">(</span><span class=\"n\">LuaScript</span><span class=\"o\">.</span><span class=\"na\">Prepare</span><span class=\"o\">(</span>\n         <span class=\"c1\">//Redis的keys模糊查询：</span>\n         <span class=\"s\">&#34; local ks = redis.call(&#39;KEYS&#39;, @keypattern) &#34;</span> <span class=\"o\">+</span> <span class=\"c1\">//local ks为定义一个局部变量，其中用于存储获取到的keys</span>\n         <span class=\"s\">&#34; for i=1,#ks,5000 do &#34;</span> <span class=\"o\">+</span>    <span class=\"c1\">//#ks为ks集合的个数, 语句的意思： for(int i = 1; i &lt;= ks.Count; i+=5000)</span>\n         <span class=\"s\">&#34;     redis.call(&#39;del&#39;, unpack(ks, i, math.min(i+4999, #ks))) &#34;</span> <span class=\"o\">+</span> <span class=\"c1\">//Lua集合索引值从1为起始，unpack为解包，获取ks集合中的数据，每次5000，然后执行删除</span>\n         <span class=\"s\">&#34; end &#34;</span> <span class=\"o\">+</span>\n         <span class=\"s\">&#34; return true &#34;</span>\n         <span class=\"o\">),</span>\n         <span class=\"k\">new</span> <span class=\"o\">&#123;</span> <span class=\"n\">keypattern</span> <span class=\"o\">=</span> <span class=\"s\">&#34;mykey*&#34;</span> <span class=\"o\">&#125;);</span>\n</code></pre></div></div>\n<h2 id=\"对hash集合下的key进行模糊查询后的批量操作\">对Hash集合下的key进行模糊查询后的批量操作</h2>\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>     <span class=\"n\">redis</span><span class=\"o\">.</span><span class=\"na\">GetDatabase</span><span class=\"o\">().</span><span class=\"na\">ScriptEvaluate</span><span class=\"o\">(</span><span class=\"n\">LuaScript</span><span class=\"o\">.</span><span class=\"na\">Prepare</span><span class=\"o\">(</span>\n         <span class=\"s\">&#34; local ks = redis.call(&#39;hkeys&#39;, @hashid) &#34;</span> <span class=\"o\">+</span>\n         <span class=\"s\">&#34; local fkeys = &#123;&#125; &#34;</span> <span class=\"o\">+</span>\n         <span class=\"s\">&#34; for i=1,#ks do &#34;</span> <span class=\"o\">+</span>\n         <span class=\"c1\">//使用string.find进行匹配操作</span>\n         <span class=\"s\">&#34;   if string.find(ks[i], @keypattern) then &#34;</span> <span class=\"o\">+</span>\n         <span class=\"s\">&#34;      fkeys[#fkeys + 1] = ks[i] &#34;</span> <span class=\"o\">+</span>\n         <span class=\"s\">&#34;   end &#34;</span> <span class=\"o\">+</span>\n         <span class=\"s\">&#34; end &#34;</span> <span class=\"o\">+</span>\n         <span class=\"s\">&#34; for i=1,#fkeys,5000 do &#34;</span> <span class=\"o\">+</span>\n         <span class=\"s\">&#34;   redis.call(&#39;hdel&#39;, @hashid, unpack(fkeys, i, math.min(i+4999, #fkeys))) &#34;</span> <span class=\"o\">+</span>\n         <span class=\"s\">&#34; end &#34;</span> <span class=\"o\">+</span>\n         <span class=\"s\">&#34; return true &#34;</span>\n         <span class=\"o\">),</span>\n         <span class=\"k\">new</span> <span class=\"o\">&#123;</span> <span class=\"n\">hashid</span> <span class=\"o\">=</span> <span class=\"s\">&#34;hkey&#34;</span><span class=\"o\">,</span> <span class=\"n\">keypattern</span> <span class=\"o\">=</span> <span class=\"s\">&#34;^mykey&#34;</span> <span class=\"o\">&#125;);</span>   <span class=\"c1\">//keypattern为可使用正则表达式</span>\n</code></pre></div></div>\n<p>或</p>\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>     <span class=\"n\">redis</span><span class=\"o\">.</span><span class=\"na\">GetDatabase</span><span class=\"o\">().</span><span class=\"na\">ScriptEvaluate</span><span class=\"o\">(</span><span class=\"n\">LuaScript</span><span class=\"o\">.</span><span class=\"na\">Prepare</span><span class=\"o\">(</span>\n         <span class=\"s\">&#34; local ks = redis.call(&#39;hkeys&#39;, @hashid) &#34;</span> <span class=\"o\">+</span>\n         <span class=\"s\">&#34; local fkeys = &#123;&#125; &#34;</span> <span class=\"o\">+</span>\n         <span class=\"s\">&#34; for i=1,#ks do &#34;</span> <span class=\"o\">+</span>\n         <span class=\"s\">&#34;   if string.find(ks[i], @keypattern) then &#34;</span> <span class=\"o\">+</span>\n         <span class=\"s\">&#34;      fkeys[#fkeys + 1] = ks[i] &#34;</span> <span class=\"o\">+</span>\n         <span class=\"s\">&#34;   end &#34;</span> <span class=\"o\">+</span>\n         <span class=\"s\">&#34; end &#34;</span> <span class=\"o\">+</span>\n         <span class=\"s\">&#34; for i=1,#fkeys do &#34;</span> <span class=\"o\">+</span>\n         <span class=\"s\">&#34;   redis.call(&#39;hset&#39;, @hashid, fkeys[i], @value) &#34;</span> <span class=\"o\">+</span>\n         <span class=\"s\">&#34; end &#34;</span> <span class=\"o\">+</span>\n         <span class=\"s\">&#34; return true &#34;</span>\n         <span class=\"o\">),</span>\n         <span class=\"k\">new</span> <span class=\"o\">&#123;</span> <span class=\"n\">hashid</span> <span class=\"o\">=</span> <span class=\"s\">&#34;hkey&#34;</span><span class=\"o\">,</span> <span class=\"n\">keypattern</span> <span class=\"o\">=</span> <span class=\"s\">&#34;^key&#34;</span><span class=\"o\">,</span> <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"s\">&#34;hashValue&#34;</span> <span class=\"o\">&#125;);</span>   <span class=\"c1\">//keypattern为可使用正则表达式</span>\n</code></pre></div></div>\n<h2 id=\"对set集合下的值进行模糊查询后的批量操作\">对Set集合下的值进行模糊查询后的批量操作</h2>\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>     <span class=\"n\">redis</span><span class=\"o\">.</span><span class=\"na\">GetDatabase</span><span class=\"o\">().</span><span class=\"na\">ScriptEvaluate</span><span class=\"o\">(</span><span class=\"n\">LuaScript</span><span class=\"o\">.</span><span class=\"na\">Prepare</span><span class=\"o\">(</span>\n         <span class=\"s\">&#34; local ks = redis.call(&#39;smembers&#39;, @keyid) &#34;</span> <span class=\"o\">+</span>\n         <span class=\"s\">&#34; local fkeys = &#123;&#125; &#34;</span> <span class=\"o\">+</span>\n         <span class=\"s\">&#34; for i=1,#ks do &#34;</span> <span class=\"o\">+</span>\n         <span class=\"s\">&#34;   if string.find(ks[i], @keypattern) then &#34;</span> <span class=\"o\">+</span>\n         <span class=\"s\">&#34;      fkeys[#fkeys + 1] = ks[i] &#34;</span> <span class=\"o\">+</span>\n         <span class=\"s\">&#34;   end &#34;</span> <span class=\"o\">+</span>\n         <span class=\"s\">&#34; end &#34;</span> <span class=\"o\">+</span>\n         <span class=\"s\">&#34; for i=1,#fkeys,5000 do &#34;</span> <span class=\"o\">+</span>\n         <span class=\"s\">&#34;   redis.call(&#39;srem&#39;, @keyid, unpack(fkeys, i, math.min(i+4999, #fkeys))) &#34;</span> <span class=\"o\">+</span>\n         <span class=\"s\">&#34; end &#34;</span> <span class=\"o\">+</span>\n         <span class=\"s\">&#34; return true &#34;</span>\n         <span class=\"o\">),</span>\n         <span class=\"k\">new</span> <span class=\"o\">&#123;</span> <span class=\"n\">keyid</span> <span class=\"o\">=</span> <span class=\"s\">&#34;setkey&#34;</span><span class=\"o\">,</span> <span class=\"n\">keypattern</span> <span class=\"o\">=</span> <span class=\"s\">&#34;^myval&#34;</span> <span class=\"o\">&#125;);</span>   <span class=\"c1\">//keypattern为可使用正则表达式</span>\n</code></pre></div></div>\n<h2 id=\"注意\">注意</h2>\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>从 Redis 2.6.0 版本开始，才可通过内置的 Lua 解释器，使用 EVAL 命令对 Lua 脚本进行求值。\n</code></pre></div></div>","text":" 通过keys进行模糊查询后的批量操作 对Hash集合下的key进行模糊查询后的批量操作 对Set集合下的值进行模糊查询后的批量操作 注意 通过keys进行模糊查询后的批量操作 var redis = ConnectionMultiplexer.Connect(&#34;127....","link":"","photos":[],"count_time":{"symbolsCount":"3.1k","symbolsTime":"3 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%80%9A%E8%BF%87keys%E8%BF%9B%E8%A1%8C%E6%A8%A1%E7%B3%8A%E6%9F%A5%E8%AF%A2%E5%90%8E%E7%9A%84%E6%89%B9%E9%87%8F%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">通过keys进行模糊查询后的批量操作</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AF%B9hash%E9%9B%86%E5%90%88%E4%B8%8B%E7%9A%84key%E8%BF%9B%E8%A1%8C%E6%A8%A1%E7%B3%8A%E6%9F%A5%E8%AF%A2%E5%90%8E%E7%9A%84%E6%89%B9%E9%87%8F%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">对Hash集合下的key进行模糊查询后的批量操作</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AF%B9set%E9%9B%86%E5%90%88%E4%B8%8B%E7%9A%84%E5%80%BC%E8%BF%9B%E8%A1%8C%E6%A8%A1%E7%B3%8A%E6%9F%A5%E8%AF%A2%E5%90%8E%E7%9A%84%E6%89%B9%E9%87%8F%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">对Set集合下的值进行模糊查询后的批量操作</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%B3%A8%E6%84%8F\"><span class=\"toc-text\">注意</span></a></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"lua面向对象学习","uid":"670b7a60e57dc8637ace9a6fd82af9ef","slug":"zl/2016-01-01-827_lua面向对象学习","date":"2024-04-03T03:47:36.073Z","updated":"2024-04-03T03:47:36.074Z","comments":true,"path":"api/articles/zl/2016-01-01-827_lua面向对象学习.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":" 元表和元方法 在Lua中，每个值都有一个元表，table和userdata类型的每个变量都可以有各自独立的元表， 其他类型的值则共享其类型所属的单一元表。 基本的metatable 创建新的table时不会创建元表 getmetatable(table) 获取table或者us...","link":"","photos":[],"count_time":{"symbolsCount":"4.7k","symbolsTime":"4 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"lua学习笔记（三）","uid":"a6e7d68214239ff8f600e3be6607e5cf","slug":"zl/2016-01-01-822_lua学习笔记（三）","date":"2024-04-03T03:47:36.071Z","updated":"2024-04-03T03:47:36.072Z","comments":true,"path":"api/articles/zl/2016-01-01-822_lua学习笔记（三）.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"Lua函数函数定义123456[local] function (argument1,argument2) -- do something [return result] -- 可以返回多个值，每个值以逗号隔开end-- 函数名表示该函数的引用，与C/C++的函数指针类似 可变参...","link":"","photos":[],"count_time":{"symbolsCount":"4.1k","symbolsTime":"4 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}