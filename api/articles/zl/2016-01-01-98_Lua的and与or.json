{"title":"Lua的and与or","uid":"71cb346a59482d5dd4b066a2de9b0072","slug":"zl/2016-01-01-98_Lua的and与or","date":"2024-04-03T03:47:36.240Z","updated":"2024-04-03T03:47:36.240Z","comments":true,"path":"api/articles/zl/2016-01-01-98_Lua的and与or.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<p>很早就知道lua的and与or的巧妙用法：</p>\n<figure class=\"highlight\"><pre><code class=\"language-lua\" data-lang=\"lua\"><span class=\"kd\">local</span> <span class=\"n\">str</span> <span class=\"o\">=</span> <span class=\"n\">num</span><span class=\"o\">==</span><span class=\"mi\">1</span> <span class=\"ow\">and</span> <span class=\"s2\">&#34;one&#34;</span> <span class=\"ow\">or</span> <span class=\"s2\">&#34;not one&#34;</span></code></pre></figure>\n<p>这句话可以简洁的表达如下意思：</p>\n<figure class=\"highlight\"><pre><code class=\"language-lua\" data-lang=\"lua\"><span class=\"kd\">local</span> <span class=\"n\">str</span> <span class=\"o\">=</span> <span class=\"s2\">&#34;&#34;</span>\n<span class=\"k\">if</span> <span class=\"n\">num</span><span class=\"o\">==</span><span class=\"mi\">1</span> <span class=\"k\">then</span>\n\t<span class=\"n\">str</span> <span class=\"o\">=</span> <span class=\"s2\">&#34;one&#34;</span>\n<span class=\"k\">else</span>\n\t<span class=\"n\">str</span> <span class=\"o\">=</span> <span class=\"s2\">&#34;not one&#34;</span>\n<span class=\"k\">end</span></code></pre></figure>\n<p>类似与c++的:?运算符，一直用着没啥问题，可是前不久遇到了一个很奇怪的bug，查到最后，锁定在这个用法上，举例：</p>\n<figure class=\"highlight\"><pre><code class=\"language-lua\" data-lang=\"lua\"><span class=\"k\">function</span> <span class=\"nf\">get_item</span><span class=\"p\">(</span><span class=\"n\">config_id</span><span class=\"p\">,</span> <span class=\"n\">star_lv</span><span class=\"p\">,</span> <span class=\"n\">server_id</span><span class=\"p\">)</span>\n\t<span class=\"k\">for</span> <span class=\"n\">_</span><span class=\"p\">,</span><span class=\"n\">item</span> <span class=\"k\">in</span> <span class=\"nb\">pairs</span><span class=\"p\">(</span><span class=\"n\">items</span><span class=\"p\">)</span> <span class=\"k\">do</span>\n    \t<span class=\"k\">if</span> <span class=\"n\">item</span><span class=\"p\">.</span><span class=\"n\">config_id</span><span class=\"o\">==</span><span class=\"n\">config_id</span> <span class=\"ow\">and</span> <span class=\"n\">item</span><span class=\"p\">.</span><span class=\"n\">star_lv</span><span class=\"o\">==</span><span class=\"n\">star_lv</span> <span class=\"ow\">and</span> <span class=\"p\">(</span><span class=\"n\">server_id</span> <span class=\"ow\">and</span> <span class=\"n\">item</span><span class=\"p\">.</span><span class=\"n\">server_id</span><span class=\"o\">==</span><span class=\"n\">server_id</span> <span class=\"ow\">or</span> <span class=\"kc\">true</span><span class=\"p\">)</span> <span class=\"k\">then</span>\n        \t<span class=\"k\">return</span> <span class=\"n\">item</span>\n        <span class=\"k\">end</span>\n    <span class=\"k\">end</span>\n<span class=\"k\">end</span></code></pre></figure>\n<p>我是想：根据config_id, star_lv和server_id来查找物品，其中server_id可以不填（即为nil），若不填，则忽略。<br/>\n逻辑上是对的，可是运行时候有bug，原因就是：server_id and item.server_id==server_id or true这一句。<br/>\n原来，lua的and和or返回的值是：<strong>使它可以确定其最终值的值</strong></p>\n<p>简单测试一下即可看出规律：</p>\n<figure class=\"highlight\"><pre><code class=\"language-lua\" data-lang=\"lua\"><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"kc\">false</span> <span class=\"ow\">and</span> <span class=\"kc\">nil</span><span class=\"p\">)</span>    <span class=\"c1\">-- false</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"kc\">nil</span> <span class=\"ow\">and</span> <span class=\"kc\">true</span><span class=\"p\">)</span>     <span class=\"c1\">-- nil</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"mi\">123</span> <span class=\"ow\">and</span> <span class=\"kc\">nil</span><span class=\"p\">)</span>      <span class=\"c1\">-- nil</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"mi\">123</span> <span class=\"ow\">and</span> <span class=\"mi\">456</span><span class=\"p\">)</span>      <span class=\"c1\">-- 456</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"kc\">false</span> <span class=\"ow\">or</span> <span class=\"kc\">nil</span><span class=\"p\">)</span>     <span class=\"c1\">-- nil</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"kc\">nil</span> <span class=\"ow\">or</span> <span class=\"mi\">123</span><span class=\"p\">)</span>       <span class=\"c1\">-- 123</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"mi\">123</span> <span class=\"ow\">or</span> <span class=\"kc\">nil</span><span class=\"p\">)</span>       <span class=\"c1\">-- 123</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"mi\">123</span> <span class=\"ow\">or</span> <span class=\"mi\">456</span><span class=\"p\">)</span>       <span class=\"c1\">-- 123</span></code></pre></figure>\n<p>为了验证返回的是值（而不是bool值），我用nil来代替false，用123，456来代替true。<br/>\n而a = b and c or d这种写法，等同于a = (b and c) or d，也就是根据b and c来决定是否返回d。<br/>\n结果就很明显了，b and c有2种情况：</p>\n<ol>\n  <li>b:true -&gt; c</li>\n  <li>b:false -&gt; b</li>\n</ol>\n<p>然后再和d做逻辑或运算：x or d，而x or d在：</p>\n<ol>\n  <li>x:true -&gt; x</li>\n  <li>x:false -&gt; d</li>\n</ol>\n<p>分析到这里，可以得出，对于：a = b and c or d来说，若：</p>\n<ol>\n  <li>b:true -&gt;\n    <ol>\n      <li>c:true -&gt; a = c</li>\n      <li>c:false -&gt; a = d</li>\n    </ol>\n  </li>\n  <li>b:false -&gt; a = d</li>\n</ol>\n<p>坑已经暴露出来了，a = b and c or d 不等与 C++的a = b ? c : d<br/>\n<strong>只有在c为true的时候，才可以这么用</strong><br/>\nps. 只有false和nil才是false，其他都为true</p>","text":"很早就知道lua的and与or的巧妙用法： local str = num==1 and &#34;one&#34; or &#34;not one&#34; 这句话可以简洁的表达如下意思： local str = &#34;&#34; if num==1 then str = ...","link":"","photos":[],"count_time":{"symbolsCount":"1.4k","symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"OpenWRT路由器设置界面中的Lua填坑","uid":"a8bb653ca9913e2a5fcf9590b1b04c81","slug":"zl/2016-01-01-989_OpenWRT路由器设置界面中的Lua填坑","date":"2024-04-03T03:47:36.240Z","updated":"2024-04-03T03:47:36.240Z","comments":true,"path":"api/articles/zl/2016-01-01-989_OpenWRT路由器设置界面中的Lua填坑.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"刚结束一个急活，主要是整理某个 OpenWRT 路由的设置界面，网页服务主要用的是 Nginx，网页用的是 BackBone 和 jQuery 配合，后端设置服务主要用的是 Lua（由 Nginx 代理）调用 OpenWRT 的 UCI 和 ubus。一开始我以为只需要前端稍微调...","link":"","photos":[],"count_time":{"symbolsCount":"7.8k","symbolsTime":"7 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"给 Tengine 加上 lua 拓展","uid":"6224a2d92b8e1402c742058a9d03bd16","slug":"zl/2016-01-01-990_给 Tengine 加上 lua 拓展","date":"2024-04-03T03:47:36.240Z","updated":"2024-04-03T03:47:36.241Z","comments":true,"path":"api/articles/zl/2016-01-01-990_给 Tengine 加上 lua 拓展.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"Tengine 能动态加载第三方模块，成为我们青睐的选择，我们可以编译动态链接文件，而不需要重新安装 Nginx, 这对在线增强 webservice 很有帮助.感谢 agentzh, lua-nginx-module, 可以让我们使用 lua 增强nginx的功能, 不言而喻，...","link":"","photos":[],"count_time":{"symbolsCount":"1.1k","symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}