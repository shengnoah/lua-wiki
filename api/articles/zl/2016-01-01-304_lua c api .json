{"title":"lua c api","uid":"a088e52eeedd5a2e08a78395ae73ef54","slug":"zl/2016-01-01-304_lua c api ","date":"2024-04-03T03:47:35.584Z","updated":"2024-04-03T03:47:35.584Z","comments":true,"path":"api/articles/zl/2016-01-01-304_lua c api .json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<h2 id=\"一-概述\">一 概述</h2> <p>《lua c api》系列文章描述的是 <code class=\"highlighter-rouge\">C</code> 语言作为宿主语言，与 <code class=\"highlighter-rouge\">Lua</code> 程序通讯的 <code class=\"highlighter-rouge\">API</code> 接口。</p> <h2 id=\"二-stack\">二 stack</h2> <p><code class=\"highlighter-rouge\">Lua</code> 使用虚拟的栈与宿主 <code class=\"highlighter-rouge\">C</code> 语言进行通讯，在栈中的每个元素都是 <code class=\"highlighter-rouge\">Lua</code> 识别的数据类型。<strong>每当 <code class=\"highlighter-rouge\">Lua</code> 调用 <code class=\"highlighter-rouge\">C</code> 时，被调用的 <code class=\"highlighter-rouge\">C</code> 函数都会得到一个新的栈，该栈独立于以前的栈和仍处于活跃状态的 <code class=\"highlighter-rouge\">C</code> 函数栈</strong>。在此堆栈包含 <code class=\"highlighter-rouge\">lua</code> 调用 <code class=\"highlighter-rouge\">C</code> 函数的所有参数，<code class=\"highlighter-rouge\">C</code> 函数应该将需要返回的结果压入此堆栈中（<strong>是否需要清空栈</strong>）。</p> <p>为了方便，在 <code class=\"highlighter-rouge\">C</code> 中操作栈时并未严格遵守栈操作语义，可以使用“索引”来查询栈中的元素。正数索引从栈底开始计数，栈底索引为 <code class=\"highlighter-rouge\">1</code>；负数索引从栈顶开始计数，栈顶索引为 <code class=\"highlighter-rouge\">-1</code>。示例结构：</p> <div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>---------------------------------------\n| 正数索引 |  数据   | 负数索引 | 栈中位置 |\n---------------------------------------\n|    3    |   nil  |   -1    |  栈顶   |\n|    2    |   2    |   -2    |  中间   |\n|    1    |  &#34;hi&#34;  |   -3    |  栈底   |\n</code></pre></div></div> <p>注意，使用 <code class=\"highlighter-rouge\">0</code> 作为索引会出错。</p> <h2 id=\"三-示例\">三 示例</h2> <p><em>使用 <code class=\"highlighter-rouge\">lua5.1.5</code> 版本</em></p> <h3 id=\"1-程序\">1. 程序</h3> <p>在示例中 <code class=\"highlighter-rouge\">echo</code> 函数会返回所有调用参数，在返回时栈底元素作为第一个返回值，栈顶元素作为最后一个返回值；<code class=\"highlighter-rouge\">sayhi</code> 会清空栈顶并返回一个 “hi” 字符串。</p> <div class=\"language-c highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// gcc -fPIC -I/usr/local/lua5.1.5/include -g -c stack.c\n// gcc -shared -I/usr/local/lua5.1.5/include  -L/usr/local/lua5.1.5/lib -llua -o stack.so stack.o\n</span><span class=\"cp\">#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;unistd.h&gt;\n</span>\n<span class=\"cp\">#include &#34;lua.h&#34;\n#include &#34;lauxlib.h&#34;\n#include &#34;lualib.h&#34;\n</span>\n<span class=\"cm\">/******************************************************************************\n * sayhi 函数\n * 清空栈，并将 hi 字符串压入栈顶\n ******************************************************************************/</span>\n<span class=\"k\">static</span> <span class=\"kt\">int</span> \n<span class=\"nf\">sayhi</span><span class=\"p\">(</span><span class=\"n\">lua_State</span> <span class=\"o\">*</span><span class=\"n\">L</span><span class=\"p\">)</span> <span class=\"p\">&#123;</span>\n    <span class=\"n\">lua_settop</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">);</span>\n    <span class=\"n\">lua_pushstring</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"s\">&#34;hi&#34;</span><span class=\"p\">);</span>\n    <span class=\"k\">return</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n<span class=\"p\">&#125;</span>\n<p><span class=\"cm\">/******************************************************************************</p>\n<ul class=\"lvl-0\">\n<li class=\"lvl-3\">\n<p>echo 函数会返回所有输入参数<br />\n*****************************************************************************<em>/</span><br />\n<span class=\"k\">static</span> <span class=\"kt\">int</span><br />\n<span class=\"nf\">echo</span><span class=\"p\">(</span><span class=\"n\">lua_State</span> <span class=\"o\"></em></span><span class=\"n\">L</span><span class=\"p\">)</span> <span class=\"p\">&#123;</span><br />\n<span class=\"kt\">int</span> <span class=\"n\">num</span> <span class=\"o\">=</span> <span class=\"n\">lua_gettop</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">);</span><br />\n<span class=\"k\">return</span> <span class=\"n\">num</span><span class=\"p\">;</span><br />\n<span class=\"p\">&#125;</span></p>\n</li>\n</ul>\n<p><span class=\"k\">static</span> <span class=\"k\">const</span><br />\n<span class=\"k\">struct</span> <span class=\"n\">luaL_reg</span> <span class=\"n\">stack_lib</span><span class=\"p\">[]</span> <span class=\"o\">=</span> <span class=\"p\">&#123;</span><br />\n<span class=\"p\">&#123;</span><span class=\"s\">&quot;sayhi&quot;</span><span class=\"p\">,</span> <span class=\"n\">sayhi</span><span class=\"p\">&#125;,</span><br />\n<span class=\"p\">&#123;</span><span class=\"s\">&quot;echo&quot;</span><span class=\"p\">,</span> <span class=\"n\">echo</span><span class=\"p\">&#125;,</span><br />\n<span class=\"p\">&#123;</span><span class=\"nb\">NULL</span><span class=\"p\">,</span> <span class=\"nb\">NULL</span><span class=\"p\">&#125;</span><br />\n<span class=\"p\">&#125;;</span></p>\n<p><span class=\"cm\">/******************************************************************************</p>\n<ul class=\"lvl-0\">\n<li class=\"lvl-3\">\n<p>注册函数</p>\n</li>\n<li class=\"lvl-3\">\n<p>注意 luaopen_xxx 中 xxx 为 lua 中 require 库名称<br />\n**************************************************************************<em><em><em><em>/</span><br />\n<span class=\"kt\">int</span><br />\n<span class=\"nf\">luaopen_stack</span><span class=\"p\">(</span><span class=\"n\">lua_State</span> <span class=\"o\"></em></span><span class=\"n\">l</span><span class=\"p\">)</span> <span class=\"p\">&#123;</span><br />\n<span class=\"n\">luaL_openlib</span><span class=\"p\">(</span><span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"s\">&quot;stack&quot;</span><span class=\"p\">,</span> <span class=\"n\">stack_lib</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">);</span><br />\n<span class=\"k\">return</span> <span class=\"mi\">1</span><span class=\"p\">;</span><br />\n<span class=\"p\">&#125;</span><br />\n</code></pre></div></div> <p><em>编译命令在代码开始处</em></p> <h3 id=\"2-调用\">2. 调用</h3> <p>在解释器中可以调用测试：</p> <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>Lua 5.1.5  Copyright <span class=\"o\">(</span>C<span class=\"o\">)</span> 1994-2012 <a href=\"http://Lua.org\">Lua.org</a>, PUC-Rio<br />\n<span class=\"o\">&gt;</span> require <span class=\"s2\">&quot;stack&quot;</span><br />\n<span class=\"o\">&gt;</span> r1,r2 <span class=\"o\">=</span> stack.echo<span class=\"o\">(</span><span class=\"s2\">&quot;a&quot;</span>,<span class=\"s2\">&quot;b&quot;</span><span class=\"o\">)</span><br />\n<span class=\"o\">&gt;</span> print<span class=\"o\">(</span>r1,r2<span class=\"o\">)</span><br />\na\tb<br />\n<span class=\"o\">&gt;</span> r <span class=\"o\">=</span> stack.sayhi<span class=\"o\">()</span><br />\n<span class=\"o\">&gt;</span> print<span class=\"o\">(</span>r<span class=\"o\">)</span><br />\nhi<br />\n</code></pre></div></div> <h2 id=\"四-函数说明\">四 函数说明</h2> <h3 id=\"1-栈顶索引操作\">1. 栈顶索引操作</h3> <div class=\"language-c highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">void</span> <span class=\"n\">lua_settop</span> <span class=\"p\">(</span><span class=\"n\">lua_State</span> <span class=\"o\"></em></span><span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">index</span><span class=\"p\">);</span><br />\n</code></pre></div></div> <p>函数功能： 将 <code class=\"highlighter-rouge\">L</code> 的栈顶设置到 <code class=\"highlighter-rouge\">index</code> 指定的索引处。 如果 <code class=\"highlighter-rouge\">index</code> 比现有的栈顶高，会扩充栈，扩充的栈中值为 <code class=\"highlighter-rouge\">nil</code>。 如果 <code class=\"highlighter-rouge\">index</code> 比现有的栈顶低，那么 <code class=\"highlighter-rouge\">index</code> 到历史栈顶之间的元素会被删除。 如果 <code class=\"highlighter-rouge\">index</code> 为 <code class=\"highlighter-rouge\">0</code>，那么栈中所有元素都将被删掉。</p> <h3 id=\"2-字符串压入栈\">2. 字符串压入栈</h3> <div class=\"language-c highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">void</span> <span class=\"n\">lua_pushstring</span> <span class=\"p\">(</span><span class=\"n\">lua_State</span> <span class=\"o\"></em></span><span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">char</span> <span class=\"o\"></em></span><span class=\"n\">s</span><span class=\"p\">);</span><br />\n</code></pre></div></div> <p>将 <code class=\"highlighter-rouge\">s</code> 指向的字符串压入 <code class=\"highlighter-rouge\">L</code> 的栈顶。字符串会以 “</p>\n</li>\n</ul>\n","text":"一 概述 《lua c api》系列文章描述的是 C 语言作为宿主语言，与 Lua 程序通讯的 API 接口。 二 stack Lua 使用虚拟的栈与宿主 C 语言进行通讯，在栈中的每个元素都是 Lua 识别的数据类型。每当 Lua 调用 C 时，被调用的 C 函数都会得到一个新...","link":"","photos":[],"count_time":{"symbolsCount":"2.5k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%80-%E6%A6%82%E8%BF%B0\"><span class=\"toc-text\">一 概述</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BA%8C-stack\"><span class=\"toc-text\">二 stack</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%89-%E7%A4%BA%E4%BE%8B\"><span class=\"toc-text\">三 示例</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E7%A8%8B%E5%BA%8F\"><span class=\"toc-text\">1. 程序</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E8%B0%83%E7%94%A8\"><span class=\"toc-text\">2. 调用</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%9B%9B-%E5%87%BD%E6%95%B0%E8%AF%B4%E6%98%8E\"><span class=\"toc-text\">四 函数说明</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E6%A0%88%E9%A1%B6%E7%B4%A2%E5%BC%95%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">1. 栈顶索引操作</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8E%8B%E5%85%A5%E6%A0%88\"><span class=\"toc-text\">2. 字符串压入栈</span></a></li></ol></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Lua 学习 chapter27","uid":"6fa85b2c9d2fb1c7122f1bf9a96bb9e7","slug":"zl/2016-01-01-305_Lua 学习 chapter27 ","date":"2024-04-03T03:47:35.585Z","updated":"2024-04-03T03:47:35.585Z","comments":true,"path":"api/articles/zl/2016-01-01-305_Lua 学习 chapter27 .json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"目录 lua堆栈操作 只有疯狂过，你才知道自己究竟能不能成功。 lua堆栈操作 针对于lua堆栈的操作。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 ...","link":"","photos":[],"count_time":{"symbolsCount":"2.8k","symbolsTime":"3 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"lua热更新","uid":"ada7d00f75876f789304534bf2794597","slug":"zl/2016-01-01-303_lua热更新","date":"2024-04-03T03:47:35.582Z","updated":"2024-04-03T03:47:35.583Z","comments":true,"path":"api/articles/zl/2016-01-01-303_lua热更新.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"单纯热更新Lua热更新最简单粗暴的热更新就是将package.loaded[modelname]的值置为nil，强制重新加载： function reload_module(module_name) package.loaded[modulename] = nil require...","link":"","photos":[],"count_time":{"symbolsCount":"5.4k","symbolsTime":"5 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}