{"title":"情迁QQ机器人新功能可使用lua脚本编写机器人插件啦 · 情迁美好时光追忆","uid":"21dcfde18a33df87541833facf0c1921","slug":"zl/2016-01-01-756_情迁QQ机器人新功能可使用lua脚本编写机器人插件啦 · 情迁美好时光追忆","date":"2024-04-03T03:47:36.002Z","updated":"2024-04-03T03:47:36.003Z","comments":true,"path":"api/articles/zl/2016-01-01-756_情迁QQ机器人新功能可使用lua脚本编写机器人插件啦 · 情迁美好时光追忆.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<p>本文将详细介绍Lua机器人插件的使用方法，更详细的内容也可以参考简书哦!机器人1.9.0支持lua插件加载，支持手机端lua编写插件 机器人内置lua编辑器，可以测试，运行机器人功能，<br/>lua是一种脚本语言，解释运行，随意修改，无需编译，便于修改和分享，操作简单，开发成本低，传播更方便。</p>\n<p>本文章转载自情迁简书 <a href=\"https://www.jianshu.com/p/92c7bf329653\" target=\"_blank\" rel=\"noopener noreferrer\">https://www.jianshu.com/p/92c7bf329653</a> </p>\n<h3 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h3><p>目前支持机器人lua插件在2018年11月17日发布了，各位记得先情迁下载QQ机器人哈</p>\n<p>本文章会慢慢补充,lua机器人插件能力将在情迁QQ机器人 1.8.8以及以上版本体现.</p>\n<h3 id=\"安装目录\"><a href=\"#安装目录\" class=\"headerlink\" title=\"安装目录\"></a>安装目录</h3><p>新建lua文件 也即是</p><figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">### LUA语法介绍</span><br/><span class=\"line\">不懂lua语法的可以百度一下,  这里大概介绍一下基本的lua语法也就是和其它语言不相同的地方。</span><br/><span class=\"line\">字符串拼接用```..```  数字转文本用```tostring(要转换的变量)</span><br/></pre></td></tr></tbody></table></figure><p></p>\n<p><strong>方法定义</strong><br/>参数名 没有类型,这是脚本语言的特点,简单的不能再简单，如js,python php</p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">function 方法名(参数名)</span><br/><span class=\"line\"></span><br/><span class=\"line\">end</span><br/></pre></td></tr></tbody></table></figure>\n<p>有返回值的方法</p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">function 方法名(参数名)</span><br/><span class=\"line\">return true;</span><br/><span class=\"line\">end</span><br/></pre></td></tr></tbody></table></figure>\n<p><strong>调用对象方法</strong></p>\n<figure class=\"highlight plain\"><figcaption><span>这里使用```:```而java是用```.```</span></figcaption><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">**访问对象字段**</span><br/><span class=\"line\">输入```log(robot.name))``` 这是本机器人支持的访问举例.</span><br/><span class=\"line\">**注释**</span><br/><span class=\"line\">lua的注释是用 ```--``` 而java是用```//``` 易语言则用```’```  或者某些语言用```#``` bat 批处理用 ```::</span><br/></pre></td></tr></tbody></table></figure>\n<p><strong>类型转换</strong><br/>字符串转number</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">str=<span class=\"string\">&#34;333&#34;</span></span><br/><span class=\"line\">value=<span class=\"built_in\">tonumber</span>(str)</span><br/><span class=\"line\">value=value+<span class=\"number\">1</span>  </span><br/></pre></td></tr></tbody></table></figure>\n<p>其他类型转字符串</p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">obj=333</span><br/><span class=\"line\">value=tostring(obj)</span><br/></pre></td></tr></tbody></table></figure>\n<p><strong>变量定义</strong></p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">global_var = 1 --全局变量</span><br/><span class=\"line\">local temp_var = 2 --局部变量</span><br/></pre></td></tr></tbody></table></figure>\n<p><strong>循环</strong></p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">while (temp &lt; 5) do</span><br/><span class=\"line\">    temp = temp + 1</span><br/><span class=\"line\">    print(&#34;result:&#34; .. tostring(temp)) --这里体现了类型转换的语法。</span><br/><span class=\"line\">end</span><br/></pre></td></tr></tbody></table></figure>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">for i = 1, 3 do</span><br/><span class=\"line\">    print(&#34;从1 到 3,当前:&#34; .. tostring(i))</span><br/><span class=\"line\">end</span><br/></pre></td></tr></tbody></table></figure>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">for i = 1, 6, 2 do</span><br/><span class=\"line\">    print(&#34;高级用法 当前:&#34; .. tostring(i) .. &#34;,我每下次执行将跳动2次，如果当前为1那么为1,下次则为3，i&gt;6跳出循环&#34;)</span><br/><span class=\"line\">end</span><br/></pre></td></tr></tbody></table></figure>\n<p><strong>逻辑分支</strong></p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/><span class=\"line\">9</span><br/><span class=\"line\">10</span><br/><span class=\"line\">11</span><br/><span class=\"line\">12</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">if (value1 &gt; 10) then</span><br/><span class=\"line\">    print(&#34;值大于10&#34;)</span><br/><span class=\"line\">    if (value1 == 80) then</span><br/><span class=\"line\">        print(&#34;内循环,等于80&#34;)</span><br/><span class=\"line\">    else</span><br/><span class=\"line\">        print(&#34;不是80，但是肯定&gt;10&#34;)</span><br/><span class=\"line\">    end</span><br/><span class=\"line\">elseif (value1 == 100) then</span><br/><span class=\"line\">    print(&#34;等于100&#34;)</span><br/><span class=\"line\">else</span><br/><span class=\"line\">    print(&#34;不知道等于夺嫂了&#34;)</span><br/><span class=\"line\">end</span><br/></pre></td></tr></tbody></table></figure>\n<p>控制台输出</p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">print(&#34;ffff&#34;) --lua本身的语法，这个需要打开adb.exe查看过滤</span><br/><span class=\"line\">System.out日志类型</span><br/></pre></td></tr></tbody></table></figure>\n<h3 id=\"情迁QQ机器人SDK独有api参数\"><a href=\"#情迁QQ机器人SDK独有api参数\" class=\"headerlink\" title=\"情迁QQ机器人SDK独有api参数\"></a>情迁QQ机器人SDK独有api参数</h3><p><strong>第一步/必须导包</strong><br/>如果不导包，将无法正常使用下面这些方法。博客语法有冲突，勿怪。下面的这行</p>\n<pre><code>require &#34;cn.qssq666.robot.sdk&#34;</code></pre><p>日志提示</p>\n<pre><code>log(&#34;&#34;警告日志&#34;)--输出警告日志\ninfo(&#34;info日志&#34;)\ndebug(&#34;debug日志&#34;)\nerror(&#34;红色错误日志&#34;)\ntoast(&#34;toast提示日志&#34;)``这个运行后直接弹出气泡提示</code></pre><p><em>lua掌握这一点点你就完全可以操作机器人大部分功能了  关于api方面呢其实和java doc api一样的，所以呢本文没有说明的方法完全可以举一反三的 从java 插件开发文档里面找到</em></p>\n<p><strong>收到消息的回调</strong></p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">function onReceiveMsgIsNeedIntercept(msgitem, aiteList, hasAite, hasAiteMe)</span><br/><span class=\"line\"></span><br/><span class=\"line\">end</span><br/></pre></td></tr></tbody></table></figure>\n<p><strong>发送消息给指定人</strong><br/>这里的item是必须的，这个函数应该在</p><figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br/><span class=\"line\"></span><br/><span class=\"line\"></span><br/><span class=\"line\">``` </span><br/><span class=\"line\">api. sendPrivateMsg(item, qq,message);</span><br/></pre></td></tr></tbody></table></figure><p></p>\n<p>更多api,完全可以参考java api推算出来，我有空会写一个完整的demo,现在还在架构机器人中….</p>\n<h3 id=\"举例\"><a href=\"#举例\" class=\"headerlink\" title=\"举例\"></a>举例</h3><figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/><span class=\"line\">9</span><br/><span class=\"line\">10</span><br/><span class=\"line\">11</span><br/><span class=\"line\">12</span><br/><span class=\"line\">13</span><br/><span class=\"line\">14</span><br/><span class=\"line\">15</span><br/><span class=\"line\">16</span><br/><span class=\"line\">17</span><br/><span class=\"line\">18</span><br/><span class=\"line\">19</span><br/><span class=\"line\">20</span><br/><span class=\"line\">21</span><br/><span class=\"line\">22</span><br/><span class=\"line\">23</span><br/><span class=\"line\">24</span><br/><span class=\"line\">25</span><br/><span class=\"line\">26</span><br/><span class=\"line\">27</span><br/><span class=\"line\">28</span><br/><span class=\"line\">29</span><br/><span class=\"line\">30</span><br/><span class=\"line\">31</span><br/><span class=\"line\">32</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">require &#34;cn.qssq666.robot.sdk&#34;</span><br/><span class=\"line\"></span><br/><span class=\"line\">--  msgitem 消息体</span><br/><span class=\"line\">-- aitelist 艾特的用户列表（不会包含自己)</span><br/><span class=\"line\">-- hasAite 是否艾特了用户</span><br/><span class=\"line\">-- hasAiteMe  是否艾特了机器人</span><br/><span class=\"line\"></span><br/><span class=\"line\">function onReceiveMsgIsNeedIntercept(msgitem, aiteList, hasAite, hasAiteMe)</span><br/><span class=\"line\">\tlog(&#34;call onReceiveMsgIsNeedIntercept&#34;)</span><br/><span class=\"line\">\ttext = msgitem:getMessage() --获取收到的消息内容</span><br/><span class=\"line\">\tlog(&#34;receiveMsg:&#34; .. text)</span><br/><span class=\"line\">\tqq = msgitem:getSenderuin() -- 哪个qq发的消息</span><br/><span class=\"line\">\tlog(&#34;print toString[&#34; .. msgitem:toString()) --这个方法可以打印昵称,qq,消息内容,发送时间,等等。</span><br/><span class=\"line\"></span><br/><span class=\"line\">\tinfo = &#34;,aiteUser=,&#34; .. tostring(hasAite) .. &#34;,aiteRobot:&#34; .. tostring(hasAiteMe)</span><br/><span class=\"line\">\t --见名知意</span><br/><span class=\"line\">\tlog(&#34;state:&#34; .. info)</span><br/><span class=\"line\">\treturn true</span><br/><span class=\"line\">end</span><br/><span class=\"line\"></span><br/><span class=\"line\">--下面的代码无关紧要，自己酌情修改------------------------------</span><br/><span class=\"line\">function onCreate(obj)</span><br/><span class=\"line\">\tlog(&#34;onCreate call arg type: &#34; .. type(obj))</span><br/><span class=\"line\">end</span><br/><span class=\"line\"></span><br/><span class=\"line\">function getPluginName()</span><br/><span class=\"line\">\treturn &#34;test plugin&#34;</span><br/><span class=\"line\">end</span><br/><span class=\"line\"></span><br/><span class=\"line\">function onDestory()</span><br/><span class=\"line\">\tlog(&#34;destory call&#34;)</span><br/><span class=\"line\">end</span><br/></pre></td></tr></tbody></table></figure>\n<p>再来一个能用的，发送消息<code>LUA</code>就会自动回复的机器人插件<br/>复制下面的内容另存为 任意名.lua文件然后放到内部存储的qssq666/robot_plugin_lua文件夹中，然后运行情迁QQ机器人1.9.0<br/>然后进入LUA插件管理就可以看到机器人了，记得进入机器人设置勾选启用机器人插件哦，不然发送消息<code>LUA</code>没有任何反应的哈<br/>还可以长按编辑这个插件修改逻辑，也可以点击模拟测试一些机器人方法是否定义的情况。</p>\n<pre><code>-- 编写时间 2018.11\n-- 文件编码 必须是UTF-8 must UTF-8\n-- LUA插件的方法不受执行流程控制,因此测试这些代码的时候只能发送消息然后测试这些方法。\n--或者可以不写在主流程中，比如如下代码的测试专用可以解除注释，当机器人加载的时候会气泡提示的toast调试，\n<p>require &quot;cn.qssq666.robot.sdk&quot; --必须调用，否则无法使用api,等方法，以及toast等，只能使用print了。<br />\n–测试专用代码区开始</p>\n<p>–可以直接运行 本文件放到内部存储 qssq666/robot_plugin_lua文件夹改后缀名 为.lua 然后在lua插件管理列表刷新然后长按运行或者编辑再运行。<br />\n– 直接输入 adb push plugin.lua /sdcard/qssq666/robot_plugin_lua/ 推送到手机上。</p>\n<p>–toast(&quot;插件被加载，插件名:&quot;…getPluginName())<br />\n–下面的调试代码需要通过日志查看软件或者电脑ADBConsole.exe查看。<br />\n–info(&quot;插件加载了,&quot;)<br />\n–warn(&quot;这是警告日志&quot;)<br />\n–error(&quot;红色错误日志&quot;)<br />\n–log(&quot;也是警告日志语法糖&quot;)<br />\n–debug(&quot;调试信息，&quot;)</p>\n<p>–测试专用代码区结束</p>\n<p>–  ---------------------机器人插件加载区<br />\n–  msgitem 消息体<br />\n– aitelist 艾特的用户列表（不会包含自己)<br />\n– hasAite 是否艾特了用户<br />\n– hasAiteMe  是否艾特了机器人<br />\n–收到一条消息调用此方法，返回true表示 消息由插件处理<br />\n–，否则交给机器人自身的逻辑，比如自身有点歌系统之类的。<br />\n–本方法不定义将毫无意义。<br />\nfunction onReceiveMsgIsNeedIntercept(msgitem, aiteList, hasAite, hasAiteMe)<br />\nlog(&quot;call onReceiveMsgIsNeedIntercept&quot;)<br />\nlocal text = msgitem:getMessage() --获取收到的消息内容<br />\nlog(&quot;receiveMsg:&quot; … text)<br />\nlocal qq = msgitem:getSenderuin() – 哪个qq发的消息<br />\nlog(&quot;print toString[&quot; … msgitem:toString()) --这个方法可以打印昵称,qq,消息内容,发送时间,等等。<br />\nif (text == &quot;LUA&quot;) then<br />\n– chunkname:41 attempt to index ? (a nil value) zhaobu<br />\nlocal str=&quot;Wellcome Use Lua Plugin! The is QssqRobot&quot;<br />\nmsgitem:setMessage(str)<br />\nprint(&quot;item is nil?=&quot;…tostring(msgitem:getClass()==nil)…&quot;,className:&quot;…tostring(msgitem:getClass()))<br />\nprint(&quot;api obj is nil?=&quot;…tostring(msgitem:getClass()==nil)…&quot;,className:&quot;…tostring(api:getClass()))<br />\nprint(api:toString())<br />\napi:showDebugToast(&quot;欢迎使用LUA机器人插件&quot;);<br />\n– print();<br />\n– print(msgitem:toString())<br />\napi:sendMsg(msgitem) --是啥子消息我就回复啥消息 ，操作起来比较简单。<br />\nreturn true<br />\n–插件自身处理消息<br />\nelse<br />\nend<br />\ninfo = &quot;,aiteUser=,&quot; … tostring(hasAite) … &quot;,aiteRobot:&quot; … tostring(hasAiteMe)<br />\n–见名知意<br />\nlog(&quot;state:&quot; … info)<br />\nreturn false<br />\nend</p>\n<p>–下面的代码无关紧要，自己酌情修改 ,可以不定义，------------------------------<br />\n–插件被加载的时候出发<br />\nfunction onCreate(obj)<br />\nprint(&quot;onCreate…[print]&quot;)<br />\nlog(&quot;onCreate call arg type: &quot; … type(obj))<br />\nend<br />\n–表示机器人最终处理的消息，即将发送的消息，是否拦截<br />\nfunction onReceiveRobotFinalCallMsgIsNeedIntercept(item, list, aite, haisaiteme)<br />\ndebug(&quot;call onReceiveRobotFinalCallMsgIsNeedIntercept…&quot;);<br />\nreturn false<br />\nend<br />\n–插件作者名字<br />\nfunction getAuthorName()<br />\nreturn &quot;情迁2018&quot;<br />\nend<br />\n–返回插件名称，再插件管理列表可以显示<br />\nfunction getPluginName()<br />\nreturn &quot;test plugin&quot;<br />\nend</p>\n<p>–返回本插件的版本号<br />\nfunction getVersionName()<br />\nreturn &quot;1.0&quot; --返回机器人的版本号<br />\nend<br />\n–返回本插件的版本号 数字标识 整数<br />\nfunction getVersionCode()<br />\nreturn 1;<br />\nend<br />\n–返回编译时间字符串<br />\nfunction getBuildTime( )<br />\n– body<br />\nreturn &quot;无&quot;<br />\nend</p>\n<p>–返回插件的描述信息<br />\nfunction getDescript()<br />\nreturn &quot;这是一个DEMO&quot;<br />\nend<br />\n– 返回插件demo包名<br />\nfunction getPackageName()<br />\nreturn &quot;cn.qssq666.lua.plugindemo&quot;<br />\nend<br />\n–即将被销毁调用的方法。<br />\nfunction onDestory()<br />\nlog(&quot;destory call&quot;)<br />\nend</code></pre></p>\n","text":"本文将详细介绍Lua机器人插件的使用方法，更详细的内容也可以参考简书哦!机器人1.9.0支持lua插件加载，支持手机端lua编写插件 机器人内置lua编辑器，可以测试，运行机器人功能，lua是一种脚本语言，解释运行，随意修改，无需编译，便于修改和分享，操作简单，开发成本低，传播更...","link":"","photos":[],"count_time":{"symbolsCount":"6k","symbolsTime":"5 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%AF%B4%E6%98%8E\"><span class=\"toc-text\">说明</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%89%E8%A3%85%E7%9B%AE%E5%BD%95\"><span class=\"toc-text\">安装目录</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%83%85%E8%BF%81QQ%E6%9C%BA%E5%99%A8%E4%BA%BASDK%E7%8B%AC%E6%9C%89api%E5%8F%82%E6%95%B0\"><span class=\"toc-text\">情迁QQ机器人SDK独有api参数</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%BE%E4%BE%8B\"><span class=\"toc-text\">举例</span></a></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Mac上搭建lua环境并连接mysql","uid":"80eaeb4f03e297865aa72cd0ce564033","slug":"zl/2016-01-01-757_Mac上搭建lua环境并连接mysql","date":"2024-04-03T03:47:36.003Z","updated":"2024-04-03T03:47:36.004Z","comments":true,"path":"api/articles/zl/2016-01-01-757_Mac上搭建lua环境并连接mysql.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"Lua 是一种轻量小巧的脚本语言，用标准C语言编写并以源代码形式开放， 其设计目的是为了嵌入应用程序中，从而为应用程序提供灵活的扩展和定制功能。(以上摘抄自菜鸟教程) 鉴于Lua的诸多优势，我想在接下来的开发中应用Lua去完成一些需要脚本实现的工作。本文将记录我在Mac上搭建Lu...","link":"","photos":[],"count_time":{"symbolsCount":"2.3k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"lua全局变量的二三坑","uid":"f02e724eeb9e2b4681858f231488f1f5","slug":"zl/2016-01-01-755_lua全局变量的二三坑","date":"2024-04-03T03:47:36.002Z","updated":"2024-04-03T03:47:36.002Z","comments":true,"path":"api/articles/zl/2016-01-01-755_lua全局变量的二三坑.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":" lua全局变量的二三坑 | CloudKey Ocean &lt;meta name=&quot;keywords&quot; content=&quot;ngx-lua,&quot;/&gt; &lt;link rel=&quot;icon&quot; href=&quot;...","link":"","photos":[],"count_time":{"symbolsCount":"9k","symbolsTime":"8 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}