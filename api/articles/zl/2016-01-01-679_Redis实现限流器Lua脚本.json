{"title":"Redis实现限流器Lua脚本","uid":"204555f630806600c0a1c51fc58d3e02","slug":"zl/2016-01-01-679_Redis实现限流器Lua脚本","date":"2024-04-03T03:47:35.911Z","updated":"2024-04-03T03:47:35.912Z","comments":true,"path":"api/articles/zl/2016-01-01-679_Redis实现限流器Lua脚本.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<h3 id=\"算法原理\"><a href=\"#算法原理\" class=\"headerlink\" title=\"算法原理\"></a>算法原理</h3><p>系统以恒定的速率产生令牌，然后把令牌放到令牌桶中，令牌桶有一个容量，当令牌桶满了的时候，再向其中放入的令牌会被丢弃；当想要处理一个请求的时候，需要从令牌桶中取出一个令牌，如果此时令牌桶中没有令牌，则拒绝该请求。</p>\n<h3 id=\"数据结构\"><a href=\"#数据结构\" class=\"headerlink\" title=\"数据结构\"></a>数据结构</h3><p>采用Hash结构存储，字段定义如下：</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>capacity</td>\n<td>令牌桶容量</td>\n</tr>\n<tr>\n<td>remain</td>\n<td>剩余令牌数</td>\n</tr>\n<tr>\n<td>period</td>\n<td>时间窗口大小（秒）</td>\n</tr>\n<tr>\n<td>quota</td>\n<td>时间窗口内的限额</td>\n</tr>\n<tr>\n<td>timestamp</td>\n<td>生成令牌的时间戳（秒）</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"脚本代码\"><a href=\"#脚本代码\" class=\"headerlink\" title=\"脚本代码\"></a>脚本代码</h3><figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/><span class=\"line\">9</span><br/><span class=\"line\">10</span><br/><span class=\"line\">11</span><br/><span class=\"line\">12</span><br/><span class=\"line\">13</span><br/><span class=\"line\">14</span><br/><span class=\"line\">15</span><br/><span class=\"line\">16</span><br/><span class=\"line\">17</span><br/><span class=\"line\">18</span><br/><span class=\"line\">19</span><br/><span class=\"line\">20</span><br/><span class=\"line\">21</span><br/><span class=\"line\">22</span><br/><span class=\"line\">23</span><br/><span class=\"line\">24</span><br/><span class=\"line\">25</span><br/><span class=\"line\">26</span><br/><span class=\"line\">27</span><br/><span class=\"line\">28</span><br/><span class=\"line\">29</span><br/><span class=\"line\">30</span><br/><span class=\"line\">31</span><br/><span class=\"line\">32</span><br/><span class=\"line\">33</span><br/><span class=\"line\">34</span><br/><span class=\"line\">35</span><br/><span class=\"line\">36</span><br/><span class=\"line\">37</span><br/><span class=\"line\">38</span><br/><span class=\"line\">39</span><br/><span class=\"line\">40</span><br/><span class=\"line\">41</span><br/><span class=\"line\">42</span><br/><span class=\"line\">43</span><br/><span class=\"line\">44</span><br/><span class=\"line\">45</span><br/><span class=\"line\">46</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br/><span class=\"line\"></span><br/><span class=\"line\">redis.replicate_commands()</span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"keyword\">local</span> key = KEYS[<span class=\"number\">1</span>] <span class=\"comment\">-- 令牌桶标识</span></span><br/><span class=\"line\"><span class=\"keyword\">local</span> capacity = <span class=\"built_in\">tonumber</span>(ARGV[<span class=\"number\">1</span>]) <span class=\"comment\">-- 最大容量</span></span><br/><span class=\"line\"><span class=\"keyword\">local</span> quota = <span class=\"built_in\">tonumber</span>(ARGV[<span class=\"number\">2</span>]) <span class=\"comment\">-- 时间窗口内的限额</span></span><br/><span class=\"line\"><span class=\"keyword\">local</span> period = <span class=\"built_in\">tonumber</span>(ARGV[<span class=\"number\">3</span>]) <span class=\"comment\">-- 时间窗口大小（秒）</span></span><br/><span class=\"line\"><span class=\"keyword\">local</span> quantity = <span class=\"built_in\">tonumber</span>(ARGV[<span class=\"number\">4</span>]) <span class=\"keyword\">or</span> <span class=\"number\">1</span> <span class=\"comment\">-- 需要的令牌数量，默认为1</span></span><br/><span class=\"line\"><span class=\"keyword\">local</span> timestamp = <span class=\"built_in\">tonumber</span>(redis.call(<span class=\"string\">&#39;time&#39;</span>)[<span class=\"number\">1</span>]) <span class=\"comment\">-- 当前时间戳</span></span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"built_in\">assert</span>(<span class=\"built_in\">type</span>(capacity) == <span class=\"string\">&#34;number&#34;</span>, <span class=\"string\">&#34;capacity is not a number!&#34;</span>)</span><br/><span class=\"line\"><span class=\"built_in\">assert</span>(<span class=\"built_in\">type</span>(quota) == <span class=\"string\">&#34;number&#34;</span>, <span class=\"string\">&#34;quota is not a number!&#34;</span>)</span><br/><span class=\"line\"><span class=\"built_in\">assert</span>(<span class=\"built_in\">type</span>(period) == <span class=\"string\">&#34;number&#34;</span>, <span class=\"string\">&#34;period is not a number!&#34;</span>)</span><br/><span class=\"line\"><span class=\"built_in\">assert</span>(<span class=\"built_in\">type</span>(quantity) == <span class=\"string\">&#34;number&#34;</span>, <span class=\"string\">&#34;quantity is not a number!&#34;</span>)</span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"comment\">-- 第一次请求时创建令牌桶</span></span><br/><span class=\"line\"><span class=\"keyword\">if</span> (redis.call(<span class=\"string\">&#39;exists&#39;</span>, key) == <span class=\"number\">0</span>) <span class=\"keyword\">then</span></span><br/><span class=\"line\">    redis.call(<span class=\"string\">&#39;hmset&#39;</span>, key, <span class=\"string\">&#39;remain&#39;</span>, capacity, <span class=\"string\">&#39;timestamp&#39;</span>, timestamp)</span><br/><span class=\"line\"><span class=\"keyword\">else</span></span><br/><span class=\"line\">    <span class=\"comment\">-- 计算从上次生成到现在这段时间应该生成的令牌数</span></span><br/><span class=\"line\">    <span class=\"keyword\">local</span> remain = <span class=\"built_in\">tonumber</span>(redis.call(<span class=\"string\">&#39;hget&#39;</span>, key, <span class=\"string\">&#39;remain&#39;</span>))</span><br/><span class=\"line\">    <span class=\"keyword\">local</span> last_reset = <span class=\"built_in\">tonumber</span>(redis.call(<span class=\"string\">&#39;hget&#39;</span>, key, <span class=\"string\">&#39;timestamp&#39;</span>))</span><br/><span class=\"line\">    <span class=\"keyword\">local</span> delta_quota = <span class=\"built_in\">math</span>.<span class=\"built_in\">floor</span>(((timestamp - last_reset) / period) * quota)</span><br/><span class=\"line\">    <span class=\"keyword\">if</span> (delta_quota &gt; <span class=\"number\">0</span>) <span class=\"keyword\">then</span></span><br/><span class=\"line\">        remain = remain + delta_quota</span><br/><span class=\"line\">        <span class=\"keyword\">if</span> (remain &gt; capacity) <span class=\"keyword\">then</span></span><br/><span class=\"line\">            remain = capacity</span><br/><span class=\"line\">        <span class=\"keyword\">end</span></span><br/><span class=\"line\">        redis.call(<span class=\"string\">&#39;hmset&#39;</span>, key, <span class=\"string\">&#39;remain&#39;</span>, remain, <span class=\"string\">&#39;timestamp&#39;</span>, timestamp)</span><br/><span class=\"line\">    <span class=\"keyword\">end</span></span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"comment\">-- 支持动态调整容量和令牌生成速率</span></span><br/><span class=\"line\">redis.call(<span class=\"string\">&#39;hmset&#39;</span>, key, <span class=\"string\">&#39;capacity&#39;</span>, capacity, <span class=\"string\">&#39;quota&#39;</span>, quota, <span class=\"string\">&#39;period&#39;</span>, period);</span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"keyword\">local</span> result = {} <span class=\"comment\">-- 返回的结果集</span></span><br/><span class=\"line\"><span class=\"keyword\">local</span> remain = <span class=\"built_in\">tonumber</span>(redis.call(<span class=\"string\">&#39;hget&#39;</span>, key, <span class=\"string\">&#39;remain&#39;</span>))</span><br/><span class=\"line\"><span class=\"keyword\">if</span> (remain &lt; quantity) <span class=\"keyword\">then</span></span><br/><span class=\"line\">    result = {<span class=\"number\">1</span>, capacity, remain}</span><br/><span class=\"line\"><span class=\"keyword\">else</span></span><br/><span class=\"line\">    result = {<span class=\"number\">0</span>, capacity, remain - quantity}</span><br/><span class=\"line\">    redis.call(<span class=\"string\">&#39;hincrby&#39;</span>, key, <span class=\"string\">&#39;remain&#39;</span>, -quantity)</span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"keyword\">return</span> result</span><br/></pre></td></tr></tbody></table></figure>\n<h3 id=\"运行步骤\"><a href=\"#运行步骤\" class=\"headerlink\" title=\"运行步骤\"></a>运行步骤</h3><p>将上面的代码保存到rate_limiter.lua文件。<br/></p><figure class=\"highlight sh\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">$ vi rate_limiter.lua</span><br/></pre></td></tr></tbody></table></figure><p></p>\n<p>将lua脚本文件加载到redis中，返回一个sha值。<br/></p><figure class=\"highlight sh\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">$ redis-cli script load <span class=\"string\">&#34;<span class=\"variable\">$(cat rate_limiter.lua)</span>&#34;</span></span><br/><span class=\"line\"><span class=\"string\">&#34;ea8de8016cf04dce431aa9973b8ffe515e06f42a&#34;</span></span><br/></pre></td></tr></tbody></table></figure><p></p>\n<p>在redis客户端中执行evalsha命令，传入步骤2生成的sha值。<br/></p><figure class=\"highlight sh\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">redis&gt; evalsha ea8de8016cf04dce431aa9973b8ffe515e06f42a 1 ratelimiter 100 30 60</span><br/><span class=\"line\">1) (<span class=\"built_in\">integer</span>) 0      <span class=\"comment\"># 未限流</span></span><br/><span class=\"line\">2) (<span class=\"built_in\">integer</span>) 100    <span class=\"comment\"># 容量100</span></span><br/><span class=\"line\">3) (<span class=\"built_in\">integer</span>) 99     <span class=\"comment\"># 当前剩余99</span></span><br/></pre></td></tr></tbody></table></figure><p></p>\n<p>连续执行几次相同的命令，观察效果。<br/></p><figure class=\"highlight sh\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/><span class=\"line\">9</span><br/><span class=\"line\">10</span><br/><span class=\"line\">11</span><br/><span class=\"line\">12</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">redis&gt; evalsha ea8de8016cf04dce431aa9973b8ffe515e06f42a 1 ratelimiter 10 10 60 5</span><br/><span class=\"line\">1) (<span class=\"built_in\">integer</span>) 0      <span class=\"comment\"># 未限流</span></span><br/><span class=\"line\">2) (<span class=\"built_in\">integer</span>) 10     <span class=\"comment\"># 容量10</span></span><br/><span class=\"line\">3) (<span class=\"built_in\">integer</span>) 5      <span class=\"comment\"># 当前剩余5</span></span><br/><span class=\"line\">redis&gt; evalsha ea8de8016cf04dce431aa9973b8ffe515e06f42a 1 ratelimiter 10 10 60 5</span><br/><span class=\"line\">1) (<span class=\"built_in\">integer</span>) 0      <span class=\"comment\"># 未限流</span></span><br/><span class=\"line\">2) (<span class=\"built_in\">integer</span>) 10     <span class=\"comment\"># 容量10</span></span><br/><span class=\"line\">3) (<span class=\"built_in\">integer</span>) 0      <span class=\"comment\"># 当前剩余0</span></span><br/><span class=\"line\">redis&gt; evalsha ea8de8016cf04dce431aa9973b8ffe515e06f42a 1 ratelimiter 10 10 60 5</span><br/><span class=\"line\">1) (<span class=\"built_in\">integer</span>) 1      <span class=\"comment\"># 已限流</span></span><br/><span class=\"line\">2) (<span class=\"built_in\">integer</span>) 10     <span class=\"comment\"># 容量10</span></span><br/><span class=\"line\">3) (<span class=\"built_in\">integer</span>) 0      <span class=\"comment\"># 当前剩余0</span></span><br/></pre></td></tr></tbody></table></figure><p></p>\n<h3 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h3><ul>\n<li><a href=\"http://redisdoc.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Redis 命令参考</a></li>\n<li><a href=\"https://juejin.im/book/5afc2e5f6fb9a07a9b362527/section/5b44aaf75188251a9f248c4c\" target=\"_blank\" rel=\"noopener noreferrer\">Redis 深度历险：核心原理与应用实践</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000015967922\" target=\"_blank\" rel=\"noopener noreferrer\">接口限流算法：漏桶算法&amp;令牌桶算法</a></li>\n</ul>","text":"算法原理系统以恒定的速率产生令牌，然后把令牌放到令牌桶中，令牌桶有一个容量，当令牌桶满了的时候，再向其中放入的令牌会被丢弃；当想要处理一个请求的时候，需要从令牌桶中取出一个令牌，如果此时令牌桶中没有令牌，则拒绝该请求。 数据结构采用Hash结构存储，字段定义如下： 名称 含义 c...","link":"","photos":[],"count_time":{"symbolsCount":"3k","symbolsTime":"3 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%AE%97%E6%B3%95%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">算法原理</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">数据结构</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%84%9A%E6%9C%AC%E4%BB%A3%E7%A0%81\"><span class=\"toc-text\">脚本代码</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%BF%90%E8%A1%8C%E6%AD%A5%E9%AA%A4\"><span class=\"toc-text\">运行步骤</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8F%82%E8%80%83%E9%93%BE%E6%8E%A5\"><span class=\"toc-text\">参考链接</span></a></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"ulua学习笔记1","uid":"aaff2d552cd8f01832adc372fb61fa84","slug":"zl/2016-01-01-678_ulua学习笔记1","date":"2024-04-03T03:47:35.911Z","updated":"2024-04-03T03:47:35.911Z","comments":true,"path":"api/articles/zl/2016-01-01-678_ulua学习笔记1.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"本文为bbbbbbion（可以叫我六饼）原创总结，如有疏漏请各位拍砖留言。转载请尊重原作者成果，保留出处。这一系列用于记录笔者学习ulua热更新的过程。首先来看Windows下lua环境的搭建。 环境：lua for windows (lfW)主页：http://luaforwi...","link":"","photos":[],"count_time":{"symbolsCount":"6k","symbolsTime":"5 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Lua垃圾回收","uid":"956cb1692bdff1d5b6d834ddef84f682","slug":"zl/2016-01-01-676_Lua垃圾回收 [ 奔跑的蜗牛 ]","date":"2024-04-03T03:47:35.907Z","updated":"2024-04-03T03:47:35.907Z","comments":true,"path":"api/articles/zl/2016-01-01-676_Lua垃圾回收 [ 奔跑的蜗牛 ].json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":" 撰写于 2018-05-25 &lt;span id=&quot;post-title-updated&quot;&gt;修改于 2018-05-25&lt;/span&gt; &lt;span id=&quot;post-title-categories&quot;&gt;分...","link":"","photos":[],"count_time":{"symbolsCount":"2.7k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}