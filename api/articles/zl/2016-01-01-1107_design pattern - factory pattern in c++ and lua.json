{"title":"design pattern - factory pattern in c++ and lua","uid":"05bfa2829029949c47276089d7947eea","slug":"zl/2016-01-01-1107_design pattern - factory pattern in c++ and lua","date":"2024-04-03T03:47:33.003Z","updated":"2024-04-03T03:47:33.003Z","comments":true,"path":"api/articles/zl/2016-01-01-1107_design pattern - factory pattern in c++ and lua.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<ul id=\"markdown-toc\">\n  <li><a href=\"#what-is-factory-pattern\" id=\"markdown-toc-what-is-factory-pattern\">What is Factory Pattern</a></li>\n  <li><a href=\"#example-in-c\" id=\"markdown-toc-example-in-c\">Example in C++</a></li>\n  <li><a href=\"#example-in-lua\" id=\"markdown-toc-example-in-lua\">Example in Lua</a></li>\n</ul>\n<center><br/>\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/e/ee/Factory_Method_pattern_in_LePUS3.png/300px-Factory_Method_pattern_in_LePUS3.png\" width=\"300\" itemprop=\"image\"/>\n</center>\n<p><br/>\n<a href=\"https://en.wikipedia.org/wiki/Factory_pattern\">Factory Pattern Wiki</a><br/></p>\n<blockquote>\n  <p>In object-oriented programming (OOP), a factory is an object for creating other objects – formally a factory is a function or method that returns objects of a varying prototype or class from some method call, which is assumed to be “new”. More broadly, a subroutine that returns a “new” object may be referred to as a “factory”, as in factory method or factory function. This is a basic concept in OOP, and forms the basis for a number of related software design patterns.\n</p>\n</blockquote>\n<center><b><br/>\n一一一一一一一一一一一一一一一一一一一一一一一一<br/>\n© Hung-Chi&#39;s Blog<br/>\n<a href=\"https://hungchicheng.github.io/2017/12/07/Design-Patterns-Factory-Pattern-in-lua-and-C++/\" id=\"link\" target=\"_blank\" rel=\"noopener noreferrer\">\n\thttps://hungchicheng.github.io/2017/12/07/Design-Patterns-Factory-Pattern-in-lua-and-C++/\n</a><br/>\n一一一一一一一一一一一一一一一一一一一一一一一一\n</b></center>\n<p><br/></p>\n<center>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n</center>\n<h2 id=\"what-is-factory-pattern\">What is Factory Pattern</h2>\n<h2 id=\"example-in-c\">Example in C++</h2>\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"cp\">#include &lt;iostream&gt;\n#include &lt;unordered_map&gt;\n#include &lt;functional&gt;\n#include &lt;vector&gt;\n</span>\n<span class=\"c1\">// Base\n</span><span class=\"k\">class</span> <span class=\"nc\">Monster</span> <span class=\"p\">&#123;</span>\n<span class=\"k\">public</span><span class=\"o\">:</span>\n    <span class=\"k\">virtual</span> <span class=\"kt\">void</span> <span class=\"n\">appear</span><span class=\"p\">()</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">&#125;;</span>\n<p><span class=\"c1\">// Factory<br />\n</span><span class=\"k\">class</span> <span class=\"nc\">MonsterFactory</span> <span class=\"p\">&#123;</span><br />\n<span class=\"k\">public</span><span class=\"o\">:</span><br />\n<span class=\"k\">typedef</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">unordered_map</span><span class=\"o\">&lt;</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span><span class=\"p\">,</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">function</span><span class=\"o\">&lt;</span><span class=\"n\">Monster</span><span class=\"o\">*</span><span class=\"p\">()</span><span class=\"o\">&gt;&gt;</span> <span class=\"n\">registry_map</span><span class=\"p\">;</span></p>\n<pre><code>&lt;span class=&quot;c1&quot;&gt;// use this to instantiate the proper Derived class\n</code></pre>\n<p></span>    <span class=\"k\">static</span> <span class=\"n\">Monster</span> <span class=\"o\">*</span> <span class=\"nf\">instantiate</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span><span class=\"o\">&amp;</span> <span class=\"n\">name</span><span class=\"p\">)</span><br />\n<span class=\"p\">{</span><br />\n<span class=\"k\">auto</span> <span class=\"n\">it</span> <span class=\"o\">=</span> <span class=\"n\">MonsterFactory</span><span class=\"o\">::</span><span class=\"n\">registry</span><span class=\"p\">().</span><span class=\"n\">find</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">);</span><br />\n<span class=\"k\">return</span> <span class=\"n\">it</span> <span class=\"o\">==</span> <span class=\"n\">MonsterFactory</span><span class=\"o\">::</span><span class=\"n\">registry</span><span class=\"p\">().</span><span class=\"n\">end</span><span class=\"p\">()</span> <span class=\"o\">?</span> <span class=\"nb\">nullptr</span> <span class=\"o\">:</span> <span class=\"p\">(</span><span class=\"n\">it</span><span class=\"o\">-&gt;</span><span class=\"n\">second</span><span class=\"p\">)();</span><br />\n<span class=\"p\">}</span></p>\n<pre><code>&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;registry_map&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;registry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&#123;&lt;/span&gt;\n    &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;registry_map&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;impl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;\n    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;impl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;\n&lt;span class=&quot;p&quot;&gt;&#125;&lt;/span&gt;\n</code></pre>\n<p><span class=\"p\">};</span></p>\n<p><span class=\"k\">template</span><span class=\"o\">&lt;</span><span class=\"k\">typename</span> <span class=\"n\">T</span><span class=\"o\">&gt;</span> <span class=\"k\">struct</span> <span class=\"n\">MonsterFactoryRegister</span><br />\n<span class=\"p\">{</span><br />\n<span class=\"n\">MonsterFactoryRegister</span><span class=\"p\">(</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span> <span class=\"n\">name</span><span class=\"p\">)</span><br />\n<span class=\"p\">{</span><br />\n<span class=\"n\">MonsterFactory</span><span class=\"o\">::</span><span class=\"n\">registry</span><span class=\"p\">()[</span><span class=\"n\">name</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\"><a href=\"\"></a></span> <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"k\">new</span> <span class=\"n\">T</span><span class=\"p\">;</span> <span class=\"p\">};</span><br />\n<span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&quot;Registering class '&quot;</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">name</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&quot;'</span><span class=\"se\">n</span><span class=\"s\">&quot;</span><span class=\"p\">;</span><br />\n<span class=\"p\">}</span><br />\n<span class=\"p\">};</span><br />\n<span class=\"c1\">//------------------<br />\n</span><br />\n<span class=\"k\">class</span> <span class=\"nc\">Ogre</span> <span class=\"o\">:</span> <span class=\"k\">public</span> <span class=\"n\">Monster</span> <span class=\"p\">{</span><br />\n<span class=\"k\">public</span><span class=\"o\">:</span><br />\n<span class=\"kt\">void</span> <span class=\"n\">appear</span><span class=\"p\">()</span> <span class=\"p\">{</span>  <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&quot;appearing an Ogre &quot;</span> <span class=\"o\">&lt;&lt;</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">endl</span><span class=\"p\">;</span>  <span class=\"p\">}</span><br />\n<span class=\"k\">private</span><span class=\"o\">:</span><br />\n<span class=\"k\">static</span> <span class=\"n\">MonsterFactoryRegister</span><span class=\"o\">&lt;</span><span class=\"n\">Ogre</span><span class=\"o\">&gt;</span> <span class=\"n\">AddToFactory_</span><span class=\"p\">;</span><br />\n<span class=\"p\">};</span></p>\n<p><span class=\"n\">MonsterFactoryRegister</span><span class=\"o\">&lt;</span><span class=\"n\">Ogre</span><span class=\"o\">&gt;</span> <span class=\"n\">Ogre</span><span class=\"o\">::</span><span class=\"n\">AddToFactory_</span><span class=\"p\">(</span><span class=\"s\">&quot;Ogre&quot;</span> <span class=\"p\">);</span><br />\n<span class=\"c1\">//------------------<br />\n</span><br />\n<span class=\"k\">class</span> <span class=\"nc\">Demon</span> <span class=\"o\">:</span> <span class=\"k\">public</span> <span class=\"n\">Monster</span> <span class=\"p\">{</span><br />\n<span class=\"k\">public</span><span class=\"o\">:</span><br />\n<span class=\"kt\">void</span> <span class=\"n\">appear</span><span class=\"p\">()</span> <span class=\"p\">{</span>  <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&quot;appearing a Demon &quot;</span> <span class=\"o\">&lt;&lt;</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">endl</span><span class=\"p\">;</span>  <span class=\"p\">}</span><br />\n<span class=\"k\">private</span><span class=\"o\">:</span><br />\n<span class=\"k\">static</span> <span class=\"n\">MonsterFactoryRegister</span><span class=\"o\">&lt;</span><span class=\"n\">Demon</span><span class=\"o\">&gt;</span> <span class=\"n\">AddToFactory_</span><span class=\"p\">;</span><br />\n<span class=\"p\">};</span></p>\n<p><span class=\"n\">MonsterFactoryRegister</span><span class=\"o\">&lt;</span><span class=\"n\">Demon</span><span class=\"o\">&gt;</span> <span class=\"n\">Demon</span><span class=\"o\">::</span><span class=\"n\">AddToFactory_</span><span class=\"p\">(</span><span class=\"s\">&quot;Demon&quot;</span> <span class=\"p\">);</span><br />\n<span class=\"c1\">//------------------<br />\n</span></p>\n<p><span class=\"k\">class</span> <span class=\"nc\">Troll</span> <span class=\"o\">:</span> <span class=\"k\">public</span> <span class=\"n\">Monster</span> <span class=\"p\">{</span><br />\n<span class=\"k\">public</span><span class=\"o\">:</span><br />\n<span class=\"kt\">void</span> <span class=\"n\">appear</span><span class=\"p\">()</span> <span class=\"p\">{</span>  <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&quot;appearing a Troll &quot;</span> <span class=\"o\">&lt;&lt;</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">endl</span><span class=\"p\">;</span>  <span class=\"p\">}</span><br />\n<span class=\"k\">private</span><span class=\"o\">:</span><br />\n<span class=\"k\">static</span> <span class=\"n\">MonsterFactoryRegister</span><span class=\"o\">&lt;</span><span class=\"n\">Troll</span><span class=\"o\">&gt;</span> <span class=\"n\">AddToFactory_</span><span class=\"p\">;</span><br />\n<span class=\"p\">};</span></p>\n<p><span class=\"n\">MonsterFactoryRegister</span><span class=\"o\">&lt;</span><span class=\"n\">Troll</span><span class=\"o\">&gt;</span> <span class=\"n\">Troll</span><span class=\"o\">::</span><span class=\"n\">AddToFactory_</span><span class=\"p\">(</span><span class=\"s\">&quot;Troll&quot;</span> <span class=\"p\">);</span><br />\n<span class=\"c1\">//------------------<br />\n</span><br />\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">argc</span><span class=\"p\">,</span> <span class=\"kt\">char</span> <span class=\"o\"><em></span><span class=\"n\">argv</span><span class=\"p\">[])</span><br />\n<span class=\"p\">{</span><br />\n<span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"n\">Monster</span><span class=\"o\"></em>&gt;</span> <span class=\"n\">Monsters</span><span class=\"p\">;</span></p>\n<pre><code>&lt;span class=&quot;n&quot;&gt;Monsters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;push_back&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MonsterFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;instantiate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#34;Ogre&amp;#34;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;\n&lt;span class=&quot;n&quot;&gt;Monsters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;push_back&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MonsterFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;instantiate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#34;Demon&amp;#34;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;\n&lt;span class=&quot;n&quot;&gt;Monsters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;push_back&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MonsterFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;instantiate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#34;Troll&amp;#34;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;\n\n&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Monster&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Monsters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&#123;&lt;/span&gt;\n    &lt;span class=&quot;n&quot;&gt;Monster&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;appear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;\n&lt;span class=&quot;p&quot;&gt;&#125;&lt;/span&gt;\n\n&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;\n</code></pre>\n<p><span class=\"p\">}</span></p>\n<p></code></pre></div></div></p>\n<p>Output:</p>\n<div class=\"language-console highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"go\">Registering class &#39;Ogre&#39;\nRegistering class &#39;Demon&#39;\nRegistering class &#39;Troll&#39;\nappearing an Ogre \nappearing a Demon \nappearing a Troll \nappearing a Troll \nProgram ended with exit code: 0\n</span></code></pre></div></div>\n<p><a href=\"https://github.com/hungchicheng/DesignPattern/blob/master/C%2B%2B/Factory.cpp\">Download - Source Code</a><br/>\n<p><br/></p></p>\n<center>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n</center>\n<h2 id=\"example-in-lua\">Example in Lua</h2>\n<div class=\"language-lua highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">function</span> <span class=\"nf\">FuncNew</span><span class=\"p\">(</span> <span class=\"n\">obj</span> <span class=\"p\">)</span> <span class=\"c1\">-- for Inheritance </span>\n    <span class=\"k\">function</span> <span class=\"nf\">obj</span><span class=\"p\">:</span><span class=\"n\">new</span><span class=\"p\">(</span> <span class=\"n\">o</span> <span class=\"p\">)</span>\n        <span class=\"n\">o</span> <span class=\"o\">=</span> <span class=\"n\">o</span> <span class=\"ow\">or</span> <span class=\"p\">&#123;&#125;</span>\n        <span class=\"nb\">setmetatable</span><span class=\"p\">(</span> <span class=\"n\">o</span><span class=\"p\">,</span> <span class=\"n\">self</span> <span class=\"p\">)</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">__index</span> <span class=\"o\">=</span> <span class=\"n\">self</span>\n        <span class=\"k\">return</span> <span class=\"n\">o</span>\n    <span class=\"k\">end</span>\n    <span class=\"k\">return</span> <span class=\"n\">obj</span>\n<span class=\"k\">end</span>\n<p><span class=\"c1\">–</span><br />\n<span class=\"n\">Monster</span> <span class=\"o\">=</span> <span class=\"p\">&#123;&#125;</span><br />\n<span class=\"k\">function</span> <span class=\"nf\">Monster</span><span class=\"p\">:</span><span class=\"n\">create</span><span class=\"p\">()</span><br />\n<span class=\"k\">return</span> <span class=\"n\">FuncNew</span><span class=\"p\">(</span> <span class=\"n\">Monster</span> <span class=\"p\">):</span><span class=\"n\">new</span><span class=\"p\">()</span><br />\n<span class=\"k\">end</span><br />\n<span class=\"k\">function</span> <span class=\"nf\">Monster</span><span class=\"p\">:</span><span class=\"n\">appear</span><span class=\"p\">()</span> <span class=\"c1\">– virtual</span><br />\n<span class=\"c1\">– do nothing</span><br />\n<span class=\"k\">end</span></p>\n<p><span class=\"c1\">–</span><br />\n<span class=\"n\">Ogre</span> <span class=\"o\">=</span> <span class=\"n\">Monster</span><span class=\"p\">:</span><span class=\"n\">create</span><span class=\"p\">()</span> <span class=\"c1\">– inheritance Monster</span><br />\n<span class=\"n\">Ogre</span><span class=\"p\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Ogre&quot;</span><br />\n<span class=\"k\">function</span> <span class=\"nf\">Ogre</span><span class=\"p\">:</span><span class=\"n\">create</span><span class=\"p\">()</span><br />\n<span class=\"k\">return</span> <span class=\"n\">FuncNew</span><span class=\"p\">(</span> <span class=\"n\">Ogre</span> <span class=\"p\">):</span><span class=\"n\">new</span><span class=\"p\">()</span><br />\n<span class=\"k\">end</span><br />\n<span class=\"k\">function</span> <span class=\"nf\">Ogre</span><span class=\"p\">:</span><span class=\"n\">appear</span><span class=\"p\">()</span> <span class=\"c1\">– override</span><br />\n<span class=\"nb\">print</span><span class=\"p\">(</span> <span class=\"s2\">&quot;appearing an &quot;</span> <span class=\"o\">…</span> <span class=\"n\">Ogre</span><span class=\"p\">.</span><span class=\"n\">name</span> <span class=\"p\">)</span><br />\n<span class=\"k\">end</span></p>\n<p><span class=\"n\">Demon</span> <span class=\"o\">=</span> <span class=\"n\">Monster</span><span class=\"p\">:</span><span class=\"n\">create</span><span class=\"p\">()</span> <span class=\"c1\">– inheritance Monster</span><br />\n<span class=\"n\">Demon</span><span class=\"p\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Demon&quot;</span><br />\n<span class=\"k\">function</span> <span class=\"nf\">Demon</span><span class=\"p\">:</span><span class=\"n\">create</span><span class=\"p\">()</span><br />\n<span class=\"k\">return</span> <span class=\"n\">FuncNew</span><span class=\"p\">(</span> <span class=\"n\">Demon</span> <span class=\"p\">):</span><span class=\"n\">new</span><span class=\"p\">()</span><br />\n<span class=\"k\">end</span><br />\n<span class=\"k\">function</span> <span class=\"nf\">Demon</span><span class=\"p\">:</span><span class=\"n\">appear</span><span class=\"p\">()</span> <span class=\"c1\">– override</span><br />\n<span class=\"nb\">print</span><span class=\"p\">(</span> <span class=\"s2\">&quot;appearing a &quot;</span> <span class=\"o\">…</span> <span class=\"n\">Demon</span><span class=\"p\">.</span><span class=\"n\">name</span> <span class=\"p\">)</span><br />\n<span class=\"k\">end</span></p>\n<p><span class=\"n\">Troll</span> <span class=\"o\">=</span> <span class=\"n\">Monster</span><span class=\"p\">:</span><span class=\"n\">create</span><span class=\"p\">()</span> <span class=\"c1\">– inheritance Monster</span><br />\n<span class=\"n\">Troll</span><span class=\"p\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Troll&quot;</span><br />\n<span class=\"k\">function</span> <span class=\"nf\">Troll</span><span class=\"p\">:</span><span class=\"n\">create</span><span class=\"p\">()</span><br />\n<span class=\"k\">return</span> <span class=\"n\">FuncNew</span><span class=\"p\">(</span> <span class=\"n\">Troll</span> <span class=\"p\">):</span><span class=\"n\">new</span><span class=\"p\">()</span><br />\n<span class=\"k\">end</span><br />\n<span class=\"k\">function</span> <span class=\"nf\">Troll</span><span class=\"p\">:</span><span class=\"n\">appear</span><span class=\"p\">()</span> <span class=\"c1\">– override</span><br />\n<span class=\"nb\">print</span><span class=\"p\">(</span> <span class=\"s2\">&quot;appearing a &quot;</span> <span class=\"o\">…</span> <span class=\"n\">Troll</span><span class=\"p\">.</span><span class=\"n\">name</span> <span class=\"p\">)</span><br />\n<span class=\"k\">end</span></p>\n<p><span class=\"c1\">–</span><br />\n<span class=\"n\">MonsterFactory</span> <span class=\"o\">=</span> <span class=\"p\">&#123;&#125;</span><br />\n<span class=\"n\">MonsterFactory</span><span class=\"p\">.</span><span class=\"n\">registryTable</span> <span class=\"o\">=</span> <span class=\"p\">&#123;&#125;</span><br />\n<span class=\"k\">function</span> <span class=\"nf\">MonsterFactory</span><span class=\"p\">:</span><span class=\"n\">create</span><span class=\"p\">()</span><br />\n<span class=\"k\">return</span> <span class=\"n\">MonsterFactory</span><br />\n<span class=\"k\">end</span><br />\n<span class=\"k\">function</span> <span class=\"nf\">MonsterFactory</span><span class=\"p\">:</span><span class=\"n\">instantiate</span><span class=\"p\">(</span> <span class=\"n\">name</span> <span class=\"p\">)</span><br />\n<span class=\"k\">for</span> <span class=\"n\">k</span><span class=\"p\">,</span><span class=\"n\">v</span> <span class=\"k\">in</span> <span class=\"nb\">pairs</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">registryTable</span><span class=\"p\">)</span> <span class=\"k\">do</span><br />\n<span class=\"k\">if</span> <span class=\"n\">v</span><span class=\"p\">.</span><span class=\"n\">name</span> <span class=\"o\">==</span> <span class=\"n\">name</span> <span class=\"k\">then</span><br />\n<span class=\"k\">return</span> <span class=\"n\">v</span><span class=\"p\">:</span><span class=\"n\">create</span><span class=\"p\">()</span><br />\n<span class=\"k\">end</span><br />\n<span class=\"k\">end</span><br />\n<span class=\"k\">return</span> <span class=\"kc\">nil</span><br />\n<span class=\"k\">end</span><br />\n<span class=\"k\">function</span> <span class=\"nf\">MonsterFactory</span><span class=\"p\">:</span><span class=\"n\">registry</span><span class=\"p\">(</span> <span class=\"n\">monster</span> <span class=\"p\">)</span><br />\n<span class=\"nb\">print</span><span class=\"p\">(</span> <span class=\"s2\">&quot;Registering class '&quot;</span> <span class=\"o\">…</span> <span class=\"n\">monster</span><span class=\"p\">.</span><span class=\"n\">name</span> <span class=\"o\">…</span> <span class=\"s2\">&quot;'&quot;</span> <span class=\"p\">)</span><br />\n<span class=\"nb\">table.insert</span><span class=\"p\">(</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">registryTable</span><span class=\"p\">,</span> <span class=\"n\">monster</span> <span class=\"p\">)</span><br />\n<span class=\"k\">end</span></p>\n<p><span class=\"c1\">–</span><br />\n<span class=\"n\">MonsterFactory</span><span class=\"p\">:</span><span class=\"n\">registry</span><span class=\"p\">(</span> <span class=\"n\">Ogre</span> <span class=\"p\">)</span><br />\n<span class=\"n\">MonsterFactory</span><span class=\"p\">:</span><span class=\"n\">registry</span><span class=\"p\">(</span> <span class=\"n\">Demon</span> <span class=\"p\">)</span><br />\n<span class=\"n\">MonsterFactory</span><span class=\"p\">:</span><span class=\"n\">registry</span><span class=\"p\">(</span> <span class=\"n\">Troll</span> <span class=\"p\">)</span></p>\n<p><span class=\"c1\">------------------------------------------------------</span><br />\n<span class=\"kd\">local</span> <span class=\"n\">monsters</span> <span class=\"o\">=</span> <span class=\"p\">&#123;&#125;</span></p>\n<p><span class=\"nb\">table.insert</span><span class=\"p\">(</span> <span class=\"n\">monsters</span><span class=\"p\">,</span> <span class=\"n\">MonsterFactory</span><span class=\"p\">:</span><span class=\"n\">instantiate</span><span class=\"p\">(</span> <span class=\"s2\">&quot;Ogre&quot;</span> <span class=\"p\">)</span> <span class=\"p\">)</span><br />\n<span class=\"nb\">table.insert</span><span class=\"p\">(</span> <span class=\"n\">monsters</span><span class=\"p\">,</span> <span class=\"n\">MonsterFactory</span><span class=\"p\">:</span><span class=\"n\">instantiate</span><span class=\"p\">(</span> <span class=\"s2\">&quot;Demon&quot;</span> <span class=\"p\">)</span> <span class=\"p\">)</span><br />\n<span class=\"nb\">table.insert</span><span class=\"p\">(</span> <span class=\"n\">monsters</span><span class=\"p\">,</span> <span class=\"n\">MonsterFactory</span><span class=\"p\">:</span><span class=\"n\">instantiate</span><span class=\"p\">(</span> <span class=\"s2\">&quot;Troll&quot;</span> <span class=\"p\">)</span> <span class=\"p\">)</span></p>\n<p><span class=\"k\">for</span> <span class=\"n\">k</span><span class=\"p\">,</span><span class=\"n\">v</span> <span class=\"k\">in</span> <span class=\"nb\">pairs</span><span class=\"p\">(</span><span class=\"n\">monsters</span><span class=\"p\">)</span> <span class=\"k\">do</span><br />\n<span class=\"n\">v</span><span class=\"p\">:</span><span class=\"n\">appear</span><span class=\"p\">()</span><br />\n<span class=\"k\">end</span><br />\n</code></pre></div></div></p>\n<p>Output:</p>\n<div class=\"language-console highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"go\">Registering class &#39;Ogre&#39;\nRegistering class &#39;Demon&#39;\nRegistering class &#39;Troll&#39;\nappearing an Ogre\nappearing a Demon\nappearing a Troll\n[Finished in 0.0s]\n</span></code></pre></div></div>\n<p><a href=\"https://github.com/hungchicheng/DesignPattern/blob/master/Lua/Factory.lua\">Download - Source Code</a><br/></p>","text":" What is Factory Pattern Example in C++ Example in Lua Factory Pattern Wiki In object-oriented programming (OOP), a factory is an object for...","link":"","photos":[],"count_time":{"symbolsCount":"8.3k","symbolsTime":"8 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#what-is-factory-pattern\"><span class=\"toc-text\">What is Factory Pattern</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#example-in-c\"><span class=\"toc-text\">Example in C++</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#example-in-lua\"><span class=\"toc-text\">Example in Lua</span></a></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"9 why's to ask when evaluating a distributed database","uid":"89e756262469d29125eb0877dc013a5d","slug":"zl/2016-01-01-1106_9 why's to ask when evaluating a distributed datab","date":"2024-04-03T03:47:33.003Z","updated":"2024-04-03T03:47:33.003Z","comments":true,"path":"api/articles/zl/2016-01-01-1106_9 why's to ask when evaluating a distributed datab.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":" When I first started building TiDB with my co-founders, we encountered countless challenges, pitfalls, and critical design choices that cou...","link":"","photos":[],"count_time":{"symbolsCount":"21k","symbolsTime":"19 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"gcc code block evaluation c extension {...}的使用","uid":"d0ef74f1a0a1fc5ac476bd23eaad147f","slug":"zl/2016-01-01-1101_gcc code block evaluation c extension {...}的使用","date":"2024-04-03T03:47:33.002Z","updated":"2024-04-03T03:47:33.002Z","comments":true,"path":"api/articles/zl/2016-01-01-1101_gcc code block evaluation c extension {...}的使用.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"重写UI的getter方法，把初始化方法放在getter中，可以有效的较少viewDidLoad的负荷，也能使整个页面变得清晰。同时，可以利用GCC Code Block Evaluation C Extension ({…})的语法，结构化局部变量的初始化和逻辑处理，增加了代码...","link":"","photos":[],"count_time":{"symbolsCount":593,"symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}