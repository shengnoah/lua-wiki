{"title":"lua与Cpp传递参数接口介绍","uid":"394309a2e844b8a4a4af9139e80bc213","slug":"zl/2016-01-01-171_lua与Cpp传递参数接口介绍","date":"2024-04-03T03:47:33.060Z","updated":"2024-04-03T03:47:33.061Z","comments":true,"path":"api/articles/zl/2016-01-01-171_lua与Cpp传递参数接口介绍.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<p>最近在开源代码中遇到MySQL-Proxy, 其允许lua脚本实现用户的个性化配置, lua脚本可以引用C/C++的动态链接库完成一些复杂的功能. 本文对最近接触到的lua和C/C++混合的相关接口使用做个总结. 本文的完整代码在文末的附录中, 代码测试在Ubuntu16.04+lua5.1下完成, 不同版本可能API有所变化, 可以参考文末给出的官方文档链接.</p>\n<h4 id=\"相关环境配置\"><a href=\"#相关环境配置\" class=\"headerlink\" title=\"相关环境配置\"></a>相关环境配置</h4><p>首先, 要在C++中使用相关的lua的工具, 需要lua.hpp这个头文件. 在Ubuntu下, 首先需要安装lua, 然后可以在/usr/include 目录下找到相关的头文件. 其他系统可能有所不同, 可以根据具体的头文件来进行设置, 完成这步以后, 就可以开始写相关程序.</p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">//Ubuntu16.04下的环境配置</div><div class=\"line\">sudo apt-get install lua5.1</div></pre></td></tr></tbody></table></figure>\n<h4 id=\"HelloWorld\"><a href=\"#HelloWorld\" class=\"headerlink\" title=\"HelloWorld\"></a>HelloWorld</h4><h5 id=\"HelloWorld程序\"><a href=\"#HelloWorld程序\" class=\"headerlink\" title=\"HelloWorld程序\"></a>HelloWorld程序</h5><p>为了能够快速了解怎么混合使用C++和lua, 这一小节先实现一个最简单的helloworld来了解整个程序的结构, 以及相应的需要注意的点, 然后介绍具体细节. </p>\n<p>首先, 我们的目标是提供一个firstFile.so动态库文件, 给我们的lua脚本使用. 于是, 我们新建一个文件<strong>test.cpp</strong>, 写入以下内容.</p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">#include&lt;lua5.1/lua.hpp&gt;</div><div class=\"line\">#include&lt;lua5.1/lualib.h&gt;</div><div class=\"line\">#include&lt;lua5.1/lauxlib.h&gt;</div><div class=\"line\">#include&lt;iostream&gt;</div><div class=\"line\">extern &#34;C&#34; int luaopen_firstLib(lua_State *L);</div><div class=\"line\"></div><div class=\"line\">int InternalHello(lua_State* L) {</div><div class=\"line\">    std::cout&lt;&lt;&#34;Hello World!&#34;&lt;&lt;std::endl;</div><div class=\"line\">    return 0;</div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\">int luaopen_firstLib(lua_State *L){</div><div class=\"line\">    static const luaL_reg Map[]={</div><div class=\"line\">        {&#34;look&#34;,InternalHello},</div><div class=\"line\">        {NULL,NULL}</div><div class=\"line\">    };  </div><div class=\"line\">    luaL_register(L,&#34;first&#34;,Map);</div><div class=\"line\">    return 1;</div><div class=\"line\">}</div></pre></td></tr></tbody></table></figure>\n<p>然后使用如下的命令编译动态链接库firstLib.so<br/></p><figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">g++ -fPIC -shared -o firstLib.so test.cpp -llua5.1</div></pre></td></tr></tbody></table></figure><p></p>\n<p>如果上面的配置环境没有错误的话, 这段代码应该正常编译, 并形成firstLib.so库文件.</p>\n<p>我们使用<strong>lua look.lua</strong>命令执行如下的脚本, 就可以获得HelloWorld输出:</p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">package.cpath = &#34;./?.so&#34;</div><div class=\"line\">require &#34;firstLib&#34;</div><div class=\"line\">first.look()</div></pre></td></tr></tbody></table></figure>\n<h4 id=\"HelloWorld的解释\"><a href=\"#HelloWorld的解释\" class=\"headerlink\" title=\"HelloWorld的解释\"></a>HelloWorld的解释</h4><p>我们现在对上面的helloworld做一定的解释, 如下:</p>\n<ul>\n<li><p>首先, 要编写一个<strong>firstLib.so</strong>, 我们需要在C++文件中编写对应的函数<strong>luaopen_firstLib</strong>.这个函数的名字是和库文件的名字<strong>对应</strong>的, 且返回值是int, 参数列表是lua_State*. </p>\n</li>\n<li><p>需要为luaopen_firstLib函数添加extern “C”做声明.</p>\n</li>\n<li><p>在luaopen_firstLib函数中, 可以注册自己库中希望对lua脚本提供的函数. 注册的方法如下:</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">int luaopen_firstLib(lua_State *L){</div><div class=\"line\">    //1. 使用luaL_reg array类型进行注册</div><div class=\"line\">    static const luaL_reg Map[]={</div><div class=\"line\">    //2. 左边是字符串,表示对外提供的函数名. 右边是自己内部实现的函数名</div><div class=\"line\">        {&#34;look&#34;,InternalHello},</div><div class=\"line\">   //3. 以NULL,NULL结尾</div><div class=\"line\">        {NULL,NULL}</div><div class=\"line\">    };  </div><div class=\"line\">    //4. 调用注册函数, 其中first表示对外提供的库的名字</div><div class=\"line\">    luaL_register(L,&#34;first&#34;,Map);</div><div class=\"line\">    return 1;</div><div class=\"line\">}</div></pre></td></tr></tbody></table></figure>\n<p>这里需要注意几个命名的规则:</p>\n<ul>\n<li><p>我们需要的库文件的名称是firstLib.so, 所以需要编写luaopen_firstLib函数做初始化</p>\n</li>\n<li><p>每个函数在c++文件中有一个名字(如InternalHello), 在注册给lua脚本用的时候, 可以指定另外一个名字(如look)</p>\n</li>\n<li><p>注册的时候, 可以给自己的库起名字, 比如first</p>\n</li>\n</ul>\n<p>lua中使用动态库的代码注释如下:</p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">--指定lua寻找动态库的路径</div><div class=\"line\">package.cpath = &#34;./?.so&#34;</div><div class=\"line\">--设置动态库, 并且调用luaopen_xxx函数进行初始化, 这里firstLib和库文件的名字对应</div><div class=\"line\">require &#34;firstLib&#34;</div><div class=\"line\">--执行动态库中提供的函数, 这里的库引用和自己注册的时候提供的库名字对应</div><div class=\"line\">first.look()</div></pre></td></tr></tbody></table></figure>\n<p>对于自定义的函数, 其函数的返回值和参数列表是固定的, 不能改变, 如下:</p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">int (*lua_CFunction) (lua_State *L);</div></pre></td></tr></tbody></table></figure>\n<p>至此, 命名规则介绍完成, 我们可以编写任意的函数, 命名任意的库, 并且在lua脚本中进行调用. 剩下的部分, 就是传递参数了.</p>\n<h4 id=\"lua与c-传递参数\"><a href=\"#lua与c-传递参数\" class=\"headerlink\" title=\"lua与c++传递参数\"></a>lua与c++传递参数</h4><p>我在在C++中定义的函数只有一个参数, 即lua_State*, 我们需要通过这个参数来完成所有的参数传递, 以及传递返回值的功能, 这个功能基于lua的虚拟栈,并且需要使用一系列配套的函数来完成. 关于虚拟栈, 先可以简单理解成一个数组空间, lua要传参数给C++函数时, 就把数据放在这个数组中, C++函数从这个数组中读取数据. C++函数要返回数据时, 也把数据放在这个数组中, 这样lua脚本可以读取返回的数据, 所以虚拟栈就是两边通信的管道.这个虚拟栈可以通过下标访问,下表从1开始,1表示栈底.也可以接受负数的下标,-1表示栈顶. 后面小结将对其做具体介绍, 我们首先考虑从C++函数中返回内容给lua脚本的情况.</p>\n<h5 id=\"返回值\"><a href=\"#返回值\" class=\"headerlink\" title=\"返回值\"></a>返回值</h5><p>返回值可以使用如下的配套参数:</p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">void lua_pushnumber (lua_State *L, lua_Number n);</div><div class=\"line\">void lua_pushnil (lua_State *L);</div><div class=\"line\">void lua_pushinteger (lua_State *L, lua_Integer n);</div><div class=\"line\">void lua_pushboolean (lua_State *L, int b);</div><div class=\"line\">void lua_createtable (lua_State *L, int narr, int nrec);</div><div class=\"line\">...</div></pre></td></tr></tbody></table></figure>\n<p>其中对于普通内置类型, 只要使用固定的函数就可以了, 官方文档的描述也比较详细, 代码可以参考文末的附录. 下面只考虑如何传table(表)类型.需要注意的是, 每个函数结束的时候, 有一个int类型的返回值, 这个返回值表示该函数返回给lua脚本的参数个数.如果返回值和实际入栈的参数不同, 就会出现错误.</p>\n<p>对于table类型, 有两种情况, 一种是一维的表, 其结构如下</p>\n<table>\n<thead>\n<tr>\n<th>key</th>\n<th>value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>k1</td>\n<td>v1</td>\n</tr>\n<tr>\n<td>k2</td>\n<td>v2</td>\n</tr>\n<tr>\n<td>k3</td>\n<td>v3</td>\n</tr>\n</tbody>\n</table>\n<p>可以看到, 这就是普通的lua中的一维key-value结构表, 要在C++函数中产生这样的表并返回, 需要经过以下的步骤:</p>\n<p>首先, lua_createtable函数可以创建一个新表, 然后把其作为单个参数放到栈中. 这样, 栈中就增加了一个元素, 剩下的工作就是向表里面添加kv对. 比如要往一个表中添加4个kv对, 可以写如下的函数:</p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">static void mylua_pushtable2(lua_State *const l){ </div><div class=\"line\">--建立新的一维表, 入栈, 表中有4个kv对, 第二个参数设置为0, 第一个参数是lua_state*</div><div class=\"line\">    lua_createtable(l,0,4);</div><div class=\"line\">--依次插入四个kv对, 先设置value, 然后设置key</div><div class=\"line\">    lua_pushstring(l,&#34;v1&#34;);</div><div class=\"line\">    lua_setfield(l,-2,&#34;k1&#34;);</div><div class=\"line\"></div><div class=\"line\">    lua_pushstring(l,&#34;v2&#34;);</div><div class=\"line\">    lua_setfield(l,-2,&#34;k2&#34;);</div><div class=\"line\"></div><div class=\"line\">    lua_pushstring(l,&#34;v3&#34;);</div><div class=\"line\">    lua_setfield(l,-2,&#34;k3&#34;); </div><div class=\"line\"></div><div class=\"line\">    lua_pushstring(l,&#34;v4&#34;);</div><div class=\"line\">    lua_setfield(l,-2,&#34;k4&#34;);</div><div class=\"line\">}</div></pre></td></tr></tbody></table></figure>\n<p>上面调用的函数setfield中的-2, 表示下标-2的参数, 也就是我们建立的table,现假设其名字是tableA,则 setfield达到的效果是,tableA[“key”]=top, 其中top是当前栈顶元素,并且同时栈顶元素出栈. top在这里正好就是v1.于是, 我们可以通过这样的方法设计一维的表返回. 如果需要key为int类型, 可以用lua_rawseti函数, 其函数签名如下:<br/></p><figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">https://www.lua.org/manual/5.1/manual.html#2.8</div><div class=\"line\">void lua_rawseti (lua_State *L, int index, int n);</div></pre></td></tr></tbody></table></figure><p></p>\n<p>更多的函数介绍, 可以看官方文档.</p>\n<p>还有一种情况是多维的表, 也即嵌套的表, 给出如下的例子:</p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">myTable = {</div><div class=\"line\">    [0] = { [&#34;field1&#34;] = 1, [&#34;field2&#34;] = 2,[&#34;field3&#34;] = 3 },</div><div class=\"line\">    [1] = { [&#34;field1&#34;] = 10, [&#34;field2&#34;] = 20,[&#34;field3&#34;] = 30 }</div><div class=\"line\">}</div></pre></td></tr></tbody></table></figure>\n<p>返回嵌套表的实例代码如下:</p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\">static void mylua_pushMultiTable(lua_State *const L){ </div><div class=\"line\">    lua_createtable(L, 2, 0); </div><div class=\"line\"></div><div class=\"line\">    lua_pushnumber(L, 1); </div><div class=\"line\"></div><div class=\"line\">        lua_createtable(L, 0, 3); </div><div class=\"line\"></div><div class=\"line\">        lua_pushnumber(L, 1); </div><div class=\"line\">        lua_setfield(L, -2, &#34;field1&#34;);</div><div class=\"line\"></div><div class=\"line\">        lua_pushnumber(L, 2);</div><div class=\"line\">        lua_setfield(L, -2, &#34;field2&#34;);</div><div class=\"line\"></div><div class=\"line\">        lua_pushnumber(L, 3);</div><div class=\"line\">        lua_setfield(L, -2, &#34;field3&#34;);</div><div class=\"line\"></div><div class=\"line\">    lua_settable(L, -3);</div><div class=\"line\"></div><div class=\"line\">    lua_pushnumber(L, 2);</div><div class=\"line\">        lua_createtable(L, 0, 3);</div><div class=\"line\"></div><div class=\"line\">        lua_pushnumber(L, 10);</div><div class=\"line\">        lua_setfield(L, -2, &#34;field1&#34;);</div><div class=\"line\"></div><div class=\"line\">        lua_pushnumber(L, 20);</div><div class=\"line\">        lua_setfield(L, -2, &#34;field2&#34;);</div><div class=\"line\"></div><div class=\"line\">        lua_pushnumber(L, 30);</div><div class=\"line\">        lua_setfield(L, -2, &#34;field3&#34;);</div><div class=\"line\"></div><div class=\"line\">    lua_settable(L, -3);</div><div class=\"line\">}</div></pre></td></tr></tbody></table></figure>\n<p>可以看到, 对于一个key对应内部value结构是一个表的情况, 需要用到lua_createtable的第二个参数, 表示最外层需要的项目个数.对于内部的每个表, 则再次使用建立一维表的方式来完成kv对的插入, 这里的lua_settable的作用和上面介绍的lua_setfield相似. 对于我们例子中的表, 外层有两个项目,key分别是0和1, 所以lua_createtable的第二个参数设置为2. 对于内层的表, 由于有三个项目, 所以lua_createtable的第三个参数设置为3.</p>\n<h5 id=\"接受参数\"><a href=\"#接受参数\" class=\"headerlink\" title=\"接受参数\"></a>接受参数</h5><p>接受从lua脚本中传递的参数可以使用如下的函数:</p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">int lua_toboolean (lua_State *L, int index);</div><div class=\"line\">double lua_tonumber (lua_State *L, int index);</div><div class=\"line\">lua_Integer lua_tointeger (lua_State *L, int index);</div><div class=\"line\">const char *lua_tolstring (lua_State *L, int index, size_t *len);</div><div class=\"line\">int lua_next (lua_State *L, int index);</div><div class=\"line\">....</div></pre></td></tr></tbody></table></figure>\n<p>可以看到, 接受参数需要用户显式指定下标和数据类型, 这样lua传递过来的数据才能正确解析.</p>\n<ul>\n<li>传string类型<br/>lua传string类型是以const char * 来传递的, 是一个一’","text":"最近在开源代码中遇到MySQL-Proxy, 其允许lua脚本实现用户的个性化配置, lua脚本可以引用C/C++的动态链接库完成一些复杂的功能. 本文对最近接触到的lua和C/C++混合的相关接口使用做个总结. 本文的完整代码在文末的附录中, 代码测试在Ubuntu16.04+...","link":"","photos":[],"count_time":{"symbolsCount":"5.8k","symbolsTime":"5 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%9B%B8%E5%85%B3%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">相关环境配置</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#HelloWorld\"><span class=\"toc-text\">HelloWorld</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#HelloWorld%E7%A8%8B%E5%BA%8F\"><span class=\"toc-text\">HelloWorld程序</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#HelloWorld%E7%9A%84%E8%A7%A3%E9%87%8A\"><span class=\"toc-text\">HelloWorld的解释</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#lua%E4%B8%8Ec-%E4%BC%A0%E9%80%92%E5%8F%82%E6%95%B0\"><span class=\"toc-text\">lua与c++传递参数</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E8%BF%94%E5%9B%9E%E5%80%BC\"><span class=\"toc-text\">返回值</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E6%8E%A5%E5%8F%97%E5%8F%82%E6%95%B0\"><span class=\"toc-text\">接受参数</span></a></li></ol></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Lua面向对象程序设计 · 花生肉泥","uid":"a08477f26237ca96269b3d0e18271099","slug":"zl/2016-01-01-172_Lua面向对象程序设计 · 花生肉泥","date":"2024-04-03T03:47:33.061Z","updated":"2024-04-03T03:47:33.061Z","comments":true,"path":"api/articles/zl/2016-01-01-172_Lua面向对象程序设计 · 花生肉泥.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"类lua不存在类的概念，每个对象定义他自己的行为并拥有自己的形状（shape）。然而，依据基于原型的语言，在lua中仿效类的概念并不难。 在lua中，使用继承的思想，很容易实现prototype（原型），如果我们有两个对象a和b，我们想让b作为a的原型，只需要1setmetata...","link":"","photos":[],"count_time":{"symbolsCount":585,"symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"LeetCode 399. Evaluate Division  ","uid":"cb334b4622db6fe8d9c4092b783ee545","slug":"zl/2016-01-01-16_LeetCode 399. Evaluate Division  ","date":"2024-04-03T03:47:33.059Z","updated":"2024-04-03T03:47:33.059Z","comments":true,"path":"api/articles/zl/2016-01-01-16_LeetCode 399. Evaluate Division  .json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":" &lt;i class=&quot;mobile-toggle&quot; style=&quot;display:none;&quot;&gt;&lt;img src=&quot;https://img.dazhuanlan.com/2019/11/26/5ddcf6326f...","link":"","photos":[],"count_time":{"symbolsCount":"3.8k","symbolsTime":"3 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}