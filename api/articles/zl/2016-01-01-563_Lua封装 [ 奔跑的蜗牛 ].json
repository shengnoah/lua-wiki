{"title":"Lua封装 [ 奔跑的蜗牛 ]","uid":"3978f4e0c59724fc4edb93b95117c340","slug":"zl/2016-01-01-563_Lua封装 [ 奔跑的蜗牛 ]","date":"2024-04-03T03:47:35.821Z","updated":"2024-04-03T03:47:35.821Z","comments":true,"path":"api/articles/zl/2016-01-01-563_Lua封装 [ 奔跑的蜗牛 ].json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<p class=\"page-title-sub\">\n      <span id=\"post-title-date\">撰写于 2018-05-25</span>\n<pre><code>    &lt;span id=&quot;post-title-updated&quot;&gt;修改于 2018-05-25&lt;/span&gt;\n  \n  \n  &lt;span id=&quot;post-title-categories&quot;&gt;分类\n  \n  \n    \n    \n    &lt;a href=&quot;/categories/高级Lua/&quot;&gt;高级Lua&lt;/a&gt;\n  \n  &lt;/span&gt;\n  \n  \n  &lt;span id=&quot;post-title-tags&quot;&gt;\n  标签\n  \n  \n    \n    \n    &lt;a href=&quot;/tags/Lua/&quot;&gt;Lua&lt;/a&gt;\n  \n  &lt;/span&gt;\n  \n&lt;/p&gt;\n\n&lt;p&gt;lua本身是不具有OO的特性，但是里面有一些特殊性东西可以帮助lua实现OO，例如可以巧妙的使用metatable，实现继承；lua的底层是&lt;br/&gt;C，本事是不支持多态，但是可以通过覆盖，实现简单的函数的多态。那封装是怎么实现的呢？&lt;/p&gt;\n</code></pre>\n<p>lua的封装很简单，为了防止命名污染，工程里面一般使用的一个table，把自定义的函数和变量存入里面，这样就保证了这些变量和函数的名字有了独立的命名空间，大概如下：<br/></p><figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/><span class=\"line\">9</span><br/><span class=\"line\">10</span><br/><span class=\"line\">11</span><br/><span class=\"line\">12</span><br/><span class=\"line\">13</span><br/><span class=\"line\">14</span><br/><span class=\"line\">15</span><br/><span class=\"line\">16</span><br/><span class=\"line\">17</span><br/><span class=\"line\">18</span><br/><span class=\"line\">19</span><br/><span class=\"line\">20</span><br/><span class=\"line\">21</span><br/><span class=\"line\">22</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">local</span> P = {}</span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(x)</span></span></span><br/><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"built_in\">tonumber</span>(x)</span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">P:new</span><span class=\"params\">()</span></span></span><br/><span class=\"line\">\t<span class=\"keyword\">local</span> o = {}</span><br/><span class=\"line\">\t<span class=\"built_in\">setmetatable</span>(o, self)</span><br/><span class=\"line\">\tself._index = self</span><br/><span class=\"line\">\t<span class=\"keyword\">return</span> o</span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">P:add</span><span class=\"params\">(x, y)</span></span></span><br/><span class=\"line\">\t<span class=\"keyword\">local</span> x_num = self:toNumber(x)</span><br/><span class=\"line\">\t<span class=\"keyword\">local</span> y_num = self:toNumber(y)</span><br/><span class=\"line\">\t<span class=\"keyword\">if</span> x_num <span class=\"keyword\">and</span> y_num <span class=\"keyword\">then</span></span><br/><span class=\"line\">\t\t<span class=\"keyword\">return</span> x_num + y_num</span><br/><span class=\"line\">\t<span class=\"keyword\">end</span></span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"keyword\">return</span> P</span><br/></pre></td></tr></tbody></table></figure><p></p>\n<p>如果我们不想让函数 toNumer “暴露”出去，只在内部使用，也就相当于OO的私有函数，怎么处理呢？很简单，不把 toNumber 放在 P 中就好了，这样函数就不会暴露出去。</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/><span class=\"line\">9</span><br/><span class=\"line\">10</span><br/><span class=\"line\">11</span><br/><span class=\"line\">12</span><br/><span class=\"line\">13</span><br/><span class=\"line\">14</span><br/><span class=\"line\">15</span><br/><span class=\"line\">16</span><br/><span class=\"line\">17</span><br/><span class=\"line\">18</span><br/><span class=\"line\">19</span><br/><span class=\"line\">20</span><br/><span class=\"line\">21</span><br/><span class=\"line\">22</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">local</span> P = {}</span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">toNumer</span><span class=\"params\">(x)</span></span></span><br/><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"built_in\">tonumber</span>(x)</span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">P:new</span><span class=\"params\">()</span></span></span><br/><span class=\"line\">\t<span class=\"keyword\">local</span> o = {}</span><br/><span class=\"line\">\t<span class=\"built_in\">setmetatable</span>(o, self)</span><br/><span class=\"line\">\tself._index = self</span><br/><span class=\"line\">\t<span class=\"keyword\">return</span> o</span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">P:add</span><span class=\"params\">(x, y)</span></span></span><br/><span class=\"line\">\t<span class=\"keyword\">local</span> x_num = self:toNumber(x)</span><br/><span class=\"line\">\t<span class=\"keyword\">local</span> y_num = self:toNumber(y)</span><br/><span class=\"line\">\t<span class=\"keyword\">if</span> x_num <span class=\"keyword\">and</span> y_num <span class=\"keyword\">then</span></span><br/><span class=\"line\">\t\t<span class=\"keyword\">return</span> x_num + y_num</span><br/><span class=\"line\">\t<span class=\"keyword\">end</span></span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"keyword\">return</span> P</span><br/></pre></td></tr></tbody></table></figure>\n<p>还有一种方法，就是把所有的函数都定义为局部函数，把需要暴露出去的函数放入table中，这样我们不再需要调用函数的时候在前面加上前缀，公有的和私有的函数调用方法相同。在package的结尾处，有一个简单的列表列出所有公有的函数。</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/><span class=\"line\">9</span><br/><span class=\"line\">10</span><br/><span class=\"line\">11</span><br/><span class=\"line\">12</span><br/><span class=\"line\">13</span><br/><span class=\"line\">14</span><br/><span class=\"line\">15</span><br/><span class=\"line\">16</span><br/><span class=\"line\">17</span><br/><span class=\"line\">18</span><br/><span class=\"line\">19</span><br/><span class=\"line\">20</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">toNumer</span><span class=\"params\">(x)</span></span></span><br/><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"built_in\">tonumber</span>(x)</span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">new</span><span class=\"params\">()</span></span></span><br/><span class=\"line\">\t<span class=\"keyword\">local</span> o = {}</span><br/><span class=\"line\">\t<span class=\"built_in\">setmetatable</span>(o, self)</span><br/><span class=\"line\">\tself._index = self</span><br/><span class=\"line\">\t<span class=\"keyword\">return</span> o</span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span><span class=\"params\">(x, y)</span></span></span><br/><span class=\"line\">\t<span class=\"keyword\">local</span> x_num = self:toNumber(x)</span><br/><span class=\"line\">\t<span class=\"keyword\">local</span> y_num = self:toNumber(y)</span><br/><span class=\"line\">\t<span class=\"keyword\">if</span> x_num <span class=\"keyword\">and</span> y_num <span class=\"keyword\">then</span></span><br/><span class=\"line\">\t\t<span class=\"keyword\">return</span> x_num + y_num</span><br/><span class=\"line\">\t<span class=\"keyword\">end</span></span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"keyword\">return</span> {new = new, add = add}</span><br/></pre></td></tr></tbody></table></figure>\n<p><a href=\"http://book.luaer.cn/_92.htm\" target=\"_blank\" rel=\"noopener noreferrer\">参考文献:lua手册</a></p>","text":" 撰写于 2018-05-25 &lt;span id=&quot;post-title-updated&quot;&gt;修改于 2018-05-25&lt;/span&gt; &lt;span id=&quot;post-title-categories&quot;&gt;分...","link":"","photos":[],"count_time":{"symbolsCount":"1.8k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"tolua之wrap文件的原理与使用","uid":"99d79527b247d67792c14ab4db2f8700","slug":"zl/2016-01-01-566_tolua之wrap文件的原理与使用","date":"2024-04-03T03:47:35.822Z","updated":"2024-04-03T03:47:35.823Z","comments":true,"path":"api/articles/zl/2016-01-01-566_tolua之wrap文件的原理与使用.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"每个wrap文件都是对一个c#类的包装，在lua中，通过对wrap类中的函数调用，间接的对c#实例进行操作。 wrap类文件生成和使用的总体流程 生成一个wrap文件的流程这部分主要通过分析类的反射信息完成。 wrap文件内容解析使用UnityEngine_GameObjectW...","link":"","photos":[],"count_time":{"symbolsCount":"6.1k","symbolsTime":"6 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"2.1 lua 基本语法","uid":"1340ae4fb138597b85527c5e7390d5ef","slug":"zl/2016-01-01-561_2.1 lua 基本语法","date":"2024-04-03T03:47:35.821Z","updated":"2024-04-03T03:47:35.821Z","comments":true,"path":"api/articles/zl/2016-01-01-561_2.1 lua 基本语法.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"开始C语言之后大多数讲解语言的书籍都会以打印hello world来开始。那么，如何使用lua 打印hello world呢？ 1print(&#34;hello world&#34;) 和python、golang等语言类似，执行这条语句有两种方式： 交互方式尴尬 执行lua脚...","link":"","photos":[],"count_time":{"symbolsCount":954,"symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}