{"title":"Redis lua 脚本简述","uid":"cbe59be328103b88b33e74beb07f1009","slug":"zl/2016-01-01-342_Redis lua 脚本简述","date":"2024-04-03T03:47:35.621Z","updated":"2024-04-03T03:47:35.622Z","comments":true,"path":"api/articles/zl/2016-01-01-342_Redis lua 脚本简述.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>从2.6.0版开始，Redis增加了对Lua运行环境的支持。在了解Redis lua 脚本使用前，最好能够了解 lua 的语言基础。</p>\n<p>本篇包含如下 lua 脚本内容：</p>\n<ul>\n<li>Redis加载（初始化lua运行环境）</li>\n<li>Lua与Redis数据类型的转换</li>\n<li>脚本命令执行分析</li>\n<li>脚本执行过程分析</li>\n</ul>\n<h2 id=\"Redis-Lua运行环境\"><a href=\"#Redis-Lua运行环境\" class=\"headerlink\" title=\"Redis Lua运行环境\"></a>Redis Lua运行环境</h2><p>Lua 具有原生的运行环境，提供了基本函数库，table函数库，OS函数库等。<br/>为了保障 Lua 脚本的安全性运行问题并提供对Redis的操作，在初始化Redis服务器的同时Lua环境也一并进行了系列适用于Redis的修改。<br/>包括添加函数库、更换随机函数、保护全局变量等。</p>\n<h3 id=\"创建-Lua-基本运行环境\"><a href=\"#创建-Lua-基本运行环境\" class=\"headerlink\" title=\"创建 Lua 基本运行环境\"></a>创建 Lua 基本运行环境</h3><p>在初始化的第一步，服务器首先会调用Lua的C API 函数 lua_open，创建一个新的 Lua 基本运行环境。</p>\n<h3 id=\"载入函数库\"><a href=\"#载入函数库\" class=\"headerlink\" title=\"载入函数库\"></a>载入函数库</h3><ul>\n<li>基本库：包含 Lua 的核心函数，如 assert、error、pcall、pairs。<br/>为了防止用户从外部文件引入不安全代码，将库中的 loadfile 函数剔除；</li>\n<li>table 库：提供了处理 table 类型的通用函数，如 table.concat、table.remove、table.sort；</li>\n<li>string 库：提供了处理 字符串 类型的通用函数，如 string.len、string.reverse、string.format；</li>\n<li>math 库：提供标准 C 语言数学库接口，如 math.abs、math.max、math.min、math.sqrt、math.log；</li>\n<li>debug 库：提供了对程序进行调试所需函数，如 debug.sethook、debug.geghook；</li>\n<li>cjson 库：用于处理 utf-8 编码的 JSON 格式，如 cjson.encode 将一个Lua值序列化为 JSON 格式字符串、cjson.decode 将 JSON 格式字符串转换为 Lua 值；</li>\n<li>struct 库：用于处理 Lua 值和 C 结构（struct）之前进行转换，如 struct.pack 将多个 Lua 值打包成一个类结构（struct-like）字符串、struct.unpack 将一个类结构字符串解包出多个 Lua 值；</li>\n<li>cmsgpack 库：用于处理 MessagePack 格式的数据，如 cmsgpack.pack 将 Lua 值转换为 MessagePack 数据、cmsgpack.unpack 将 MessagePack 数据转换为 Lua 值。    </li>\n</ul>\n<h3 id=\"创建全局表-redis\"><a href=\"#创建全局表-redis\" class=\"headerlink\" title=\"创建全局表 redis\"></a>创建全局表 redis</h3><p>全局表 redis 中包含了各种对Redis进行操作的函数，包括：</p>\n<ul>\n<li>用于执行 Redis 命令的 redis.call 和 redis.pcall 函数</li>\n<li>用于发送日志的 redis.log 函数，以及相应的日志级别：<ul>\n<li>redis.LOG_DEBUG</li>\n<li>redis.LOG_VERBOSE</li>\n<li>redis.LOG_NOTICE</li>\n<li>redis.LOG_WARNING</li>\n</ul>\n</li>\n<li>用于计算 SHA1 校验和的 redis.sha1hex 函数</li>\n<li>用于返回错误信息的 redis.error_reply 函数和 redis.status_reply 函数</li>\n</ul>\n<h3 id=\"替换-Lua-原有随机函数\"><a href=\"#替换-Lua-原有随机函数\" class=\"headerlink\" title=\"替换 Lua 原有随机函数\"></a>替换 Lua 原有随机函数</h3><p>为了保证相同的脚本可以在不同的机器上产生相同的结果，Redis 要求所有传入服务器的 Lua 脚本，以及 Lua 环境中的所有函数，都必须是无副作用（side effect）的纯函数（pure function）。<br/>Lua 原有随机函数是基于 OS，其 seed 往往是基于时钟 ，不符合 Redis 对 Lua 环境的无副作用要求。<br/>Redis 使用自制的函数替换了 math 库中原有的 math.random 函数和 math.randomseed 函数。替换后的函数具有如下特征：</p>\n<ul>\n<li>对于相同的 seed 来说， math.random 总产生相同的随机数序列</li>\n<li>除非在脚本中使用 math.randomseed 显式地修改 seed ，否则每次运行脚本时，Lua 环境都使用固定的 math.randomseed(0) 语句来初始化 seed</li>\n</ul>\n<h3 id=\"创建排序辅助函数\"><a href=\"#创建排序辅助函数\" class=\"headerlink\" title=\"创建排序辅助函数\"></a>创建排序辅助函数</h3><p>Redis 要求所有传入服务器的 Lua 脚本无副作用，就需要处理 Lua 脚本中可能导致数据不一致的情况。<br/>除了原有随机函数会导致数据不一致外，还存在一些带有不确定性质的命令：</p>\n<ul>\n<li>SINTER</li>\n<li>SUNION</li>\n<li>SDIFF</li>\n<li>SMEMBERS</li>\n<li>HKEYS</li>\n<li>HVALS</li>\n<li>KEYS</li>\n</ul>\n<p>以 SMEMBERS 对集合的操作为例：<br/></p><figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/><span class=\"line\">9</span><br/><span class=\"line\">10</span><br/><span class=\"line\">11</span><br/><span class=\"line\">12</span><br/><span class=\"line\">13</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; SADD fruit apple banana cherry</span><br/><span class=\"line\">(integer) 3</span><br/><span class=\"line\">127.0.0.1:6379&gt; SMEMBERS fruit</span><br/><span class=\"line\">1) &#34;cherry&#34;</span><br/><span class=\"line\">2) &#34;banana&#34;</span><br/><span class=\"line\">3) &#34;apple&#34;</span><br/><span class=\"line\">127.0.0.1:6379&gt; SADD another-fruit cherry banana apple</span><br/><span class=\"line\">(integer) 3</span><br/><span class=\"line\">127.0.0.1:6379&gt; SMEMBERS another-fruit</span><br/><span class=\"line\">1) &#34;apple&#34;</span><br/><span class=\"line\">2) &#34;banana&#34;</span><br/><span class=\"line\">3) &#34;cherry&#34;</span><br/><span class=\"line\">127.0.0.1:6379&gt; </span><br/></pre></td></tr></tbody></table></figure><p></p>\n<p>例子中 fruit 集合和 another-fruit 集合包含的元素完全相同（集合 list 是无序的）。<br/>只因为集合添加元素的顺序不同，SMEMBERS 命令的输出就产生了不同的结果，是不满足 Lua 脚本无副作用要求。</p>\n<p>为了消灭这些命令带来的不确定性，Redis 服务器为 Lua 环境创建了一个排序辅助函数  <strong>redis</strong>compare_helper，<br/>当 Lua 脚本执行完一个带有不确定性的命令之后，程序会使用 <strong>redis</strong>compare_helper 作为对比函数，自动调用 table.sort 函数对命令的返回值做一次排序，以此来保证相同的数据集总是产生相同的输出。<br/>使用 lua 脚本形式执行示例：<br/></p><figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/><span class=\"line\">9</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; eval &#34;return redis.call(&#39;SMEMBERS&#39;, KEYS[1])&#34; 1 fruit</span><br/><span class=\"line\">1) &#34;apple&#34;</span><br/><span class=\"line\">2) &#34;banana&#34;</span><br/><span class=\"line\">3) &#34;cherry&#34;</span><br/><span class=\"line\">127.0.0.1:6379&gt; eval &#34;return redis.call(&#39;SMEMBERS&#39;, KEYS[1])&#34; 1 another-fruit</span><br/><span class=\"line\">1) &#34;apple&#34;</span><br/><span class=\"line\">2) &#34;banana&#34;</span><br/><span class=\"line\">3) &#34;cherry&#34;</span><br/><span class=\"line\">127.0.0.1:6379&gt; </span><br/></pre></td></tr></tbody></table></figure><p></p>\n<h3 id=\"创建错误报告辅助函数\"><a href=\"#创建错误报告辅助函数\" class=\"headerlink\" title=\"创建错误报告辅助函数\"></a>创建错误报告辅助函数</h3><p>服务器为 Lua 环境创建了一个 _redis_err_handler 的错误处理函数,<br/>当脚本运行出现错误时，_redis_err_handler 就会打印出错误代码来源与发生错误行数。<br/></p><figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; eval &#34;local a = redis.call(&#39;get&#39;, KEYS[1]), return a&#34; 1 haha</span><br/><span class=\"line\">(error) ERR Error compiling script (new function): user_script:1: unexpected symbol near &#39;return&#39; </span><br/><span class=\"line\">127.0.0.1:6379&gt; eval &#34;local a = redis.pcall(&#39;get&#39;, KEYS[1]), return a&#34; 1 haha</span><br/><span class=\"line\">(error) ERR Error compiling script (new function): user_script:1: unexpected symbol near &#39;return&#39; </span><br/><span class=\"line\">127.0.0.1:6379&gt;</span><br/></pre></td></tr></tbody></table></figure><p></p>\n<h3 id=\"保护-Lua-全局环境\"><a href=\"#保护-Lua-全局环境\" class=\"headerlink\" title=\"保护 Lua 全局环境\"></a>保护 Lua 全局环境</h3><p>因为 Lua 变量定义默认为全局变量，为了避免脚本中创建的变量对 Lua全局环境造成影响，Redis 服务器禁用了脚本中全局变量的创建。</p>\n<ol>\n<li><p>当脚本试图创建一个全局变量时，服务将会报告一个错误</p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; eval &#34;a = &#39;my a&#39;&#34; 0</span><br/><span class=\"line\">(error) ERR Error running script (call to f_842595f923de966a2f0b2cd2b8a01ae1fb074c53): @enable_strict_lua:8: user_script:1: Script attempted to create global variable &#39;a&#39; </span><br/><span class=\"line\">127.0.0.1:6379&gt; </span><br/></pre></td></tr></tbody></table></figure>\n</li>\n<li><p>当脚本视图获取一个不存在的全局变量也会引发错误</p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; eval &#34;return histo&#34; 0</span><br/><span class=\"line\">(error) ERR Error running script (call to f_e3299dfc93671ffbb8061eb25dc195c8547b0f7f): @enable_strict_lua:15: user_script:1: Script attempted to access nonexistent global variable &#39;histo&#39; </span><br/><span class=\"line\">127.0.0.1:6379&gt; </span><br/></pre></td></tr></tbody></table></figure>\n</li>\n<li><p>但是 Redis 并不禁止修改已经存在的全局变量，例如修改 全局table redis</p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/><span class=\"line\">9</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; eval &#34;redis = 110 return redis&#34; 0</span><br/><span class=\"line\">(integer) 110</span><br/><span class=\"line\">127.0.0.1:6379&gt; keys *</span><br/><span class=\"line\">1) &#34;sd&#34;</span><br/><span class=\"line\">2) &#34;ft&#34;</span><br/><span class=\"line\">3) &#34;aft&#34;</span><br/><span class=\"line\">127.0.0.1:6379&gt; eval &#34;return redis.call(&#39;SMEMBERS&#39; KEYS[1])&#34; 1 sd</span><br/><span class=\"line\">(error) ERR Error compiling script (new function): user_script:1: &#39;)&#39; expected near &#39;KEYS&#39; </span><br/><span class=\"line\">127.0.0.1:6379&gt; </span><br/></pre></td></tr></tbody></table></figure>\n</li>\n</ol>\n<h2 id=\"Lua与Redis数据类型的转换\"><a href=\"#Lua与Redis数据类型的转换\" class=\"headerlink\" title=\"Lua与Redis数据类型的转换\"></a>Lua与Redis数据类型的转换</h2><p>Redis 与 Lua 各自具有”数据类型”定义，以下转换规则确保了数据转换的一对一关系。<br/>⚠️这里的 Redis 数据类型实质上是只 Redis 服务对请求的 reply 数据。<br/>而 Redis 是采用 C/S 架构，客户端请求，服务端响应。其中的数据交互可以参考<a href=\"http://redisdoc.com/topic/protocol.html\" target=\"_blank\" rel=\"noopener noreferrer\">通信协议</a>了解。</p>\n<h3 id=\"Redis数据转换为-Lua-数据\"><a href=\"#Redis数据转换为-Lua-数据\" class=\"headerlink\" title=\"Redis数据转换为 Lua 数据\"></a>Redis数据转换为 Lua 数据</h3><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Redis Reply</th>\n<th style=\"text-align:center\">Lua Type</th>\n<th style=\"text-align:left\">补充说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">integer</td>\n<td style=\"text-align:center\">number</td>\n<td style=\"text-align:left\">-</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">bulk</td>\n<td style=\"text-align:center\">string</td>\n<td style=\"text-align:left\">-</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">multi bulk</td>\n<td style=\"text-align:center\">table</td>\n<td style=\"text-align:left\">-</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">status</td>\n<td style=\"text-align:center\">table</td>\n<td style=\"text-align:left\">包含单个 ‘ok’ 键对应值为其 status 的 table 类型</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">error</td>\n<td style=\"text-align:center\">table</td>\n<td style=\"text-align:left\">包含单个 ‘err’ 键对应值为其 error 信息的 table 类型</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Nil bulk / Nil multi bulk</td>\n<td style=\"text-align:center\">boolean</td>\n<td style=\"text-align:left\">值为 false 的 boolean 类型</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"Lua-数据转换-Redis-数据\"><a href=\"#Lua-数据转换-Redis-数据\" class=\"headerlink\" title=\"Lua 数据转换 Redis 数据\"></a>Lua 数据转换 Redis 数据</h3><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Lua Type</th>\n<th style=\"text-align:center\">Redis Reply</th>\n<th style=\"text-align:left\">补充说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">number</td>\n<td style=\"text-align:center\">integer</td>\n<td style=\"text-align:left\">Lua 的小数 (number) 会被转换为 Redis 整型</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">string</td>\n<td style=\"text-align:center\">bulk</td>\n<td style=\"text-align:left\">-</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">table(array)</td>\n<td style=\"text-align:center\">multi bulk</td>\n<td style=\"text-align:left\">转换过程中会以 Lua array 中的第一个 nil 作为结束标志</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">table with a single ok field</td>\n<td style=\"text-align:center\">status</td>\n<td style=\"text-align:left\">-</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">table with a single err field</td>\n<td style=\"text-align:center\">error</td>\n<td style=\"text-align:left\">-</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">boolean(false)</td>\n<td style=\"text-align:center\">Nil bulk</td>\n<td style=\"text-align:left\">-</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"补充转换说明\"><a href=\"#补充转换说明\" class=\"headerlink\" title=\"补充转换说明\"></a>补充转换说明</h3><ul>\n<li>Lua 的 boolean 类型 true 将会转换为值为 1 的 Redis integer reply</li>\n<li>Lua 的 number 类型可表示整数与小数，在转换为 Redis integer reply 时会忽略小数部分，这点需要特别注意。基于此在脚本中想要返回小数应该将其转换为string</li>\n<li>Lua 中的数组（table）存在一个定义——以第一个 nil 元素为结束标志。这里存在的缺陷是无法拥有一个包含 nil 元素的数组</li>\n</ul>\n<h2 id=\"脚本命令执行分析\"><a href=\"#脚本命令执行分析\" class=\"headerlink\" title=\"脚本命令执行分析\"></a>脚本命令执行分析</h2><p>Redis 服务器提供两种执行 Lua 脚本的命令：EVAL 与 EVALSHA 。主要功能是调用从 Redis 2.6.0 版本内置的 Lua 解释器对脚本进行评估分析。<br/>以下将分别介绍 EVAL 与 EVALSHA 的使用。</p>\n<h3 id=\"EVAL\"><a href=\"#EVAL\" class=\"headerlink\" title=\"EVAL\"></a>EVAL</h3><figure class=\"highlight plain\"><figcaption><span>[EVAL 基本语法]</span></figcaption><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; EVAL script numkeys key [key ...] arg [arg ...]</span><br/></pre></td></tr></tbody></table></figure>\n<ul>\n<li>第一个参数 script 是 Lua 5.1脚本（一个将要在 Redis 上下文运行的程序）</li>\n<li>第二个参数是脚本后面的 Redis 键名参数数量。</li>\n<li>第三个参数开始直至达到键名参数定义数量，都为键名，可以在脚本 script 中使用全局变量 KEYS 获取（KEYS[1],KEYS[2]…的形式）</li>\n<li>剩下的就是非键名参数，可以在脚本 script 中使用全局变量 ARGV 获取（ARGV[1]，ARGV[2]…的形式）</li>\n</ul>\n<p>示例如下：<br/></p><figure class=\"highlight plain\"><figcaption><span>[EVAL 使用示例]</span></figcaption><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/><span class=\"line\">9</span><br/><span class=\"line\">10</span><br/><span class=\"line\">11</span><br/><span class=\"line\">12</span><br/><span class=\"line\">13</span><br/><span class=\"line\">14</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; EVAL &#34;return {KEYS[1],KEYS[2],ARGV[1],ARGV[2]}&#34; 2 key1 key2 value1 value2</span><br/><span class=\"line\">1) &#34;key1&#34;</span><br/><span class=\"line\">2) &#34;key2&#34;</span><br/><span class=\"line\">3) &#34;value1&#34;</span><br/><span class=\"line\">4) &#34;value2&#34;</span><br/><span class=\"line\">127.0.0.1:6379&gt; keys *</span><br/><span class=\"line\">(empty list or set)</span><br/><span class=\"line\">127.0.0.1:6379&gt; EVAL &#34;return redis.call(&#39;set&#39;, KEYS[1], ARGV[1])&#34; 1 mykey myvalue</span><br/><span class=\"line\">OK</span><br/><span class=\"line\">127.0.0.1:6379&gt; keys *</span><br/><span class=\"line\">1) &#34;mykey&#34;</span><br/><span class=\"line\">127.0.0.1:6379&gt; EVAL &#34;return redis.call(&#39;get&#39;, KEYS[1])&#34; 1 mykey</span><br/><span class=\"line\">&#34;myvalue&#34;</span><br/><span class=\"line\">127.0.0.1:6379&gt; </span><br/></pre></td></tr></tbody></table></figure><p></p>\n<h3 id=\"EVALSHA\"><a href=\"#EVALSHA\" class=\"headerlink\" title=\"EVALSHA\"></a>EVALSHA</h3><figure class=\"highlight plain\"><figcaption><span>[EVALSHA 基本语法]</span></figcaption><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; EVALSHA sha1 numkeys key [key ...] arg [arg ...]</span><br/></pre></td></tr></tbody></table></figure>\n<ul>\n<li>第一个参数 sha1 为 Lua 脚本的 SHA1 校验和，服务器会执行 ‘f_’ + sha1 名称的 function</li>\n<li>第二个参数是脚本后面的 Redis 键名参数数量。</li>\n<li>第三个参数开始直至达到键名参数定义数量，都为键名</li>\n<li>剩下的就是非键名参数</li>\n</ul>\n<p>示例如下：<br/></p><figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; SCRIPT LOAD &#34;return {KEYS[1], KEYS[2], ARGV[1], ARGV[2]}&#34;</span><br/><span class=\"line\">&#34;c0d2d6f81be75d67523d7c8ac69a932fbe1aa4e2&#34;</span><br/><span class=\"line\">127.0.0.1:6379&gt; EVALSHA c0d2d6f81be75d67523d7c8ac69a932fbe1aa4e2 2 k1 k2 v1 v2</span><br/><span class=\"line\">1) &#34;k1&#34;</span><br/><span class=\"line\">2) &#34;k2&#34;</span><br/><span class=\"line\">3) &#34;v1&#34;</span><br/><span class=\"line\">4) &#34;v2&#34;</span><br/><span class=\"line\">127.0.0.1:6379&gt; </span><br/></pre></td></tr></tbody></table></figure><p></p>\n<h2 id=\"脚本执行过程分析\"><a href=\"#脚本执行过程分析\" class=\"headerlink\" title=\"脚本执行过程分析\"></a>脚本执行过程分析</h2><p>EVALSHA 命令是基于 EVAL 命令构建，关于脚本执行过程分析主要对 EVAL 命令执行过程进行分析。</p>\n<p>EVAL 命令执行会分为两步：</p>\n<ol>\n<li>为输入脚本定义一个 Lua 函数（function）</li>\n<li>执行这个 Lua 函数</li>\n</ol>\n<h3 id=\"定义-Lua-函数\"><a href=\"#定义-Lua-函数\" class=\"headerlink\" title=\"定义 Lua 函数\"></a>定义 Lua 函数</h3><p>所有被 Redis 执行的 Lua 脚本，在 Lua 环境中都会有一个和该脚本对应的无参数函数（目的是：以函数为单位的形式保存 Lua 脚本）。<br/>当调用 EVAL 命令执行脚本时，程序第一步要完成的工作就是为传入的脚本创建一个相应的 Lua 函数（保存在 lua_scripts 字典）。<br/>例如脚本 “return {KEY[1],KEY[2],ARGV[1],ARGV[2]}” ，其生成的 SHA1 校验和为 d8f14ae7100459bda992510e1304e4217cb42234。那么就会创建一个如下的对应函数：<br/></p><figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">function f_d8f14ae7100459bda992510e1304e4217cb42234()</span><br/><span class=\"line\">    return {KEY[1],KEY[2],ARGV[1],ARGV[2]}</span><br/><span class=\"line\">end</span><br/></pre></td></tr></tbody></table></figure><br/>可以看出，函数名以 f_ 为前缀，后根脚本的 SHA1 校验和拼接而成，而函数体则是用户输入的脚本。<br/>如果定义的脚本在编译过程中出错（语法错误），程序将直接返回脚本错误，并不再继续执行后续步骤<p></p>\n<h3 id=\"执行-Lua-函数\"><a href=\"#执行-Lua-函数\" class=\"headerlink\" title=\"执行 Lua 函数\"></a>执行 Lua 函数</h3><p>在定义好 Lua 函数后，程序就可以通过运行这个函数来达到运行输入脚本的目的。</p>\n<p>不过，在此之前，为了确保脚本的正确和安全执行，需要执行一些设置钩子、传入参数之类的操作，整个执行函数的过程如下：</p>\n<ol>\n<li>将 EVAL 命令中输入的 KEYS 参数和 ARGV 参数以全局数组的方式传入到 Lua 环境中。</li>\n<li>设置伪客户端的目标数据库为调用者客户端的目标数据库：fake_client-&gt;db = caller_client-&gt;db，确保脚本中执行的 Redis 命令访问的是正确的数据库。（Redis 是一种C/S架构，对服务器的访问入口限制为客户端）</li>\n<li>为 Lua 环境装载超时钩子，保证在脚本执行出现超时时可以杀死脚本，或者停止 Redis 服务器。</li>\n<li>执行脚本对应的 Lua 函数。</li>\n<li>如果被执行的 Lua 脚本中带有 SELECT 命令，那么在脚本执行完毕之后，伪客户端中的数据库可能已经有所改变，所以需要对调用者客户端的目标数据库进行更新： caller_client-&gt;db = fake_client-&gt;db 。</li>\n<li>执行清理操作：清除钩子、清除指向调用者客户端的指针等。</li>\n<li>将 Lua 函数执行所得的结果转换成 Redis 回应，然后传给调用者客户端。</li>\n<li>对 Lua 环境进行一次 GC —— <a href=\"https://blog.codingnow.com/2018/10/lua_gc.html\" target=\"_blank\" rel=\"noopener noreferrer\">参考：Lua GC 的工作原理</a>。</li>\n</ol>\n<p>特别提示：Redis 使用串行化的方式来执行 Redis 命令，在任何特定时间段，最多只会有一个脚本在 Lua 环境里运行。因此，整个 Redis 服务器只需要创建一个 Lua 环境，并且很多对脚本的控制直接转移到了对 Lua 环境的设置。<br/>（每次执行脚本，是否都要初始化 Lua 环境，如果不是，那么是怎么做到环境不被污染的相关资料未找到）</p>\n<p><img src=\"https://www.wildmanli.top//images/redis-simple-description/Lua-script-process.png\" alt=\"Lua script 执行过程\"/></p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"http://redisdoc.com/topic/index.html\" target=\"_blank\" rel=\"noopener noreferrer\">Redis 命令参考——功能文档</a><br/><a href=\"http://redisbook.com/preview/script/init_lua_env.html\" target=\"_blank\" rel=\"noopener noreferrer\">创建并修改 Lua 环境</a><br/><a href=\"https://redisbook.readthedocs.io/en/latest/feature/scripting.html#id1\" target=\"_blank\" rel=\"noopener noreferrer\">Lua 脚本</a><br/><a href=\"https://redis.io/commands/eval\" target=\"_blank\" rel=\"noopener noreferrer\">Redis 官方文档—— Redis Lua scripting 篇</a></p>","text":"前言从2.6.0版开始，Redis增加了对Lua运行环境的支持。在了解Redis lua 脚本使用前，最好能够了解 lua 的语言基础。 本篇包含如下 lua 脚本内容： Redis加载（初始化lua运行环境） Lua与Redis数据类型的转换 脚本命令执行分析 脚本执行过程分析...","link":"","photos":[],"count_time":{"symbolsCount":"8.3k","symbolsTime":"8 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%89%8D%E8%A8%80\"><span class=\"toc-text\">前言</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Redis-Lua%E8%BF%90%E8%A1%8C%E7%8E%AF%E5%A2%83\"><span class=\"toc-text\">Redis Lua运行环境</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%9B%E5%BB%BA-Lua-%E5%9F%BA%E6%9C%AC%E8%BF%90%E8%A1%8C%E7%8E%AF%E5%A2%83\"><span class=\"toc-text\">创建 Lua 基本运行环境</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%BD%BD%E5%85%A5%E5%87%BD%E6%95%B0%E5%BA%93\"><span class=\"toc-text\">载入函数库</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%9B%E5%BB%BA%E5%85%A8%E5%B1%80%E8%A1%A8-redis\"><span class=\"toc-text\">创建全局表 redis</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%9B%BF%E6%8D%A2-Lua-%E5%8E%9F%E6%9C%89%E9%9A%8F%E6%9C%BA%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">替换 Lua 原有随机函数</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%9B%E5%BB%BA%E6%8E%92%E5%BA%8F%E8%BE%85%E5%8A%A9%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">创建排序辅助函数</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%9B%E5%BB%BA%E9%94%99%E8%AF%AF%E6%8A%A5%E5%91%8A%E8%BE%85%E5%8A%A9%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">创建错误报告辅助函数</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BF%9D%E6%8A%A4-Lua-%E5%85%A8%E5%B1%80%E7%8E%AF%E5%A2%83\"><span class=\"toc-text\">保护 Lua 全局环境</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Lua%E4%B8%8ERedis%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E7%9A%84%E8%BD%AC%E6%8D%A2\"><span class=\"toc-text\">Lua与Redis数据类型的转换</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Redis%E6%95%B0%E6%8D%AE%E8%BD%AC%E6%8D%A2%E4%B8%BA-Lua-%E6%95%B0%E6%8D%AE\"><span class=\"toc-text\">Redis数据转换为 Lua 数据</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Lua-%E6%95%B0%E6%8D%AE%E8%BD%AC%E6%8D%A2-Redis-%E6%95%B0%E6%8D%AE\"><span class=\"toc-text\">Lua 数据转换 Redis 数据</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%A1%A5%E5%85%85%E8%BD%AC%E6%8D%A2%E8%AF%B4%E6%98%8E\"><span class=\"toc-text\">补充转换说明</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%84%9A%E6%9C%AC%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E5%88%86%E6%9E%90\"><span class=\"toc-text\">脚本命令执行分析</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#EVAL\"><span class=\"toc-text\">EVAL</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#EVALSHA\"><span class=\"toc-text\">EVALSHA</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%84%9A%E6%9C%AC%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B%E5%88%86%E6%9E%90\"><span class=\"toc-text\">脚本执行过程分析</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%9A%E4%B9%89-Lua-%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">定义 Lua 函数</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%89%A7%E8%A1%8C-Lua-%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">执行 Lua 函数</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99\"><span class=\"toc-text\">参考资料</span></a></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"lua闭包","uid":"ebfbb50f53b101f0d14d04eed8e77a61","slug":"zl/2016-01-01-343_lua闭包","date":"2024-04-03T03:47:35.622Z","updated":"2024-04-03T03:47:35.623Z","comments":true,"path":"api/articles/zl/2016-01-01-343_lua闭包.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"lua中有两种闭包, c闭包和lua闭包两种闭包的公共部分: #define ClosureHeader CommonHeader; lu_byte isC; 是否c闭包 lua_byte nupvalues; upvalue的个数 GCObject* gclist; struc...","link":"","photos":[],"count_time":{"symbolsCount":"3.1k","symbolsTime":"3 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Nginx+lua组建基础waf防火墙","uid":"ddb5e4c9c3c745d9ecc07c0486b685e8","slug":"zl/2016-01-01-341_Nginx+lua组建基础waf防火墙","date":"2024-04-03T03:47:35.617Z","updated":"2024-04-03T03:47:35.621Z","comments":true,"path":"api/articles/zl/2016-01-01-341_Nginx+lua组建基础waf防火墙.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"一、nginx+Lua环境部署1、系统基础信息123456192.168.83.129# cat /etc/redhat-releaseCentOS release 6.5 (Final)# uname -r2.6.32-431.el6.x86_64 2、安装基础库12yum -...","link":"","photos":[],"count_time":{"symbolsCount":"7.2k","symbolsTime":"7 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}