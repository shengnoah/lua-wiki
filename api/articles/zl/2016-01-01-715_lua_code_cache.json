{"title":"lua_code_cache","uid":"329adc851783034a5dedf553adc4385b","slug":"zl/2016-01-01-715_lua_code_cache","date":"2024-04-03T03:47:35.947Z","updated":"2024-04-03T03:47:35.947Z","comments":true,"path":"api/articles/zl/2016-01-01-715_lua_code_cache.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<p>\n\t\t<!--\nauthor: wngn123\nhead: head.png\ndate: 2016-08-24\ntitle: lua_code_cache\ntags: lua\ncategory: Lua\nstatus: publish\nsummary: 开启或者关闭lua代码缓存，在*_by_lua_file（如set_by_lua_file和content_by_lua_file）指令和Lua模块中生效\n-->\n</p><h2>lua_code_cache</h2>\n<p><strong>syntax:</strong> <em>lua_code_cache on | off</em></p>\n<p><strong>default:</strong> <em>lua_code_cache on</em></p>\n<p><strong>context:</strong> <em>http, server, location, location if</em></p>\n<p>Enables or disables the Lua code cache for Lua code in <code>*_by_lua_file</code> directives (like <a href=\"#set_by_lua_file\">set_by_lua_file</a> and\n<a href=\"#content_by_lua_file)\">content_by_lua_file</a> and Lua modules.</p>\n<p>When turning off, every request served by ngx_lua will run in a separate Lua VM instance, starting from the <code>0.9.3</code> release. So the Lua files referenced in <a href=\"#set_by_lua_file\">set_by_lua_file</a>,\n<a href=\"#content_by_lua_file\">content_by_lua_file</a>, <a href=\"#access_by_lua_file\">access_by_lua_file</a>,\nand etc will not be cached\nand all Lua modules used will be loaded from scratch. With this in place, developers can adopt an edit-and-refresh approach.</p>\n<p>Please note however, that Lua code written inlined within nginx.conf\nsuch as those specified by <a href=\"#set_by_lua\">set_by_lua</a>, <a href=\"#content_by_lua\">content_by_lua</a>,\n<a href=\"#access_by_lua\">access_by_lua</a>, and <a href=\"#rewrite_by_lua\">rewrite_by_lua</a> will not be updated when you edit the inlined Lua code in your <code>nginx.conf</code> file because only the Nginx config file parser can correctly parse the <code>nginx.conf</code>\nfile and the only way is to reload the config file\nby sending a <code>HUP</code> signal or just to restart Nginx.</p>\n<p>Even when the code cache is enabled, Lua files which are loaded by <code>dofile</code> or <code>loadfile</code>\nin *_by_lua_file cannot be cached (unless you cache the results yourself). Usually you can either use the <a href=\"#init_by_lua\">init_by_lua</a>\nor <a href=\"#init-by_lua_file\">init_by_lua_file</a> directives to load all such files or just make these Lua files true Lua modules\nand load them via <code>require</code>.</p>\n<p>The ngx_lua module does not support the <code>stat</code> mode available with the\nApache <code>mod_lua</code> module (yet).</p>\n<p>Disabling the Lua code cache is strongly\ndiscouraged for production use and should only be used during\ndevelopment as it has a significant negative impact on overall performance. For example, the performance a &#34;hello world&#34; Lua example can drop by an order of magnitude after disabling the Lua code cache.</p>\n<h2>中文</h2>\n<p><strong>语法:</strong> <em>lua_code_cache on | off</em></p>\n<p><strong>默认值:</strong> <em>lua_code_cache on</em></p>\n<p><strong>上下文:</strong> <em>http, server, location, location if</em></p>\n<p>开启或者关闭lua代码缓存，在*_by_lua_file（如set_by_lua_file和content_by_lua_file）指令和Lua模块中生效。\n从0.9.3稳定版开始，当lua_code_cache指令关闭时，所以被ngx_lua解析的请求都将运行在单独的虚拟机实例中。因此，被set_by_lua_file，content_by_lua_file，access_by_lua_file等等引用的Lua文件将不会被缓存，所有lua模块在被使用时都将会被重新读取加载，在这里，开发人员可以编辑刷新即可显示，不需要重启nginx服务。</p>\n<p>然而,请注意,当你编辑lua脚本时，那些被写在nginx.conf内部的lua脚本（如set_by_lua，content_by_lua，access_by_lua和rewrite_by_lua引用的脚本）将不会被重新加载，因为只有Nginx配置文件解析器能正确解析nginx.conf配置文件，而且能够重新加载配置文件的方式只有发送HUP信号量和重启Nginx。</p>\n<p>甚至当lua代码缓存被开启的时候，这些在*_by_lua_file中通过dofile或者loadfile被加载的lua文件也不能被缓存（除非你自己去缓存他）。通常你能用init_by_lua或者init-by_lua_file指令加载所以这样的文件，或者编译这些lua文件到lua模块通过require加载。</p>\n<p>ngx_lua模块任然不支持stat模式。</p>\n<p>强烈的不建议在生成环境中关闭lua代码缓存，仅仅在开发期间关闭，因为关闭缓存对整体性能有很大的负面影响。例如在一个hello world的lua示例中关闭代码缓存，性能将下降一个数量级。</p>\n\t\t<p></p>","text":" lua_code_cache syntax: lua_code_cache on | off default: lua_code_cache on context: http, server, location, location if Enables or disables ...","link":"","photos":[],"count_time":{"symbolsCount":"2.6k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">lua_code_cache</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">中文</span></a></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Lua 正则表达式","uid":"c88054c1f5dd8702b469167d31691978","slug":"zl/2016-01-01-716_Lua 正则表达式","date":"2024-04-03T03:47:35.948Z","updated":"2024-04-03T03:47:35.951Z","comments":true,"path":"api/articles/zl/2016-01-01-716_Lua 正则表达式.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":" Lua字符串匹配 与正则相关的函数 str = &#34;{1:[1,2,3],2:{idx2:2,level:60,reward_idx:2001,ring:100},test:{1:100,2:200}}&#34; string.find(s, pattern[, init...","link":"","photos":[],"count_time":{"symbolsCount":"3.6k","symbolsTime":"3 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"In place iterative policy evaluation","uid":"e2c63129883e8fe4288a47221458cc20","slug":"zl/2016-01-01-713_In place iterative policy evaluation","date":"2024-04-03T03:47:35.946Z","updated":"2024-04-03T03:47:35.946Z","comments":true,"path":"api/articles/zl/2016-01-01-713_In place iterative policy evaluation.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":" &lt;p&gt;Iterative Policy Evaluation的迭代过程一般有两种方式：&lt;/p&gt; 使用两个数组，其中一个数组存储上一轮迭代的状态价值，另外一个数组存储本轮迭代中的状态价值，本轮迭代总是从上一轮迭代（老的）的状态价值取值，这样在迭代过程中老的...","link":"","photos":[],"count_time":{"symbolsCount":448,"symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}