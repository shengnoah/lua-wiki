{"title":"Ngx_lua一键截流系统","uid":"46ed0e5beb20815c0cb704981d07aa7a","slug":"zl/2016-01-01-226_Ngx_lua一键截流系统","date":"2024-04-03T03:47:33.099Z","updated":"2024-04-03T03:47:33.099Z","comments":true,"path":"api/articles/zl/2016-01-01-226_Ngx_lua一键截流系统.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<pre><code>    &lt;h3 id=&quot;背景&quot;&gt;&lt;a href=&quot;https://fankeke.github.io/#%E8%83%8C%E6%99%AF&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h3&gt;&lt;p&gt;由于某些服务的流量过大，为保护其后端服务，需要在接入层Nginx对某些服务流量进行截流。本系统可以提供按照百分比对指定域名的制定URI进行截流的功能&lt;/p&gt;\n</code></pre>\n<h3 id=\"接口\"><a href=\"https://fankeke.github.io/#%E7%95%8C%E9%9D%A2\" class=\"headerlink\" title=\"接口\"></a>接口</h3><p>管理员可以轻松在管理接口进行配置，接口接口大致如下</p>\n<p><img src=\"https://fankeke.github.io/img/Ngx_lua%E4%B8%80%E9%94%AE%E6%88%AA%E6%B5%81%E7%B3%BB%E7%BB%9F/1.png\" alt=\"\"></p>\n<h3 id=\"实现\"><a href=\"https://fankeke.github.io/#%E5%AE%9E%E7%8E%B0\" class=\"headerlink\" title=\"实现\"></a>实现</h3><p>采用nginx＋Lua的实现整个系统的截流功能，大致架构图如下：</p>\n<p><img src=\"https://fankeke.github.io/img/Ngx_lua%E4%B8%80%E9%94%AE%E6%88%AA%E6%B5%81%E7%B3%BB%E7%BB%9F/2.png\" alt=\"\"></p>\n<p>管理员在接口上写入数据，管理端服务会将数据放入redis集群，各个nginx节点，会定时从redis集群拉取截流数据。</p>\n<h3 id=\"服务接入\"><a href=\"https://fankeke.github.io/#%E6%9C%8D%E5%8A%A1%E6%8E%A5%E5%85%A5\" class=\"headerlink\" title=\"服务接入\"></a>服务接入</h3><p>为了对达到快速方便的截流目的，默认是每个服务都接入截流系统，而不需要进行nginx配置文档的修改。</p>\n<p>access_by_lua_file    “/etc/nginx/hlb-lua/access_lua/online_access.lua”;                （1）<br>server {</p>\n<pre><code>server_name        server1;\n</code></pre><p>}<br>server {<br>    server_name        server2;<br>}<br>server {</p>\n<pre><code>server_name        server3;\n</code></pre><p>}</p>\n<p>server {<br>    server_name        server4;<br>}</p>\n<p>这样能够到达全自动化的截流：<br>1 不需要在每个服务配置中做添加任何字段，也就意味着完全不用reload Nginx<br>2 针对某个服务下的某个路径进行截流，只需在管理端接口上输入数据即可完成</p>\n<h3 id=\"性能测试\"><a href=\"https://fankeke.github.io/#%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95\" class=\"headerlink\" title=\"性能测试\"></a>性能测试</h3><p>由于默认所有流量经过截流检测系统，需要比较造成的性能影响。计算截流逻辑的耗时。每组数据共采集5000条请求的日志，用ab实现压测，计算其在截流逻辑处的平均耗时。共测试10组数据</p>\n<p><img src=\"https://fankeke.github.io/img/Ngx_lua%E4%B8%80%E9%94%AE%E6%88%AA%E6%B5%81%E7%B3%BB%E7%BB%9F/3.png\" alt=\"\"></p>\n<p>由压测结果来看，截流逻辑耗时稳定在20us以下。</p>\n<h3 id=\"灾难测试\"><a href=\"https://fankeke.github.io/#%E7%81%BE%E9%9A%BE%E6%B5%8B%E8%AF%95\" class=\"headerlink\" title=\"灾难测试\"></a>灾难测试</h3><p>截流系统依赖redis集群，考虑到集群的挂掉后对整改系统的影响，需要进行灾难测试。灾难测试分为两部分，分别是对管理端的影响和对Nginx节点的影响。<br>说明：由于所有截流数据缓存在集群的一个分片上，故灾难测试在该分片上进行。下面说的分片特指存放截流数据的分片</p>\n<p><img src=\"https://fankeke.github.io/img/Ngx_lua%E4%B8%80%E9%94%AE%E6%88%AA%E6%B5%81%E7%B3%BB%E7%BB%9F/4.png\" alt=\"\"><br>结论：从结论看出，截流系统对于redis集群的故障能够做到有损提供服务，做到高可用。</p>\n<h3 id=\"接口设计\"><a href=\"https://fankeke.github.io/#%E6%8E%A5%E5%8F%A3%E8%AE%BE%E8%AE%A1\" class=\"headerlink\" title=\"接口设计\"></a>接口设计</h3><h4 id=\"设置-修改）降级策略\"><a href=\"https://fankeke.github.io/#%E8%AE%BE%E7%BD%AE-%E4%BF%AE%E6%94%B9%EF%BC%89%E9%99%8D%E7%BA%A7%E7%AD%96%E7%95%A5\" class=\"headerlink\" title=\"设置(修改）降级策略\"></a>设置(修改）降级策略</h4><p>curl  www.admin.com/degrade/admin/?action=set -d ‘{“deg_servername”:”xx”,”deg_location”:”yy”,”deg_percent”:”100”}’</p>\n<h4 id=\"删除降级策略\"><a href=\"https://fankeke.github.io/#%E5%88%A0%E9%99%A4%E9%99%8D%E7%BA%A7%E7%AD%96%E7%95%A5\" class=\"headerlink\" title=\"删除降级策略\"></a>删除降级策略</h4><p>curl www.admin.com/degrade/admin/?action=del -d ‘{“deg_servername”:”xx”,”deg_location”:”yy”}’</p>\n<h4 id=\"查看查看降级策略\"><a href=\"https://fankeke.github.io/#%E6%9F%A5%E7%9C%8B%E6%9F%A5%E7%9C%8B%E9%99%8D%E7%BA%A7%E7%AD%96%E7%95%A5\" class=\"headerlink\" title=\"查看查看降级策略\"></a>查看查看降级策略</h4><p>curl www.admin.com/degrade/admin/?action=get -d ‘{“deg_servername”:”xx”,”deg_location”:”yy”}’</p>","text":" &lt;h3 id=&quot;背景&quot;&gt;&lt;a href=&quot;https://fankeke.github.io/#%E8%83%8C%E6%99%AF&quot; class=&quot;headerlink&quot; title=&quot;背...","link":"","photos":[],"count_time":{"symbolsCount":"1.4k","symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%8E%A5%E5%8F%A3\"><span class=\"toc-text\">接口</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">实现</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%9C%8D%E5%8A%A1%E6%8E%A5%E5%85%A5\"><span class=\"toc-text\">服务接入</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95\"><span class=\"toc-text\">性能测试</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%81%BE%E9%9A%BE%E6%B5%8B%E8%AF%95\"><span class=\"toc-text\">灾难测试</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%8E%A5%E5%8F%A3%E8%AE%BE%E8%AE%A1\"><span class=\"toc-text\">接口设计</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%AE%BE%E7%BD%AE-%E4%BF%AE%E6%94%B9%EF%BC%89%E9%99%8D%E7%BA%A7%E7%AD%96%E7%95%A5\"><span class=\"toc-text\">设置(修改）降级策略</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%88%A0%E9%99%A4%E9%99%8D%E7%BA%A7%E7%AD%96%E7%95%A5\"><span class=\"toc-text\">删除降级策略</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%9F%A5%E7%9C%8B%E6%9F%A5%E7%9C%8B%E9%99%8D%E7%BA%A7%E7%AD%96%E7%95%A5\"><span class=\"toc-text\">查看查看降级策略</span></a></li></ol></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Lua和C#交互","uid":"53e30d434ce1eee1be8eac653667cc03","slug":"zl/2016-01-01-230_Lua和C#交互","date":"2024-04-03T03:47:33.100Z","updated":"2024-04-03T03:47:33.101Z","comments":true,"path":"api/articles/zl/2016-01-01-230_Lua和C#交互.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":" &lt;p&gt;项目中一直使用tolua框架，底层使用C#开发，逻辑使用lua开发。借助tolua的源码，研究一下lua与C#是如何互相调用的，然后自己写了个简单的demo作为记录。&lt;/p&gt; Demo里没有拿lua的源码编译，而是直接使用lua的静态库，将lua库...","link":"","photos":[],"count_time":{"symbolsCount":"2k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"OpenResty中使用Lua的MongoDB库，使用连接池节省连接认证时间","uid":"026f7effba0678b58fada37bd8a3caf8","slug":"zl/2016-01-01-227_OpenResty中使用Lua的MongoDB库，使用连接池节省连接认证时间","date":"2024-04-03T03:47:33.099Z","updated":"2024-04-03T03:47:33.099Z","comments":true,"path":"api/articles/zl/2016-01-01-227_OpenResty中使用Lua的MongoDB库，使用连接池节省连接认证时间.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"&lt;p&gt;因为服务器的mongodb开启了auth认证的，所以每次连接都要验证密码，测试了下GitHub上面的几个lua的mongodb库，无论是官方的&lt;a href=&quot;https://github.com/mongodb-labs/mongorover&...","link":"","photos":[],"count_time":{"symbolsCount":"2k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}