{"title":"redis编写lua脚本","uid":"a628b5f8d3069a00eec61e6c67b75d18","slug":"zl/2016-01-01-347_redis编写lua脚本","date":"2024-04-03T03:47:35.624Z","updated":"2024-04-03T03:47:35.624Z","comments":true,"path":"api/articles/zl/2016-01-01-347_redis编写lua脚本.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<p>由于redis并没有类似mysql或者mongo的乐观锁机制，并发控制成了一个棘手的问题<br/>这块是可以用redis的watch来做，但是如果能实现乐观锁，那就非常方便了</p>\n<h2 id=\"redis使用lua的基础语法\"><a href=\"#redis使用lua的基础语法\" class=\"headerlink\" title=\"redis使用lua的基础语法\"></a>redis使用lua的基础语法</h2><figure class=\"highlight sh\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; <span class=\"built_in\">eval</span> <span class=\"string\">&#34;return {KEYS[1],KEYS[2],ARGV[1],ARGV[2]}&#34;</span> 2 key1 key2 first second</span><br/><span class=\"line\">1) <span class=\"string\">&#34;key1&#34;</span></span><br/><span class=\"line\">2) <span class=\"string\">&#34;key2&#34;</span></span><br/><span class=\"line\">3) <span class=\"string\">&#34;first&#34;</span></span><br/><span class=\"line\">4) <span class=\"string\">&#34;second&#34;</span></span><br/></pre></td></tr></tbody></table></figure>\n<h2 id=\"lua可以调用的redis函数\"><a href=\"#lua可以调用的redis函数\" class=\"headerlink\" title=\"lua可以调用的redis函数\"></a>lua可以调用的redis函数</h2><figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">redis.call()</span><br/><span class=\"line\">redis.<span class=\"built_in\">pcall</span>()</span><br/></pre></td></tr></tbody></table></figure>\n<h2 id=\"简单例子\"><a href=\"#简单例子\" class=\"headerlink\" title=\"简单例子\"></a>简单例子</h2><figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/><span class=\"line\">9</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">local</span> version = redis.call(<span class=\"string\">&#34;INCR&#34;</span>, KEYS[<span class=\"number\">2</span>])</span><br/><span class=\"line\"><span class=\"keyword\">if</span> version == <span class=\"number\">1</span> <span class=\"keyword\">then</span></span><br/><span class=\"line\">    redis.call(<span class=\"string\">&#34;EXPIRE&#34;</span>, KEYS[<span class=\"number\">2</span>], ARGV[<span class=\"number\">3</span>])</span><br/><span class=\"line\"><span class=\"keyword\">end</span>;</span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"built_in\">tostring</span>(version) ~= ARGV[<span class=\"number\">2</span>] <span class=\"keyword\">then</span></span><br/><span class=\"line\">    <span class=\"keyword\">return</span> {<span class=\"number\">-1</span>, version}</span><br/><span class=\"line\"><span class=\"keyword\">end</span>;</span><br/><span class=\"line\"><span class=\"keyword\">return</span> redis.call(<span class=\"string\">&#34;SET&#34;</span>, KEYS[<span class=\"number\">1</span>], ARGV[<span class=\"number\">1</span>])</span><br/></pre></td></tr></tbody></table></figure>\n<p>运行方式：<br/></p><figure class=\"highlight sh\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">redis-cli EVAL <span class=\"string\">&#34;<span class=\"variable\">$(cat ./helloWorld.lua)</span>&#34;</span> 3 mykey version1 expire 1 1 100</span><br/></pre></td></tr></tbody></table></figure><p></p>\n<h2 id=\"redis并发控制\"><a href=\"#redis并发控制\" class=\"headerlink\" title=\"redis并发控制\"></a>redis并发控制</h2><figure class=\"highlight go\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/><span class=\"line\">9</span><br/><span class=\"line\">10</span><br/><span class=\"line\">11</span><br/><span class=\"line\">12</span><br/><span class=\"line\">13</span><br/><span class=\"line\">14</span><br/><span class=\"line\">15</span><br/><span class=\"line\">16</span><br/><span class=\"line\">17</span><br/><span class=\"line\">18</span><br/><span class=\"line\">19</span><br/><span class=\"line\">20</span><br/><span class=\"line\">21</span><br/><span class=\"line\">22</span><br/><span class=\"line\">23</span><br/><span class=\"line\">24</span><br/><span class=\"line\">25</span><br/><span class=\"line\">26</span><br/><span class=\"line\">27</span><br/><span class=\"line\">28</span><br/><span class=\"line\">29</span><br/><span class=\"line\">30</span><br/><span class=\"line\">31</span><br/><span class=\"line\">32</span><br/><span class=\"line\">33</span><br/><span class=\"line\">34</span><br/><span class=\"line\">35</span><br/><span class=\"line\">36</span><br/><span class=\"line\">37</span><br/><span class=\"line\">38</span><br/><span class=\"line\">39</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br/><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(db *RedisDB)</span> <span class=\"params\">(key <span class=\"keyword\">string</span>, val <span class=\"keyword\">interface</span>{}, versionKey <span class=\"keyword\">string</span>, versionVal <span class=\"keyword\">int</span>, versionExpire <span class=\"keyword\">int</span>)</span> <span class=\"params\">(err error)</span></span> {</span><br/><span class=\"line\">\t<span class=\"keyword\">if</span> versionExpire == <span class=\"number\">0</span> {</span><br/><span class=\"line\">\t\tversionExpire = <span class=\"number\">100</span></span><br/><span class=\"line\">\t}</span><br/><span class=\"line\">\tstoreValue, err := db.getStoreValue(val)</span><br/><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> {</span><br/><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br/><span class=\"line\">\t}</span><br/><span class=\"line\"></span><br/><span class=\"line\">\tconn := db.Option.Pool.Get()</span><br/><span class=\"line\">\t<span class=\"keyword\">defer</span> conn.Close()</span><br/><span class=\"line\">\t<span class=\"keyword\">if</span> err = conn.Err(); err != <span class=\"literal\">nil</span> {</span><br/><span class=\"line\">\t\t<span class=\"keyword\">return</span> err</span><br/><span class=\"line\">\t}</span><br/><span class=\"line\"></span><br/><span class=\"line\">\tscript := <span class=\"string\">`</span></span><br/><span class=\"line\"><span class=\"string\">local version = redis.call(&#34;INCR&#34;, KEYS[2])</span></span><br/><span class=\"line\"><span class=\"string\">if version == 1 then</span></span><br/><span class=\"line\"><span class=\"string\">    redis.call(&#34;EXPIRE&#34;, KEYS[2], ARGV[3])</span></span><br/><span class=\"line\"><span class=\"string\">end;</span></span><br/><span class=\"line\"><span class=\"string\"></span></span><br/><span class=\"line\"><span class=\"string\">if tostring(version) ~= ARGV[2] then</span></span><br/><span class=\"line\"><span class=\"string\">    return {-1, version}</span></span><br/><span class=\"line\"><span class=\"string\">end;</span></span><br/><span class=\"line\"><span class=\"string\">return redis.call(&#34;SET&#34;, KEYS[1], ARGV[1])</span></span><br/><span class=\"line\"><span class=\"string\">`</span></span><br/><span class=\"line\">\tgetScript := redis.NewScript(<span class=\"number\">3</span>, script)</span><br/><span class=\"line\">\tres, err := redis.String(getScript.Do(conn, key, versionKey, <span class=\"string\">&#34;expire&#34;</span>, storeValue, versionVal, versionExpire))</span><br/><span class=\"line\"></span><br/><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> {</span><br/><span class=\"line\">\t\tutils.Error(err)</span><br/><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br/><span class=\"line\">\t}</span><br/><span class=\"line\">\t<span class=\"keyword\">if</span> res == <span class=\"string\">&#34;-1&#34;</span> {</span><br/><span class=\"line\">\t\t<span class=\"comment\">//err = ErrConflict</span></span><br/><span class=\"line\">\t}redis</span><br/><span class=\"line\">\t<span class=\"keyword\">return</span></span><br/><span class=\"line\">}</span><br/></pre></td></tr></tbody></table></figure>\n<h2 id=\"相关文档\"><a href=\"#相关文档\" class=\"headerlink\" title=\"相关文档\"></a>相关文档</h2><p><a href=\"https://redisbook.readthedocs.io/en/latest/feature/scripting.html\" target=\"_blank\" rel=\"noopener noreferrer\">Redis 命令参考 · lua 脚本</a></p>","text":"由于redis并没有类似mysql或者mongo的乐观锁机制，并发控制成了一个棘手的问题这块是可以用redis的watch来做，但是如果能实现乐观锁，那就非常方便了 redis使用lua的基础语法12345&gt; eval &#34;return {KEYS[1],KEYS[2...","link":"","photos":[],"count_time":{"symbolsCount":"1.6k","symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#redis%E4%BD%BF%E7%94%A8lua%E7%9A%84%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95\"><span class=\"toc-text\">redis使用lua的基础语法</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#lua%E5%8F%AF%E4%BB%A5%E8%B0%83%E7%94%A8%E7%9A%84redis%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">lua可以调用的redis函数</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%AE%80%E5%8D%95%E4%BE%8B%E5%AD%90\"><span class=\"toc-text\">简单例子</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#redis%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6\"><span class=\"toc-text\">redis并发控制</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%9B%B8%E5%85%B3%E6%96%87%E6%A1%A3\"><span class=\"toc-text\">相关文档</span></a></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Lua语法基础（二）","uid":"92c435cde283c1b09bc312d09271ad4c","slug":"zl/2016-01-01-346_Lua语法基础（二）","date":"2024-04-03T03:47:35.624Z","updated":"2024-04-03T03:47:35.624Z","comments":true,"path":"api/articles/zl/2016-01-01-346_Lua语法基础（二）.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":" 函数1.1 函数声明 默认为全局局部函数使用local关键字声明1.2 参数 …等同于Python中*args三个点表示可变参数 1.3 获取参数长度的两种方式 （1）将传入的参数… 直接写入新的table中 使用#table获得长度 （2）直接使用select(“#”,…)获...","link":"","photos":[],"count_time":{"symbolsCount":"1.1k","symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"lua data struct","uid":"be3005dc20f946c578282785ec07b2f0","slug":"zl/2016-01-01-344_lua data struct","date":"2024-04-03T03:47:35.623Z","updated":"2024-04-03T03:47:35.623Z","comments":true,"path":"api/articles/zl/2016-01-01-344_lua data struct.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"TValue是lua中的通用数据结构，lua中的所有数据都可以使用这个结构表示。下面看一下与TValue定义相关的数据结构： /* ** &#123;====================================================== ** types a...","link":"","photos":[],"count_time":{"symbolsCount":"3.4k","symbolsTime":"3 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}