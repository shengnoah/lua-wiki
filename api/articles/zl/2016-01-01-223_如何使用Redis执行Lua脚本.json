{"title":"如何使用Redis执行Lua脚本","uid":"dcb4408e7a8df523ef5b7d58b0598b8b","slug":"zl/2016-01-01-223_如何使用Redis执行Lua脚本","date":"2024-04-03T03:47:33.098Z","updated":"2024-04-03T03:47:33.098Z","comments":true,"path":"api/articles/zl/2016-01-01-223_如何使用Redis执行Lua脚本.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<pre><code>    &lt;h3&gt;&lt;span id=&quot;为什么要使用lua脚本&quot;&gt;为什么要使用Lua脚本？&lt;/span&gt;&lt;/h3&gt;\n</code></pre>\n<p>lua脚本有很多的优点，但是对于我来说我使用它只因为它能保证原子性。为什么它能保证原子性你就使用它呢？一个简单的例子，在我们的Java代码中，一个简单的++i都不能保证原子性更别提复杂的情况了。但是使用lua在执行几百行代码的情况下都不需要考虑高并发所带来的问题。</p>\n<h3><span id=\"lua基础\">lua基础</span></h3>\n<ol>\n<li>创建lua脚本<br><br>\n就像创建其他的文档一样，新建一个以.lua为后缀的文档，比如说test.lua</li>\n<li>–单行注释。–[[多行注释，多行注释–]]</li>\n<li>打印语句</li>\n</ol>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"params\">(<span class=\"string\">\"Hello World！\"</span>)</span></span></span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>常见数据类型<br><br>\nboolean、number、string、nil（这个就是我们平常见的null）<br>\n一些小的细节问题<br><br>\n· type() 用于查看变量的数据类型，比如print(type(10.4*3)) --&gt; number<br><br>\n· 判断一个变量是否为空时应该使用\" a\"==“nil\"而不是” a\"==nil<br><br>\n· lua中\"1\"+“1” 不是合并字符串成ab而是等于2，想要进行字符串拼接需要\"1\"…“1” --&gt;11<br><br>\n· lua查看字符串长度应该这样来print(#“Hello”) --&gt;5<br><br>\n· lua中比较不等于的时候要这样比较：a~=  b<br><br>\n· lua中逻辑运算符是and、or、not<br></li>\n<li>变量</li>\n</ol>\n<figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">a</span> = <span class=\"number\">5</span>               </span><br><span class=\"line\"><span class=\"built_in\">local</span> b = <span class=\"number\">5</span>         </span><br></pre></td></tr></table></figure>\n<ol start=\"6\">\n<li>条件判断</li>\n</ol>\n<figure class=\"highlight fortran\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> maxValue &gt; limit <span class=\"keyword\">then</span></span><br><span class=\"line\">          <span class=\"keyword\">value</span> = limit;</span><br><span class=\"line\">      <span class=\"keyword\">else</span> <span class=\"keyword\">if</span></span><br><span class=\"line\">          <span class=\"keyword\">value</span> = maxValue;</span><br><span class=\"line\">      <span class=\"keyword\">else</span> </span><br><span class=\"line\">          <span class=\"keyword\">value</span> = <span class=\"number\">0</span>;</span><br><span class=\"line\">      <span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<ol start=\"7\">\n<li>循环</li>\n</ol>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> i, v <span class=\"keyword\">in</span> <span class=\"built_in\">ipairs</span>(a) <span class=\"keyword\">do</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(i, v)      </span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<ol start=\"8\">\n<li>函数</li>\n</ol>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(n)</span></span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> n == <span class=\"number\">0</span> <span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span></span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<p>看完以上几条你的基础其实已经过关了，如果仅仅在操作redis上的话就已经够了。</p>\n<h3><span id=\"redis执行lua脚本\">redis执行lua脚本</span></h3>\n<ol>\n<li>在脚本中如何与redis进行交互</li>\n</ol>\n<figure class=\"highlight autoit\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">local</span> value = redis.<span class=\"built_in\">call</span>(<span class=\"string\">'GET'</span>,key)</span><br><span class=\"line\">redis.<span class=\"built_in\">call</span>(<span class=\"string\">'SET'</span>,key,value+<span class=\"number\">2</span>)<span class=\"comment\">;</span></span><br><span class=\"line\">redis.<span class=\"built_in\">call</span>(<span class=\"string\">'DECR'</span>,key)<span class=\"comment\">;</span></span><br><span class=\"line\">redis.<span class=\"built_in\">call</span>(<span class=\"string\">'EXPIRE'</span>,key,<span class=\"number\">10</span>)<span class=\"comment\">;</span></span><br></pre></td></tr></table></figure>\n<p>你是否看明白了呢，只需要执行redis.call命令，第一个参数放入要执行的命令，后面的参数放入命令需要的参数就ok了。</p>\n<ol start=\"2\">\n<li>如何执行脚本呢</li>\n</ol>\n<figure class=\"highlight maxima\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis-cli --<span class=\"built_in\">eval</span> redis-ratelimiter-counter.lua <span class=\"built_in\">key</span> <span class=\"built_in\">limit</span> , value1 value2</span><br></pre></td></tr></table></figure>\n<p>上方这段命令的意思呢，其实就是告诉redis：请你启动客户端的时候帮我执行一下redis-ratelimiter-counter.lua这个文档，然后呢，执行文档的话有这么几个参数，key、limit 、 value1、value2<br>\n<br><br>\n细心小伙伴可能会有疑问了，为什么传了4个参数只有一个逗号其他都是空格隔开呢。我们来看一下他们分别是怎么获取的就明白了</p>\n<figure class=\"highlight maxima\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">local</span> <span class=\"built_in\">key</span> = KEYS[<span class=\"number\">1</span>];</span><br><span class=\"line\"><span class=\"built_in\">local</span> <span class=\"built_in\">limit</span> = KEYS[<span class=\"number\">2</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">local</span> value1 = ARGV[<span class=\"number\">1</span>];</span><br><span class=\"line\"><span class=\"built_in\">local</span> value2 = ARGV[<span class=\"number\">2</span>];</span><br></pre></td></tr></table></figure>\n<p>这样的话你是不是看明白了呢，逗号前后的参数是两种不同的传值方式而已。</p>\n<ol start=\"3\">\n<li>如何在Java进程中执行lua呢<br>\n你只需要这样的一段代码就可以调用redis执行脚本redis-ratelimiter-tokenBucket.lua了</li>\n</ol>\n<figure class=\"highlight processing\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Autowired</span><br><span class=\"line\">   <span class=\"keyword\">private</span> RedisTemplate redisTemplate;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> counterConsume(<span class=\"keyword\">String</span> <span class=\"built_in\">key</span>, <span class=\"keyword\">String</span> limit, <span class=\"keyword\">String</span> lrefreshInterval) {</span><br><span class=\"line\">   \tDefaultRedisScript&lt;Long&gt; consumeRedisScript=<span class=\"keyword\">new</span> DefaultRedisScript();</span><br><span class=\"line\">       consumeRedisScript.setResultType(Long.class);</span><br><span class=\"line\">       consumeRedisScript.setScriptSource(<span class=\"keyword\">new</span> ResourceScriptSource(<span class=\"keyword\">new</span> ClassPathResource(<span class=\"string\">\"script/redis-ratelimiter-tokenBucket.lua\"</span>)));<span class=\"comment\">//加载lua脚本文档</span></span><br><span class=\"line\">       List&lt;<span class=\"keyword\">Object</span>&gt; keyList = <span class=\"keyword\">new</span> ArrayList();</span><br><span class=\"line\">       keyList.<span class=\"built_in\">add</span>(<span class=\"built_in\">key</span>);<span class=\"comment\">//通过KEYS[1]取值</span></span><br><span class=\"line\">       keyList.<span class=\"built_in\">add</span>(limit);<span class=\"comment\">//通过KEYS[2]取值</span></span><br><span class=\"line\">       List&lt;<span class=\"keyword\">Object</span>&gt; argvList = <span class=\"keyword\">new</span> ArrayList();</span><br><span class=\"line\">       argvList.<span class=\"built_in\">add</span>(lrefreshInterval);<span class=\"comment\">//通过ARGV[1]取值</span></span><br><span class=\"line\">       <span class=\"keyword\">String</span> result=redisTemplate.execute(redisScript,keyList,argvList).toString();</span><br><span class=\"line\">   }</span><br></pre></td></tr></table></figure>\n<p>看到这里你对lua还有什么疑问么，感兴趣的话来看一下我是如何使用的吧：<a href=\"https://github.com/shiyujun/syj-ratelimit\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/shiyujun/syj-ratelimit</a></p>\n<p>本文出自<a href=\"http://shiyujun.cn\">http://shiyujun.cn</a>,转载请保留。</p>","text":" &lt;h3&gt;&lt;span id=&quot;为什么要使用lua脚本&quot;&gt;为什么要使用Lua脚本？&lt;/span&gt;&lt;/h3&gt; lua脚本有很多的优点，但是对于我来说我使用它只因为它能保证原子性。为什么它能保证原子性你就使用它呢？一个...","link":"","photos":[],"count_time":{"symbolsCount":"2.6k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">lua基础</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">redis执行lua脚本</span></a></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Lua string.find 中的 “坑”","uid":"f0b579433247a9da11a0809ef2f14994","slug":"zl/2016-01-01-224_Lua string.find 中的 “坑” ","date":"2024-04-03T03:47:33.098Z","updated":"2024-04-03T03:47:33.098Z","comments":true,"path":"api/articles/zl/2016-01-01-224_Lua string.find 中的 “坑” .json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":" &lt;p&gt;我们的线上环境，ngx_lua api 都是以模块形式加载到 lua 级别的 vm 中，已达到最大性能。而且我们并没有使用传统的 “包” 的形式来加载(也就是 &lt;code class=&quot;highlighter-rouge&quot;&gt;re...","link":"","photos":[],"count_time":{"symbolsCount":"2.9k","symbolsTime":"3 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Lua","uid":"15b0cdc6d03f6c3f6bf8d3a7ff197317","slug":"zl/2016-01-01-225_Lua","date":"2024-04-03T03:47:33.098Z","updated":"2024-04-03T03:47:33.099Z","comments":true,"path":"api/articles/zl/2016-01-01-225_Lua.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":" &lt;p&gt;1 变量在使用前，必须在代码中进行声明，即创建改变量；&lt;br&gt; Lua的变量类型：全局变量、局部变量、表中的域；&lt;br&gt; Lua的变量全是全局变量，即便是语句块或者是函数里，除非使用local显示声明为局部变量；&lt;br&gt; 局...","link":"","photos":[],"count_time":{"symbolsCount":572,"symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}