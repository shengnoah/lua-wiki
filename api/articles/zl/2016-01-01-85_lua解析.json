{"title":"lua解析","uid":"c03ca621c9a51162fd5282a8c7245d96","slug":"zl/2016-01-01-85_lua解析","date":"2024-04-03T03:47:36.125Z","updated":"2024-04-03T03:47:36.125Z","comments":true,"path":"api/articles/zl/2016-01-01-85_lua解析.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<p>本<strong>lua</strong>版本为5.2.1</p>\n<p>在lua的源码中，lua.c 实现了可执行的解释器，用于解释执行.out文件，luac.c 实现了字节码的编译器，用于将.lua文件编译为.out文件，即字节码文件。<br/>更加宏观的东西，则在打印的两份文档里，此处不详述，由于整个读入解析到解释执行的过程是先从读入.lua文件开始的，所以我这份lua源码解析大业便先从这luac.c文件的阅读学习开始了，以下是它的main程序源代码。</p>\n<figure class=\"highlight c\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/><span class=\"line\">9</span><br/><span class=\"line\">10</span><br/><span class=\"line\">11</span><br/><span class=\"line\">12</span><br/><span class=\"line\">13</span><br/><span class=\"line\">14</span><br/><span class=\"line\">15</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span>* argv[])</span></span></span><br/><span class=\"line\"><span class=\"function\"></span>{</span><br/><span class=\"line\"> lua_State* L;</span><br/><span class=\"line\"> <span class=\"keyword\">int</span> i=doargs(argc,argv);</span><br/><span class=\"line\"> argc-=i; argv+=i;</span><br/><span class=\"line\"> <span class=\"keyword\">if</span> (argc&lt;=<span class=\"number\">0</span>) usage(<span class=\"string\">&#34;no input files given&#34;</span>);</span><br/><span class=\"line\"> L=luaL_newstate();</span><br/><span class=\"line\"> <span class=\"keyword\">if</span> (L==<span class=\"literal\">NULL</span>) fatal(<span class=\"string\">&#34;cannot create state: not enough memory&#34;</span>);</span><br/><span class=\"line\"> lua_pushcfunction(L,&amp;pmain);</span><br/><span class=\"line\"> lua_pushinteger(L,argc);</span><br/><span class=\"line\"> lua_pushlightuserdata(L,argv);</span><br/><span class=\"line\"> <span class=\"keyword\">if</span> (lua_pcall(L,<span class=\"number\">2</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>)!=LUA_OK) fatal(lua_tostring(L,<span class=\"number\">-1</span>));</span><br/><span class=\"line\"> lua_close(L);</span><br/><span class=\"line\"> <span class=\"keyword\">return</span> EXIT_SUCCESS;</span><br/><span class=\"line\">}</span><br/></pre></td></tr></tbody></table></figure>\n<blockquote>\n<p>tip1：在C语言中，函数内部的局部变量需要在开头定义<br/>首先先定义了一个代表lua虚拟机的数据结构lua_State，然后执行参数解析工作，即调用doargs函数，并将命令行参数传了进去<br/>以下是其源代码。</p>\n</blockquote>\n<figure class=\"highlight c\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/><span class=\"line\">9</span><br/><span class=\"line\">10</span><br/><span class=\"line\">11</span><br/><span class=\"line\">12</span><br/><span class=\"line\">13</span><br/><span class=\"line\">14</span><br/><span class=\"line\">15</span><br/><span class=\"line\">16</span><br/><span class=\"line\">17</span><br/><span class=\"line\">18</span><br/><span class=\"line\">19</span><br/><span class=\"line\">20</span><br/><span class=\"line\">21</span><br/><span class=\"line\">22</span><br/><span class=\"line\">23</span><br/><span class=\"line\">24</span><br/><span class=\"line\">25</span><br/><span class=\"line\">26</span><br/><span class=\"line\">27</span><br/><span class=\"line\">28</span><br/><span class=\"line\">29</span><br/><span class=\"line\">30</span><br/><span class=\"line\">31</span><br/><span class=\"line\">32</span><br/><span class=\"line\">33</span><br/><span class=\"line\">34</span><br/><span class=\"line\">35</span><br/><span class=\"line\">36</span><br/><span class=\"line\">37</span><br/><span class=\"line\">38</span><br/><span class=\"line\">39</span><br/><span class=\"line\">40</span><br/><span class=\"line\">41</span><br/><span class=\"line\">42</span><br/><span class=\"line\">43</span><br/><span class=\"line\">44</span><br/><span class=\"line\">45</span><br/><span class=\"line\">46</span><br/><span class=\"line\">47</span><br/><span class=\"line\">48</span><br/><span class=\"line\">49</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">doargs</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span>* argv[])</span></span></span><br/><span class=\"line\"><span class=\"function\"></span>{</span><br/><span class=\"line\"> <span class=\"keyword\">int</span> i;</span><br/><span class=\"line\"> <span class=\"keyword\">int</span> version=<span class=\"number\">0</span>;</span><br/><span class=\"line\"> <span class=\"keyword\">if</span> (argv[<span class=\"number\">0</span>]!=<span class=\"literal\">NULL</span> &amp;&amp; *argv[<span class=\"number\">0</span>]!=<span class=\"number\">0</span>) progname=argv[<span class=\"number\">0</span>];</span><br/><span class=\"line\"> <span class=\"keyword\">for</span> (i=<span class=\"number\">1</span>; i&lt;argc; i++)</span><br/><span class=\"line\"> {</span><br/><span class=\"line\">  <span class=\"keyword\">if</span> (*argv[i]!=<span class=\"string\">&#39;-&#39;</span>)\t\t\t</span><br/><span class=\"line\">   <span class=\"keyword\">break</span>;</span><br/><span class=\"line\">  <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (IS(<span class=\"string\">&#34;--&#34;</span>))\t\t\t<span class=\"comment\">/* end of options; skip it */</span></span><br/><span class=\"line\">  {</span><br/><span class=\"line\">   ++i;</span><br/><span class=\"line\">   <span class=\"keyword\">if</span> (version) ++version;</span><br/><span class=\"line\">   <span class=\"keyword\">break</span>;</span><br/><span class=\"line\">  }</span><br/><span class=\"line\">  <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (IS(<span class=\"string\">&#34;-&#34;</span>))\t\t\t<span class=\"comment\">/* end of options; use stdin */</span></span><br/><span class=\"line\">   <span class=\"keyword\">break</span>;</span><br/><span class=\"line\">  <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (IS(<span class=\"string\">&#34;-l&#34;</span>))\t\t\t<span class=\"comment\">/* list */</span></span><br/><span class=\"line\">   ++listing;</span><br/><span class=\"line\">  <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (IS(<span class=\"string\">&#34;-o&#34;</span>))\t\t\t<span class=\"comment\">/* output file */</span></span><br/><span class=\"line\">  {</span><br/><span class=\"line\">   output=argv[++i];</span><br/><span class=\"line\">   <span class=\"keyword\">if</span> (output==<span class=\"literal\">NULL</span> || *output==<span class=\"number\">0</span> || (*output==<span class=\"string\">&#39;-&#39;</span> &amp;&amp; output[<span class=\"number\">1</span>]!=<span class=\"number\">0</span>))</span><br/><span class=\"line\">    usage(<span class=\"string\">&#34;&#39;-o&#39; needs argument&#34;</span>);</span><br/><span class=\"line\">   <span class=\"keyword\">if</span> (IS(<span class=\"string\">&#34;-&#34;</span>)) output=<span class=\"literal\">NULL</span>;</span><br/><span class=\"line\">  }</span><br/><span class=\"line\">  <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (IS(<span class=\"string\">&#34;-p&#34;</span>))\t\t\t<span class=\"comment\">/* parse only */</span></span><br/><span class=\"line\">   dumping=<span class=\"number\">0</span>;</span><br/><span class=\"line\">  <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (IS(<span class=\"string\">&#34;-s&#34;</span>))\t\t\t<span class=\"comment\">/* strip debug information */</span></span><br/><span class=\"line\">   stripping=<span class=\"number\">1</span>;</span><br/><span class=\"line\">  <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (IS(<span class=\"string\">&#34;-v&#34;</span>))\t\t\t<span class=\"comment\">/* show version */</span></span><br/><span class=\"line\">   ++version;</span><br/><span class=\"line\">  <span class=\"keyword\">else</span>\t\t\t\t\t<span class=\"comment\">/* unknown option */</span></span><br/><span class=\"line\">   usage(argv[i]);</span><br/><span class=\"line\"> }</span><br/><span class=\"line\"> <span class=\"keyword\">if</span> (i==argc &amp;&amp; (listing || !dumping))</span><br/><span class=\"line\"> {</span><br/><span class=\"line\">  dumping=<span class=\"number\">0</span>;</span><br/><span class=\"line\">  argv[--i]=Output;</span><br/><span class=\"line\"> }</span><br/><span class=\"line\"> <span class=\"keyword\">if</span> (version)</span><br/><span class=\"line\"> {</span><br/><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">&#34;%sn&#34;</span>,LUA_COPYRIGHT);</span><br/><span class=\"line\">  <span class=\"keyword\">if</span> (version==argc<span class=\"number\">-1</span>) <span class=\"built_in\">exit</span>(EXIT_SUCCESS);</span><br/><span class=\"line\"> }</span><br/><span class=\"line\"> <span class=\"keyword\">return</span> i;</span><br/><span class=\"line\">}</span><br/></pre></td></tr></tbody></table></figure>\n<p>在说明<code>doargs</code>函数之前，先列出在luac.c文件中前面的局部变量：<br/></p><figure class=\"highlight c\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/><span class=\"line\">9</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> PROGNAME\t<span class=\"meta-string\">&#34;luac&#34;</span>\t\t<span class=\"comment\">/* default program name */</span></span></span><br/><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> OUTPUT\t\tPROGNAME <span class=\"meta-string\">&#34;.out&#34;</span>\t<span class=\"comment\">/* default output file */</span></span></span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> listing=<span class=\"number\">0</span>;\t\t\t<span class=\"comment\">/* list bytecodes? */</span></span><br/><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> dumping=<span class=\"number\">1</span>;\t\t\t<span class=\"comment\">/* dump bytecodes? */</span></span><br/><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> stripping=<span class=\"number\">0</span>;\t\t\t<span class=\"comment\">/* strip debug information? */</span></span><br/><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">char</span> Output[]={ OUTPUT };\t<span class=\"comment\">/* default output file name */</span></span><br/><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* output=Output;\t<span class=\"comment\">/* actual output file name */</span></span><br/><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* progname=PROGNAME;\t<span class=\"comment\">/* actual program name */</span></span><br/></pre></td></tr></tbody></table></figure><p></p>\n<p>未完待续……</p>","text":"本lua版本为5.2.1 在lua的源码中，lua.c 实现了可执行的解释器，用于解释执行.out文件，luac.c 实现了字节码的编译器，用于将.lua文件编译为.out文件，即字节码文件。更加宏观的东西，则在打印的两份文档里，此处不详述，由于整个读入解析到解释执行的过程是先从...","link":"","photos":[],"count_time":{"symbolsCount":"2.4k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Lua远程调用的实现方法","uid":"76e52e8255c32e959dab4087b6cfa1a6","slug":"zl/2016-01-01-861_Lua远程调用的实现方法","date":"2024-04-03T03:47:36.126Z","updated":"2024-04-03T03:47:36.126Z","comments":true,"path":"api/articles/zl/2016-01-01-861_Lua远程调用的实现方法.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"游戏开发中，客户端、服务端之间的交互是很频繁的，尤其是逻辑玩法的实现，需要大量的交互。 如果所有的交互都按功能构建出不同的协议，这样即繁琐又不方便修改。 通过Lua，使用远程调用可以极大的方便客户端、服务器的通信。 在Lua中，通过C++告诉对方，我要调用哪个函数、传递哪些参数，...","link":"","photos":[],"count_time":{"symbolsCount":"7.2k","symbolsTime":"7 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Lua学习总结","uid":"6fc693b8b584f8e613aa8c5c347b6a47","slug":"zl/2016-01-01-860_Lua学习总结 ","date":"2024-04-03T03:47:36.125Z","updated":"2024-04-03T03:47:36.126Z","comments":true,"path":"api/articles/zl/2016-01-01-860_Lua学习总结 .json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"目录 总结 每个人都在犯错，只有在错误中找到自己的不足，并且去改变，这样你才能够成就一个完美的自己 总结 断断续续，慢慢悠悠，终于在不知道过了自己定的时间线多久之后，自己完成了自己给自己当初设定的目标，经历了这些之后，自己对于lua的理解深刻和明白了很多很多。在日常的开发过程中，...","link":"","photos":[],"count_time":{"symbolsCount":494,"symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}