{"title":"Lua中的协程","uid":"4d0a91799dda866fbb32a60943831f1f","slug":"zl/2016-01-01-885_Lua中的协程","date":"2024-04-03T03:47:36.157Z","updated":"2024-04-03T03:47:36.157Z","comments":true,"path":"api/articles/zl/2016-01-01-885_Lua中的协程.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<p>Lua中的协程和其他变量一样，都是第一类值（first-class alue），可以被保存在变量中，可以被作为参数传递，可以被函数返回。<br/>\n协程有4种状态：挂起（suspended），运行（running），死亡（dead）和正常（normal）。\nLua为协程提供了3个基础接口：create，resume和yield。</p>\n<p>#coroutine.create</p>\n<ul>\n  <li>创建一个新的协程，并为它的运行分配一个独立的栈</li>\n  <li>协程处于挂起状态（suspended）</li>\n  <li>接受一个函数作为参数，这个函数就是协程的主程序块</li>\n  <li>返回这个协程</li>\n  <li>挂起点被设置为主程序块的第一句</li>\n</ul>\n<p>#coroutine.resume</p>\n<ul>\n  <li>启动一个协程（第一次启动或从暂停状态启动）</li>\n  <li>自身（如果是协程的话）处于正常状态，被启动的协程处于运行状态</li>\n  <li>第一个参数为所要启动的协程</li>\n  <li>协程从它的挂起点开始执行</li>\n  <li>一直执行到被挂起或终止</li>\n  <li>导致协程终止的情况有两种：它的主程序块正常返回、运行过程中出错</li>\n  <li>执行结束后，控制权递交给此协程被激活的地方</li>\n</ul>\n<p>#coroutine.yield</p>\n<ul>\n  <li>挂起一个协程</li>\n  <li>协程处于挂起状态</li>\n  <li>协程的运行状态被记录</li>\n  <li>激活它的那个coroutine.resume返回</li>\n</ul>\n<hr/>\n<p>#协程间通信</p>\n<ul>\n  <li>协程第一次被启动时，传递给coroutine.resume的参数将传递给协程的主程序</li>\n  <li>协程挂起时，传递给coroutine.yield的参数将作为上次启动它的coroutine.resume的返回值返回</li>\n  <li>协程被再次启动时，传递给coroutine.resume的参数将作为上次挂起它的coroutine.yield的返回值返回</li>\n  <li>协程死亡时，主程序返回的值将作为上次启动它的coroutine.resume的返回值返回</li>\n</ul>\n<hr/>\n<p>#实验</p>\n<p>##状态</p>\n<figure class=\"highlight\"><pre><code class=\"language-lua\" data-lang=\"lua\"><span class=\"kd\">local</span> <span class=\"k\">function</span> <span class=\"nf\">status</span><span class=\"p\">(</span><span class=\"n\">str</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">str</span><span class=\"p\">,</span> <span class=\"nb\">coroutine.status</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">))</span>\n<span class=\"k\">end</span>\n<p><span class=\"kd\">local</span> <span class=\"n\">c1</span><span class=\"p\">,</span><span class=\"n\">c2</span><br />\n<span class=\"n\">c1</span> <span class=\"o\">=</span> <span class=\"nb\">coroutine.create</span><span class=\"p\">(</span><span class=\"k\">function</span><span class=\"p\">()</span><br />\n<span class=\"n\">status</span><span class=\"p\">(</span><span class=\"s2\">&quot;&lt;c2&gt;&quot;</span><span class=\"p\">,</span> <span class=\"n\">c2</span><span class=\"p\">)</span><br />\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;before c1 yield&quot;</span><span class=\"p\">)</span><br />\n<span class=\"nb\">coroutine.yield</span><span class=\"p\">()</span><br />\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;after c1 yield&quot;</span><span class=\"p\">)</span><br />\n<span class=\"k\">end</span><span class=\"p\">)</span><br />\n<span class=\"n\">c2</span> <span class=\"o\">=</span> <span class=\"nb\">coroutine.create</span><span class=\"p\">(</span><span class=\"k\">function</span><span class=\"p\">()</span><br />\n<span class=\"n\">status</span><span class=\"p\">(</span><span class=\"s2\">&quot;&lt;c2&gt;&quot;</span><span class=\"p\">,</span> <span class=\"n\">c2</span><span class=\"p\">)</span><br />\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;before c2 resume c1&quot;</span><span class=\"p\">)</span><br />\n<span class=\"nb\">coroutine.resume</span><span class=\"p\">(</span><span class=\"n\">c1</span><span class=\"p\">)</span><br />\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;after c2 resume c1&quot;</span><span class=\"p\">)</span><br />\n<span class=\"k\">end</span><span class=\"p\">)</span></p>\n<p><span class=\"n\">status</span><span class=\"p\">(</span><span class=\"s2\">&quot;&lt;c2&gt;&quot;</span><span class=\"p\">,</span> <span class=\"n\">c2</span><span class=\"p\">)</span><br />\n<span class=\"nb\">coroutine.resume</span><span class=\"p\">(</span><span class=\"n\">c2</span><span class=\"p\">)</span><br />\n<span class=\"n\">status</span><span class=\"p\">(</span><span class=\"s2\">&quot;&lt;c1&gt;&quot;</span><span class=\"p\">,</span> <span class=\"n\">c1</span><span class=\"p\">)</span><br />\n<span class=\"n\">status</span><span class=\"p\">(</span><span class=\"s2\">&quot;&lt;c2&gt;&quot;</span><span class=\"p\">,</span> <span class=\"n\">c2</span><span class=\"p\">)</span><br />\n<span class=\"nb\">coroutine.resume</span><span class=\"p\">(</span><span class=\"n\">c1</span><span class=\"p\">)</span><br />\n<span class=\"n\">status</span><span class=\"p\">(</span><span class=\"s2\">&quot;&lt;c1&gt;&quot;</span><span class=\"p\">,</span> <span class=\"n\">c1</span><span class=\"p\">)</span></code></pre></figure></p>\n<p>输出：</p>\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>outsky@x201:~/tmp$ lua test.lua \n&lt;c2&gt;\tsuspended\n&lt;c2&gt;\trunning\nbefore c2 resume c1\n&lt;c2&gt;\tnormal\nbefore c1 yield\nafter c2 resume c1\n&lt;c1&gt;\tsuspended\n&lt;c2&gt;\tdead\nafter c1 yield\n&lt;c1&gt;\tdead\n</code></pre></div></div>\n<hr/>\n<p>##通信</p>\n<figure class=\"highlight\"><pre><code class=\"language-lua\" data-lang=\"lua\"><span class=\"kd\">local</span> <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"nb\">coroutine.create</span><span class=\"p\">(</span><span class=\"k\">function</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&#34;c start:&#34;</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&#34;c yield return:&#34;</span><span class=\"p\">,</span> <span class=\"nb\">coroutine.yield</span><span class=\"p\">(</span><span class=\"s2\">&#34;c yield&#34;</span><span class=\"p\">))</span>\n    <span class=\"k\">return</span> <span class=\"s2\">&#34;c dead&#34;</span>\n<span class=\"k\">end</span><span class=\"p\">)</span>\n<p><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;main start c&quot;</span><span class=\"p\">)</span><br />\n<span class=\"kd\">local</span> <span class=\"n\">_</span><span class=\"p\">,</span><span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"nb\">coroutine.resume</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"s2\">&quot;main start c&quot;</span><span class=\"p\">)</span><br />\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;main resume return:&quot;</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"p\">)</span></p>\n<p><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;--------&quot;</span><span class=\"p\">)</span></p>\n<p><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;main resume c&quot;</span><span class=\"p\">)</span><br />\n<span class=\"n\">_</span><span class=\"p\">,</span><span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"nb\">coroutine.resume</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"s2\">&quot;main resume c&quot;</span><span class=\"p\">)</span><br />\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;main resume return again:&quot;</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"p\">)</span></code></pre></figure></p>\n<p>输出：</p>\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>outsky@x201:~/tmp$ lua test.lua \nmain start c\nc start:\tmain start c\nmain resume return:\tc yield\n--------\nmain resume c\nc yield return:\tmain resume c\nmain resume return again:\tc dead\n</code></pre></div></div>","text":"Lua中的协程和其他变量一样，都是第一类值（first-class alue），可以被保存在变量中，可以被作为参数传递，可以被函数返回。 协程有4种状态：挂起（suspended），运行（running），死亡（dead）和正常（normal）。 Lua为协程提供了3个基础接口：...","link":"","photos":[],"count_time":{"symbolsCount":"2.3k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"lua学习1","uid":"ccf00cc91e42a79529a94664e1522709","slug":"zl/2016-01-01-889_lua学习1","date":"2024-04-03T03:47:36.162Z","updated":"2024-04-03T03:47:36.162Z","comments":true,"path":"api/articles/zl/2016-01-01-889_lua学习1.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"类型与值Lua是一种动态语言，没有定义类型的语法，每个值都携带了自身的类型信息。 Lua中有8种基础类型：nil、boolean、number、string、userdata、function、thread、table。函数type可以返回值的类型。 123456print(ty...","link":"","photos":[],"count_time":{"symbolsCount":"2.1k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"LuaTable函数库","uid":"cb60e27e762dec313375f2a4e70391a8","slug":"zl/2016-01-01-886_LuaTable函数库","date":"2024-04-03T03:47:36.157Z","updated":"2024-04-03T03:47:36.157Z","comments":true,"path":"api/articles/zl/2016-01-01-886_LuaTable函数库.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"1234567table.insert(table,[ pos,] value) table.remove(table[, pos]) table.concat(table[, sep[, i[, j]]]) table.sort(table[, comp]) // 见Lua排序...","link":"","photos":[],"count_time":{"symbolsCount":"1.8k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}