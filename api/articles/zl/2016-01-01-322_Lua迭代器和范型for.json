{"title":"Lua迭代器和范型for","uid":"9e5bd7e7e0d0323640ed08b6293beebf","slug":"zl/2016-01-01-322_Lua迭代器和范型for","date":"2024-04-03T03:47:35.605Z","updated":"2024-04-03T03:47:35.605Z","comments":true,"path":"api/articles/zl/2016-01-01-322_Lua迭代器和范型for.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<p>关于Lua中的迭代器：ipairs与pairs。</p>\n<h3 id=\"迭代器和泛型for：\"><a href=\"#迭代器和泛型for：\" class=\"headerlink\" title=\"迭代器和泛型for：\"></a>迭代器和泛型for：</h3><h4 id=\"迭代器和闭包：\"><a href=\"#迭代器和闭包：\" class=\"headerlink\" title=\"迭代器和闭包：\"></a>迭代器和闭包：</h4><p>所有的迭代器都需要在连续的调用之间保存一些状态，这样才能知道当前迭代所处的位置及如何从当前位置步进到下一位置。对于我们自己的迭代器而言，闭包为保存状态提供了一种良好的机制。<strong>一个闭包就是一个可以访问其自身的环境中一个或多个局部变量的函数</strong>。这些变量将连续调用过程中的值并将其保存在闭包中，从而使得闭包能够记住迭代所处的位置。当然，要创建一个新的闭包，我们还需要创建非局部变量。因此，一个闭包结构通常涉及两个函数：闭包本身和一个用于创建该闭包及其封装变量的工厂。</p>\n<h4 id=\"泛型for：\"><a href=\"#泛型for：\" class=\"headerlink\" title=\"泛型for：\"></a>泛型for：</h4><p>泛型for在循环过程中在其内部保存了迭代函数，泛型for保存了三个值：一个迭代函数、一个不可变状态和一个控制变量。</p>\n<p>语法如下：</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> var-list <span class=\"keyword\">in</span> <span class=\"built_in\">exp</span>-list <span class=\"keyword\">do</span></span><br/><span class=\"line\">\tbody</span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/></pre></td></tr></tbody></table></figure>\n<p>其中，var-list是由一个或多个变量名组成的列表，以逗号分隔；exp-list是一个或多个表达式组成的列表，同样以逗号分隔。通常，表达式列表只有一个元素，即一句对迭代器工厂的调用。</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> k,v <span class=\"keyword\">in</span> <span class=\"built_in\">pairs</span>(t) <span class=\"keyword\">do</span> <span class=\"built_in\">print</span>(k,v) <span class=\"keyword\">end</span></span><br/></pre></td></tr></tbody></table></figure>\n<p>我们把变量列表的第一个变量称为控制变量，其值在循环过程中永远不会为nil，因为当其值为nil时循环就结束了。</p>\n<p>for做的第一件事情是对in后面的表达式求值。这些表达式应该返回三个值供for保存：<strong>迭代函数、不可变状态和控制变量的初始值。</strong>类似于多重赋值，只有最后一个白哦大事能够产生不止一个值；表达式列表的结果只会保留三个，多余的值会被丢弃，不足三个则以nil补齐。</p>\n<p>在上述的初始化步骤完成后，for使用不可变状态和控制变量为参数来调用迭代函数，从for代码结构的立足点来看，不可变状态根本没有意义，for只是把从初始化步骤得到的状态值传递给所有迭代函数，然后，for将迭代函数的返回值赋给变量列表中声明的变量。如果第一个返回值为nil，那么循环终止；否则，for执行它的循环体并再次调用迭代函数，再不断的重复这个过程。</p>\n<p>两种语法等价：</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> var_1,...,var_n <span class=\"keyword\">in</span> explist <span class=\"keyword\">do</span> block <span class=\"keyword\">end</span></span><br/></pre></td></tr></tbody></table></figure>\n<p>等价于：</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/><span class=\"line\">9</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">do</span></span><br/><span class=\"line\">\t<span class=\"keyword\">local</span> _f,_s,_var = explist</span><br/><span class=\"line\">\t<span class=\"keyword\">while</span> <span class=\"literal\">true</span> <span class=\"keyword\">do</span> </span><br/><span class=\"line\">\t\t<span class=\"keyword\">local</span> var_1,...,var_n = _f(_s,_var)</span><br/><span class=\"line\">\t\t_var = var_1</span><br/><span class=\"line\">\t\t<span class=\"keyword\">if</span> _var == <span class=\"literal\">nil</span> <span class=\"keyword\">then</span> <span class=\"keyword\">break</span> <span class=\"keyword\">end</span></span><br/><span class=\"line\">\t\tblock</span><br/><span class=\"line\">\t<span class=\"keyword\">end</span></span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/></pre></td></tr></tbody></table></figure>\n<p>假设迭代函数是f，不可变状态为s，控制变量的初始值为a0，那么在循环中控制变量的值依次为a1=f(s,a0),a2=f(s,a1)，直到ai为nil。如果for还有其他变量，那么这些变量只是简单的在每次调用f后得到额外的返回值。</p>\n<h4 id=\"无状态迭代器：\"><a href=\"#无状态迭代器：\" class=\"headerlink\" title=\"无状态迭代器：\"></a>无状态迭代器：</h4><p>无状态迭代器就是一种自身不保存任何状态的迭代器，因此，可以在多个循环中使用同一个无状态迭代器，从而避免创建新闭包的开销。</p>\n<p>for循环会以不可变状态和控制变量为参数调用迭代函数，一个无状态迭代器之需要这两个值来为迭代生成下一个元素：</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">a = {<span class=\"string\">&#34;One&#34;</span>,<span class=\"string\">&#34;Two&#34;</span>,<span class=\"string\">&#34;Three&#34;</span>}</span><br/><span class=\"line\"><span class=\"keyword\">for</span> i,v <span class=\"keyword\">in</span> <span class=\"built_in\">ipairs</span>(a) <span class=\"keyword\">do</span></span><br/><span class=\"line\">\t<span class=\"built_in\">print</span>(i,v)</span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/></pre></td></tr></tbody></table></figure>\n<p>ipairs和迭代器都非常简单：</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/><span class=\"line\">9</span><br/><span class=\"line\">10</span><br/><span class=\"line\">11</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">local</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(t,i)</span></span></span><br/><span class=\"line\">\ti = i + <span class=\"number\">1</span></span><br/><span class=\"line\">\t<span class=\"keyword\">local</span> v = t[i]</span><br/><span class=\"line\">\t<span class=\"keyword\">if</span> v <span class=\"keyword\">then</span></span><br/><span class=\"line\">\t\t<span class=\"keyword\">return</span> i,v</span><br/><span class=\"line\">\t<span class=\"keyword\">end</span></span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ipairs</span><span class=\"params\">(t)</span></span></span><br/><span class=\"line\">\t<span class=\"keyword\">return</span> iter,t,<span class=\"number\">0</span></span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/></pre></td></tr></tbody></table></figure>\n<p>当调用for循环中的ipairs(t)时，ipairs(t)会返回三个值，即迭代函数iter，不可变状态表t和控制变量的初始值0。</p>\n<p>然后Lua语言调用iter(t,0)，得到1，t[1]（除非t[1]已经变成了nil）。在第二次迭代中，Lua语言调用iter(t,1)，得到2，t[2]，依次类推，直至得到第一个为nil的元素。</p>\n<p>函数pairs和函数ipairs类似，也用于遍历一个表中的所有元素，不同的是，函数pairs的迭代函数是Lua语言中的一个基本函数next：</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">pairs</span><span class=\"params\">(t)</span></span></span><br/><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"built_in\">next</span>,t,<span class=\"literal\">nil</span></span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/></pre></td></tr></tbody></table></figure>\n<p>在调用next(t,k)时，k是表t的一个键，该函数会以随机次序返回表中的下一个键以及k对应的值，调用next(t,nil)时，返回表中的第一个键值对。当所有的元素遍历完时，函数next返回nil。</p>\n<p>区别：</p>\n<ul>\n<li>pairs：用于迭代table，可以遍历表中所有的key，可以返回nil</li>\n<li>ipairs: 迭代数组，不能返回 nil,如果遇到 nil 则退出</li>\n</ul>","text":"关于Lua中的迭代器：ipairs与pairs。 迭代器和泛型for：迭代器和闭包：所有的迭代器都需要在连续的调用之间保存一些状态，这样才能知道当前迭代所处的位置及如何从当前位置步进到下一位置。对于我们自己的迭代器而言，闭包为保存状态提供了一种良好的机制。一个闭包就是一个可以访问...","link":"","photos":[],"count_time":{"symbolsCount":"2k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%BF%AD%E4%BB%A3%E5%99%A8%E5%92%8C%E6%B3%9B%E5%9E%8Bfor%EF%BC%9A\"><span class=\"toc-text\">迭代器和泛型for：</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%BF%AD%E4%BB%A3%E5%99%A8%E5%92%8C%E9%97%AD%E5%8C%85%EF%BC%9A\"><span class=\"toc-text\">迭代器和闭包：</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%B3%9B%E5%9E%8Bfor%EF%BC%9A\"><span class=\"toc-text\">泛型for：</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%97%A0%E7%8A%B6%E6%80%81%E8%BF%AD%E4%BB%A3%E5%99%A8%EF%BC%9A\"><span class=\"toc-text\">无状态迭代器：</span></a></li></ol></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Lua入门","uid":"09cde711228cba9ba4505d40c71d393c","slug":"zl/2016-01-01-323_Lua入门","date":"2024-04-03T03:47:35.605Z","updated":"2024-04-03T03:47:35.605Z","comments":true,"path":"api/articles/zl/2016-01-01-323_Lua入门.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":" 遇到个问题，有个亿级别的网站，实现访问黑名单白名单控制，搜了下解决方案，基本都是nginx+lua实现，特此记录！ 定义 Lua是一种轻量小巧的脚本语言，用标准C语言编写并以源代码形式开放，几乎在所有操作系统和平台上都可以编译运行。其设计目的是为了嵌入应用程序中，从而为应用程序...","link":"","photos":[],"count_time":{"symbolsCount":"1.8k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Lua用处及进行文件读写操作","uid":"1b2c81e7d80cc25fbbaee6bbdfcc8ab0","slug":"zl/2016-01-01-321_Lua用处及进行文件读写操作","date":"2024-04-03T03:47:35.604Z","updated":"2024-04-03T03:47:35.604Z","comments":true,"path":"api/articles/zl/2016-01-01-321_Lua用处及进行文件读写操作.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"1、作为第三方插件，集成到项目中，提供功能支持2、可以完全使用lua进行开发，如quick-cocos2d、coronaSDK3、更多时候，作为数据的配置集（即阵列） lua进行文件读写local function read_files( fileName ) -- r表示读取权...","link":"","photos":[],"count_time":{"symbolsCount":923,"symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}