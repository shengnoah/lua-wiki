{"title":"C++与Lua初探","uid":"cb25719c3491a610b47df036c787cab4","slug":"zl/2016-01-01-981_C++与Lua初探","date":"2024-04-03T03:47:36.237Z","updated":"2024-04-03T03:47:36.237Z","comments":true,"path":"api/articles/zl/2016-01-01-981_C++与Lua初探.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<p>最近在工作中用到了Lua与C++的相互调用的知识，现在对两者的互相调用进行总结。</p>\n<p>我觉得要了解两者之间的调用关系，需要弄清三件事情：</p>\n<ol>\n  <li>lua栈是什么</li>\n  <li>C++如何调用lua</li>\n  <li>lua如何调用C++</li>\n</ol>\n<p>在弄清这三件事情之前，让我们先来看看怎么讲Lua嵌入到C++程序中。</p>\n<p>大致思路就是将Lua的源码打包成静态库，在程序编译的时候，将静态库也加入到编译选项中。</p>\n<p>具体步骤如下：</p>\n<ul>\n  <li>去<a href=\"https://www.lua.org/\">官网</a>上下载Lua源码</li>\n  <li>在根目录下运行 make linux（由于我是在linux平台下编译的，所以make后面跟的是linux，直接运行make会有相关的提示）</li>\n  <li>运行之后会在 src 目录下，生成一个liblua.a的静态库，这个静态库是我们所需要的</li>\n  <li>在编译程序的时候加入这个静态库，同时可能还需要指定下C++源码中引用到lua的头文件路径，我在编译的过程中，发现lua的静态库还需要 libm.so 和 libdl.so 动态库，所以也需要指定下</li>\n</ul>\n<h1 id=\"lua栈\">Lua栈</h1>\n<p>Lua栈是C++和Lua交流的唯一途径，所有的信息交流都是通过这个栈来完成。所以在介绍两者具体的调用之前，非常有必要介绍一下这个栈。</p>\n<p>首先看一下官方手册对这个栈的解释。</p>\n<blockquote>\n  <ul>\n    <li>Lua使用一个虚拟栈来和C互传值。栈上的每个元素都是一个Lua值（nil，数字，字符串，等等）</li>\n    <li>无论何时Lua调用C，被调用的函数都得到一个新的栈，这个栈独立于C函数本身的栈，也独立与之前的Lua栈。它里面包含了Lua传递给C函数的所有参数，而C函数则把要返回的结果放入这个栈以返回给调用者。</li>\n    <li>方便起见，所有针对栈的API查询操作都不严格遵循栈的操作规则，而是可以用一个索引来指向栈上的任何元素：正的索引指的是栈上的绝对位置（从1开始）；负的索引则指从栈顶开始的偏移量。展开来说，如果堆栈有n个元素，那么索引1表示第一个元素（也就是最先被压栈的元素）而索引n则指最后一个元素；索引-1也是指最后一个元素（即栈顶的元素），索引-n是指第一个元素。</li>\n  </ul>\n</blockquote>\n<p>从官方手册中，我们可以对这个栈有了基本的认识。</p>\n<p>下面的图可以从整体上认识C++和Lua是如何通过这个栈来进行交流的</p>\n<p><img src=\"http://7xrvqe.com1.z0.glb.clouddn.com/16-8-6/66841175.jpg\" alt=\"\"/></p>\n<p>下面的内容都需要联系到这张图，才能很好的说明</p>\n<h1 id=\"c调用lua\">C++调用Lua</h1>\n<p>下面通过C++读取Lua全局变量和调用lua函数来说明下C++调用lua的过程</p>\n<h2 id=\"c读取lua全局变量可以作为配置文件\">C++读取Lua全局变量（可以作为配置文件）</h2>\n<p>config.lua</p>\n<div class=\"language-lua highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">--配置文件，包含两个全局变量</span>\n<span class=\"n\">email</span> <span class=\"o\">=</span> <span class=\"s2\">&#34;xuqiangm@gmail.com&#34;</span>\n<span class=\"n\">blog</span> <span class=\"o\">=</span> <span class=\"s2\">&#34;xuqiangm@github.io&#34;</span>\n</code></pre></div></div>\n<p>config.c</p>\n<div class=\"language-c++ highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"cp\">#include &lt;stdio.h&gt;\n#include &lt;string.h&gt;\n</span>\n<span class=\"cp\">#include &#34;lua.h&#34;\n#include &#34;lualib.h&#34;\n#include &#34;lauxlib.h&#34;\n</span>\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span>\n<span class=\"p\">&#123;</span>\n\t<span class=\"c1\">//初始化全局L\n</span>\t<span class=\"n\">lua_State</span><span class=\"o\">*</span> <span class=\"n\">L</span> <span class=\"o\">=</span> <span class=\"n\">luaL_newstate</span><span class=\"p\">();</span>\n<pre><code>&lt;span class=&quot;c1&quot;&gt;//打开库\n</code></pre>\n<p></span>\t<span class=\"n\">luaL_openlibs</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">);</span></p>\n<pre><code>&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;luaL_loadfile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#34;config.lua&amp;#34;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;\n&lt;span class=&quot;p&quot;&gt;&#123;&lt;/span&gt;\n\t&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#34;loading file failed.&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;\n\t&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;\n&lt;span class=&quot;p&quot;&gt;&#125;&lt;/span&gt;\n\n&lt;span class=&quot;n&quot;&gt;lua_pcall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;\t&lt;span class=&quot;c1&quot;&gt;//执行脚本\n</code></pre>\n</span>\n\t<span class=\"c1\">//从lua的全局表中获取变量blog的值，压入栈顶\n</span>\t<span class=\"n\">lua_getglobal</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"s\">&#34;blog&#34;</span><span class=\"p\">);</span>\n\t<span class=\"c1\">//查看栈顶是不是stirng类型的值，如果是则返回值，值依然留在栈中\n</span>\t<span class=\"kt\">char</span><span class=\"o\">*</span> <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">luaL_checkstring</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">);</span>\n\t<span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">name</span> <span class=\"o\">!=</span> <span class=\"nb\">NULL</span><span class=\"p\">)</span>\n\t<span class=\"p\">{</span>\n\t\t<span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;My blog is %s</span><span class=\"se\">n</span><span class=\"s\">&#34;</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">);</span>\n\t<span class=\"p\">}</span>\n<pre><code>&lt;span class=&quot;n&quot;&gt;lua_getglobal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#34;email&amp;#34;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;\n&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;email&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;luaL_checkstring&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;\n&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;email&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;\n&lt;span class=&quot;p&quot;&gt;&#123;&lt;/span&gt;\n\t&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#34;Email is %s&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;\n&lt;span class=&quot;p&quot;&gt;&#125;&lt;/span&gt;\n\n&lt;span class=&quot;n&quot;&gt;lua_close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;\n\n&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;\n</code></pre>\n<p><span class=\"p\">}</span><br />\n</code></pre></div></div></p>\n<p>可以看出 lua_getglobal 这个函数也是通过栈来将数据传给C++程序的</p>\n<h2 id=\"c调用lua函数\">C++调用Lua函数</h2>\n<p>这一节我们来看一下C++怎么调用Lua中的函数的</p>\n<p>add.lua</p>\n<div class=\"language-lua highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">function</span> <span class=\"nf\">add</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"n\">y</span><span class=\"p\">)</span>\n\t<span class=\"k\">return</span> <span class=\"n\">x</span><span class=\"o\">+</span><span class=\"n\">y</span><span class=\"p\">;</span>\n<span class=\"k\">end</span>\n</code></pre></div></div>\n<p>add.c</p>\n<div class=\"language-c highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"cp\">#include &#34;lua.h&#34;\n#include &#34;lualib.h&#34;\n#include &#34;lauxlib.h&#34;\n</span>\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span>\n<span class=\"p\">&#123;</span>\n\t<span class=\"c1\">//初始化全局L\n</span>\t<span class=\"n\">lua_State</span><span class=\"o\">*</span> <span class=\"n\">L</span> <span class=\"o\">=</span> <span class=\"n\">luaL_newstate</span><span class=\"p\">();</span>\n<pre><code>&lt;span class=&quot;c1&quot;&gt;//打开库\n</code></pre>\n<p></span>\t<span class=\"n\">luaL_openlibs</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">);</span></p>\n<pre><code>&lt;span class=&quot;c1&quot;&gt;//加载lua脚本文件,但不执行\n</code></pre>\n<p></span>\t<span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">luaL_loadfile</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"s\">&quot;add.lua&quot;</span><span class=\"p\">))</span><br />\n<span class=\"p\">{</span><br />\n<span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&quot;loading file failed.</span><span class=\"se\">n</span><span class=\"s\">&quot;</span><span class=\"p\">);</span><br />\n<span class=\"k\">return</span> <span class=\"mi\">1</span><span class=\"p\">;</span><br />\n<span class=\"p\">}</span></p>\n<pre><code>&lt;span class=&quot;n&quot;&gt;lua_pcall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;\t&lt;span class=&quot;c1&quot;&gt;//执行脚本\n</code></pre>\n</span>\n\t<span class=\"c1\">//从全局表中获取add函数，压入栈\n</span>\t<span class=\"c1\">//从这里，我猜想，在lua脚本中，函数会以function变量的形式存入全局表中\n</span>\t<span class=\"n\">lua_getglobal</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"s\">&#34;add&#34;</span><span class=\"p\">);</span>\n\t<span class=\"c1\">//压入参数，对应函数参数列表（参数顺序是从左到右）\n</span>\t<span class=\"n\">lua_pushnumber</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n\t<span class=\"n\">lua_pushnumber</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">);</span>\n<pre><code>&lt;span class=&quot;c1&quot;&gt;//调用这个函数，数字2表示有两个参数,数字1表示有一个返回值。\n</code></pre>\n<p></span>\t<span class=\"c1\">//这个函数会从栈中弹出三个元素，即add函数和两个参数<br />\n</span>\t<span class=\"c1\">//会将一个返回值压入栈中<br />\n</span>\t<span class=\"n\">lua_pcall</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">);</span></p>\n<pre><code>&lt;span class=&quot;c1&quot;&gt;//从栈顶中获取值，即函数的返回值\n</code></pre>\n<p></span>\t<span class=\"kt\">int</span> <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">luaL_checknumber</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">);</span></p>\n<pre><code>&lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#34;result=%d&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;\n&lt;span class=&quot;n&quot;&gt;lua_close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;\n\n&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;\n</code></pre>\n<p><span class=\"p\">}</span><br />\n</code></pre></div></div></p>\n<p>从上面两个例子中我们可以看出Lua中的函数其实也是一种变量（function变量），这样上面两个例子就统一了。</p>\n<h1 id=\"lua函数调用c\">Lua函数调用C++</h1>\n<p>add.lua</p>\n<div class=\"language-lua highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">--调用C程序中的add函数</span>\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">add</span><span class=\"p\">(</span><span class=\"mi\">3</span> <span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&#34;result=&#34;</span><span class=\"o\">..</span><span class=\"n\">result</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<div class=\"language-c highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"cp\">#include &#34;lua.h&#34;\n#include &#34;lualib.h&#34;\n#include &#34;lauxlib.h&#34;\n</span>\n<span class=\"kt\">int</span> <span class=\"nf\">add</span><span class=\"p\">(</span><span class=\"n\">lua_State</span><span class=\"o\">*</span> <span class=\"n\">L</span><span class=\"p\">)</span>\n<span class=\"p\">&#123;</span>\n\t<span class=\"kt\">int</span> <span class=\"n\">a</span><span class=\"p\">,</span><span class=\"n\">b</span><span class=\"p\">;</span>\n<pre><code>&lt;span class=&quot;c1&quot;&gt;//获取栈中的变量（其实是lua脚本中传进来的值）\n</code></pre>\n<p></span>\t<span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">luaL_checknumber</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">);</span><br />\n<span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">luaL_checknumber</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">);</span></p>\n<pre><code>&lt;span class=&quot;c1&quot;&gt;//将计算的结果压入栈（其实是将结果传给脚本）\n</code></pre>\n<p></span>\t<span class=\"n\">lua_pushnumber</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"o\">+</span><span class=\"n\">b</span><span class=\"p\">);</span></p>\n<pre><code>&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;\n</code></pre>\n<p><span class=\"p\">}</span></p>\n<p><span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span><br />\n<span class=\"p\">{</span><br />\n<span class=\"c1\">//初始化全局L<br />\n</span>\t<span class=\"n\">lua_State</span><span class=\"o\">*</span> <span class=\"n\">L</span> <span class=\"o\">=</span> <span class=\"n\">luaL_newstate</span><span class=\"p\">();</span></p>\n<pre><code>&lt;span class=&quot;c1&quot;&gt;//打开库\n</code></pre>\n<p></span>\t<span class=\"n\">luaL_openlibs</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">);</span></p>\n<pre><code>&lt;span class=&quot;n&quot;&gt;lua_pushcfunction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;\n&lt;span class=&quot;n&quot;&gt;lua_setglobal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#34;add&amp;#34;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;\n\n&lt;span class=&quot;c1&quot;&gt;//加载lua脚本文件,但不执行\n</code></pre>\n<p></span>\t<span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">luaL_loadfile</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"s\">&quot;add.lua&quot;</span><span class=\"p\">))</span><br />\n<span class=\"p\">{</span><br />\n<span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&quot;loading file failed.</span><span class=\"se\">n</span><span class=\"s\">&quot;</span><span class=\"p\">);</span><br />\n<span class=\"k\">return</span> <span class=\"mi\">1</span><span class=\"p\">;</span><br />\n<span class=\"p\">}</span></p>\n<pre><code>&lt;span class=&quot;c1&quot;&gt;//执行脚本\n</code></pre>\n<p></span>\t<span class=\"n\">lua_pcall</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">);</span></p>\n<pre><code>&lt;span class=&quot;n&quot;&gt;lua_close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;\n\n&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;\n</code></pre>\n<p><span class=\"p\">}</span><br />\n</code></pre></div></div></p>\n<p>在上面这段代码中，有两个函数需要注意：</p>\n<ul>\n  <li>lua_pushcfunction(L, add)。 首先我们看下lua手册中对这个函数的解释：</li>\n</ul>\n<blockquote>\n  <p>将一个 C 函数压栈。 这个函数接收一个 C 函数指针， 并将一个类型为 function 的 Lua 值压栈。 当这个栈顶的值被调用时，将触发对应的 C 函数。</p>\n</blockquote>\n<p>具体在这段程序中，我将add函数的指针压入栈中，此时该函数指针处于栈位置</p>\n<ul>\n  <li>lua_setglobal(L, “add”)。 我们还是先看下lua手册中对这个函数的解释：</li>\n</ul>\n<blockquote>\n  <p>从堆栈上弹出一个值，并将其设为全局变量 name （函数的第二个值）的新值。</p>\n</blockquote>\n<p>联系lua_pushcfunction，我们可以知道，这个函数会将栈顶的add函数指针弹出，然后设置全局变量add的值为这个函数指针。这样在lua脚本中，就可以获取这个变量的值。</p>\n<h1 id=\"关于lua_state\">关于lua_State</h1>\n<p>对于lua_State，我在网上找到了一篇文章，对于这个类型解释挺不错，事实上，了解这个类型，对于C和Lua之间的关系就会有更透彻的了解，非常建议读一下。 <a href=\"http://blog.csdn.net/chenjiayi_yun/article/details/24304607\">lua 源码分析之线程对象lua_State</a></p>\n<h1 id=\"参考资料\">参考资料</h1>\n<ul>\n  <li><a href=\"http://blog.csdn.net/musicvs/article/details/8440707\">Lua篇（第01章）：让Lua和C++牵手</a></li>\n  <li><a href=\"http://blog.csdn.net/puppet_master/article/details/47980401\">Lua学习笔记–C调用Lua</a></li>\n</ul>","text":"最近在工作中用到了Lua与C++的相互调用的知识，现在对两者的互相调用进行总结。 我觉得要了解两者之间的调用关系，需要弄清三件事情： lua栈是什么 C++如何调用lua lua如何调用C++ 在弄清这三件事情之前，让我们先来看看怎么讲Lua嵌入到C++程序中。 大致思路就是将L...","link":"","photos":[],"count_time":{"symbolsCount":"9.7k","symbolsTime":"9 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#lua%E6%A0%88\"><span class=\"toc-text\">Lua栈</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#c%E8%B0%83%E7%94%A8lua\"><span class=\"toc-text\">C++调用Lua</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#c%E8%AF%BB%E5%8F%96lua%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F%E5%8F%AF%E4%BB%A5%E4%BD%9C%E4%B8%BA%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">C++读取Lua全局变量（可以作为配置文件）</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#c%E8%B0%83%E7%94%A8lua%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">C++调用Lua函数</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#lua%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8c\"><span class=\"toc-text\">Lua函数调用C++</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%85%B3%E4%BA%8Elua_state\"><span class=\"toc-text\">关于lua_State</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99\"><span class=\"toc-text\">参考资料</span></a></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"lua语法","uid":"6fd8143c3b34ef934d677c24fc2719a0","slug":"zl/2016-01-01-982_lua语法","date":"2024-04-03T03:47:36.237Z","updated":"2024-04-03T03:47:36.238Z","comments":true,"path":"api/articles/zl/2016-01-01-982_lua语法.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"lua特性开源，轻量级，c语言编写实现，实现面向对象有点绕，执行效率高 lua开发环境 linux 123456789101112131415-- 下载lua包、解压wget -c http://www.lua.org/ftp/lua-5.3.0.tar.gztar zxvf l...","link":"","photos":[],"count_time":{"symbolsCount":"4k","symbolsTime":"4 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"基于AndroLua_Pro的Android开发代码示例","uid":"94417dda5756bd306e745ea97ae3cbdc","slug":"zl/2016-01-01-978_基于AndroLua_Pro的Android开发代码示例","date":"2024-04-03T03:47:36.236Z","updated":"2024-04-03T03:47:36.236Z","comments":true,"path":"api/articles/zl/2016-01-01-978_基于AndroLua_Pro的Android开发代码示例.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":" 温馨提示:请使用电脑浏览器打开,以确保最佳的阅读体验,谢谢.(￣▽￣)” 我希望你有了一些AndroLua_Pro的基础, 如果还没有可以结合这篇文章(基于AndroLua_Pro的Android开发笔记)来看. 其实我代码都放在了GitHub, 可以去看看呗. 缓存 缓存函数...","link":"","photos":[],"count_time":{"symbolsCount":"1.9k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}