{"title":"延迟加载模式（lazy evaluation）","uid":"d1310a0d4bc61ea97c703ffc14e6565c","slug":"zl/2016-01-01-123_延迟加载模式（lazy evaluation）","date":"2024-04-03T03:47:33.030Z","updated":"2024-04-03T03:47:33.030Z","comments":true,"path":"api/articles/zl/2016-01-01-123_延迟加载模式（lazy evaluation）.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<p>延迟加载模式（lazy evaluation）<br/>代码参考引用自：<a href=\"https://github.com/faif/python-patterns/blob/master/lazy_evaluation.py\" target=\"_blank\" rel=\"external noopener noreferrer\">https://github.com/faif/python-patterns/blob/master/lazy_evaluation.py</a></p>\n<h4 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h4><figure class=\"highlight python\"><table><tbody><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"string\">&#34;&#34;&#34;</span></div><div class=\"line\">Lazily-evaluated property pattern in Python.</div><div class=\"line\">https://en.wikipedia.org/wiki/Lazy_evaluation</div><div class=\"line\">References:</div><div class=\"line\">bottle</div><div class=\"line\">https://github.com/bottlepy/bottle/blob/cafc15419cbb4a6cb748e6ecdccf92893bb25ce5/bottle.py#L270</div><div class=\"line\">django</div><div class=\"line\">https://github.com/django/django/blob/ffd18732f3ee9e6f0374aff9ccf350d85187fac2/django/utils/functional.py#L19</div><div class=\"line\">pip</div><div class=\"line\">https://github.com/pypa/pip/blob/cb75cca785629e15efb46c35903827b3eae13481/pip/utils/__init__.py#L821</div><div class=\"line\">pyramimd</div><div class=\"line\">https://github.com/Pylons/pyramid/blob/7909e9503cdfc6f6e84d2c7ace1d3c03ca1d8b73/pyramid/decorator.py#L4</div><div class=\"line\">werkzeug</div><div class=\"line\">https://github.com/pallets/werkzeug/blob/5a2bf35441006d832ab1ed5a31963cbc366c99ac/werkzeug/utils.py#L35</div><div class=\"line\">&#34;&#34;&#34;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"params\">(object)</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, function)</span>:</span></div><div class=\"line\">        self.function = function</div><div class=\"line\">        functools.update_wrapper(self, function)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__get__</span><span class=\"params\">(self, obj, type_)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">if</span> obj <span class=\"keyword\">is</span> <span class=\"keyword\">None</span>:</div><div class=\"line\">            <span class=\"keyword\">return</span> self</div><div class=\"line\">        val = self.function(obj)</div><div class=\"line\">        obj.__dict__[self.function.__name__] = val</div><div class=\"line\">        <span class=\"keyword\">return</span> val</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, name, occupation)</span>:</span></div><div class=\"line\">        self.name = name</div><div class=\"line\">        self.occupation = occupation</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">relatives</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"comment\"># Get all relatives, let&#39;s assume that it costs much time.</span></div><div class=\"line\">        relatives = <span class=\"string\">&#34;Many relatives.&#34;</span></div><div class=\"line\">        <span class=\"keyword\">return</span> relatives</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    Jhon = Person(<span class=\"string\">&#39;Jhon&#39;</span>, <span class=\"string\">&#39;Coder&#39;</span>)</div><div class=\"line\">    print(<span class=\"string\">&#34;Name: {0}    Occupation: {1}&#34;</span>.format(Jhon.name, Jhon.occupation))</div><div class=\"line\">    print(<span class=\"string\">&#34;Before we access `relatives`:&#34;</span>)</div><div class=\"line\">    print(Jhon.__dict__)</div><div class=\"line\">    print(<span class=\"string\">&#34;Jhon&#39;s relatives: {0}&#34;</span>.format(Jhon.relatives))</div><div class=\"line\">    print(<span class=\"string\">&#34;After we&#39;ve accessed `relatives`:&#34;</span>)</div><div class=\"line\">    print(Jhon.__dict__)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">### OUTPUT ###</span></div><div class=\"line\"><span class=\"comment\"># Name: Jhon    Occupation: Coder</span></div><div class=\"line\"><span class=\"comment\"># Before we access `relatives`:</span></div><div class=\"line\"><span class=\"comment\"># {&#39;name&#39;: &#39;Jhon&#39;, &#39;occupation&#39;: &#39;Coder&#39;}</span></div><div class=\"line\"><span class=\"comment\"># Jhon&#39;s relatives: Many relatives.</span></div><div class=\"line\"><span class=\"comment\"># After we&#39;ve accessed `relatives`:</span></div><div class=\"line\"><span class=\"comment\"># {&#39;relatives&#39;: &#39;Many relatives.&#39;, &#39;name&#39;: &#39;Jhon&#39;, &#39;occupation&#39;: &#39;Coder&#39;}</span></div></pre></td></tr></tbody></table></figure>\n<h4 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h4><p>装饰器类 lazy_property 中的 <code>__get__()</code>方法，是为该类实现为了描述符（descriptor）。<code>__get__()</code> 方法是在访问类或者类实例的属性时，类实例的 <code>__dict__</code> 中不存在被访问属性，类的 <code>__dict__</code> 中也不存在被访问属性的情况下，会调用 <code>__get__()</code> 方法获取被访问属性，即例子代码中的 relatives。在执行语句 <code>print(&#34;John&#39;s relatives: &#123;0&#125;&#34;.format(John.relatives))</code> 时，实例 Jhon 的 <code>__dict__</code> 中还没有属性 relatives，所以装饰器类的 <code>__get__</code> 方法被调用，为实例 Jhon 设置了 revatives 属性，达到延迟加载的效果。</p>\n<p>本例说明的情况为，假设类 Person 的实例的 relatives 属性加载特别缓慢，在实例化 Person 类的时候暂时不要初始化该属性，找其他合适的时机再延迟加载。</p>","text":"延迟加载模式（lazy evaluation）代码参考引用自：https://github.com/faif/python-patterns/blob/master/lazy_evaluation.py 代码123456789101112131415161718192021222...","link":"","photos":[],"count_time":{"symbolsCount":"2.7k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%BB%A3%E7%A0%81\"><span class=\"toc-text\">代码</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%88%86%E6%9E%90\"><span class=\"toc-text\">分析</span></a></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"FDDB datasets and evaluation · KaLyo's Notes","uid":"86297aa03ba557c590355c17601cdd3f","slug":"zl/2016-01-01-122_FDDB datasets and evaluation · KaLyo's Notes","date":"2024-04-03T03:47:33.030Z","updated":"2024-04-03T03:47:33.030Z","comments":true,"path":"api/articles/zl/2016-01-01-122_FDDB datasets and evaluation · KaLyo's Notes.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"DATASETS人脸数据集，有大约2800多张图片。这里主要讲其用于人脸检测的部分。这个数据集也可以用于做人脸对齐（face alignment） 数据集主要来自于网络上新闻媒体里的图片。经过相似图片剔除后留下大约2800多张。分为10个folder，每个folder300张左右...","link":"","photos":[],"count_time":{"symbolsCount":"1.2k","symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Lua学习","uid":"98627ae8510dc86d4061c2718311a9a7","slug":"zl/2016-01-01-124_Lua学习","date":"2024-04-03T03:47:33.030Z","updated":"2024-04-03T03:47:33.030Z","comments":true,"path":"api/articles/zl/2016-01-01-124_Lua学习.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":" 轻量级嵌入式脚本语言 动态类型语言 语法数据类型 nil boolean number string userdata function thread table使用type()返回类型 Boolean boolean和nil都被看做false 0和空串被看做true Numb...","link":"","photos":[],"count_time":{"symbolsCount":"2.1k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}