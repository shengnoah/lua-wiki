{"title":"Linux安装ngx_lua_waf实现waf功能","uid":"5429aa38fc7f679f0141d2dbc38516f6","slug":"zl/2016-01-01-916_Linux安装ngx_lua_waf实现waf功能","date":"2024-04-03T03:47:36.186Z","updated":"2024-04-03T03:47:36.189Z","comments":true,"path":"api/articles/zl/2016-01-01-916_Linux安装ngx_lua_waf实现waf功能.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<h1 id=\"一、ngx-lua-waf用途\"><a href=\"#一、ngx-lua-waf用途\" class=\"headerlink\" title=\"一、ngx_lua_waf用途\"></a>一、ngx_lua_waf用途</h1><p> 1、防止SQL注入，本地包含，本地溢出，fuzzing测试，XSS，SSRF等web攻击;<br/>2、防止SVN/备份之类文件泄漏;<br/>3、防止apachebench之类的压力测试工具的攻击;<br/>4、屏蔽常见的扫描黑客工具，扫描器;<br/>5、屏蔽常见的网络请求;<br/>6、屏蔽照片附件类目录php执行权限;<br/>7、防止webshell上传。</p>\n<h1 id=\"二、安装\"><a href=\"#二、安装\" class=\"headerlink\" title=\"二、安装\"></a>二、安装</h1><h2 id=\"1、首先安装所需要的依赖环境\"><a href=\"#1、首先安装所需要的依赖环境\" class=\"headerlink\" title=\"1、首先安装所需要的依赖环境\"></a>1、首先安装所需要的依赖环境</h2><p><code>yum -y install gcc gcc-c++ wget git geoip-devel gd-devel pcre-deve libcurl-devel libxml2 libxml2-devel libgd-devel openssl-devel lua-devel</code></p>\n<h2 id=\"2、LuaJIT\"><a href=\"#2、LuaJIT\" class=\"headerlink\" title=\"2、LuaJIT\"></a>2、LuaJIT</h2><p> 下载并安装LuaJIT2.0.5，首先来到/usr/local/src（压缩包存放目录）目录下。<br/> <code>cd /usr/local/src</code><br/> <code>wget http://luajit.org/download/LuaJIT-2.0.5.tar.gz</code><br/><code>tar -zxvf LuaJIT-2.0.5.tar.gz</code><br/><code>cd LuaJIT-2.0.5</code><br/><code>make install PREFIX=/usr/local/src/luajit</code><br/>然后创建一条软连接：<br/><code>ln -s /usr/local/src/luajit/lib/libluajit-5.1.so.2 /lib64/libluajit-5.1.so.2</code></p>\n<h2 id=\"3、ngx-devel-kit\"><a href=\"#3、ngx-devel-kit\" class=\"headerlink\" title=\"3、ngx_devel_kit\"></a>3、ngx_devel_kit</h2><p>下载并安装ngx_devel_kit<br/><code>cd /usr/local/src</code><br/><code>wget https://github.com/simpl/ngx_devel_kit/archive/v0.3.0.tar.gz</code><br/><code>tar -zxvf v0.3.0.tar.gz</code></p>\n<h2 id=\"4、lua-nginx-model\"><a href=\"#4、lua-nginx-model\" class=\"headerlink\" title=\"4、lua-nginx-model\"></a>4、lua-nginx-model</h2><p>下载并安装lua-nginx-model（nginx的lua模块）<br/><code>wget https://github.com/openresty/lua-nginx-module/archive/v0.10.14rc3.tar.gz</code><br/><code>tar -zxvf v0.10.14rc3.tar.gz</code></p>\n<h2 id=\"5、安装nginx\"><a href=\"#5、安装nginx\" class=\"headerlink\" title=\"5、安装nginx\"></a>5、安装nginx</h2><p>下载并安装nginx，这里我选择的是1.15.2版本的。<br/><code>wget http://nginx.org/download/nginx-1.15.2.tar.gz</code><br/>然后开始编译安装。<br/><code>./configure \n--user=www \n--group=www \n--prefix=/data/server/nginx \n--error-log-path=/data/server/nginx/error.log \n--http-log-path=/data/server/nginx/access.log \n--with-http_ssl_module \n--with-http_v2_module \n--with-http_realip_module \n--with-http_addition_module \n--with-http_image_filter_module \n--with-http_geoip_module \n--with-http_sub_module \n--with-http_dav_module \n--with-http_flv_module \n--with-http_mp4_module \n--with-http_gunzip_module \n--with-http_gzip_static_module \n--with-http_random_index_module \n--with-http_secure_link_module \n--with-http_degradation_module \n--with-http_slice_module \n--with-http_stub_status_module \n--with-pcre \n--with-pcre-jit \n--with-stream \n--with-stream_ssl_module \n--with-debug \n--add-module=/usr/local/src/ngx_devel_kit-0.3.0 \n--add-module=/usr/local/src/lua-nginx-module-0.10.14rc3 \n--with-ld-opt=&#34;-Wl,-rpath,$LUAJIT_LIB&#34; ;</code><br/>检查没问题的话开始安装：<br/><code>make &amp;&amp; make install</code></p>\n<h2 id=\"6、下载并安装waf模块\"><a href=\"#6、下载并安装waf模块\" class=\"headerlink\" title=\"6、下载并安装waf模块\"></a>6、下载并安装waf模块</h2><p><code>wget https://github.com/hack-umbrella/ngx_lua_waf/archive/master.zip</code><br/>解压并改名为waf，移动到nginx的配置目录下<br/><code>unzip master.zip</code><br/><code>mv /usr/local/src/ngx_lua_waf-0.7.2/ waf</code><br/><code>cp -rf /usr/local/src/waf/ /data/server/nginx/conf/</code><br/>修改waf模块的规则配置路径<br/><code>vim /data/server/nginx/conf/waf/config.lua</code><br/>修改配置文件为如下：<br/>   RulePath = “/data/server/nginx/conf/waf/wafconf/“<br/>    –规则存放目录<br/>    attacklog = “off”<br/>    –是否开启攻击信息记录，需要配置logdir<br/>    logdir = “/data/server/nginx/logs/hack/“<br/>    –log存储目录，该目录需要用户自己新建，切需要nginx用户的可写权限<br/>    UrlDeny=”on”<br/>    –是否拦截url访问<br/>    Redirect=”on”<br/>    –是否拦截后重定向<br/>    CookieMatch = “on”<br/>    –是否拦截cookie攻击<br/>    postMatch = “on”<br/>    –是否拦截post攻击<br/>    whiteModule = “on”<br/>    –是否开启URL白名单<br/>    black_fileExt={“php”,”jsp”}<br/>    –填写不允许上传文件后缀类型<br/>    ipWhitelist={“127.0.0.1”}<br/>    –ip白名单，多个ip用逗号分隔<br/>    ipBlocklist={“1.0.0.1”}<br/>    –ip黑名单，多个ip用逗号分隔<br/>    CCDeny=”on”<br/>    –是否开启拦截cc攻击(需要nginx.conf的http段增加lua_shared_dict limit 10m;)<br/>    CCrate = “30/60”<br/>    –设置cc攻击频率，单位为秒.<br/>    –默认1分钟同一个IP只能请求同一个地址30次<br/>    html=[[Please go away~~]]<br/>    –警告内容,可在中括号内自定义<br/>    备注:不要乱动双引号，区分大小写._</p>\n<p>修改nginx的配置文件使其加载waf功能模块。<br/><code>vim /data/server/nginx/conf/nginx.conf</code><br/>http里面添加如下（注意文件内的格式）<br/>    <code>lua_package_path &#34;/data/server/nginx/conf/waf/?.lua&#34;;</code><br/>    <code>lua_shared_dict limit 10m;</code><br/>    <code>init_by_lua_file  /data/server/nginx/conf/waf/init.lua;</code><br/>    <code>access_by_lua_file /data/server/nginx/conf/waf/waf.lua;</code><br/>创建nginx的启动脚本<br/><code>vim /lib/systemd/system/nginx.service</code><br/>内容如下：<br/>== [Unit]<br/>Description=The NGINX HTTP and reverse proxy server<br/>After=syslog.target network.target remote-fs.target nss-lookup.target</p>\n<p>[Service]<br/>Type=forking<br/>PIDFile=/data/server/nginx/logs/nginx.pid<br/>ExecStartPre=/data/server/nginx/sbin/nginx -t<br/>ExecStart=/data/server/nginx/sbin/nginx<br/>ExecReload=/data/server/nginx/sbin/nginx -s reload<br/>ExecStop=/usr/bin/kill -s QUIT $MAINPID<br/>PrivateTmp=true</p>\n<p>[Install]<br/>WantedBy=multi-user.target==</p>\n<p>启动nginx并设置为开机自启<br/><code>systemctl start nginx.service</code><br/><code>systemctl enable nginx.service</code><br/>创建nginx的软连接:<br/><code>ln -s /data/server/nginx/sbin/* /usr/local/sbin/</code></p>\n<h1 id=\"三、测试\"><a href=\"#三、测试\" class=\"headerlink\" title=\"三、测试\"></a>三、测试</h1><p>浏览器访问：<br/>http://安装waf的IP/test.txt?id=../../etc/passwd<br/><img src=\"https://app.yinxiang.com/FileSharing.action?hash=1/13ad558d231e9bde3653bb3f97920f15-23899\" alt=\"\"/><br/>如上图所示，WAF成功起了作用。还可以根据自己的需求给WAF添加过滤规则，使其更安全可靠，到这一个简单的WAF就搭建完成了。</p>","text":"一、ngx_lua_waf用途 1、防止SQL注入，本地包含，本地溢出，fuzzing测试，XSS，SSRF等web攻击;2、防止SVN/备份之类文件泄漏;3、防止apachebench之类的压力测试工具的攻击;4、屏蔽常见的扫描黑客工具，扫描器;5、屏蔽常见的网络请求;6、屏蔽...","link":"","photos":[],"count_time":{"symbolsCount":"4k","symbolsTime":"4 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%B8%80%E3%80%81ngx-lua-waf%E7%94%A8%E9%80%94\"><span class=\"toc-text\">一、ngx_lua_waf用途</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E3%80%81%E5%AE%89%E8%A3%85\"><span class=\"toc-text\">二、安装</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1%E3%80%81%E9%A6%96%E5%85%88%E5%AE%89%E8%A3%85%E6%89%80%E9%9C%80%E8%A6%81%E7%9A%84%E4%BE%9D%E8%B5%96%E7%8E%AF%E5%A2%83\"><span class=\"toc-text\">1、首先安装所需要的依赖环境</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2%E3%80%81LuaJIT\"><span class=\"toc-text\">2、LuaJIT</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3%E3%80%81ngx-devel-kit\"><span class=\"toc-text\">3、ngx_devel_kit</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4%E3%80%81lua-nginx-model\"><span class=\"toc-text\">4、lua-nginx-model</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5%E3%80%81%E5%AE%89%E8%A3%85nginx\"><span class=\"toc-text\">5、安装nginx</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#6%E3%80%81%E4%B8%8B%E8%BD%BD%E5%B9%B6%E5%AE%89%E8%A3%85waf%E6%A8%A1%E5%9D%97\"><span class=\"toc-text\">6、下载并安装waf模块</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%B8%89%E3%80%81%E6%B5%8B%E8%AF%95\"><span class=\"toc-text\">三、测试</span></a></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"浅析android手游lua脚本的加密与解密（前传）","uid":"34c99eebc4a80397f2da445ff1e625fe","slug":"zl/2016-01-01-919_浅析android手游lua脚本的加密与解密（前传）","date":"2024-04-03T03:47:36.190Z","updated":"2024-04-03T03:47:36.190Z","comments":true,"path":"api/articles/zl/2016-01-01-919_浅析android手游lua脚本的加密与解密（前传）.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":" 为了能让一些同学更好的学习lua的逆向，我把收集的一些资料组合成一篇lua加解密的相关工作给大家参考，当然，看这篇文章之前还是需要一些lua的基础知识，这里推荐云风大佬的《Lua源码欣赏》[19]，建议结合搜索引擎学习之。 文章分2部分介绍，第1部分介绍lua加解密的相关文章介...","link":"","photos":[],"count_time":{"symbolsCount":"3.5k","symbolsTime":"3 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"xLua热更新4之Hotfix（上篇）","uid":"e988662893ced0a5e1e7507e4bbb5a0b","slug":"zl/2016-01-01-915_xLua热更新4之Hotfix（上篇）","date":"2024-04-03T03:47:36.185Z","updated":"2024-04-03T03:47:36.185Z","comments":true,"path":"api/articles/zl/2016-01-01-915_xLua热更新4之Hotfix（上篇）.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"思考并回答以下问题： xLua里面有一个热补丁的功能。就是你有的C#代码不用改，就可以加入热更新的功能。 为什么叫热补丁呢？已有项目中的C#代码只需要增加一些配置，不用做其他任何调整就可使用上类似热更新的功能。由于和热更新也不同，所以叫热补丁。这也是xLua首创的一项功能。 热补...","link":"","photos":[],"count_time":{"symbolsCount":"3.3k","symbolsTime":"3 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}