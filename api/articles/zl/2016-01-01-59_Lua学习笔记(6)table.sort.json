{"title":"Lua学习笔记(6)table.sort","uid":"eb78728ef779840fb67945d3eafe8a63","slug":"zl/2016-01-01-59_Lua学习笔记(6)table.sort","date":"2024-04-03T03:47:35.835Z","updated":"2024-04-03T03:47:35.835Z","comments":true,"path":"api/articles/zl/2016-01-01-59_Lua学习笔记(6)table.sort.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<p>[TOC]</p>\n<p>简单来说就是table.sort的第二个参数支持自定义比较函数，这类似于c++的容器支持自定义比较函数一样，代码如下：</p>\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>local tbTest = &#123;\n\t&#123;1, 3&#125;,\n\t&#123;3, 5&#125;,\n\t&#123;5, 4&#125;,\n\t&#123;2, 3&#125;,\n&#125;\n<p>– 比较函数<br />\nfunction cmp(a, b)<br />\nreturn a[2] &lt; b[2]<br />\nend</p>\n<p>– 通常用法<br />\ntable.sort(tbTest, cmp)<br />\n</code></pre></div></div></p>\n<h1 id=\"深入学习\">深入学习</h1>\n<p>在自己工作过程中，遇到过下面两个问题</p>\n<h2 id=\"1自定义排序算法的问题\">1.自定义排序算法的问题</h2>\n<p>第一个问题是：当自定义比较函数出现比较两个参数时，无法严格给出一个结果，就会出现错误。用官方的说法是比较函数需要满足非对称和传递性质。对于这两个性质，可以回忆一下中学时候学的不等式相关性质，也可以看看《c++标准程序库》中介绍的比较函数排序准则[1]。官网文档说明如下：</p>\n<blockquote>\n  <p>Note that the comp function must define a strict partial order over the elements in the list; that is, it must be asymmetric and transitive. Otherwise, no valid sort may be possible.</p>\n</blockquote>\n<p>拿上面的代码举例，当把比较函数改为：</p>\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>-- 比较函数\nfunction cmp(a, b)\n\treturn a[2] &lt;= b[2]\nend\n</code></pre></div></div>\n<p>这个时候就会出现下面的错误：</p>\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code> attempt to index local &#39;b&#39; (a nil value)\n</code></pre></div></div>\n<p>因为，这个时候元素a={1, 3}和b={2, 3}的a[2] == b[2]，a[2] &lt;= b[2]和b[2] &lt;= a[2]都成立。所以这个是比较函数是symmetric的。</p>\n<h2 id=\"2面向对象方式的问题\">2.面向对象方式的问题</h2>\n<p>在工作中，写比较大的功能的时候，会经常用到lua的面向对象的方式编码。一开始无知的时候，会写下面的代码，结果后面的苦头自己吃了。</p>\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>local tbSort = &#123;25, 18, 15&#125;\n--面向对象隐藏self\nfunction tbSort:fCompWrap(a, b)\n\tprint(&#34;fCompWrap(self, a, b)&#34;, self, a, b)\n\treturn a &lt; b;\nend\n-- 比较\ntable.sort(tbSort, tbSort.fCompWrap)\n</code></pre></div></div>\n<p>结果，往往是比较函数报错，第二个参数为nil</p>\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>attempt to compare number with nil\n</code></pre></div></div>\n<p>只要理解’.’和’:’的区别就可以了，后面的’:’会使得函数的第一个参数为self。所以下面的一种写法可以解决问题：</p>\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>--面向对象\nfunction tbSort.fComp(a, b)\n\treturn a &lt; b;\nend\n</code></pre></div></div>\n<p>当然，最好可以用闭包的比较函数，就省掉了这许多麻烦。一点点的总结：</p>\n<ul>\n  <li>table.sort的比较函数在面向对象编程时候要注意了</li>\n  <li>lua面向对象中的self要理解：table:func(param) 等价于table.func(self, param)</li>\n  <li>table:func定义式在作为参数(table.func)传递之后使用，默认就是table:func的调用形式，也就是第一个参数为self</li>\n  <li>应该理解function table:func(param)的定义形式等价于function table.func(self, param)，这样更容易分的清楚</li>\n</ul>\n<h2 id=\"源码的简单分学习\">源码的简单分学习</h2>\n<p>关于问题1中的报错，可以看一下源码</p>\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>for (;;) &#123;  /* invariant: a[l..i] &lt;= P &lt;= a[j..u] */\n  /* repeat ++i until a[i] &gt;= P */\n  while (lua_rawgeti(L, 1, ++i), sort_comp(L, -1, -2)) &#123;\n    if (i&gt;u) luaL_error(L, &#34;invalid order function for sorting&#34;);\n    lua_pop(L, 1);  /* remove a[i] */\n  &#125;\n  /* repeat --j until a[j] &lt;= P */\n  while (lua_rawgeti(L, 1, --j), sort_comp(L, -3, -1)) &#123;\n    if (j&lt;l) luaL_error(L, &#34;invalid order function for sorting&#34;);\n    lua_pop(L, 1);  /* remove a[j] */\n  &#125;\n  if (j&lt;i) &#123;\n    lua_pop(L, 3);  /* pop pivot, a[i], a[j] */\n    break;\n  &#125;\n  set2(L, i, j);\n&#125;\n</code></pre></div></div>\n<p>有几点不一样的地方</p>\n<ul>\n  <li>lua源码中的快速排序，是用大循环代替了pivot的另外一部分排序。一般我们自己写快排的时候，会递归调两次，小于pivot的一部分和大于pivot的一部分</li>\n  <li>递归++i和++j的while，一般自己在写的时候会同时检查比较函数的结果和i、j的大小，防止越界</li>\n</ul>\n<h1 id=\"参考补充\">参考补充</h1>\n<ul>\n  <li>[1]《c++标准程序库》</li>\n</ul>\n<p>所谓的“排序准则”，必须定义strict weak ordering，其意义如下：</p>\n<ol>\n  <li>必须是“反对称的(antisymmetric)”\n对operator&lt;而言，如果x&lt;y为真，则y&lt;x为假。</li>\n  <li>必须是“可传递的（transitive）”\n对operator&lt;而言，如果x&lt;y为真且y&lt;z为真，则x&lt;z为真。</li>\n  <li>必须是“非自反的（irreflexive）”\n对operator&lt;而言，x&lt;x永远为假。</li>\n</ol>","text":"[TOC] 简单来说就是table.sort的第二个参数支持自定义比较函数，这类似于c++的容器支持自定义比较函数一样，代码如下： local tbTest = &#123; &#123;1, 3&#125;, &#123;3, 5&#125;, &#123;5, 4&#125;...","link":"","photos":[],"count_time":{"symbolsCount":"2.6k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%B7%B1%E5%85%A5%E5%AD%A6%E4%B9%A0\"><span class=\"toc-text\">深入学习</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E7%9A%84%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">1.自定义排序算法的问题</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E6%96%B9%E5%BC%8F%E7%9A%84%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">2.面向对象方式的问题</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%BA%90%E7%A0%81%E7%9A%84%E7%AE%80%E5%8D%95%E5%88%86%E5%AD%A6%E4%B9%A0\"><span class=\"toc-text\">源码的简单分学习</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%8F%82%E8%80%83%E8%A1%A5%E5%85%85\"><span class=\"toc-text\">参考补充</span></a></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Lua代码规范","uid":"09b4344dce8fef33e99561ed8e674168","slug":"zl/2016-01-01-597_Lua代码规范","date":"2024-04-03T03:47:35.835Z","updated":"2024-04-03T03:47:35.835Z","comments":true,"path":"api/articles/zl/2016-01-01-597_Lua代码规范.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"在公司整理了一份Lua语言的代码规范，分享一下。 写代码如同写文章，每个人或多或少都有自己的风格。我们在进行产品开发的过程中，更多的是团队上的协作与交流而非单打独斗。所以，为了 提高开发效率，降低维护成本，促进团队合作，代码的审查，整理出这篇文章。 借助于《Python风格指南》...","link":"","photos":[],"count_time":{"symbolsCount":"6.5k","symbolsTime":"6 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"399. Evaluate Division","uid":"5031930731b6e4a4cb5f9737c634e239","slug":"zl/2016-01-01-594_399. Evaluate Division","date":"2024-04-03T03:47:35.834Z","updated":"2024-04-03T03:47:35.834Z","comments":true,"path":"api/articles/zl/2016-01-01-594_399. Evaluate Division.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":" &lt;a href=&quot;https://techlarry.github.io/tags/Leetcode/&quot; style=&quot;color:white&quot; class=&quot;tag&quot;&gt; Leetcode &lt;/a&...","link":"","photos":[],"count_time":{"symbolsCount":"5.7k","symbolsTime":"5 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}