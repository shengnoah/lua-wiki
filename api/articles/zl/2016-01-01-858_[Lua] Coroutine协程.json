{"title":"Coroutine协程","uid":"94a6b6597c466125d27dcf26efe96b41","slug":"zl/2016-01-01-858_[Lua] Coroutine协程","date":"2024-04-03T03:47:36.124Z","updated":"2024-04-03T03:47:36.124Z","comments":true,"path":"api/articles/zl/2016-01-01-858_[Lua] Coroutine协程.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<h2 id=\"coroutine-manipulation\">Coroutine Manipulation</h2>\n<h3 id=\"coroutinecreate-f\">coroutine.create (f)</h3>\n<p>Creates a new coroutine, with body f. f must be a function. Returns this new coroutine, an object with type “thread”.</p>\n<p>创建一个新的协程。f必须是一个函数。返回值是这个新的协程，返回值的类型是thread。</p>\n<h3 id=\"coroutineisyieldable-\">coroutine.isyieldable ()</h3>\n<p>Returns true when the running coroutine can yield.</p>\n<p>A running coroutine is yieldable if it is not the main thread and it is not inside a non-yieldable C function.</p>\n<p>返回true当正在运行的协程可以被yield。</p>\n<h3 id=\"coroutineresume-co--val1-\">coroutine.resume (co [, val1, ···])</h3>\n<p>Starts or continues the execution of coroutine co. The first time you resume a coroutine, it starts running its body. The values val1, … are passed as the arguments to the body function. If the coroutine has yielded, resume restarts it; the values val1, … are passed as the results from the yield.</p>\n<p>If the coroutine runs without any errors, resume returns true plus any values passed to yield (when the coroutine yields) or any values returned by the body function (when the coroutine terminates). If there is any error, resume returns false plus the error message.</p>\n<h3 id=\"coroutinerunning-\">coroutine.running ()</h3>\n<p>Returns the running coroutine plus a boolean, true when the running coroutine is the main one.</p>\n<p>返回一个正在运行的协程和一个boolean值，这个协程是主线程的话boolean值为true。</p>\n<h3 id=\"coroutinestatus-co\">coroutine.status (co)</h3>\n<p>Returns the status of coroutine co, as a string: “running”, if the coroutine is running (that is, it called status); “suspended”, if the coroutine is suspended in a call to yield, or if it has not started running yet; “normal” if the coroutine is active but not running (that is, it has resumed another coroutine); and “dead” if the coroutine has finished its body function, or if it has stopped with an error.</p>\n<h3 id=\"coroutinewrap-f\">coroutine.wrap (f)</h3>\n<p>Creates a new coroutine, with body f. f must be a function. Returns a function that resumes the coroutine each time it is called. Any arguments passed to the function behave as the extra arguments to resume. Returns the same values returned by resume, except the first boolean. In case of error, propagates the error.</p>\n<h3 id=\"coroutineyield-\">coroutine.yield (···)</h3>\n<p>Suspends the execution of the calling coroutine. Any arguments to yield are passed as extra results to resume.</p>\n<p>挂起调用这个函数的协程。参数会传递给resume，作为resume的返回值。</p>\n<h2 id=\"例子\">例子</h2>\n<h3 id=\"例子1\">例子1</h3>\n<div class=\"language-lua highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">co</span> <span class=\"o\">=</span> <span class=\"nb\">coroutine.create</span><span class=\"p\">(</span>\n    <span class=\"k\">function</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">);</span>\n    <span class=\"k\">end</span>\n<span class=\"p\">)</span>\n<p><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"nb\">coroutine.status</span><span class=\"p\">(</span> <span class=\"n\">co</span> <span class=\"p\">))</span><br />\n<span class=\"nb\">coroutine.resume</span><span class=\"p\">(</span><span class=\"n\">co</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span><br />\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"nb\">coroutine.status</span><span class=\"p\">(</span> <span class=\"n\">co</span> <span class=\"p\">))</span></p>\n<p><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;---------------&quot;</span><span class=\"p\">)</span></p>\n<p><span class=\"n\">co</span> <span class=\"o\">=</span> <span class=\"nb\">coroutine.wrap</span><span class=\"p\">(</span><br />\n<span class=\"k\">function</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span><br />\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">);</span><br />\n<span class=\"k\">end</span><br />\n<span class=\"p\">)</span></p>\n<p><span class=\"n\">co</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span></p>\n<p><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;---------------&quot;</span><span class=\"p\">)</span></p>\n<p><span class=\"n\">co2</span> <span class=\"o\">=</span> <span class=\"nb\">coroutine.create</span><span class=\"p\">(</span><br />\n<span class=\"k\">function</span><span class=\"p\">()</span><br />\n<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">10</span> <span class=\"k\">do</span><br />\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span><br />\n<span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"o\">==</span> <span class=\"mi\">3</span> <span class=\"k\">then</span><br />\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"nb\">coroutine.status</span><span class=\"p\">(</span><span class=\"n\">co2</span><span class=\"p\">))</span><br />\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"nb\">coroutine.running</span><span class=\"p\">(</span> <span class=\"p\">))</span><br />\n<span class=\"k\">end</span><br />\n<span class=\"nb\">coroutine.yield</span><span class=\"p\">()</span><br />\n<span class=\"k\">end</span><br />\n<span class=\"k\">end</span><br />\n<span class=\"p\">)</span></p>\n<p><span class=\"nb\">coroutine.resume</span><span class=\"p\">(</span><span class=\"n\">co2</span><span class=\"p\">)</span><br />\n<span class=\"nb\">coroutine.resume</span><span class=\"p\">(</span><span class=\"n\">co2</span><span class=\"p\">)</span><br />\n<span class=\"nb\">coroutine.resume</span><span class=\"p\">(</span><span class=\"n\">co2</span><span class=\"p\">)</span></p>\n<p><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"nb\">coroutine.status</span><span class=\"p\">(</span><span class=\"n\">co2</span><span class=\"p\">))</span><br />\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"nb\">coroutine.running</span><span class=\"p\">(</span> <span class=\"p\">))</span><br />\n</code></pre></div></div></p>\n<p>输出：</p>\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>suspended\n1\ndead\n---------------\n2\n---------------\n1\n2\n3\nrunning\nthread: 0000000000459dd8        false\nsuspended\nthread: 0000000000456638        true\n</code></pre></div></div>\n<h3 id=\"例子2\">例子2</h3>\n<div class=\"language-lua highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">function</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&#34;foo a = &#34;</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"nb\">coroutine.yield</span><span class=\"p\">(</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">a</span><span class=\"p\">)</span>\n<span class=\"k\">end</span>\n<p><span class=\"n\">co</span> <span class=\"o\">=</span> <span class=\"nb\">coroutine.create</span><span class=\"p\">(</span><br />\n<span class=\"k\">function</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">)</span><br />\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;1==== &quot;</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">)</span><br />\n<span class=\"kd\">local</span> <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">foo</span><span class=\"p\">(</span> <span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"mi\">1</span> <span class=\"p\">)</span></p>\n<pre><code>    &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;#34;2==== &amp;#34;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;\n    &lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;coroutine.yield&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;\n\n    &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;#34;3==== &amp;#34;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;\n    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;#34;end of coroutine.&amp;#34;&lt;/span&gt;\n&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;\n</code></pre>\n<p><span class=\"p\">)</span></p>\n<p><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;main&quot;</span><span class=\"p\">,</span> <span class=\"nb\">coroutine.resume</span><span class=\"p\">(</span><span class=\"n\">co</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">))</span><br />\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;--------------&quot;</span><span class=\"p\">)</span></p>\n<p><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;main&quot;</span><span class=\"p\">,</span> <span class=\"nb\">coroutine.resume</span><span class=\"p\">(</span><span class=\"n\">co</span><span class=\"p\">,</span> <span class=\"s2\">&quot;abc&quot;</span><span class=\"p\">))</span><br />\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;--------------&quot;</span><span class=\"p\">)</span></p>\n<p><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;main&quot;</span><span class=\"p\">,</span> <span class=\"nb\">coroutine.resume</span><span class=\"p\">(</span><span class=\"n\">co</span><span class=\"p\">,</span> <span class=\"s2\">&quot;xxx&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;yyy&quot;</span><span class=\"p\">))</span><br />\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;--------------&quot;</span><span class=\"p\">)</span></p>\n<p><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;main&quot;</span><span class=\"p\">,</span> <span class=\"nb\">coroutine.resume</span><span class=\"p\">(</span><span class=\"n\">co</span><span class=\"p\">,</span> <span class=\"s2\">&quot;xxx&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;yyy&quot;</span><span class=\"p\">))</span><br />\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;--------------&quot;</span><span class=\"p\">)</span><br />\n</code></pre></div></div></p>\n<p>输出：</p>\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>1====   1       10\nfoo a =         2\nmain    true    4\n--------------\n2====   abc\nmain    true    11      -9\n--------------\n3====   xxx     yyy\nmain    true    10      end of coroutine.\n--------------\nmain    false   cannot resume dead coroutine\n--------------\n</code></pre></div></div>\n<h3 id=\"例子3生产者消费者\">例子3：生产者，消费者</h3>\n<div class=\"language-lua highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>\n<span class=\"kd\">local</span> <span class=\"n\">newProductor</span>\n<p><span class=\"k\">function</span> <span class=\"nf\">productor</span><span class=\"p\">()</span><br />\n<span class=\"kd\">local</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><br />\n<span class=\"k\">while</span> <span class=\"kc\">true</span> <span class=\"k\">do</span><br />\n<span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><br />\n<span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"o\">&gt;</span> <span class=\"mi\">10</span> <span class=\"k\">then</span><br />\n<span class=\"k\">break</span><span class=\"p\">;</span><br />\n<span class=\"k\">end</span><br />\n<span class=\"n\">send</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span><br />\n<span class=\"k\">end</span><br />\n<span class=\"k\">end</span></p>\n<p><span class=\"k\">function</span> <span class=\"nf\">consumer</span><span class=\"p\">()</span><br />\n<span class=\"k\">while</span> <span class=\"kc\">true</span> <span class=\"k\">do</span><br />\n<span class=\"kd\">local</span> <span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">receive</span><span class=\"p\">()</span><br />\n<span class=\"k\">if</span> <span class=\"n\">s</span> <span class=\"o\">==</span> <span class=\"kc\">false</span> <span class=\"k\">then</span><br />\n<span class=\"k\">break</span><span class=\"p\">;</span><br />\n<span class=\"k\">end</span><br />\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span><br />\n<span class=\"k\">end</span><br />\n<span class=\"k\">end</span></p>\n<p><span class=\"k\">function</span> <span class=\"nf\">receive</span><span class=\"p\">()</span><br />\n<span class=\"kd\">local</span> <span class=\"n\">status</span><span class=\"p\">,</span> <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"nb\">coroutine.resume</span><span class=\"p\">(</span><span class=\"n\">newProductor</span><span class=\"p\">)</span><br />\n<span class=\"k\">return</span> <span class=\"n\">status</span><span class=\"p\">,</span> <span class=\"n\">value</span><br />\n<span class=\"k\">end</span></p>\n<p><span class=\"k\">function</span> <span class=\"nf\">send</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span><br />\n<span class=\"nb\">coroutine.yield</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span><br />\n<span class=\"k\">end</span></p>\n<p><span class=\"n\">newProductor</span> <span class=\"o\">=</span> <span class=\"nb\">coroutine.create</span><span class=\"p\">(</span> <span class=\"n\">productor</span> <span class=\"p\">)</span><br />\n<span class=\"n\">consumer</span><span class=\"p\">()</span></p>\n<p></code></pre></div></div></p>\n<p>输出：</p>\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\nnil\n</code></pre></div></div>","text":"Coroutine Manipulation coroutine.create (f) Creates a new coroutine, with body f. f must be a function. Returns this new coroutine, an objec...","link":"","photos":[],"count_time":{"symbolsCount":"5.9k","symbolsTime":"5 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#coroutine-manipulation\"><span class=\"toc-text\">Coroutine Manipulation</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#coroutinecreate-f\"><span class=\"toc-text\">coroutine.create (f)</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#coroutineisyieldable-\"><span class=\"toc-text\">coroutine.isyieldable ()</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#coroutineresume-co--val1-\"><span class=\"toc-text\">coroutine.resume (co [, val1, ···])</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#coroutinerunning-\"><span class=\"toc-text\">coroutine.running ()</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#coroutinestatus-co\"><span class=\"toc-text\">coroutine.status (co)</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#coroutinewrap-f\"><span class=\"toc-text\">coroutine.wrap (f)</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#coroutineyield-\"><span class=\"toc-text\">coroutine.yield (···)</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BE%8B%E5%AD%90\"><span class=\"toc-text\">例子</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BE%8B%E5%AD%901\"><span class=\"toc-text\">例子1</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BE%8B%E5%AD%902\"><span class=\"toc-text\">例子2</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BE%8B%E5%AD%903%E7%94%9F%E4%BA%A7%E8%80%85%E6%B6%88%E8%B4%B9%E8%80%85\"><span class=\"toc-text\">例子3：生产者，消费者</span></a></li></ol></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Lua学习总结","uid":"6fc693b8b584f8e613aa8c5c347b6a47","slug":"zl/2016-01-01-860_Lua学习总结 ","date":"2024-04-03T03:47:36.125Z","updated":"2024-04-03T03:47:36.126Z","comments":true,"path":"api/articles/zl/2016-01-01-860_Lua学习总结 .json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"目录 总结 每个人都在犯错，只有在错误中找到自己的不足，并且去改变，这样你才能够成就一个完美的自己 总结 断断续续，慢慢悠悠，终于在不知道过了自己定的时间线多久之后，自己完成了自己给自己当初设定的目标，经历了这些之后，自己对于lua的理解深刻和明白了很多很多。在日常的开发过程中，...","link":"","photos":[],"count_time":{"symbolsCount":494,"symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"lua学习的查缺补漏","uid":"9f270bf956efdfa36eccfee547f93132","slug":"zl/2016-01-01-859_lua学习的查缺补漏","date":"2024-04-03T03:47:36.124Z","updated":"2024-04-03T03:47:36.125Z","comments":true,"path":"api/articles/zl/2016-01-01-859_lua学习的查缺补漏.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"目录 多行注释 取整 长字符串 字符串标准库 lua中安全访问 表 可变长参数 输入和输出 lua运行一段程序 认真学习，增强自己的能力和知识面。 多行注释 1 2 3 4 --[[ fdsa fdas ]] 取整 为了做到公平性取整，应该做到3.5+0.5为偶数则进位，而2.5...","link":"","photos":[],"count_time":{"symbolsCount":"4.3k","symbolsTime":"4 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}