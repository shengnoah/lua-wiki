{"title":"OpenResty Lua 的使用 (一) 环境搭建","uid":"e7caaf0563bdeb3b9918a8bc0871fd9a","slug":"zl/2016-01-01-364_OpenResty Lua 的使用 (一) 环境搭建","date":"2024-04-03T03:47:35.645Z","updated":"2024-04-03T03:47:35.646Z","comments":true,"path":"api/articles/zl/2016-01-01-364_OpenResty Lua 的使用 (一) 环境搭建.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<p>OpenResty Lua 的使用 (一) 环境搭建</p>\n<h2 id=\"前言\">前言</h2>\n<p>开始学习Openresty Lua的使用,顺便也熟悉了下Nginx。</p>\n<h2 id=\"一准备\">一、准备</h2>\n<ul>\n  <li>Linux环境，我这里是在虚拟机安装的CentOS 7。</li>\n  <li>Openresty lua 安装包。</li>\n</ul>\n<h2 id=\"二安装\">二、安装</h2>\n<ul>\n  <li>\n    <p>安装 <code class=\"highlighter-rouge\">wget</code> 命令用以下载使用，有的话可以不安装，<code class=\"highlighter-rouge\">wget -V</code> 测试是否安装。  <br/>\n <code class=\"highlighter-rouge\">yum -y install wget</code></p>\n  </li>\n  <li>\n    <p>安装 <code class=\"highlighter-rouge\">unzip</code> 命令用以解压zip文件，有的话可以不安装。   <br/>\n <code class=\"highlighter-rouge\">yum install -y unzip zip</code></p>\n  </li>\n  <li>\n    <p>安装 <code class=\"highlighter-rouge\">vim</code> 命令用以编辑文件，有的话可以不安装，在命令行敲入vi，按“tab”键，可以看到，是否已经有vim命令的存在。  <br/>\n <code class=\"highlighter-rouge\">yum -y install vim*</code></p>\n  </li>\n  <li>\n    <p>安装openresty其他需要的环境。  <br/>\n <code class=\"highlighter-rouge\">yum install readline-devel pcre-devel openssl-devel gcc gcc-c++ curl perl</code></p>\n  </li>\n  <li>\n    <p>为了方便我在opt下新建文件夹。  <br/>\n<code class=\"highlighter-rouge\">cd /opt/</code>   <br/>\n<code class=\"highlighter-rouge\">mkdir -p download backup app work</code></p>\n  </li>\n  <li>\n    <p>进入/opt/download文件夹下<code class=\"highlighter-rouge\">cd download/</code>。</p>\n  </li>\n  <li>\n    <p>下载OpenrestyLua,可以在Win系统下载后上传，也可以直接在服务器下载。[<a href=\"http://openresty.org/cn/download.html\">中文下载地址</a>],[<a href=\"https://openresty.org/en/download.html\">英文下载地址</a>]，选择对应版本进行下载。此处介绍在服务器直接下载：  <br/>\n<code class=\"highlighter-rouge\">wget https://openresty.org/download/openresty-1.13.6.2.tar.gz</code></p>\n  </li>\n  <li>\n    <p>同时再下载一些一会需要的模块和依赖的软件。</p>\n<pre><code>&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  * 下载ngx_cache_purge模块，该模块用于清理nginx缓存，非必需，建议安装。    \n`wget https://github.com/FRiCKLE/ngx_cache_purge/archive/2.3.tar.gz`\n</code></pre>\n<ul class=\"lvl-0\">\n<li class=\"lvl-4\">\n<p>下载nginx_upstream_check_module模块，该模块用于ustream健康检查，非必需，建议安装。<br />\n<code>wget https://github.com/yaoweibin/nginx_upstream_check_module/archive/v0.3.0.tar.gz</code><br />\n也可以到GitHub主页自己打包下载zip，然后上传解压，<a href=\"https://github.com/yaoweibin/nginx_upstream_check_module\">https://github.com/yaoweibin/nginx_upstream_check_module</a></p>\n</li>\n<li class=\"lvl-4\">\n<p>下载openssl模块,可以到 <a href=\"https://www.openssl.org/source/\">https://www.openssl.org/source/</a> 下载最新版，<a href=\"https://ftp.openssl.org/source/old/1.0.2/\">https://ftp.openssl.org/source/old/1.0.2/</a> 下载旧版。<br />\n<code>wget https://www.openssl.org/source/openssl-1.1.1.tar.gz</code><br />\n<code>wget https://ftp.openssl.org/source/old/1.0.2/openssl-1.0.2l.tar.gz</code></p>\n</li>\n<li class=\"lvl-4\">\n<p>下载pcre，地址：<a href=\"https://ftp.pcre.org/pub/pcre/\">https://ftp.pcre.org/pub/pcre/</a> 自行下载。<br />\n<code>wget https://ftp.pcre.org/pub/pcre/pcre-8.41.tar.gz</code></p>\n</li>\n<li class=\"lvl-4\">\n<p>安装drizzle模块(访问mysql数据库模块，非必需，建议安装)。<br />\n<code>wget http://agentzh.org/misc/nginx/drizzle7-2011.07.21.tar.gz</code></p>\n</li>\n<li class=\"lvl-4\">\n<p>下载nginx-http-concat(合并静态文件请求模块，非必需，建议安装)。<br />\n<code>wget https://github.com/alibaba/nginx-http-concat/archive/master.zip</code></p>\n</li>\n<li class=\"lvl-4\">\n<p>安装Zlib。<br />\n<code>wget https://zlib.net/fossils/zlib-1.2.8.tar.gz</code></p>\n</li>\n<li class=\"lvl-4\">\n<p>下载luajit，此处使用OpenResty，忽略此步骤。<br />\n<code>wget http://luajit.org/download/LuaJIT-2.0.5.tar.gz</code><br />\n</code></pre></div>    </div></p>\n</li>\n</ul>\n  </li>\n  <li>\n    <p>解压上面下载的几个文件。  <br/>\n<code class=\"highlighter-rouge\">tar -zxvf XXXX</code></p>\n<pre><code>&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  此处扩展一点其他知识点，此处不操作，了解即可：\n</code></pre>\n<p>安装PCRE<br />\nyum install -y gcc gcc-c++<br />\ncd pcre-8.41<br />\n./configure<br />\nmake<br />\nmake install<br />\n安装openSSL<br />\ncd openssl-1.0.2l<br />\n设定Openssl 安装，( --prefix )参数为欲安装之目录，也就是安装后的档案会出现在该目录下：<br />\n./config --prefix=/usr/local/openssl<br />\n./config -t<br />\nmake<br />\nmake install<br />\n安装drizzle模块<br />\ncd drizzle7-2011.07.21<br />\n./configure --without-server<br />\nmake libdrizzle-1.0<br />\nmake install-libdrizzle-1.0<br />\n安装Zlib<br />\ncd zlib-1.2.8<br />\n./configure    --prefix=/data/progam/zlib<br />\nmake<br />\nmake install<br />\n再进行配置一下系统的文件，加载刚才编译安装的zlib生成的库文件<br />\nvi /etc/ld.so.conf.d/zlib.conf<br />\n加入如下内容后保存退出: /data/program/zlib/lib<br />\n也就是添加安装目录的文件路径，库文件。ldconfig  运行之后就会加载安装的库文件了。<br />\n安装luajit,注意使用openresty不用安装luajit<br />\ncd LuaJIT-2.0.3<br />\nmake &amp;&amp; make install PREFIX=/usr/local/luajit<br />\nexport LUAJIT_LIB=/usr/local/luajit/lib<br />\nexport LUAJIT_INC=/usr/local/luajit/include/luajit-2.0<br />\n</code></pre></div>    </div></p>\n  </li>\n  <li>\n    <p>进入解压后的Opentesty文件下，<code class=\"highlighter-rouge\">cd openresty-1.13.6.2</code> ,可以看到存在一个名为configure的可执行脚本程序。它是用于检查系统是否有编译时所需的库，以及库的版本是否满足编译的需要等安装所需要的系统信息。为随后的编译工作做准备。在当前文件夹下执行如下设置，注意不能有换行,注意版本，注意刚刚下载的几个模块路径需要修改，自带的一下模块自动会包含在内不用再配置。  <br/>\n  <code class=\"highlighter-rouge\">./configure --prefix=/usr/local/openresty    --with-debug    --add-module=/opt/download/ngx_cache_purge-2.3 --add-module=/opt/download/nginx_upstream_check_module-0.3.0 --with-http_sub_module --with-http_stub_status_module --with-http_ssl_module --with-http_realip_module --with-pcre-jit --with-http_v2_module --with-openssl=/opt/download/openssl-1.0.2l --with-pcre=/opt/download/pcre-8.41 --with-http_gzip_static_module --with-http_flv_module --with-stream --with-stream_ssl_module --with-stream --with-stream_ssl_module </code>  <br/>\n 如觉得太长 可以再尾部使用  来代表不换行，如 ：</p>\n    <div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>      ./configure \n      --prefix=/usr/local/openresty  \n      --with-debug \n      xxx等\n</code></pre></div>    </div>\n    <p>可以在测试环境打开debug，使用<code class=\"highlighter-rouge\">--with-debug</code> ，nginx默认是info以上的。  <br/>\n有的地方看到-j2参数，应该是说明电脑支持多核工作，假设是双核，可以使用-j2。</p>\n    <div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>    如下这些参数会默认加载 不需要另外操作，如果加上的话重复加载模块，容易出错。\n    --with-cc-opt=&#39;-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC -O2&#39; \n    --add-module=../ngx_devel_kit-0.3.0 \n    --add-module=../echo-nginx-module-0.61 \n    --add-module=../xss-nginx-module-0.06 \n    --add-module=../ngx_coolkit-0.2rc3 \n    --add-module=../set-misc-nginx-module-0.32 \n    --add-module=../form-input-nginx-module-0.12 \n    --add-module=../encrypted-session-nginx-module-0.08 \n    --add-module=../srcache-nginx-module-0.31 \n    --add-module=../ngx_lua-0.10.13 \n    --add-module=../ngx_lua_upstream-0.07 \n    --add-module=../headers-more-nginx-module-0.33 \n    --add-module=../array-var-nginx-module-0.05 \n    --add-module=../memc-nginx-module-0.19 \n    --add-module=../redis2-nginx-module-0.15 \n    --add-module=../redis-nginx-module-0.3.7 \n    --add-module=../rds-json-nginx-module-0.15 \n    --add-module=../rds-csv-nginx-module-0.09 \n    --add-module=../ngx_stream_lua-0.0.5 \n    --with-ld-opt=&#39;-Wl,-rpath,/usr/local/openresty/nginx/luajit/lib&#39;\n</code></pre></div>    </div>\n  </li>\n</ul>\n<p>其他具体参数介绍可以看之前的一篇文章[[^Nginx的使用之编译配置参数]]</p>\n<ul>\n  <li>如果执行出错说明配置的参数有问题，一般是可能版本与安装的不对应， 具体原因可以看源码包目录下的 build/nginx-VERSION/objs/autoconf.err文件查看。如果上部没有出错，会出现提示<code class=\"highlighter-rouge\">gmake / gmake install</code> 的提示，根据提示一步步执行操作，先执行：<code class=\"highlighter-rouge\">gmake</code> 执行完毕后执行：<code class=\"highlighter-rouge\">gmake install</code>。</li>\n</ul>\n<h2 id=\"三启动\">三、启动</h2>\n<p>注意：</p>\n<ol>\n  <li>\n    <p>如果需要指定其他的目录的配置文件，可以复制/usr/local/openresty/nginx/conf/下的mime.types和nginx.conf。mime.types是必须，nginx.conf按照自己的需求修改。</p>\n  </li>\n  <li>\n    <p>如果需要指定其他的目录的配置文件用以存放代码执行目录的话，需要把/usr/local/openresty/nginx/目录下的html目录文件也复制过来，一般是一个index.html文件和50x.html文件。</p>\n  </li>\n</ol>\n<ul>\n  <li>\n    <p>查看版本信息：  <br/>\n<code class=\"highlighter-rouge\">/usr/local/openresty/nginx/sbin/nginx -v</code></p>\n  </li>\n  <li>\n    <p>查看配置信息：  <br/>\n<code class=\"highlighter-rouge\">/usr/local/openresty/nginx/sbin/nginx -V</code></p>\n  </li>\n  <li>配置文件,可以先简单设置 如打印hello world 或者使用默认配置启动：\n    <div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>  worker_processes  1;\n<p>error_log  /opt/logs/error.log debug;</p>\n<p>pid        /opt/logs/lua-nginx.pid;</p>\n<p>events &#123;<br />\nuse epoll;<br />\nmulti_accept on;<br />\nworker_connections  1024;<br />\n&#125;</p>\n<p>http &#123;</p>\n<pre><code>  include       mime.types;\n  default_type  application/octet-stream;\n\n  log_format  main  &amp;#39;$remote_addr - $remote_user [$time_local] &amp;#34;$request&amp;#34; &amp;#39;\n                    &amp;#39;$status $body_bytes_sent &amp;#34;$http_referer&amp;#34; &amp;#39;\n                    &amp;#39;&amp;#34;$http_user_agent&amp;#34; &amp;#34;$http_x_forwarded_for&amp;#34;&amp;#39;;\n\n  sendfile        on;\n\n  keepalive_timeout  65;\n\nlua_package_path  &amp;#39;$&#123;prefix&#125;?.lua;$&#123;prefix&#125;?/init.lua;;&amp;#39;;\n  lua_package_cpath &amp;#39;$&#123;prefix&#125;?.so;;&amp;#39;;\n\n  server &#123;\n      listen       80;\n      server_name  www.luatest.com;\n\n      access_log  /opt/logs/lua.access.log  main;\n\n      location / &#123;\n          root   html;\n          index  index.html index.htm;\n      &#125;\n\t\t\n\tlocation =/lua &#123;\n          default_type text/plain;\n          content_by_lua &amp;#39;ngx.say(&amp;#34;hello,lua&amp;#34;)&amp;#39;;\n      &#125;\n\n      error_page  404              /404.html;\n\n      error_page   500 502 503 504  /50x.html;\n      location = /50x.html &#123;\n          root   html;\n      &#125;\n  &#125;\n</code></pre>\n<p>}<br />\n</code></pre></div>    </div></p>\n  </li>\n  <li>\n    <p>启动：  <br/>\n<code class=\"highlighter-rouge\">/usr/local/openresty/nginx/sbin/nginx -p /opt/app/lua/ -c /opt/work/nginx.conf </code>，-p指定代码的root目录，相当于prefix， -c 指定配置文件。</p>\n  </li>\n  <li>\n    <p>查看进程：  <br/>\n<code class=\"highlighter-rouge\">ps -ef|grep nginx</code></p>\n  </li>\n  <li>\n    <p>终止进程：  <br/>\n<code class=\"highlighter-rouge\">kill  进程id</code></p>\n  </li>\n  <li>如果觉得每次前面太长可以设置环境变量 。\n    <div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>  vi  /etc/profile\n<p>PATH=/usr/local/openresty/nginx/sbin:PATH\n  export PATH\n  或者\n  export PATH=/usr/local/openresty/nginx/sbin:PATH</p>\n<p>保存后执行 source /etc/profile  重新加载设置<br />\n</code></pre></div>    </div></p>\n  </li>\n  <li>测试，内部请求：curl 127.0.0.1,外部可以使用配置的域名，如果访问不了需要开放80端口。\n    <div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>  firewall-cmd --zone=public --add-port=80/tcp --permanent\n  firewall-cmd --reload\n</code></pre></div>    </div>\n  </li>\n  <li>重新加载文件,如果修改了文件 可以重新加载文件。  <br/>\n  <code class=\"highlighter-rouge\">/usr/local/openresty/nginx/sbin/nginx -c /usr/local/openresty/.../conf/nginx.conf -p /usr/local/.../ -s reload</code></li>\n</ul>\n<h2 id=\"结束\">结束</h2>","text":"OpenResty Lua 的使用 (一) 环境搭建 前言 开始学习Openresty Lua的使用,顺便也熟悉了下Nginx。 一、准备 Linux环境，我这里是在虚拟机安装的CentOS 7。 Openresty lua 安装包。 二、安装 安装 wget 命令用以下载使用，...","link":"","photos":[],"count_time":{"symbolsCount":"7.6k","symbolsTime":"7 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%89%8D%E8%A8%80\"><span class=\"toc-text\">前言</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%80%E5%87%86%E5%A4%87\"><span class=\"toc-text\">一、准备</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E5%AE%89%E8%A3%85\"><span class=\"toc-text\">二、安装</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%89%E5%90%AF%E5%8A%A8\"><span class=\"toc-text\">三、启动</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%BB%93%E6%9D%9F\"><span class=\"toc-text\">结束</span></a></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Wireshark+Lua自动解析自定义协议数据报","uid":"6810eca09bcc54d978cf8538c2cb16d9","slug":"zl/2016-01-01-365_Wireshark+Lua自动解析自定义协议数据报","date":"2024-04-03T03:47:35.646Z","updated":"2024-04-03T03:47:35.647Z","comments":true,"path":"api/articles/zl/2016-01-01-365_Wireshark+Lua自动解析自定义协议数据报.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":" 自定义协议格式 原始抓包结果 编写Lua脚本 在Wireshark中加载Lua脚本 在Wireshark中查看解析结果 参考文献 在平时的工作中，经常需要根据接口文档进行开发，在调试时一般都会借助WireShark抓包进行分析，但是当协议较为复杂时，需要根据字节数手动计算进行解...","link":"","photos":[],"count_time":{"symbolsCount":"9.9k","symbolsTime":"9 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"lua学习笔记（六）","uid":"159171ab2db2dcc9927fd3c20c0193d9","slug":"zl/2016-01-01-363_lua学习笔记（六）","date":"2024-04-03T03:47:35.644Z","updated":"2024-04-03T03:47:35.645Z","comments":true,"path":"api/articles/zl/2016-01-01-363_lua学习笔记（六）.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"Lua面向对象封装123456789101112131415161718192021222324252627282930People={isHumen=true} -- 此处定义的元素都是相当于C++的静态成员变量-- 基类方法newfunction (o,n,a) o=o or...","link":"","photos":[],"count_time":{"symbolsCount":"1k","symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}