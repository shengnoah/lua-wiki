{"title":"Lua编程2之数据类型","uid":"0511ba373e6efe0ed64cccc5235edd14","slug":"zl/2016-01-01-232_Lua编程2之数据类型","date":"2024-04-03T03:47:33.102Z","updated":"2024-04-03T03:47:33.102Z","comments":true,"path":"api/articles/zl/2016-01-01-232_Lua编程2之数据类型.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<pre><code>    &lt;p&gt;思考并回答以下问题：&lt;br&gt;1.nil 的“删除”作用怎么理解？如何删除table里的一个值？&lt;br&gt;2.怎么比较一个变量是否为nil？&lt;br&gt;3.数字零和空字符串为真吗？假有哪些？&lt;br&gt;4.如何表示块字符串？如何避免误解析的发生？&lt;br&gt;5.显式转换函数有哪些？&lt;br&gt;6.如何计算字符串的长度？&lt;br&gt;7.如何构建数组？第一个索引是0吗？table会固定长度吗？&lt;br&gt;8.a = &#123;&#125; a[1000] = 1 和table.maxn()之间有什么关系？&lt;br&gt;9.function和int类型一样怎么理解？C#中的delegate，class和int一样怎么理解？&lt;br&gt;10.lua中如何进行字符串连接？&lt;br&gt;11.Lua将nil作为界定数据结尾的标志会导致什么问题？&lt;/p&gt;\n</code></pre>\n<p>Lua是一种动态类型的语言，变量本身没有类型，只有值拥有类型。Lua语言本身没有提供类型定义的语法，每个值都“携带”了它自身的类型信息。</p>\n<p>在Lua中有8种基础类型，分别是：nil、boolean、number、string、userdata、function、thread和table。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\"><center>** 数据类型 ** </center></th>\n<th align=\"left\"><center>** 描述 ** </center></th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">nil</td>\n<td align=\"left\">这个最简单，只有值nil属于该类型，表示一个无效值（在条件表达式中相当于false）。</td>\n</tr>\n<tr>\n<td align=\"left\">boolean</td>\n<td align=\"left\">包含两个值：false和true。</td>\n</tr>\n<tr>\n<td align=\"left\">number</td>\n<td align=\"left\">表示双精度类型的实浮点数</td>\n</tr>\n<tr>\n<td align=\"left\">string</td>\n<td align=\"left\">字符串由一对双引号或单引号来表示</td>\n</tr>\n<tr>\n<td align=\"left\">function</td>\n<td align=\"left\">由 C 或 Lua 编写的函数</td>\n</tr>\n<tr>\n<td align=\"left\">userdata</td>\n<td align=\"left\">表示任意存储在变量中的C数据结构</td>\n</tr>\n<tr>\n<td align=\"left\">thread</td>\n<td align=\"left\">表示执行的独立线路，用于执行协同进程</td>\n</tr>\n<tr>\n<td align=\"left\">table</td>\n<td align=\"left\"><span style=\"color:red\">Lua 中的表（table）其实是一个“关联数组”（associative arrays），数组的索引可以是数字或者是字符串。</span>在 Lua 里，table 的创建是通过“构造表达式”来完成，最简单构造表达式是{}，用来创建一个空表。</td>\n</tr>\n</tbody></table>\n<p>我们可以通过type函数获得变量的类型信息，该类型信息将以字符串的形式返回。如：</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(<span class=\"string\">\"hello world\"</span>)) </span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(<span class=\"number\">10.4</span>)) </span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(<span class=\"built_in\">print</span>)) </span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(<span class=\"literal\">true</span>)) </span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(<span class=\"literal\">nil</span>)) <span class=\"comment\">--nil</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(<span class=\"built_in\">type</span>(X))) <span class=\"comment\">--string</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"nil（空）\"><a href=\"https://chebincarl.github.io/#nil%EF%BC%88%E7%A9%BA%EF%BC%89\" class=\"headerlink\" title=\"nil（空）\"></a><span style=\"color:#EF7060;\">nil（空）</span></h2><p>nil是一种类型，它只有一个值nil，它的主要功能是区别其他任何值。就像之前所说的，<span style=\"color:red\">一个全局变量在第一次赋值前的默认值的默认值就是nil，将nil赋予一个全局变量等同于删除它</span>。Lua将nil用于表示一种“无效值”的情况，类似C#中的null。</p>\n<p>例如打印一个没有赋值的变量，便会输出一个 nil 值：</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(a)) <span class=\"comment\">-- nil</span></span><br></pre></td></tr></table></figure>\n<p>对于全局变量和 table，nil 还有一个“删除”作用，给全局变量或者 table 表里的变量赋一个 nil 值，等同于把它们删掉，如下面代码：</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tab1 = { key1 = <span class=\"string\">\"val1\"</span>, key2 = <span class=\"string\">\"val2\"</span>, <span class=\"string\">\"val3\"</span> }</span><br><span class=\"line\"><span class=\"keyword\">for</span> k, v <span class=\"keyword\">in</span> <span class=\"built_in\">pairs</span>(tab1) <span class=\"keyword\">do</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(k .. <span class=\"string\">\" - \"</span> .. v)</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">tab1.key1 = <span class=\"literal\">nil</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> k, v <span class=\"keyword\">in</span> <span class=\"built_in\">pairs</span>(tab1) <span class=\"keyword\">do</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(k .. <span class=\"string\">\" - \"</span> .. v)</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<p>nil 作比较时应该加上双引号 “”：</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">type</span>(X) <span class=\"comment\">--nil</span></span><br><span class=\"line\"><span class=\"built_in\">type</span>(X)==<span class=\"literal\">nil</span> <span class=\"comment\">--false</span></span><br><span class=\"line\"><span class=\"built_in\">type</span>(X)==<span class=\"string\">\"nil\"</span> <span class=\"comment\">--true</span></span><br></pre></td></tr></table></figure>\n<p><span style=\"color:red\">type(X)==nil</span> 结果为 false 的原因是因为 <span style=\"color:red\">type(type(X))==string</span>。</p>\n<h2 id=\"boolean（布尔）\"><a href=\"https://chebincarl.github.io/#boolean%EF%BC%88%E5%B8%83%E5%B0%94%EF%BC%89\" class=\"headerlink\" title=\"boolean（布尔）\"></a><span style=\"color:#EF7060;\">boolean（布尔）</span></h2><p>boolean 类型只有两个可选值：true（真） 和 false（假），Lua 把 false 和 nil 看作是“假”，其他的都为“真”，如数字零和空字符串也为真，这点需要注意。</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(<span class=\"literal\">true</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(<span class=\"literal\">false</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(<span class=\"literal\">nil</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"literal\">false</span> <span class=\"keyword\">or</span> <span class=\"literal\">nil</span> <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"至少有一个是 true\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"false 和 nil 都为 false!\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<p>以上代码执行结果如下：</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">boolean</span><br><span class=\"line\">boolean</span><br><span class=\"line\"><span class=\"literal\">nil</span></span><br><span class=\"line\"><span class=\"literal\">false</span> 和 <span class=\"literal\">nil</span> 都为 <span class=\"literal\">false</span>!</span><br></pre></td></tr></table></figure>\n<h2 id=\"number（数字）\"><a href=\"https://chebincarl.github.io/#number%EF%BC%88%E6%95%B0%E5%AD%97%EF%BC%89\" class=\"headerlink\" title=\"number（数字）\"></a><span style=\"color:#EF7060;\">number（数字）</span></h2><p><span style=\"color:red\">Lua 默认只有一种 number 类型 – double（双精度）类型（默认类型可以修改 luaconf.h 里的定义），以下几种写法都被看作是 number 类型</span>：</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(<span class=\"number\">2</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(<span class=\"number\">2.2</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(<span class=\"number\">0.2</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(<span class=\"number\">2e+1</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(<span class=\"number\">0.2e-1</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(<span class=\"number\">7.8263692594256e-06</span>))</span><br></pre></td></tr></table></figure>\n<p><span style=\"color:red\">Lua中没有专门的类型表示整数。</span></p>\n<h2 id=\"string（字符串）\"><a href=\"https://chebincarl.github.io/#string%EF%BC%88%E5%AD%97%E7%AC%A6%E4%B8%B2%EF%BC%89\" class=\"headerlink\" title=\"string（字符串）\"></a><span style=\"color:#EF7060;\">string（字符串）</span></h2><p>字符串由一对双引号或单引号来表示。</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string1 = <span class=\"string\">\"this is string1\"</span></span><br><span class=\"line\">string2 = <span class=\"string\">'this is string2'</span></span><br></pre></td></tr></table></figure>\n<p>Lua支持和C语言类似的字符转义序列，见下表：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\"><center>** 转义符 ** </center></th>\n<th align=\"left\"><center>** 描述 ** </center></th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">a</td>\n<td align=\"left\">响铃</td>\n</tr>\n<tr>\n<td align=\"left\">b</td>\n<td align=\"left\">退格</td>\n</tr>\n<tr>\n<td align=\"left\">n</td>\n<td align=\"left\">换行</td>\n</tr>\n<tr>\n<td align=\"left\">r</td>\n<td align=\"left\">回车</td>\n</tr>\n<tr>\n<td align=\"left\">t</td>\n<td align=\"left\">水平Tab</td>\n</tr>\n<tr>\n<td align=\"left\"></td>\n<td align=\"left\">反斜杠</td>\n</tr>\n<tr>\n<td align=\"left\">\"</td>\n<td align=\"left\">双引号</td>\n</tr>\n<tr>\n<td align=\"left\">'</td>\n<td align=\"left\">单引号</td>\n</tr>\n</tbody></table>\n<p><span style=\"color:red\">也可以用 2 个方括号 “[[]]” 来表示”一块”字符串，这个时候会禁用里面的转义字符</span>。</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">html = <span class=\"string\">[[</span></span><br><span class=\"line\"><span class=\"string\">&lt;html&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;head&gt;&lt;/head&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;body&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;a href=\"http://www.runoob.com/\"&gt;菜鸟教程&lt;/a&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;/body&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;/html&gt;</span></span><br><span class=\"line\"><span class=\"string\">]]</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(html)</span><br></pre></td></tr></table></figure>\n<p>如果两个方括号中包含这样的内容：<span style=\"color:red\">a = b[c[i]]</span>，这样将会导致Lua的误解析，因此在这种情况下，我们可以将其改为<span style=\"color:red\">[===[ </span>和<span style=\"color:red\"> ]===]</span>的形式，从而避免了误解析的发生。</p>\n<p><span style=\"color:red\">在对一个数字字符串上进行算术操作时，Lua 会尝试将这个数字字符串转成一个数字，这和C#中的加号会进行字符串拼接不同</span>:</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"2\"</span> + <span class=\"number\">6</span>) <span class=\"comment\">--8.0</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"2\"</span> + <span class=\"string\">\"6\"</span>) <span class=\"comment\">--8.0</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"2 + 6\"</span>) <span class=\"comment\">-- 2 + 6</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"-2e2\"</span> * <span class=\"string\">\"6\"</span>) <span class=\"comment\">-- -1200.0</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"error\"</span> + <span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"comment\">--[[</span></span><br><span class=\"line\"><span class=\"comment\">stdin:1: attempt to perform arithmetic on a string value</span></span><br><span class=\"line\"><span class=\"comment\">stack traceback:</span></span><br><span class=\"line\"><span class=\"comment\">    stdin:1: in main chunk</span></span><br><span class=\"line\"><span class=\"comment\">    [C]: in ?</span></span><br><span class=\"line\"><span class=\"comment\"> --]]</span></span><br></pre></td></tr></table></figure>\n<p>以上代码中”error” + 1执行报错了，** 字符串连接应该使用的是 .. **，如：</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"a\"</span> .. <span class=\"string\">'b'</span>) <span class=\"comment\">--ab</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"number\">157</span> .. <span class=\"number\">428</span>) <span class=\"comment\">--157428</span></span><br></pre></td></tr></table></figure>\n<p>尽管Lua提供了这种自动转换的功能，为了避免一些不可预测的行为发生，特别是因为Lua版本升级而导致的行为不一致现象。鉴于此，还是应该尽可能使用显式的转换，如字符串转数字的函数tonumber()，或者是数字转字符串的函数tostring()。对于前者，如果函数参数不能转换为数字，该函数返回nil。如：</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">line = <span class=\"string\">\"150.56\"</span></span><br><span class=\"line\">n = <span class=\"built_in\">tonumber</span>(line)</span><br><span class=\"line\"><span class=\"keyword\">if</span> n == <span class=\"literal\">nil</span> <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">error</span>(line .. <span class=\"string\">\" is not a valid number\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(n * <span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<p><span style=\"color:red\">使用 # 来计算字符串的长度，放在字符串前面</span>，如下实例：</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">len</span> = <span class=\"string\">\"hello world\"</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(#<span class=\"built_in\">len</span>) <span class=\"comment\">--11</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(#<span class=\"string\">\"hello world\"</span>) <span class=\"comment\">--11</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"table（表）\"><a href=\"https://chebincarl.github.io/#table%EF%BC%88%E8%A1%A8%EF%BC%89\" class=\"headerlink\" title=\"table（表）\"></a><span style=\"color:#EF7060;\">table（表）</span></h2><p>在 Lua 里，table 的创建是通过”构造表达式”来完成，最简单构造表达式是{}，用来创建一个空表。也可以在表里添加一些数据，直接初始化表:</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 创建一个空的 table</span></span><br><span class=\"line\"><span class=\"keyword\">local</span> tbl1 = {}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 直接初始表</span></span><br><span class=\"line\"><span class=\"keyword\">local</span> tbl2 = {<span class=\"string\">\"apple\"</span>, <span class=\"string\">\"pear\"</span>, <span class=\"string\">\"orange\"</span>, <span class=\"string\">\"grape\"</span>}</span><br></pre></td></tr></table></figure>\n<p>Lua 中的表（table）其实是一个”关联数组”（associative arrays），数组的索引可以为任意类型(nil除外)。类似C#中的Dictionary的Key-Value结构。</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = {}</span><br><span class=\"line\">a[<span class=\"string\">\"key\"</span>] = <span class=\"string\">\"value\"</span></span><br><span class=\"line\">key = <span class=\"number\">10</span></span><br><span class=\"line\">a[key] = <span class=\"number\">22</span></span><br><span class=\"line\">a[key] = a[key] + <span class=\"number\">11</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> k, v <span class=\"keyword\">in</span> <span class=\"built_in\">pairs</span>(a) <span class=\"keyword\">do</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(k .. <span class=\"string\">\" : \"</span> .. v)</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<p>脚本执行结果为：</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">key : value</span><br><span class=\"line\"><span class=\"number\">10</span> : <span class=\"number\">33</span></span><br></pre></td></tr></table></figure>\n<p>不同于其他语言的数组把 0 作为数组的初始索引，在 Lua 里表的默认初始索引一般以 1 开始。</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">local</span> tbl = {<span class=\"string\">\"apple\"</span>, <span class=\"string\">\"pear\"</span>, <span class=\"string\">\"orange\"</span>, <span class=\"string\">\"grape\"</span>}</span><br><span class=\"line\"><span class=\"keyword\">for</span> key, val <span class=\"keyword\">in</span> <span class=\"built_in\">pairs</span>(tbl) <span class=\"keyword\">do</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"Key\"</span>, key)</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<p>脚本执行结果为：</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Key    <span class=\"number\">1</span></span><br><span class=\"line\">Key    <span class=\"number\">2</span></span><br><span class=\"line\">Key    <span class=\"number\">3</span></span><br><span class=\"line\">Key    <span class=\"number\">4</span></span><br></pre></td></tr></table></figure>\n<p>table 不会固定长度大小，有新数据添加时 table 长度会自动增长，没初始的 table 都是 nil。</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a3 = {}</span><br><span class=\"line\"><span class=\"keyword\">for</span> i = <span class=\"number\">1</span>, <span class=\"number\">10</span> <span class=\"keyword\">do</span></span><br><span class=\"line\">    a3[i] = i</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\">a3[<span class=\"string\">\"key\"</span>] = <span class=\"string\">\"val\"</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(a3[<span class=\"string\">\"key\"</span>])</span><br><span class=\"line\"><span class=\"built_in\">print</span>(a3[<span class=\"string\">\"none\"</span>])</span><br></pre></td></tr></table></figure>\n<p>脚本执行结果为：</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">val</span><br><span class=\"line\"><span class=\"literal\">nil</span></span><br></pre></td></tr></table></figure>\n<p>在Lua中还提供了另外一种方法用于访问table中的值，见如下示例：</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a.x = <span class=\"number\">10</span>      <span class=\"comment\">--等同于a[\"x\"] = 10</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(a.x)    <span class=\"comment\">--等同于print(a[\"x\"])</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(a.y)    <span class=\"comment\">--等同于print(a[\"y\"])</span></span><br></pre></td></tr></table></figure>\n<p>由于数组实际上仍为一个table，所以对于数组大小的计算需要留意某些特殊的场景，如：</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = {}</span><br><span class=\"line\">a[<span class=\"number\">1000</span>] = <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<p>在上面的示例中，数组a中索引值为1–999的元素的值均为nil。<span style=\"color:red\">而Lua则将nil作为界定数据结尾的标志。</span>当一个数组含有“空隙”时，即中间含有nil值，长度操作符#会认为这些nil元素就是结尾标志。当然这肯定不是我们想要的结果。因此对于这些含有“空隙”的数组，我们可以通过函数table.maxn()返回table的最大正数索引值。如：</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = {}</span><br><span class=\"line\">a[<span class=\"number\">1000</span>] = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">table</span>.<span class=\"built_in\">maxn</span>(a))    <span class=\"comment\">-- 输出1000</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"function（函数）\"><a href=\"https://chebincarl.github.io/#function%EF%BC%88%E5%87%BD%E6%95%B0%EF%BC%89\" class=\"headerlink\" title=\"function（函数）\"></a><span style=\"color:#EF7060;\">function（函数）</span></h2><p>在Lua中，函数可以存储在变量中，可以通过参数传递其它函数，还可以作为其它函数的返回值。这种特性使语言具有了极大的灵活性。</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(n)</span></span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> n == <span class=\"number\">0</span> <span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> n * factorial1(n - <span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(factorial1(<span class=\"number\">5</span>))</span><br><span class=\"line\">factorial2 = factorial1</span><br><span class=\"line\"><span class=\"built_in\">print</span>(factorial2(<span class=\"number\">5</span>))</span><br></pre></td></tr></table></figure>\n<p>脚本执行结果为：</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">120</span></span><br><span class=\"line\"><span class=\"number\">120</span></span><br></pre></td></tr></table></figure>\n<p>function 可以以匿名函数（anonymous function）的方式通过参数传递:</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(tab,fun)</span></span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> k ,v <span class=\"keyword\">in</span> <span class=\"built_in\">pairs</span>(tab) <span class=\"keyword\">do</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(fun(k,v));</span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">tab={key1=<span class=\"string\">\"val1\"</span>,key2=<span class=\"string\">\"val2\"</span>};</span><br><span class=\"line\">testFun(tab,</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(key,val)</span></span><span class=\"comment\">--匿名函数</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> key..<span class=\"string\">\"=\"</span>..val;</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p>脚本执行结果为：</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">key1 = val1</span><br><span class=\"line\">key2 = val2</span><br></pre></td></tr></table></figure>\n<h2 id=\"thread（线程）\"><a href=\"https://chebincarl.github.io/#thread%EF%BC%88%E7%BA%BF%E7%A8%8B%EF%BC%89\" class=\"headerlink\" title=\"thread（线程）\"></a><span style=\"color:#EF7060;\">thread（线程）</span></h2><p>在 Lua 里，thread代表了单独线程的执行，并且用来实现lua里的协程（coroutine），类似Unity中的协程。它跟线程（thread）差不多，拥有自己独立的栈、局部变量和命令指针，可以跟其他协同进程共享全局变量和其他大部分东西。</p>\n<p>Lua的线程和操作系统的线程并不相关。Lua的协程支持所有的操作系统，即使那些不支持线程的操作系统也支持协程。</p>\n<h2 id=\"userdata（自定义类型）\"><a href=\"https://chebincarl.github.io/#userdata%EF%BC%88%E8%87%AA%E5%AE%9A%E4%B9%89%E7%B1%BB%E5%9E%8B%EF%BC%89\" class=\"headerlink\" title=\"userdata（自定义类型）\"></a><span style=\"color:#EF7060;\">userdata（自定义类型）</span></h2><p>userdata 是一种用户自定义数据，提供了将任意外部数据（通常是 struct 和 指针）存储在lua变量中的能力。一个userdata代表了一块内存数据。</p>\n<p>有两种userdata，一种是full userdata，是lua管理的一个对象，拥有一块内存区域；还有一种叫light userdata，是一个指针。</p>\n<p>在Lua中除了赋值和比较，没有其他针对userdata预先定义的操作，通常使用metatable对full userdata定义操作。userdata的值无法在lua中创建或者修改，只能通过C语言API，这也保证了和宿主进程数据的一致性。</p>","text":" &lt;p&gt;思考并回答以下问题：&lt;br&gt;1.nil 的“删除”作用怎么理解？如何删除table里的一个值？&lt;br&gt;2.怎么比较一个变量是否为nil？&lt;br&gt;3.数字零和空字符串为真吗？假有哪些？&lt;br&gt;4.如何表示块字符串？...","link":"","photos":[],"count_time":{"symbolsCount":"5.7k","symbolsTime":"5 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#nil%EF%BC%88%E7%A9%BA%EF%BC%89\"><span class=\"toc-text\">nil（空）</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#boolean%EF%BC%88%E5%B8%83%E5%B0%94%EF%BC%89\"><span class=\"toc-text\">boolean（布尔）</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#number%EF%BC%88%E6%95%B0%E5%AD%97%EF%BC%89\"><span class=\"toc-text\">number（数字）</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#string%EF%BC%88%E5%AD%97%E7%AC%A6%E4%B8%B2%EF%BC%89\"><span class=\"toc-text\">string（字符串）</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#table%EF%BC%88%E8%A1%A8%EF%BC%89\"><span class=\"toc-text\">table（表）</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#function%EF%BC%88%E5%87%BD%E6%95%B0%EF%BC%89\"><span class=\"toc-text\">function（函数）</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#thread%EF%BC%88%E7%BA%BF%E7%A8%8B%EF%BC%89\"><span class=\"toc-text\">thread（线程）</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#userdata%EF%BC%88%E8%87%AA%E5%AE%9A%E4%B9%89%E7%B1%BB%E5%9E%8B%EF%BC%89\"><span class=\"toc-text\">userdata（自定义类型）</span></a></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Lua 中的随机数","uid":"73feeba3e1d1ac59d590841c2286442d","slug":"zl/2016-01-01-234_Lua 中的随机数 ","date":"2024-04-03T03:47:33.102Z","updated":"2024-04-03T03:47:33.106Z","comments":true,"path":"api/articles/zl/2016-01-01-234_Lua 中的随机数 .json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":" &lt;p&gt;Lua 随机数算法用的是 libc 中的 &lt;code class=&quot;highlighter-rouge&quot;&gt;rand&lt;/code&gt;, 也就是 LCG。然而这个算法的随机性一般。尤其是在一些平台上，当随机种子变化非常小的...","link":"","photos":[],"count_time":{"symbolsCount":"2k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Lua 的标准输出与缓存","uid":"eb6769635061336dbbe2c0540f762f81","slug":"zl/2016-01-01-233_Lua 的标准输出与缓存 ","date":"2024-04-03T03:47:33.102Z","updated":"2024-04-03T03:47:33.102Z","comments":true,"path":"api/articles/zl/2016-01-01-233_Lua 的标准输出与缓存 .json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":" &lt;p&gt;最近我遇到了个奇怪的问题，我的一个 Lua 脚本需要通过 shell 的重定向将输出追加到一个日志文档中。但是那个 Lua 脚本的输出在日志文档里看来却不是实时的，输出的文本直到脚本结束时才能看到。&lt;/p&gt; 在 shell 下运行这个进程，是可以看...","link":"","photos":[],"count_time":{"symbolsCount":988,"symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}