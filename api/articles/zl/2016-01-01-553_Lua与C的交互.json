{"title":"Lua与C的交互","uid":"9885ce906fc09579da0955971d8ccae9","slug":"zl/2016-01-01-553_Lua与C的交互","date":"2024-04-03T03:47:35.818Z","updated":"2024-04-03T03:47:35.818Z","comments":true,"path":"api/articles/zl/2016-01-01-553_Lua与C的交互.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<h2 id=\"lua与c的交互\">Lua与C的交互</h2>\n<p>Lua是一个嵌入式的语言，它不仅可以是一个独立运行的程序，也可以是一个用来嵌入其它应用的程序库。</p>\n<p>C API是一个C代码与Lua进行交互的函数集，它由以下几部分构成：</p>\n<p>1、  读写Lua全局变量的函数；</p>\n<p>2、  调用Lua函数的函数；</p>\n<p>3、  运行Lua代码片段的函数；</p>\n<p>4、  注册C函数后可以在Lua中被调用的函数；</p>\n<p>在C和LUA之间交互的关键在于一个虚拟栈(virtual stack)，数据交互通过栈进行。操作数据时，首先将数据拷贝到栈上，然后获取数据，栈中的每个数据通过索引值进行定位，索引值为正时表示相对于栈底的偏移索引，索引值为负时表示相对于栈顶的偏移索引。索引值以1或 -1起始值，因此栈顶索引值永远为-1, 栈底索引值永远为1 。 “栈”相当于数据在Lua和C之间的中转地，每种数据都有相应的存取接口 。</p>\n<p>另外，还可以使用栈来保存临时变量。栈的使用解决了C和LUA之间两个不协调的问题：</p>\n<p>1、  Lua使用自动垃圾收集机制，而C要求显式的分配和释放内存；</p>\n<p>2、  Lua使用动态数据类型，而C使用静态类型；</p>\n<p>特别注意的是：</p>\n<p>1、每当Lua调用C函数时，C函数会使用一个局部栈，这个局部栈与之前的栈，以及其它正在调用的C函数使用的栈都是相互独立的。Lua和C就使用这个局部的栈进行数据交互。</p>\n<p>2、当Lua调用C时，栈至少包含LUA_MINSTACK（20）个位置，程序员也可以使用lua_checkstack函数来增加栈的大小。</p>\n<p>3、使用伪索引（Pseudo-Indices）来表示一些不在栈中的数据，比如thread环境、C函数环境、registry、C闭包的upvalues。</p>\n<p>thread环境（全局变量也在这里），使用伪索引 LUA_GLOBALSINDEX；</p>\n<p>运行中的C函数环境，使用伪索引 LUA_ENVIRONINDEX；</p>\n<p>Registry，使用伪索引 LUA_REGISTRYINDEX；</p>\n<p>C闭包的upvalues，可以使用lua_upvalueindex(n)来访问第n个upvalue；</p>\n<p>原文链接：\n<a href=\"https://www.cnblogs.com/chenny7/p/3993456.html\">Lua 与 C 的交互</a></p>\n<pre><code>        &lt;footer class=&quot;article-footer&quot;&gt;\n&lt;div class=&quot;authorimage&quot;&gt;\n    &lt;img src=&quot;https://HappyMantou.github.io//assets/img/avatar.JPG&quot; alt=&quot;My Avatar&quot; class=&quot;img-circle&quot;/&gt;\n&lt;/div&gt;\n</code></pre>\n</footer>","text":"Lua与C的交互 Lua是一个嵌入式的语言，它不仅可以是一个独立运行的程序，也可以是一个用来嵌入其它应用的程序库。 C API是一个C代码与Lua进行交互的函数集，它由以下几部分构成： 1、 读写Lua全局变量的函数； 2、 调用Lua函数的函数； 3、 运行Lua代码片段的函数...","link":"","photos":[],"count_time":{"symbolsCount":"1.1k","symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#lua%E4%B8%8Ec%E7%9A%84%E4%BA%A4%E4%BA%92\"><span class=\"toc-text\">Lua与C的交互</span></a></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Lua中的协程","uid":"4d0a91799dda866fbb32a60943831f1f","slug":"zl/2016-01-01-552_Lua中的协程","date":"2024-04-03T03:47:35.818Z","updated":"2024-04-03T03:47:35.818Z","comments":true,"path":"api/articles/zl/2016-01-01-552_Lua中的协程.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"Lua中的协程和其他变量一样，都是第一类值（first-class alue），可以被保存在变量中，可以被作为参数传递，可以被函数返回。 协程有4种状态：挂起（suspended），运行（running），死亡（dead）和正常（normal）。 Lua为协程提供了3个基础接口：...","link":"","photos":[],"count_time":{"symbolsCount":"2.3k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Evaluating","uid":"8cdca36e4e726105283a773513b5e4a0","slug":"zl/2016-01-01-554_Evaluating","date":"2024-04-03T03:47:35.818Z","updated":"2024-04-03T03:47:35.819Z","comments":true,"path":"api/articles/zl/2016-01-01-554_Evaluating.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"This paper proposed some evaluating guidelines from 5 aspects, including multiple runs, performance measurement, time out(running time for o...","link":"","photos":[],"count_time":{"symbolsCount":"2k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}