{"title":"nginx+lua+kafka实现日志统一收集汇总","uid":"3c02d14da55f3251895a502fc2ba732a","slug":"zl/2016-01-01-167_nginx+lua+kafka实现日志统一收集汇总","date":"2024-04-03T03:47:33.054Z","updated":"2024-04-03T03:47:33.055Z","comments":true,"path":"api/articles/zl/2016-01-01-167_nginx+lua+kafka实现日志统一收集汇总.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<h3 id=\"一-场景描述\"><a href=\"#一-场景描述\" class=\"headerlink\" title=\"一:场景描述\"></a>一:场景描述</h3><p>对于线上大流量服务或者需要上报日志的nginx服务，每天会产生大量的日志，这些日志非常有价值。可用于计数上报、用户行为分析、接口质量、性能监控等需求。但传统nginx记录日志的方式数据会散落在各自nginx上，而且大流量日志本身对磁盘也是一种冲击。</p>\n<p>我们需要把这部分nginx日志统一收集汇总起来,收集过程和结果需要满足如下需求:</p>\n<ul>\n<li>支持不同业务获取数据,如监控业务，数据分析统计业务，推荐业务等。</li>\n<li>数据实时性</li>\n<li>高性能保证</li>\n</ul>\n<h3 id=\"二-技术方案\"><a href=\"#二-技术方案\" class=\"headerlink\" title=\"二:技术方案\"></a>二:技术方案</h3><p>得益于openresty和kafka的高性能，我们可以非常轻量高效的实现当前需求，架构如下:</p>\n<p><img src=\"https://img.dazhuanlan.com/2019/11/26/5ddd23983b88b.png\" alt=\"\"/></p>\n<p>方案描述:</p>\n<ul>\n<li>1:线上请求打向nginx后，使用lua完成日志整理:如统一日志格式，过滤无效请求，分组等。</li>\n<li>2:根据不同业务的nginx日志,划分不同的topic。</li>\n<li>3:lua实现producter异步发送到kafka集群。</li>\n<li>4:对不同日志感兴趣的业务组实时消费获取日志数据。</li>\n</ul>\n<h3 id=\"三-相关技术\"><a href=\"#三-相关技术\" class=\"headerlink\" title=\"三:相关技术\"></a>三:相关技术</h3><ul>\n<li>openresty: <a href=\"http://openresty.org\" target=\"_blank\" rel=\"external noopener noreferrer\">http://openresty.org</a></li>\n<li>kafka: <a href=\"http://kafka.apache.org\" target=\"_blank\" rel=\"external noopener noreferrer\">http://kafka.apache.org</a></li>\n<li>lua-resty-kafka: <a href=\"https://github.com/doujiang24/lua-resty-kafka\" target=\"_blank\" rel=\"external noopener noreferrer\">https://github.com/doujiang24/lua-resty-kafka</a></li>\n</ul>\n<h3 id=\"四-安装配置\"><a href=\"#四-安装配置\" class=\"headerlink\" title=\"四:安装配置\"></a>四:安装配置</h3><p>为了简单直接，我们采用单机形式配置部署，集群情况类似。</p>\n<h4 id=\"1-准备openresty依赖\"><a href=\"#1-准备openresty依赖\" class=\"headerlink\" title=\"1.准备openresty依赖:\"></a>1.准备openresty依赖:</h4><figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">apt-get install libreadline-dev libncurses5-dev libpcre3-dev libssl-dev perl make build-essential</span><br/></pre></td></tr></tbody></table></figure>\n<p>或者:</p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">yum install readline-devel pcre-devel openssl-devel gcc</span><br/></pre></td></tr></tbody></table></figure>\n<h4 id=\"2-安装编译openresty\"><a href=\"#2-安装编译openresty\" class=\"headerlink\" title=\"2. 安装编译openresty:\"></a>2. 安装编译openresty:</h4><h5 id=\"1-安装openresty\"><a href=\"#1-安装openresty\" class=\"headerlink\" title=\"(1):安装openresty:\"></a>(1):安装openresty:</h5><figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">cd /opt/nginx/ # 安装文件所在目录  </span><br/><span class=\"line\">wget https://openresty.org/download/openresty-1.9.7.4.tar.gz  </span><br/><span class=\"line\">tar -xzf openresty-1.9.7.4.tar.gz /opt/nginx/</span><br/></pre></td></tr></tbody></table></figure>\n<p>配置:<br/>指定目录为/opt/openresty,默认在/usr/local。<br/></p><figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">./configure --prefix=/opt/openresty   </span><br/><span class=\"line\">            --with-luajit   </span><br/><span class=\"line\">            --without-http_redis2_module   </span><br/><span class=\"line\">            --with-http_iconv_module  </span><br/><span class=\"line\">make  </span><br/><span class=\"line\">make install</span><br/></pre></td></tr></tbody></table></figure><p></p>\n<h4 id=\"3-安装lua-resty-kafka\"><a href=\"#3-安装lua-resty-kafka\" class=\"headerlink\" title=\"3.安装lua-resty-kafka\"></a>3.安装lua-resty-kafka</h4><p>下载lua-resty-kafka:<br/></p><figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://github.com/doujiang24/lua-resty-kafka/archive/master.zip  </span><br/><span class=\"line\">unzip lua-resty-kafka-master.zip -d /opt/nginx/</span><br/></pre></td></tr></tbody></table></figure><p></p>\n<p>拷贝lua-resty-kafka到openresty<br/></p><figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir /opt/openresty/lualib/kafka  </span><br/><span class=\"line\">cp -rf /opt/nginx/lua-resty-kafka-master/lib/resty /opt/openresty/lualib/kafka/</span><br/></pre></td></tr></tbody></table></figure><p></p>\n<h4 id=\"4-安装单机kafka\"><a href=\"#4-安装单机kafka\" class=\"headerlink\" title=\"4:安装单机kafka\"></a>4:安装单机kafka</h4><figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">cd /opt/nginx/  </span><br/><span class=\"line\">wget http://apache.fayea.com/kafka/0.9.0.1/kafka_2.10-0.9.0.1.tgz  </span><br/><span class=\"line\">tar xvf kafka_2.10-0.9.0.1.tgz</span><br/></pre></td></tr></tbody></table></figure>\n<p>开启单机zookeeper<br/></p><figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">nohup sh bin/zookeeper-server-start.sh config/zookeeper.properties &gt; ./zk.log 2&gt;&amp;1 &amp;</span><br/></pre></td></tr></tbody></table></figure><p></p>\n<p>绑定broker ip,必须绑定<br/>在config/servier.properties下修改host.name<br/></p><figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">#host.name={your_server_ip}</span><br/></pre></td></tr></tbody></table></figure><p></p>\n<p>启动kafka服务<br/></p><figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">nohup sh bin/kafka-server-start.sh config/server.properties &gt; ./server.log 2&gt;&amp;1 &amp;</span><br/></pre></td></tr></tbody></table></figure><p></p>\n<p>创建测试topic  </p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">sh bin/kafka-topics.sh --zookeeper localhost:2181 --create --topic test1 --partitions 1 --replication-factor 1</span><br/></pre></td></tr></tbody></table></figure>\n<h3 id=\"五-配置运行\"><a href=\"#五-配置运行\" class=\"headerlink\" title=\"五:配置运行\"></a>五:配置运行</h3><p>开发编辑/opt/openresty/nginx/conf/nginx.conf 实现kafka记录nginx日志功能，源码如下:</p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/><span class=\"line\">9</span><br/><span class=\"line\">10</span><br/><span class=\"line\">11</span><br/><span class=\"line\">12</span><br/><span class=\"line\">13</span><br/><span class=\"line\">14</span><br/><span class=\"line\">15</span><br/><span class=\"line\">16</span><br/><span class=\"line\">17</span><br/><span class=\"line\">18</span><br/><span class=\"line\">19</span><br/><span class=\"line\">20</span><br/><span class=\"line\">21</span><br/><span class=\"line\">22</span><br/><span class=\"line\">23</span><br/><span class=\"line\">24</span><br/><span class=\"line\">25</span><br/><span class=\"line\">26</span><br/><span class=\"line\">27</span><br/><span class=\"line\">28</span><br/><span class=\"line\">29</span><br/><span class=\"line\">30</span><br/><span class=\"line\">31</span><br/><span class=\"line\">32</span><br/><span class=\"line\">33</span><br/><span class=\"line\">34</span><br/><span class=\"line\">35</span><br/><span class=\"line\">36</span><br/><span class=\"line\">37</span><br/><span class=\"line\">38</span><br/><span class=\"line\">39</span><br/><span class=\"line\">40</span><br/><span class=\"line\">41</span><br/><span class=\"line\">42</span><br/><span class=\"line\">43</span><br/><span class=\"line\">44</span><br/><span class=\"line\">45</span><br/><span class=\"line\">46</span><br/><span class=\"line\">47</span><br/><span class=\"line\">48</span><br/><span class=\"line\">49</span><br/><span class=\"line\">50</span><br/><span class=\"line\">51</span><br/><span class=\"line\">52</span><br/><span class=\"line\">53</span><br/><span class=\"line\">54</span><br/><span class=\"line\">55</span><br/><span class=\"line\">56</span><br/><span class=\"line\">57</span><br/><span class=\"line\">58</span><br/><span class=\"line\">59</span><br/><span class=\"line\">60</span><br/><span class=\"line\">61</span><br/><span class=\"line\">62</span><br/><span class=\"line\">63</span><br/><span class=\"line\">64</span><br/><span class=\"line\">65</span><br/><span class=\"line\">66</span><br/><span class=\"line\">67</span><br/><span class=\"line\">68</span><br/><span class=\"line\">69</span><br/><span class=\"line\">70</span><br/><span class=\"line\">71</span><br/><span class=\"line\">72</span><br/><span class=\"line\">73</span><br/><span class=\"line\">74</span><br/><span class=\"line\">75</span><br/><span class=\"line\">76</span><br/><span class=\"line\">77</span><br/><span class=\"line\">78</span><br/><span class=\"line\">79</span><br/><span class=\"line\">80</span><br/><span class=\"line\">81</span><br/><span class=\"line\">82</span><br/><span class=\"line\">83</span><br/><span class=\"line\">84</span><br/><span class=\"line\">85</span><br/><span class=\"line\">86</span><br/><span class=\"line\">87</span><br/><span class=\"line\">88</span><br/><span class=\"line\">89</span><br/><span class=\"line\">90</span><br/><span class=\"line\">91</span><br/><span class=\"line\">92</span><br/><span class=\"line\">93</span><br/><span class=\"line\">94</span><br/><span class=\"line\">95</span><br/><span class=\"line\">96</span><br/><span class=\"line\">97</span><br/><span class=\"line\">98</span><br/><span class=\"line\">99</span><br/><span class=\"line\">100</span><br/><span class=\"line\">101</span><br/><span class=\"line\">102</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">worker_processes  12;  </span><br/><span class=\"line\">   </span><br/><span class=\"line\">events {  </span><br/><span class=\"line\">    use epoll;  </span><br/><span class=\"line\">    worker_connections  65535;  </span><br/><span class=\"line\">}  </span><br/><span class=\"line\">   </span><br/><span class=\"line\">http {  </span><br/><span class=\"line\">    include       mime.types;  </span><br/><span class=\"line\">    default_type  application/octet-stream;  </span><br/><span class=\"line\">    sendfile        on;  </span><br/><span class=\"line\">    keepalive_timeout  0;  </span><br/><span class=\"line\">    gzip on;  </span><br/><span class=\"line\">    gzip_min_length  1k;  </span><br/><span class=\"line\">    gzip_buffers     4 8k;  </span><br/><span class=\"line\">    gzip_http_version 1.1;  </span><br/><span class=\"line\">    gzip_types       text/plain application/x-javascript text/css application/xml application/X-JSON;  </span><br/><span class=\"line\">    charset UTF-8;  </span><br/><span class=\"line\">    # 配置后端代理服务  </span><br/><span class=\"line\">    upstream rc{  </span><br/><span class=\"line\">        server 10.10.*.15:8080 weight=5 max_fails=3;  </span><br/><span class=\"line\">        server 10.10.*.16:8080 weight=5 max_fails=3;  </span><br/><span class=\"line\">        server 10.16.*.54:8080 weight=5 max_fails=3;  </span><br/><span class=\"line\">        server 10.16.*.55:8080 weight=5 max_fails=3;  </span><br/><span class=\"line\">        server 10.10.*.113:8080 weight=5 max_fails=3;  </span><br/><span class=\"line\">        server 10.10.*.137:8080 weight=6 max_fails=3;  </span><br/><span class=\"line\">        server 10.10.*.138:8080 weight=6 max_fails=3;  </span><br/><span class=\"line\">        server 10.10.*.33:8080 weight=4 max_fails=3;  </span><br/><span class=\"line\">        # 最大长连数  </span><br/><span class=\"line\">        keepalive 32;  </span><br/><span class=\"line\">    }  </span><br/><span class=\"line\">    # 配置lua依赖库地址  </span><br/><span class=\"line\">    lua_package_path &#34;/opt/openresty/lualib/kafka/?.lua;;&#34;;  </span><br/><span class=\"line\">   </span><br/><span class=\"line\">    server {  </span><br/><span class=\"line\">        listen       80;  </span><br/><span class=\"line\">        server_name  localhost;  </span><br/><span class=\"line\">        location /favicon.ico {  </span><br/><span class=\"line\">            root   html;  </span><br/><span class=\"line\">                index  index.html index.htm;  </span><br/><span class=\"line\">        }  </span><br/><span class=\"line\">        location / {  </span><br/><span class=\"line\">            proxy_connect_timeout 8;  </span><br/><span class=\"line\">            proxy_send_timeout 8;  </span><br/><span class=\"line\">            proxy_read_timeout 8;  </span><br/><span class=\"line\">            proxy_buffer_size 4k;  </span><br/><span class=\"line\">            proxy_buffers 512 8k;  </span><br/><span class=\"line\">            proxy_busy_buffers_size 8k;  </span><br/><span class=\"line\">            proxy_temp_file_write_size 64k;  </span><br/><span class=\"line\">            proxy_next_upstream http_500 http_502  http_503 http_504  error timeout invalid_header;  </span><br/><span class=\"line\">            root   html;  </span><br/><span class=\"line\">            index  index.html index.htm;  </span><br/><span class=\"line\">            proxy_pass http://rc;  </span><br/><span class=\"line\">            proxy_http_version 1.1;  </span><br/><span class=\"line\">            proxy_set_header Connection &#34;&#34;;  </span><br/><span class=\"line\">            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;  </span><br/><span class=\"line\">            # 使用log_by_lua 包含lua代码,因为log_by_lua指令运行在请求最后且不影响proxy_pass机制  </span><br/><span class=\"line\">            log_by_lua &#39;  </span><br/><span class=\"line\">                -- 引入lua所有api  </span><br/><span class=\"line\">                local cjson = require &#34;cjson&#34;  </span><br/><span class=\"line\">                local producer = require &#34;resty.kafka.producer&#34;  </span><br/><span class=\"line\">                -- 定义kafka broker地址，ip需要和kafka的host.name配置一致  </span><br/><span class=\"line\">                local broker_list = {  </span><br/><span class=\"line\">                    { host = &#34;10.10.78.52&#34;, port = 9092 },  </span><br/><span class=\"line\">                }  </span><br/><span class=\"line\">                -- 定义json便于日志数据整理收集  </span><br/><span class=\"line\">                local log_json = {}  </span><br/><span class=\"line\">                log_json[&#34;uri&#34;]=ngx.var.uri  </span><br/><span class=\"line\">                log_json[&#34;args&#34;]=ngx.var.args  </span><br/><span class=\"line\">                log_json[&#34;host&#34;]=ngx.var.host  </span><br/><span class=\"line\">                log_json[&#34;request_body&#34;]=ngx.var.request_body  </span><br/><span class=\"line\">                log_json[&#34;remote_addr&#34;] = ngx.var.remote_addr  </span><br/><span class=\"line\">                log_json[&#34;remote_user&#34;] = ngx.var.remote_user  </span><br/><span class=\"line\">                log_json[&#34;time_local&#34;] = ngx.var.time_local  </span><br/><span class=\"line\">                log_json[&#34;status&#34;] = ngx.var.status  </span><br/><span class=\"line\">                log_json[&#34;body_bytes_sent&#34;] = ngx.var.body_bytes_sent  </span><br/><span class=\"line\">                log_json[&#34;http_referer&#34;] = ngx.var.http_referer  </span><br/><span class=\"line\">                log_json[&#34;http_user_agent&#34;] = ngx.var.http_user_agent  </span><br/><span class=\"line\">                log_json[&#34;http_x_forwarded_for&#34;] = ngx.var.http_x_forwarded_for  </span><br/><span class=\"line\">                log_json[&#34;upstream_response_time&#34;] = ngx.var.upstream_response_time  </span><br/><span class=\"line\">                log_json[&#34;request_time&#34;] = ngx.var.request_time  </span><br/><span class=\"line\">                -- 转换json为字符串  </span><br/><span class=\"line\">                local message = cjson.encode(log_json);  </span><br/><span class=\"line\">                -- 定义kafka异步生产者  </span><br/><span class=\"line\">                local bp = producer:new(broker_list, { producer_type = &#34;async&#34; })  </span><br/><span class=\"line\">                -- 发送日志消息,send第二个参数key,用于kafka路由控制:  </span><br/><span class=\"line\">                -- key为nill(空)时，一段时间向同一partition写入数据  </span><br/><span class=\"line\">                -- 指定key，按照key的hash写入到对应的partition  </span><br/><span class=\"line\">                local ok, err = bp:send(&#34;test1&#34;, nil, message)  </span><br/><span class=\"line\">   </span><br/><span class=\"line\">                if not ok then  </span><br/><span class=\"line\">                    ngx.log(ngx.ERR, &#34;kafka send err:&#34;, err)  </span><br/><span class=\"line\">                    return  </span><br/><span class=\"line\">                end  </span><br/><span class=\"line\">            &#39;;  </span><br/><span class=\"line\">        }  </span><br/><span class=\"line\">        error_page   500 502 503 504  /50x.html;  </span><br/><span class=\"line\">        location = /50x.html {  </span><br/><span class=\"line\">            root   html;  </span><br/><span class=\"line\">        }  </span><br/><span class=\"line\">    }  </span><br/><span class=\"line\">}</span><br/></pre></td></tr></tbody></table></figure>\n<h3 id=\"六-检测-amp-运行\"><a href=\"#六-检测-amp-运行\" class=\"headerlink\" title=\"六:检测&amp;运行\"></a>六:检测&amp;运行</h3><p>1.检测配置,只检测nginx配置是否正确，lua错误日志在nginx的error.log文件中<br/></p><figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">./nginx -t /opt/openresty/nginx/conf/nginx.conf</span><br/></pre></td></tr></tbody></table></figure><p></p>\n<p>2.启动  </p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">./nginx -c /opt/openresty/nginx/conf/nginx.conf</span><br/></pre></td></tr></tbody></table></figure>\n<p>3.重启  </p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">./nginx -s reload</span><br/></pre></td></tr></tbody></table></figure>\n<h3 id=\"七-测试\"><a href=\"#七-测试\" class=\"headerlink\" title=\"七:测试\"></a>七:测试</h3><h4 id=\"1-使用任意http请求发送给当前nginx，如\"><a href=\"#1-使用任意http请求发送给当前nginx，如\" class=\"headerlink\" title=\"1:使用任意http请求发送给当前nginx，如:\"></a>1:使用任意http请求发送给当前nginx，如:</h4><figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">http://10.10.78.52/m/personal/AC8E3BC7-6130-447B-A9D6-DF11CB74C3EF/rc/v1?passport=83FBC7337D681E679FFBA1B913E22A0D@qq.sohu.com&amp;page=2&amp;size=10</span><br/></pre></td></tr></tbody></table></figure>\n<h4 id=\"2-查看upstream代理是否工作正常\"><a href=\"#2-查看upstream代理是否工作正常\" class=\"headerlink\" title=\"2:查看upstream代理是否工作正常\"></a>2:查看upstream代理是否工作正常</h4><h4 id=\"3-查看kafka-日志对应的topic是否产生消息日志，如下\"><a href=\"#3-查看kafka-日志对应的topic是否产生消息日志，如下\" class=\"headerlink\" title=\"3:查看kafka 日志对应的topic是否产生消息日志，如下:\"></a>3:查看kafka 日志对应的topic是否产生消息日志，如下:</h4><p>从头消费topic数据命令<br/></p><figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">sh kafka-console-consumer.sh --zookeeper 10.10.78.52:2181 --topic test1 --from-beginning</span><br/></pre></td></tr></tbody></table></figure><p></p>\n<p>效果监测:<br/><img src=\"https://img.dazhuanlan.com/2019/11/26/5ddd23b06172d.png\" alt=\"\"/></p>\n<h4 id=\"4-ab压力测试\"><a href=\"#4-ab压力测试\" class=\"headerlink\" title=\"4:ab压力测试\"></a>4:ab压力测试</h4><p>单nginx+upstream测试:<br/></p><figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">ab -n 10000 -c 100 -k http://10.10.34.15/m/personal/AC8E3BC7-6130-447B-A9D6-DF11CB74C3EF/rc/v1?passport=83FBC7337D681E679FFBA1B913E22A0D@qq.sohu.com&amp;page=2&amp;size=10</span><br/></pre></td></tr></tbody></table></figure><p></p>\n<p>结果<br/></p><figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/><span class=\"line\">9</span><br/><span class=\"line\">10</span><br/><span class=\"line\">11</span><br/><span class=\"line\">12</span><br/><span class=\"line\">13</span><br/><span class=\"line\">14</span><br/><span class=\"line\">15</span><br/><span class=\"line\">16</span><br/><span class=\"line\">17</span><br/><span class=\"line\">18</span><br/><span class=\"line\">19</span><br/><span class=\"line\">20</span><br/><span class=\"line\">21</span><br/><span class=\"line\">22</span><br/><span class=\"line\">23</span><br/><span class=\"line\">24</span><br/><span class=\"line\">25</span><br/><span class=\"line\">26</span><br/><span class=\"line\">27</span><br/><span class=\"line\">28</span><br/><span class=\"line\">29</span><br/><span class=\"line\">30</span><br/><span class=\"line\">31</span><br/><span class=\"line\">32</span><br/><span class=\"line\">33</span><br/><span class=\"line\">34</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">Server Software:        nginx</span><br/><span class=\"line\">Server Hostname:        10.10.34.15</span><br/><span class=\"line\">Server Port:            80</span><br/><span class=\"line\">Document Path:          /m/personal/AC8E3BC7-6130-447B-A9D6-DF11CB74C3EF/rc/v1?passport=83FBC7337D681E679FFBA1B913E22A0D@qq.sohu.com</span><br/><span class=\"line\">Document Length:        13810 bytes</span><br/><span class=\"line\">Concurrency Level:      100</span><br/><span class=\"line\">Time taken for tests:   2.148996 seconds</span><br/><span class=\"line\">Complete requests:      10000</span><br/><span class=\"line\">Failed requests:        9982</span><br/><span class=\"line\">   (Connect: 0, Length: 9982, Exceptions: 0)</span><br/><span class=\"line\">Write errors:           0</span><br/><span class=\"line\">Keep-Alive requests:    0</span><br/><span class=\"line\">Total transferred:      227090611 bytes</span><br/><span class=\"line\">HTML transferred:       225500642 bytes</span><br/><span class=\"line\">Requests per second:    4653.34 [#/sec] (mean)</span><br/><span class=\"line\">Time per request:       21.490 [ms] (mean)</span><br/><span class=\"line\">Time per request:       0.215 [ms] (mean, across all concurrent requests)</span><br/><span class=\"line\">Transfer rate:          103196.10 [Kbytes/sec] received</span><br/><span class=\"line\">Connection Times (ms)</span><br/><span class=\"line\">              min  mean[+/-sd] median   max</span><br/><span class=\"line\">Connect:        0    0   0.1      0       2</span><br/><span class=\"line\">Processing:     5   20  23.6     16     701</span><br/><span class=\"line\">Waiting:        4   17  20.8     13     686</span><br/><span class=\"line\">Total:          5   20  23.6     16     701</span><br/><span class=\"line\">Percentage of the requests served within a certain time (ms)</span><br/><span class=\"line\">  50%     16</span><br/><span class=\"line\">  66%     20</span><br/><span class=\"line\">  75%     22</span><br/><span class=\"line\">  80%     25</span><br/><span class=\"line\">  90%     33</span><br/><span class=\"line\">  95%     41</span><br/><span class=\"line\">  98%     48</span><br/><span class=\"line\">  99%     69</span><br/><span class=\"line\">100%    701 (longest request)</span><br/></pre></td></tr></tbody></table></figure><p></p>\n<p>单nginx+upstream+log_lua_kafka接入测试:<br/></p><figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">ab -n 10000 -c 100 -k http://10.10.78.52/m/personal/AC8E3BC7-6130-447B-A9D6-DF11CB74C3EF/rc/v1?passport=83FBC7337D681E679FFBA1B913E22A0D@qq.sohu.com&amp;page=2&amp;size=10</span><br/></pre></td></tr></tbody></table></figure><p></p>\n<p>结果</p>\n<pre><code>Server Software:        openresty/1.9.7.4\nServer Hostname:        10.10.78.52\nServer Port:            80\nDocument Path:          /m/personal/AC8E3BC7-6130-447B-A9D6-DF11CB74C3EF/rc/v1?passport=83FBC7337D681E679FFBA1B913E22A0D@qq.sohu.com\nDocument Length:        34396 bytes\nConcurrency Level:      100\nTime taken for tests:   2.234785 seconds\nComplete requests:      10000\nFailed requests:        9981\n   (Connect: 0, Length: 9981, Exceptions: 0)\nWrite errors:           0\nKeep-Alive requests:    0\nTotal transferred:      229781343 bytes\nHTML transferred:       228071374 bytes\nRequests per second:    4474.70 [#/sec] (mean)\nTime per request:       22.348 [ms] (mean)\nTime per request:       0.223 [ms] (mean, across all concurrent requests)\nTransfer rate:          100410.10 [Kbytes/sec] received\nConnection Times (ms)\n              min  mean[+/-sd] median   max\nConnect:        0    0   0.2      0       3\nProcessing:     6   20  27.6     17    1504\nWaiting:        5   15  12.0     14     237\nTotal:          6   20  27.6     17    1504\nPercentage of the requests served within a certain time (ms)\n  50%     17\n  66%     19\n  75%     21\n  80%     23\n  90%     28\n  95%     34\n  98%     46\n  99%     67\n100%   1004 (longest request)\n</code></pre>","text":"一:场景描述对于线上大流量服务或者需要上报日志的nginx服务，每天会产生大量的日志，这些日志非常有价值。可用于计数上报、用户行为分析、接口质量、性能监控等需求。但传统nginx记录日志的方式数据会散落在各自nginx上，而且大流量日志本身对磁盘也是一种冲击。 我们需要把这部分n...","link":"","photos":[],"count_time":{"symbolsCount":"9.9k","symbolsTime":"9 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%80-%E5%9C%BA%E6%99%AF%E6%8F%8F%E8%BF%B0\"><span class=\"toc-text\">一:场景描述</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BA%8C-%E6%8A%80%E6%9C%AF%E6%96%B9%E6%A1%88\"><span class=\"toc-text\">二:技术方案</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%89-%E7%9B%B8%E5%85%B3%E6%8A%80%E6%9C%AF\"><span class=\"toc-text\">三:相关技术</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%9B%9B-%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">四:安装配置</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-%E5%87%86%E5%A4%87openresty%E4%BE%9D%E8%B5%96\"><span class=\"toc-text\">1.准备openresty依赖:</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-%E5%AE%89%E8%A3%85%E7%BC%96%E8%AF%91openresty\"><span class=\"toc-text\">2. 安装编译openresty:</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1-%E5%AE%89%E8%A3%85openresty\"><span class=\"toc-text\">(1):安装openresty:</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-%E5%AE%89%E8%A3%85lua-resty-kafka\"><span class=\"toc-text\">3.安装lua-resty-kafka</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-%E5%AE%89%E8%A3%85%E5%8D%95%E6%9C%BAkafka\"><span class=\"toc-text\">4:安装单机kafka</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BA%94-%E9%85%8D%E7%BD%AE%E8%BF%90%E8%A1%8C\"><span class=\"toc-text\">五:配置运行</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%85%AD-%E6%A3%80%E6%B5%8B-amp-%E8%BF%90%E8%A1%8C\"><span class=\"toc-text\">六:检测&amp;运行</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%83-%E6%B5%8B%E8%AF%95\"><span class=\"toc-text\">七:测试</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-%E4%BD%BF%E7%94%A8%E4%BB%BB%E6%84%8Fhttp%E8%AF%B7%E6%B1%82%E5%8F%91%E9%80%81%E7%BB%99%E5%BD%93%E5%89%8Dnginx%EF%BC%8C%E5%A6%82\"><span class=\"toc-text\">1:使用任意http请求发送给当前nginx，如:</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-%E6%9F%A5%E7%9C%8Bupstream%E4%BB%A3%E7%90%86%E6%98%AF%E5%90%A6%E5%B7%A5%E4%BD%9C%E6%AD%A3%E5%B8%B8\"><span class=\"toc-text\">2:查看upstream代理是否工作正常</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-%E6%9F%A5%E7%9C%8Bkafka-%E6%97%A5%E5%BF%97%E5%AF%B9%E5%BA%94%E7%9A%84topic%E6%98%AF%E5%90%A6%E4%BA%A7%E7%94%9F%E6%B6%88%E6%81%AF%E6%97%A5%E5%BF%97%EF%BC%8C%E5%A6%82%E4%B8%8B\"><span class=\"toc-text\">3:查看kafka 日志对应的topic是否产生消息日志，如下:</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-ab%E5%8E%8B%E5%8A%9B%E6%B5%8B%E8%AF%95\"><span class=\"toc-text\">4:ab压力测试</span></a></li></ol></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Lua 表序列化与反序列化","uid":"c4ed4c59694f75fec9b905a00c141865","slug":"zl/2016-01-01-168_Lua 表序列化与反序列化","date":"2024-04-03T03:47:33.055Z","updated":"2024-04-03T03:47:33.055Z","comments":true,"path":"api/articles/zl/2016-01-01-168_Lua 表序列化与反序列化.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"前言今天看了下同事写的关于 Lua 序列化的代码，觉得代码存在几个问题，其主要欠缺以下几点： 1.支持循环引用的 table，反序列后，能正确恢复循环引用状态，如：12local a = {1, 2, 3}a.b = {4, 5, 6, a} 2.字符串内支持内嵌双引号、支持转义...","link":"","photos":[],"count_time":{"symbolsCount":"2.6k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Lua入门教程：协程","uid":"232cd6ffbc023c95e155925cdcdc79a4","slug":"zl/2016-01-01-165_Lua入门教程：协程","date":"2024-04-03T03:47:33.053Z","updated":"2024-04-03T03:47:33.053Z","comments":true,"path":"api/articles/zl/2016-01-01-165_Lua入门教程：协程.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"从多线程的角度来看，协程（coroutine）与线程（thread）类似：协程时一系列的可执行语句，拥有自己的栈、局部变量和指令指针，同时协程又与其他协程共享全局变量和其他几乎一切资源。 协程与线程的主要区别在于，一个多线程程序可以并行运行多个线程，而协程则需要彼此协作运行，即在...","link":"","photos":[],"count_time":{"symbolsCount":"3k","symbolsTime":"3 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}