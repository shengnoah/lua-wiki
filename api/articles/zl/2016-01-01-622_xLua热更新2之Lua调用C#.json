{"title":"xLua热更新2之Lua调用C#","uid":"9a209f0116b4ddc489321c7b92261495","slug":"zl/2016-01-01-622_xLua热更新2之Lua调用C#","date":"2024-04-03T03:47:35.847Z","updated":"2024-04-03T03:47:35.847Z","comments":true,"path":"api/articles/zl/2016-01-01-622_xLua热更新2之Lua调用C#.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<p>思考并回答以下问题：<br/>1.如何创建一个空表？</p>\n<p>之前学习了C#调用lua，更多的时候，都是调用<span style=\"color:red\">DoString(“require ‘byfile’”)</span>然后放到lua代码中去处理了，那就意味着会有更多的lua调用C#的情况。</p>\n<h2 id=\"创建C-对象\"><a href=\"#创建C-对象\" class=\"headerlink\" title=\"创建C#对象\"></a><span style=\"color:#EF7060;\">创建C#对象</span></h2><p>在C#这样new一个对象：</p>\n<figure class=\"highlight cs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> newGameObj = <span class=\"keyword\">new</span> UnityEngine.GameObject();</span><br/></pre></td></tr></tbody></table></figure>\n<p>对应到Lua是这样：</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">local</span> newGameObj = CS.UnityEngine.GameObject()</span><br/></pre></td></tr></tbody></table></figure>\n<p>基本上是类似的，区别是：</p>\n<ul>\n<li>lua里没有new关键字；</li>\n<li>所有C#相关的都放到CS下，包括构造函数，静态成员属性、方法；</li>\n</ul>\n<p>如果有多个构造函数呢？xlua支持重载，比如你要调用GameObject的带一个string参数的构造函数，这么写：</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">local</span> newGameObj2 = CS.UnityEngine.GameObject(<span class=\"string\">&#39;helloworld&#39;</span>)</span><br/></pre></td></tr></tbody></table></figure>\n<h2 id=\"访问C-静态属性，方法\"><a href=\"#访问C-静态属性，方法\" class=\"headerlink\" title=\"访问C#静态属性，方法\"></a><span style=\"color:#EF7060;\">访问C#静态属性，方法</span></h2><p>** 读静态属性 **</p>\n<figure class=\"highlight cs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">CS.UnityEngine.Time.deltaTime</span><br/></pre></td></tr></tbody></table></figure>\n<p>** 写静态属性 **</p>\n<figure class=\"highlight cs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">CS.UnityEngine.Time.timeScale = <span class=\"number\">0.5</span></span><br/></pre></td></tr></tbody></table></figure>\n<p>** 调用静态方法 **</p>\n<figure class=\"highlight cs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">CS.UnityEngine.GameObject.Find(<span class=\"string\">&#39;helloworld&#39;</span>)</span><br/></pre></td></tr></tbody></table></figure>\n<p>小技巧：如果需要经常访问的类，可以先用局部变量引用后访问，除了减少敲代码的时间，还能提高性能：</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">local</span> GameObject = CS.UnityEngine.GameObject</span><br/><span class=\"line\">GameObject.Find(<span class=\"string\">&#39;helloworld&#39;</span>)</span><br/></pre></td></tr></tbody></table></figure>\n<h2 id=\"访问C-成员属性，方法\"><a href=\"#访问C-成员属性，方法\" class=\"headerlink\" title=\"访问C#成员属性，方法\"></a><span style=\"color:#EF7060;\">访问C#成员属性，方法</span></h2><p>** 读成员属性 **</p>\n<figure class=\"highlight cs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">testobj.DMF</span><br/></pre></td></tr></tbody></table></figure>\n<p>** 写成员属性 **</p>\n<figure class=\"highlight cs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">testobj.DMF = <span class=\"number\">1024</span></span><br/></pre></td></tr></tbody></table></figure>\n<p>** 调用成员方法 **</p>\n<p>注意：调用成员方法，第一个参数需要传该对象，建议用冒号语法糖，如下</p>\n<figure class=\"highlight cs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">testobj:DMFunc()</span><br/></pre></td></tr></tbody></table></figure>\n<p>静态方法直接用点即可，成员方法需要用冒号语法糖。</p>\n<p>** 父类属性，方法 **</p>\n<p>xlua支持（通过派生类）访问基类的静态属性，静态方法，（通过派生类实例）访问基类的成员属性，成员方法</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(DerivedClass.BSF)</span><br/><span class=\"line\">DerivedClass.BSF = <span class=\"number\">2048</span><span class=\"comment\">--写基类静态属性</span></span><br/><span class=\"line\">DerivedClass.BSFunc();<span class=\"comment\">--基类静态方法</span></span><br/><span class=\"line\"><span class=\"built_in\">print</span>(testobj.BMF)<span class=\"comment\">--读基类成员属性</span></span><br/><span class=\"line\">testobj.BMF = <span class=\"number\">4096</span><span class=\"comment\">--写基类成员属性</span></span><br/><span class=\"line\">testobj:BMFunc()<span class=\"comment\">--基类方法调用</span></span><br/></pre></td></tr></tbody></table></figure>\n<p>** 参数的输入输出属性（out，ref） **</p>\n<p>Lua调用测的参数处理规则：C#的普通参数算一个输入形参，ref修饰的算一个输入形参，out不算，然后从左往右对应lua 调用测的实参列表；</p>\n<p>Lua调用测的返回值处理规则：C#函数的返回值（如果有的话）算一个返回值，out算一个返回值，ref算一个返回值，然后从左往右对应lua的多返回值。</p>\n<p>比如C#的方法如下：</p>\n<figure class=\"highlight cs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/><span class=\"line\">9</span><br/><span class=\"line\">10</span><br/><span class=\"line\">11</span><br/><span class=\"line\">12</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> (<span class=\"params\">Param1 p1, <span class=\"keyword\">ref</span> <span class=\"keyword\">int</span> p2, <span class=\"keyword\">out</span> <span class=\"keyword\">string</span> p3, Action luafunc, <span class=\"keyword\">out</span> Action csfunc</span>)</span></span><br/><span class=\"line\"><span class=\"function\"></span>{</span><br/><span class=\"line\">    Debug.Log(<span class=\"string\">&#34;P1 = {x=&#34;</span> + p1.x + <span class=\"string\">&#34;,y=&#34;</span> + p1.y + <span class=\"string\">&#34;},p2 = &#34;</span> + p2);</span><br/><span class=\"line\">    luafunc();</span><br/><span class=\"line\">    p2 = p2 * p1.x;</span><br/><span class=\"line\">    p3 = <span class=\"string\">&#34;hello &#34;</span> + p1.y;</span><br/><span class=\"line\">    csfunc = () =&gt;</span><br/><span class=\"line\">    {</span><br/><span class=\"line\">        Debug.Log(<span class=\"string\">&#34;csharp callback invoked!&#34;</span>);</span><br/><span class=\"line\">    };</span><br/><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1.23</span>;</span><br/><span class=\"line\">}</span><br/></pre></td></tr></tbody></table></figure>\n<p>lua中对应的调用方法为：</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">local</span> ret, p2, p3, csfunc = testobj:ComplexFunc({x=<span class=\"number\">3</span>, y = <span class=\"string\">&#39;john&#39;</span>}, <span class=\"number\">100</span>, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span></span><br/><span class=\"line\">   <span class=\"built_in\">print</span>(<span class=\"string\">&#39;i am lua callback&#39;</span>)</span><br/><span class=\"line\"><span class=\"keyword\">end</span>)</span><br/><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#39;ComplexFunc ret:&#39;</span>, ret, p2, p3, csfunc)</span><br/></pre></td></tr></tbody></table></figure>\n<p>** 重载方法 **</p>\n<p>直接通过不同的参数类型进行重载函数的访问，例如：</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">testobj:TestFunc(<span class=\"number\">100</span>)</span><br/><span class=\"line\">testobj:TestFunc(<span class=\"string\">&#39;hello&#39;</span>)</span><br/></pre></td></tr></tbody></table></figure>\n<p>将分别访问整数参数的TestFunc和字符串参数的TestFunc。</p>\n<p>注意：xlua只一定程度上支持重载函数的调用，因为lua的类型远远不如C#丰富，存在一对多的情况，比如C#的int，float，double都对应于lua的number，上面的例子中TestFunc如果有这些重载参数，第一行将无法区分开来，只能调用到其中一个（生成代码中排前面的那个）</p>\n<p>** 操作符 **</p>\n<p>支持的操作符有：+，-，*，/，==，一元-，&lt;，&lt;=， %，[]</p>\n<p>比如C#中如下代码：</p>\n<figure class=\"highlight cs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> DerivedClass <span class=\"keyword\">operator</span> +(DerivedClass a, DerivedClass b)</span><br/><span class=\"line\">{</span><br/><span class=\"line\">    DerivedClass ret = <span class=\"keyword\">new</span> DerivedClass();</span><br/><span class=\"line\">    ret.DMF = a.DMF + b.DMF;</span><br/><span class=\"line\">    <span class=\"keyword\">return</span> ret;</span><br/><span class=\"line\">}</span><br/></pre></td></tr></tbody></table></figure>\n<p>lua中支持的操作符如下：</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#39;(testobj + testobj2).DMF = &#39;</span>, (testobj + testobj2).DMF)</span><br/></pre></td></tr></tbody></table></figure>\n<p>** 参数带默认值的方法 **</p>\n<p>和C#调用有默认值参数的函数一样，如果所给的实参少于形参，则会用默认值补上。</p>\n<p>C#代码：</p>\n<figure class=\"highlight cs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">DefaultValueFunc</span>(<span class=\"params\"><span class=\"keyword\">int</span> a = <span class=\"number\">100</span>, <span class=\"keyword\">string</span> b = <span class=\"string\">&#34;cccc&#34;</span>, <span class=\"keyword\">string</span> c = <span class=\"literal\">null</span></span>)</span></span><br/><span class=\"line\"><span class=\"function\"></span>{</span><br/><span class=\"line\">    UnityEngine.Debug.Log(<span class=\"string\">&#34;DefaultValueFunc: a=&#34;</span> + a + <span class=\"string\">&#34;,b=&#34;</span> + b + <span class=\"string\">&#34;,c=&#34;</span> + c);</span><br/><span class=\"line\">}</span><br/></pre></td></tr></tbody></table></figure>\n<p>lua代码：</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">testobj:DefaultValueFunc(<span class=\"number\">1</span>)</span><br/><span class=\"line\">testobj:DefaultValueFunc(<span class=\"number\">3</span>, <span class=\"string\">&#39;hello&#39;</span>, <span class=\"string\">&#39;john&#39;</span>)</span><br/></pre></td></tr></tbody></table></figure>\n<p>** 可变参数方法 **</p>\n<p>对于C#的如下方法：</p>\n<figure class=\"highlight cs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">VariableParamsFunc</span>(<span class=\"params\"><span class=\"keyword\">int</span> a, <span class=\"keyword\">params</span> <span class=\"keyword\">string</span>[] strs</span>)</span></span><br/></pre></td></tr></tbody></table></figure>\n<p>可以在lua里头这样调用：</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">testobj:VariableParamsFunc(<span class=\"number\">5</span>, <span class=\"string\">&#39;hello&#39;</span>, <span class=\"string\">&#39;john&#39;</span>)</span><br/></pre></td></tr></tbody></table></figure>\n<p>** 使用Extension methods **</p>\n<p>在C#里定义了，lua里就能直接使用。</p>\n<p>C#代码：</p>\n<figure class=\"highlight cs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/><span class=\"line\">9</span><br/><span class=\"line\">10</span><br/><span class=\"line\">11</span><br/><span class=\"line\">12</span><br/><span class=\"line\">13</span><br/><span class=\"line\">14</span><br/><span class=\"line\">15</span><br/><span class=\"line\">16</span><br/><span class=\"line\">17</span><br/><span class=\"line\">18</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">[]</span><br/><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title\">DerivedClassExtensions</span></span><br/><span class=\"line\">{</span><br/><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">GetSomeData</span>(<span class=\"params\"><span class=\"keyword\">this</span> DerivedClass obj</span>)</span></span><br/><span class=\"line\"><span class=\"function\"></span>    {</span><br/><span class=\"line\">        Debug.Log(<span class=\"string\">&#34;GetSomeData ret = &#34;</span> + obj.DMF);</span><br/><span class=\"line\">        <span class=\"keyword\">return</span> obj.DMF;</span><br/><span class=\"line\">    }</span><br/><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">GetSomeBaseData</span>(<span class=\"params\"><span class=\"keyword\">this</span> BaseClass obj</span>)</span></span><br/><span class=\"line\"><span class=\"function\"></span>    {</span><br/><span class=\"line\">        Debug.Log(<span class=\"string\">&#34;GetSomeBaseData ret = &#34;</span> + obj.BMF);</span><br/><span class=\"line\">        <span class=\"keyword\">return</span> obj.BMF;</span><br/><span class=\"line\">    }</span><br/><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">GenericMethodOfString</span>(<span class=\"params\"><span class=\"keyword\">this</span> DerivedClass obj</span>)</span></span><br/><span class=\"line\"><span class=\"function\"></span>    {</span><br/><span class=\"line\">        obj.GenericMethod&lt;<span class=\"keyword\">string</span>&gt;();</span><br/><span class=\"line\">    }</span><br/><span class=\"line\">}</span><br/></pre></td></tr></tbody></table></figure>\n<p>lua代码：</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(testobj:GetSomeData()) </span><br/><span class=\"line\"><span class=\"built_in\">print</span>(testobj:GetSomeBaseData()) <span class=\"comment\">--访问基类的Extension methods</span></span><br/><span class=\"line\">testobj:GenericMethodOfString()  <span class=\"comment\">--通过Extension methods实现访问泛化方法</span></span><br/></pre></td></tr></tbody></table></figure>\n<p>** 泛型（模版）方法 **</p>\n<p>不直接支持，可以通过Extension methods功能进行封装后调用。如上面代码中<span style=\"color:red\">GenericMethodOfString</span>方法所示。</p>\n<p>** 枚举类型 **</p>\n<p>枚举值就像枚举类型下的静态属性一样。</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">testobj:EnumTestFunc(CS.Tutorial.TestEnum.E1)</span><br/></pre></td></tr></tbody></table></figure>\n<p>上面的EnumTestFunc函数参数是Tutorial.TestEnum类型的。</p>\n<p>枚举类支持__CastFrom方法，可以实现从一个整数或者字符串到枚举值的转换，例如：</p>\n<figure class=\"highlight cs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">CS.Tutorial.TestEnum.__CastFrom(<span class=\"number\">1</span>)</span><br/><span class=\"line\">CS.Tutorial.TestEnum.__CastFrom(<span class=\"string\">&#39;E1&#39;</span>)</span><br/></pre></td></tr></tbody></table></figure>\n<p>** delegate使用（调用，+，-） **</p>\n<p>C#的delegate调用：和调用普通lua函数一样，注意此处调用是用点.</p>\n<p>+操作符：对应C#的+操作符，把两个调用串成一个调用链，右操作数可以是同类型的C# delegate或者是lua函数。</p>\n<p>-操作符：和+相反，把一个delegate从调用链中移除。</p>\n<blockquote>\n<p>Ps：delegate属性可以用一个luafunction来赋值。</p>\n</blockquote>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">testobj.TestDelegate(<span class=\"string\">&#39;hello&#39;</span>) <span class=\"comment\">--直接调用</span></span><br/><span class=\"line\"><span class=\"keyword\">local</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">lua_delegate</span><span class=\"params\">(str)</span></span></span><br/><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#39;TestDelegate in lua:&#39;</span>, str)</span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/><span class=\"line\">testobj.TestDelegate = lua_delegate + testobj.TestDelegate <span class=\"comment\">--combine，这里演示的是C#delegate作为右值，左值也支持</span></span><br/><span class=\"line\">testobj.TestDelegate(<span class=\"string\">&#39;hello&#39;</span>)</span><br/><span class=\"line\">testobj.TestDelegate = testobj.TestDelegate - lua_delegate <span class=\"comment\">--remove</span></span><br/><span class=\"line\">testobj.TestDelegate(<span class=\"string\">&#39;hello&#39;</span>)</span><br/></pre></td></tr></tbody></table></figure>\n<p>** event **</p>\n<p>比如testobj里头有个事件定义是这样：<span style=\"color:red\">public event Action TestEvent;</span></p>\n<p>增加事件回调</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">testobj:TestEvent(<span class=\"string\">&#39;+&#39;</span>, lua_event_callback)</span><br/></pre></td></tr></tbody></table></figure>\n<p>移除事件回调</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">testobj:TestEvent(<span class=\"string\">&#39;-&#39;</span>, lua_event_callback)</span><br/></pre></td></tr></tbody></table></figure>\n<p>** 64位整数支持 **</p>\n<p>Lua53版本64位整数（long，ulong）映射到原生的64未整数，而luajit版本，相当于lua5.1的标准，本身不支持64位，xlua做了个64位支持的扩展库，C#的long和ulong都将映射到userdata：</p>\n<ul>\n<li>支持在lua里头进行64位的运算，比较，打印</li>\n<li>支持和lua number的运算，比较</li>\n<li>要注意的是，在64扩展库中，实际上只有int64，ulong也会先强转成long再传递到lua，而对ulong的一些运算、比较，xLua采取和java一样的支持方式，提供一组API，详情请看API文档：<a href=\"https://github.com/Tencent/xLua/blob/master/Assets/XLua/Doc/XLua_API.md#%E6%97%A0%E7%AC%A6%E5%8F%B764%E4%BD%8D%E6%94%AF%E6%8C%81\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/Tencent/xLua/blob/master/Assets/XLua/Doc/XLua_API.md#%E6%97%A0%E7%AC%A6%E5%8F%B764%E4%BD%8D%E6%94%AF%E6%8C%81</a>。</li>\n</ul>\n<blockquote>\n<p>Lua53 vs Luajit 的区别我们在218学习过。</p>\n</blockquote>\n<p>** C#复杂类型和table的自动转换 **</p>\n<p>对于一个有无参构造函数的C#复杂类型，在lua侧可以直接用一个table来代替，该table对应复杂类型的public字段有相应字段即可，支持函数参数传递，属性赋值等，例如： C#下B结构体（也支持class）定义如下：</p>\n<figure class=\"highlight cs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/><span class=\"line\">9</span><br/><span class=\"line\">10</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">struct</span> A</span><br/><span class=\"line\">{</span><br/><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> a;</span><br/><span class=\"line\">}</span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">struct</span> B</span><br/><span class=\"line\">{</span><br/><span class=\"line\">    <span class=\"keyword\">public</span> A b;</span><br/><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">double</span> c;</span><br/><span class=\"line\">}</span><br/></pre></td></tr></tbody></table></figure>\n<p>某个类有成员函数如下：</p>\n<figure class=\"highlight cs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Foo</span>(<span class=\"params\">B b</span>)</span></span><br/></pre></td></tr></tbody></table></figure>\n<p>在lua可以这么调用</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">obj:Foo({b = {a = <span class=\"number\">100</span>}, c = <span class=\"number\">200</span>})</span><br/></pre></td></tr></tbody></table></figure>\n<p>** 获取类型（相当于C#的typeof） **</p>\n<p>比如要获取UnityEngine.ParticleSystem类的Type信息，可以这样</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">typeof(CS.UnityEngine.ParticleSystem)</span><br/></pre></td></tr></tbody></table></figure>\n<p>** 强制转换 **</p>\n<p>lua没类型，所以不会有强类型语言的强制转换。</p>\n<p>但是某些情况下，比如：告诉xlua要用指定的生成代码去调用一个对象，有的时候第三方库对外暴露的是一个interface或者抽象类，实现类是隐藏的，这样我们无法对实现类进行代码生成。该实现类将会被xlua识别为未生成代码而用反射来访问，如果这个调用是很频繁的话还是很影响性能的，这时我们就可以把这个interface或者抽象类加到生成代码，然后指定用该生成代码来访问：</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">cast(calc, typeof(CS.Tutorial.Calc))</span><br/></pre></td></tr></tbody></table></figure>\n<p>上面就是指定用CS.Tutorial.Calc的生成代码来访问calc对象。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a><span style=\"color:#039BE5;\">总结</span></h1><p>使用lua访问C#代码的变化不大，需要注意里面几点：</p>\n<ul>\n<li>如果需要经常访问的类，可以先用局部变量引用后访问，除了减少敲代码的时间，还能提高性能</li>\n<li>xlua只一定程度上支持重载函数的调用，因为lua的类型远远不如C#丰富，存在一对多的情况，比如C#的int，float，double都对应于lua的number，无法区分</li>\n<li>委托调用的时候需要用<span style=\"color:red\">.</span></li>\n</ul>","text":"思考并回答以下问题：1.如何创建一个空表？ 之前学习了C#调用lua，更多的时候，都是调用DoString(“require ‘byfile’”)然后放到lua代码中去处理了，那就意味着会有更多的lua调用C#的情况。 创建C#对象在C#这样new一个对象： 1var newGa...","link":"","photos":[],"count_time":{"symbolsCount":"6.1k","symbolsTime":"6 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%88%9B%E5%BB%BAC-%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">创建C#对象</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%AE%BF%E9%97%AEC-%E9%9D%99%E6%80%81%E5%B1%9E%E6%80%A7%EF%BC%8C%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">访问C#静态属性，方法</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%AE%BF%E9%97%AEC-%E6%88%90%E5%91%98%E5%B1%9E%E6%80%A7%EF%BC%8C%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">访问C#成员属性，方法</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">总结</span></a>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Lua","uid":"15b0cdc6d03f6c3f6bf8d3a7ff197317","slug":"zl/2016-01-01-624_Lua","date":"2024-04-03T03:47:35.848Z","updated":"2024-04-03T03:47:35.848Z","comments":true,"path":"api/articles/zl/2016-01-01-624_Lua.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"由于lua的编译速度相当快，而且这种迭代编译的过程仅仅在程序加载的时候进行一次，故而可以带来性能的提高；一些在系统初始化可以决定的参数（比如从配置文件中读出来的数据直接编译为常量置入程序中。 1234567891011121314151617local select = sele...","link":"","photos":[],"count_time":{"symbolsCount":"7.9k","symbolsTime":"7 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Lua中的值及其类型","uid":"ae197680f7822359ac899a20c256fe3b","slug":"zl/2016-01-01-623_Lua中的值及其类型","date":"2024-04-03T03:47:35.847Z","updated":"2024-04-03T03:47:35.847Z","comments":true,"path":"api/articles/zl/2016-01-01-623_Lua中的值及其类型.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":" Lua是一门动态类型的语言，这意味着Lua中的变量没有类型，而值才有类型。一个变量可以在不同时刻指向不同类型的值。下面将对Lua中的值及其类型做一些总结。 基本数据类型及其子类型 在lua-5.3.5版本中，有9中基本的数据类型，其定义如下： 1234567891011#def...","link":"","photos":[],"count_time":{"symbolsCount":"4.9k","symbolsTime":"4 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}