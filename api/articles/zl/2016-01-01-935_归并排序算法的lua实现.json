{"title":"归并排序算法的lua实现","uid":"ef58c3b9d956f4d2e46a63246745c0c2","slug":"zl/2016-01-01-935_归并排序算法的lua实现","date":"2024-04-03T03:47:36.207Z","updated":"2024-04-03T03:47:36.207Z","comments":true,"path":"api/articles/zl/2016-01-01-935_归并排序算法的lua实现.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/><span class=\"line\">9</span><br/><span class=\"line\">10</span><br/><span class=\"line\">11</span><br/><span class=\"line\">12</span><br/><span class=\"line\">13</span><br/><span class=\"line\">14</span><br/><span class=\"line\">15</span><br/><span class=\"line\">16</span><br/><span class=\"line\">17</span><br/><span class=\"line\">18</span><br/><span class=\"line\">19</span><br/><span class=\"line\">20</span><br/><span class=\"line\">21</span><br/><span class=\"line\">22</span><br/><span class=\"line\">23</span><br/><span class=\"line\">24</span><br/><span class=\"line\">25</span><br/><span class=\"line\">26</span><br/><span class=\"line\">27</span><br/><span class=\"line\">28</span><br/><span class=\"line\">29</span><br/><span class=\"line\">30</span><br/><span class=\"line\">31</span><br/><span class=\"line\">32</span><br/><span class=\"line\">33</span><br/><span class=\"line\">34</span><br/><span class=\"line\">35</span><br/><span class=\"line\">36</span><br/><span class=\"line\">37</span><br/><span class=\"line\">38</span><br/><span class=\"line\">39</span><br/><span class=\"line\">40</span><br/><span class=\"line\">41</span><br/><span class=\"line\">42</span><br/><span class=\"line\">43</span><br/><span class=\"line\">44</span><br/><span class=\"line\">45</span><br/><span class=\"line\">46</span><br/><span class=\"line\">47</span><br/><span class=\"line\">48</span><br/><span class=\"line\">49</span><br/><span class=\"line\">50</span><br/><span class=\"line\">51</span><br/><span class=\"line\">52</span><br/><span class=\"line\">53</span><br/><span class=\"line\">54</span><br/><span class=\"line\">55</span><br/><span class=\"line\">56</span><br/><span class=\"line\">57</span><br/><span class=\"line\">58</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br/><span class=\"line\">-- 归并排序算法学习</span><br/><span class=\"line\">--[[</span><br/><span class=\"line\">\t1. 设置临时table, 用来存放排序之后的数组</span><br/><span class=\"line\">\t2. 设定两个值i,j, 初始值分别为两个待排序数组的第一个key</span><br/><span class=\"line\">\t3. 比较key为i,j对应的值, 较小的放入合并空间, 并移动到下一个值</span><br/><span class=\"line\">\t4. 重复步骤3到i,j其中一个超出数组最大值</span><br/><span class=\"line\">\t5. 将另一个数组的剩下的元素复制到临时table中</span><br/><span class=\"line\">]]</span><br/><span class=\"line\">function merge(sourTab, tmpTab, startIndex, midIndex, endIndex)</span><br/><span class=\"line\">\tlocal i = startIndex</span><br/><span class=\"line\">\tlocal j = midIndex + 1</span><br/><span class=\"line\">\tlocal k = startIndex</span><br/><span class=\"line\">\twhile(i &lt;= midIndex and j &lt;= endIndex) do</span><br/><span class=\"line\">\t\tif sourTab[i] &gt; sourTab[j] then </span><br/><span class=\"line\">\t\t\ttmpTab[k] = sourTab[j]</span><br/><span class=\"line\">\t\t\tj = j + 1</span><br/><span class=\"line\">\t\telse</span><br/><span class=\"line\">\t\t\ttmpTab[k] = sourTab[i]</span><br/><span class=\"line\">\t\t\ti = i + 1</span><br/><span class=\"line\">\t\tend</span><br/><span class=\"line\">\t\tk = k + 1</span><br/><span class=\"line\">\tend</span><br/><span class=\"line\"></span><br/><span class=\"line\">\t-- 将剩下的拼到临时table的末尾 理论上i, j只有一个剩下</span><br/><span class=\"line\">\twhile (i &lt;= midIndex) do</span><br/><span class=\"line\">\t\ttmpTab[k] = sourTab[i]</span><br/><span class=\"line\">\t\tk = k + 1</span><br/><span class=\"line\">\t\ti = i + 1</span><br/><span class=\"line\">\tend</span><br/><span class=\"line\"></span><br/><span class=\"line\">\t-- 将剩下的拼到临时table的末尾</span><br/><span class=\"line\">\twhile (j &lt;= endIndex) do</span><br/><span class=\"line\">\t\ttmpTab[k] = sourTab[j]</span><br/><span class=\"line\">\t\tk = k + 1</span><br/><span class=\"line\">\t\tj = j + 1</span><br/><span class=\"line\">\tend</span><br/><span class=\"line\"></span><br/><span class=\"line\">\t-- 将排序好的数组赋值回原table, 这一步不能省略</span><br/><span class=\"line\">\tfor i = startIndex, endIndex do</span><br/><span class=\"line\">\t\tsourTab[i] = tmpTab[i]</span><br/><span class=\"line\">\tend</span><br/><span class=\"line\">end</span><br/><span class=\"line\"></span><br/><span class=\"line\">function mergeSort(sourTab, tmpTab, startIndex, endIndex)</span><br/><span class=\"line\">\tif startIndex &lt; endIndex then </span><br/><span class=\"line\">\t\tlocal midIndex = startIndex + math.floor((endIndex - startIndex) / 2)</span><br/><span class=\"line\">\t\tmergeSort(sourTab, tmpTab, startIndex, midIndex)</span><br/><span class=\"line\">\t\tmergeSort(sourTab, tmpTab, midIndex + 1, endIndex)</span><br/><span class=\"line\">\t\tmerge(sourTab, tmpTab, startIndex, midIndex, endIndex)</span><br/><span class=\"line\">\tend</span><br/><span class=\"line\">end</span><br/><span class=\"line\"></span><br/><span class=\"line\">local tab = {50, 10, 20, 30, 70, 40, 80, 60}</span><br/><span class=\"line\">local tab1 = {}</span><br/><span class=\"line\">mergeSort(tab, tab1, 1, #tab)</span><br/><span class=\"line\">print(table.concat(tab, &#34;,&#34;))</span><br/><span class=\"line\"></span><br/></pre></td></tr></tbody></table></figure>\n<p><a href=\"https://baike.baidu.com/item/归并排序\" target=\"_blank\" rel=\"noopener noreferrer\">参考百度百科</a></p>\n","text":"12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758-- 归并排序算法学习--[[ 1. 设置临时table, 用来存...","link":"","photos":[],"count_time":{"symbolsCount":"1.3k","symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Lua安装","uid":"a1d1c991ed2c0ff7080b062700284126","slug":"zl/2016-01-01-938_Lua安装","date":"2024-04-03T03:47:36.208Z","updated":"2024-04-03T03:47:36.210Z","comments":true,"path":"api/articles/zl/2016-01-01-938_Lua安装.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":" Lua并不象其它许多”大而全”的语言那样包括很多功能，比如网络通讯、图形界面等，它提供了非常易于使用的扩展接口和机制：由宿主语言(通常是C或C++)提供这些功能，Lua可以使用它们，就像是本来就内置的功能一样。 一、安装 centos7下安装 安装依赖yum install l...","link":"","photos":[],"count_time":{"symbolsCount":515,"symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Nginx 使用 lua","uid":"b2a7e9b111087d85b75d3fcb8b23cc07","slug":"zl/2016-01-01-937_Nginx 使用 lua","date":"2024-04-03T03:47:36.207Z","updated":"2024-04-03T03:47:36.208Z","comments":true,"path":"api/articles/zl/2016-01-01-937_Nginx 使用 lua.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":" 1. 软件版本 2. 环境准备 3. 软件安装 4. 配置lua脚本 5. 配置php 6. 配置日志，记录post请求的request_body 和response_body 1. 软件版本 系统 centos6.7X86_64 nginx 1.11.5 lua-nginx-...","link":"","photos":[],"count_time":{"symbolsCount":"5.3k","symbolsTime":"5 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}