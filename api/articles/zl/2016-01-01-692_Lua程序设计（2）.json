{"title":"Lua程序设计（2）","uid":"b25fc792f46bc48a4d47227fb8566f5f","slug":"zl/2016-01-01-692_Lua程序设计（2）","date":"2024-04-03T03:47:35.927Z","updated":"2024-04-03T03:47:35.927Z","comments":true,"path":"api/articles/zl/2016-01-01-692_Lua程序设计（2）.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<p>Lua中的数据结构——表</p>\n<h3 id=\"表\"><a href=\"#表\" class=\"headerlink\" title=\"表\"></a>表</h3><p>表是Lua语言中最主要（<strong>事实上也是唯一的</strong>）和强大的数据结构。</p>\n<p>Lua语言中的表本质上是一种辅助数组，这种数组不仅可以使用数值作为索引，也可以使用字符串或其他任意类型的值作为索引（nil除外）。</p>\n<p>Lua语言的表要么是值要么是变量，它们都是对象，表是一种动态分配的对象，程序只能操作指向表的引用。除此之外，Lua语言不会进行隐藏的拷贝（深拷贝：拷贝对象的引用而非整个对象本身）或创建新的表。</p>\n<p><strong>表永远是匿名的，表本身和保存表的变量之间没有固定的关系。</strong></p>\n<p>对于一个表而言，当程序中不再有指向它的引用时，垃圾收集器会最终删除这个表并重用其占用的内存。</p>\n<h3 id=\"表索引\"><a href=\"#表索引\" class=\"headerlink\" title=\"表索引\"></a>表索引</h3><p>同一个表中存储的值可以具有不同的类型索引，并可以按需增长容纳新的元素。</p>\n<p>把表当作结构体使用时，可以把索引当作成员名称使用（a.name等价于a[“name”]），但一般点分形式说明了表时被当作结构体使用的，此时<strong>表实际上是由固定的、预先定义的键组成的集合</strong>。</p>\n<p><strong>注意：a.x表示的是a.[“x”]，而不是a[x]，a[x]是指由变量x对应的值索引的表。</strong></p>\n<p>当被用作表索引是，任何能够被转换为整型的浮点数都会被转换成整型数；相反，不能被转换为整型数的浮点数则不会发生上述的类型转换。（这里的”能够被转换“指的是2.0这种数值本身就是整数的值）</p>\n<h3 id=\"表构造器\"><a href=\"#表构造器\" class=\"headerlink\" title=\"表构造器\"></a>表构造器</h3><p>表构造器用来创建和初始化表的表达式。</p>\n<ul>\n<li>列表式写法：<code>days = &#123;1,2,3,4,5,6,7&#125;</code></li>\n<li>记录式写法：<code>a = &#123;x = 10, y = 20&#125;</code></li>\n</ul>\n<p><strong>不能使用负数索引初始化列表（索引必须从1开始），也不能使用不符合规范的标识符作为索引。可以使用另一种更加通用的构造器，即通过方括号扩起来的表达式显示的指定每一个索引：</strong><code>opnames = &#123;[&#34;+&#34;] = &#34;add&#34;,[&#34;-&#34;] = &#34;sub&#34;,[&#34;*&#34;] = &#34;mul&#34;,[&#34;/&#34;] = &#34;div&#34;&#125;</code></p>\n<h3 id=\"数组、列表和序列\"><a href=\"#数组、列表和序列\" class=\"headerlink\" title=\"数组、列表和序列\"></a>数组、列表和序列</h3><p>只需要使用整型作为索引即可表示常见的数组或列表，Lua中数组索引依照惯例是从1开始的。</p>\n<ul>\n<li>我们把<strong>所有元素都不为nil的数组称为序列</strong>。Lua语言提供了操作符<code>#</code>来获取<strong>序列</strong>的长度。</li>\n<li>对于中间存在空洞（nil值）的列表而言，序列长度操作符是不可靠的，它只能用于序列。</li>\n<li>不包含数值类型键的表就是长度为零的序列。</li>\n<li>对于Lua语言来说，一个nil的字段和一个不存在的元素没有区别，因此<code>a = &#123;10,20,30,nil,nil&#125;</code>的长度为3，而非5。</li>\n</ul>\n<h3 id=\"遍历表\"><a href=\"#遍历表\" class=\"headerlink\" title=\"遍历表\"></a>遍历表</h3><ul>\n<li>可以使用pairs迭代器遍历表中的键值对，但它遍历过程中<strong>元素的出现顺序可能是随机的</strong>，相同的程序在每次运行时也可能产生不同的顺序，但在遍历的过程中，每个元素会且仅会出现一次。</li>\n<li>对于列表而言，可以使用ipairs迭代器，这会是顺序进行遍历的。</li>\n<li>可以使用数值型for循环来遍历序列。</li>\n</ul>\n<h3 id=\"安全访问\"><a href=\"#安全访问\" class=\"headerlink\" title=\"安全访问\"></a>安全访问</h3><p>对于表达式<code>a or &#123;&#125;</code>，当a为nil时，其结果是一个空表，因此对于表达式<code>(a or &#123;&#125;).b</code>，当a为</p>\n<p>nil时其结果也同样是nil，这样就可以写成：<code>zip = (((company or &#123;&#125;).director or &#123;&#125;).address or &#123;&#125;).zipcode</code></p>\n<h3 id=\"表标准库：\"><a href=\"#表标准库：\" class=\"headerlink\" title=\"表标准库：\"></a>表标准库：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://i.loli.net/2019/05/20/5ce2158432e4973569.png\" alt=\"\" title=\"\"/>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>","text":"Lua中的数据结构——表 表表是Lua语言中最主要（事实上也是唯一的）和强大的数据结构。 Lua语言中的表本质上是一种辅助数组，这种数组不仅可以使用数值作为索引，也可以使用字符串或其他任意类型的值作为索引（nil除外）。 Lua语言的表要么是值要么是变量，它们都是对象，表是一种动...","link":"","photos":[],"count_time":{"symbolsCount":"1.6k","symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%A1%A8\"><span class=\"toc-text\">表</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%A1%A8%E7%B4%A2%E5%BC%95\"><span class=\"toc-text\">表索引</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%A1%A8%E6%9E%84%E9%80%A0%E5%99%A8\"><span class=\"toc-text\">表构造器</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%95%B0%E7%BB%84%E3%80%81%E5%88%97%E8%A1%A8%E5%92%8C%E5%BA%8F%E5%88%97\"><span class=\"toc-text\">数组、列表和序列</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%81%8D%E5%8E%86%E8%A1%A8\"><span class=\"toc-text\">遍历表</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%89%E5%85%A8%E8%AE%BF%E9%97%AE\"><span class=\"toc-text\">安全访问</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%A1%A8%E6%A0%87%E5%87%86%E5%BA%93%EF%BC%9A\"><span class=\"toc-text\">表标准库：</span></a></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"LeetCode 150. Evaluate Reverse Polish Notation","uid":"9f85f1e7fd699a9f48cac697ebdd7c0c","slug":"zl/2016-01-01-694_LeetCode 150. Evaluate Reverse Polish Notation","date":"2024-04-03T03:47:35.931Z","updated":"2024-04-03T03:47:35.932Z","comments":true,"path":"api/articles/zl/2016-01-01-694_LeetCode 150. Evaluate Reverse Polish Notation.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"DescriptionEvaluate the value of an arithmetic expression in Reverse Polish Notation. Valid operators are +, -, *, /. Each operand may be an...","link":"","photos":[],"count_time":{"symbolsCount":"2.5k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Lua 汉字拼音首字母提取","uid":"7210045a47c00c031b29ac526b186e4c","slug":"zl/2016-01-01-693_Lua 汉字拼音首字母提取 ","date":"2024-04-03T03:47:35.927Z","updated":"2024-04-03T03:47:35.931Z","comments":true,"path":"api/articles/zl/2016-01-01-693_Lua 汉字拼音首字母提取 .json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"最近项目上有个需求，需要将一些联系人数据按照拼音首字母排序。google 了一番，竟然没有找到一个合适的 Lua 解决方案。倒是找到一个 lua-pinyin，粗略翻了下源码发现其是将所有的中文返回全部完整的拼音，原理是将所有汉字对应拼音创建好数据字典，载入 Lua，之后查询这个...","link":"","photos":[],"count_time":{"symbolsCount":598,"symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}