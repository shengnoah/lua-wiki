{"title":"In place iterative policy evaluation","uid":"e2c63129883e8fe4288a47221458cc20","slug":"zl/2016-01-01-713_In place iterative policy evaluation","date":"2024-04-03T03:47:35.946Z","updated":"2024-04-03T03:47:35.946Z","comments":true,"path":"api/articles/zl/2016-01-01-713_In place iterative policy evaluation.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<article class=\"entry-body\">\n<pre><code>  \t\t&lt;p&gt;Iterative Policy Evaluation的迭代过程一般有两种方式：&lt;/p&gt;\n</code></pre>\n<ul>\n  <li>使用两个数组，其中一个数组存储上一轮迭代的状态价值，另外一个数组存储本轮迭代中的状态价值，本轮迭代总是从上一轮迭代（老的）的状态价值取值，这样在迭代过程中老的状态价值不会受到影响。</li>\n  <li>使用一个数组来存储状态价值，并在迭代时实时更新状态价值，这样在迭代过程中能够更早的利用新的状态价值，此种更新状态价值的方法称为“in place iterative policy evaluation”。</li>\n</ul>\n<p>下面是两种不同的实现思路运行结果的对比图：</p>\n<p><img src=\"https://github.com/subaochen/subaochen.github.io/raw/master/images/rl/dp/sweep_inplace_iterative_policy_evaluation_error.png\" alt=\"sweep_inplace_iterative_policy_evaluation_error\"/></p>\n<p>尽管使用两个数组的迭代方法思路更清晰，但是in place iterative policy evaluation的收敛速度更快，因此在实际运用中，往往使用in place iterative policy evaluation。</p>\n<p>详细的实现代码参见：<a href=\"https://raw.githubusercontent.com/subaochen/subaochen.github.io/master/resources/grid_world.py\">grid world源码</a></p>\n<pre><code>  &lt;/article&gt;\n</code></pre>\n","text":" &lt;p&gt;Iterative Policy Evaluation的迭代过程一般有两种方式：&lt;/p&gt; 使用两个数组，其中一个数组存储上一轮迭代的状态价值，另外一个数组存储本轮迭代中的状态价值，本轮迭代总是从上一轮迭代（老的）的状态价值取值，这样在迭代过程中老的...","link":"","photos":[],"count_time":{"symbolsCount":448,"symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"lua_code_cache","uid":"329adc851783034a5dedf553adc4385b","slug":"zl/2016-01-01-715_lua_code_cache","date":"2024-04-03T03:47:35.947Z","updated":"2024-04-03T03:47:35.947Z","comments":true,"path":"api/articles/zl/2016-01-01-715_lua_code_cache.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":" lua_code_cache syntax: lua_code_cache on | off default: lua_code_cache on context: http, server, location, location if Enables or disables ...","link":"","photos":[],"count_time":{"symbolsCount":"2.6k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"十七、考虑使用Lazy evaluation(缓式评估)","uid":"32bd7dd57d3e1030842c4b81dd5b8aea","slug":"zl/2016-01-01-714_十七、考虑使用Lazy evaluation(缓式评估)","date":"2024-04-03T03:47:35.946Z","updated":"2024-04-03T03:47:35.947Z","comments":true,"path":"api/articles/zl/2016-01-01-714_十七、考虑使用Lazy evaluation(缓式评估).json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"从效率上看，最好的运算是从未执行过的运算。 拖延战术——缓式评估 在真正需要之前，不必急着为某物做一个副本，取而代之的是以拖延战术的方式——只要能够，就是使用其它副本 二、区分读和写 运用lazy evaluation和proxy classes（条款30），可以延迟决定读还是写...","link":"","photos":[],"count_time":{"symbolsCount":742,"symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}