{"title":"Lua","uid":"15b0cdc6d03f6c3f6bf8d3a7ff197317","slug":"zl/2016-01-01-952_Lua","date":"2024-04-03T03:47:36.226Z","updated":"2024-04-03T03:47:36.226Z","comments":true,"path":"api/articles/zl/2016-01-01-952_Lua.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<p>   我们要明确一个前提：Lua是动态型语言，变量是不需要类型定义，只需要为变量赋值。值可以存储在变量中，最为参数传递或结果返回。<br/>一 基本类型<br/>   Lua有8个基本类型：nil、boolean、number、string、userdata、function、thread、table</p>\n<p>   1 nil<br/>      表示一个无效的值，在条件表达式中相当于false<br/>    2 boolean<br/>       false和ture<br/>    3 number<br/>       表示双精度类型的实浮点数<br/>    4 string<br/>       字符串由一对双引号或单引号来表示<br/>    5 function<br/>       用C或者Lua写的函数<br/>    6 userdata<br/>       用来表示任意存储在变量中的C数据结构<br/>    7 thread<br/>       表示执行的独立线路，用于执行协同程序<br/>    8 table<br/>    Lua中的表（table）其实就是一个‘关联数组’（associative arrays），数组的索引可以是数字或者是字符串。在Lua中，table的创建是通过“构造表达式”来完成，例如最简单的表达式{}，用来创建一个空表。<br/>二 简单例子<br/>  1  我们可以使用type函数来测试指定变量或者值的类型</p>\n<pre><code>eg：\nWangBingdeMacBook-Pro:Hexo wangbing$ lua -i\nLua 5.3.3  Copyright (C) 1994-2016 Lua.org, PUC-Rio\n&gt; print(type(&#34;Lua test&#34;))\nstring\n&gt; print(type(100*1.2))\nnumber\n&gt; print(type(type))\nfunction\n&gt; print(type(false))\nboolean\n&gt;\n</code></pre><p>   2 nil<br/>       对于全局变量和table，nil还意味着“删除”操作。给全局变量或者table表里的变量一个nil值,相当于把他们删掉。<br/>       nil在进行比较的时候，需要加上双引号”:</p>\n<pre><code>eg：\n&gt;&gt; type(X)==nil\nstdin:9: unexpected symbol near &#39;==&#39;\n&gt; type(X)==&#34;nil&#34;\ntrue\n</code></pre><p>   3 boolean（布尔）<br/>     Lua中把false和nil看做“假”，其他都为真</p>\n<p>  4 number(数字)<br/>     Lua默认只有一种number类型，–double（双精度）类型<br/>  5 string （字符串）<br/>     用一堆双引号或者单引号表示，也可以用2个方括号“[[]]”来表示“一块”字符串</p>\n<pre><code>eg：\n&gt; string1 = &#34;SkyLigt 001&#34;\n&gt; string2 = &#39;SkyLigt 002&#39;\n&gt; string3 = [[&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;a href=&#34;www.baidu.com/&#34;&gt;Lua学习&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;]]\n&gt; print(string1)\nSkyLigt 001\n&gt; print(string2)\nSkyLigt 002\n&gt; print(string3)\n&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;a href=&#34;www.baidu.com/&#34;&gt;Lua学习&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;\n&gt;\n</code></pre><p>  在对一个数字字符串进行算术操作时，Lua会尝试将这个数字字符串转成一个数字</p>\n<pre><code>eg:\n&gt; print(&#34;2&#34; + 10)\n12.0\n&gt;\n</code></pre><p>字符串的连接使用 ..表示</p>\n<pre><code>eg：\n&gt; print(&#34;zhangsan&#34;..&#34;is studying&#34;..&#34;Lua&#34;)\nzhangsanis studyingLua\n&gt;\n</code></pre><p> 字符串的长度使用#表示</p>\n<pre><code>eg：\n&gt; stringLength = &#34;www.apple.com.hk&#34;\n&gt; print(#stringLength)\n16\n&gt;\n</code></pre><p>6 table (表)<br/>   在Lua中，table的创建是通过”构造表达式”。最简单构造表达式是{}，用来创建一个空表。也可以在表里添加一些数据，直接初始化表</p>\n<pre><code>eg:\n-- 创建一个空的 table\nlocal tbl1 = &#123;&#125;\n<p>– 直接初始表<br />\nlocal tbl2 = &#123;&quot;iOS Team&quot;, &quot;xxxxxx&quot;, &quot;Android Team&quot;, &quot;xxxx&quot;&#125;<br />\n</code></pre><p>   Lua 中的表（table）其实是一个”关联数组”（associative arrays），数组的索引可以是数字或者是字符串.<br/>   不同于其他语言的数组把 0 作为数组的初始索引，在 Lua 里表的默认初始索引一般以 1 开始。<br/>   table 不会固定长度大小，有新数据添加时 table 长度会自动增长，没初始的 table 都是 nil</p></p>\n<p>7  function（函数）</p>\n<p>  Lua 中，函数是被看作是”第一类值（First-Class Value）”，函数可以存在变量里:<br/>  function 可以以匿名函数（anonymous function）的方式通过参数传递</p>\n<p>  8 thread（线程）</p>\n<p>   在 Lua 里，最主要的线程是协同程序（coroutine）。它跟线程（thread）差不多，拥有自己独立的栈、局部变量和指令指针，可以跟其他协同程序共享全局变量和其他大部分东西。<br/>  线程跟协程的区别：线程可以同时多个运行，而协程任意时刻只能运行一个，并且处于运行状态的协程只有被挂起（suspend）时才会暂停。</p>\n<p>  9 userdata（自定义类型）</p>\n<p>  userdata 是一种用户自定义数据，用于表示一种由应用程序或 C/C++ 语言库所创建的类型，可以将任意 C/C++ 的任意数据类型的数据（通常是 struct 和 指针）存储到 Lua 变量中调用</p>","text":" 我们要明确一个前提：Lua是动态型语言，变量是不需要类型定义，只需要为变量赋值。值可以存储在变量中，最为参数传递或结果返回。一 基本类型 Lua有8个基本类型：nil、boolean、number、string、userdata、function、thread、table 1 ...","link":"","photos":[],"count_time":{"symbolsCount":"2.7k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"xLua热更新3之生成代码","uid":"dd376855338d26226b310de8b083f6d2","slug":"zl/2016-01-01-957_xLua热更新3之生成代码","date":"2024-04-03T03:47:36.227Z","updated":"2024-04-03T03:47:36.228Z","comments":true,"path":"api/articles/zl/2016-01-01-957_xLua热更新3之生成代码.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"思考并回答以下问题：1.如何创建一个空表？ 之前提到了生成代码的问题，是不是对这个概念很陌生？生成代码从广义上来说就是通过程序来生成代码。在xLua中也是如此，下面来看看在xLua中具体是什么。 什么是生成代码？生成代码是xLua支持的lua和C#间交互技术之一，这种技术通过生成...","link":"","photos":[],"count_time":{"symbolsCount":"4.1k","symbolsTime":"4 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Lua学习笔记三","uid":"4b35a0b2c2eeaf2c9c95d0a9f23365d0","slug":"zl/2016-01-01-953_Lua学习笔记三","date":"2024-04-03T03:47:36.226Z","updated":"2024-04-03T03:47:36.226Z","comments":true,"path":"api/articles/zl/2016-01-01-953_Lua学习笔记三.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"Lua中可以用三种方式定义字符串： 单引号 ‘hello world’ 双引号 “heool world” [[ ]] [[hello world]] 字符串操作12345678910111213141516171819202122232425262728293031323334...","link":"","photos":[],"count_time":{"symbolsCount":"3.4k","symbolsTime":"3 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}