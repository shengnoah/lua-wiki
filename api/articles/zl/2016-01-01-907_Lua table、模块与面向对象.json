{"title":"Lua table、模块与面向对象","uid":"2c7b59d286ea0f514f3312281292ce52","slug":"zl/2016-01-01-907_Lua table、模块与面向对象","date":"2024-04-03T03:47:36.178Z","updated":"2024-04-03T03:47:36.179Z","comments":true,"path":"api/articles/zl/2016-01-01-907_Lua table、模块与面向对象.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<p>很久之前接触过lua，最近在工作中又用到了一些，对lua这门语言又有了新的认识和理解。Lua是一门很简洁高效的语言,在openresty项目中大量使用，游戏开发中也使用lua来写一些脚本。在这里记录一下自己对lua中面向对象的理解。<br/></p>\n<p>table在lua中是一种kv的数据结构，也指由一些辅助函数组成的库。如：</p>\n<pre><code>local tb = &#123;name=&#34;zhangsan&#34;, age=23&#125; --此时变量tb为是一个table的数据结构\ntable.getn(tb) --此时便是调用了table库里的getn函数，获取tb的长度。\n</code></pre><p>在lua中table数组的下标索引通常从1开始计数，因为这表示的是位置，而在c/c++中数组从0开始，表示的是偏移量。在初始化一个table数组时，若不显示的使用键值对赋值，则默认会用数字作为下标，从1开始。栗子：</p>\n<pre><code>local person = &#123;name=&#34;zhangsan&#34;, 23, phone=138138138, addr=&#34;beijing&#34;&#125;\nprint(person[&#34;name&#34;]) -- zhangsan\nprint(person[1]) -- 23\n</code></pre><p>但一般不推荐上面这种混合的赋值方式。table中切记出现空洞，就是nil值被夹杂在非空值之间，这样在获取table长度的时候便会被截断。使得结果存在不可确定性。当删除table中的元素的时，不要用nil替换，建议使用remove来删除。<br/>元表(metatable)，其作用类似于c++中的操作符重载，通过定义metamethod来改变或增加table的行为。比如重定义__add操作，来实现两个table的并集。<br/>Lua中任何一个table都有其metatable，任何一个table都可以是其他table的metatable，一组相关联的表，可以共享一个metatable。<br/>例子：</p>\n<pre><code>local set1 = &#123;20, 30, 40&#125;\nlocal set2 = &#123;50, 60, 70&#125;\nlocal myadd = function(self, another)\n    ...\nend\nsetmetatable(set1, &#123;__add = myadd&#125;) -- 重载__add方法\nlocal set3 = set1 + set2\n</code></pre><p>重点说一下setmetatable，该函数为一个表设置元表，也可以这样来使用：</p>\n<pre><code>local set1 = setmetatable(&#123;20, 30, 40&#125;, &#123;__add = myadd&#125;)\n</code></pre><p>当两个table相加时，lua会检查table的metatable中是否有__add，有的话，便会调用此metamethod。</p>\n<h1 id=\"模块与类\"><a href=\"#模块与类\" class=\"headerlink\" title=\"模块与类\"></a>模块与类</h1><p>旧式的模块定义是通过module(“filename”, package.seeall)来显示声明一个包，这种方法将会返回一个由filename组成的table，并且还会定义一个包含该table的全局变量，这样在其他文件中也可以使用这个filename的全局变量。<br/>现在比较推荐的定义方式是，定一个table，然后把需要的函数放到table中，然后返回这个table就可以了，其实这也是lua中面向对象的实现。Lua中不存在类，但Lua可以模仿类的概念。每个对象都有其元表，当调用不属于对象的某些操作时，会到自己的元表中查找。<br/>如果我们有两个对象a和b：</p>\n<pre><code>setmetatable(a, &#123;__index=b&#125;)\n</code></pre><p>此操作就是让b作为a的元表。这样就可以认为，b是一个类，而a是实际的对象。<br/>我们通过一个例子来说明。</p>\n<pre><code>--complex.lua文件\nlocal complex =\n&#123;\n    r = 0,\n    i = 0\n&#125;\nfunction complex:new(r, i)\n    return setmetatable(&#123;r=r, i=i&#125;, &#123;__index = self&#125; )\nend\nfunction complex:add(c1)\n    self.r = self.r + c1.r\n    self.i = self.i + c1.i\nend\nfunction complex:output()\n    print(self.r, self.i)\nend\nreturn complex\n<p>–main.lua文件<br />\nlocal complex = require('complex')<br />\nlocal c = complex:new(1,2)<br />\nc:output() --1 2<br />\nlocal c2 = complex:new(2,3)<br />\nc:add(c2)<br />\nc:output() --3 5<br />\n</code></pre><p>当调用complex:new的时候，self其实就是指的complex，对象c当调用output的时候complex为其metatable，在对象c中找不到output，所以会从其metatable的__index对应的表中查找，故大致过程如下:</p></p>\n<pre><code>getmetatable(c).__index.output(c)\n</code></pre><p>以上我们通过在complex中添加new、add、output等方法来模拟实现了类的概念。</p>","text":"很久之前接触过lua，最近在工作中又用到了一些，对lua这门语言又有了新的认识和理解。Lua是一门很简洁高效的语言,在openresty项目中大量使用，游戏开发中也使用lua来写一些脚本。在这里记录一下自己对lua中面向对象的理解。 table在lua中是一种kv的数据结构，也指...","link":"","photos":[],"count_time":{"symbolsCount":"2.3k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%A8%A1%E5%9D%97%E4%B8%8E%E7%B1%BB\"><span class=\"toc-text\">模块与类</span></a></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"lua 与 C 交互","uid":"408a8e44ab8f1937b2d50b08485e1398","slug":"zl/2016-01-01-908_lua 与 C 交互","date":"2024-04-03T03:47:36.179Z","updated":"2024-04-03T03:47:36.182Z","comments":true,"path":"api/articles/zl/2016-01-01-908_lua 与 C 交互.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"lua和C交互的核心就是lua栈，lua和C的所有数据交互都是通过lua栈来完成的。 一. C调用luaC调用lua很简单，通常C以lua作为配置脚本，在运行时读取脚本数据，主要步骤： 加载脚本 luaL_loadfile 运行脚本 lua_pcall 获取数据 lua_getg...","link":"","photos":[],"count_time":{"symbolsCount":"4.8k","symbolsTime":"4 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Valuable Web","uid":"ce66c467eae287e23f82124ccbf5b77a","slug":"zl/2016-01-01-904_Valuable Web","date":"2024-04-03T03:47:36.177Z","updated":"2024-04-03T03:47:36.177Z","comments":true,"path":"api/articles/zl/2016-01-01-904_Valuable Web.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"这篇文章整理一下曾经在Google Reader上订阅的有价值的Blog。这些Blog都曾经或多或少的改变了我对待工作和生活的态度，谢谢这些作者。 ##Google Reader中的好网站 这些网站曾经在黑暗中为我点亮一盏盏指路的灯，希望你也能从中受益。 Mind Hacks 刘...","link":"","photos":[],"count_time":{"symbolsCount":187,"symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}