{"title":"使用lua","uid":"289e7df27ca56d00963fddf6d45270f2","slug":"zl/2016-01-01-68_使用lua","date":"2024-04-03T03:47:35.925Z","updated":"2024-04-03T03:47:35.926Z","comments":true,"path":"api/articles/zl/2016-01-01-68_使用lua.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<p>lua-cmsgpack是一个开源的MessagePack实现方式、纯C的库，没有任何其它依赖，编译后可以直接被lua调用，目前主要支持Lua 5.1/5.2/5.3 版本。<br/>1、什么是MessagePack？</p>\n<hr/>\n<p>官方的解释是：</p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">It&#39;s like JSON.</span><br/><span class=\"line\">but fast and small.</span><br/></pre></td></tr></tbody></table></figure>\n<p>跟JSON及其类似，但是比JSON更快并且占用空间更小，举个官方给出的例子，直接截官方图：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/3981501-506507d87dc809fb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"官方图.png\"/><br/>翻译官方的解释：<br/>MessagePack是一种高效的二进制序列化格式， 它允许在多种语言（如JSON）之间交换数据，但它越来越小， 小整数被编码为单个字节，典型的短字符串除了字符串本身之外还需要一个额外的字节。</p>\n<p>目前市面上流行的开发语言MessagePack几乎支持，官方的地址为：<a href=\"http://msgpack.org/Lua\" target=\"_blank\" rel=\"noopener noreferrer\">http://msgpack.org/Lua</a> MessagePack也提供了一套开源库，地址在：<a href=\"https://github.com/fperrad/lua-MessagePack/。\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/fperrad/lua-MessagePack/。</a></p>\n<p>但是，作者使用的是lua-cmsgpack，至于哪个比较优异，作者还没有去比较，主要是先发现了lua-cmsgpack，后面看了下README文件，使用方法应该是差不多的，大家可以拿来参考。</p>\n<h2 id=\"2、编译lua-cmsgpack\"><a href=\"#2、编译lua-cmsgpack\" class=\"headerlink\" title=\"2、编译lua-cmsgpack\"></a>2、编译lua-cmsgpack</h2><p>lua-cmsgpack包括官方提供的lua-MessagePack都需要自行编译，因为可能平台太多，所以官方没有为每一个平台提供编译好的版本。lua-cmsgpack的github地址为：<a href=\"https://github.com/antirez/lua-cmsgpack\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/antirez/lua-cmsgpack</a><br/>git clone下来之后需要安装cmake工具，mac平台直接在项目目录：</p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">cmake .</span><br/><span class=\"line\">make</span><br/></pre></td></tr></tbody></table></figure>\n<p>即可，当然需要预先安装lua，并且是5.1版本以上的。</p>\n<p>主要说下CentOS平台下cmake可能会出现的问题，如果cmake的过程出现以下错误：</p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">Could NOT find Lua51 (missing:  LUA_INCLUDE_DIR) </span><br/><span class=\"line\">...</span><br/><span class=\"line\">CMake Error at CMakeLists.txt:1 (cmake_minimum_required):</span><br/><span class=\"line\">CMake 2.8 or higher is required.  You are running version 2.6.4</span><br/><span class=\"line\">Configuring incomplete, errors occurred!</span><br/></pre></td></tr></tbody></table></figure>\n<p>出现以上错误的话，需要自行安装lua的一些依赖库，一般：</p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install lua lua-devel</span><br/></pre></td></tr></tbody></table></figure>\n<p>就可以了，如果还不行，再试试下面的命令：</p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">yum install ncurses-devel gcc gcc-c++ make</span><br/></pre></td></tr></tbody></table></figure>\n<p>编译完成之后会生成cmsgpack.so文件，使用的时候直接require进去即可</p>\n<h2 id=\"3、lua调用例子\"><a href=\"#3、lua调用例子\" class=\"headerlink\" title=\"3、lua调用例子\"></a>3、lua调用例子</h2><figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/><span class=\"line\">9</span><br/><span class=\"line\">10</span><br/><span class=\"line\">11</span><br/><span class=\"line\">12</span><br/><span class=\"line\">13</span><br/><span class=\"line\">14</span><br/><span class=\"line\">15</span><br/><span class=\"line\">16</span><br/><span class=\"line\">17</span><br/><span class=\"line\">18</span><br/><span class=\"line\">19</span><br/><span class=\"line\">20</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"number\">1</span> <span class=\"keyword\">local</span> cmsgpack = <span class=\"built_in\">require</span> <span class=\"string\">&#34;cmsgpack&#34;</span></span><br/><span class=\"line\"> <span class=\"number\">2</span></span><br/><span class=\"line\"> <span class=\"number\">3</span> <span class=\"keyword\">local</span> tba = {<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>}</span><br/><span class=\"line\"> <span class=\"number\">4</span></span><br/><span class=\"line\"> <span class=\"number\">5</span> <span class=\"keyword\">local</span> tbb = {</span><br/><span class=\"line\"> <span class=\"number\">6</span>     a = <span class=\"number\">1</span>,</span><br/><span class=\"line\"> <span class=\"number\">7</span>     b = <span class=\"number\">3</span></span><br/><span class=\"line\"> <span class=\"number\">8</span> }</span><br/><span class=\"line\"> <span class=\"number\">9</span></span><br/><span class=\"line\"><span class=\"number\">10</span> <span class=\"keyword\">local</span> msgpack = cmsgpack.pack(tba, tbb)</span><br/><span class=\"line\"><span class=\"number\">11</span></span><br/><span class=\"line\"><span class=\"number\">12</span> <span class=\"keyword\">local</span> res1, res2 = cmsgpack.<span class=\"built_in\">unpack</span>(msgpack)</span><br/><span class=\"line\"><span class=\"number\">13</span></span><br/><span class=\"line\"><span class=\"number\">14</span> <span class=\"keyword\">for</span> k, v <span class=\"keyword\">in</span> <span class=\"built_in\">pairs</span>(res1) <span class=\"keyword\">do</span></span><br/><span class=\"line\"><span class=\"number\">15</span>     <span class=\"built_in\">print</span>(k, v)</span><br/><span class=\"line\"><span class=\"number\">16</span> <span class=\"keyword\">end</span></span><br/><span class=\"line\"><span class=\"number\">17</span></span><br/><span class=\"line\"><span class=\"number\">18</span> <span class=\"keyword\">for</span> i, v <span class=\"keyword\">in</span> <span class=\"built_in\">pairs</span>(res2) <span class=\"keyword\">do</span></span><br/><span class=\"line\"><span class=\"number\">19</span>     <span class=\"built_in\">print</span>(i, v)</span><br/><span class=\"line\"><span class=\"number\">20</span> <span class=\"keyword\">end</span></span><br/></pre></td></tr></tbody></table></figure>\n<p>运行效果：</p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">#lua test_table.lua</span><br/><span class=\"line\">1       1</span><br/><span class=\"line\">2       2</span><br/><span class=\"line\">3       3</span><br/><span class=\"line\">a       1</span><br/><span class=\"line\">b       3</span><br/></pre></td></tr></tbody></table></figure>\n<p>cmsgpack.pack()可以把多个lua对象序列化成一个二进制msgpack，执行反序化的时候会返回对应数量的lua对象，非常的方便。</p>\n<h2 id=\"4、结合redis存储序列化后的msgpack\"><a href=\"#4、结合redis存储序列化后的msgpack\" class=\"headerlink\" title=\"4、结合redis存储序列化后的msgpack\"></a>4、结合redis存储序列化后的msgpack</h2><p>有趣的是redis也支持MessagePack，因此结合lua和lua-cmsgpack可以产生不错的化学反应，下面是一个简单的例子（结合OpenResty）：</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/><span class=\"line\">9</span><br/><span class=\"line\">10</span><br/><span class=\"line\">11</span><br/><span class=\"line\">12</span><br/><span class=\"line\">13</span><br/><span class=\"line\">14</span><br/><span class=\"line\">15</span><br/><span class=\"line\">16</span><br/><span class=\"line\">17</span><br/><span class=\"line\">18</span><br/><span class=\"line\">19</span><br/><span class=\"line\">20</span><br/><span class=\"line\">21</span><br/><span class=\"line\">22</span><br/><span class=\"line\">23</span><br/><span class=\"line\">24</span><br/><span class=\"line\">25</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">local</span> cmsgpack  = <span class=\"built_in\">require</span> <span class=\"string\">&#34;cmsgpack&#34;</span></span><br/><span class=\"line\"><span class=\"keyword\">local</span> redis     = <span class=\"built_in\">require</span> <span class=\"string\">&#34;resty.redis&#34;</span></span><br/><span class=\"line\"><span class=\"keyword\">local</span> red       = redis:new()</span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"keyword\">local</span> ok, err = red:connect(<span class=\"string\">&#34;127.0.0.1&#34;</span>, <span class=\"number\">6379</span>)</span><br/><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">not</span> ok <span class=\"keyword\">then</span></span><br/><span class=\"line\">   ngx.say(<span class=\"string\">&#34;failed to connect: &#34;</span>, err)</span><br/><span class=\"line\">   <span class=\"keyword\">return</span></span><br/><span class=\"line\">  <span class=\"keyword\">end</span></span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"keyword\">local</span> lua_table = {</span><br/><span class=\"line\">     a = <span class=\"number\">1</span>,</span><br/><span class=\"line\">     b = <span class=\"number\">3</span></span><br/><span class=\"line\">}</span><br/><span class=\"line\"><span class=\"keyword\">local</span> msgpack = cmsgpack.pack(lua_table)</span><br/><span class=\"line\"><span class=\"keyword\">local</span> ok, err = red:set(<span class=\"string\">&#34;msg&#34;</span>,  msgpack)</span><br/><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">not</span> ok <span class=\"keyword\">then</span></span><br/><span class=\"line\">   ngx.say(<span class=\"string\">&#34;failed to set dog: &#34;</span>, err)</span><br/><span class=\"line\">   <span class=\"keyword\">return</span></span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"keyword\">local</span> ret_pack  = red:get(<span class=\"string\">&#34;msg&#34;</span>)</span><br/><span class=\"line\"><span class=\"keyword\">local</span> ret_table = cmsgpack.<span class=\"built_in\">unpack</span>(ret_pack)</span><br/><span class=\"line\"></span><br/><span class=\"line\">ngx.say(ret_table.a + ret_table.b)</span><br/></pre></td></tr></tbody></table></figure>\n<p>测试返回结果：</p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">4</span><br/></pre></td></tr></tbody></table></figure>\n<p>在某些场合还是有不错应用场景的。</p>","text":"lua-cmsgpack是一个开源的MessagePack实现方式、纯C的库，没有任何其它依赖，编译后可以直接被lua调用，目前主要支持Lua 5.1/5.2/5.3 版本。1、什么是MessagePack？ 官方的解释是： 12It&#39;s like JSON.but fa...","link":"","photos":[],"count_time":{"symbolsCount":"2.4k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2%E3%80%81%E7%BC%96%E8%AF%91lua-cmsgpack\"><span class=\"toc-text\">2、编译lua-cmsgpack</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3%E3%80%81lua%E8%B0%83%E7%94%A8%E4%BE%8B%E5%AD%90\"><span class=\"toc-text\">3、lua调用例子</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4%E3%80%81%E7%BB%93%E5%90%88redis%E5%AD%98%E5%82%A8%E5%BA%8F%E5%88%97%E5%8C%96%E5%90%8E%E7%9A%84msgpack\"><span class=\"toc-text\">4、结合redis存储序列化后的msgpack</span></a></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Lua","uid":"15b0cdc6d03f6c3f6bf8d3a7ff197317","slug":"zl/2016-01-01-689_Lua","date":"2024-04-03T03:47:35.925Z","updated":"2024-04-03T03:47:35.925Z","comments":true,"path":"api/articles/zl/2016-01-01-689_Lua.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"Lua 是一种强大、高效、轻量级、可嵌入的脚本语言。 它支持过程编程、面向对象编程、函数编程、数据驱动编程和数据描述。 Lua 结合了简单的过程语法和基于关联数组和可扩展语义的强大数据描述结构。 Lua是动态类型化的，通过使用基于寄存器的虚拟机解释字节码来运行，并且具有带有增量垃...","link":"","photos":[],"count_time":{"symbolsCount":677,"symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"lua基础","uid":"17e0bfbfb6b4c3db4a03ab2e2f07d20b","slug":"zl/2016-01-01-687_lua基础","date":"2024-04-03T03:47:35.920Z","updated":"2024-04-03T03:47:35.920Z","comments":true,"path":"api/articles/zl/2016-01-01-687_lua基础.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":" &lt;i data-toggle=&quot;wy-nav-top&quot; class=&quot;fa fa-bars&quot;&gt;&lt;/i&gt; &lt;a href=&quot;../../index.html&quot;&gt;赵子清技术文章&lt;/...","link":"","photos":[],"count_time":{"symbolsCount":"4.5k","symbolsTime":"4 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}