{"title":"初识lua","uid":"f1559750c13189ccc810a523416ddb77","slug":"zl/2016-01-01-769_初识lua","date":"2024-04-03T03:47:36.008Z","updated":"2024-04-03T03:47:36.008Z","comments":true,"path":"api/articles/zl/2016-01-01-769_初识lua.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<h3 id=\"资源下载\"><a href=\"#资源下载\" class=\"headerlink\" title=\"资源下载\"></a>资源下载</h3><p><a href=\"http://www.github.com/starwing/lua-protobuf\" target=\"_blank\" rel=\"noopener noreferrer\">源代码网址</a></p>\n<p><a href=\"http://www.github.com/starwing/lua-protobuf/wiki\" target=\"_blank\" rel=\"noopener noreferrer\">lua-protobuf源代码文档</a></p>\n<p><a href=\"http://www.github.com/starwing/lua-protobuf/releases\" target=\"_blank\" rel=\"noopener noreferrer\">lua-protobuf源代码下载</a></p>\n<p>Git Clone代码到本地: 复制代码</p>\n<blockquote>\n<p>git clone <a href=\"http://www.github.com/starwing/lua-protobuf\" target=\"_blank\" rel=\"noopener noreferrer\">http://www.github.com/starwing/lua-protobuf</a></p>\n</blockquote>\n<p>Subversion代码到本地: 复制代码</p>\n<blockquote>\n<p>svn co –depth empty <a href=\"http://www.github.com/starwing/lua-protobuf\" target=\"_blank\" rel=\"noopener noreferrer\">http://www.github.com/starwing/lua-protobuf</a></p>\n</blockquote>\n<p>Checked out revision 1.</p>\n<blockquote>\n<p>cd repo</p>\n</blockquote>\n<blockquote>\n<p>svn up trunk</p>\n</blockquote>\n<h3 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a>用法</h3><h4 id=\"protoc-模块\"><a href=\"#protoc-模块\" class=\"headerlink\" title=\"protoc 模块\"></a>protoc 模块</h4><p>函数返回描述</p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/><span class=\"line\">9</span><br/><span class=\"line\">10</span><br/><span class=\"line\">11</span><br/><span class=\"line\">12</span><br/><span class=\"line\">13</span><br/><span class=\"line\">14</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">protoc.new()\tProroc对象\t创建新的编译器实例</span><br/><span class=\"line\">protoc.reload()\ttrue\t将所有google标准消息重新加载到 pb 模块中</span><br/><span class=\"line\">p:parse(string)\t表格\t将架构转换为 DescriptorProto 表</span><br/><span class=\"line\">p:parsefile(string)\t表格\t类似 p:parse()，但接受文件名</span><br/><span class=\"line\">p:compile(string)\t字符串\t将架构转换为二进制 *.pb 格式数据</span><br/><span class=\"line\">p:compilefile(string)\t字符串\t类似 p:compile()，但接受文件名</span><br/><span class=\"line\">p:load(string)\ttrue\t将架构加载到 pb 模块中</span><br/><span class=\"line\">p:loadfile(string)\ttrue\t类似 pb:loadfile()，但接受文件名</span><br/><span class=\"line\">p.loaded\t表格\t包含所有已经解析的DescriptorProto 表</span><br/><span class=\"line\">p.paths\t表格\t表包含导入搜索目录</span><br/><span class=\"line\">p.unknown_module\t请参见下面\t处理架构导入错误</span><br/><span class=\"line\">p.unknown_type\t请参见下面\t处理架构中的未知类型</span><br/><span class=\"line\">p.include_imports\tbool\t自动加载导入的Prototype</span><br/><span class=\"line\">要分析文本文件，你应该首先创建一个编译器实例：</span><br/></pre></td></tr></tbody></table></figure>\n<h4 id=\"pb-模块\"><a href=\"#pb-模块\" class=\"headerlink\" title=\"pb 模块\"></a>pb 模块</h4><p>pb 模块具有高级例程，可以用于 maniplate protobuf消息。</p>\n<p>在下面的函数中，有几种类型具有特殊的含义：</p>\n<p>type: 指示protobuf消息类型的字符串，”.Foo” 表示未声明 package 语句的原始文件中的类型。 “foo.Foo” 表示原始文件中声明 package foo;的类型</p>\n<p>data: 可以是字符串，pb.slice 值或者 pb.buffer 值。</p>\n<p>iterator: 可以在 Lua for in 语句中使用的函数，e.g.</p>\n<p>复制代码<br/>for name in pb.types() doprint(name)end<br/>当遇到错误时，所有函数都返回 nil, errmsg 。<br/>函数返回描述</p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/><span class=\"line\">9</span><br/><span class=\"line\">10</span><br/><span class=\"line\">11</span><br/><span class=\"line\">12</span><br/><span class=\"line\">13</span><br/><span class=\"line\">14</span><br/><span class=\"line\">15</span><br/><span class=\"line\">16</span><br/><span class=\"line\">17</span><br/><span class=\"line\">18</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">pb.clear()\t无\t清除所有类型</span><br/><span class=\"line\">pb.clear(type)\t无\t删除特定类型</span><br/><span class=\"line\">pb.load(data)\ttrue\t将二进制模式数据加载到 pb 模块中</span><br/><span class=\"line\">pb.loadfile(string)\ttrue\tpb.load() 相同，但接受文件名</span><br/><span class=\"line\">pb.encode(type, table)\t字符串\t将消息表编码为二进制形式</span><br/><span class=\"line\">pb.encode(type, table, b)\t缓冲区\t将消息表编码为二进制形式以缓冲</span><br/><span class=\"line\">pb.decode(type, data)\t表格\t将二进制消息解码为Lua表</span><br/><span class=\"line\">pb.decode(type, data, table)\t表格\t将二进制消息解码为给定的Lua表</span><br/><span class=\"line\">pb.pack(fmt,.. .)\t字符串\tbuffer.pack() 相同但返回字符串</span><br/><span class=\"line\">pb.unpack(data, fmt,.. .)\t值。\tslice.unpack() 相同但接受数据</span><br/><span class=\"line\">pb.types()\t迭代器\t迭代 pb 模块中的所有类型</span><br/><span class=\"line\">pb.type(type)\t请参见下面\t返回特定类型的信息</span><br/><span class=\"line\">pb.fields(type)\t迭代器\t迭代消息中的所有字段</span><br/><span class=\"line\">pb.field(type, string)\t请参见下面\t返回类型特定字段的信息</span><br/><span class=\"line\">pb.enum(type, string)\t号码\t按名称获取 enum的值</span><br/><span class=\"line\">pb.enum(type, number)\t字符串\t按值获取 enum的名称</span><br/><span class=\"line\">pb.defaults(type[, table])\t表格\t获取类型的默认表</span><br/><span class=\"line\">pb.option(string)\t字符串\t将选项设置为解码器/编码器</span><br/></pre></td></tr></tbody></table></figure>\n<p>你可以使用 pb.(type|field)<a href=\"\">s</a> 函数来检索已经加载消息的类型信息。</p>\n<p>pb.type() 为指定类型返回多个信息：</p>\n<p>名称：类型的完整qualitier名称，比如 。package 。typename”<br/>basename: 没有软件包前缀的类型名称，比如”typename””<br/>：”|”枚举”|”消息” 类型是否为map_entry类型，enum 类型或者消息类型。<br/>pb.types() 返回一个迭代器，如所有消息类型上的调用 pb.type() 。</p>\n<blockquote>\n<p>print(pb.type”MyType”)– list all types that loaded into pbfor name, basename, type in pb.types() doprint(name, basename, type)end</p>\n</blockquote>\n<p>pb.field() 为一种类型返回指定字段的信息：</p>\n<p>名称：字段名称<br/>编号：架构中的字段数<br/>类型：字段类型<br/>默认值：如果没有默认值，则为 nil<br/>可选”|”重复”|”：字段标签，可选或者重复，要求不支持<br/>如果这是一个字段，这是一个名称和索引<br/>然后 pb.fields() 迭代消息中的所有字段：</p>\n<blockquote>\n<p>print(pb.field(“MyType”, “the_first_field”))– notice that you needn’t receive all return values from iteratorfor name, number, type in pb.fields”MyType”doprint(name, number, type)end</p>\n</blockquote>\n<p>pb.enum() 映射来自 enum 名称和值：</p>\n<blockquote>\n<p>protoc:load[[enum Color { Red = 1; Green = 2; Blue = 3 }]]print(pb.enum(“Color”, “Red”)) –&gt; 1print(pb.enum(“Color”, 2)) –&gt;”Green”</p>\n</blockquote>\n<p>使用 pb.defaults()，你可以获得一个包含消息中所有默认值的表：</p>\n<blockquote>\n<p>check_load[[ message TestDefault { optional int32 defaulted_int = 10 [ default = 777 ]; optional bool defaulted_bool = 11 [ default = true ]; optional string defaulted_str = 12 [ default =”foo” ]; optional float defaulted_num = 13 [ default = 0.125 ]; } ]]print(require”serpent”.block(pb.defaults”TestDefault”))– output:– {– defaulted_bool = true,– defaulted_int = 777,– defaulted_num = 0.125,– defaulted_str =”foo”– } –[[table: 0x7f8c1e52b050]]</p>\n</blockquote>\n<p>转载自：<a href=\"https://www.helplib.com/GitHub/article_143162\" target=\"_blank\" rel=\"noopener noreferrer\">lua-protobuf,使用protobuf得Lua模块</a></p>","text":"资源下载源代码网址 lua-protobuf源代码文档 lua-protobuf源代码下载 Git Clone代码到本地: 复制代码 git clone http://www.github.com/starwing/lua-protobuf Subversion代码到本地: 复制...","link":"","photos":[],"count_time":{"symbolsCount":"3.2k","symbolsTime":"3 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%B5%84%E6%BA%90%E4%B8%8B%E8%BD%BD\"><span class=\"toc-text\">资源下载</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%94%A8%E6%B3%95\"><span class=\"toc-text\">用法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#protoc-%E6%A8%A1%E5%9D%97\"><span class=\"toc-text\">protoc 模块</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#pb-%E6%A8%A1%E5%9D%97\"><span class=\"toc-text\">pb 模块</span></a></li></ol></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"FDDB datasets and evaluation · KaLyo's Notes","uid":"86297aa03ba557c590355c17601cdd3f","slug":"zl/2016-01-01-768_FDDB datasets and evaluation · KaLyo's Notes","date":"2024-04-03T03:47:36.008Z","updated":"2024-04-03T03:47:36.008Z","comments":true,"path":"api/articles/zl/2016-01-01-768_FDDB datasets and evaluation · KaLyo's Notes.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"DATASETS人脸数据集，有大约2800多张图片。这里主要讲其用于人脸检测的部分。这个数据集也可以用于做人脸对齐（face alignment） 数据集主要来自于网络上新闻媒体里的图片。经过相似图片剔除后留下大约2800多张。分为10个folder，每个folder300张左右...","link":"","photos":[],"count_time":{"symbolsCount":"1.2k","symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"深入 Lua Garbage Collector(五)","uid":"c301632190015e10274da49fa0008c96","slug":"zl/2016-01-01-76_深入 Lua Garbage Collector(五)","date":"2024-04-03T03:47:36.008Z","updated":"2024-04-03T03:47:36.008Z","comments":true,"path":"api/articles/zl/2016-01-01-76_深入 Lua Garbage Collector(五).json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":" 有了前几天的基础，我们可以从顶向下来读 lua gc 部分的代码了。慢慢的，感觉我这个系列都可以叫跟着云风一起看Lua源码了，虽然自己看的是最新的5.3。挖个坑，之后应该会真的跟着云风大大的那本readinglua一起看完lua的最新源码。 lua_gc我们知道，lua 对外的...","link":"","photos":[],"count_time":{"symbolsCount":"11k","symbolsTime":"10 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}