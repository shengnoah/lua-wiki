{"title":"OpenWRT路由器设置界面中的Lua填坑","uid":"a8bb653ca9913e2a5fcf9590b1b04c81","slug":"zl/2016-01-01-989_OpenWRT路由器设置界面中的Lua填坑","date":"2024-04-03T03:47:36.240Z","updated":"2024-04-03T03:47:36.240Z","comments":true,"path":"api/articles/zl/2016-01-01-989_OpenWRT路由器设置界面中的Lua填坑.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<p>刚结束一个急活，主要是整理某个 OpenWRT 路由的设置界面，网页服务主要用的是 Nginx，网页用的是 BackBone 和 jQuery 配合，后端设置服务主要用的是 Lua（由 Nginx 代理）调用 OpenWRT 的 UCI 和 ubus。一开始我以为只需要前端稍微调整下就行了，后来发现后边跟着的 Lua 得一起整，顺带补了不少 OpenWRT 的基础知识，下边简单梳(还)理(债)…… \n                                        </p>\n                                        <h2 id=\"UCI\"><a href=\"#UCI\" class=\"headerlink\" title=\"UCI\"></a>UCI</h2>\n                                        <h3 id=\"基础知识\"><a href=\"#基础知识\" class=\"headerlink\" title=\"基础知识\"></a>基础知识</h3>\n                                        <p>UCI 是“Unified Configuration Interface”（统一配置界面）的缩写，是 OpenWrt 系统的核心配置框架，它的主要作用是整合系统里不同的设置项，并提供一个统一的接口。OpenWrt 系统配置文件默认被集中放在了 <code>/etc/config</code> 这里（当然也可以放在其它地方），这些 UCI 文件有自己特殊的语法，比如一个典型的无线配置可能是：</p>\n                                        <pre><code>config wifi-device &#39;radio0&#39;\n    option type &#39;mac80211&#39;\n    option channel &#39;auto&#39;\n    option hwmode &#39;11g&#39;\n    option path &#39;platform/qca953x_wmac&#39;\n    option htmode &#39;HT20&#39;\n    option disabled &#39;0&#39;\n<p>config wifi-iface<br />\noption ifname 'wlan0'<br />\noption device 'radio0'<br />\noption network 'lan'<br />\noption mode 'ap'<br />\noption encryption 'none'<br />\noption ssid 'TestSSID'<br />\n</code></pre><br />\n<p>这里以 config 开头的行代表了一个 config 节点，其格式为：<br/><code>config 'section-type' 'section'</code><br/>section-type 处的值是节点类型，而 section 则是节点名称。另外，config 节点允许匿名节点的存在（意即直接跳过<code>'section'</code>，就像第二个的 config 节点那样，<code>wifi-iface</code>只是节点类型而不是节点名，这里要注意），引号在 UCI 文件中也不是必须的，严格来讲只有值里带有空格或制表符时才需要使用，使用时也要注意，其必须成对出现才有效（比如一对单引号或者一对双引号，交叉使用会导致语法错误）。<br/>以 option 开头的是选项，格式为：<br/><code>option 'key' 'value'</code><br/>这是比较典型的 key-value 格式，就不再赘述了。除此之外，还有种 list 列表选项，被用来描述形如数组类的设置，格式与 option 非常相似：<br/><code>list 'list-key' 'list-value'</code><br/>如果 list-key 相同的话，那么这实际上就是个数组式的设置项，举个栗子，system 设置里的 NTP：</p><br />\n<pre><code>config timeserver 'ntp'<br />\noption enabled '1'<br />\noption enable_server '0'<br />\nlist server '0.openwrt.pool.ntp.org'<br />\nlist server '1.openwrt.pool.ntp.org'<br />\nlist server '2.openwrt.pool.ntp.org'<br />\nlist server '3.openwrt.pool.ntp.org'<br />\n</code></pre><br />\n<p>这里的 NTP Server 设置实际上就是个数组。</p><br />\n<h3 id=\"UCI-的调用\"><a href=\"#UCI-的调用\" class=\"headerlink\" title=\"UCI 的调用\"></a>UCI 的调用</h3><br />\n<p>在 OpenWRT 系统里调用 UCI 一般有两种方法，通过命令行或者是调用 Lua API。这里首先说命令行。<br/>OpenWRT 官方文档里提到，使用awk、grep等命令来解析Openwrt的配置文件是低效和不明智的做法，并建议在类似的场景下，应该优先使用命令行形式调用。<br/>UCI 命令行语法为（在命令行下直接输入 <code>uci</code> 即可看到）：</p><br />\n<pre><code>用法: uci [&lt;options&gt;] &lt;command&gt; [&lt;arguments&gt;]</p>\n<p>命令:<br />\nbatch<br />\nexport     [&lt;config&gt;]<br />\nimport     [&lt;config&gt;]<br />\nchanges    [&lt;config&gt;]<br />\ncommit     [&lt;config&gt;]<br />\nadd        &lt;config&gt; &lt;section-type&gt;<br />\nadd_list   &lt;config&gt;.&lt;section&gt;.&lt;option&gt;=&lt;string&gt;<br />\nshow       [&lt;config&gt;[.&lt;section&gt;[.&lt;option&gt;]]]<br />\nget        &lt;config&gt;.&lt;section&gt;[.&lt;option&gt;]<br />\nset        &lt;config&gt;.&lt;section&gt;[.&lt;option&gt;]=&lt;value&gt;<br />\ndelete     &lt;config&gt;[.&lt;section[.&lt;option&gt;]]<br />\nrename     &lt;config&gt;.&lt;section&gt;[.&lt;option&gt;]=&lt;name&gt;<br />\nrevert     &lt;config&gt;[.&lt;section&gt;[.&lt;option&gt;]]</p>\n<p>参数:<br />\n-c &lt;path&gt;  设置用于存储配置文件的文件夹 (默认位于: /etc/config)<br />\n-d &lt;str&gt;   使用'uci show'命令时，为 list 类型的值设置分隔符<br />\n-f &lt;file&gt;  使用指定的 &lt;file&gt; 作为输入，而不是默认的 stdin<br />\n-m         导入时，合并数据到现有的设置中<br />\n-n         导出时，命名匿名节 (默认)<br />\n-N         不要命名匿名节<br />\n-p &lt;path&gt;  添加一个配置文件的搜索路径<br />\n-P &lt;path&gt;  添加一个配置文件的搜索路径并将其作为默认设置<br />\n-q         安静默认 (不打印错误信息)<br />\n-s         强制使用严格模式 (在解析出现错误时停止，默认)<br />\n-S         关闭严格模式<br />\n-X         在'show'命令上显示匿名节点ID (如果有的话)<br />\n</code></pre><br />\n<p>平时（命令行下）常用的主要是 <code>show</code>，<code>get</code>，<code>set</code>，<code>changes</code> 和 <code>commit</code> 这几个。<br/>使用 UCI 时，需要特别注意下它的读写规则：UCI 在读取时，会首先读取内存中的缓存，而后才是文件；而写入则与此相反，增删改都是在操作缓存，需要手动提交才会将设置项写入到系统中。所以，在编写路由设置系统时，最后的提交操作是切不可忘的一步。<br/>还有一种调用 UCI 的方法，是使用 Lua，文末的参考内容[3]中有详细的 API 列表（记得在开头用 <code>local uci = require &quot;los.uci&quot;.cursor()</code> 语句引入）。<br/>在使用 Lua 调用时，有个需要注意的点是匿名节点，比如上文中的无线配置里，有个 <code>wifi-iface</code> 类型的匿名节点，在命令行里使用 <code>uci show wireless</code> 可以看到：</p><br />\n<pre><code>wireless.radio1=wifi-device<br />\nwireless.radio1.type='mac80211'<br />\nwireless.radio1.channel='auto'<br />\nwireless.radio1.hwmode='11g'<br />\nwireless.radio1.path='platform/qca953x_wmac'<br />\nwireless.radio1.htmode='HT20'<br />\nwireless.radio1.disabled='0'<br />\nwireless.@wifi-iface[0]=wifi-iface<br />\nwireless.@wifi-iface[0].ifname='wlan0'<br />\nwireless.@wifi-iface[0].device='mt7620'<br />\nwireless.@wifi-iface[0].network='lan'<br />\nwireless.@wifi-iface[0].mode='ap'<br />\nwireless.@wifi-iface[0].encryption='none'<br />\nwireless.@wifi-iface[0].ssid='TestSSID'<br />\n</code></pre><br />\n<p>这里可以看到很多键名类似 <code>@wifi-iface[0]</code> 的设置项，这就是匿名节点的设置项了。如果在命令行里加入 <code>-X</code> 参数变成 <code>uci -X show wireless</code>，则可以看到：</p><br />\n<pre><code>wireless.radio1=wifi-device<br />\nwireless.radio1.type='mac80211'<br />\nwireless.radio1.channel='auto'<br />\nwireless.radio1.hwmode='11g'<br />\nwireless.radio1.path='platform/qca953x_wmac'<br />\nwireless.radio1.htmode='HT20'<br />\nwireless.radio1.disabled='0'<br />\nwireless.cfg043579=wifi-iface<br />\nwireless.cfg043579.ifname='wlan1'<br />\nwireless.cfg043579.device='radio1'<br />\nwireless.cfg043579.network='lan'<br />\nwireless.cfg043579.mode='ap'<br />\nwireless.cfg043579.encryption='none'<br />\nwireless.cfg043579.ssid='TestSSID'<br />\n</code></pre><br />\n<p>这时 <code>@wifi-iface[0]</code> 变成了 <code>cfg043579</code>，这才是这个匿名节点真实的引用名（系统自动生成的）。<br/>而同样的，在撰写相对应的 Lua 语句时，也不能写成：</p><br />\n<pre class=\" language-lua\"><code class=\"language-lua\">uci<span class=\"token punctuation\">:</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">&quot;wireless&quot;</span><span class=\"token punctuation\">,</span> <span class=\"token string\">&quot;@wifi-iface[0]&quot;</span><span class=\"token punctuation\">,</span> <span class=\"token string\">&quot;ssid&quot;</span><span class=\"token punctuation\">,</span> <span class=\"token string\">&quot;NewSSID&quot;</span><span class=\"token punctuation\">)</span><br />\n</code></pre><br />\n<p>虽然可以在命令行执行 <code>uci set wireless.@wifi-iface[0].ssid='NewSSID'</code>，但是在 Lua 上这么写系统是不会鸟你的（更何况还有个隐性的问题，是设置被改动过后，匿名节点的位置有可能会变，比如会跑到 <code>@wifi-iface[1]</code> 去，这可能会发生在拥有多个匿名节点的配置文件里）。所以这个时候，就需要使用 <code>uci:foreach</code> 去遍历某个设置类型的所有设置节点（注：返回 false 终止遍历），在遍历出的内容里，有几个特殊的、键名以英文字符 <code>.</code> 开头的成员：</p><br />\n<ul><br />\n<li><code>[.index]</code>: 设置节点的索引</li><br />\n<li><code>[.name]</code>: 设置节点的名称（即真实的引用名，<code>cfg043579</code> 这种）</li><br />\n<li><code>[.type]</code>: 设置节点的类型（如 <code>wifi-iface</code>）</li><br />\n<li><code>[.anonymous]</code>: 指示该设置节点是否匿名</li><br />\n</ul><br />\n<p>这样，通过遍历所有项目并筛选符合条件的配置项，将 <code>[.name]</code> 中的内容缓存下来，就可以用：</p><br />\n<pre class=\" language-lua\"><code class=\"language-lua\">uci<span class=\"token punctuation\">:</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">&quot;wireless&quot;</span><span class=\"token punctuation\">,</span> <span class=\"token string\">&quot;cfg043579&quot;</span><span class=\"token punctuation\">,</span> <span class=\"token string\">&quot;ssid&quot;</span><span class=\"token punctuation\">,</span> <span class=\"token string\">&quot;NewSSID&quot;</span><span class=\"token punctuation\">)</span><br />\n</code></pre><br />\n<p>这种方法去调用了。<br/>这里放个自己写的用于遍历无线设置的函数（双频设备，每个频段只有一个信号，通过设备 ID 来识别）：</p><br />\n<pre class=\" language-lua\"><code class=\"language-lua\"><span class=\"token keyword\">function</span> <span class=\"token function\">getWirelessInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br />\n<span class=\"token keyword\">local</span> wifiConfig <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><br />\nuci<span class=\"token punctuation\">:</span><span class=\"token function\">foreach</span><span class=\"token punctuation\">(</span><br />\n<span class=\"token string\">&quot;wireless&quot;</span><span class=\"token punctuation\">,</span><br />\n<span class=\"token string\">&quot;wifi-iface&quot;</span><span class=\"token punctuation\">,</span><br />\n<span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><br />\n<span class=\"token keyword\">if</span> s<span class=\"token punctuation\">.</span>device <span class=\"token operator\"><mark></span> <span class=\"token string\">&quot;mt7620&quot;</span> <span class=\"token keyword\">then</span><br />\n<span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> wifiConfig<span class=\"token punctuation\">.</span>mt7620 <span class=\"token keyword\">then</span><br />\nwifiConfig<span class=\"token punctuation\">[</span><span class=\"token string\">&quot;mt7620&quot;</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><br />\n<span class=\"token keyword\">end</span><br />\n<span class=\"token keyword\">local</span> key <span class=\"token operator\">=</span> <span class=\"token string\">&quot;&quot;</span><br />\n<span class=\"token keyword\">if</span> s<span class=\"token punctuation\">.</span>key <span class=\"token keyword\">then</span><br />\nkey <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span>key<br />\n<span class=\"token keyword\">end</span><br />\nwifiConfig<span class=\"token punctuation\">.</span>mt7620 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><br />\nname <span class=\"token operator\">=</span> s<span class=\"token punctuation\">[</span><span class=\"token string\">&quot;.name&quot;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><br />\nssid <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span>ssid<span class=\"token punctuation\">,</span><br />\nency <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span>encryption<span class=\"token punctuation\">,</span><br />\npass <span class=\"token operator\">=</span> key<br />\n<span class=\"token punctuation\">&#125;</span><br />\n<span class=\"token keyword\">elseif</span> s<span class=\"token punctuation\">.</span>device <span class=\"token operator\"></mark></span> <span class=\"token string\">&quot;mt7612&quot;</span> <span class=\"token keyword\">then</span><br />\n<span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> wifiConfig<span class=\"token punctuation\">.</span>mt7612 <span class=\"token keyword\">then</span><br />\nwifiConfig<span class=\"token punctuation\">[</span><span class=\"token string\">&quot;mt7612&quot;</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><br />\n<span class=\"token keyword\">end</span><br />\n<span class=\"token keyword\">local</span> key <span class=\"token operator\">=</span> <span class=\"token string\">&quot;&quot;</span><br />\n<span class=\"token keyword\">if</span> s<span class=\"token punctuation\">.</span>key <span class=\"token keyword\">then</span><br />\nkey <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span>key<br />\n<span class=\"token keyword\">end</span><br />\nwifiConfig<span class=\"token punctuation\">.</span>mt7612 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><br />\nname <span class=\"token operator\">=</span> s<span class=\"token punctuation\">[</span><span class=\"token string\">&quot;.name&quot;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><br />\nssid <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span>ssid<span class=\"token punctuation\">,</span><br />\nency <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span>encryption<span class=\"token punctuation\">,</span><br />\npass <span class=\"token operator\">=</span> key<br />\n<span class=\"token punctuation\">&#125;</span><br />\n<span class=\"token keyword\">end</span><br />\n<span class=\"token keyword\">end</span><br />\n<span class=\"token punctuation\">)</span><br />\n<span class=\"token keyword\">return</span> wifiConfig<br />\n<span class=\"token keyword\">end</span><br />\n</code></pre><br />\n<p>不过，在实践中，我认为最有效的手段是将匿名节点转化成普通的具名节点，这样 Lua 就可以直接调用，比写挨个遍历内容的逻辑要简单也清晰的多。</p><br />\n<p>下边再说说 ubus。</p><br />\n<h2 id=\"ubus\"><a href=\"#ubus\" class=\"headerlink\" title=\"ubus\"></a>ubus</h2><br />\n<p>ubus 即是 OpenWrt micro bus 架构，是 OpenWrt 为了提供守护进程和应用程序间的通讯而开发的项目。简单来说，想获取系统运行的一些状态，是可以用 ubus 来查看的，而且相比用 UCI 查询，由于 ubus 获取的直接是系统信息而不是设置项，所以可以避免由于错误配置带来的配置项与系统状态不符合的问题。也是因为这个原因，我推荐读取设置(状态)时用 ubus，写入设置时用 UCI。<br/>当然 ubus 也并不是没有问题，目前比较通用的说法是，在数据内容超过 60k 时不建议用，另外如果有多线程、或者逻辑上有递归时也不建议用（指令发出以后，接受到的信息可能是另一条指令的返回内容）。</p><br />\n<h3 id=\"ubus-的调用\"><a href=\"#ubus-的调用\" class=\"headerlink\" title=\"ubus 的调用\"></a>ubus 的调用</h3><br />\n<p>同 UCI 类似，调用 ubus 也分为命令行方式与 Lua 调用方式。而与 UCI 将设置文件命名为包（package）不同的是，ubus 将其调度单位称为“命名空间”（namespace），系统后台会默认驻留一个名为 ubusd 的守护进程，使用友好的 JSON 格式进行交互。<br/>在命令行中输入 <code>ubus list</code> 就可以看到所有通过RPC服务器注册的命名空间：</p><br />\n<pre><code>dhcp<br />\nhostapd.wlan0<br />\nhostapd.wlan1<br />\nlog<br />\nnetwork<br />\nnetwork.device<br />\nnetwork.interface<br />\nnetwork.interface.lan<br />\nnetwork.interface.loopback<br />\nnetwork.interface.wan<br />\nnetwork.interface.wan6<br />\nnetwork.wireless<br />\nservice<br />\nsession<br />\nsystem<br />\nuci<br />\n</code></pre><br />\n<p>加个参数变成 <code>ubus -v list</code>，就可以详细列出这些命名空间所提供的方法了。调用方法用 <code>call</code> 关键字，比如，查看系统 WiFi 状态就可以用：</p><br />\n<pre class=\" language-bash\"><code class=\"language-bash\">ubus call network.wireless status <span class=\"token string\">'&#123;&#125;'</span><br />\n</code></pre><br />\n<p><em>（参数一定要带上，即使为空。格式为 JSON）</em></p><br />\n<p>除此以外，还有：</p><br />\n<ul><br />\n<li>获取系统信息（上线时间、内存用量、SWAP信息等）<br />\n<pre class=\" language-bash\"><code class=\"language-bash\">ubus call system info <span class=\"token string\">'&#123;&#125;'</span><br />\n</code></pre><br />\n</li><br />\n<li>获取设备信息（设备型号、固件版本等）<br />\n<pre class=\" language-bash\"><code class=\"language-bash\">ubus call system board <span class=\"token string\">'&#123;&#125;'</span><br />\n</code></pre><br />\n</li><br />\n<li>获取 WiFi 上已连接的客户端<br />\n<pre class=\" language-bash\"><code class=\"language-bash\">ubus call hostapd.wlan0 get_clients <span class=\"token string\">'&#123;&#125;'</span><br />\n</code></pre><br />\n</li><br />\n<li>获取路由物理设备信息（如 MAC 型号、工作状态等）<br />\n<pre class=\" language-bash\"><code class=\"language-bash\">ubus call network.device status <span class=\"token string\">'&#123;&quot;name&quot;:&quot;eth0&quot;&#125;'</span><br />\n</code></pre> 等等。<br/>除了命令行直接调用外，ubus 也可以使用 Lua 调用，由于没有 UCI 那劳什子匿名节点的问题，所以直接用<br />\n<pre class=\" language-lua\"><code class=\"language-lua\"><span class=\"token keyword\">local</span> ubus <span class=\"token operator\">=</span> require <span class=\"token string\">&quot;ubus&quot;</span><br />\n</code></pre> 引入，在调用前用<br />\n<pre class=\" language-lua\"><code class=\"language-lua\"><span class=\"token keyword\">local</span> conn <span class=\"token operator\">=</span> ubus<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br />\n</code></pre> 连接服务，在调用后用<br />\n<pre class=\" language-lua\"><code class=\"language-lua\">conn<span class=\"token punctuation\">:</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br />\n</code></pre> 关闭就好。<br/>比如我自己写的一段从 ubus 上拿 WiFi 信息的函数：<br />\n<pre class=\" language-lua\"><code class=\"language-lua\"><span class=\"token keyword\">local</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getWirelessStatus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br />\n<span class=\"token keyword\">local</span> conn <span class=\"token operator\">=</span> ubus<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br />\n<span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> conn <span class=\"token keyword\">then</span><br />\n<span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">&quot;Failed to connect to ubusd&quot;</span><span class=\"token punctuation\">)</span><br />\n<span class=\"token keyword\">end</span><br />\n<span class=\"token keyword\">local</span> info <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><br />\n<span class=\"token keyword\">local</span> status <span class=\"token operator\">=</span> conn<span class=\"token punctuation\">:</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token string\">&quot;network.wireless&quot;</span><span class=\"token punctuation\">,</span> <span class=\"token string\">&quot;status&quot;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><br />\n<span class=\"token keyword\">for</span> k<span class=\"token punctuation\">,</span> v <span class=\"token keyword\">in</span> <span class=\"token function\">pairs</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span><br />\ninfo<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> v<br />\n<span class=\"token keyword\">end</span><br />\nconn<span class=\"token punctuation\">:</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br />\n<span class=\"token keyword\">return</span> info<br />\n<span class=\"token keyword\">end</span><br />\n</code></pre><br />\n</li><br />\n</ul><br />\n<hr/><br />\n<h2 id=\"参考内容\"><a href=\"#参考内容\" class=\"headerlink\" title=\"参考内容\"></a>参考内容</h2><br />\n<ol><br />\n<li><a href=\"https://openwrt.org/start?id=zh/docs/guide-user/base-system/uci\" target=\"_blank\" rel=\"noopener noreferrer\">OpenWRT官网 - UCI系统</a></li><br />\n<li><a href=\"https://openwrt.org/start?id=zh/docs/techref/uci\" target=\"_blank\" rel=\"noopener noreferrer\">OpenWRT官网 - UCI技术参考资料</a></li><br />\n<li><a href=\"https://htmlpreview.github.io/?https://raw.githubusercontent.com/openwrt/luci/master/documentation/api/modules/luci.model.uci.html\" target=\"_blank\" rel=\"noopener noreferrer\">LuaDoc - luci.model.uci (英)</a></li><br />\n<li><a href=\"https://openwrt.org/start?id=zh/docs/techref/ubus\" target=\"_blank\" rel=\"noopener noreferrer\">OpenWRT官网 - ubus</a></li><br />\n</ol></p>\n","text":"刚结束一个急活，主要是整理某个 OpenWRT 路由的设置界面，网页服务主要用的是 Nginx，网页用的是 BackBone 和 jQuery 配合，后端设置服务主要用的是 Lua（由 Nginx 代理）调用 OpenWRT 的 UCI 和 ubus。一开始我以为只需要前端稍微调...","link":"","photos":[],"count_time":{"symbolsCount":"7.8k","symbolsTime":"7 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#UCI\"><span class=\"toc-text\">UCI</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86\"><span class=\"toc-text\">基础知识</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#UCI-%E7%9A%84%E8%B0%83%E7%94%A8\"><span class=\"toc-text\">UCI 的调用</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#ubus\"><span class=\"toc-text\">ubus</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#ubus-%E7%9A%84%E8%B0%83%E7%94%A8\"><span class=\"toc-text\">ubus 的调用</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8F%82%E8%80%83%E5%86%85%E5%AE%B9\"><span class=\"toc-text\">参考内容</span></a></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Lua table、模块与面向对象","uid":"2c7b59d286ea0f514f3312281292ce52","slug":"zl/2016-01-01-988_Lua table、模块与面向对象","date":"2024-04-03T03:47:36.240Z","updated":"2024-04-03T03:47:36.240Z","comments":true,"path":"api/articles/zl/2016-01-01-988_Lua table、模块与面向对象.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"很久之前接触过lua，最近在工作中又用到了一些，对lua这门语言又有了新的认识和理解。Lua是一门很简洁高效的语言,在openresty项目中大量使用，游戏开发中也使用lua来写一些脚本。在这里记录一下自己对lua中面向对象的理解。 table在lua中是一种kv的数据结构，也指...","link":"","photos":[],"count_time":{"symbolsCount":"2.3k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Lua的and与or","uid":"71cb346a59482d5dd4b066a2de9b0072","slug":"zl/2016-01-01-98_Lua的and与or","date":"2024-04-03T03:47:36.240Z","updated":"2024-04-03T03:47:36.240Z","comments":true,"path":"api/articles/zl/2016-01-01-98_Lua的and与or.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"很早就知道lua的and与or的巧妙用法： local str = num==1 and &#34;one&#34; or &#34;not one&#34; 这句话可以简洁的表达如下意思： local str = &#34;&#34; if num==1 then str = ...","link":"","photos":[],"count_time":{"symbolsCount":"1.4k","symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}