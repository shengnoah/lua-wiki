{"title":"Redis慢查询、Pipeline、事务与Lua、Bitmaps、发布订阅","uid":"2eceeeadcd601ca2a9fee495ed73c176","slug":"zl/2016-01-01-572_Redis慢查询、Pipeline、事务与Lua、Bitmaps、发布订阅","date":"2024-04-03T03:47:35.825Z","updated":"2024-04-03T03:47:35.825Z","comments":true,"path":"api/articles/zl/2016-01-01-572_Redis慢查询、Pipeline、事务与Lua、Bitmaps、发布订阅.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<hr/>\n<p><code>Redis</code>提供的5种数据结构已经足够强大，但除此之外，<code>Redis</code>还提供了诸如慢查询分析、功能强大的<code>Redis Shell</code>、<code>Pipeline</code>、事务与Lua脚本、<code>Bitmaps</code>、<code>HyperLogLog</code>、发布订阅、<code>GEO</code>等附加功能，这些功能可以在某些场景发挥重要的作用。</p>\n<h3 id=\"慢查询分析\"><a href=\"#慢查询分析\" class=\"headerlink\" title=\"慢查询分析\"></a>慢查询分析</h3><p>许多存储系统（例如<code>MySQL</code>）提供慢查询日志帮助开发和运维人员定位系统存在的慢操作。所谓慢查询日志就是系统在命令执行前后计算每条命令的执行时间，当超过预设阀值，就将这条命令的相关信息（例如：发生时间，耗时，命令的详细信息）记录下来，<code>Redis</code>也提供了类似的功能。</p>\n<p><code>Redis</code>客户端执行一条命令经历4个过程：发送命令、命令排队、命令执行、返回结果</p>\n<h4 id=\"慢查询的两个配置参数\"><a href=\"#慢查询的两个配置参数\" class=\"headerlink\" title=\"慢查询的两个配置参数\"></a>慢查询的两个配置参数</h4><p><code>slowlog-log-slower-than</code>： 它的单位是微秒，默认值是10000，假如执行了一条“很慢”的命令（例如keys*），如果它的执行时间超过了10000微秒，那么它将被记录在慢查询日志中。<code>slowlog-log-slower-than=0</code>会记录所有的命令，<code>slowlog-log-slower-than&lt;0</code>对于任何命令都不会进行记录。</p>\n<p><code>slowlog-max-len</code>：<code>Redis</code>使用了一个列表来存储慢查询日志，<code>slowlog-max-len</code>就是列表的最大长度。一个新的命令满足慢查询条件时插入到这个列表中，当慢查询日志列表已处于其最大长度时，最早插入的一个命令将从列表中移出，例如<code>slowlog-max-len</code>设置为5，当有第6条慢查询插入的话，那么队头的第一条数据就出列，第6条慢查询就会入列。</p>\n<p>在<code>Redis</code>中有两种修改配置的方法:</p>\n<ul>\n<li>修改配置文件</li>\n<li>使用<code>config set</code>命令动态修改</li>\n</ul>\n<p>下面使用<code>config set</code>命令将<code>slowlog-log-slower-than</code>设置为20000微秒，<code>slowlog-max-len</code>设置为1000，<code>config rewrite</code>将配置持久化到本地配置文件：</p>\n<pre><code>config set slowlog-log-slower-than 20000\nconfig set slowlog-max-len 1000\nconfig rewrite\n</code></pre><h5 id=\"获取慢查询日志\"><a href=\"#获取慢查询日志\" class=\"headerlink\" title=\"获取慢查询日志\"></a>获取慢查询日志</h5><p>slowlog get [n]</p>\n<p>参数n可以指定条数：</p>\n<pre><code>127.0.0.1:6379&gt; slowlog get\n1) 1) (integer) 666\n2) (integer) 1456786500\n3) (integer) 11615\n4) 1) &#34;BGREWRITEAOF&#34;\n2) 1) (integer) 665\n2) (integer) 1456718400\n3) (integer) 12006\n4) 1) &#34;SETEX&#34;\n2) &#34;video_info_200&#34;\n3) &#34;300&#34;\n4) &#34;2&#34;\n</code></pre><p>可以看到每个慢查询日志有4个属性组成，分别是慢查询日志的标识id、发生时间戳、命令耗时、执行命令和参数。</p>\n<h5 id=\"获取慢查询日志列表当前的长度\"><a href=\"#获取慢查询日志列表当前的长度\" class=\"headerlink\" title=\"获取慢查询日志列表当前的长度\"></a>获取慢查询日志列表当前的长度</h5><pre><code>127.0.0.1:6379&gt; slowlog len\n(integer) 45\n</code></pre><h5 id=\"慢查询日志重置\"><a href=\"#慢查询日志重置\" class=\"headerlink\" title=\"慢查询日志重置\"></a>慢查询日志重置</h5><pre><code>127.0.0.1:6379&gt; slowlog reset\nOK\n127.0.0.1:6379&gt; slowlog len\n(integer) 0\n</code></pre><h4 id=\"Pipeline\"><a href=\"#Pipeline\" class=\"headerlink\" title=\"Pipeline\"></a>Pipeline</h4><p><code>Redis</code>提供了批量操作命令（例如<code>mget</code>、<code>mset</code>等），有效地节约<code>RTT</code>。但大部分命令是不支持批量操作的，例如要执行n次<code>hgetall</code>命令，并没有<code>mhgetall</code>命令存在，需要消耗n次<code>RTT</code>。</p>\n<p><code>Pipeline</code>（流水线）机制能改善上面这类问题，它能将一组<code>Redis</code>命令进行组装，通过一次<code>RTT</code>传输给<code>Redis</code>，再将这组<code>Redis</code>命令的执行结果按顺序返回给客户端。</p>\n<p>可以使用<code>Pipeline</code>模拟出批量操作的效果，但是在使用时要注意它与原生批量命令的区别，具体包含以下几点：</p>\n<ul>\n<li>原生批量命令是原子的，<code>Pipeline</code>是非原子的。</li>\n<li>原生批量命令是一个命令对应多个key，<code>Pipeline</code>支持多个命令。</li>\n<li>原生批量命令是<code>Redis</code>服务端支持实现的，而<code>Pipeline</code>需要服务端和客户端的共同实现。</li>\n</ul>\n<p>每次<code>Pipeline</code>组装的命令个数不能没有节制，否则一次组装<code>Pipeline</code>数据量过大，一方面会增加客户端的等待时间，另一方面会造成一定的网络阻塞，可以将一次包含大量命令的<code>Pipeline</code>拆分成多次较小的<code>Pipeline</code>来完成。</p>\n<h4 id=\"事务与Lua\"><a href=\"#事务与Lua\" class=\"headerlink\" title=\"事务与Lua\"></a>事务与Lua</h4><p>为了保证多条命令组合的原子性，<code>Redis</code>提供了简单的事务功能以及集成<code>Lua</code>脚本来解决这个问题。</p>\n<h5 id=\"事务\"><a href=\"#事务\" class=\"headerlink\" title=\"事务\"></a>事务</h5><p>事务表示一组动作，要么全部执行，要么全部不执行。例如在社交网站上用户A关注了用户B，那么需要在用户A的关注表中加入用户B，并且在用户B的粉丝表中添加用户A，这两个行为要么全部执行，要么全部不执行，否则会出现数据不一致的情况。</p>\n<p><code>Redis</code>提供了简单的事务功能，将一组需要一起执行的命令放到<code>multi</code>和<code>exec</code>两个命令之间。<code>multi</code>命令代表事务开始，<code>exec</code>命令代表事务结束，它们之间的命令是原子顺序执行的。</p>\n<pre><code>127.0.0.1:6379&gt; multi\nOK\n127.0.0.1:6379&gt; sadd user:a:follow user:b\nQUEUED\n127.0.0.1:6379&gt; sadd user:b:fans user:a\nQUEUED\n</code></pre><p><code>sadd</code>命令此时的返回结果是<code>QUEUED</code>，代表命令并没有真正执行，而是暂时保存在<code>Redis</code>中。如果此时另一个客户端执行<code>sismember user:a:follow user:b</code>返回结果应该为0。</p>\n<pre><code>127.0.0.1:6379&gt; sismember user:a:follow user:b\n(integer) 0\n</code></pre><p>只有当<code>exec</code>执行后，用户A关注用户B的行为才算完成：</p>\n<pre><code>127.0.0.1:6379&gt; exec\n1) (integer) 1\n2) (integer) 1\n</code></pre><p>另一个客户端：</p>\n<pre><code>127.0.0.1:6379&gt; sismember user:a:follow user:b\n(integer) 1\n</code></pre><p>如果要停止事务的执行，可以使用<code>discard</code>命令代替<code>exec</code>命令即可。</p>\n<p>如果事务中的命令出现错误，<code>Redis</code>的处理机制也不尽相同:</p>\n<h6 id=\"命令错误\"><a href=\"#命令错误\" class=\"headerlink\" title=\"命令错误\"></a>命令错误</h6><p>例如下面操作错将set写成了sett，属于语法错误，会造成整个事务无法执行，key和counter的值未发生变化:</p>\n<pre><code>127.0.0.1:6379&gt; mget key counter\n1) &#34;hello&#34;\n2) &#34;100&#34;\n127.0.0.1:6379&gt; multi\nOK\n127.0.0.1:6379&gt; sett key world\n(error) ERR unknown command &#39;sett&#39;\n127.0.0.1:6379&gt; incr counter\nQUEUED\n127.0.0.1:6379&gt; exec\n(error) EXECABORT Transaction discarded because of previous errors.\n</code></pre><h6 id=\"运行时错误\"><a href=\"#运行时错误\" class=\"headerlink\" title=\"运行时错误\"></a>运行时错误</h6><p>例如用户B在添加粉丝列表时，误把<code>sadd</code>命令写成了<code>zadd</code>命令，这种就是运行时命令，因为语法是正确的：</p>\n<pre><code>127.0.0.1:6379&gt; multi\nOK\n127.0.0.1:6379&gt; sadd user:a:follow user:b\nQUEUED\n127.0.0.1:6379&gt; zadd user:b:fans 1 user:a\nQUEUED\n127.0.0.1:6379&gt; exec\n1) (integer) 0\n2) (error) WRONGTYPE Operation against a key holding the wrong kind of value\n127.0.0.1:6379&gt; sismember user:a:follow user:b\n(integer) 1\n</code></pre><p>可以看到<code>Redis</code>并不支持回滚功能，<code>sadd user:a:follow user:b</code>命令已经执行成功，开发人员需要自己修复这类问题。</p>\n<p>有些应用场景需要在事务之前，确保事务中的key没有被其他客户端修改过，才执行事务，否则不执行（类似乐观锁）。<code>Redis</code>提供了<code>watch</code>命令来解决这类问题。</p>\n<p>“客户端-1”在执行<code>multi</code>之前执行了<code>watch</code>命令，“客户端-2”在“客户端-1”执行<code>exec</code>之前修改了key值，造成事务没有执行（<code>exec</code>结果为<code>nil</code>）</p>\n<p>客户端1：</p>\n<pre><code>127.0.0.1:6379&gt; set key &#34;java&#34;\nOK\n127.0.0.1:6379&gt; watch key\nOK\n127.0.0.1:6379&gt; multi\nOK\n</code></pre><p>客户端2：</p>\n<pre><code>127.0.0.1:6379&gt; append key python\n(integer) 10\n</code></pre><p>客户端1：</p>\n<pre><code>127.0.0.1:6379&gt; append key jedis\nQUEUED\n127.0.0.1:6379&gt; exec\n(nil)\n127.0.0.1:6379&gt; get key\n&#34;javapython&#34;\n</code></pre><p><code>Redis</code>提供了简单的事务，之所以说它简单，主要是因为它不支持事务中的回滚特性，同时无法实现命令之间的逻辑关系计算。</p>\n<h5 id=\"Redis与Lua\"><a href=\"#Redis与Lua\" class=\"headerlink\" title=\"Redis与Lua\"></a>Redis与Lua</h5><h6 id=\"在Redis中使用Lua\"><a href=\"#在Redis中使用Lua\" class=\"headerlink\" title=\"在Redis中使用Lua\"></a>在Redis中使用Lua</h6><p>在<code>Redis</code>中执行<code>Lua</code>脚本有两种方法：<code>eval</code>和<code>evalsha</code>。</p>\n<p><strong>eval</strong></p>\n<p>eval 脚本内容 key个数 key列表 参数列表</p>\n<pre><code>127.0.0.1:6379&gt; eval &#39;return &#34;hello &#34; .. KEYS[1] .. ARGV[1]&#39; 1 redis world\n&#34;hello redisworld&#34;\n</code></pre><p>此时KEYS[1]=”redis”，ARGV[1]=”world”，所以最终的返回结果是”hello redisworld”。</p>\n<p>如果<code>Lua</code>脚本较长，还可以使用<code>redis-cli--eval</code>直接执行文件。</p>\n<p><code>eval</code>命令和<code>--eval</code>参数本质是一样的，客户端如果想执行<code>Lua</code>脚本，首先在客户端编写好<code>Lua</code>脚本代码，然后把脚本作为字符串发送给服务端，服务端会将执行结果返回给客户端。</p>\n<p><strong>evalsha</strong></p>\n<p>除了使用<code>eval</code>，<code>Redis</code>还提供了<code>evalsha</code>命令来执行<code>Lua</code>脚本。首先要将<code>Lua</code>脚本加载到<code>Redis</code>服务端，得到该脚本的<code>SHA1</code>校验和，<code>evalsha</code>命令使用<code>SHA1</code>作为参数可以直接执行对应<code>Lua</code>脚本，避免每次发送<code>Lua</code>脚本的开销。这样客户端就不需要每次执行脚本内容，而脚本也会常驻在服务端，脚本功能得到了复用。</p>\n<p><strong>加载脚本：</strong> <code>script load</code>命令可以将脚本内容加载到<code>Redis</code>内存中，例如下面将<code>lua_get.lua</code>加载到<code>Redis</code>中，得到<code>SHA1</code>：</p>\n<pre><code>[heql@ubuntu ~]$ redis-cli script load &#34;$(cat lua_get.lua)&#34;\n&#34;7413dc2440db1fea7c0a0bde841fa68eefaf149c&#34;\n</code></pre><p><strong>执行脚本：</strong> <code>evalsha</code>的使用方法如下，参数使用<code>SHA1</code>值，执行逻辑和<code>eval</code>一致。</p>\n<p>evalsha 脚本SHA1值 key个数 key列表 参数列表</p>\n<pre><code>127.0.0.1:6379&gt; evalsha 7413dc2440db1fea7c0a0bde841fa68eefaf149c 1 redis world\n&#34;hello redisworld&#34;\n</code></pre><h6 id=\"Lua的Redis-API\"><a href=\"#Lua的Redis-API\" class=\"headerlink\" title=\"Lua的Redis API\"></a>Lua的Redis API</h6><p><code>Lua</code>可以使用<code>redis.call</code>函数实现对<code>Redis</code>的访问：</p>\n<pre><code>127.0.0.1:6379&gt; eval &#39;return redis.call(&#34;set&#34;, KEYS[1], ARGV[1])&#39; 1 hello world\nOK\n127.0.0.1:6379&gt; eval &#39;return redis.call(&#34;get&#34;, KEYS[1])&#39; 1 hello\n&#34;world&#34;\n</code></pre><p>除此之外<code>Lua</code>还可以使用<code>redis.pcall</code>函数实现对Redis的调用，<code>redis.call</code>和<code>redis.pcall</code>的不同在于，如果<code>redis.call</code>执行失败，那么脚本执行结束会直接返回错误，而<code>redis.pcall</code>会忽略错误继续执行脚本。</p>\n<p><code>Lua</code>脚本功能为<code>Redis</code>开发和运维人员带来如下三个好处：</p>\n<ul>\n<li><code>Lua</code>脚本在<code>Redis</code>中是原子执行的，执行过程中间不会插入其他命令。</li>\n<li><code>Lua</code>脚本可以帮助开发和运维人员创造出自己定制的命令，并可以将这些命令常驻在<code>Redis</code>内存中，实现复用的效果。</li>\n<li><code>Lua</code>脚本可以将多条命令一次性打包，有效地减少网络开销。</li>\n</ul>\n<h5 id=\"Redis如何管理Lua脚本\"><a href=\"#Redis如何管理Lua脚本\" class=\"headerlink\" title=\"Redis如何管理Lua脚本\"></a>Redis如何管理Lua脚本</h5><p><code>Redis</code>提供了4个命令实现对<code>Lua</code>脚本的管理：</p>\n<h6 id=\"script-load\"><a href=\"#script-load\" class=\"headerlink\" title=\"script load\"></a>script load</h6><p>此命令用于将<code>Lua</code>脚本加载到<code>Redis</code>内存中。</p>\n<h6 id=\"script-exists\"><a href=\"#script-exists\" class=\"headerlink\" title=\"script exists\"></a>script exists</h6><p>scripts exists sha1 [sha1 …]</p>\n<p>此命令用于判断<code>sha1</code>是否已经加载到<code>Redis</code>内存中：</p>\n<pre><code>127.0.0.1:6379&gt; script exists a5260dd66ce02462c5b5231c727b3f7772c0bcc5\n1) (integer) 1\n</code></pre><p>返回结果代表<code>sha1[sha1…]</code>被加载到<code>Redis</code>内存的个数。</p>\n<h6 id=\"script-flush\"><a href=\"#script-flush\" class=\"headerlink\" title=\"script flush\"></a>script flush</h6><p>此命令用于清除<code>Redis</code>内存已经加载的所有<code>Lua</code>脚本。</p>\n<h6 id=\"script-kill\"><a href=\"#script-kill\" class=\"headerlink\" title=\"script kill\"></a>script kill</h6><p>此命令用于杀掉正在执行的<code>Lua</code>脚本。如果<code>Lua</code>脚本比较耗时，甚至<code>Lua</code>脚本存在问题，那么此时<code>Lua</code>脚本的执行会阻塞Redis，直到脚本执行完毕或者外部进行干预将其结束。</p>\n<p>执行<code>Lua</code>脚本，进入死循环，当前客户端会阻塞：</p>\n<pre><code>127.0.0.1:6379&gt; eval &#39;while 1==1 do end&#39; 0\n</code></pre><p><code>Redis</code>提供了一个<code>lua-time-limit</code>参数，默认是5秒，它是<code>Lua</code>脚本的“超时时间”，但这个超时时间仅仅是当<code>Lua</code>脚本时间超过<code>lua-time-limit</code>后，向其他命令调用发送<code>BUSY</code>的信号，但是并不会停止掉服务端和客户端的脚本执行，所以当达到<code>lua-time-limit</code>值之后，其他客户端在执行正常的命令时，将会收到<code>“Busy Redis is busy running a script”</code>错误，并且提示使用<code>script kill</code>或者<code>shutdown nosave</code>命令来杀掉这个busy的脚本：</p>\n<pre><code>127.0.0.1:6379&gt; get hello\n(error) BUSY Redis is busy running a script. You can only call SCRIPT KILL or SHUTDOWN NOSAVE.\n</code></pre><p>但是有一点需要注意，如果当前Lua脚本正在执行写操作，那么<code>script kill</code>将不会生效：</p>\n<pre><code>127.0.0.1:6379&gt; eval &#39;while 1 == 1 do redis.call(&#34;set&#34;, &#34;k&#34;, &#34;v&#34;) end&#39; 0\n</code></pre><p>此时如果执行<code>script kill</code>，会收到如下异常信息：</p>\n<pre><code>127.0.0.1:6379&gt; script kill\n(error) UNKILLABLE Sorry the script already executed write commands against the dataset. You can either wait the script termination or kill the server in a hard way using the SHUTDOWN NOSAVE command.\n</code></pre><p>上面提示<code>Lua</code>脚本正在向<code>Redis</code>执行写命令，要么等待脚本执行结束要么使用<code>shutdown save</code>停掉<code>Redis</code>服务。</p>\n<h4 id=\"Bitmaps\"><a href=\"#Bitmaps\" class=\"headerlink\" title=\"Bitmaps\"></a>Bitmaps</h4><p><code>Redis</code>提供了<code>Bitmaps</code>这个可以实现对位的操作：</p>\n<ul>\n<li><code>Bitmaps</code>本身不是一种数据结构，实际上它就是字符串，但是它可以对字符串的位进行操作。</li>\n<li>在<code>Redis</code>中使用<code>Bitmaps</code>和使用字符串的方法不太相同。可以把<code>Bitmaps</code>想象成一个以位为单位的数组，数组的每个单元只能存储0和1，数组的下标在<code>Bitmaps</code>中叫做偏移量。</li>\n</ul>\n<h5 id=\"命令\"><a href=\"#命令\" class=\"headerlink\" title=\"命令\"></a>命令</h5><h6 id=\"设置值\"><a href=\"#设置值\" class=\"headerlink\" title=\"设置值\"></a>设置值</h6><p>setbit key offset value</p>\n<pre><code>127.0.0.1:6379&gt; setbit a 0 1\n(integer) 0\n127.0.0.1:6379&gt; setbit a 5 1\n(integer) 0\n127.0.0.1:6379&gt; setbit a 11 1\n(integer) 0\n127.0.0.1:6379&gt; setbit a 15 1\n(integer) 0\n127.0.0.1:6379&gt; setbit a 19 1\n(integer) 0\n</code></pre><p>在第一次初始化<code>Bitmaps</code>时，假如偏移量非常大，那么整个初始化过程执行会比较慢，可能会造成<code>Redis</code>的阻塞。</p>\n<h6 id=\"获取值\"><a href=\"#获取值\" class=\"headerlink\" title=\"获取值\"></a>获取值</h6><p>gitbit key offset</p>\n<p>返回0说明没有设置过或<code>offset</code>根本不存在：</p>\n<pre><code>127.0.0.1:6379&gt; getbit a 19\n(integer) 1\n127.0.0.1:6379&gt; getbit a 200\n(integer) 0\n</code></pre><h6 id=\"获取Bitmaps指定范围值为1的个数\"><a href=\"#获取Bitmaps指定范围值为1的个数\" class=\"headerlink\" title=\"获取Bitmaps指定范围值为1的个数\"></a>获取Bitmaps指定范围值为1的个数</h6><p>bitcount [start][end]</p>\n<p><code>[start]</code>和<code>[end]</code>代表起始和结束字节数：</p>\n<pre><code>127.0.0.1:6379&gt; bitcount a \n(integer) 5\n127.0.0.1:6379&gt; bitcount a 1 3\n(integer) 3\n</code></pre><h6 id=\"Bitmaps间的运算\"><a href=\"#Bitmaps间的运算\" class=\"headerlink\" title=\"Bitmaps间的运算\"></a>Bitmaps间的运算</h6><p>bitop op destkey key[key….]</p>\n<p><code>bitop</code>是一个复合操作，它可以做多个<code>Bitmaps</code>的and（交集）、or（并集）、not（非）、xor（异或）操作并将结果保存在<code>destkey</code>中：</p>\n<pre><code>127.0.0.1:6379&gt; bitop and c a b \n(integer) 2\n</code></pre><h6 id=\"计算Bitmaps中第一个值为targetBit的偏移量\"><a href=\"#计算Bitmaps中第一个值为targetBit的偏移量\" class=\"headerlink\" title=\"计算Bitmaps中第一个值为targetBit的偏移量\"></a>计算Bitmaps中第一个值为targetBit的偏移量</h6><p>bitpos key targetBit [start] [end]</p>\n<pre><code>127.0.0.1:6379&gt; bitpos a 1\n(integer) 1\n</code></pre><p><code>[start]</code>和<code>[end]</code>代表起始和结束字节数。例如计算第0个字节到第1个字节之间，第一个值为0的偏移量：</p>\n<pre><code>127.0.0.1:6379&gt; bitpos a 0 0 1\n(integer) 1\n</code></pre><h4 id=\"HyperLogLog\"><a href=\"#HyperLogLog\" class=\"headerlink\" title=\"HyperLogLog\"></a>HyperLogLog</h4><p><code>HyperLogLog</code>并不是一种新的数据结构（实际类型为字符串类型），而是一种基数算法，通过<code>HyperLogLog</code>可以利用极小的内存空间完成独立总数的统计。</p>\n<h5 id=\"添加\"><a href=\"#添加\" class=\"headerlink\" title=\"添加\"></a>添加</h5><p><code>pfadd</code>用于向<code>HyperLogLog</code>添加元素，如果添加成功返回1：</p>\n<pre><code>127.0.0.1:6379&gt; pfadd ids &#34;uuid-1&#34; &#34;uuid-2&#34; &#34;uuid-3&#34; &#34;uuid-4&#34;\n(integer) 1\n</code></pre><h5 id=\"计算独立用户数\"><a href=\"#计算独立用户数\" class=\"headerlink\" title=\"计算独立用户数\"></a>计算独立用户数</h5><p><code>pfcount</code>用于计算一个或多个<code>HyperLogLog</code>的独立总数：</p>\n<pre><code>127.0.0.1:6379&gt; pfcount ids\n(integer) 4\n</code></pre><h5 id=\"合并\"><a href=\"#合并\" class=\"headerlink\" title=\"合并\"></a>合并</h5><p>pfmerge destkey sourcekey [sourcekey …]</p>\n<p><code>pfmerge</code>可以求出多个<code>HyperLogLog</code>的并集并赋值给<code>destkey</code>:</p>\n<pre><code>127.0.0.1:6379&gt; pfadd ids_1 &#34;uuid-1&#34; &#34;uuid-2&#34; &#34;uuid-3&#34; &#34;uuid-4&#34;\n(integer) 1\n127.0.0.1:6379&gt; pfadd ids_2 &#34;uuid-4&#34; &#34;uuid-5&#34; &#34;uuid-6&#34; &#34;uuid-7&#34;\n(integer) 1\n127.0.0.1:6379&gt; pfmerge ids_3 ids_1 ids_2\nOK\n127.0.0.1:6379&gt; pfcount ids_3\n(integer) 7\n</code></pre><p><code>HyperLogLog</code>内存占用量非常小，但是存在错误率，选取使用<code>HyperLogLog</code>应当确认：</p>\n<ul>\n<li>只为了计算独立总数，不需要获取单条数据。</li>\n<li>可以容忍一定误差率，毕竟<code>HyperLogLog</code>在内存的占用量上有很大的优势。</li>\n</ul>\n<h4 id=\"发布订阅\"><a href=\"#发布订阅\" class=\"headerlink\" title=\"发布订阅\"></a>发布订阅</h4><p><code>Redis</code>提供了基于“发布/订阅”模式的消息机制，此种模式下，消息发布者和订阅者不进行直接通信，发布者客户端向指定的频道（channel）发布消息，订阅该频道的每个客户端都可以收到该消息。</p>\n<h5 id=\"命令-1\"><a href=\"#命令-1\" class=\"headerlink\" title=\"命令\"></a>命令</h5><p><code>Redis</code>主要提供了发布消息、订阅频道、取消订阅以及按照模式订阅和取消订阅等命令。</p>\n<h6 id=\"发布消息\"><a href=\"#发布消息\" class=\"headerlink\" title=\"发布消息\"></a>发布消息</h6><p>publish channel message</p>\n<p>返回结果为订阅者个数:</p>\n<pre><code>127.0.0.1:6379&gt; publish channel:sports &#34;Tim won the championship&#34;\n(integer) 0\n</code></pre><h6 id=\"订阅消息\"><a href=\"#订阅消息\" class=\"headerlink\" title=\"订阅消息\"></a>订阅消息</h6><p>subscribe channel [channel …]</p>\n<p>订阅者可以订阅一个或多个频道:</p>\n<pre><code>127.0.0.1:6379&gt; subscribe channel:sports\nReading messages... (press Ctrl-C to quit)\n1) &#34;subscribe&#34;\n2) &#34;channel:sports&#34;\n3) (integer) 1\n</code></pre><p>此时另一个客户端发布一条消息：</p>\n<pre><code>27.0.0.1:6379&gt; publish channel:sports &#34;James lost the championship&#34;\n(integer) 1\n</code></pre><p>当前订阅者客户端会收到如下消息：</p>\n<pre><code>127.0.0.1:6379&gt; subscribe channel:sports\nReading messages... (press Ctrl-C to quit)\n1) &#34;subscribe&#34;\n2) &#34;channel:sports&#34;\n3) (integer) 1\n1) &#34;message&#34;\n2) &#34;channel:sports&#34;\n3) &#34;James lost the championship&#34;\n</code></pre><p>有关订阅命令有两点需要注意：</p>\n<ul>\n<li>客户端在执行订阅命令之后进入了订阅状态，只能接收<code>subscribe</code>、<code>psubscribe</code>、<code>unsubscribe</code>、<code>punsubscribe</code>的四个命令。</li>\n<li>新开启的订阅客户端，无法收到该频道之前的消息，因为<code>Redis</code>不会对发布的消息进行持久化。</li>\n</ul>\n<h6 id=\"取消订阅\"><a href=\"#取消订阅\" class=\"headerlink\" title=\"取消订阅\"></a>取消订阅</h6><p>客户端可以通过<code>unsubscribe</code>命令取消对指定频道的订阅，取消成功后，不会再收到该频道的发布消息：</p>\n<pre><code>127.0.0.1:6379&gt; unsubscribe channel:sports\n1) &#34;unsubscribe&#34;\n2) &#34;channel:sports&#34;\n3) (integer) 0\n</code></pre><h6 id=\"按照模式订阅和取消订阅\"><a href=\"#按照模式订阅和取消订阅\" class=\"headerlink\" title=\"按照模式订阅和取消订阅\"></a>按照模式订阅和取消订阅</h6><p>psubscribe pattern [pattern…]<br/>punsubscribe [pattern [pattern …]]</p>\n<p>除了<code>subcribe</code>和<code>unsubscribe</code>命令，<code>Redis</code>命令还支持<code>glob</code>风格的订阅命令<code>psubscribe</code>和取消订阅命令<code>punsubscribe</code>，例如下面操作订阅以it开头的所有频道：</p>\n<pre><code>127.0.0.1:6379&gt; psubscribe it*\nReading messages... (press Ctrl-C to quit)\n1) &#34;psubscribe&#34;\n2) &#34;it*&#34;\n3) (integer) 1\n</code></pre><h6 id=\"查询订阅\"><a href=\"#查询订阅\" class=\"headerlink\" title=\"查询订阅\"></a>查询订阅</h6><p><strong>查看活跃的频道：</strong></p>\n<p>pubsub channels [pattern]</p>\n<p>所谓活跃的频道是指当前频道至少有一个订阅者，其中<code>[pattern]</code>是可以指定具体的模式：</p>\n<pre><code>127.0.0.1:6379&gt; pubsub channels\n1) &#34;channel:sports&#34;\n127.0.0.1:6379&gt; \n127.0.0.1:6379&gt; pubsub channels channel:*s\n1) &#34;channel:sports&#34;\n</code></pre><p><strong>查看频道订阅数：</strong></p>\n<p>pubsub numsub [channel …]</p>\n<pre><code>127.0.0.1:6379&gt; pubsub numsub channel:sports\n1) &#34;channel:sports&#34;\n2) (integer) 1\n</code></pre>","text":" Redis提供的5种数据结构已经足够强大，但除此之外，Redis还提供了诸如慢查询分析、功能强大的Redis Shell、Pipeline、事务与Lua脚本、Bitmaps、HyperLogLog、发布订阅、GEO等附加功能，这些功能可以在某些场景发挥重要的作用。 慢查询分析许...","link":"","photos":[],"count_time":{"symbolsCount":"11k","symbolsTime":"10 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%85%A2%E6%9F%A5%E8%AF%A2%E5%88%86%E6%9E%90\"><span class=\"toc-text\">慢查询分析</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%85%A2%E6%9F%A5%E8%AF%A2%E7%9A%84%E4%B8%A4%E4%B8%AA%E9%85%8D%E7%BD%AE%E5%8F%82%E6%95%B0\"><span class=\"toc-text\">慢查询的两个配置参数</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E8%8E%B7%E5%8F%96%E6%85%A2%E6%9F%A5%E8%AF%A2%E6%97%A5%E5%BF%97\"><span class=\"toc-text\">获取慢查询日志</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E8%8E%B7%E5%8F%96%E6%85%A2%E6%9F%A5%E8%AF%A2%E6%97%A5%E5%BF%97%E5%88%97%E8%A1%A8%E5%BD%93%E5%89%8D%E7%9A%84%E9%95%BF%E5%BA%A6\"><span class=\"toc-text\">获取慢查询日志列表当前的长度</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E6%85%A2%E6%9F%A5%E8%AF%A2%E6%97%A5%E5%BF%97%E9%87%8D%E7%BD%AE\"><span class=\"toc-text\">慢查询日志重置</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Pipeline\"><span class=\"toc-text\">Pipeline</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%BA%8B%E5%8A%A1%E4%B8%8ELua\"><span class=\"toc-text\">事务与Lua</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E4%BA%8B%E5%8A%A1\"><span class=\"toc-text\">事务</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#%E5%91%BD%E4%BB%A4%E9%94%99%E8%AF%AF\"><span class=\"toc-text\">命令错误</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#%E8%BF%90%E8%A1%8C%E6%97%B6%E9%94%99%E8%AF%AF\"><span class=\"toc-text\">运行时错误</span></a></li></ol></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#Redis%E4%B8%8ELua\"><span class=\"toc-text\">Redis与Lua</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#%E5%9C%A8Redis%E4%B8%AD%E4%BD%BF%E7%94%A8Lua\"><span class=\"toc-text\">在Redis中使用Lua</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#Lua%E7%9A%84Redis-API\"><span class=\"toc-text\">Lua的Redis API</span></a></li></ol></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#Redis%E5%A6%82%E4%BD%95%E7%AE%A1%E7%90%86Lua%E8%84%9A%E6%9C%AC\"><span class=\"toc-text\">Redis如何管理Lua脚本</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#script-load\"><span class=\"toc-text\">script load</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#script-exists\"><span class=\"toc-text\">script exists</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#script-flush\"><span class=\"toc-text\">script flush</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#script-kill\"><span class=\"toc-text\">script kill</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Bitmaps\"><span class=\"toc-text\">Bitmaps</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%91%BD%E4%BB%A4\"><span class=\"toc-text\">命令</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#%E8%AE%BE%E7%BD%AE%E5%80%BC\"><span class=\"toc-text\">设置值</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#%E8%8E%B7%E5%8F%96%E5%80%BC\"><span class=\"toc-text\">获取值</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#%E8%8E%B7%E5%8F%96Bitmaps%E6%8C%87%E5%AE%9A%E8%8C%83%E5%9B%B4%E5%80%BC%E4%B8%BA1%E7%9A%84%E4%B8%AA%E6%95%B0\"><span class=\"toc-text\">获取Bitmaps指定范围值为1的个数</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#Bitmaps%E9%97%B4%E7%9A%84%E8%BF%90%E7%AE%97\"><span class=\"toc-text\">Bitmaps间的运算</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#%E8%AE%A1%E7%AE%97Bitmaps%E4%B8%AD%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%80%BC%E4%B8%BAtargetBit%E7%9A%84%E5%81%8F%E7%A7%BB%E9%87%8F\"><span class=\"toc-text\">计算Bitmaps中第一个值为targetBit的偏移量</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#HyperLogLog\"><span class=\"toc-text\">HyperLogLog</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E6%B7%BB%E5%8A%A0\"><span class=\"toc-text\">添加</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E8%AE%A1%E7%AE%97%E7%8B%AC%E7%AB%8B%E7%94%A8%E6%88%B7%E6%95%B0\"><span class=\"toc-text\">计算独立用户数</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%90%88%E5%B9%B6\"><span class=\"toc-text\">合并</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85\"><span class=\"toc-text\">发布订阅</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%91%BD%E4%BB%A4-1\"><span class=\"toc-text\">命令</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#%E5%8F%91%E5%B8%83%E6%B6%88%E6%81%AF\"><span class=\"toc-text\">发布消息</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#%E8%AE%A2%E9%98%85%E6%B6%88%E6%81%AF\"><span class=\"toc-text\">订阅消息</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#%E5%8F%96%E6%B6%88%E8%AE%A2%E9%98%85\"><span class=\"toc-text\">取消订阅</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#%E6%8C%89%E7%85%A7%E6%A8%A1%E5%BC%8F%E8%AE%A2%E9%98%85%E5%92%8C%E5%8F%96%E6%B6%88%E8%AE%A2%E9%98%85\"><span class=\"toc-text\">按照模式订阅和取消订阅</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#%E6%9F%A5%E8%AF%A2%E8%AE%A2%E9%98%85\"><span class=\"toc-text\">查询订阅</span></a></li></ol></li></ol></li></ol></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"nginx + lua 开发中过程中 post body 过大返回 4xx","uid":"907c558f6073daa875604aa5a0e703cf","slug":"zl/2016-01-01-571_nginx + lua 开发中过程中 post body 过大返回 4xx","date":"2024-04-03T03:47:35.825Z","updated":"2024-04-03T03:47:35.825Z","comments":true,"path":"api/articles/zl/2016-01-01-571_nginx + lua 开发中过程中 post body 过大返回 4xx.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"背景基于 OpenResty 提供 post 接口，调用方调用该接口 post 数据，该接口接收 post 过来的数据，复用 Nginx access 日志落盘。 问题当用户的 body 体过大时，ngx.req.get_body_data() 读请求体，会出现读取不到直接返回 ...","link":"","photos":[],"count_time":{"symbolsCount":600,"symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"cocos2dx lua 热更新原理与实战","uid":"f3d67063cbdd4d9c236062995f15586f","slug":"zl/2016-01-01-56_cocos2dx lua 热更新原理与实战","date":"2024-04-03T03:47:35.824Z","updated":"2024-04-03T03:47:35.824Z","comments":true,"path":"api/articles/zl/2016-01-01-56_cocos2dx lua 热更新原理与实战.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"首先，如果有过cocos2dx lua开发经验的朋友都知道，为什么使用Lua而不是C++,最重要的原因就是因为下面这三个原因 热更新(在线更新代码和资源) 比C++简单很多,入门和实战 轻量级，最小最轻的脚本语言 今天就从Lua热更新，捣鼓一下其中的原理，并具体实战一下！ 什么是...","link":"","photos":[],"count_time":{"symbolsCount":"7.1k","symbolsTime":"6 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}