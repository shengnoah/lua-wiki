{"title":"Programming in Lua(Thrid Edition)笔记","uid":"a502732b8dc58224e972b6c53538b8c4","slug":"zl/2016-01-01-40_Programming in Lua(Thrid Edition)笔记","date":"2024-04-03T03:47:35.699Z","updated":"2024-04-03T03:47:35.700Z","comments":true,"path":"api/articles/zl/2016-01-01-40_Programming in Lua(Thrid Edition)笔记.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<h3 id=\"13-Metatables-and-Metamethods\"><a href=\"#13-Metatables-and-Metamethods\" class=\"headerlink\" title=\"13 Metatables and Metamethods\"></a>13 Metatables and Metamethods</h3>\n<ul>\n<li>metatable和metamethod可以允许我们对一个值做未定义的操作，Lua中的每个值都可以有一个metatable，table和userdata有自己的metatable，其他类型的值对于本类型的所有值共享一个metatable，Lua创建的表默认无metatable。<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">t = {}</span><br/><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">getmetatable</span>(t)) </span><br/></pre></td></tr></tbody></table></figure>\n</li>\n</ul>\n<p>用<code>setmetatable()</code>改变table的metatable：<br/></p><figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">t1 = {}</span><br/><span class=\"line\"><span class=\"built_in\">setmetatable</span>(t, t1)</span><br/><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">getmetatable</span>(t) == t1) <span class=\"comment\">--&gt; true</span></span><br/></pre></td></tr></tbody></table></figure><p></p>\n<ul>\n<li><p>一个table可以是任何值的metatable，一组相关的table可以共享一个公共的metatable来描述它们公共的行为，一个table也可以做自己的metatable来描述自己的行为。</p>\n</li>\n<li><p>用算术metamethod对集合求并、求交</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/><span class=\"line\">9</span><br/><span class=\"line\">10</span><br/><span class=\"line\">11</span><br/><span class=\"line\">12</span><br/><span class=\"line\">13</span><br/><span class=\"line\">14</span><br/><span class=\"line\">15</span><br/><span class=\"line\">16</span><br/><span class=\"line\">17</span><br/><span class=\"line\">18</span><br/><span class=\"line\">19</span><br/><span class=\"line\">20</span><br/><span class=\"line\">21</span><br/><span class=\"line\">22</span><br/><span class=\"line\">23</span><br/><span class=\"line\">24</span><br/><span class=\"line\">25</span><br/><span class=\"line\">26</span><br/><span class=\"line\">27</span><br/><span class=\"line\">28</span><br/><span class=\"line\">29</span><br/><span class=\"line\">30</span><br/><span class=\"line\">31</span><br/><span class=\"line\">32</span><br/><span class=\"line\">33</span><br/><span class=\"line\">34</span><br/><span class=\"line\">35</span><br/><span class=\"line\">36</span><br/><span class=\"line\">37</span><br/><span class=\"line\">38</span><br/><span class=\"line\">39</span><br/><span class=\"line\">40</span><br/><span class=\"line\">41</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">Set = {}</span><br/><span class=\"line\"><span class=\"keyword\">local</span> mt = {}</span><br/><span class=\"line\"><span class=\"comment\">-- create a new set with the values of a given list</span></span><br/><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(l)</span></span></span><br/><span class=\"line\">\t<span class=\"keyword\">local</span> set = {}</span><br/><span class=\"line\">\t<span class=\"built_in\">setmetatable</span>(set, mt)</span><br/><span class=\"line\">\t<span class=\"keyword\">for</span> _, v <span class=\"keyword\">in</span> <span class=\"built_in\">ipairs</span>(l) <span class=\"keyword\">do</span> set[v] = <span class=\"literal\">true</span> <span class=\"keyword\">end</span></span><br/><span class=\"line\">\t<span class=\"keyword\">return</span> set</span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Set.union</span><span class=\"params\">(a, b)</span></span></span><br/><span class=\"line\">\t<span class=\"keyword\">local</span> res = Set.new{}</span><br/><span class=\"line\">\t<span class=\"keyword\">for</span> k <span class=\"keyword\">in</span> <span class=\"built_in\">pairs</span>(a) <span class=\"keyword\">do</span> res[k] = <span class=\"literal\">true</span> <span class=\"keyword\">end</span></span><br/><span class=\"line\">\t<span class=\"keyword\">for</span> k <span class=\"keyword\">in</span> <span class=\"built_in\">pairs</span>(b) <span class=\"keyword\">do</span> res[k] = <span class=\"literal\">true</span> <span class=\"keyword\">end</span></span><br/><span class=\"line\">\t<span class=\"keyword\">return</span> res</span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Set.intersection</span><span class=\"params\">(a, b)</span></span></span><br/><span class=\"line\">\t<span class=\"keyword\">local</span> res = Set.new{}</span><br/><span class=\"line\">\t<span class=\"keyword\">for</span> k <span class=\"keyword\">in</span> <span class=\"built_in\">pairs</span>(a) <span class=\"keyword\">do</span></span><br/><span class=\"line\">\t\tres[k] = b[k]</span><br/><span class=\"line\">\t<span class=\"keyword\">end</span></span><br/><span class=\"line\">\t<span class=\"keyword\">return</span> res</span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/><span class=\"line\"><span class=\"comment\">-- presents a set as a string</span></span><br/><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Set.tostring</span><span class=\"params\">(set)</span></span></span><br/><span class=\"line\">\t<span class=\"keyword\">local</span> l = {} <span class=\"comment\">-- list to put all elements from the set</span></span><br/><span class=\"line\">\t<span class=\"keyword\">for</span> e <span class=\"keyword\">in</span> <span class=\"built_in\">pairs</span>(set) <span class=\"keyword\">do</span></span><br/><span class=\"line\">\t\tl[#l + <span class=\"number\">1</span>] = e</span><br/><span class=\"line\">\t<span class=\"keyword\">end</span></span><br/><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"string\">&#34;{&#34;</span> .. <span class=\"built_in\">table</span>.<span class=\"built_in\">concat</span>(l, <span class=\"string\">&#34;, &#34;</span>) .. <span class=\"string\">&#34;}&#34;</span></span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/><span class=\"line\"><span class=\"comment\">-- print a set</span></span><br/><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Set.print</span><span class=\"params\">(s)</span></span></span><br/><span class=\"line\">\t<span class=\"built_in\">print</span>(Set.<span class=\"built_in\">tostring</span>(s))</span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/><span class=\"line\">s1 = Set.new{<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">30</span>, <span class=\"number\">50</span>}</span><br/><span class=\"line\">s2 = Set.new{<span class=\"number\">30</span>, <span class=\"number\">1</span>}</span><br/><span class=\"line\">mt.<span class=\"built_in\">__add</span> = Set.union</span><br/><span class=\"line\">mt.<span class=\"built_in\">__mul</span> = Set.intersection</span><br/><span class=\"line\">s3 = s1 + s2</span><br/><span class=\"line\">Set.<span class=\"built_in\">print</span>(s3)</span><br/><span class=\"line\">Set.<span class=\"built_in\">print</span>(s3 * s1)</span><br/></pre></td></tr></tbody></table></figure>\n</li>\n<li><p>算术运算符在metatable中对应的域名：</p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">field name</th>\n<th style=\"text-align:center\">operator symbol</th>\n<th style=\"text-align:center\">operator name</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">__add</td>\n<td style=\"text-align:center\">+</td>\n<td style=\"text-align:center\">addition</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">__mul</td>\n<td style=\"text-align:center\">*</td>\n<td style=\"text-align:center\">multiplication</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">__sub</td>\n<td style=\"text-align:center\">-</td>\n<td style=\"text-align:center\">subtraction</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">__div</td>\n<td style=\"text-align:center\">/</td>\n<td style=\"text-align:center\">division</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">__unm</td>\n<td style=\"text-align:center\">-</td>\n<td style=\"text-align:center\">negation</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">__mod</td>\n<td style=\"text-align:center\">%</td>\n<td style=\"text-align:center\">modulo</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">__pow</td>\n<td style=\"text-align:center\">^</td>\n<td style=\"text-align:center\">exponentiation</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">__len</td>\n<td style=\"text-align:center\">#</td>\n<td style=\"text-align:center\">element number</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">__concat</td>\n<td style=\"text-align:center\">..</td>\n<td style=\"text-align:center\">concatenation</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>对于一个算术运算，Lua从左到右查找操作数metatable中相应的metamethod，优先使用最先找到的，如果没找到则报错<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">s = Set.new{<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>}</span><br/><span class=\"line\">s = s + <span class=\"number\">8</span> <span class=\"comment\">--&gt; bad argument #1 to &#39;pairs&#39; (table expected, got number)</span></span><br/></pre></td></tr></tbody></table></figure>\n</li>\n</ul>\n<p>安全检查：<br/></p><figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Set.union</span><span class=\"params\">(a, b)</span></span></span><br/><span class=\"line\">\t<span class=\"keyword\">if</span> <span class=\"built_in\">getmetatable</span>(a) ~= mt <span class=\"keyword\">or</span> <span class=\"built_in\">getmetatable</span>(b) ~= mt <span class=\"keyword\">then</span></span><br/><span class=\"line\">\t\t<span class=\"built_in\">error</span>(<span class=\"string\">&#34;attemp to &#39;add&#39; a set with a non-set value&#34;</span>, <span class=\"number\">2</span>)</span><br/><span class=\"line\">\t<span class=\"keyword\">end</span></span><br/><span class=\"line\">\t&lt;as before&gt;</span><br/></pre></td></tr></tbody></table></figure><p></p>\n<ul>\n<li>关系运算符在metatable中对应的域名：</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">field name</th>\n<th style=\"text-align:center\">operator symbol</th>\n<th style=\"text-align:center\">operator name</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">__eq</td>\n<td style=\"text-align:center\">=</td>\n<td style=\"text-align:center\">equal to</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">__lt</td>\n<td style=\"text-align:center\">&lt;</td>\n<td style=\"text-align:center\">less than</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">__le</td>\n<td style=\"text-align:center\">&lt;=</td>\n<td style=\"text-align:center\">less than or equal to</td>\n</tr>\n</tbody>\n</table>\n<p><code>a~=b</code>变为<code>not (a==b)</code>，<code>a&gt;b</code>变为<code>b&lt;a</code>，<code>a&gt;=b</code>变为<code>b&lt;=a</code></p>\n<ul>\n<li>用关系metamethod对集合进行比较<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/><span class=\"line\">9</span><br/><span class=\"line\">10</span><br/><span class=\"line\">11</span><br/><span class=\"line\">12</span><br/><span class=\"line\">13</span><br/><span class=\"line\">14</span><br/><span class=\"line\">15</span><br/><span class=\"line\">16</span><br/><span class=\"line\">17</span><br/><span class=\"line\">18</span><br/><span class=\"line\">19</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">mt.<span class=\"built_in\">__le</span> = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(a, b)</span></span> <span class=\"comment\">-- set containment</span></span><br/><span class=\"line\">\t<span class=\"keyword\">for</span> k <span class=\"keyword\">in</span> <span class=\"built_in\">pairs</span>(a) <span class=\"keyword\">do</span></span><br/><span class=\"line\">\t\t<span class=\"keyword\">if</span> <span class=\"keyword\">not</span> b[k] <span class=\"keyword\">then</span> <span class=\"keyword\">return</span> <span class=\"literal\">false</span> <span class=\"keyword\">end</span></span><br/><span class=\"line\">\t<span class=\"keyword\">end</span></span><br/><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/><span class=\"line\">mt.<span class=\"built_in\">__lt</span> = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(a, b)</span></span></span><br/><span class=\"line\">\t<span class=\"keyword\">return</span> a &lt;= b <span class=\"keyword\">and</span> <span class=\"keyword\">not</span> (b &lt;= a)</span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/><span class=\"line\">mt.<span class=\"built_in\">__eq</span> = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(a, b)</span></span></span><br/><span class=\"line\">\t<span class=\"keyword\">return</span> a &lt;= b <span class=\"keyword\">and</span> b &lt;= a</span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/><span class=\"line\">s1 = Set.new{<span class=\"number\">2</span>, <span class=\"number\">4</span>}</span><br/><span class=\"line\">s2 = Set.new{<span class=\"number\">4</span>, <span class=\"number\">10</span>, <span class=\"number\">2</span>}</span><br/><span class=\"line\"><span class=\"built_in\">print</span>(s1 &lt;= s2)</span><br/><span class=\"line\"><span class=\"built_in\">print</span>(s1 &lt; s2)</span><br/><span class=\"line\"><span class=\"built_in\">print</span>(s1 &gt;= s1)</span><br/><span class=\"line\"><span class=\"built_in\">print</span>(s1 &gt; s2)</span><br/><span class=\"line\"><span class=\"built_in\">print</span>(s1 == s2 * s1)</span><br/></pre></td></tr></tbody></table></figure>\n</li>\n</ul>\n<p>先构造<code>__le</code>，再用其来构造其他关系运算</p>\n<ul>\n<li><p>对于不同基础类型的两个对象或者有不同的metamethod，相等比较总是返回false而不会调用任何metamethod，因此一个集合总是不同与一个数，无论metamethod是什么</p>\n</li>\n<li><p>库定义metametod<br/><code>print()</code>总是调用<code>tostring()</code>来格式化输出，但是<code>tostring()</code>会先检查值是否有<code>__tostring</code>metamethod，如果有则将其结果返回</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>({}) <span class=\"comment\">--&gt; table: 0xda4680</span></span><br/><span class=\"line\">mt.<span class=\"built_in\">__tostring</span> = Set.<span class=\"built_in\">tostring</span></span><br/><span class=\"line\">s1 = Set.new{<span class=\"number\">10</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>}</span><br/><span class=\"line\"><span class=\"built_in\">print</span>(s1) <span class=\"comment\">--&gt; {4, 5, 10}</span></span><br/></pre></td></tr></tbody></table></figure>\n</li>\n</ul>\n<p>j</p>\n<ul>\n<li><p><code>setmetatable()</code>和<code>getmetatable()</code>用一个metafield来保护metatable，防止用户看到或改变metatable。通过设置metatable中的<code>__metatable</code>域，<code>getmetatable()</code>将会返回该域的值，<code>setmetatable()</code>会报错</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">mt.<span class=\"built_in\">__metatable</span> = <span class=\"string\">&#34;not your business&#34;</span></span><br/><span class=\"line\">s1 = Set.new()</span><br/><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">getmetatable</span>(s1)) <span class=\"comment\">--&gt; not your business</span></span><br/><span class=\"line\"><span class=\"built_in\">setmetatable</span>(s1, {}) <span class=\"comment\">--&gt; stdin:1: cannot change protected metatable</span></span><br/></pre></td></tr></tbody></table></figure>\n</li>\n<li><p><code>__index</code>metamethod用于在索引table中不存在的元素时提供值，如果没有该metamethod，则直接返回nil</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/><span class=\"line\">9</span><br/><span class=\"line\">10</span><br/><span class=\"line\">11</span><br/><span class=\"line\">12</span><br/><span class=\"line\">13</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- create the prototype with default values</span></span><br/><span class=\"line\">prototype = {x = <span class=\"number\">0</span>, y = <span class=\"number\">0</span>, width = <span class=\"number\">100</span>, height = <span class=\"number\">100</span>}</span><br/><span class=\"line\">mt = {} <span class=\"comment\">-- create a metatable</span></span><br/><span class=\"line\"><span class=\"comment\">-- declare the constrctor function</span></span><br/><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">new</span><span class=\"params\">(o)</span></span></span><br/><span class=\"line\">\t<span class=\"built_in\">setmetatable</span>(o, mt)</span><br/><span class=\"line\">\t<span class=\"keyword\">return</span> o</span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/><span class=\"line\">mt.<span class=\"built_in\">__index</span> = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(_, key)</span></span></span><br/><span class=\"line\">\t<span class=\"keyword\">return</span> prototype[key]</span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/><span class=\"line\">w = new{x = <span class=\"number\">10</span>, y = <span class=\"number\">20</span>}</span><br/><span class=\"line\"><span class=\"built_in\">print</span>(w.width) <span class=\"comment\">--&gt; 100</span></span><br/></pre></td></tr></tbody></table></figure>\n</li>\n</ul>\n<p><code>__index</code>为函数时，两个参数为table和不存在的key。<code>__index</code>也可以为一个table，此时则在此table中重新查找，查找方式同上，即可以继续用该table的<code>__index</code><br/></p><figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">mt.<span class=\"built_in\">__index</span> = prototype</span><br/></pre></td></tr></tbody></table></figure><p></p>\n<ul>\n<li><p><code>rawget(t, k)</code>用于对table的raw access，即无视metatable</p>\n</li>\n<li><p><code>__newindex</code>用于对table中不存在的元素赋值，可以取代原赋值语句，其可以为函数或table，<code>rawset(t, k, v)</code>可以进行raw assignment，无视metatable</p>\n</li>\n<li><p>利用<code>__index</code>为table设置默认值</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setDefault</span><span class=\"params\">(t, d)</span></span></span><br/><span class=\"line\">\t<span class=\"keyword\">local</span> mt = {<span class=\"built_in\">__index</span> = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span></span> <span class=\"keyword\">return</span> d <span class=\"keyword\">end</span>}</span><br/><span class=\"line\">\t<span class=\"built_in\">setmetatable</span>(t, mt)</span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/><span class=\"line\">tab = {x = <span class=\"number\">10</span>, y = <span class=\"number\">20</span>}</span><br/><span class=\"line\"><span class=\"built_in\">print</span>(tab.x, tab.z) <span class=\"comment\">--&gt; 10\tnil</span></span><br/><span class=\"line\">setDefault(tab, <span class=\"number\">0</span>)</span><br/><span class=\"line\"><span class=\"built_in\">print</span>(tab.x, tab.z) <span class=\"comment\">--&gt; 10\t0</span></span><br/></pre></td></tr></tbody></table></figure>\n</li>\n</ul>\n<p>为了避免每个table的<code>__index</code>都生成一个闭包从而浪费资源，可以将默认值存储在table的元素中<br/></p><figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">local</span> mt = {<span class=\"built_in\">__index</span> = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(t)</span></span> <span class=\"keyword\">return</span> t.___ <span class=\"keyword\">end</span>}</span><br/><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setDefault</span><span class=\"params\">(t, d)</span></span></span><br/><span class=\"line\">\tt.___ = d</span><br/><span class=\"line\">\t<span class=\"built_in\">setmetatable</span>(t, mt)</span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/></pre></td></tr></tbody></table></figure><p></p>\n<p>为了避免名字冲突，可以用一个局部空table作为索引<br/></p><figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">local</span> key = {} <span class=\"comment\">-- unique key</span></span><br/><span class=\"line\"><span class=\"keyword\">local</span> mt = {<span class=\"built_in\">__index</span> = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(t)</span></span> <span class=\"keyword\">return</span> t[key] <span class=\"keyword\">end</span>}</span><br/><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setDefault</span><span class=\"params\">(t, d)</span></span></span><br/><span class=\"line\">\tt[key] = d</span><br/><span class=\"line\">\t<span class=\"built_in\">setmetatable</span>(t, mt)</span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/></pre></td></tr></tbody></table></figure><p></p>\n<ul>\n<li><p><code>__index</code>和<code>__newindex</code>只在索引不存在的元素时才会生效，所以为了监视一个table的所有存取值操作，可以用一个空table作为代理，对这些操作处理之后再重定向到原table上</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/><span class=\"line\">9</span><br/><span class=\"line\">10</span><br/><span class=\"line\">11</span><br/><span class=\"line\">12</span><br/><span class=\"line\">13</span><br/><span class=\"line\">14</span><br/><span class=\"line\">15</span><br/><span class=\"line\">16</span><br/><span class=\"line\">17</span><br/><span class=\"line\">18</span><br/><span class=\"line\">19</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">t = {} <span class=\"comment\">-- original table (created somewhere)</span></span><br/><span class=\"line\"><span class=\"comment\">-- keep a private access to the original table</span></span><br/><span class=\"line\"><span class=\"keyword\">local</span> _t = t</span><br/><span class=\"line\"><span class=\"comment\">-- create proxy</span></span><br/><span class=\"line\">t = {}</span><br/><span class=\"line\"><span class=\"comment\">-- create metatable</span></span><br/><span class=\"line\"><span class=\"keyword\">local</span> mt = {</span><br/><span class=\"line\">\t<span class=\"built_in\">__index</span> = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(t, k)</span></span></span><br/><span class=\"line\">\t\t<span class=\"built_in\">print</span>(<span class=\"string\">&#34;*access to element &#34;</span> .. <span class=\"built_in\">tostring</span>(k))</span><br/><span class=\"line\">\t\t<span class=\"keyword\">return</span> _t[k] <span class=\"comment\">-- access the original tables</span></span><br/><span class=\"line\">\t<span class=\"keyword\">end</span>,</span><br/><span class=\"line\">\t<span class=\"built_in\">__newindex</span> = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(t, k, v)</span></span></span><br/><span class=\"line\">\t\t<span class=\"built_in\">print</span>(<span class=\"string\">&#34;*update of element &#34;</span> .. <span class=\"built_in\">tostring</span>(k) .. <span class=\"string\">&#34; to &#34;</span> .. <span class=\"built_in\">tostring</span>(v))</span><br/><span class=\"line\">\t\t_t[k] = v <span class=\"comment\">-- update original table</span></span><br/><span class=\"line\">\t<span class=\"keyword\">end</span></span><br/><span class=\"line\">}</span><br/><span class=\"line\"><span class=\"built_in\">setmetatable</span>(t, mt)</span><br/><span class=\"line\">t[<span class=\"number\">2</span>] = <span class=\"string\">&#34;hello&#34;</span> <span class=\"comment\">--&gt; *update of element 2 to hello</span></span><br/><span class=\"line\"><span class=\"built_in\">print</span>(t[<span class=\"number\">2</span>]) <span class=\"comment\">--&gt; *access to element 2nhello</span></span><br/></pre></td></tr></tbody></table></figure>\n</li>\n<li><p><code>__pairs</code></p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">mt.__pairs = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span></span></span><br/><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(_, k)</span></span></span><br/><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"built_in\">next</span>(_t, k)</span><br/><span class=\"line\">\t<span class=\"keyword\">end</span></span><br/></pre></td></tr></tbody></table></figure>\n</li>\n</ul>\n<p><code>__ipairs</code>也可以设置</p>\n<ul>\n<li><p>为了避免每个proxy的<code>__index</code>和<code>__newindex</code>都生成一个闭包从而浪费资源，可以将原table存储在proxy的元素中，利用局部空table做索引避免名字冲突</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/><span class=\"line\">9</span><br/><span class=\"line\">10</span><br/><span class=\"line\">11</span><br/><span class=\"line\">12</span><br/><span class=\"line\">13</span><br/><span class=\"line\">14</span><br/><span class=\"line\">15</span><br/><span class=\"line\">16</span><br/><span class=\"line\">17</span><br/><span class=\"line\">18</span><br/><span class=\"line\">19</span><br/><span class=\"line\">20</span><br/><span class=\"line\">21</span><br/><span class=\"line\">22</span><br/><span class=\"line\">23</span><br/><span class=\"line\">24</span><br/><span class=\"line\">25</span><br/><span class=\"line\">26</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">local</span> index = {} <span class=\"comment\">-- create private index</span></span><br/><span class=\"line\"><span class=\"keyword\">local</span> mt = { <span class=\"comment\">-- create metatable</span></span><br/><span class=\"line\">\t<span class=\"built_in\">__index</span> = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(t, k)</span></span></span><br/><span class=\"line\">\t\t<span class=\"built_in\">print</span>(<span class=\"string\">&#34;*access to element &#34;</span> .. <span class=\"built_in\">tostring</span>(k))</span><br/><span class=\"line\">\t\t<span class=\"keyword\">return</span> t[index][k] <span class=\"comment\">-- access the original table</span></span><br/><span class=\"line\">\t<span class=\"keyword\">end</span>,</span><br/><span class=\"line\">\t<span class=\"built_in\">__newindex</span> = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(t, k, v)</span></span></span><br/><span class=\"line\">\t\t<span class=\"built_in\">print</span>(<span class=\"string\">&#34;*update of element &#34;</span> .. <span class=\"built_in\">tostring</span>(k) .. <span class=\"string\">&#34; to &#34;</span> .. <span class=\"built_in\">tostring</span>(v))</span><br/><span class=\"line\">\t\tt[index][k] = v <span class=\"comment\">-- update original table</span></span><br/><span class=\"line\">\t<span class=\"keyword\">end</span>,</span><br/><span class=\"line\">\t__pairs = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(t)</span></span></span><br/><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(t, k)</span></span></span><br/><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"built_in\">next</span>(t[index], k)</span><br/><span class=\"line\">\t\t<span class=\"keyword\">end</span>, t</span><br/><span class=\"line\">\t<span class=\"keyword\">end</span></span><br/><span class=\"line\">}</span><br/><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">track</span><span class=\"params\">(t)</span></span></span><br/><span class=\"line\">\t<span class=\"keyword\">local</span> proxy = {}</span><br/><span class=\"line\">\tproxy[index] = t</span><br/><span class=\"line\">\t<span class=\"built_in\">setmetatable</span>(proxy, mt)</span><br/><span class=\"line\">\t<span class=\"keyword\">return</span> proxy</span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/><span class=\"line\">t = {}</span><br/><span class=\"line\">t = track(t)</span><br/><span class=\"line\">t[<span class=\"number\">2</span>] = <span class=\"string\">&#34;hello&#34;</span></span><br/><span class=\"line\"><span class=\"built_in\">print</span>(t[<span class=\"number\">2</span>])</span><br/></pre></td></tr></tbody></table></figure>\n</li>\n<li><p>只读table</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/><span class=\"line\">9</span><br/><span class=\"line\">10</span><br/><span class=\"line\">11</span><br/><span class=\"line\">12</span><br/><span class=\"line\">13</span><br/><span class=\"line\">14</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">readOnly</span><span class=\"params\">(t)</span></span></span><br/><span class=\"line\">\t<span class=\"keyword\">local</span> proxy = {}</span><br/><span class=\"line\">\t<span class=\"keyword\">local</span> mt = { <span class=\"comment\">-- create metatable</span></span><br/><span class=\"line\">\t\t<span class=\"built_in\">__index</span> = t,</span><br/><span class=\"line\">\t\t<span class=\"built_in\">__newindex</span> = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(t, k, v)</span></span></span><br/><span class=\"line\">\t\t\t<span class=\"built_in\">error</span>(<span class=\"string\">&#34;attempt to update a read-only table&#34;</span>, <span class=\"number\">2</span>)</span><br/><span class=\"line\">\t\t<span class=\"keyword\">end</span></span><br/><span class=\"line\">\t}</span><br/><span class=\"line\">\t<span class=\"built_in\">setmetatable</span>(proxy, mt)</span><br/><span class=\"line\">\t<span class=\"keyword\">return</span> proxy</span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/><span class=\"line\">days = readOnly{<span class=\"string\">&#34;Sunday&#34;</span>, <span class=\"string\">&#34;Monday&#34;</span>, <span class=\"string\">&#34;Tuesday&#34;</span>, <span class=\"string\">&#34;Wednesday&#34;</span>, <span class=\"string\">&#34;Thursday&#34;</span>, <span class=\"string\">&#34;Friday&#34;</span>, <span class=\"string\"","text":"13 Metatables and Metamethods metatable和metamethod可以允许我们对一个值做未定义的操作，Lua中的每个值都可以有一个metatable，table和userdata有自己的metatable，其他类型的值对于本类型的所有值共享一个m...","link":"","photos":[],"count_time":{"symbolsCount":"6.4k","symbolsTime":"6 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#13-Metatables-and-Metamethods\"><span class=\"toc-text\">13 Metatables and Metamethods</span></a></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"一个简单的Lua (Memory) Profiler","uid":"5b690cfc8daed9e0e24f168f448fdb9c","slug":"zl/2016-01-01-409_一个简单的Lua (Memory) Profiler","date":"2024-04-03T03:47:35.699Z","updated":"2024-04-03T03:47:35.699Z","comments":true,"path":"api/articles/zl/2016-01-01-409_一个简单的Lua (Memory) Profiler.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"Lua没有内置的Profiler，但是提供了一些相关的接口，可以用来实现一个简单的Lua Profiler。 一个Profiler至少需要统计以下信息, 用函数名+调用位置(保留一层堆栈信息)作为key: 执行次数 总时间 单次最大时间 尚未gc的内存数量 分配内存的最大值 二、...","link":"","photos":[],"count_time":{"symbolsCount":"2.1k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"使用LUA脚本绕过Applocker的测试分析","uid":"a29901bd86e6f7143bffe0619b53a12b","slug":"zl/2016-01-01-406_使用LUA脚本绕过Applocker的测试分析","date":"2024-04-03T03:47:35.698Z","updated":"2024-04-03T03:47:35.698Z","comments":true,"path":"api/articles/zl/2016-01-01-406_使用LUA脚本绕过Applocker的测试分析.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":" 0x00 前言 在之前的文章《Bypass Windows AppLocker》曾对绕过Applocker的方法进行过学习，而最近看到一篇文章介绍了使用LUA脚本绕过Applocker的方法，学习之后产生了以下疑问：绕过原理是什么呢？能绕过哪种AppLocker的规则呢？适用条...","link":"","photos":[],"count_time":{"symbolsCount":"2.2k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}