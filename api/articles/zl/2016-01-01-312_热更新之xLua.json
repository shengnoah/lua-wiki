{"title":"热更新之xLua","uid":"7b924de70ea203910be828eb8399f249","slug":"zl/2016-01-01-312_热更新之xLua","date":"2024-04-03T03:47:35.594Z","updated":"2024-04-03T03:47:35.594Z","comments":true,"path":"api/articles/zl/2016-01-01-312_热更新之xLua.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<p>思考并回答以下问题：<br/>1.Lua有哪两种作用？<br/>2.如何安装xLua？</p>\n<p>Unity热更新有两大流派，C#派和lua派，那lua派是啥样的呢？</p>\n<p>lua是一门历史悠久的脚本语言，从端游那个年代就被广泛应用在游戏开发中，所以到了现在的手游时代，有很多团队也让lua技术再次发展了起来。</p>\n<p>Lua 是一个小巧的脚本语言，于1993年开发。</p>\n<p>Lua设计目的是为了嵌入应用程序中，从而为应用程序提供灵活的扩展和定制功能。Lua由标准C编写而成，几乎在所有操作系统和平台上都可以编译运行。Lua并没有提供强大的库，因为它的定位就是作为嵌入的脚本语言，所以Lua不适合开发独立应用程序。Lua有一个同时进行的JIT项目，提供在特定平台上的即时编译功能。</p>\n<p>Lua脚本可以很容易的被<span style=\"color:red\">C/C++代码调用，也可以反过来调用C/C++的函数</span>，这使得Lua在应用程序中可以被广泛应用，特别是在端游阶段，游戏几乎都是使用C/C++开发的，lua给游戏开发带来了极大的便利性。</p>\n<p>不仅仅作为扩展脚本，lua也可以作为普通的<span style=\"color:red\">配置文件</span>，代替XML、JSON、ini等文件格式，并且很容易理解和维护。Lua由标准C编写而成，代码简洁优美，几乎在所有操作系统和平台上都可以编译运行。一个完整的Lua解释器不过200k，在目前所有脚本引擎中，Lua的速度是最快的。这一切都决定了Lua是作为嵌入式脚本的最佳选择。</p>\n<p>Lua之所以在游戏开发中这么受欢迎，也是因为它的优点：(1)语言优美、轻巧 (2)性能优良、速度快 (3)可扩展性强。</p>\n<h1 id=\"Unity与Lua\"><a href=\"#Unity与Lua\" class=\"headerlink\" title=\"Unity与Lua\"></a><span style=\"color:#039BE5;\">Unity与Lua</span></h1><p>Unity中的Lua也一直在发展，目前Unity中比较流行的几个Lua框架有：</p>\n<ul>\n<li>xLua</li>\n<li>uLua</li>\n<li>sLua</li>\n</ul>\n<p>其中xLua是腾讯团队开发维护的一个框架，广泛应用在腾讯系的手游中，也是目前最受认可以及使用比较多的一个框架。</p>\n<p>相对于我们之前学过的ILRuntime呢，lua也有一些优势和弱势。</p>\n<p>Lua的优势：</p>\n<ul>\n<li>技术更为成熟</li>\n<li>成功的商业案例更多</li>\n</ul>\n<p>Lua的劣势：</p>\n<ul>\n<li>需要开发团队掌握Lua</li>\n<li>可能需要维护C#和lua两套代码</li>\n</ul>\n<p>后面我们会以目前最为主流的xLua来进行学习。</p>\n<h1 id=\"xLua\"><a href=\"#xLua\" class=\"headerlink\" title=\"xLua\"></a><span style=\"color:#039BE5;\">xLua<span></span></span></h1><p>xLua为Unity、.Net、Mono等C#环境增加Lua脚本编程的能力，借助xLua，这些Lua代码可以方便的和C#相互调用。</p>\n<p>** <span style=\"color:red;\">xLua的突破<span> **</span></span></p>\n<p>xLua在功能、性能、易用性都有不少突破，这几方面分别最具代表性的是：</p>\n<ul>\n<li>可以运行时把C#实现（方法，操作符，属性，事件等等）替换成lua实现，也就是热补丁功能；</li>\n<li>出色的GC优化，自定义struct，枚举在Lua和C#间传递无C# gc alloc；</li>\n<li>编辑器下无需生成代码，开发更轻量；</li>\n</ul>\n<h2 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a><span style=\"color:#00ACC1;\">下载</span></h2><p>下载地址为：<a href=\"https://github.com/Tencent/xLua/releases\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/Tencent/xLua/releases</a></p>\n<p>可以选择最新的zip下载：</p>\n<img src=\"https://chebincarl.github.io//2019/06/22/热更新之xLua/1.png\"/>\n<p>上面图中可以看到xLua有几个不同的版本，有什么区别呢？</p>\n<p>xLua有两个版本，分别集成了lua5.3和luajit，一个项目只能选择其一。这两个版本C#代码是一样的，不同的是Plugins部分。</p>\n<p>  xlua：此版本集成的是lua5.3，lua5.3的特性更丰富些，比如支持原生64位整数，支持苹果bitcode，支持utf8等。出现问题因为是纯c代码，也好定位。比起luajit，lua对安装包的影响也更小。</p>\n<p>  xlua_luajit：此版本集成的是luajit，luajit胜在性能，如果其jit不出问题的话，可以比lua高一个数量级。目前luajit作者不打算维护luajit，在找人接替其维护，后续发展不太明朗。</p>\n<p>  xlua_general：用于通用的.Net或Mono环境，可以在非Unity环境中使用。</p>\n<p>目前lua53版本使用较多，所以xLua工程Plugins目录下默认配套是lua53版本，我们后面学习中也会使用这个版本。</p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a><span style=\"color:#00ACC1;\">安装</span></h2><p>安装非常简单，新建一个Unity工程。</p>\n<p>打开zip包，你会看到一个Assets目录，这目录就对应Unity工程的Assets目录，保持这目录结构放到你的Unity工程。</p>\n<img src=\"https://chebincarl.github.io//2019/06/22/热更新之xLua/2.png\"/>\n<center><font color=\"gray\">拖到空白处覆盖现在的Assets目录</font></center>","text":"思考并回答以下问题：1.Lua有哪两种作用？2.如何安装xLua？ Unity热更新有两大流派，C#派和lua派，那lua派是啥样的呢？ lua是一门历史悠久的脚本语言，从端游那个年代就被广泛应用在游戏开发中，所以到了现在的手游时代，有很多团队也让lua技术再次发展了起来。 Lu...","link":"","photos":[],"count_time":{"symbolsCount":"1.7k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Unity%E4%B8%8ELua\"><span class=\"toc-text\">Unity与Lua</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#xLua\"><span class=\"toc-text\">xLua</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%8B%E8%BD%BD\"><span class=\"toc-text\">下载</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AE%89%E8%A3%85\"><span class=\"toc-text\">安装</span></a></li></ol></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"lua迭代器","uid":"ecfc0e46121faea05c667f5289652c9b","slug":"zl/2016-01-01-314_lua迭代器","date":"2024-04-03T03:47:35.595Z","updated":"2024-04-03T03:47:35.595Z","comments":true,"path":"api/articles/zl/2016-01-01-314_lua迭代器.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"前言迭代器就是一种可以遍历一种集合中所有元素的机制，在Lua中，通常将迭代器表示为函数。每调用一次函数，就返回集合中的“下一个”元素。每个迭代器都需要在每次成功调用之后保存一些状态，这样才能知道它所在的位置及如何走到下一个位置，通过之前博文的总结，闭包对于这样的任务提供了极佳的支...","link":"","photos":[],"count_time":{"symbolsCount":"2.5k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"创建一个Lua版本的Lapis项目","uid":"6fe8a876b896aa95f0dd65e29efb8c4b","slug":"zl/2016-01-01-310_创建一个Lua版本的Lapis项目","date":"2024-04-03T03:47:35.593Z","updated":"2024-04-03T03:47:35.594Z","comments":true,"path":"api/articles/zl/2016-01-01-310_创建一个Lua版本的Lapis项目.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"【原文】http://leafo.net/lapis/reference/lua_getting_started.html 生成一个新的项目你可以在当前目录下运行下面的命令创建一个新的 Lua 项目： 1$ lapis new --lua 默认的 nginx.conf 文件会引入...","link":"","photos":[],"count_time":{"symbolsCount":"3.7k","symbolsTime":"3 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}