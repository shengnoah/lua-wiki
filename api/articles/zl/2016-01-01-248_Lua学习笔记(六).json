{"title":"Lua学习笔记(六)","uid":"0b9c1b4241784f620f7351a84c6c8acd","slug":"zl/2016-01-01-248_Lua学习笔记(六)","date":"2024-04-03T03:47:33.112Z","updated":"2024-04-03T03:47:33.112Z","comments":true,"path":"api/articles/zl/2016-01-01-248_Lua学习笔记(六).json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<ul>\n<li><a href=\"https://thbelief.github.io/#%E5%89%8D%E8%A8%80\">前言</a></li>\n<li><a href=\"https://thbelief.github.io/#%E6%AD%A3%E6%96%87\">正文</a><ul>\n<li><a href=\"https://thbelief.github.io/#%E6%8E%A8%E8%8D%90%E7%BD%91%E7%AB%99\">推荐网站</a></li>\n<li><a href=\"https://thbelief.github.io/#%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1\">面向对象</a><ul>\n<li><a href=\"https://thbelief.github.io/#%E5%9B%9B%E5%A4%A7%E7%89%B9%E5%BE%81\">四大特征</a><ul>\n<li><a href=\"https://thbelief.github.io/#%E5%B0%81%E8%A3%85\">封装</a></li>\n<li><a href=\"https://thbelief.github.io/#%E7%BB%A7%E6%89%BF\">继承</a></li>\n<li><a href=\"https://thbelief.github.io/#%E5%A4%9A%E6%80%81\">多态</a></li>\n<li><a href=\"https://thbelief.github.io/#%E6%8A%BD%E8%B1%A1\">抽象</a></li>\n</ul>\n</li>\n<li><a href=\"https://thbelief.github.io/#%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8\">如何使用</a><ul>\n<li><a href=\"https://thbelief.github.io/#%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1\">创建对象</a></li>\n<li><a href=\"https://thbelief.github.io/#%E8%AE%BF%E9%97%AE%E5%B1%9E%E6%80%A7\">访问属性</a></li>\n<li><a href=\"https://thbelief.github.io/#%E8%AE%BF%E9%97%AE%E6%88%90%E5%91%98%E5%87%BD%E6%95%B0\">访问成员函数</a></li>\n<li><a href=\"https://thbelief.github.io/#%E5%AE%8C%E6%95%B4%E5%AE%9E%E4%BE%8B\">完整实例</a></li>\n<li><a href=\"https://thbelief.github.io/#%E7%BB%A7%E6%89%BF-1\">继承</a></li>\n<li><a href=\"https://thbelief.github.io/#%E9%87%8D%E5%86%99\">重写</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"https://thbelief.github.io/#%E6%95%B0%E6%8D%AE%E5%BA%93\">数据库</a></li>\n</ul>\n</li>\n</ul>\n<h2><span id=\"前言\">前言</span></h2><p>Lua的基础教程其实感觉都已经快接近尾声了，这次就直接把面向对象的这个部分以及一些其他的东西讲清楚，然后就结尾吧，其实大部分编程语言的内涵都是共通的，最主要的还是应用的问题。（只有实践才是检验真理的唯一标准！）</p>\n<h2><span id=\"正文\">正文</span></h2><h3><span id=\"推荐网站\">推荐网站</span></h3><p><a href=\"http://manual.luaer.cn/\" target=\"_blank\" rel=\"noopener noreferrer\">Lua在线手册</a></p>\n<p><a href=\"http://book.luaer.cn/\" target=\"_blank\" rel=\"noopener noreferrer\">Lua进程设计</a></p>\n<p>这两个网站都是关于Lua语言的chm文档，可以参考学习，特别是第二个网站，十分的丰富。</p>\n<h3><span id=\"面向对象\">面向对象</span></h3><p>这里的“对象”不是那个“对象”，学过C++或者Java这种面向对象语言的人肯定知道，Lua也是面向对象的，其实之前就说过Lua中其实都是对象。</p>\n<h4><span id=\"四大特征\">四大特征</span></h4><h5><span id=\"封装\">封装</span></h5><p>指能够把一个实体的信息、功能、响应都装入一个单独的对象中的特性。</p>\n<h5><span id=\"继承\">继承</span></h5><p>继承的方法允许在不改动原进程的基础上对其进行扩充，这样使得原功能得以保存，而新功能也得以扩展。这有利于减少重复编码，提高软件的开发效率。</p>\n<h5><span id=\"多态\">多态</span></h5><p>同一操作作用于不同的对象，可以有不同的解释，产生不同的执行结果。在运行时，可以通过指向基类的指针，来调用实现派生类中的方法。</p>\n<h5><span id=\"抽象\">抽象</span></h5><p>抽象(Abstraction)是简化复杂的现实问题的途径，它可以为具体问题找到最恰当的类定义，并且可以在最恰当的继承级别解释问题。</p>\n<h4><span id=\"如何使用\">如何使用</span></h4><p>对象包括两个内容：<strong>属性+方法。</strong>前者使用Lua中的table表示，后者使用function表示。（继承可以通过metetable来模拟，事实上，模拟基本的对象大多时候都已经足够使用了）</p>\n<p>另外，由于Lua中所有都是对象，是以，<strong>table其实也是对象，也有状态（成员变量以及成员函数）</strong>。</p>\n<p>实例如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--这里直接定义一个表table，其中包含了它的成员变量num</span><br><span class=\"line\">test={num=0}</span><br><span class=\"line\">--下面直接定义test对应的成员函数</span><br><span class=\"line\">function test.addNum(count)</span><br><span class=\"line\">    test.num=test.num+count</span><br><span class=\"line\">end</span><br><span class=\"line\"></span><br><span class=\"line\">print(\"第一个：\"..test.num)</span><br><span class=\"line\"></span><br><span class=\"line\">test.addNum(10)</span><br><span class=\"line\"></span><br><span class=\"line\">print(\"第二个：\"..test.num)</span><br></pre></td></tr></table></figure>\n<p>结果:</p>\n<p><img src=\"https://thbelief.github.io/2019/05/03/Lua%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E5%85%AD/1.jpg\" alt=\"\"></p>\n<h5><span id=\"创建对象\">创建对象</span></h5><p>这个过程其实就是<strong>为类的实例分配内存。</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--如果该类需要传入初始参数就通过小括号内传入</span><br><span class=\"line\">test1=test:new();</span><br></pre></td></tr></table></figure>\n<h5><span id=\"访问属性\">访问属性</span></h5><p>直接使用<strong>.</strong>来访问。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test1.num;</span><br></pre></td></tr></table></figure>\n<h5><span id=\"访问成员函数\">访问成员函数</span></h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test1:addNum(1);</span><br></pre></td></tr></table></figure>\n<h5><span id=\"完整实例\">完整实例</span></h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- Meta class</span><br><span class=\"line\">Shape = {area = 0}</span><br><span class=\"line\"></span><br><span class=\"line\">-- 基础类方法 new</span><br><span class=\"line\">function Shape:new (o,side)</span><br><span class=\"line\">  o = o or {}</span><br><span class=\"line\">  setmetatable(o, self)</span><br><span class=\"line\">  self.__index = self</span><br><span class=\"line\">  side = side or 0</span><br><span class=\"line\">  self.area = side*side;</span><br><span class=\"line\">  return o</span><br><span class=\"line\">end</span><br><span class=\"line\"></span><br><span class=\"line\">-- 基础类方法 printArea</span><br><span class=\"line\">function Shape:printArea ()</span><br><span class=\"line\">  print(\"面积为 \",self.area)</span><br><span class=\"line\">end</span><br><span class=\"line\"></span><br><span class=\"line\">-- 创建对象</span><br><span class=\"line\">myshape = Shape:new(nil,10)</span><br><span class=\"line\"></span><br><span class=\"line\">myshape:printArea()</span><br></pre></td></tr></table></figure>\n<p>输出：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">面积为 \t100</span><br></pre></td></tr></table></figure>\n<h5><span id=\"继承\">继承</span></h5><p>继承的含义是——<strong>一个对象直接使用另外一个对象的属性方法之类。</strong>一般的作用就是扩展基类的属性与方法。使用场景举例：Person类下面或许就可以被继承一个Student类。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- Meta class</span><br><span class=\"line\">Shape = {area = 0}</span><br><span class=\"line\">-- 基础类方法 new</span><br><span class=\"line\">function Shape:new (o,side)</span><br><span class=\"line\">  o = o or {}</span><br><span class=\"line\">  setmetatable(o, self)</span><br><span class=\"line\">  self.__index = self</span><br><span class=\"line\">  side = side or 0</span><br><span class=\"line\">  self.area = side*side;</span><br><span class=\"line\">  return o</span><br><span class=\"line\">end</span><br><span class=\"line\">-- 基础类方法 printArea</span><br><span class=\"line\">function Shape:printArea ()</span><br><span class=\"line\">  print(\"面积为 \",self.area)</span><br><span class=\"line\">end</span><br><span class=\"line\"></span><br><span class=\"line\">-- 创建对象</span><br><span class=\"line\">myshape = Shape:new(nil,10)</span><br><span class=\"line\">myshape:printArea()</span><br><span class=\"line\"></span><br><span class=\"line\">Square = Shape:new()</span><br><span class=\"line\">-- 派生类方法 new</span><br><span class=\"line\">function Square:new (o,side)</span><br><span class=\"line\">  o = o or Shape:new(o,side)</span><br><span class=\"line\">  setmetatable(o, self)</span><br><span class=\"line\">  self.__index = self</span><br><span class=\"line\">  return o</span><br><span class=\"line\">end</span><br><span class=\"line\"></span><br><span class=\"line\">-- 派生类方法 printArea</span><br><span class=\"line\">function Square:printArea ()</span><br><span class=\"line\">  print(\"正方形面积为 \",self.area)</span><br><span class=\"line\">end</span><br><span class=\"line\"></span><br><span class=\"line\">-- 创建对象</span><br><span class=\"line\">mysquare = Square:new(nil,10)</span><br><span class=\"line\">mysquare:printArea()</span><br><span class=\"line\"></span><br><span class=\"line\">Rectangle = Shape:new()</span><br><span class=\"line\">-- 派生类方法 new</span><br><span class=\"line\">function Rectangle:new (o,length,breadth)</span><br><span class=\"line\">  o = o or Shape:new(o)</span><br><span class=\"line\">  setmetatable(o, self)</span><br><span class=\"line\">  self.__index = self</span><br><span class=\"line\">  self.area = length * breadth</span><br><span class=\"line\">  return o</span><br><span class=\"line\">end</span><br><span class=\"line\"></span><br><span class=\"line\">-- 派生类方法 printArea</span><br><span class=\"line\">function Rectangle:printArea ()</span><br><span class=\"line\">  print(\"矩形面积为 \",self.area)</span><br><span class=\"line\">end</span><br><span class=\"line\"></span><br><span class=\"line\">-- 创建对象</span><br><span class=\"line\">myrectangle = Rectangle:new(nil,10,20)</span><br><span class=\"line\">myrectangle:printArea()</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">面积为     100</span><br><span class=\"line\">正方形面积为     100</span><br><span class=\"line\">矩形面积为     200</span><br></pre></td></tr></table></figure>\n<h5><span id=\"重写\">重写</span></h5><p><strong>Lua中支持直接重写基础类的函数，在派生类中定义自己的实现方式。</strong></p>\n<p>实例其实就是上面一个例子中的。</p>\n<h3><span id=\"数据库\">数据库</span></h3><p>Lua支持的数据库：<a href=\"http://luaforge.net/projects/luasql/\" target=\"_blank\" rel=\"noopener noreferrer\">LuaSQL</a>，支持的类型包括ODBC, ADO, Oracle, MySQL, SQLite 和 PostgreSQL。</p>\n<p>LuaSQL可使用<a href=\"https://luarocks.org/\" target=\"_blank\" rel=\"noopener noreferrer\">LuaRocks</a>来<strong>安装需要的数据库驱动。</strong></p>\n<p><a href=\"https://github.com/luarocks/luarocks/wiki/Installation-instructions-for-Windows\" target=\"_blank\" rel=\"noopener noreferrer\">WIndows安装LuaRocks的方法教程</a></p>\n<p>简单实例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">require \"luasql.mysql\"</span><br><span class=\"line\"></span><br><span class=\"line\">--创建环境对象</span><br><span class=\"line\">env = luasql.mysql()</span><br><span class=\"line\"></span><br><span class=\"line\">--连接数据库</span><br><span class=\"line\">conn = env:connect(\"数据库名\",\"用户名\",\"密码\",\"IP地址\",端口)</span><br><span class=\"line\"></span><br><span class=\"line\">--设置数据库的编码格式</span><br><span class=\"line\">conn:execute\"SET NAMES UTF8\"</span><br><span class=\"line\"></span><br><span class=\"line\">--执行数据库操作</span><br><span class=\"line\">cur = conn:execute(\"select * from role\")</span><br><span class=\"line\"></span><br><span class=\"line\">row = cur:fetch({},\"a\")</span><br><span class=\"line\"></span><br><span class=\"line\">--文档对象的创建</span><br><span class=\"line\">file = io.open(\"role.txt\",\"w+\");</span><br><span class=\"line\"></span><br><span class=\"line\">while row do</span><br><span class=\"line\">    var = string.format(\"%d %sn\", row.id, row.name)</span><br><span class=\"line\"></span><br><span class=\"line\">    print(var)</span><br><span class=\"line\"></span><br><span class=\"line\">    file:write(var)</span><br><span class=\"line\"></span><br><span class=\"line\">    row = cur:fetch(row,\"a\")</span><br><span class=\"line\">end</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">file:close()  --关闭文档对象</span><br><span class=\"line\">conn:close()  --关闭数据库连接</span><br><span class=\"line\">env:close()   --关闭数据库环境</span><br></pre></td></tr></table></figure>","text":" 前言 正文 推荐网站 面向对象 四大特征 封装 继承 多态 抽象 如何使用 创建对象 访问属性 访问成员函数 完整实例 继承 重写 数据库 前言Lua的基础教程其实感觉都已经快接近尾声了，这次就直接把面向对象的这个部分以及一些其他的东西讲清楚，然后就结尾吧，其实大部分编程语言的...","link":"","photos":[],"count_time":{"symbolsCount":"3.3k","symbolsTime":"3 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">前言</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">正文</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">推荐网站</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">面向对象</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\"><span class=\"toc-text\">四大特征</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\"><span class=\"toc-text\">封装</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\"><span class=\"toc-text\">继承</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\"><span class=\"toc-text\">多态</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\"><span class=\"toc-text\">抽象</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\"><span class=\"toc-text\">如何使用</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\"><span class=\"toc-text\">创建对象</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\"><span class=\"toc-text\">访问属性</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\"><span class=\"toc-text\">访问成员函数</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\"><span class=\"toc-text\">完整实例</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\"><span class=\"toc-text\">继承</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\"><span class=\"toc-text\">重写</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">数据库</span></a></li></ol></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"浅析android手游lua脚本的加密与解密（后续）","uid":"bd350126d0e97ae395bee5fd654c1540","slug":"zl/2016-01-01-249_浅析android手游lua脚本的加密与解密（后续）","date":"2024-04-03T03:47:33.116Z","updated":"2024-04-03T03:47:33.117Z","comments":true,"path":"api/articles/zl/2016-01-01-249_浅析android手游lua脚本的加密与解密（后续）.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":" &lt;p&gt; 趁着周末，把lua的后续文章也写完了。&lt;/p&gt; 反编译对抗 众所周知，反汇编/反编译 工具在逆向人员工作中第一步被使用，其地位非常之高，而对于软件保护者来说，如何对抗 反汇编/反编译 就显得尤为重要。例如，动态调试中对OD的的检测、内核调试对wi...","link":"","photos":[],"count_time":{"symbolsCount":"7.4k","symbolsTime":"7 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Lua 学习 chapter23","uid":"6e907151df698343164342aafa63df4c","slug":"zl/2016-01-01-247_Lua 学习 chapter23 ","date":"2024-04-03T03:47:33.111Z","updated":"2024-04-03T03:47:33.112Z","comments":true,"path":"api/articles/zl/2016-01-01-247_Lua 学习 chapter23 .json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":" &lt;h3 id=&quot;目录&quot;&gt;目录&lt;/h3&gt; 弱引用表 记忆函数 环境和模块 垃圾收集器 弱引用表 弱引用表是用来告知lua语言一个引用不应该阻止对一个对象回收的机制。所谓弱引用是一种不在垃圾收集器考虑范围内的对象引用。如果一个对象都是所有...","link":"","photos":[],"count_time":{"symbolsCount":"2k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}