{"title":"Lua 学习 chapter23","uid":"6e907151df698343164342aafa63df4c","slug":"zl/2016-01-01-892_Lua 学习 chapter23 ","date":"2024-04-03T03:47:36.164Z","updated":"2024-04-03T03:47:36.164Z","comments":true,"path":"api/articles/zl/2016-01-01-892_Lua 学习 chapter23 .json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<h3 id=\"目录\">目录</h3>\n<ol>\n  <li>弱引用表</li>\n  <li>记忆函数</li>\n  <li>对象属性</li>\n  <li>瞬表</li>\n  <li>析构器</li>\n  <li>垃圾收集器</li>\n  <li>控制垃圾收集的步长</li>\n</ol>\n<blockquote>\n  <p>只有疯狂过，你才知道自己究竟能不能成功。</p>\n</blockquote>\n<h2 id=\"弱引用表\">弱引用表</h2>\n<p>弱引用表是用来告知lua语言一个引用不应该阻止对一个对象回收的机制。所谓弱引用是一种不在垃圾收集器考虑范围内的对象引用。如果一个对象都是所有的引用都是弱引用，那么垃圾回收器就可以回收这个对象，并把所有引用都删除了。</p>\n<p>表是由键值对组成，一般情况下垃圾收集器不会回收一个在可访问表中作为值或者键的对象，键和值都是强引用。</p>\n<p>在一个弱引用表中，键和值都可以是弱引用。所以这里就存在三种弱引用表，强键弱值，弱键强值以及弱键弱值这三种，不论是那种类型的弱引用表，只要有一个键或值被回收了，那么对应的整个键值对都会被从表中删除。</p>\n<p>一个表是否为弱引用表是由原表中的__mode字段决定的，这个字段存在时，其值应该为一个字符串:这个字符串的值为”k”,那么表的键为弱引用，如果是”v”，值为弱应用，”kv”，表示这个表的键和值都是弱引用。</p>\n<div class=\"language-lua highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n</pre></td><td class=\"rouge-code\"><pre><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"p\">&#123;&#125;</span>\n<span class=\"n\">mt</span> <span class=\"o\">=</span> <span class=\"p\">&#123;</span><span class=\"n\">__mode</span> <span class=\"o\">=</span> <span class=\"s2\">&#34;k&#34;</span><span class=\"p\">&#125;</span>\n<span class=\"nb\">setmetatable</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">mt</span><span class=\"p\">)</span>\n<span class=\"n\">key</span> <span class=\"o\">=</span> <span class=\"p\">&#123;&#125;</span>\n<span class=\"n\">a</span><span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n<span class=\"n\">key</span> <span class=\"o\">=</span> <span class=\"p\">&#123;&#125;</span>\n<span class=\"n\">a</span><span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>\n<span class=\"nb\">collectgarbage</span><span class=\"p\">()</span><span class=\"c1\">--第一个key就被回收了</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n<h2 id=\"记忆函数\">记忆函数</h2>\n<p>通过空间换时间，例如我们在迭代的时候，通过将已经迭代过得过程存下来，遇到相同的情况不需要再算了，直接返回结果。</p>\n<p>但是如果有很多不同的迭代的话，运行时间够长的话，内存还是存在爆掉的情况，弱引用表为解决这种问题提供了一种简单的方案，如果results表具有弱引用的值，那么每个垃圾收集周期会删除所有那个时刻未使用的记录结果（基本上是全部）。</p>\n<h2 id=\"对象属性\">对象属性</h2>\n<p>弱引用表的另一个重要应用是将属性与对象关联起来。这样做的目的就是为了防止自身引用自己，然后一直不能被释放，这里我们需要使用的是弱引用的键。但是这里会存在一个问题，如果这个表的值也是弱引用，那么活跃的对象就有可能会被回收。</p>\n<h2 id=\"析构器\">析构器</h2>\n<p>在lua中，<strong>一个具有弱引用的键和一个强引用的值的表是一个瞬表。</strong>在一个瞬表中，一个键的可访问控制着对应值的可访问性。更确切的说，考虑瞬表中的一个元素(k,v)，指向的v的引用只有当存在某些执行k的其他外部引用存在时才是强引用，否则，即使v引用了k，垃圾回收器还是回收k的。</p>\n<h2 id=\"析构器-1\">析构器</h2>\n<p>lua语言通过元方法__gc实现析构器。</p>\n<div class=\"language-lua highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n</pre></td><td class=\"rouge-code\"><pre><span class=\"n\">o</span> <span class=\"o\">=</span> <span class=\"p\">&#123;</span> <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"s2\">&#34;hi&#34;</span><span class=\"p\">&#125;</span>\n<span class=\"nb\">setmetatable</span><span class=\"p\">(</span><span class=\"n\">o</span><span class=\"p\">,</span> <span class=\"p\">&#123;</span><span class=\"n\">__gc</span> <span class=\"o\">=</span> <span class=\"k\">function</span><span class=\"p\">(</span><span class=\"n\">o</span><span class=\"p\">)</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">o</span><span class=\"p\">.</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"k\">end</span><span class=\"p\">&#125;)</span>\n<span class=\"n\">o</span> <span class=\"o\">=</span> <span class=\"kc\">nil</span>\n<span class=\"nb\">collectgarbage</span><span class=\"p\">()</span> <span class=\"c1\">--hi</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n<p>元函数__gc表示析构函数，在垃圾回收这个对象的时候会自动调用函数。</p>\n<h2 id=\"垃圾收集器\">垃圾收集器</h2>\n<p>每一个垃圾回收周期由四个阶段组成：标记、清理、清除和析构。</p>\n<ul>\n  <li>标记阶段：把可达对象标记为活跃；</li>\n  <li>清理阶段: 处理析构器和弱引用表，这些没有被标记为活跃状态的对象会被标记为活跃（复苏），并放在一个单独的列表中，这个列表将在析构阶段使用。然后，lua遍历弱引用表并从中移除键或者值未被标记的元素。</li>\n  <li>清除阶段：遍历所有对象，对象未被标记为活跃就回收，否则标记为清理标记，然后准备下一个清理周期。</li>\n  <li>析构阶段：调用清理阶段被分离出来的对象的析构器。</li>\n</ul>\n<h2 id=\"控制垃圾回收的步长\">控制垃圾回收的步长</h2>\n<p>通过函数collectgarbage可以对垃圾收集器进行一些额外的控制，该函数实际上是几个函数的集合体：第一个参数是一个可选的字符串，用来说明进行何种操作；有些选项使用一个整型作为第二个参数，称为data。</p>\n<ol>\n  <li>“stop”:停止垃圾收集器，知道restart或再次调用collectgarbage。</li>\n  <li>“restart”:重启垃圾收集器</li>\n  <li>“collect”:执行一次完整的垃圾回收，回收和析构所有不可达的对象。这是默认的选项。</li>\n  <li>“step”:执行某些垃圾收集工作，第二个参数data指明工作量，即在分配了data个字节后垃圾回收器应该做什么。</li>\n  <li>“count”:以KB为单位返回当前已使用的内存数，该结果是一个浮点数，乘以1024得到的就是精确地字节数。该值包含了尚未被回收的死对象。</li>\n  <li>“setpause”:设置收集器的pause参数(间歇率）。参数data以百分比为单位给出要设定的新值：当data为100时，参数被设为1(100%)</li>\n  <li>“setstepmul”:设置收集器的stepmul参数(步进倍率，step multiplier).参数data给出新值，也是以百分比为单位</li>\n</ol>\n<p>参数pause用于控制垃圾回收器再一次收集完成后扥待多久再开始新的一次收集，为0表示立即回收，200%表示内存使用翻倍后收集。一般应该把值控制在0到2之间。</p>\n<p>参数stepmil控制对于每分配1KB内存，立即收集器应该进行多少工作。</p>\n<pre><code>            &lt;hr style=&quot;visibility: hidden;&quot;/&gt;\n            \n            &lt;hr style=&quot;visibility: hidden;&quot;/&gt;\n</code></pre>\n","text":"目录 弱引用表 记忆函数 对象属性 瞬表 析构器 垃圾收集器 控制垃圾收集的步长 只有疯狂过，你才知道自己究竟能不能成功。 弱引用表 弱引用表是用来告知lua语言一个引用不应该阻止对一个对象回收的机制。所谓弱引用是一种不在垃圾收集器考虑范围内的对象引用。如果一个对象都是所有的引用...","link":"","photos":[],"count_time":{"symbolsCount":"2.3k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%9B%AE%E5%BD%95\"><span class=\"toc-text\">目录</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%BC%B1%E5%BC%95%E7%94%A8%E8%A1%A8\"><span class=\"toc-text\">弱引用表</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%AE%B0%E5%BF%86%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">记忆函数</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AF%B9%E8%B1%A1%E5%B1%9E%E6%80%A7\"><span class=\"toc-text\">对象属性</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%9E%90%E6%9E%84%E5%99%A8\"><span class=\"toc-text\">析构器</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%9E%90%E6%9E%84%E5%99%A8-1\"><span class=\"toc-text\">析构器</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8\"><span class=\"toc-text\">垃圾收集器</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%8E%A7%E5%88%B6%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9A%84%E6%AD%A5%E9%95%BF\"><span class=\"toc-text\">控制垃圾回收的步长</span></a>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"延迟加载模式（lazy evaluation）","uid":"d1310a0d4bc61ea97c703ffc14e6565c","slug":"zl/2016-01-01-895_延迟加载模式（lazy evaluation）","date":"2024-04-03T03:47:36.168Z","updated":"2024-04-03T03:47:36.169Z","comments":true,"path":"api/articles/zl/2016-01-01-895_延迟加载模式（lazy evaluation）.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"延迟加载模式（lazy evaluation）代码参考引用自：https://github.com/faif/python-patterns/blob/master/lazy_evaluation.py 代码123456789101112131415161718192021222...","link":"","photos":[],"count_time":{"symbolsCount":"2.7k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Lua知识回顾","uid":"99b82723dc824681436b2f3b42032285","slug":"zl/2016-01-01-893_Lua知识回顾","date":"2024-04-03T03:47:36.164Z","updated":"2024-04-03T03:47:36.164Z","comments":true,"path":"api/articles/zl/2016-01-01-893_Lua知识回顾.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"学习 Lua 编程语言的比较 无聊之余，想要找个东西来打发时间和排解心中的百无聊赖，于是乎，想要重新玩一下 corona 这个游戏开发引擎。当然，第一步就是重温下以前学过的 lua 编程语言，这次我打算在 Windows 操作系统上摆弄下这玩意。 首先进入lua 官网找到二进制文...","link":"","photos":[],"count_time":{"symbolsCount":"2.2k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}