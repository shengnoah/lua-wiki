{"title":"Lua语言学习（二）","uid":"51cf44d856e3e23c66566852b46bc298","slug":"zl/2016-01-01-1005_Lua语言学习（二）","date":"2024-04-03T03:47:32.960Z","updated":"2024-04-03T03:47:32.961Z","comments":true,"path":"api/articles/zl/2016-01-01-1005_Lua语言学习（二）.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<article class=\"entry-body\">\n<pre><code>  \t\t&lt;p&gt;&lt;strong&gt;接下来的几篇是根据&lt;a href=&quot;http://lua-users.org/wiki/TutorialDirectory&quot;&gt; Lua-Users wiki &lt;/a&gt;梳理的一些细节&lt;/strong&gt;&lt;/p&gt;\n</code></pre>\n<hr/>\n<h3 id=\"赋值\">赋值</h3>\n<div class=\"language-lua highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"o\">&gt;</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">7</span>\n<span class=\"o\">&gt;</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">i</span>\n<span class=\"o\">&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"mi\">8</span>   <span class=\"mi\">7</span>\n</code></pre></div></div>\n<p>Lua 会先计算等号右侧的 i + 1 和 i 的值，然后第二行就变成了<code class=\"language-plaintext highlighter-rouge\">i, x = 8, 7</code>，然后从右向左分配，x = 7，i = 8</p>\n<p>关于从右向左分配可以看下面这个例子：</p>\n<div class=\"language-lua highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"o\">&gt;</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span>\n<span class=\"o\">&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span>\n<span class=\"mi\">1</span>\n</code></pre></div></div>\n<p>Lua 会从右向左，先执行 a = 2，再执行 a = 1，所以最终 a 的值是1</p>\n<hr/>\n<h3 id=\"number\">Number</h3>\n<p>Lua 不像其他高级语言有各种 Number 类型，默认只有<strong>双精度浮点型</strong></p>\n<p>把字符串转换成数字可以用 tonumber() 函数：</p>\n<div class=\"language-lua highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"o\">&gt;</span> <span class=\"o\">=</span> <span class=\"nb\">tonumber</span><span class=\"p\">(</span><span class=\"s2\">&#34;123&#34;</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"mi\">4</span>\n<span class=\"mi\">127</span>\n<span class=\"o\">&gt;</span> <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"nb\">tonumber</span><span class=\"p\">(</span><span class=\"s2\">&#34;123.456e5&#34;</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"mi\">12345600</span>\n</code></pre></div></div>\n<p>另外也可以用算术运算符直接强制转换字符串，如果字符串不能转为 Number 类型，则报错：</p>\n<div class=\"language-lua highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"o\">&gt;</span> <span class=\"o\">=</span> <span class=\"mi\">100</span> <span class=\"o\">+</span> <span class=\"s2\">&#34;7&#34;</span>\n<span class=\"mi\">107</span>\n<span class=\"o\">&gt;</span> <span class=\"o\">=</span> <span class=\"s2\">&#34;12&#34;</span> <span class=\"o\">*</span> <span class=\"mi\">3</span>\n<span class=\"mi\">36</span>\n<span class=\"o\">&gt;</span> <span class=\"o\">=</span> <span class=\"s2\">&#34;1&#34;</span> <span class=\"o\">+</span> <span class=\"s2\">&#34;2&#34;</span> <span class=\"o\">-</span> <span class=\"s2\">&#34;3&#34;</span>\n<span class=\"mi\">0</span>\n<span class=\"o\">&gt;</span> <span class=\"o\">=</span> <span class=\"s2\">&#34;hello&#34;</span> <span class=\"o\">+</span> <span class=\"mi\">1</span>\n<span class=\"n\">stdin</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">:</span> <span class=\"n\">attempt</span> <span class=\"n\">to</span> <span class=\"n\">perform</span> <span class=\"n\">arithmetic</span> <span class=\"n\">on</span> <span class=\"n\">a</span> <span class=\"n\">string</span> <span class=\"n\">value</span>\n</code></pre></div></div>\n<p>Lua 中这种自动类型转换称为’Coercion’，翻译过来应该也就是强制吧。。</p>\n<p>有一点要注意的是：比较运算符(==、~=、&lt;、&gt;、&lt;=、&gt;=)并不会强制转换字符串，如果使用了错误的类型，除 ==、~= 外，其他比较运算符还会抛出错误：</p>\n<div class=\"language-lua highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"o\">&gt;</span> <span class=\"o\">=</span> <span class=\"mi\">100</span> <span class=\"o\">==</span> <span class=\"s2\">&#34;100&#34;</span>\n<span class=\"kc\">false</span>\n<span class=\"o\">&gt;</span> <span class=\"o\">=</span> <span class=\"mi\">100</span> <span class=\"o\">~=</span> <span class=\"s2\">&#34;hello&#34;</span>\n<span class=\"kc\">true</span>\n<span class=\"o\">&gt;</span> <span class=\"o\">=</span> <span class=\"mi\">100</span> <span class=\"o\">~=</span> <span class=\"p\">&#123;&#125;</span>\n<span class=\"kc\">true</span>\n<span class=\"o\">&gt;</span> <span class=\"o\">=</span> <span class=\"mi\">100</span> <span class=\"o\">==</span> <span class=\"nb\">tonumber</span><span class=\"p\">(</span><span class=\"s2\">&#34;100&#34;</span><span class=\"p\">)</span>\n<span class=\"kc\">true</span>\n<span class=\"o\">&gt;</span> <span class=\"o\">=</span> <span class=\"mi\">100</span> <span class=\"o\">&lt;=</span> <span class=\"s2\">&#34;100&#34;</span>\n<span class=\"n\">stdin</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">:</span> <span class=\"n\">attempt</span> <span class=\"n\">to</span> <span class=\"n\">compare</span> <span class=\"n\">number</span> <span class=\"n\">with</span> <span class=\"n\">string</span>\n</code></pre></div></div>\n<hr/>\n<h3 id=\"string\">String</h3>\n<p>Lua 中也可以使用转义序列，比如其他高级语言中常见的 n t 之类的，但在双方括号<code class=\"language-plaintext highlighter-rouge\">[[]]</code>定义\n的字符串中这样做是不行的：</p>\n<div class=\"language-lua highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"o\">&gt;</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;hellonNew linetTab&#39;</span>\n<span class=\"n\">hello</span>\n<span class=\"n\">New</span> <span class=\"n\">line</span>        <span class=\"n\">Tab</span>\n<span class=\"o\">&gt;</span> <span class=\"o\">=</span> <span class=\"s\">[[hellonNew linetTab]]</span>\n<span class=\"n\">hello</span><span class=\"err\"></span><span class=\"n\">nNew</span> <span class=\"n\">line</span><span class=\"err\"></span><span class=\"n\">tTab</span>\n</code></pre></div></div>\n<p>双方括号同时还支持嵌套，但需要给最外层的方括号加上等号，等号的个数任意，只要求数量相同即可：</p>\n<div class=\"language-lua highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"o\">&gt;</span> <span class=\"o\">=</span> <span class=\"s\">[[one [[two]]</span> <span class=\"n\">one</span><span class=\"p\">]]</span>        <span class=\"c1\">-- bad</span>\n<span class=\"n\">stdin</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">:</span> <span class=\"n\">nesting</span> <span class=\"n\">of</span> <span class=\"s\">[[...]]</span> <span class=\"n\">is</span> <span class=\"n\">deprecated</span> <span class=\"n\">near</span> <span class=\"s1\">&#39;[&#39;</span>\n<span class=\"o\">&gt;</span> <span class=\"o\">=</span> <span class=\"s\">[=[one [[two]] one]=]</span>      <span class=\"c1\">-- ok</span>\n<span class=\"n\">one</span> <span class=\"s\">[[two]]</span> <span class=\"n\">one</span>\n<span class=\"o\">&gt;</span> <span class=\"o\">=</span> <span class=\"s\">[===[one [[two]] one]===]</span>  <span class=\"c1\">-- ok too</span>\n<span class=\"n\">one</span> <span class=\"s\">[[two]]</span> <span class=\"n\">one</span>\n<span class=\"o\">&gt;</span> <span class=\"o\">=</span> <span class=\"s\">[=[one [ [==[ one]=]</span>       <span class=\"c1\">-- ok. nothing special about the inner content.</span>\n<span class=\"n\">one</span> <span class=\"p\">[</span> <span class=\"p\">[</span><span class=\"o\">==</span><span class=\"p\">[</span> <span class=\"n\">one</span>\n</code></pre></div></div>\n<p>使用 .. 符号可以拼接字符串，连接数字类型时，也可以强制自动转换成字符串类型，但在数字后面使用 .. 符号时，需要加一个空格，否则报错：</p>\n<div class=\"language-lua highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"o\">&gt;</span> <span class=\"o\">=</span> <span class=\"s2\">&#34;test&#34;</span> <span class=\"o\">..</span> <span class=\"mi\">123</span>\n<span class=\"n\">test123</span>\n<span class=\"o\">&gt;</span> <span class=\"o\">=</span> <span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"s2\">&#34;test&#34;</span> <span class=\"o\">..</span> <span class=\"mi\">123</span><span class=\"p\">)</span>\n<span class=\"n\">string</span>\n<span class=\"o\">&gt;</span> <span class=\"o\">=</span> <span class=\"s2\">&#34;test&#34;</span><span class=\"o\">..</span><span class=\"mi\">1</span><span class=\"o\">..</span><span class=\"s2\">&#34;test&#34;</span>\n<span class=\"n\">stdin</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">:</span> <span class=\"n\">malformed</span> <span class=\"n\">number</span> <span class=\"n\">near</span> <span class=\"s1\">&#39;1..&#39;</span>\n<span class=\"o\">&gt;</span> <span class=\"o\">=</span> <span class=\"s2\">&#34;test&#34;</span> <span class=\"o\">..</span> <span class=\"mi\">1</span> <span class=\"o\">..</span> <span class=\"s2\">&#34;test&#34;</span>\n<span class=\"n\">test1test</span>\n</code></pre></div></div>\n<p>需要注意的是，使用 .. 符号做大量拼接时会很慢，因为每一次连接操作都会在内存中分配一个新的 string 对象，网站给了三个示例：</p>\n<div class=\"language-lua highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">-- slow</span>\n<span class=\"kd\">local</span> <span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>\n<span class=\"k\">for</span> <span class=\"n\">i</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">10000</span> <span class=\"k\">do</span> <span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">s</span> <span class=\"o\">..</span> <span class=\"nb\">math.random</span><span class=\"p\">()</span> <span class=\"o\">..</span> <span class=\"s1\">&#39;,&#39;</span> <span class=\"k\">end</span>\n<span class=\"nb\">io.stdout</span><span class=\"p\">:</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span>\n<p><span class=\"c1\">– fast</span><br />\n<span class=\"k\">for</span> <span class=\"n\">i</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">10000</span> <span class=\"k\">do</span> <span class=\"nb\">io.stdout</span><span class=\"p\">:</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"nb\">tostring</span><span class=\"p\">(</span><span class=\"nb\">math.random</span><span class=\"p\">()),</span> <span class=\"s1\">','</span><span class=\"p\">)</span> <span class=\"k\">end</span></p>\n<p><span class=\"c1\">– fast, but uses more memory</span><br />\n<span class=\"kd\">local</span> <span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"p\">&#123;&#125;</span><br />\n<span class=\"k\">for</span> <span class=\"n\">i</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">10000</span> <span class=\"k\">do</span> <span class=\"n\">t</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nb\">tostring</span><span class=\"p\">(</span><span class=\"nb\">math.random</span><span class=\"p\">())</span> <span class=\"k\">end</span><br />\n<span class=\"nb\">io.stdout</span><span class=\"p\">:</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"nb\">table.concat</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">,</span><span class=\"s1\">','</span><span class=\"p\">),</span> <span class=\"s1\">','</span><span class=\"p\">)</span><br />\n</code></pre></div></div></p>\n<hr/>\n<h3 id=\"操作符\">操作符</h3>\n<p>关系运算符( ==、~=、&lt;、&gt;、&lt;=、&gt;=)用于返回 true 或 false</p>\n<p>除了常见的数字比较、字符串比较，如果类型不同或指向不同的对象，那对象也就不相同：</p>\n<div class=\"language-lua highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"o\">&gt;</span> <span class=\"o\">=</span> <span class=\"p\">&#123;&#125;</span> <span class=\"o\">==</span> <span class=\"s2\">&#34;table&#34;</span>\n<span class=\"kc\">false</span>\n<span class=\"o\">&gt;</span> <span class=\"o\">=</span> <span class=\"p\">&#123;&#125;</span> <span class=\"o\">==</span> <span class=\"p\">&#123;&#125;</span>      <span class=\"c1\">--这里创建了两个不同的 table</span>\n<span class=\"kc\">false</span>\n<span class=\"o\">&gt;</span> <span class=\"n\">test</span> <span class=\"o\">=</span> <span class=\"p\">&#123;&#125;</span>\n<span class=\"o\">&gt;</span> <span class=\"n\">test2</span> <span class=\"o\">=</span> <span class=\"n\">test</span>\n<span class=\"o\">&gt;</span> <span class=\"o\">=</span> <span class=\"n\">test</span> <span class=\"o\">==</span> <span class=\"n\">test2</span> <span class=\"c1\">--两个对象引用的是同一个 table</span>\n<span class=\"kc\">true</span>\n</code></pre></div></div>\n<p>在 Lua 中只有 nil 和 false 代表 false，其他都是 true，包括了0</p>\n<p>Lua 提供三种逻辑运算符 and or not</p>\n<h4 id=\"not\">not</h4>\n<p>not 比较容易理解，除 not nil、not false 为 true，其他全是 false</p>\n<div class=\"language-lua highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"o\">&gt;</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"p\">,</span> <span class=\"kc\">false</span><span class=\"p\">,</span> <span class=\"ow\">not</span> <span class=\"kc\">true</span><span class=\"p\">,</span> <span class=\"ow\">not</span> <span class=\"kc\">false</span>\n<span class=\"kc\">true</span>    <span class=\"kc\">false</span>   <span class=\"kc\">false</span>   <span class=\"kc\">true</span>\n<span class=\"o\">&gt;</span> <span class=\"o\">=</span> <span class=\"ow\">not</span> <span class=\"kc\">nil</span>\n<span class=\"kc\">true</span>\n<span class=\"o\">&gt;</span> <span class=\"o\">=</span> <span class=\"ow\">not</span> <span class=\"ow\">not</span> <span class=\"kc\">true</span>\n<span class=\"kc\">true</span>\n<span class=\"o\">&gt;</span> <span class=\"o\">=</span> <span class=\"ow\">not</span> <span class=\"s2\">&#34;foo&#34;</span>\n<span class=\"kc\">false</span>\n</code></pre></div></div>\n<h4 id=\"and\">and</h4>\n<p>Lua 中的 and 操作符相比其他高级语言就有一点”奇怪”了，如果第一个参数是 false 或 nil，那就不会执行第二个参数，直接返回第一个参数：</p>\n<div class=\"language-lua highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"o\">&gt;</span> <span class=\"o\">=</span> <span class=\"kc\">false</span> <span class=\"ow\">and</span> <span class=\"kc\">true</span>\n<span class=\"kc\">false</span>\n<span class=\"o\">&gt;</span> <span class=\"o\">=</span> <span class=\"kc\">nil</span> <span class=\"ow\">and</span> <span class=\"kc\">true</span>\n<span class=\"kc\">nil</span>\n<span class=\"o\">&gt;</span> <span class=\"o\">=</span> <span class=\"kc\">nil</span> <span class=\"ow\">and</span> <span class=\"kc\">false</span>\n<span class=\"kc\">nil</span>\n<span class=\"o\">&gt;</span> <span class=\"o\">=</span> <span class=\"kc\">nil</span> <span class=\"ow\">and</span> <span class=\"s2\">&#34;hello&#34;</span><span class=\"p\">,</span> <span class=\"kc\">false</span> <span class=\"ow\">and</span> <span class=\"s2\">&#34;hello&#34;</span>\n<span class=\"kc\">nil</span>     <span class=\"kc\">false</span>\n<span class=\"o\">&gt;</span> <span class=\"o\">=</span> <span class=\"kc\">false</span> <span class=\"ow\">and</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&#34;hello&#34;</span><span class=\"p\">)</span> <span class=\"c1\">--print方法没有执行</span>\n<span class=\"kc\">false</span>\n</code></pre></div></div>\n<p>当第一个参数为 true 时，就会返回第二个参数：</p>\n<div class=\"language-lua highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"o\">&gt;</span> <span class=\"o\">=</span> <span class=\"kc\">true</span> <span class=\"ow\">and</span> <span class=\"kc\">false</span>\n<span class=\"kc\">false</span>\n<span class=\"o\">&gt;</span> <span class=\"o\">=</span> <span class=\"kc\">true</span> <span class=\"ow\">and</span> <span class=\"kc\">true</span>\n<span class=\"kc\">true</span>\n<span class=\"o\">&gt;</span> <span class=\"o\">=</span> <span class=\"mi\">1</span> <span class=\"ow\">and</span> <span class=\"s2\">&#34;hello&#34;</span><span class=\"p\">,</span> <span class=\"s2\">&#34;hello&#34;</span> <span class=\"ow\">and</span> <span class=\"s2\">&#34;there&#34;</span>\n<span class=\"n\">hello</span>   <span class=\"n\">there</span>\n<span class=\"o\">&gt;</span> <span class=\"o\">=</span> <span class=\"kc\">true</span> <span class=\"ow\">and</span> <span class=\"kc\">nil</span>\n<span class=\"kc\">nil</span>\n<span class=\"o\">&gt;</span> <span class=\"o\">=</span> <span class=\"kc\">true</span> <span class=\"ow\">and</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&#34;hello&#34;</span><span class=\"p\">)</span> <span class=\"c1\">--print方法执行，并返回print(&#34;hello&#34;)</span>\n<span class=\"n\">hello</span>\n<span class=\"kc\">nil</span>\n</code></pre></div></div>\n<p>上个例子中执行 print(“hello”) 返回了 nil 感觉有点奇怪，就再多测试了一下：</p>\n<div class=\"language-lua highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"o\">&gt;</span> <span class=\"o\">=</span> <span class=\"kc\">nil</span> <span class=\"o\">==</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&#34;hello&#34;</span><span class=\"p\">)</span>\n<span class=\"n\">hello</span>\n<span class=\"kc\">true</span>\n</code></pre></div></div>\n<h4 id=\"or\">or</h4>\n<p>or 和 and 一样有点”奇怪”，当第一个参数为 true 时，就不会再执行第二个参数：</p>\n<div class=\"language-lua highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"o\">&gt;</span> <span class=\"o\">=</span> <span class=\"kc\">true</span> <span class=\"ow\">or</span> <span class=\"kc\">false</span>\n<span class=\"kc\">true</span>\n<span class=\"o\">&gt;</span> <span class=\"o\">=</span> <span class=\"kc\">true</span> <span class=\"ow\">or</span> <span class=\"kc\">nil</span>\n<span class=\"kc\">true</span>\n<span class=\"o\">&gt;</span> <span class=\"o\">=</span> <span class=\"s2\">&#34;hello&#34;</span> <span class=\"ow\">or</span> <span class=\"s2\">&#34;there&#34;</span><span class=\"p\">,</span> <span class=\"mi\">1</span> <span class=\"ow\">or</span> <span class=\"mi\">0</span>\n<span class=\"n\">hello</span>   <span class=\"mi\">1</span>\n<span class=\"o\">&gt;</span> <span class=\"o\">=</span> <span class=\"kc\">true</span> <span class=\"ow\">or</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&#34;hello&#34;</span><span class=\"p\">)</span> <span class=\"c1\">--print方法没有执行</span>\n<span class=\"kc\">true</span>\n</code></pre></div></div>\n<p>当第一个参数为 false 或 nil 时，会返回第二个参数：</p>\n<div class=\"language-lua highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"o\">&gt;</span> <span class=\"o\">=</span> <span class=\"kc\">false</span> <span class=\"ow\">or</span> <span class=\"kc\">true</span>\n<span class=\"kc\">true</span>\n<span class=\"o\">&gt;</span> <span class=\"o\">=</span> <span class=\"kc\">nil</span> <span class=\"ow\">or</span> <span class=\"kc\">true</span>\n<span class=\"kc\">true</span>\n<span class=\"o\">&gt;</span> <span class=\"o\">=</span> <span class=\"kc\">nil</span> <span class=\"ow\">or</span> <span class=\"s2\">&#34;hello&#34;</span>\n<span class=\"n\">hello</span>\n<span class=\"o\">&gt;</span> <span class=\"o\">=</span> <span class=\"kc\">false</span> <span class=\"ow\">or</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&#34;hello&#34;</span><span class=\"p\">)</span> <span class=\"c1\">--print方法执行，并返回print(&#34;hello&#34;)</span>\n<span class=\"n\">hello</span>\n<span class=\"kc\">nil</span>\n</code></pre></div></div>\n<p>or 的这种特性可以用于设置默认值，这里有一个例子：</p>\n<div class=\"language-lua highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"o\">&gt;</span> <span class=\"k\">function</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;</span>  <span class=\"kd\">local</span> <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">x</span> <span class=\"ow\">or</span> <span class=\"s2\">&#34;default&#34;</span>\n<span class=\"o\">&gt;&gt;</span>  <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;</span> <span class=\"k\">end</span>\n<span class=\"o\">&gt;</span>\n<span class=\"o\">&gt;</span> <span class=\"n\">foo</span><span class=\"p\">()</span>\n<span class=\"n\">default</span> <span class=\"kc\">nil</span>\n<span class=\"o\">&gt;</span> <span class=\"n\">foo</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"mi\">1</span>       <span class=\"mi\">1</span>\n<span class=\"o\">&gt;</span> <span class=\"n\">foo</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">)</span>\n<span class=\"kc\">true</span>    <span class=\"kc\">true</span>\n<span class=\"o\">&gt;</span> <span class=\"n\">foo</span><span class=\"p\">(</span><span class=\"s2\">&#34;hello&#34;</span><span class=\"p\">)</span>\n<span class=\"n\">hello</span>   <span class=\"n\">hello</span>\n</code></pre></div></div>\n<pre><code>  &lt;/article&gt;\n</code></pre>\n","text":" &lt;p&gt;&lt;strong&gt;接下来的几篇是根据&lt;a href=&quot;http://lua-users.org/wiki/TutorialDirectory&quot;&gt; Lua-Users wiki &lt;/a&gt;梳理的一些细节&lt;...","link":"","photos":[],"count_time":{"symbolsCount":"4.3k","symbolsTime":"4 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%B5%8B%E5%80%BC\"><span class=\"toc-text\">赋值</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#number\"><span class=\"toc-text\">Number</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#string\"><span class=\"toc-text\">String</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%93%8D%E4%BD%9C%E7%AC%A6\"><span class=\"toc-text\">操作符</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#not\"><span class=\"toc-text\">not</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#and\"><span class=\"toc-text\">and</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#or\"><span class=\"toc-text\">or</span></a></li></ol></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"C# 使用 Lua 取得 Redis 自訂複雜型別","uid":"ef6e0e3790ee285c739478c614658d5e","slug":"zl/2016-01-01-1004_C# 使用 Lua 取得 Redis 自訂複雜型別","date":"2024-04-03T03:47:32.960Z","updated":"2024-04-03T03:47:32.960Z","comments":true,"path":"api/articles/zl/2016-01-01-1004_C# 使用 Lua 取得 Redis 自訂複雜型別.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"C# 使用 Lua 取得 Redis 自訂複雜型別 之前筆記 在 Redis 中使用 Lua 的 Dictionary 紀錄到在 Redis 中使用 Lua 時可以如何模擬並使用 Dictionary，而筆記最後也提到透過這樣的方式處理時，Lua 的回傳值會不如預期，所以今天要來...","link":"","photos":[],"count_time":{"symbolsCount":"7.3k","symbolsTime":"7 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"lua快速入门","uid":"e2587e48319d030c7c41fb4968ade102","slug":"zl/2016-01-01-1003_lua快速入门","date":"2024-04-03T03:47:32.958Z","updated":"2024-04-03T03:47:32.959Z","comments":true,"path":"api/articles/zl/2016-01-01-1003_lua快速入门.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":" 概览：协同程序提供了一种协作式的多线程。每个协同程序都等于是一个线程。一对yield-resume可以将执行权在不同线程间切换。然而与常规多线程不同，协程是非抢先式的。 参照书籍：《Lua程序设计（第二版）》 Lua版本：Lua 5.3.5 协同程序 Lua将所有关于协同程序的...","link":"","photos":[],"count_time":{"symbolsCount":"7k","symbolsTime":"6 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}