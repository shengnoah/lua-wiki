{"title":"LUA_API","uid":"c13ee86f07c7d8f39c72e20f21e7cd30","slug":"zl/2016-01-01-574_LUA_API","date":"2024-04-03T03:47:35.826Z","updated":"2024-04-03T03:47:35.826Z","comments":true,"path":"api/articles/zl/2016-01-01-574_LUA_API.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<div itemprop=\"articleBody\">\n<p>编译使用 lua api 的 c 语言程序</p>\n<blockquote>\n  <p>gcc temp.c -o temp -llua -lm -ldl</p>\n</blockquote>\n<p>生成动态链接库供 lua 程序调用</p>\n<blockquote>\n  <p>gcc temp.c -o temp.so -fPIV -shared</p>\n</blockquote>\n<h1 id=\"heading-lua_api\">LUA_API</h1>\n<p>定义</p>\n<div class=\"language-c highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"cm\">/*\n@@ LUA_API is a mark for all core API functions.\n@@ LUALIB_API is a mark for all auxiliary library functions.\n@@ LUAMOD_API is a mark for all standard library opening functions.\n** CHANGE them if you need to define those functions in some special way.\n** For instance, if you want to create one Windows DLL with the core and\n** the libraries, you may want to use the following definition (define\n** LUA_BUILD_AS_DLL to get it).\n*/</span>\n<span class=\"cp\">#if defined(LUA_BUILD_AS_DLL)\t</span><span class=\"cm\">/* &#123; */</span><span class=\"cp\">\n</span>\n<span class=\"cp\">#if defined(LUA_CORE) || defined(LUA_LIB)\t</span><span class=\"cm\">/* &#123; */</span><span class=\"cp\">\n#define LUA_API __declspec(dllexport)\n#else\t\t\t\t\t\t</span><span class=\"cm\">/* &#125;&#123; */</span><span class=\"cp\">\n#define LUA_API __declspec(dllimport)\n#endif\t\t\t\t\t\t</span><span class=\"cm\">/* &#125; */</span><span class=\"cp\">\n</span>\n<span class=\"cp\">#else\t\t\t\t</span><span class=\"cm\">/* &#125;&#123; */</span><span class=\"cp\">\n</span>\n<span class=\"cp\">#define LUA_API\t\textern\n</span>\n<span class=\"cp\">#endif\t\t\t\t</span><span class=\"cm\">/* &#125; */</span><span class=\"cp\">\n</span>\n<p><span class=\"cm\">/* more often than not the libs go together with the core */</span><br />\n<span class=\"cp\">#define LUALIB_API\tLUA_API<br />\n#define LUAMOD_API\tLUALIB_API<br />\n</span></code></pre></div></div></p>\n<p>函数开头有 <strong>LUA_API</strong>:</p>\n<ul>\n  <li>LUA_API : 标识核心 API 函数</li>\n  <li>LUALIB_API : 标识辅助库函数</li>\n  <li>LUAMOD_API : 标识标准库函数</li>\n  <li>有特殊需求可以自行修改。默认的，LUA_API、LUALIB_API、LUAMOD_API 是一样的</li>\n</ul>\n<h1 id=\"heading-lua_lock-和-lua_unlock\">lua_lock 和 lua_unlock</h1>\n<p>定义</p>\n<div class=\"language-c highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"cm\">/*\n** macros that are executed whenever program enters the Lua core\n** (&#39;lua_lock&#39;) and leaves the core (&#39;lua_unlock&#39;)\n*/</span>\n<span class=\"cp\">#if !defined(lua_lock)\n#define lua_lock(L)\t((void) 0)\n#define lua_unlock(L)\t((void) 0)\n#endif\n</span></code></pre></div></div>\n<blockquote>\n  <p>If you port Lua to another platform, you are &#34;allowed&#34; to overwrite lua_lock with your own definition; and this definition should essentially be a mutex, to disallow cross-thread operations on the same Lua objects. Essentially, when implemented, it should act similarly to Python&#39;s Global Interpreter Lock (GIL).</p>\n</blockquote>\n<blockquote>\n  <p>当需要将 Lua 移植到其他平台时，可以重写 lua_lock。必须注意的是，为了避免线程间对同一 Lua 对象的操作，lua_lock 的定义必须是互斥的，且其实现中其行为应该和 Python 的全局解释器锁（GIL）类似。</p>\n</blockquote>\n<p>lua_lock 和 lua_unlock 主要用于线程间通信的情况，一般情况下我们不需要考虑，Lua 官方也对其做了保留，如果有需要涉及到多线程操作，则需开发者自行实现互斥行为。</p>\n<h1 id=\"heading-参考链接\">参考链接</h1>\n<ul>\n  <li><a href=\"https://www.jianshu.com/c/be33befa3ed2\"><em>Reyn</em> : lua 专题</a></li>\n  <li><a href=\"https://blog.csdn.net/yuanlin2008/article/category/1307277\">yuanlin2008 : 探索Lua5.2内部实现</a></li>\n</ul>\n<pre><code>                &lt;/div&gt;\n</code></pre>\n","text":" 编译使用 lua api 的 c 语言程序 gcc temp.c -o temp -llua -lm -ldl 生成动态链接库供 lua 程序调用 gcc temp.c -o temp.so -fPIV -shared LUA_API 定义 /* @@ LUA_API is a...","link":"","photos":[],"count_time":{"symbolsCount":"2k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#heading-lua_api\"><span class=\"toc-text\">LUA_API</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#heading-lua_lock-%E5%92%8C-lua_unlock\"><span class=\"toc-text\">lua_lock 和 lua_unlock</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#heading-%E5%8F%82%E8%80%83%E9%93%BE%E6%8E%A5\"><span class=\"toc-text\">参考链接</span></a></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"入职作业之 json 数据与 lua value 转换","uid":"c5cc8a80d7d560a392b5bef4717aaad8","slug":"zl/2016-01-01-575_入职作业之 json 数据与 lua value 转换","date":"2024-04-03T03:47:35.826Z","updated":"2024-04-03T03:47:35.826Z","comments":true,"path":"api/articles/zl/2016-01-01-575_入职作业之 json 数据与 lua value 转换.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"题目任务描述：封装json格式的数据与lua value间的互相转换功能 下载ECMA-404的描述文件，观察json的数据格式。 根据描述，一个json value可以是这些类型: object, array, number, string, true, false, or n...","link":"","photos":[],"count_time":{"symbolsCount":"8.7k","symbolsTime":"8 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"luajit","uid":"289cd76b0c036870e238077c0b6dd29b","slug":"zl/2016-01-01-576_luajit","date":"2024-04-03T03:47:35.826Z","updated":"2024-04-03T03:47:35.827Z","comments":true,"path":"api/articles/zl/2016-01-01-576_luajit.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"JIT = Just In TimeIOS中禁止使用（不让自主申请内存） 解释执行： 效率低 代码暴露 静态编译 不够灵活，无法热更新 平台兼容性差 JIT： 效率：高于解释执行，低于静态编译。 安全性：一般都先转换成字节码 热更新：无论源码还是字节码本质都是自愿文件。 兼容性：...","link":"","photos":[],"count_time":{"symbolsCount":160,"symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}