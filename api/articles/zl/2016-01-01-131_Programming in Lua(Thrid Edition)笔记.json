{"title":"Programming in Lua(Thrid Edition)笔记","uid":"a502732b8dc58224e972b6c53538b8c4","slug":"zl/2016-01-01-131_Programming in Lua(Thrid Edition)笔记","date":"2024-04-03T03:47:33.033Z","updated":"2024-04-03T03:47:33.034Z","comments":true,"path":"api/articles/zl/2016-01-01-131_Programming in Lua(Thrid Edition)笔记.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<h3 id=\"9-Coroutines\"><a href=\"#9-Coroutines\" class=\"headerlink\" title=\"9 Coroutines\"></a>9 Coroutines</h3>\n<ul>\n<li>协程和线程的相同点：<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">It is a line of execution, with its own stack, its own local variables, and its own instruction pointer; but it shares global variables and mostly anything else with other coroutines.</span><br/></pre></td></tr></tbody></table></figure>\n</li>\n</ul>\n<p>不同点：线程是并行的，而协程是合作式的，任何时候只会有一个协程运行，并且只有在其明确要求挂起时才会挂起</p>\n<ul>\n<li>协程可用<code>yield()</code>暂时挂起，等待后续resume<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/><span class=\"line\">9</span><br/><span class=\"line\">10</span><br/><span class=\"line\">11</span><br/><span class=\"line\">12</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">co = coroutine.<span class=\"built_in\">create</span>(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span></span></span><br/><span class=\"line\">\t<span class=\"keyword\">for</span> i = <span class=\"number\">1</span>, <span class=\"number\">10</span> <span class=\"keyword\">do</span></span><br/><span class=\"line\">\t\t<span class=\"built_in\">print</span>(<span class=\"string\">&#34;co&#34;</span>, i)</span><br/><span class=\"line\">\t\tcoroutine.<span class=\"built_in\">yield</span>()</span><br/><span class=\"line\">\t<span class=\"keyword\">end</span></span><br/><span class=\"line\"><span class=\"keyword\">end</span>)</span><br/><span class=\"line\">coroutine.<span class=\"built_in\">resume</span>(co) </span><br/><span class=\"line\">coroutine.<span class=\"built_in\">resume</span>(co) <span class=\"comment\">--&gt; co\t2</span></span><br/><span class=\"line\">...</span><br/><span class=\"line\">coroutine.<span class=\"built_in\">resume</span>(co) <span class=\"comment\">--&gt; co\t10</span></span><br/><span class=\"line\">coroutine.<span class=\"built_in\">resume</span>(co) <span class=\"comment\">-- print nothig</span></span><br/><span class=\"line\"><span class=\"built_in\">print</span>(coroutine.<span class=\"built_in\">resume</span>(co)) <span class=\"comment\">--&gt; false cannot resume dead coroutine</span></span><br/></pre></td></tr></tbody></table></figure>\n</li>\n</ul>\n<p>协程挂起期间的活动相当于发生在调用<code>yield()</code>之中，resume后<code>yield()</code>返回并继续运行</p>\n<ul>\n<li><p>协程运行在保护模式下，如果有错误发生Lua不会展示错误信息，而是返回给<code>resume()</code></p>\n</li>\n<li><p>协程A中resume协程B，则协程A处于normal状态</p>\n</li>\n<li><p>resume-yeild对可以交换数据，<code>resume()</code>返回传给<code>yield()</code>的任何参数，<code>yield()</code>返回传递给<code>resume()</code>的任何额外参数，协程结束时任何主函数的返回值将返回给<code>resume()</code></p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/><span class=\"line\">9</span><br/><span class=\"line\">10</span><br/><span class=\"line\">11</span><br/><span class=\"line\">12</span><br/><span class=\"line\">13</span><br/><span class=\"line\">14</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">co = coroutine.<span class=\"built_in\">create</span>(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(a, b)</span></span></span><br/><span class=\"line\">\tcoroutine.<span class=\"built_in\">yield</span>(a + b, a - b)</span><br/><span class=\"line\"><span class=\"keyword\">end</span>)</span><br/><span class=\"line\"><span class=\"built_in\">print</span>(coroutine.<span class=\"built_in\">resume</span>(co, <span class=\"number\">20</span>, <span class=\"number\">10</span>)) <span class=\"comment\">--&gt; true\t30\t10</span></span><br/><span class=\"line\">co = coroutine.<span class=\"built_in\">create</span>(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(x)</span></span></span><br/><span class=\"line\">\t<span class=\"built_in\">print</span>(<span class=\"string\">&#34;co1&#34;</span>, x)</span><br/><span class=\"line\">\t<span class=\"built_in\">print</span>(<span class=\"string\">&#34;co2&#34;</span>, coroutine.<span class=\"built_in\">yield</span>())</span><br/><span class=\"line\"><span class=\"keyword\">end</span>)</span><br/><span class=\"line\">coroutine.<span class=\"built_in\">resume</span>(co, <span class=\"string\">&#34;hi&#34;</span>) <span class=\"comment\">--&gt; co1\thi</span></span><br/><span class=\"line\">coroutine.<span class=\"built_in\">resume</span>(co, <span class=\"number\">4</span>, <span class=\"number\">5</span>) <span class=\"comment\">--&gt; co2\t4\t5</span></span><br/><span class=\"line\">co = coroutine.<span class=\"built_in\">create</span>(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span></span></span><br/><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">6</span>, <span class=\"number\">7</span></span><br/><span class=\"line\"><span class=\"keyword\">end</span>)</span><br/><span class=\"line\"><span class=\"built_in\">print</span>(coroutine.<span class=\"built_in\">resume</span>(co)) <span class=\"comment\">--&gt; true\t6\t7</span></span><br/></pre></td></tr></tbody></table></figure>\n</li>\n<li><p>pipes and filters</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/><span class=\"line\">9</span><br/><span class=\"line\">10</span><br/><span class=\"line\">11</span><br/><span class=\"line\">12</span><br/><span class=\"line\">13</span><br/><span class=\"line\">14</span><br/><span class=\"line\">15</span><br/><span class=\"line\">16</span><br/><span class=\"line\">17</span><br/><span class=\"line\">18</span><br/><span class=\"line\">19</span><br/><span class=\"line\">20</span><br/><span class=\"line\">21</span><br/><span class=\"line\">22</span><br/><span class=\"line\">23</span><br/><span class=\"line\">24</span><br/><span class=\"line\">25</span><br/><span class=\"line\">26</span><br/><span class=\"line\">27</span><br/><span class=\"line\">28</span><br/><span class=\"line\">29</span><br/><span class=\"line\">30</span><br/><span class=\"line\">31</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(prod)</span></span></span><br/><span class=\"line\">\t<span class=\"keyword\">local</span> <span class=\"built_in\">status</span>, value = coroutine.<span class=\"built_in\">resume</span>(prod)</span><br/><span class=\"line\">\t<span class=\"keyword\">return</span> value</span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">send</span><span class=\"params\">(x)</span></span></span><br/><span class=\"line\">\tcoroutine.<span class=\"built_in\">yield</span>(x)</span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">producer</span><span class=\"params\">()</span></span></span><br/><span class=\"line\">\t<span class=\"keyword\">return</span> coroutine.<span class=\"built_in\">create</span>(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span></span></span><br/><span class=\"line\">\t\t<span class=\"keyword\">while</span> <span class=\"literal\">true</span> <span class=\"keyword\">do</span></span><br/><span class=\"line\">\t\t\t<span class=\"keyword\">local</span> x = <span class=\"built_in\">io</span>.<span class=\"built_in\">read</span>()   <span class=\"comment\">-- produce new value</span></span><br/><span class=\"line\">\t\t\tsend(x)</span><br/><span class=\"line\">\t\t<span class=\"keyword\">end</span></span><br/><span class=\"line\">\t<span class=\"keyword\">end</span>)</span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">filter</span><span class=\"params\">(prod)</span></span></span><br/><span class=\"line\">\t<span class=\"keyword\">return</span> coroutine.<span class=\"built_in\">create</span>(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span></span></span><br/><span class=\"line\">\t\t<span class=\"keyword\">for</span> line = <span class=\"number\">1</span>, <span class=\"built_in\">math</span>.<span class=\"built_in\">huge</span> <span class=\"keyword\">do</span></span><br/><span class=\"line\">\t\t\t<span class=\"keyword\">local</span> x =receive(prod) <span class=\"comment\">-- get new value</span></span><br/><span class=\"line\">\t\t\tx = <span class=\"built_in\">string</span>.<span class=\"built_in\">format</span>(<span class=\"string\">&#34;%5d %s&#34;</span>, line, x)</span><br/><span class=\"line\">\t\t\tsend(x)                <span class=\"comment\">-- send it to consumer</span></span><br/><span class=\"line\">\t\t<span class=\"keyword\">end</span></span><br/><span class=\"line\">\t<span class=\"keyword\">end</span>)</span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">consumer</span><span class=\"params\">(prod)</span></span></span><br/><span class=\"line\">\t<span class=\"keyword\">while</span> <span class=\"literal\">true</span> <span class=\"keyword\">do</span></span><br/><span class=\"line\">\t\t<span class=\"keyword\">local</span> x = receive(prod)    <span class=\"comment\">-- get new value</span></span><br/><span class=\"line\">\t\t<span class=\"built_in\">io</span>.<span class=\"built_in\">write</span>(x, <span class=\"string\">&#34;n&#34;</span>)          <span class=\"comment\">-- consume new value</span></span><br/><span class=\"line\">\t<span class=\"keyword\">end</span></span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/><span class=\"line\">consumer(filter(producer()))</span><br/></pre></td></tr></tbody></table></figure>\n</li>\n</ul>\n<p>该例基于consumer-driven</p>\n<ul>\n<li>协程用作迭代器<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/><span class=\"line\">9</span><br/><span class=\"line\">10</span><br/><span class=\"line\">11</span><br/><span class=\"line\">12</span><br/><span class=\"line\">13</span><br/><span class=\"line\">14</span><br/><span class=\"line\">15</span><br/><span class=\"line\">16</span><br/><span class=\"line\">17</span><br/><span class=\"line\">18</span><br/><span class=\"line\">19</span><br/><span class=\"line\">20</span><br/><span class=\"line\">21</span><br/><span class=\"line\">22</span><br/><span class=\"line\">23</span><br/><span class=\"line\">24</span><br/><span class=\"line\">25</span><br/><span class=\"line\">26</span><br/><span class=\"line\">27</span><br/><span class=\"line\">28</span><br/><span class=\"line\">29</span><br/><span class=\"line\">30</span><br/><span class=\"line\">31</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">permgen</span><span class=\"params\">(a, n)</span></span></span><br/><span class=\"line\">\tn = n <span class=\"keyword\">or</span> #a    <span class=\"comment\">-- default for &#39;n&#39; is size of &#39;a&#39;</span></span><br/><span class=\"line\">\t<span class=\"keyword\">if</span> n &lt;= <span class=\"number\">1</span> <span class=\"keyword\">then</span> <span class=\"comment\">-- nothing to change?</span></span><br/><span class=\"line\">\t\tcoroutine.<span class=\"built_in\">yield</span>(a)</span><br/><span class=\"line\">\t<span class=\"keyword\">else</span></span><br/><span class=\"line\">\t\t<span class=\"keyword\">for</span> i = <span class=\"number\">1</span>, n <span class=\"keyword\">do</span></span><br/><span class=\"line\">\t\t\t<span class=\"comment\">-- put i-th element as the last one</span></span><br/><span class=\"line\">\t\t\ta[n], a[i] = a[i], a[n]</span><br/><span class=\"line\">\t\t\t<span class=\"comment\">-- generate all permutations of the other elements</span></span><br/><span class=\"line\">\t\t\tpermgen(a, n - <span class=\"number\">1</span>)</span><br/><span class=\"line\">\t\t\t<span class=\"comment\">-- restore i-th element</span></span><br/><span class=\"line\">\t\t\ta[n], a[i] = a[i], a[n]</span><br/><span class=\"line\">\t\t<span class=\"keyword\">end</span></span><br/><span class=\"line\">\t<span class=\"keyword\">end</span></span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">printResult</span><span class=\"params\">(a)</span></span></span><br/><span class=\"line\">\t<span class=\"keyword\">for</span> i = <span class=\"number\">1</span>, #a <span class=\"keyword\">do</span></span><br/><span class=\"line\">\t\t<span class=\"built_in\">io</span>.<span class=\"built_in\">write</span>(a[i], <span class=\"string\">&#34; &#34;</span>)</span><br/><span class=\"line\">\t<span class=\"keyword\">end</span></span><br/><span class=\"line\">\t<span class=\"built_in\">io</span>.<span class=\"built_in\">write</span>(<span class=\"string\">&#34;n&#34;</span>)</span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">permutations</span><span class=\"params\">(a)</span></span></span><br/><span class=\"line\">\t<span class=\"keyword\">local</span> co = coroutine.<span class=\"built_in\">create</span>(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span></span> permgen(a) <span class=\"keyword\">end</span>)</span><br/><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span></span>  <span class=\"comment\">-- iterator</span></span><br/><span class=\"line\">\t\t<span class=\"keyword\">local</span> code, res = coroutine.<span class=\"built_in\">resume</span>(co)</span><br/><span class=\"line\">\t\t<span class=\"keyword\">return</span> res</span><br/><span class=\"line\">\t<span class=\"keyword\">end</span></span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/><span class=\"line\"><span class=\"keyword\">for</span> p <span class=\"keyword\">in</span> permutations{<span class=\"string\">&#34;a&#34;</span>, <span class=\"string\">&#34;b&#34;</span>, <span class=\"string\">&#34;c&#34;</span>} <span class=\"keyword\">do</span></span><br/><span class=\"line\">\tprintResult(p)</span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/></pre></td></tr></tbody></table></figure>\n</li>\n</ul>\n<p><code>permutations()</code>的模式在Lua中十分常用，所以用<code>coroutine.wrap()</code>简化，其返回一个可以resume协程的函数，遇错误时提出，不返回错误码，但是不能检查协程的状态和运行时错误<br/></p><figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">permutations</span><span class=\"params\">(a)</span></span></span><br/><span class=\"line\">\t<span class=\"keyword\">return</span> coroutine.<span class=\"built_in\">wrap</span>(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span></span> permgen(a) <span class=\"keyword\">end</span>)</span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/></pre></td></tr></tbody></table></figure><p></p>\n<ul>\n<li>用协程实现非阻塞<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/><span class=\"line\">9</span><br/><span class=\"line\">10</span><br/><span class=\"line\">11</span><br/><span class=\"line\">12</span><br/><span class=\"line\">13</span><br/><span class=\"line\">14</span><br/><span class=\"line\">15</span><br/><span class=\"line\">16</span><br/><span class=\"line\">17</span><br/><span class=\"line\">18</span><br/><span class=\"line\">19</span><br/><span class=\"line\">20</span><br/><span class=\"line\">21</span><br/><span class=\"line\">22</span><br/><span class=\"line\">23</span><br/><span class=\"line\">24</span><br/><span class=\"line\">25</span><br/><span class=\"line\">26</span><br/><span class=\"line\">27</span><br/><span class=\"line\">28</span><br/><span class=\"line\">29</span><br/><span class=\"line\">30</span><br/><span class=\"line\">31</span><br/><span class=\"line\">32</span><br/><span class=\"line\">33</span><br/><span class=\"line\">34</span><br/><span class=\"line\">35</span><br/><span class=\"line\">36</span><br/><span class=\"line\">37</span><br/><span class=\"line\">38</span><br/><span class=\"line\">39</span><br/><span class=\"line\">40</span><br/><span class=\"line\">41</span><br/><span class=\"line\">42</span><br/><span class=\"line\">43</span><br/><span class=\"line\">44</span><br/><span class=\"line\">45</span><br/><span class=\"line\">46</span><br/><span class=\"line\">47</span><br/><span class=\"line\">48</span><br/><span class=\"line\">49</span><br/><span class=\"line\">50</span><br/><span class=\"line\">51</span><br/><span class=\"line\">52</span><br/><span class=\"line\">53</span><br/><span class=\"line\">54</span><br/><span class=\"line\">55</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">local</span> socket = <span class=\"built_in\">require</span> <span class=\"string\">&#34;socket&#34;</span></span><br/><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">download</span><span class=\"params\">(host, file)</span></span></span><br/><span class=\"line\">\t<span class=\"keyword\">local</span> c = <span class=\"built_in\">assert</span>(socket.connect(host, <span class=\"number\">80</span>))</span><br/><span class=\"line\">\t<span class=\"keyword\">local</span> count = <span class=\"number\">0</span> <span class=\"comment\">-- counts number of bytes read</span></span><br/><span class=\"line\">\tc:send(<span class=\"string\">&#34;GET &#34;</span> .. file .. <span class=\"string\">&#34; HTTP/1.0rnrn&#34;</span>)</span><br/><span class=\"line\">\t<span class=\"keyword\">while</span> <span class=\"literal\">true</span> <span class=\"keyword\">do</span></span><br/><span class=\"line\">\t\t<span class=\"keyword\">local</span> s, <span class=\"built_in\">status</span> = receive(c)</span><br/><span class=\"line\">\t\tcount = count + #s</span><br/><span class=\"line\">\t\t<span class=\"keyword\">if</span> <span class=\"built_in\">status</span> == <span class=\"string\">&#34;closed&#34;</span> <span class=\"keyword\">then</span> <span class=\"keyword\">break</span> <span class=\"keyword\">end</span></span><br/><span class=\"line\">\t<span class=\"keyword\">end</span></span><br/><span class=\"line\">\tc:<span class=\"built_in\">close</span>()</span><br/><span class=\"line\">\t<span class=\"built_in\">print</span>(file, count)</span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(connection)</span></span></span><br/><span class=\"line\">\tconnection:settimeout(<span class=\"number\">0</span>) <span class=\"comment\">-- do not block</span></span><br/><span class=\"line\">\t<span class=\"keyword\">local</span> s, <span class=\"built_in\">status</span>, partial = connection:receive(<span class=\"number\">2</span> ^ <span class=\"number\">10</span>)</span><br/><span class=\"line\">\t<span class=\"keyword\">if</span> <span class=\"built_in\">status</span> == <span class=\"string\">&#34;timeout&#34;</span> <span class=\"keyword\">then</span></span><br/><span class=\"line\">\t\tcoroutine.<span class=\"built_in\">yield</span>(connection)</span><br/><span class=\"line\">\t<span class=\"keyword\">end</span></span><br/><span class=\"line\">\t<span class=\"keyword\">return</span> s <span class=\"keyword\">or</span> partial, <span class=\"built_in\">status</span></span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">get</span><span class=\"params\">(host, file)</span></span></span><br/><span class=\"line\">\t<span class=\"comment\">-- create coroutine</span></span><br/><span class=\"line\">\t<span class=\"keyword\">local</span> co = coroutine.<span class=\"built_in\">create</span>(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span></span></span><br/><span class=\"line\">\t\tdownload(host, file)</span><br/><span class=\"line\">\t<span class=\"keyword\">end</span>)</span><br/><span class=\"line\">\t<span class=\"comment\">-- insert it in the list</span></span><br/><span class=\"line\">\t<span class=\"built_in\">table</span>.<span class=\"built_in\">insert</span>(threads, co)</span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dispatch</span><span class=\"params\">()</span></span></span><br/><span class=\"line\">\t<span class=\"keyword\">local</span> i = <span class=\"number\">1</span></span><br/><span class=\"line\">\t<span class=\"keyword\">while</span> <span class=\"literal\">true</span> <span class=\"keyword\">do</span></span><br/><span class=\"line\">\t\t<span class=\"keyword\">if</span> threads[i] == <span class=\"literal\">nil</span> <span class=\"keyword\">then</span> <span class=\"comment\">-- no more threads?</span></span><br/><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> threads[<span class=\"number\">1</span>] == <span class=\"literal\">nil</span> <span class=\"keyword\">then</span> <span class=\"keyword\">break</span> <span class=\"keyword\">end</span> <span class=\"comment\">-- list is empty?</span></span><br/><span class=\"line\">\t\t\ti = <span class=\"number\">1</span> <span class=\"comment\">-- restart the loop</span></span><br/><span class=\"line\">\t\t<span class=\"keyword\">end</span></span><br/><span class=\"line\">\t\t<span class=\"keyword\">local</span> <span class=\"built_in\">status</span>, res = coroutine.<span class=\"built_in\">resume</span>(threads[i])</span><br/><span class=\"line\">\t\t<span class=\"keyword\">if</span> <span class=\"keyword\">not</span> res <span class=\"keyword\">then</span> <span class=\"comment\">-- thread finished its task?</span></span><br/><span class=\"line\">\t\t\t<span class=\"built_in\">table</span>.<span class=\"built_in\">remove</span>(threads, i)</span><br/><span class=\"line\">\t\t<span class=\"keyword\">else</span></span><br/><span class=\"line\">\t\t\ti = i + <span class=\"number\">1</span> <span class=\"comment\">-- go to next thread</span></span><br/><span class=\"line\">\t\t<span class=\"keyword\">end</span></span><br/><span class=\"line\">\t<span class=\"keyword\">end</span></span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/><span class=\"line\">host = <span class=\"string\">&#34;www.w3.org&#34;</span></span><br/><span class=\"line\">file1 = <span class=\"string\">&#34;/TR/REC-html32.html&#34;</span></span><br/><span class=\"line\">file2 = <span class=\"string\">&#34;/TR/html401/html40.txt&#34;</span></span><br/><span class=\"line\">file3 = <span class=\"string\">&#34;/TR/2002/REC-xhtml-20020801/xhtml1.pdf&#34;</span></span><br/><span class=\"line\">file4 = <span class=\"string\">&#34;/TR/2000/REC-DOM-Level-2-Core-20001113/DOM2-Core.txt&#34;</span></span><br/><span class=\"line\">threads = {} <span class=\"comment\">-- list of all live threads</span></span><br/><span class=\"line\">get(host, file1)</span><br/><span class=\"line\">get(host, file2)</span><br/><span class=\"line\">get(host, file3)</span><br/><span class=\"line\">get(host, file4)</span><br/><span class=\"line\">dispatch()</span><br/></pre></td></tr></tbody></table></figure>\n</li>\n</ul>\n<p>将各协程存储在table中，调度程序管理协程的执行，如果一个协程发生了阻塞则调用下一个协程，循环下去直到各协程任务都完成（table中没有协程）。但是当每个协程都阻塞时，CPU仍在不停轮询，可用<code>socket.select()</code>优化<br/></p><figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/><span class=\"line\">9</span><br/><span class=\"line\">10</span><br/><span class=\"line\">11</span><br/><span class=\"line\">12</span><br/><span class=\"line\">13</span><br/><span class=\"line\">14</span><br/><span class=\"line\">15</span><br/><span class=\"line\">16</span><br/><span class=\"line\">17</span><br/><span class=\"line\">18</span><br/><span class=\"line\">19</span><br/><span class=\"line\">20</span><br/><span class=\"line\">21</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dispatch</span><span class=\"params\">()</span></span></span><br/><span class=\"line\">\t<span class=\"keyword\">local</span> i = <span class=\"number\">1</span></span><br/><span class=\"line\">\t<span class=\"keyword\">local</span> timedout = {}</span><br/><span class=\"line\">\t<span class=\"keyword\">while</span> <span class=\"literal\">true</span> <span class=\"keyword\">do</span></span><br/><span class=\"line\">\t\t<span class=\"keyword\">if</span> threads[i] == <span class=\"literal\">nil</span> <span class=\"keyword\">then</span> <span class=\"comment\">-- no more threads</span></span><br/><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> threads[<span class=\"number\">1</span>] == <span class=\"literal\">nil</span> <span class=\"keyword\">then</span> <span class=\"keyword\">break</span> <span class=\"keyword\">end</span></span><br/><span class=\"line\">\t\t\ti = <span class=\"number\">1</span> <span class=\"comment\">-- restart the loop</span></span><br/><span class=\"line\">\t\t\ttimedout = {}</span><br/><span class=\"line\">\t\t<span class=\"keyword\">end</span></span><br/><span class=\"line\">\t\t<span class=\"keyword\">local</span> <span class=\"built_in\">status</span>, res = coroutine.<span class=\"built_in\">resume</span>(threads[i])</span><br/><span class=\"line\">\t\t<span class=\"keyword\">if</span> <span class=\"keyword\">not</span> res <span class=\"keyword\">then</span> <span class=\"comment\">-- thread finished its task?</span></span><br/><span class=\"line\">\t\t\t<span class=\"built_in\">table</span>.<span class=\"built_in\">remove</span>(threads, i)</span><br/><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"comment\">-- time out</span></span><br/><span class=\"line\">\t\t\ti = i + <span class=\"number\">1</span></span><br/><span class=\"line\">\t\t\ttimedout[#timedout + <span class=\"number\">1</span>] = res</span><br/><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> #timedout == #threads <span class=\"keyword\">then</span> <span class=\"comment\">-- all threads blocked?</span></span><br/><span class=\"line\">\t\t\t\tsocket.<span class=\"built_in\">select</span>(timedout)</span><br/><span class=\"line\">\t\t\t<span class=\"keyword\">end</span></span><br/><span class=\"line\">\t\t<span class=\"keyword\">end</span></span><br/><span class=\"line\">\t<span class=\"keyword\">end</span></span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/></pre></td></tr></tbody></table></figure><p></p>\n<p><code>timedout</code>是一个table，存储各阻塞的协程，如果其大小与<code>threads</code>大小相等，则说明所有协程均阻塞，这时即可将<code>timedout</code>传给<code>socket.select()</code>来监视各协程的变化，若有一个协程不再阻塞，则可继续任务的执行</p>","text":"9 Coroutines 协程和线程的相同点：1It is a line of execution, with its own stack, its own local variables, and its own instruction pointer; but it shar...","link":"","photos":[],"count_time":{"symbolsCount":"5.3k","symbolsTime":"5 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#9-Coroutines\"><span class=\"toc-text\">9 Coroutines</span></a></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"lua学习笔记 · DUDOR's BLOG","uid":"9c34c47c46afa2c0f0858a885378d538","slug":"zl/2016-01-01-130_lua学习笔记 · DUDOR's BLOG","date":"2024-04-03T03:47:33.033Z","updated":"2024-04-03T03:47:33.033Z","comments":true,"path":"api/articles/zl/2016-01-01-130_lua学习笔记 · DUDOR's BLOG.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":" ##语法约定 lua中的变量名定义规则和大多数编程语言一样，是任何非数字开头的由字母，数字和下划线组成的字符串。 lua是大小写敏感的。 ##字符串 字符串是由单引号或双引号或N级中括号定义的，比如 a = ‘dudor’ a = “dudor” a = [[dudor]] 上...","link":"","photos":[],"count_time":{"symbolsCount":912,"symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Lua语法基础","uid":"7f1b4558290db46f8036450f70cb1288","slug":"zl/2016-01-01-128_Lua语法基础","date":"2024-04-03T03:47:33.032Z","updated":"2024-04-03T03:47:33.032Z","comments":true,"path":"api/articles/zl/2016-01-01-128_Lua语法基础.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":" 函数是第一类值（和其他变量相同），意味着函数可以存储在变量中，可以作为函数的参数，也可以作为函数的返回值 逻辑运算符and和or的运算结果不是true和false，而是和它的两个操作数相关 a and b -- 如果a为false,则返回a,否则返回b a or b -- 如果...","link":"","photos":[],"count_time":{"symbolsCount":"2.9k","symbolsTime":"3 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}