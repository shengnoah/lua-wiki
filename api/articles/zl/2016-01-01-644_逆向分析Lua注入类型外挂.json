{"title":"逆向分析Lua注入类型外挂","uid":"c82dde1f5a4311b882f0704493a4f2b5","slug":"zl/2016-01-01-644_逆向分析Lua注入类型外挂","date":"2024-04-03T03:47:35.864Z","updated":"2024-04-03T03:47:35.864Z","comments":true,"path":"api/articles/zl/2016-01-01-644_逆向分析Lua注入类型外挂.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<div class=\"post-content_wrapper\">\n<pre><code>        &lt;h2 id=&quot;相关&quot;&gt;&lt;a href=&quot;#相关&quot; class=&quot;headerlink&quot; title=&quot;相关&quot;&gt;&lt;/a&gt;相关&lt;/h2&gt;&lt;p&gt;该网游类型为横版过关类角色扮演游戏，之前在这上面花了不少时间。刚接触逆向分析，所以比较好奇外挂以及游戏漏洞的原理，故写此记录一下分析过程。  &lt;/p&gt;\n</code></pre>\n<h2 id=\"找寻样本\"><a href=\"#找寻样本\" class=\"headerlink\" title=\"找寻样本\"></a>找寻样本</h2><p>该游戏近年在国内市场效应不佳，所以游戏工作室以及外挂制作等业务逐渐退出国服范围。在谷歌搜索后，发现存在许多类型为<code>Lua 注入</code>的外挂–也就是向游戏注入Lua脚本代码，执行实现非法行为的手段。而其中支持国服的，只有一款，下载后对其进行分析。  </p>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>下载下来后，发现该外挂为单文件，对其进行查壳操作。<br/><img src=\"https://raw.githubusercontent.com/Lz1y/imggo/master/20190224145535.png\" alt=\"\"/><br/>为.NET程序，并且无壳，这就相当于开源了。使用Reflector反编译：<br/><img src=\"https://raw.githubusercontent.com/Lz1y/imggo/master/20190224145648.png\" alt=\"\"/><br/>无混淆，直接导出源码，丢入vs2017，方便阅读代码。  </p>\n<h3 id=\"加载器目录结构：\"><a href=\"#加载器目录结构：\" class=\"headerlink\" title=\"加载器目录结构：\"></a>加载器目录结构：</h3><p><img src=\"https://raw.githubusercontent.com/Lz1y/imggo/master/20190224150333.png\" alt=\"\"/>  </p>\n<h3 id=\"加载器功能函数：\"><a href=\"#加载器功能函数：\" class=\"headerlink\" title=\"加载器功能函数：\"></a>加载器功能函数：</h3><p><img src=\"https://raw.githubusercontent.com/Lz1y/imggo/master/20190224150226.png\" alt=\"\"/>  </p>\n<h3 id=\"加载器主要逻辑\"><a href=\"#加载器主要逻辑\" class=\"headerlink\" title=\"加载器主要逻辑\"></a>加载器主要逻辑</h3><p>WPF程序启动函数:  </p>\n<pre><code class=\"C#\">        private void Application_Startup(object sender, System.Windows.StartupEventArgs e)  \n        &#123;  \n            this.DeleteOld();  \n            this.CreateNew();  \n            Environment.Exit(0);  \n        &#125;  \n<pre><code>    private void CreateNew()  \n    &#123;  \n        string location = Assembly.GetExecutingAssembly().Location;  \n        string directoryName = MyWpfExtension.Computer.FileSystem.GetFileInfo(location).DirectoryName;  \n        byte[] lunaLoader = LunaLoader_Launcher.My.Resources.Resources.LunaLoader;  \n        string right = Functions.Random(5).ToString().ToLower();  \n        object obj2 = Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(this.localDirectory, @&amp;#34;&amp;#34;), right), &amp;#34;.exe&amp;#34;);  \n        Functions.RegistryWrite(&amp;#34;LastExecutable_Path&amp;#34;, Conversions.ToString(obj2));  \n        try  \n        &#123;  \n            File.WriteAllBytes(Conversions.ToString(obj2), lunaLoader);  \n        &#125;  \n        catch (Exception exception1)  \n        &#123;  \n            ProjectData.SetProjectError(exception1);  \n            Functions.Message(&amp;#34;Can&amp;#39;t write new program files.&amp;#34;, Conversions.ToString(3));  \n            ProjectData.ClearProjectError();  \n        &#125;  \n        try  \n        &#123;  \n            Process.Start(right, &amp;#34;&amp;#34;&amp;#34; + directoryName + &amp;#34;&amp;#34;&amp;#34;);  \n        &#125;  \n        catch (Exception exception2)  \n        &#123;  \n            ProjectData.SetProjectError(exception2);  \n            Functions.Message(&amp;#34;The application files are corrupted, please disable your anti-virus.&amp;#34;, Conversions.ToString(3));  \n            ProjectData.ClearProjectError();  \n        &#125;  \n    &#125;  \n\n    private void DeleteOld()  \n    &#123;  \n        object obj2 = Functions.RegistryRead(&amp;#34;LastExecutable_Path&amp;#34;);  \n        try  \n        &#123;  \n            if (File.Exists(Conversions.ToString(obj2)))  \n            &#123;  \n                File.Delete(Conversions.ToString(obj2));  \n            &#125;  \n        &#125;  \n        catch (Exception exception1)  \n        &#123;  \n            ProjectData.SetProjectError(exception1);  \n            Functions.Message(&amp;#34;Can&amp;#39;t delete old program files.&amp;#34;, Conversions.ToString(3));  \n            ProjectData.ClearProjectError();  \n        &#125;  \n    &#125;  \n</code></pre>\n<p></code></pre></p>\n<p>整体逻辑非常清晰，删除上一条注册表<code>LastExecutable_Path</code> (<code>SoftwareLunaLoader</code>)的值，随机生成文件名，然后向其写入新文件名，然后在<code>Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData)</code>目录中生成程序内的压缩资源。可以肯定此单文件程序为主程序释放器。让我们对释放出来的资源进行分析，由于释放后程序必须由启动器启动，为了调试方便我直接将程序源码修改，PATCH掉了随机文件名部分，指定固定的文件名，方便启动以及调试。  </p>\n<h3 id=\"登录器分析\"><a href=\"#登录器分析\" class=\"headerlink\" title=\"登录器分析\"></a>登录器分析</h3><p>首先先查询壳信息<br/><img src=\"https://raw.githubusercontent.com/Lz1y/imggo/master/20190224151404.png\" alt=\"\"/><br/>显示为<code>ConfuserEx(1.0.0)[-]</code><br/><img src=\"https://raw.githubusercontent.com/Lz1y/imggo/master/20190224151329.png\" alt=\"\"/><br/>丢入反编译工具中，发现特征，以及字符串等信息都被混淆了。<br/>尝试带壳调试，但是整体堆栈调用太复杂了，并且通信使用了ssl，Hook了发包收包函数也无法获取信息，遂放弃。<br/>此壳为魔改版，原版是开源的，所以原版脱壳工具都无法使用。硬实力还是弱了，拖不下来这个壳。<br/>开始找寻旁路，对该进程进行行为监控。  </p>\n<p>发现其有多次写入文件以及注册表操作：<br/><img src=\"https://raw.githubusercontent.com/Lz1y/imggo/master/20190224152731.png\" alt=\"\"/>  </p>\n<p>挨个分析，由于文件名也是随机生成的，我这里简单定义一下各个dll作用，方便辨识。  </p>\n<h4 id=\"4pcl9-dll\"><a href=\"#4pcl9-dll\" class=\"headerlink\" title=\"4pcl9.dll\"></a>4pcl9.dll</h4><p>功能函数，提供导出函数，为外挂的核心功能dll<br/><img src=\"https://raw.githubusercontent.com/Lz1y/imggo/master/20190224152908.png\" alt=\"\"/>  </p>\n<h4 id=\"amdd3drt-dll\"><a href=\"#amdd3drt-dll\" class=\"headerlink\" title=\"amdd3drt.dll\"></a>amdd3drt.dll</h4><p>无导出函数<br/><img src=\"https://raw.githubusercontent.com/Lz1y/imggo/master/20190224153056.png\" alt=\"\"/><br/>猜测功能为DLL注入，查看DLLMain函数  </p>\n<pre><code class=\"C\">BOOL __stdcall DllMain(HINSTANCE hinstDLL, DWORD fdwReason, LPVOID lpvReserved)  \n&#123;  \n  int v3; // eax  \n  int v5; // [esp+4h] [ebp-20Ch]  \n  CHAR Filename; // [esp+108h] [ebp-108h]  \n<p>if ( fdwReason == 1 &amp;&amp; !dword_10019238 )<br />\n&#123;<br />\ndword_10019238 = 1;<br />\nGetModuleFileNameA(0, &amp;Filename, 0x104u);<br />\nsub_10003628(&amp;Filename, 0, 0, (int)&amp;v5, 0);<br />\nv3 = strcmp((const char *)&amp;v5, (const char *)&amp;unk_10016488);<br />\nif ( v3 )<br />\nv3 = -(v3 &lt; 0) | 1;<br />\nif ( v3 )<br />\nreturn 0;<br />\nsub_10001010((int)&quot;LunaLoader attached!n&quot;);<br />\nsub_10001010((int)&quot;nnBy Joni-St, and Ferrums.&quot;);<br />\ndword_1001924C = (int)GetCurrentProcess();<br />\ndword_10019250 = (int)hinstDLL;<br />\nCreateThread(0, 0, StartAddress, &amp;dword_1001924C, 0, 0);<br />\n&#125;<br />\nreturn 1;<br />\n&#125;<br />\n</code></pre></p>\n<p>可以看到逻辑为，通过dll劫持后，比对进程名字是否为游戏进程，是的话就在游戏（自身）进程内存中创建新的进程并执行<code>StartAddress</code>函数。  </p>\n<p>StartAddress:<br/>主要逻辑用注释标识了。  </p>\n<pre><code class=\"c\">DWORD __stdcall StartAddress(LPVOID lpThreadParameter)  \n&#123;  \n  HMODULE v2; // eax  \n  HMODULE v3; // edi  \n  FARPROC v4; // eax  \n  FARPROC v5; // ebx  \n  FARPROC v6; // eax  \n  HANDLE v7; // eax  \n  HANDLE v8; // ebx  \n  char *v9; // esi  \n  DWORD v10; // ecx  \n  char v11; // ah  \n  DWORD v12; // edx  \n  char *v13; // edi  \n  char v14; // al  \n  char v15; // al  \n  CHAR *v16; // edi  \n  DWORD v17; // edi  \n  int v18; // ecx  \n  char *v19; // edx  \n  LPCSTR v20; // ebx  \n  CHAR *v21; // eax  \n  CHAR *v22; // edi  \n  CHAR *v23; // edi  \n  char *v24; // eax  \n  CHAR v25; // cl  \n  const char *i; // ebx  \n  LPCSTR v27; // edi  \n  int v28; // eax  \n  int *v29; // eax  \n  int v30; // eax  \n  int v31; // ecx  \n  unsigned int v32; // edx  \n  int v33; // ecx  \n  void *v34; // eax  \n  HANDLE v35; // edi  \n  void *v36; // ebx  \n  _DWORD *v37; // esi  \n  int v38; // ST14_4  \n  struct _SYSTEM_INFO SystemInfo; // [esp+0h] [ebp-106ACh]  \n  struct _MEMORY_BASIC_INFORMATION Buffer; // [esp+24h] [ebp-10688h]  \n  DWORD v41; // [esp+40h] [ebp-1066Ch]  \n  DWORD v42; // [esp+44h] [ebp-10668h]  \n  DWORD v43; // [esp+48h] [ebp-10664h]  \n  LPCWSTR lpWideCharStr; // [esp+4Ch] [ebp-10660h]  \n  HANDLE hFile; // [esp+50h] [ebp-1065Ch]  \n  DWORD NumberOfBytesRead; // [esp+54h] [ebp-10658h]  \n  HANDLE *v47; // [esp+58h] [ebp-10654h]  \n  LPCSTR lpszVolumeMountPoint; // [esp+5Ch] [ebp-10650h]  \n  int v49; // [esp+60h] [ebp-1064Ch]  \n  char v50; // [esp+64h] [ebp-10648h]  \n  __int16 v51; // [esp+390h] [ebp-1031Ch]  \n  char v52; // [esp+10064h] [ebp-648h]  \n  CHAR LibFileName; // [esp+10168h] [ebp-544h]  \n  CHAR MultiByteStr; // [esp+1026Ch] [ebp-440h]  \n  __int128 v55; // [esp+10370h] [ebp-33Ch]  \n  __int128 v56; // [esp+10380h] [ebp-32Ch]  \n  __int128 v57; // [esp+10390h] [ebp-31Ch]  \n  __int128 v58; // [esp+103A0h] [ebp-30Ch]  \n  __int128 v59; // [esp+103B0h] [ebp-2FCh]  \n  __int128 v60; // [esp+103C0h] [ebp-2ECh]  \n  __int128 v61; // [esp+103D0h] [ebp-2DCh]  \n  __int128 v62; // [esp+103E0h] [ebp-2CCh]  \n  __int128 v63; // [esp+103F0h] [ebp-2BCh]  \n  __int128 v64; // [esp+10400h] [ebp-2ACh]  \n  __int128 v65; // [esp+10410h] [ebp-29Ch]  \n  __int128 v66; // [esp+10420h] [ebp-28Ch]  \n  __int128 v67; // [esp+10430h] [ebp-27Ch]  \n  __int128 v68; // [esp+10440h] [ebp-26Ch]  \n  __int128 v69; // [esp+10450h] [ebp-25Ch]  \n  __int128 v70; // [esp+10460h] [ebp-24Ch]  \n  __int128 v71; // [esp+10470h] [ebp-23Ch]  \n  __int128 v72; // [esp+10480h] [ebp-22Ch]  \n  __int128 v73; // [esp+10490h] [ebp-21Ch]  \n  __int128 v74; // [esp+104A0h] [ebp-20Ch]  \n  __int128 v75; // [esp+104B0h] [ebp-1FCh]  \n  __int128 v76; // [esp+104C0h] [ebp-1ECh]  \n  __int128 v77; // [esp+104D0h] [ebp-1DCh]  \n  __int128 v78; // [esp+104E0h] [ebp-1CCh]  \n  __int128 v79; // [esp+104F0h] [ebp-1BCh]  \n  __int128 v80; // [esp+10500h] [ebp-1ACh]  \n  __int128 v81; // [esp+10510h] [ebp-19Ch]  \n  __int128 v82; // [esp+10520h] [ebp-18Ch]  \n  __int128 v83; // [esp+10530h] [ebp-17Ch]  \n  __int128 v84; // [esp+10540h] [ebp-16Ch]  \n  __int128 v85; // [esp+10550h] [ebp-15Ch]  \n  __int128 v86; // [esp+10560h] [ebp-14Ch]  \n  __int128 v87; // [esp+10570h] [ebp-13Ch]  \n  __int128 v88; // [esp+10580h] [ebp-12Ch]  \n  __int128 v89; // [esp+10590h] [ebp-11Ch]  \n  __int128 v90; // [esp+105A0h] [ebp-10Ch]  \n  __int128 v91; // [esp+105B0h] [ebp-FCh]  \n  __int128 v92; // [esp+105C0h] [ebp-ECh]  \n  __int128 v93; // [esp+105D0h] [ebp-DCh]  \n  __int128 v94; // [esp+105E0h] [ebp-CCh]  \n  __int128 v95; // [esp+105F0h] [ebp-BCh]  \n  __int128 v96; // [esp+10600h] [ebp-ACh]  \n  __int128 v97; // [esp+10610h] [ebp-9Ch]  \n  __int128 v98; // [esp+10620h] [ebp-8Ch]  \n  __int128 v99; // [esp+10630h] [ebp-7Ch]  \n  __int128 v100; // [esp+10640h] [ebp-6Ch]  \n  __int128 v101; // [esp+10650h] [ebp-5Ch]  \n  __int128 v102; // [esp+10660h] [ebp-4Ch]  \n  __int128 v103; // [esp+10670h] [ebp-3Ch]  \n  __int128 v104; // [esp+10680h] [ebp-2Ch]  \n  int v105; // [esp+10690h] [ebp-1Ch]  \n  int v106; // [esp+10694h] [ebp-18h]  \n  int v107; // [esp+10698h] [ebp-14h]  \n  __int16 v108; // [esp+1069Ch] [ebp-10h]  \n  int (*v109)(void); // [esp+106A0h] [ebp-Ch]  \n  __int16 v110; // [esp+106A4h] [ebp-8h]  \n  char v111; // [esp+106A6h] [ebp-6h]  \n<p>v47 = (HANDLE <em>)lpThreadParameter;<br />\nCoInitialize(0);<br />\nif ( SHGetKnownFolderPath(&amp;unk_10011190, 0, 0, &amp;lpWideCharStr) )<br />\nreturn 1;<br />\nMultiByteStr = 0;<br />\nWideCharToMultiByte(0, 0, lpWideCharStr, -1, &amp;MultiByteStr, 260, 0, 0);<br />\nCoTaskMemFree((LPVOID)lpWideCharStr);<br />\nsub_10003628(&amp;MultiByteStr, (int)&amp;v52, 0, 0, 0);<br />\n_makepath(&amp;LibFileName, 0, &amp;v52, &quot;4pcl9.dll&quot;, 0);  <a href=\"//xn--4pcl9-jr8h237z.xn--dll-lq0fl0nx50dwbw\">//获取4pcl9.dll绝对路径</a><br />\nv2 = LoadLibraryA(&amp;LibFileName);  <a href=\"//xn--4pcl9-e86hzbv53p4x8g.dll\">//动态加载4pcl9.dll</a><br />\nv3 = v2;<br />\nif ( !v2 )<br />\n&#123;<br />\nMessageBoxA(0, &quot;Lua initialization failed.&quot;, &quot;LunaLoader&quot;, 0);<br />\nMessageBoxA((HWND)v3, &amp;LibFileName, &quot;LunaLoader&quot;, (UINT)v3);<br />\nreturn 0;<br />\n&#125;<br />\nv4 = GetProcAddress(v2, &quot;luaL_newstate&quot;);  //初始化lua加载器<br />\nv5 = v4;<br />\nv109 = (int (</em>)(void))v4;<br />\ndword_10019248 = (int (__cdecl *)(_DWORD, _DWORD))GetProcAddress(v3, &quot;luaL_loadstring&quot;); //获取函数地址<br />\ndword_10019244 = (int (__cdecl *)(_DWORD, _DWORD, _DWORD))GetProcAddress(v3, &quot;lua_dump&quot;);<br />\nv6 = GetProcAddress(v3, &quot;lua_settop&quot;);<br />\ndword_1001923C = (int (__cdecl *)(_DWORD, _DWORD))v6;<br />\nif ( v5 &amp;&amp; dword_10019248 &amp;&amp; dword_10019244 &amp;&amp; v6 )<br />\n&#123;<br />\nGetFileAttributesA(&quot;...\\elsword.exe&quot;);<br />\nv7 = CreateNamedPipeA(&quot;\\.\\pipe\\LunaLoaderCommandPipe&quot;, 3u, 4u, 1u, 0, 0, 0, 0); //创建命名管道与登录器进行交互，获取用户传递的脚本字符串内容并且执行<br />\nv8 = v7;<br />\nhFile = v7;<br />\nif ( v7 &amp;&amp; v7 != (HANDLE)-1 )<br />\n&#123;<br />\nif ( ConnectNamedPipe(v7, 0) )<br />\n&#123;<br />\nv9 = (char *)malloc(0x400u);<br />\nmemset(v9, 0, 0x400u);<br />\nif ( !ReadFile(v8, v9, 0x3FFu, &amp;NumberOfBytesRead, 0) )<br />\ngoto LABEL_71;<br />\nv10 = NumberOfBytesRead;<br />\nif ( NumberOfBytesRead &lt;= 1 )<br />\ngoto LABEL_71;<br />\nv11 = *v9;<br />\nv12 = NumberOfBytesRead - 1;<br />\nv13 = v9;<br />\nif ( NumberOfBytesRead != 1 )<br />\n&#123;<br />\ndo<br />\n&#123;<br />\nv14 = (v13++)[1];<br />\nv15 = v11++ ^ v14;<br />\n*(v13 - 1) = v15;<br />\n–v12;<br />\n&#125;<br />\nwhile ( v12 );<br />\nv10 = NumberOfBytesRead;<br />\n&#125;<br />\nNumberOfBytesRead = v10 - 1;<br />\nv9[NumberOfBytesRead] = 0;<br />\nv16 = (CHAR *)malloc(0x400u);<br />\nlpszVolumeMountPoint = v16;<br />\nmemset(v16, 0, 0x400u);<br />\nif ( !ReadFile(v8, v16, 0x3FFu, &amp;v42, 0) )<br />\ngoto LABEL_71;<br />\nv17 = NumberOfBytesRead;<br />\nv18 = 0;<br />\nv19 = v9;<br />\nif ( NumberOfBytesRead )<br />\n&#123;<br />\nv20 = lpszVolumeMountPoint;<br />\ndo<br />\n&#123;<br />\n*v19 ^= v20[v18];<br />\n++v19;<br />\nv18 = v18 + 1 &lt; v42 ? v18 + 1 : 0;<br />\n–v17;<br />\n&#125;<br />\nwhile ( v17 );<br />\nv8 = hFile;<br />\n&#125;<br />\nv21 = (CHAR *)malloc(0x10u);<br />\nlpszVolumeMountPoint = v21;<br />\n*(_OWORD *)v21 = 0i64;<br />\nif ( ReadFile(v8, v21, 0xFu, &amp;v41, 0) )<br />\n&#123;<br />\nv22 = (CHAR *)malloc(0x41u);<br />\nmemset(v22, 0, 0x41u);<br />\nv23 = v22 + 1;<br />\nGetVolumeNameForVolumeMountPointA(lpszVolumeMountPoint, v23, 0x40u);<br />\nv24 = (char *)malloc(0x40u);<br />\nv25 = *v23;<br />\nfor ( i = v24; v25; <ins>v23 )<br />\n&#123;<br />\nif ( (v25 &gt;= 97 &amp;&amp; v25 &lt;= 102 || v25 &gt;= 65 &amp;&amp; v25 &lt;= 70 || v25 &gt;= 48 &amp;&amp; v25 &lt;= 57) &amp;&amp; *(v23 - 1) != 109 )<br />\n*v24</ins> = v25;<br />\nv25 = v23[1];<br />\n&#125;<br />\n*v24 = 0;<br />\nGetSystemInfo(&amp;SystemInfo);<br />\nv27 = (LPCSTR)SystemInfo.lpMinimumApplicationAddress;<br />\nfor ( lpszVolumeMountPoint = (LPCSTR)SystemInfo.lpMaximumApplicationAddress;<br />\nv27 &lt; lpszVolumeMountPoint;<br />\nv27 += Buffer.RegionSize )<br />\n&#123;<br />\nVirtualQueryEx(*v47, v27, &amp;Buffer, 0x1Cu);<br />\nif ( (Buffer.Protect == 2 || Buffer.Protect == 4 || Buffer.Protect == 32 || Buffer.Protect == 64)<br />\n&amp;&amp; Buffer.State == 4096 )<br />\n&#123;<br />\nv28 = strcmp(v9, i);<br />\nif ( v28 )<br />\nv28 = -(v28 &lt; 0) | 1;<br />\nif ( !v28 )<br />\nsub_10001150((int)Buffer.BaseAddress, Buffer.RegionSize);<br />\n&#125;<br />\n&#125;<br />\nCloseHandle(*v47);<br />\nv29 = &amp;dword_100187C4;<br />\nif ( off_100187C8 )<br />\n&#123;<br />\nwhile ( *v29 )<br />\n&#123;<br />\nv29 += 3;<br />\nif ( !v29[1] )<br />\ngoto LABEL_49;<br />\n&#125;<br />\n&#125;<br />\nelse<br />\n&#123;<br />\nLABEL_49:<br />\nv30 = strcmp(v9, i);<br />\nif ( v30 )<br />\nv30 = -(v30 &lt; 0) | 1;<br />\nif ( !v30 )<br />\n&#123;<br />\nlpszVolumeMountPoint = *(LPCSTR *)(**(_DWORD **)(dword_100187D0 + 1) + 4);<br />\nv47 = (HANDLE <em>)dword_100187C4;<br />\ndword_10019240 = v109();<br />\nif ( dword_10019240 )<br />\n&#123;<br />\nv55 = xmmword_10016850;<br />\nv56 = xmmword_100166A0;<br />\nv57 = xmmword_10016910;<br />\nv58 = xmmword_10016770;<br />\nv59 = xmmword_100167D0;<br />\nv60 = xmmword_10016960;<br />\nv61 = xmmword_10016660;<br />\nv62 = xmmword_10016840;<br />\nv63 = xmmword_100166B0;<br />\nv64 = xmmword_100168F0;<br />\nv65 = xmmword_10016740;<br />\nv66 = xmmword_100167C0;<br />\nv67 = xmmword_10016930;<br />\nv68 = xmmword_10016680;<br />\nv69 = xmmword_10016820;<br />\nv70 = xmmword_100166D0;<br />\nv71 = xmmword_100168C0;<br />\nv72 = xmmword_10016730;<br />\nv73 = xmmword_100167F0;<br />\nv74 = xmmword_10016940;<br />\nv75 = xmmword_10016670;<br />\nv76 = xmmword_10016860;<br />\nv77 = xmmword_100166E0;<br />\nv78 = xmmword_10016900;<br />\nv79 = xmmword_10016760;<br />\nv80 = xmmword_10016800;<br />\nv81 = xmmword_10016950;<br />\nv82 = xmmword_10016650;<br />\nv83 = xmmword_10016870;<br />\nv84 = xmmword_100166C0;<br />\nv85 = xmmword_100168E0;<br />\nv86 = xmmword_10016780;<br />\nv87 = xmmword_100167E0;<br />\nv88 = xmmword_10016790;<br />\nv89 = xmmword_10016700;<br />\nv90 = xmmword_10016830;<br />\nv91 = xmmword_10016710;<br />\nv92 = xmmword_100167B0;<br />\nv93 = xmmword_10016810;<br />\nv94 = xmmword_10016920;<br />\nv95 = xmmword_10016890;<br />\nv31 = 0;<br />\nv105 = -2004716861;<br />\nv32 = 0;<br />\nv96 = xmmword_100166F0;<br />\nv106 = -1359952088;<br />\nv97 = xmmword_100168A0;<br />\nv107 = 1973920377;<br />\nv98 = xmmword_10016720;<br />\nv108 = -22329;<br />\nv99 = xmmword_10016880;<br />\nv109 = (int (</em>)(void))1050454148;<br />\nv100 = xmmword_10016750;<br />\nv110 = -5641;<br />\nv101 = xmmword_100168B0;<br />\nv111 = 37;<br />\nv102 = xmmword_100167A0;<br />\nv103 = xmmword_10016690;<br />\nv104 = xmmword_100168D0;<br />\ndo<br />\n&#123;<br />\n*((_BYTE *)&amp;v55 + v32) ^= *((_BYTE *)&amp;v109 + v31);<br />\nv33 = (unsigned int)(v31 + 1) &lt; 7 ? v31 + 1 : 0;<br />\n*((_BYTE *)&amp;v55 + v32 + 1) ^= *((_BYTE *)&amp;v109 + v33);<br />\nv32 += 2;<br />\nv31 = (unsigned int)(v33 + 1) &lt; 7 ? v33 + 1 : 0;<br />\n&#125;<br />\nwhile ( v32 &lt; 0x32E );<br />\nv49 = 814;<br />\nqmemcpy(&amp;v50, &amp;v55, 0x32Cu);<br />\nv51 = v108;<br />\nv34 = malloc(0x100000u);<br />\nv35 = hFile;<br />\nv36 = v34;<br />\nv43 = 0;<br />\nwhile ( 1 )<br />\n&#123;<br />\nmemset(v36, 0, 0x100000u);<br />\nif ( ReadFile(v35, v36, 0xFFFFFu, &amp;v43, 0) &amp;&amp; v43 )<br />\n&#123;<br />\nv37 = 0;<br />\nif ( !dword_10019248(dword_10019240, v36) )<br />\n&#123;<br />\nv37 = malloc(0x10004u);<br />\nv38 = dword_10019240;<br />\n*v37 = 0;<br />\nif ( dword_10019244(v38, sub_10001200, v37) )<br />\n&#123;<br />\nj___free_base(v37);<br />\nv37 = 0;<br />\n&#125;<br />\n&#125;<br />\ndword_1001923C(dword_10019240, -2);<br />\nif ( v37 )<br />\n&#123;<br />\n((void (__cdecl *)(LPCSTR, _DWORD *, _DWORD))v47)(lpszVolumeMountPoint, v37 + 1, *v37);<br />\nj___free_base(v37);<br />\n&#125;<br />\n&#125;<br />\nSleep(0x32u);<br />\n&#125;<br />\n&#125;<br />\nMessageBoxA(0, &quot;Lua init error.&quot;, &quot;LunaLoader&quot;, 0);<br />\nreturn 0;<br />\n&#125;<br />\n&#125;<br />\nMessageBoxA(0, &quot;LunaLoader startup failed.&quot;, &quot;LunaLoader&quot;, 0);<br />\n&#125;<br />\nelse<br />\n&#123;<br />\nLABEL_71:<br />\nMessageBoxA(0, &quot;Pipe read error.&quot;, &quot;LunaLoader&quot;, 0);<br />\nCloseHandle(v8);<br />\n&#125;<br />\n&#125;<br />\nelse<br />\n&#123;<br />\nMessageBoxA(0, &quot;Unable to connect to communication pipe.&quot;, &quot;LunaLoader&quot;, 0);<br />\nCloseHandle(v8);<br />\n&#125;<br />\n&#125;<br />\nelse<br />\n&#123;<br />\nMessageBoxA(0, &quot;Unable to open communication pipe.&quot;, &quot;LunaLoader&quot;, 0);<br />\n&#125;<br />\n&#125;<br />\nelse<br />\n&#123;<br />\nMessageBoxA(0, &quot;Internal error.&quot;, &quot;LunaLoader&quot;, 0);<br />\n&#125;<br />\nreturn 0;<br />\n&#125;<br />\n</code></pre></p>\n<h3 id=\"dinput8-dll\"><a href=\"#dinput8-dll\" class=\"headerlink\" title=\"dinput8.dll\"></a>dinput8.dll</h3><p>Dll劫持<br/><img src=\"https://raw.githubusercontent.com/Lz1y/imggo/master/20190224154040.png\" alt=\"\"/>  </p>\n<p>查看导出函数<br/><img src=\"https://raw.githubusercontent.com/Lz1y/imggo/master/20190224154107.png\" alt=\"\"/>  </p>\n<p>随便查看一个，DllRegisterServer：  </p>\n<pre><code class=\"c\">HRESULT __stdcall DllRegisterServer()  \n&#123;  \n  int (*v1)(void); // [esp+D0h] [ebp-8h]  \n<p>if ( !hModule )<br />\nsub_10002670();<br />\nv1 = (int (*)(void))GetProcAddress(hModule, &quot;DllRegisterServer&quot;);<br />\nif ( !v1 )<br />\nExitProcess(0);<br />\nreturn v1();<br />\n&#125;<br />\n</code></pre></p>\n<p>可以看到很明显的Hook了DllRegisterServer函数，但是并未修改行为。  </p>\n<p>查看到<code>DirectInput8Create</code>函数：  </p>\n<pre><code class=\"c\">__int64 __stdcall DirectInput8Create(int a1, int a2, int a3, _DWORD *a4, int a5)  \n&#123;  \n  int v5; // edx  \n  __int64 v6; // ST10_8  \n  int v8; // [esp+Ch] [ebp-100h]  \n  void *v9; // [esp+14h] [ebp-F8h]  \n  int v10; // [esp+20h] [ebp-ECh]  \n  int v11; // [esp+ECh] [ebp-20h]  \n  int v12; // [esp+F8h] [ebp-14h]  \n  FARPROC v13; // [esp+104h] [ebp-8h]  \n  int savedregs; // [esp+10Ch] [ebp+0h]  \n<p>if ( !hModule )<br />\nsub_10002670();<br />\nv13 = GetProcAddress(hModule, &quot;DirectInput8Create&quot;);<br />\nif ( !v13 )<br />\nExitProcess(0);<br />\nif ( dword_100B9CE0 )<br />\n&#123;<br />\n(<em>(void (__stdcall **)(int))(</em>(_DWORD *)dword_100B9CE0 + 4))(dword_100B9CE0);<br />\nv12 = 0;<br />\n&#125;<br />\nelse<br />\n&#123;<br />\nv12 = ((int (__stdcall <em>)(int, int, int, int <em>, int))v13)(a1, a2, a3, &amp;v11, a5);<br />\nif ( !v12 )<br />\n&#123;<br />\nv9 = operator new(8u);<br />\nif ( v9 )<br />\nv8 = sub_10002BA0(v11);<br />\nelse<br />\nv8 = 0;<br />\nv10 = v8;<br />\ndword_100B9CE0 = v8;<br />\n(</em>(void (__stdcall **)(int))(</em>(_DWORD *)v8 + 4))(v8);<br />\n&#125;<br />\nCreateThread(0, 0, (LPTHREAD_START_ROUTINE)StartAddress, 0, 0, 0);//主要操作<br />\n&#125;<br />\n*a4 = dword_100B9CE0;<br />\nsub_10004C30(&amp;savedregs, &amp;dword_1000291C, v12, v5);<br />\nreturn v6;<br />\n&#125;<br />\n</code></pre></p>\n<p>StartAddress:  </p>\n<pre><code>DWORD __stdcall StartAddress()  \n&#123;  \n  LoadLibraryA(&#34;amdd3drt.dll&#34;);  \n  return 0;  \n&#125;  \n</code></pre><p>加载了amdd3drt.dll。  </p>\n<h3 id=\"整体逻辑\"><a href=\"#整体逻辑\" class=\"headerlink\" title=\"整体逻辑\"></a>整体逻辑</h3><p>至此，整个调用逻辑就已经理清楚了。首先释放器(LunaLoader-Launcher.exe)释放并启动登录器，然后登录器获取游戏进程并且找到其目录，释放dinput8.dll(DLL劫持)到该目录，劫持后，加载amdd3drt.dll（DLL注入），并创建命名管道与登录器进行通信，接收字符串并调用4pcl9.dll（Lua C库）中的方法。  </p>\n<p>搞了半天，其实就是将自己的Lua代码注入到游戏中执行。<br/>然后来看一看提供的外挂脚本是如何实现的。<br/>外挂的主要基于Hook游戏的函数，但是如何获取游戏中的函数以及参数呢？<br/>作者提供了如下脚本:  </p>\n<pre><code class=\"lua\">--&#123; &#34;Name&#34;:&#34;Multi Function Dumper&#34;, &#34;Type&#34;:&#34;Login/Loading Screen&#34;, &#34;Version&#34;: &#34;1.0.0.0&#34; &#125;  \nfunction file_exists(file)  \n  local f = io.open(file, &#34;rb&#34;)  \n  if f then f:close() end  \n  return f ~= nil  \nend  \nfunction lines_from(file)  \n  if not file_exists(file) then return &#123;&#125; end  \n  lines = &#123;&#125;  \n  for line in io.lines(file) do  \n    lines[#lines + 1] = line  \n  end  \n  return lines  \nend  \nlocal lines = lines_from(&#34;_functions.txt&#34;)  \n<p>local outfile = &quot;_fdResult_clean.txt&quot;<br />\nlocal f       = io.open(outfile, &quot;wb&quot;)<br />\nlocal outfunc = function(text)<br />\nf:write(text)<br />\nf:flush()<br />\nend<br />\nlocal funclist = &#123;<br />\n&#123;&quot;CX2ItemManager&quot;, &quot;AddShopItemList_LUA&quot;&#125;<br />\n&#125;<br />\nlocal fromfile = false<br />\nif fromfile then<br />\nfor k,v in pairs(lines) do<br />\none, two = lines[k]:match(&quot;([<sup>.]+).([</sup>.]+)&quot;)<br />\ntable.insert(funclist, &#123; one, two &#125;)<br />\noutfunc(&quot;Found: [&quot; … two … &quot;]rn&quot;)<br />\nend<br />\nend</p>\n<p>local dump = true<br />\nif dump then<br />\nlocal pack0<br />\npack0 = function(tbl, idx, a, …)<br />\ntbl[idx] = a<br />\nif a then pack0(tbl, idx + 1, …) end<br />\nreturn tbl<br />\nend<br />\nlocal function pack(…)<br />\nreturn pack0(&#123;&#125;, 1, …)<br />\nend</p>\n<p>local tbldump<br />\ntbldump = function(tbl, outfunc)<br />\nif type(tbl) == &quot;string&quot; then<br />\noutfunc(&quot;&quot;&quot;)<br />\noutfunc(tbl)<br />\noutfunc(&quot;&quot;&quot;)<br />\nelseif type(tbl) == &quot;table&quot; then<br />\noutfunc(&quot;&#123;&quot;)<br />\nfor k, v in pairs(tbl) do<br />\noutfunc(&quot;[&quot;)<br />\ntbldump(k, outfunc)<br />\noutfunc(&quot;] = &quot;)<br />\ntbldump(v, outfunc)<br />\noutfunc(&quot;, &quot;)<br />\nend<br />\noutfunc(&quot;&#125;&quot;)<br />\nelse<br />\noutfunc(tostring(tbl))<br />\nend<br />\nend</p>\n<p>outfunc(&quot;Starting.rn&quot;)</p>\n<p>for k, v in pairs(funclist) do<br />\nlocal func = _G<br />\nlocal enclosing = nil<br />\nlocal enclosingKey = nil<br />\nfor meh, fname in ipairs(v) do<br />\nenclosing = func<br />\nenclosingKey = fname<br />\nfunc = func[fname]<br />\nend</p>\n<pre><code>enclosing[enclosingKey] = function(...)  \n    outfunc(tostring(enclosingKey) .. &amp;#34;(&amp;#34;)  \n    local makecomma = false  \n    for k, v in ipairs(pack(...)) do  \n        if makecomma then outfunc(&amp;#34;, &amp;#34;) end  \n        makecomma = true  \n        tbldump(v, outfunc)  \n    end  \n    outfunc(&amp;#34;)rn&amp;#34;)  \n    return func(...)  \nend  \n\noutfunc(&amp;#34;Installed for &amp;#34; .. tostring(enclosingKey) .. &amp;#34;rn&amp;#34;)  \n</code></pre>\n<p>end<br />\nend<br />\n</code></pre></p>\n<p>首先可以从全局变量表<code>_G</code>中获取内存中的所有类以及方法名，然后通过上述脚本对该函数进行Hook:  </p>\n<pre><code class=\"lua\">    enclosing[enclosingKey] = function(...)  \n        outfunc(tostring(enclosingKey) .. &#34;(&#34;)  \n        local makecomma = false  \n        for k, v in ipairs(pack(...)) do  \n            if makecomma then outfunc(&#34;, &#34;) end  \n            makecomma = true  \n            tbldump(v, outfunc)  \n        end  \n        outfunc(&#34;)rn&#34;)  \n        return func(...)  \n    end  \n</code></pre>\n<p>通过迭代变长参数<code>for k, v in ipairs(pack(...))</code>获取到参数类型以及参数名，最后再传参调用原函数即可。  </p>\n<h2 id=\"结\"><a href=\"#结\" class=\"headerlink\" title=\"结\"></a>结</h2><p>整体思路比较简单，游戏的反作弊系统几乎没有起到任何作用，除了DLL劫持还有许多方法可以bypass，此游戏之前甚至将明文Lua脚本放置于用户端，当时导致了大批用户使用非法手段影响游戏公平性。而这个外挂利用的是同种方法，基于游戏引擎特性的外挂，稳定性相较于直接修改内存时好了不止一星半点。  </p>\n<pre><code>当前热门游戏中有使用XIGNCODE3的有:  \n<p>新玛奇英雄传<br />\nSF Online<br />\n黑色沙漠<br />\n跑跑卡丁车<br />\n冒险岛ㄧ<br />\n艾尔之光<br />\n《反恐精英Online》（游戏橘子）于2018年3月16日移除使用XIGNCODE3<br />\n</code></pre><p>怪不得这些游戏都死的差不多了<br/><img src=\"https://raw.githubusercontent.com/Lz1y/imggo/master/20190224161009.png\" alt=\"\"/>  </p></p>\n<pre><code>    &lt;/div&gt;\n</code></pre>\n","text":" &lt;h2 id=&quot;相关&quot;&gt;&lt;a href=&quot;#相关&quot; class=&quot;headerlink&quot; title=&quot;相关&quot;&gt;&lt;/a&gt;相关&lt;/h2&gt;&lt;p&gt...","link":"","photos":[],"count_time":{"symbolsCount":"20k","symbolsTime":"18 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%89%BE%E5%AF%BB%E6%A0%B7%E6%9C%AC\"><span class=\"toc-text\">找寻样本</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%88%86%E6%9E%90\"><span class=\"toc-text\">分析</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8A%A0%E8%BD%BD%E5%99%A8%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84%EF%BC%9A\"><span class=\"toc-text\">加载器目录结构：</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8A%A0%E8%BD%BD%E5%99%A8%E5%8A%9F%E8%83%BD%E5%87%BD%E6%95%B0%EF%BC%9A\"><span class=\"toc-text\">加载器功能函数：</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8A%A0%E8%BD%BD%E5%99%A8%E4%B8%BB%E8%A6%81%E9%80%BB%E8%BE%91\"><span class=\"toc-text\">加载器主要逻辑</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%99%BB%E5%BD%95%E5%99%A8%E5%88%86%E6%9E%90\"><span class=\"toc-text\">登录器分析</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4pcl9-dll\"><span class=\"toc-text\">4pcl9.dll</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#amdd3drt-dll\"><span class=\"toc-text\">amdd3drt.dll</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#dinput8-dll\"><span class=\"toc-text\">dinput8.dll</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%95%B4%E4%BD%93%E9%80%BB%E8%BE%91\"><span class=\"toc-text\">整体逻辑</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%BB%93\"><span class=\"toc-text\">结</span></a></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"每周一个Github项目【第二期】govaluate · Zablog","uid":"885db73aeabd5ddc502d1fba79c0bba0","slug":"zl/2016-01-01-643_每周一个Github项目【第二期】govaluate · Zablog","date":"2024-04-03T03:47:35.864Z","updated":"2024-04-03T03:47:35.864Z","comments":true,"path":"api/articles/zl/2016-01-01-643_每周一个Github项目【第二期】govaluate · Zablog.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"golang环境下任意表达式的求值 // Arbitrary expression evaluation for golang 名称 govaluate 地址 Github 作者 Knetic等 brief intro Arbitrary expression evaluatio...","link":"","photos":[],"count_time":{"symbolsCount":"2.5k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"LUA","uid":"1af1fe55807c70bf78d46b38de92ac2d","slug":"zl/2016-01-01-641_LUA","date":"2024-04-03T03:47:35.863Z","updated":"2024-04-03T03:47:35.863Z","comments":true,"path":"api/articles/zl/2016-01-01-641_LUA.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":" &lt;/a&gt;&lt;div class=&quot;a-content&quot;&gt;&lt;a class=&quot;clearlink&quot; href=&quot;15583468928554.html&quot;&gt; &lt;/a&gt;&lt;d...","link":"","photos":[],"count_time":{"symbolsCount":"5.6k","symbolsTime":"5 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}