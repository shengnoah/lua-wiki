{"title":"lua代码风格","uid":"6645762dc9ef363b033420ebea534803","slug":"zl/2016-01-01-296_lua代码风格","date":"2024-04-03T03:47:33.153Z","updated":"2024-04-03T03:47:33.153Z","comments":true,"path":"api/articles/zl/2016-01-01-296_lua代码风格.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<header>\n<div class=\"clear\"></div>\n<pre><code>&lt;/header&gt;\n&lt;div class=&quot;entry&quot;&gt;\n  \n    &lt;h1 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h1&gt;&lt;ul&gt;\n</code></pre>\n<li><a href=\"#1\">一、程序的版式</a><ul>\n<li><a href=\"#1.1\">1.1 空行</a></li>\n<li><a href=\"#1.2\">1.2 空格</a></li>\n<li><a href=\"#1.3\">1.3 长行拆分</a></li>\n<li><a href=\"#1.4\">1.4 使用缩进</a></li>\n</ul>\n</li>\n<li><a href=\"#2\">二、命名规则</a><ul>\n<li><a href=\"#2.1\">2.1 共性规则</a></li>\n<li><a href=\"#2.2\">2.2 文件命名</a></li>\n<li><a href=\"#2.3\">2.3 类的命名</a>    </li>\n<li><a href=\"#2.4\">2.4 变量命名</a></li>\n<li><a href=\"#2.5\">2.5 常量，事件名的命名</a></li>\n<li><a href=\"#2.5\">2.5 枚举</a></li>\n</ul>\n</li>\n<li><a href=\"#2\">三、文件组织</a><ul>\n<li><a href=\"#3.1\">3.1 文件描述</a></li>\n<li><a href=\"#3.2\">3.2 文件中变量的定义</a></li>\n<li><a href=\"#3.3\">3.3 类变量的定义</a></li>\n<li><a href=\"#3.4\">3.4 函数参数的定义</a></li>\n<li><a href=\"#3.5\">3.5 函数的定义规则</a></li>\n<li><a href=\"#3.6\">3.6 注释的使用</a></li>\n</ul>\n</li>\n<li><a href=\"#3\">三、分隔和缩进</a><ul>\n<li><a href=\"#3.1\">3.1 使用空行</a></li>\n<li><a href=\"#3.2\">3.2 使用空格符</a></li>\n<li><a href=\"#3.3\">3.3 使用换行符</a></li>\n<li><a href=\"#3.4\">3.4 使用小括号</a></li>\n<li><a href=\"#3.5\">3.5 使用缩进</a></li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><a href=\"#4\">四、编程技巧</a><ul>\n<li><a href=\"#4.1\">4.1 应该尽量使用local变量而非global变量</a></li>\n<li><a href=\"#4.2\">4.2 临时变量的处理</a></li>\n<li><a href=\"#4.3\">4.3 利用逻辑运算的短路效应</a></li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><a href=\"#5\">五、代码建议</a><ul>\n<li><a href=\"#5.1\">5.1 代码的调试</a></li>\n<li><a href=\"#5.2\">5.2 复杂度和性能问题</a></li>\n<li><a href=\"#5.3\">5.3 函数的优化思考</a></li>\n<li><a href=\"#5.4\">5.4 提交代码的检查</a></li>\n<li><a href=\"#5.5\">5.5 表结构的引用</a></li>\n</ul>\n</li>\n</ul>\n<p><span id=\"1\"></span></p>\n<h2 id=\"一、程序的版式\"><a href=\"#一、程序的版式\" class=\"headerlink\" title=\"一、程序的版式\"></a>一、程序的版式</h2><blockquote>\n<p>Code is read much more often than it is written.</p>\n<p>Programming style is an art.</p>\n</blockquote>\n<p><span id=\"1.1\"></span></p>\n<h3 id=\"1-1-空行\"><a href=\"#1-1-空行\" class=\"headerlink\" title=\"1.1 空行\"></a>1.1 空行</h3><ul>\n<li>需加空行：<ul>\n<li>函数之间都要加空行；</li>\n<li>函数内部代码概念与逻辑之间，逻辑段落小节之间，都应该加空行；</li>\n<li>注释行之前。</li>\n</ul>\n</li>\n<li>不加空行：<ul>\n<li>在一个函数体内，逻揖上密切相关的语句之间不加空行；</li>\n<li>多行注释解释参数的时候，注释之间不加空行。</li>\n</ul>\n</li>\n</ul>\n<p><span id=\"1.2\"></span></p>\n<h3 id=\"1-2-空格\"><a href=\"#1-2-空格\" class=\"headerlink\" title=\"1.2 空格\"></a>1.2 空格</h3><ul>\n<li><p>需加空格：</p>\n<ul>\n<li>“<code>and</code>“，”<code>or</code>“等关键字前后留<code>一个</code>空格，便于辨析；</li>\n<li>逗号”<code>,</code>“后面要留<code>一个</code>空格；</li>\n<li>赋值操作符、比较操作符、算术操作符如”<code>=</code>“、 “<code>==</code>“、”<code>~=</code>“、”<code>&gt;=</code>“、”<code>&lt;=</code>“、”<code>&gt;</code>“、”<code>&lt;</code>“、”<code>+</code>“、”<code>-</code>“、”<code>*</code>“、”<code>/</code>“、”<code>%</code>“、”<code>^</code>“,等二元操作符的<code>前后</code>应当加空格；</li>\n<li><code>if</code>、<code>for</code>、<code>while</code>等关键字之后如果要加左括号”<code>(</code>“，关键字与左括号之间应留一个空格，以突出关键字；  </li>\n</ul>\n</li>\n<li><p>不加空格：</p>\n<ul>\n<li>函数名之后不要留空格，紧跟左括号”<code>(</code>“；</li>\n<li>左括号”<code>(</code>“ 向<code>后</code>紧跟，紧跟处不留空格；</li>\n<li>右括号”<code>)</code>“、逗号”<code>,</code>“、分号”<code>;</code>“，向<code>前</code>紧跟，紧跟处不留空格；</li>\n<li>字符串连接符”<code>..</code>“前后不加空格；</li>\n<li>“<code>:</code>“，”<code>.</code>“，”<code>[</code>“，”<code>]</code>“这类操作符前后不加空格；</li>\n</ul>\n</li>\n</ul>\n<pre><code>a &gt; b and a or b           -- 良好的风格\na &gt; b  and a or  b         -- 不良的风格\n<p>local a, b, c, max         – 良好的风格<br />\nlocal a,b,c,max            – 不良的风格</p>\n<p>if a &gt; b then              – 良好的风格<br />\nmax = a<br />\nend<br />\nif a&gt;b then max=a end      – 不良的风格</p>\n<p>data = dataTable[index]    – 良好的风格<br />\ndata = dataTable [ index ] – 不良的风格</p>\n<p>function(posX, posY)       – 良好的风格<br />\nfunction (posX,posY)       – 不良的风格<br />\n</code></pre><p><span id=\"1.3\"></span></p></p>\n<h3 id=\"1-3-长行拆分\"><a href=\"#1-3-长行拆分\" class=\"headerlink\" title=\"1.3 长行拆分\"></a>1.3 长行拆分</h3><ul>\n<li>代码行最大长度宜控制在70至80个字符以内。代码行不要过长，否则眼睛看不过来，也不便于打印；</li>\n<li><p>长表达式要在低优先级操作符处拆分成新行，操作符放在新行之首（以便突出操作符）。</p>\n<pre><code>-- 良好的风格\nlocal newBuindingBtn = UI.newButton(&#123;             \n    text = btnName,\n    x = self.x,\n    y = self.y,\n    parent = self, \n    style = &#123;\n        normal = ResConfig.png.commonBtnBlue\n    &#125;\n&#125;)\n<p>– 不良的风格<br />\nlocal newBuindingBtn = UI.newButton(&#123;text = btnName,x = self.x,y = self.y,parent = self, style = &#123;normal = ResConfig.png.commonBtnBlue&#125;&#125;)<br />\n</code></pre></li></p>\n</ul>\n<pre><code>-- 良好的风格\nif veryLongerVariable1 &gt;= veryLongerVariable2\n    and veryLongerVariable3 &lt;= veryLongerVariable5\n    and veryLongerVariable4 &lt;= veryLongerVariable6 then\n    doo()\nend\n<p>– 不良的风格<br />\nif veryLongerVariable1 &gt;= veryLongerVariable2 and veryLongerVariable3 &lt;= veryLongerVariable5 and veryLongerVariable4 &lt;= veryLongerVariable6 then<br />\ndoo()<br />\nend<br />\n</code></pre><p><span id=\"1.4\"></span></p></p>\n<h3 id=\"1-4-使用缩进\"><a href=\"#1-4-使用缩进\" class=\"headerlink\" title=\"1.4 使用缩进\"></a>1.4 使用缩进</h3><ul>\n<li>类中的成分</li>\n<li>方法体或语句块中的成分</li>\n<li>换行时的非起始行 </li>\n</ul>\n<h2 id=\"—\"><a href=\"#—\" class=\"headerlink\" title=\"—\"></a>—</h2><p><span id=\"2\"></span></p>\n<h2 id=\"二、命名规则\"><a href=\"#二、命名规则\" class=\"headerlink\" title=\"二、命名规则\"></a>二、命名规则</h2><blockquote>\n<p>三思而命名。</p>\n</blockquote>\n<p><span id=\"2.1\"></span></p>\n<h3 id=\"2-1-共性规则\"><a href=\"#2-1-共性规则\" class=\"headerlink\" title=\"2.1 共性规则\"></a>2.1 共性规则</h3><ul>\n<li>命名应当直观且可拼读，可望文知意；</li>\n<li>标识符的长度应当符合“min-length &amp;&amp; max-information”原则；</li>\n<li>采用英文单词或单词组合，英文单词不要复杂，但用词需准确，<code>切忌使用汉语拼音命名</code>；</li>\n<li>切勿为了避免命名过长而随意截取单词，以丢失可读性；</li>\n<li>所有命名都不要与－x已有的命名风格冲突，例如不要以CC，UI开头；</li>\n</ul>\n<p><span id=\"2.2\"></span></p>\n<h3 id=\"2-2-文件命名\"><a href=\"#2-2-文件命名\" class=\"headerlink\" title=\"2.2 文件命名\"></a>2.2 文件命名</h3><ul>\n<li>所有Lua文件的命名时使用大驼峰法；</li>\n<li>根据文件的特性，一般以文件里的模块名或者类名作为同名文件名；</li>\n<li><p>确定命名前，请检查下，不要跟其他文件同名；</p>\n<pre><code>CCArmature.lua    -- 不良的风格\nUILayout.lua      -- 不良的风格\n</code></pre></li>\n</ul>\n<p><span id=\"2.3\"></span></p>\n<h3 id=\"2-3-类的命名\"><a href=\"#2-3-类的命名\" class=\"headerlink\" title=\"2.3 类的命名\"></a>2.3 类的命名</h3><ul>\n<li>所有类命名时使用大驼峰法；</li>\n<li>类名一般由”名词”或”多名词”组成，不要简写；</li>\n<li><p>根据类的特性，加上相关的后缀或者前缀；</p>\n<pre><code>后缀：  \n管理类  Manager\n缓存类  Cache\n控制类  Controller\n模块    Module\n网络类  Proxy\n</code></pre></li>\n</ul>\n<p><span id=\"2.4\"></span></p>\n<h3 id=\"2-4-变量命名\"><a href=\"#2-4-变量命名\" class=\"headerlink\" title=\"2.4 变量命名\"></a>2.4 变量命名</h3><ul>\n<li><p>通用规则</p>\n<ul>\n<li>使用 “名词” 或是 “形容词+名词” 命名；</li>\n<li>使用小驼峰法命名；</li>\n<li>为了可读性，尽量避免变量名中出现标号，如value1， value2；</li>\n<li>不要出现仅靠部分字母大小写区分的相似的变量；</li>\n<li>除非是局部变量功能等价全局变量，不然局部变量不要与已有的全局变量同名；</li>\n<li><p>尽量不要使用已有的类名作为变量名；</p>\n<pre><code>local data          -- 良好的风格  \nlocal oldData       -- 良好的风格 \nlocal newData       -- 良好的风格     \nlocal pairs = pairs -- 良好的风格\n<p>local posx,posX     – 不良的风格<br />\nlocal btn1,btn2     – 不良的风格<br />\nlocal TABLE = &#123;&#125;    – 不良的风格<br />\nlocal uILabel       – 不良的风格<br />\n</code></pre></li></p>\n</ul>\n</li>\n<li><p>类的成员变量</p>\n<ul>\n<li><p>类的成员变量以”self.”开头，以区分于局部变量；</p>\n<pre><code>例如:\n    function init()\n<pre><code>    self.mainPanel = false -- 常用格式\n\n    topPanel = false       -- 这样是全局变量，占用全局资源，而且难以区分于局部变量 \n    ...\nend\n</code></pre>\n<p></code></pre></li></p>\n</ul>\n</li>\n<li><p>全局变量</p>\n<ul>\n<li><p>全局变量使用双下划线(“<code>__</code>“)开头以及结尾，中间的命名以名词拼接，或”形容词＋名词”拼接，不同单词之间用（”<code>_</code>“）隔开；</p>\n<pre><code>例如：\n    __VERSION_CODE__ = &#34;1.0.0.0&#34;            \n</code></pre></li>\n</ul>\n</li>\n<li><p>局部变量</p>\n<ul>\n<li><p>M常用做模块里面表示模块本身</p>\n<pre><code>module(&#34;MainGame.Module.IntegrationTest.MapModule&#34;,package.seeall)\n<p>local M = class(SceneView,&quot;MapScene&quot;)</p>\n<p>–数据的初始化<br />\nfunction M:init()<br />\n…<br />\nend</p>\n<p>…<br />\nreturn M<br />\n</code></pre><ul></p>\n<li><p>引用进来的类或模块，用大驼峰法命名，引用路径统一带括号；</p>\n<pre><code>module(&#34;MainGame.Module.IntegrationTest.MapModule&#34;,package.seeall)\n<p>local M = class(SceneView,&quot;MapScene&quot;)<br />\nlocal Surface = require(&quot;xx.xx&quot;)<br />\nlocal TestButtonPanel = require(&quot;xx&quot;)<br />\n…<br />\n</code></pre></li></p>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>临时变量</p>\n<ul>\n<li><p>常用下划线”_”作为可以忽略的变量</p>\n<pre><code>for _,v in ipairs(t) do print(v) end\n</code></pre><ul>\n<li><p>i,k,v,t常做临时变量</p>\n<pre><code>for k,v in pairs(t) ... end\nfor i,v in ipairs(t) ... end\nmt.__newindex = function(t, k, v) ... end\n</code></pre></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p><span id=\"2.5\"></span></p>\n<h3 id=\"2-5-常量，事件名的命名\"><a href=\"#2-5-常量，事件名的命名\" class=\"headerlink\" title=\"2.5 常量，事件名的命名\"></a>2.5 常量，事件名的命名</h3><ul>\n<li><p>常量，事件名所用单词均大写，单词用下划线(‘<code>_</code>‘)分割；</p>\n<pre><code>例如：\n    -- 常量 默认宽度\n    LIST_DEFAULT_WIDTH = 100\n<pre><code>-- 事件 添加到场景\nADDED_TO_STAGE = getId() \n</code></pre>\n<p></code></pre></li></p>\n</ul>\n<p><span id=\"2.6\"></span></p>\n<h3 id=\"2-6-枚举的命名\"><a href=\"#2-6-枚举的命名\" class=\"headerlink\" title=\"2.6 枚举的命名\"></a>2.6 枚举的命名</h3><ul>\n<li>枚举名命名，与类名命名一致；</li>\n<li><p>枚举值命名，与常量，事件名的命名一致；</p>\n<pre><code>例如：\n    ControllerViewType = &#123;\n        SCENE = &#34;SCENE&#34;,\n        PANEL = &#34;PANEL&#34;,\n        POP =     &#34;POP&#34;,\n    &#125;\n</code></pre></li>\n</ul>\n<h2 id=\"—-1\"><a href=\"#—-1\" class=\"headerlink\" title=\"—\"></a>—</h2><p>##三、文件组织<br/><span id=\"3.1\"></span></p>\n<h3 id=\"3-1-文件描述\"><a href=\"#3-1-文件描述\" class=\"headerlink\" title=\"3.1 文件描述\"></a>3.1 文件描述</h3><ul>\n<li><p>文件开头加上此文件的简要功能作用描述；</p>\n<pre><code>-- MapModule.lua\n--Author:xx\n--Email:xx@flamingo-inc.com\n--20xx年x月x日 xx:xx\n--Using:创建地图       \nmodule(&#34;MainGame.Module.IntegrationTest.MapModule&#34;,package.seeall)\n...\n</code></pre></li>\n</ul>\n<p><span id=\"3.2\"></span></p>\n<h3 id=\"3-2-文件中变量的定义\"><a href=\"#3-2-文件中变量的定义\" class=\"headerlink\" title=\"3.2 文件中变量的定义\"></a>3.2 文件中变量的定义</h3><ul>\n<li><p>如果在文件中需要多次使用的某些导入文件，可以在文件开头用局部变量存储导入信息，而不是在每次使用的时候都重新导入一次；</p>\n<pre><code>例如:\n    ...\n    local Surface = require(&#34;xx.xx&#34;)\n    local TestButtonPanel = require(&#34;xx&#34;)\n<pre><code>function M:xx()\n    local testBtn = TestButtonPanel.newCC()\n    ...\nend\n\nfunction M:yy()\n    local panel = TestButtonPanel.newCC()\n    local surface = Surface.newCC()\n    ...\nend\n\n...\n</code></pre>\n<p></code></pre><p><span id=\"3.3\"></span></p></p>\n<h3 id=\"3-3-类变量的定义\"><a href=\"#3-3-类变量的定义\" class=\"headerlink\" title=\"3.3 类变量的定义\"></a>3.3 类变量的定义</h3></li>\n<li>类中的成员变量需要在init中先声明，并赋予初始值，<code>不允许不声明直接使用</code>；</li>\n</ul>\n<p><span id=\"3.4\"></span></p>\n<h3 id=\"3-4-函数参数的定义\"><a href=\"#3-4-函数参数的定义\" class=\"headerlink\" title=\"3.4 函数参数的定义\"></a>3.4 函数参数的定义</h3><ul>\n<li><p>所有函数的参数都用统一的params做参数，并加入如下格式的注释：</p>\n<pre><code>--[[\n    普通按钮 可缩放 scale9\n    @param #string text 按钮名称\n    @param #table style 按钮样式\n]]\nfunction UI.newButtonScale9(params)\n   ...\nend\n</code></pre></li>\n</ul>\n<p><span id=\"3.5\"></span></p>\n<h3 id=\"3-5-函数的定义规则\"><a href=\"#3-5-函数的定义规则\" class=\"headerlink\" title=\"3.5 函数的定义规则\"></a>3.5 函数的定义规则</h3><ul>\n<li>函数的行数过长(大于 100 行)时,尽量拆分为多个子函数;</li>\n<li>函数中一些晦涩的部分,一定要加上注释；</li>\n</ul>\n<p><span id=\"2.6\"></span></p>\n<h3 id=\"3-6-注释的使用\"><a href=\"#3-6-注释的使用\" class=\"headerlink\" title=\"3.6 注释的使用\"></a>3.6 注释的使用</h3><ul>\n<li>短小的注释用–；</li>\n<li>长注释用–[[]]；</li>\n</ul>\n<h2 id=\"—-2\"><a href=\"#—-2\" class=\"headerlink\" title=\"—\"></a>—</h2><p><span id=\"4\"></span></p>\n<h2 id=\"四、编码技巧\"><a href=\"#四、编码技巧\" class=\"headerlink\" title=\"四、编码技巧\"></a>四、编码技巧</h2><p><span id=\"4.1\"></span></p>\n<h3 id=\"4-1-应该尽量使用local变量而非global变量\"><a href=\"#4-1-应该尽量使用local变量而非global变量\" class=\"headerlink\" title=\"4.1 应该尽量使用local变量而非global变量\"></a>4.1 应该尽量使用<code>local</code>变量而非<code>global</code>变量</h3><ul>\n<li>全局变量实际是放入全局表中，每次调用是用传入变量名作为key去获取，而local变量是直接通过lua的堆栈访问的；</li>\n<li>推荐写法<ul>\n<li>在能用局部变量解决的地方，不要使用全局变量，这点很容易被忽略；    </li>\n<li>多次重复使用的全局接口，可以用局部变量保存下再使用，这样做有两个好处：<ul>\n<li>避免某些类型的全局变量被修改</li>\n<li>提高访问速度</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<pre><code>* 比如需要多重遍历操作一个大表：\n写法1:\nfor k1,v1 in pairs(tbl) do\n    for k2,v2 in pairs(v1) do\n        ...    \n    end\nend\n<p>写法2:<br />\ndo<br />\nlocal pairs = pairs<br />\nfor k1,v1 in pairs(tbl) do<br />\nfor k2,v2 in pairs(v1) do<br />\n…<br />\nend<br />\nend<br />\nend</p>\n<p>– 由于pairs是一个全局变量应用的函数，所以写法2在这里有稍微效率上的提升，但要是单层遍历的没有这个效果了。</p>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>当作常量来多次使用的全局变量可以存为局部变量使用<br />\nlocal playerName = Cache.playerCache.username<br />\n…<br />\nlocal function itemTemplate(data)<br />\nnameLabel:setText(playerName)<br />\nend</p>\n</li>\n</ul>\n<p>local list = NewList.newCC(,&#123;<br />\nitemTemplate = itemTemplate,<br />\n…<br />\n&#125;)<br />\n</code></pre><p><span id=\"4.2\"></span>            </p></p>\n<p>###4.2 临时变量的处理</p>\n<ul>\n<li><p>字符串的连接 .. <br/><br/>由于字符串的管理机制，字符串在使用..连接时，会产生新的对象。由于lua在VM内对相同的string永远只保留一份唯一copy。</p>\n<pre><code>例如:\nlocal description ＝ &#34;&#34;\nfor i = 1,20 do\n    description = description..&#34;xxx&#34;\nend\n-- 这样会生成21份string的copy，但实际上我们只需要最后那一份 \n</code></pre><p> 如果是轻量级的简单连接还是可以使用的，因为影响不大，但要是大量的类似拼接，推荐使用<code>string.format</code></p>\n</li>\n<li><p>类似于字符串的管理机制，表也存在类似的临时变量copy：</p>\n<pre><code>函数传参数\nfunction func(&#123;x,y&#125;)\n    ...\nend\n</code></pre><p>这种传参方式，每次都会生成一份copy，所以推荐以下的用法：</p>\n<pre><code>function func(x,y)\n    ...\nend\n<p>function func(&#123;posX = x, posY = y&#125;)<br />\n…<br />\nend<br />\n</code></pre></li></p>\n</ul>\n<p><span id=\"4.3\"></span>        </p>\n<p>###4.3 利用逻辑运算的短路效应</p>\n<ul>\n<li><p>and or 的返回值是表达式中的左值或者右值，可用来简化代码</p>\n<pre><code>function foo(arg)\n    arg = arg or &#34;default&#34;\n    ...\nend\n<p>– 但要注意当赋值为bool值时候，容易出bug<br />\na = a or true  – 错误的写法，当 a 明确写为 false 的时候，也会被改变成 true 。<br />\na = a ~= false – 正确的写法，当 a 为 nil 的时候，被赋值为 true ；而 false 则不变。<br />\n</code></pre></li></p>\n<li><p>另外，巧妙使用 and or 还可以实现类似 C 语言中的 ?: 三元操作：</p>\n<pre><code>function max(a,b)\n    return a &gt; b and a or b\nend\n<p>– 这里相当于 return (a &gt; b) ? a : b;<br />\n</code></pre></li></p>\n</ul>\n<h2 id=\"—-3\"><a href=\"#—-3\" class=\"headerlink\" title=\"—\"></a>—</h2><h2 id=\"五、代码建议\"><a href=\"#五、代码建议\" class=\"headerlink\" title=\"五、代码建议\"></a>五、代码建议</h2><p><span id=\"5.1\"></span></p>\n<h3 id=\"5-1-代码的调试\"><a href=\"#5-1-代码的调试\" class=\"headerlink\" title=\"5.1 代码的调试\"></a>5.1 代码的调试</h3><ul>\n<li>用Luastudio工具调试，代替Sublime调试Lua代码；</li>\n</ul>\n<p><span id=\"5.2\"></span></p>\n<h3 id=\"5-2-复杂度和性能问题\"><a href=\"#5-2-复杂度和性能问题\" class=\"headerlink\" title=\"5.2 复杂度和性能问题\"></a>5.2 复杂度和性能问题</h3><ul>\n<li>写代码时尽可能写的简单,考虑性能时先做好推断,看看能提升多少,增加的复杂度以及造成的代码晦涩有多严重,然后再决定如何做；</li>\n</ul>\n<p><span id=\"5.3\"></span></p>\n<h3 id=\"5-3-函数的优化思考\"><a href=\"#5-3-函数的优化思考\" class=\"headerlink\" title=\"5.3 函数的优化思考\"></a>5.3 函数的优化思考</h3><ul>\n<li>开销大的函数，调用次数低的话，可以不做优化；</li>\n<li>开销较小的函数，但调用频率很高，则从如何降低调用频率以及减少函数的开销两个角度去思考优化；</li>\n</ul>\n<p><span id=\"5.4\"></span></p>\n<h3 id=\"5-4-提交代码的检查\"><a href=\"#5-4-提交代码的检查\" class=\"headerlink\" title=\"5.4 提交代码的检查\"></a>5.4 提交代码的检查</h3><ul>\n<li>提交代码前，在svn commit中验证提交的代码，去掉或注释掉无关的代码，保证提交的代码无误；</li>\n</ul>\n<p><span id=\"5.5\"></span></p>\n<h3 id=\"5-5-表结构的引用\"><a href=\"#5-5-表结构的引用\" class=\"headerlink\" title=\"5.5 表结构的引用\"></a>5.5 表结构的引用</h3><ul>\n<li>尽量减少表中的成员是另个表的引用；</li>\n</ul>\n<hr/>\n<p>参考资料：</p>\n<p>[1] <a href=\"https://ldb.googlecode.com/files/lua代码编写规范.pdf\" target=\"_blank\" rel=\"external noopener noreferrer\">lua代码编写规范</a></p>\n<p>[2] <a href=\"http://lua-users.org/wiki/LuaStyleGuide\" target=\"_blank\" rel=\"external noopener noreferrer\">Lua Style Guide</a></p>\n<p>[3] <a href=\"http://blog.codingnow.com/cloud/LuaTips\" target=\"_blank\" rel=\"external noopener noreferrer\">Lua 编程技巧</a></p>\n<p>[4] <a href=\"http://www.codingnow.com/2000/download/lua_manual.html\" target=\"_blank\" rel=\"external noopener noreferrer\">Lua 5.1 参考手册</a></p>\n<pre><code>&lt;/div&gt;\n</code></pre>\n","text":" &lt;/header&gt; &lt;div class=&quot;entry&quot;&gt; &lt;h1 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; tit...","link":"","photos":[],"count_time":{"symbolsCount":"7.4k","symbolsTime":"7 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%80%E3%80%81%E7%A8%8B%E5%BA%8F%E7%9A%84%E7%89%88%E5%BC%8F\"><span class=\"toc-text\">一、程序的版式</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-1-%E7%A9%BA%E8%A1%8C\"><span class=\"toc-text\">1.1 空行</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-2-%E7%A9%BA%E6%A0%BC\"><span class=\"toc-text\">1.2 空格</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-3-%E9%95%BF%E8%A1%8C%E6%8B%86%E5%88%86\"><span class=\"toc-text\">1.3 长行拆分</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-4-%E4%BD%BF%E7%94%A8%E7%BC%A9%E8%BF%9B\"><span class=\"toc-text\">1.4 使用缩进</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E2%80%94\"><span class=\"toc-text\">—</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E3%80%81%E5%91%BD%E5%90%8D%E8%A7%84%E5%88%99\"><span class=\"toc-text\">二、命名规则</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-1-%E5%85%B1%E6%80%A7%E8%A7%84%E5%88%99\"><span class=\"toc-text\">2.1 共性规则</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-2-%E6%96%87%E4%BB%B6%E5%91%BD%E5%90%8D\"><span class=\"toc-text\">2.2 文件命名</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-3-%E7%B1%BB%E7%9A%84%E5%91%BD%E5%90%8D\"><span class=\"toc-text\">2.3 类的命名</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-4-%E5%8F%98%E9%87%8F%E5%91%BD%E5%90%8D\"><span class=\"toc-text\">2.4 变量命名</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-5-%E5%B8%B8%E9%87%8F%EF%BC%8C%E4%BA%8B%E4%BB%B6%E5%90%8D%E7%9A%84%E5%91%BD%E5%90%8D\"><span class=\"toc-text\">2.5 常量，事件名的命名</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-6-%E6%9E%9A%E4%B8%BE%E7%9A%84%E5%91%BD%E5%90%8D\"><span class=\"toc-text\">2.6 枚举的命名</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E2%80%94-1\"><span class=\"toc-text\">—</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-1-%E6%96%87%E4%BB%B6%E6%8F%8F%E8%BF%B0\"><span class=\"toc-text\">3.1 文件描述</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-2-%E6%96%87%E4%BB%B6%E4%B8%AD%E5%8F%98%E9%87%8F%E7%9A%84%E5%AE%9A%E4%B9%89\"><span class=\"toc-text\">3.2 文件中变量的定义</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-3-%E7%B1%BB%E5%8F%98%E9%87%8F%E7%9A%84%E5%AE%9A%E4%B9%89\"><span class=\"toc-text\">3.3 类变量的定义</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-4-%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0%E7%9A%84%E5%AE%9A%E4%B9%89\"><span class=\"toc-text\">3.4 函数参数的定义</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-5-%E5%87%BD%E6%95%B0%E7%9A%84%E5%AE%9A%E4%B9%89%E8%A7%84%E5%88%99\"><span class=\"toc-text\">3.5 函数的定义规则</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-6-%E6%B3%A8%E9%87%8A%E7%9A%84%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">3.6 注释的使用</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E2%80%94-2\"><span class=\"toc-text\">—</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%9B%9B%E3%80%81%E7%BC%96%E7%A0%81%E6%8A%80%E5%B7%A7\"><span class=\"toc-text\">四、编码技巧</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-1-%E5%BA%94%E8%AF%A5%E5%B0%BD%E9%87%8F%E4%BD%BF%E7%94%A8local%E5%8F%98%E9%87%8F%E8%80%8C%E9%9D%9Eglobal%E5%8F%98%E9%87%8F\"><span class=\"toc-text\">4.1 应该尽量使用local变量而非global变量</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E2%80%94-3\"><span class=\"toc-text\">—</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BA%94%E3%80%81%E4%BB%A3%E7%A0%81%E5%BB%BA%E8%AE%AE\"><span class=\"toc-text\">五、代码建议</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-1-%E4%BB%A3%E7%A0%81%E7%9A%84%E8%B0%83%E8%AF%95\"><span class=\"toc-text\">5.1 代码的调试</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-2-%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%92%8C%E6%80%A7%E8%83%BD%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">5.2 复杂度和性能问题</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-3-%E5%87%BD%E6%95%B0%E7%9A%84%E4%BC%98%E5%8C%96%E6%80%9D%E8%80%83\"><span class=\"toc-text\">5.3 函数的优化思考</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-4-%E6%8F%90%E4%BA%A4%E4%BB%A3%E7%A0%81%E7%9A%84%E6%A3%80%E6%9F%A5\"><span class=\"toc-text\">5.4 提交代码的检查</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-5-%E8%A1%A8%E7%BB%93%E6%9E%84%E7%9A%84%E5%BC%95%E7%94%A8\"><span class=\"toc-text\">5.5 表结构的引用</span></a></li></ol></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"lua版本变化","uid":"4a210a155a77b4a011d630ddb5275315","slug":"zl/2016-01-01-295_lua版本变化","date":"2024-04-03T03:47:33.153Z","updated":"2024-04-03T03:47:33.153Z","comments":true,"path":"api/articles/zl/2016-01-01-295_lua版本变化.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"从 Lua 5.1 迁移到 5.2 5.2中抛弃module，建议使用require进行加载， 可能是考虑到Module定义对全局表的污染 在5.1版本，可以理解为每个chunk都具有自己的环境表，然后通过setfenv/getfenv进行设置和操作。Lua5.2开始取消了环境表...","link":"","photos":[],"count_time":{"symbolsCount":766,"symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Evaluating Fuzz Testing","uid":"a69c4897ef8619ee844d4af6d4eb4dfb","slug":"zl/2016-01-01-297_Evaluating Fuzz Testing","date":"2024-04-03T03:47:33.153Z","updated":"2024-04-03T03:47:33.154Z","comments":true,"path":"api/articles/zl/2016-01-01-297_Evaluating Fuzz Testing.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"1 介绍信息量太大回头再写。。 # 一天后更新 不想写了差不多就下面这些内容吧。。 2 背景2.1 fuzzing流程 fuzzing的核心算法 initSeedCorpus：初始化新的输入 isDone：决定fuzzing是否停止 choose：从队列中选择至少一个种子输入进行...","link":"","photos":[],"count_time":{"symbolsCount":"3.4k","symbolsTime":"3 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}