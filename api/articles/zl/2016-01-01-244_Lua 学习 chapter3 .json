{"title":"Lua 学习 chapter3","uid":"fa3c6bbfb77d79f09c310bd5a3012575","slug":"zl/2016-01-01-244_Lua 学习 chapter3 ","date":"2024-04-03T03:47:33.110Z","updated":"2024-04-03T03:47:33.110Z","comments":true,"path":"api/articles/zl/2016-01-01-244_Lua 学习 chapter3 .json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<pre><code>\t\t\t&lt;h3 id=&quot;目录&quot;&gt;目录&lt;/h3&gt;\n</code></pre>\n<ol>\n  <li>算术计算</li>\n  <li>关系运算</li>\n  <li>数学库</li>\n  <li>表示范围</li>\n  <li>运算符的优先级</li>\n  <li>练习</li>\n</ol>\n<h2 id=\"算术计算\">算术计算</h2>\n<p>在lua中，除法运算操作的永远是浮点数而且产生的结果也是浮点数。\n在新的版本中针对于整数除法引入了一个floor除法的新运算符‘//’，floor除法会对得到的上进行向下取整，从而保证结果是一个整数。\n如果操作数是整形类型结果就是整型类型，如果操作数是浮点类型那么结果就是浮点类型（其值是个整数），类似的取模运算(%)也是一样的。</p>\n<h2 id=\"关系运算\">关系运算</h2>\n<p>Lua提供了下列的关系运算：\n&lt; &gt; &lt;= &gt;= == ~=  这个关系运算的返回值都是Boolean类型的。</p>\n<h2 id=\"数学库\">数学库</h2>\n<p>Lua提供了标准的数学库 math，包含三角函数，指数，取整，最大最小，用于生成伪随机的random函数以及pi和huge(最大可表示的值)。</p>\n<h3 id=\"随机数发生器\">随机数发生器</h3>\n<p>lua中随机数共有三种调用方式：\n不带参：随机返回一个伪随机的[0,1)的数\n带一个整型参：返回一个[1,n]的伪随机整数\n带两个整型参：返回一个[n,m]的伪随机整数</p>\n<p>函数randomseed用于设置伪随机数发生器的种子，该函数的唯一参数就是数值类型的种子。\n在一个进程启动时，系统固定使用1为随机数发生器。如果不设置其它种子，每次系统启动都会产生一样的随机数。\n所以为了解决这个问题通常使用<strong>math.randomseed(os.time())</strong> 来作为种子。</p>\n<h3 id=\"取整函数\">取整函数</h3>\n<ol>\n  <li>floor：向下取整</li>\n  <li>ceil：向上取整</li>\n  <li>modf：向0取整</li>\n</ol>\n<p>就近取整：</p>\n<div class=\"language-lua highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n</pre></td><td class=\"rouge-code\"><pre><span class=\"k\">function</span> <span class=\"nf\">round</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n\t<span class=\"kd\">local</span> <span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"nb\">math.floor</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n\t<span class=\"k\">if</span> <span class=\"n\">f</span> <span class=\"o\">==</span> <span class=\"n\">x</span> <span class=\"k\">then</span> <span class=\"k\">return</span> <span class=\"n\">x</span>\n\t<span class=\"k\">else</span> <span class=\"k\">return</span> <span class=\"nb\">math.floor</span><span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"mi\">0</span><span class=\"p\">.</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n\t<span class=\"k\">end</span>\n<span class=\"k\">end</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n<h2 id=\"表示范围\">表示范围</h2>\n<p>lua使用64个比特位来存储整型值，其最大值为2^63 - 1。\n我们可以简单的使用整数加上0.0来转换成浮点数。\n在lua的管理中，超过2^53之后这样转换就会失去精度。</p>\n<h2 id=\"运算符的优先级\">运算符的优先级</h2>\n<ol>\n  <li>\n  <li>一元运算符 （- # ~ not）</li>\n  <li>/  //  %  （//  floor除）</li>\n  <li>\n    <ul>\n      <li>-</li>\n    </ul>\n  </li>\n  <li>..（连接）</li>\n  <li>« » （按位移位）</li>\n  <li>&amp;</li>\n  <li>~</li>\n  <li>\n    <table>\n      <tbody>\n        <tr>\n        </tr>\n      </tbody>\n    </table>\n  </li>\n  <li>&lt; &gt; &lt;= &gt;= ~= ==</li>\n  <li>and or</li>\n</ol>\n<h2 id=\"练习\">练习</h2>\n<p>乘2，就是左移一位。</p>\n<p>使用math.random生成正太分布的为随机数发生器</p>\n<p>采用 Box-Muller 变换可以将均匀分布转化成正态分布</p>\n<p>Z=R<em>cosθ 或 Z=R</em>sinθ （其中 R = sqrt(-2<em>ln(u1)), θ = 2</em>π*u2，u1和u2是（0，1]的均匀分布随机数，得到的Z就是标准正态分布随机数。</p>\n<ol>\n  <li>\n    <p>生成均匀分布的随机数，math.random 函数生成的是 [ 0,1 ) 之间的随机数，只需在生成 0 时改为生成 1 。</p>\n  </li>\n  <li>\n    <p>通过Box-Muller公式得到服从正态分布的随机数</p>\n  </li>\n</ol>\n<div class=\"language-lua highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">local</span> <span class=\"n\">rand1</span><span class=\"p\">,</span><span class=\"n\">rand2</span><span class=\"o\">=</span><span class=\"nb\">math.random</span><span class=\"p\">(),</span><span class=\"nb\">math.random</span><span class=\"p\">()</span>\n  <span class=\"n\">rand1</span><span class=\"o\">=</span><span class=\"n\">rand1</span><span class=\"o\">==</span><span class=\"mi\">0</span> <span class=\"ow\">and</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"ow\">or</span> <span class=\"p\">(</span><span class=\"n\">rand1</span><span class=\"p\">)</span>\n  <span class=\"n\">rand2</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"n\">rand2</span><span class=\"o\">==</span><span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"ow\">or</span> <span class=\"p\">(</span><span class=\"n\">rand2</span><span class=\"p\">)</span>\n  <span class=\"k\">return</span> <span class=\"nb\">math.sqrt</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"o\">*</span><span class=\"p\">(</span><span class=\"nb\">math.log</span><span class=\"p\">(</span><span class=\"n\">rand1</span><span class=\"p\">)))</span><span class=\"o\">*</span><span class=\"nb\">math.sin</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"nb\">math.pi</span><span class=\"o\">*</span><span class=\"n\">rand2</span><span class=\"p\">);</span>\t\n</pre></td></tr></tbody></table></code></pre></div></div>\n<pre><code>            &lt;hr style=&quot;visibility: hidden;&quot;&gt;\n</code></pre>\n","text":" &lt;h3 id=&quot;目录&quot;&gt;目录&lt;/h3&gt; 算术计算 关系运算 数学库 表示范围 运算符的优先级 练习 算术计算 在lua中，除法运算操作的永远是浮点数而且产生的结果也是浮点数。 在新的版本中针对于整数除法引入了一个floor除法的新运算...","link":"","photos":[],"count_time":{"symbolsCount":"1.7k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%AE%97%E6%9C%AF%E8%AE%A1%E7%AE%97\"><span class=\"toc-text\">算术计算</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%85%B3%E7%B3%BB%E8%BF%90%E7%AE%97\"><span class=\"toc-text\">关系运算</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%95%B0%E5%AD%A6%E5%BA%93\"><span class=\"toc-text\">数学库</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%9A%8F%E6%9C%BA%E6%95%B0%E5%8F%91%E7%94%9F%E5%99%A8\"><span class=\"toc-text\">随机数发生器</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8F%96%E6%95%B4%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">取整函数</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%A1%A8%E7%A4%BA%E8%8C%83%E5%9B%B4\"><span class=\"toc-text\">表示范围</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%BF%90%E7%AE%97%E7%AC%A6%E7%9A%84%E4%BC%98%E5%85%88%E7%BA%A7\"><span class=\"toc-text\">运算符的优先级</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%BB%83%E4%B9%A0\"><span class=\"toc-text\">练习</span></a></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"lua学习1","uid":"ccf00cc91e42a79529a94664e1522709","slug":"zl/2016-01-01-243_lua学习1","date":"2024-04-03T03:47:33.110Z","updated":"2024-04-03T03:47:33.110Z","comments":true,"path":"api/articles/zl/2016-01-01-243_lua学习1.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"类型与值Lua是一种动态语言，没有定义类型的语法，每个值都携带了自身的类型信息。 Lua中有8种基础类型：nil、boolean、number、string、userdata、function、thread、table。函数type可以返回值的类型。 123456print(ty...","link":"","photos":[],"count_time":{"symbolsCount":"2k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Lua笔记 迭代器","uid":"f6ae2766b323b6d77308e0bcd268c058","slug":"zl/2016-01-01-240_Lua笔记 迭代器","date":"2024-04-03T03:47:33.109Z","updated":"2024-04-03T03:47:33.109Z","comments":true,"path":"api/articles/zl/2016-01-01-240_Lua笔记 迭代器.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":" &lt;p&gt;Lua中的迭代器提供的是一种遍历表中所有元素的机制，它通常是函数的形式，每次调用函数，返回“下一个”值。Lua中的迭代器有两种实现方式，基于闭包（closure）或者基于协程（coroutine）。以下会通过一个实例来分别讨论两种迭代器的实现。&lt;/p&g...","link":"","photos":[],"count_time":{"symbolsCount":"2k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}