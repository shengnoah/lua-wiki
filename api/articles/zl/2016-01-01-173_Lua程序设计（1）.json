{"title":"Lua程序设计（1）","uid":"f7204e4c768f3914953c0add1a30be01","slug":"zl/2016-01-01-173_Lua程序设计（1）","date":"2024-04-03T03:47:33.062Z","updated":"2024-04-03T03:47:33.062Z","comments":true,"path":"api/articles/zl/2016-01-01-173_Lua程序设计（1）.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<p>Lua中的字符串。</p>\n<h3 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h3><p>Lua语言中的字符串是一串字节组成的序列，Lua核心并不关心这些字节究竟以何种方式编码文本。</p>\n<p>在Lua语言中，字符使用8个比特位来存储。</p>\n<p>Lua语言中的字符串是<strong>不可变值</strong>。</p>\n<p>像Lua语言中的其他对象（表、函数等）一样，Lua语言中的字符串也是自动内存管理的对象之一，Lua会负责字符串的分配和释放。</p>\n<ul>\n<li>可以使用长度操作符<code>#</code>获取字符串的长度，该操作符返回字符串占用的字节数，在某些编码中，这个值可能与字符串中字符的个数不同。</li>\n<li>我们可以使用连接操作符<code>..</code>来进行字符串连接，如果操作数存在数值，那么Lua语言会先把数值转换成字符串。</li>\n<li><strong>字符串连接总是创建一个新字符串，而不会改变原来作为操作数的字符串</strong>。</li>\n</ul>\n<h4 id=\"字符串常量\"><a href=\"#字符串常量\" class=\"headerlink\" title=\"字符串常量\"></a>字符串常量</h4><p>我们可以使用<strong>一对双引号或单引号</strong>来声明字符串常量，使用双引号和单引号声明字符串是<strong>等价的</strong>，它们唯一的区别在于，使用双引号声明的字符串中出现单引号的时候，单引号可以不用转义（反过来亦然）。</p>\n<p>Lua语言的字符串支持一些C语言风格的转义字符：</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://img.dazhuanlan.com/2019/11/26/5ddcd3e0121e4.png\" alt=\"\" title=\"\"/>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>在字符串中，还可以使用转义序列<code>ddd</code>和<code>xhh</code>来声明字符，见上表叙述。</p>\n<h4 id=\"长字符串-多行字符串\"><a href=\"#长字符串-多行字符串\" class=\"headerlink\" title=\"长字符串/多行字符串\"></a>长字符串/多行字符串</h4><p>可以使用一对双方括号来表明长字符串/多行字符串常量，被方括号扩起来的内容可以包括很多行，并且内容中的转义序列不会被转义。此外，如果多行字符串的第一个字符是换行符，那么这个换行符将会被忽略。</p>\n<p>为了应对<code>a=b[c[i]]</code>这样的内容，或者字符串中可能有被注释掉的代码，可以在两个左方括号之间加上任意数量的等号，这样字符串常只有在遇到了包含<strong>相同数量等号</strong>的两个右方括号时才会结束。</p>\n<p>当代码中需要使用常量文本时，使用长字符串是一种理想的选择，但是对于非文本的常量我们不应该滥用长字符串。虽然Lua语言中的字符串常量可以包含任意字节，但是最好不要滥用长字符串。同时，像<code>rn</code>一样的EOF序列在被读取的时候可能会被归一化为<code>n</code>，作为替代方案，最好就是把这些可能引起歧义的二进制数据用十进制或十六进制的数值转义序列进行表示。</p>\n<p>Lua5.2开始引入了转义序列<code>z</code>，该转义符会跳过其后的所有空白字符，直到遇到第一个非空白字符。</p>\n<h4 id=\"强制类型转换\"><a href=\"#强制类型转换\" class=\"headerlink\" title=\"强制类型转换\"></a>强制类型转换</h4><p>Lua语言在运行时提供了数值与字符串之间的自动转换。针对字符串的所有算术操作会尝试将字符串转换为数值（不仅是算术操作，还会在任何需要数值的情况下进行）。</p>\n<p>Lua5.3没有实现强制类型转换与整形的集成——算数运算的规则就是<strong>只有在两个操作数都是整型值时结果才是整型</strong>。</p>\n<p>可以使用函数tonumber来显式的将字符串转换为数值，当这个字符串的内容不能表示为有效数字的时候该函数返回nil，否则就返回对应的数值。默认情况下，函数tonumber使用的是十进制，也可以指明使用二进制到三十六进制之间的任意进制。</p>\n<h4 id=\"字符串标准库：\"><a href=\"#字符串标准库：\" class=\"headerlink\" title=\"字符串标准库：\"></a>字符串标准库：</h4><p>用到再说……找就完了。</p>\n<p><a href=\"http://www.lua.org/manual/5.3/\" target=\"_blank\" rel=\"noopener noreferrer\">http://www.lua.org/manual/5.3/</a></p>\n<h4 id=\"Unicode编码\"><a href=\"#Unicode编码\" class=\"headerlink\" title=\"Unicode编码\"></a>Unicode编码</h4><p>遇到再说……</p>","text":"Lua中的字符串。 字符串Lua语言中的字符串是一串字节组成的序列，Lua核心并不关心这些字节究竟以何种方式编码文本。 在Lua语言中，字符使用8个比特位来存储。 Lua语言中的字符串是不可变值。 像Lua语言中的其他对象（表、函数等）一样，Lua语言中的字符串也是自动内存管理的...","link":"","photos":[],"count_time":{"symbolsCount":"1.3k","symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AD%97%E7%AC%A6%E4%B8%B2\"><span class=\"toc-text\">字符串</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%B8%B8%E9%87%8F\"><span class=\"toc-text\">字符串常量</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%95%BF%E5%AD%97%E7%AC%A6%E4%B8%B2-%E5%A4%9A%E8%A1%8C%E5%AD%97%E7%AC%A6%E4%B8%B2\"><span class=\"toc-text\">长字符串&#x2F;多行字符串</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%BC%BA%E5%88%B6%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2\"><span class=\"toc-text\">强制类型转换</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%A0%87%E5%87%86%E5%BA%93%EF%BC%9A\"><span class=\"toc-text\">字符串标准库：</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Unicode%E7%BC%96%E7%A0%81\"><span class=\"toc-text\">Unicode编码</span></a></li></ol></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"基于OpenResty安装配置Nginx+LUA并实现请求分发的双层Nginx架构策略","uid":"ba17cf45fbc8e4f389116ffd1e13da5f","slug":"zl/2016-01-01-176_基于OpenResty安装配置Nginx+LUA并实现请求分发的双层Nginx架构策略","date":"2024-04-03T03:47:33.063Z","updated":"2024-04-03T03:47:33.063Z","comments":true,"path":"api/articles/zl/2016-01-01-176_基于OpenResty安装配置Nginx+LUA并实现请求分发的双层Nginx架构策略.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"台CentOS6.x192.168.1.210192.168.1.211192.168.1.212网络拓扑210和211作为应用层web服务器212作为网络请求分发代理服务器 Step1:安装Linux依赖1yum install -y readline-devel pcre-d...","link":"","photos":[],"count_time":{"symbolsCount":"5.5k","symbolsTime":"5 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Lua","uid":"15b0cdc6d03f6c3f6bf8d3a7ff197317","slug":"zl/2016-01-01-174_[Lua","date":"2024-04-03T03:47:33.062Z","updated":"2024-04-03T03:47:33.062Z","comments":true,"path":"api/articles/zl/2016-01-01-174_[Lua.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"读书笔记： Programming in Lua, 4th Edition. 替换字符串 &gt; a = &#34;one string&#34; &gt; b = string.gsub(a, &#34;one&#34;, &#34;another&#34;) &gt; pr...","link":"","photos":[],"count_time":{"symbolsCount":"4.3k","symbolsTime":"4 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}