{"title":"Redis Lua脚本小学教程","uid":"c411cdcc3a7f4e11b8b34c0cbe3fb292","slug":"zl/2016-01-01-100_Redis Lua脚本小学教程","date":"2024-04-03T03:47:32.963Z","updated":"2024-04-03T03:47:32.964Z","comments":true,"path":"api/articles/zl/2016-01-01-100_Redis Lua脚本小学教程.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<p>Redis提供了丰富的指令集，但是仍然不能满足所有场景，在一些特定场景下，需要自定义一些指定来完成某些功能。因此，Redis提供了Lua脚本支持，用户可以自己编写脚本来实现想要的功能。</p>\n<h4 id=\"什么是Lua？\"><a href=\"#什么是Lua？\" class=\"headerlink\" title=\"什么是Lua？\"></a>什么是Lua？</h4><p>Lua是一种功能强大的，高效，轻量级，可嵌入的脚本语言。它是动态类型语言，通过使用基于寄存器的虚拟机解释字节码运行，并具有增量垃圾收集的自动内存管理，是配置，脚本和快速原型设计的最佳选择。</p>\n<h4 id=\"Redis怎么执行Lua脚本\"><a href=\"#Redis怎么执行Lua脚本\" class=\"headerlink\" title=\"Redis怎么执行Lua脚本\"></a>Redis怎么执行Lua脚本</h4><h5 id=\"EVAL命令\"><a href=\"#EVAL命令\" class=\"headerlink\" title=\"EVAL命令\"></a>EVAL命令</h5><p>Redis中可以使用EVAL命令执行相应的Lua脚本</p>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; EVAL <span class=\"string\">&#39;local val=&#34;Hello Jackey&#34; return val&#39;</span> 0</span><br/><span class=\"line\"><span class=\"string\">&#34;Hello Jackey&#34;</span></span><br/></pre></td></tr></tbody></table></figure>\n<p>你可以像这样在交互模式下执行Lua脚本，这样更方便处理错误。只是这样还不够，有时候，我们需要给Lua脚本传入一些参数。细心的同学一定注意到了，脚本的后面还有一个数字0，它的意思的不传入参数。</p>\n<p>那怎么传参数呢？</p>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; EVAL <span class=\"string\">&#39;local val=KEYS[1] return val..&#34; &#34;..ARGV[1]&#39;</span> 1 Hello Redis</span><br/><span class=\"line\"><span class=\"string\">&#34;Hello Redis&#34;</span></span><br/></pre></td></tr></tbody></table></figure>\n<p>其实也很简单，传入的参数都是kv形式的，这个数字代表传入参数的key的数量，再后面就是n个key和n个value。在脚本中，可以理解为从KEYS数组和ARGV数组中获取对应的值，下标是从1开始的。</p>\n<p><em>上面例子中的两个点是Lua脚本中字符串连接的操作符</em></p>\n<p>现在我们已经知道怎么在Redis中执行Lua脚本了，可是这样的脚本和Redis没有关系啊，怎么才能操作Redis中的数据呢？请继续看我表演</p>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; get my_name</span><br/><span class=\"line\"><span class=\"string\">&#34;Jackeyzhe&#34;</span></span><br/><span class=\"line\">&gt; EVAL <span class=\"string\">&#39;local val=ARGV[1]..&#34; &#34;..redis.call(&#34;get&#34;,KEYS[1]) return val&#39;</span> 1 my_name Hello</span><br/><span class=\"line\"><span class=\"string\">&#34;Hello Jackeyzhe&#34;</span></span><br/></pre></td></tr></tbody></table></figure>\n<p>使用redis.call或redis.pcall（以后会提到）就可以操作redis了。</p>\n<p>需要注意的是，如果返回下面的错误，说明要获取的key不存在</p>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; EVAL <span class=\"string\">&#39;local val=ARGV[1]..&#34; &#34;..redis.call(&#34;get&#34;,KEYS[1]) return val&#39;</span> 1 me Hello</span><br/><span class=\"line\">(error) ERR Error running script (call to f_eb11f8ddeeee07cc88d1f3bd103069284b83c5d8): @user_script:1: user_script:1: attempt to concatenate a boolean value</span><br/></pre></td></tr></tbody></table></figure>\n<p>我们可以使用上面这种方法执行一些简单的Lua脚本，如果要执行更加复杂的Lua脚本，用EVAL命令就会显得臃肿且凌乱。所以Redis又提供了一种方法。</p>\n<h5 id=\"redis-cli-–eval\"><a href=\"#redis-cli-–eval\" class=\"headerlink\" title=\"redis-cli –eval\"></a>redis-cli –eval</h5><p>我们可以先写一个Lua文件，然后使用redis-cli命令来执行。</p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">local name=redis.call(&#34;get&#34;, KEYS[1])</span><br/><span class=\"line\">local greet=ARGV[1]</span><br/><span class=\"line\">local result=greet..&#34; &#34;..name</span><br/><span class=\"line\">return result</span><br/></pre></td></tr></tbody></table></figure>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; redis-cli --<span class=\"built_in\">eval</span> hello.lua my_name , Hello</span><br/><span class=\"line\"><span class=\"string\">&#34;Hello Jackey&#34;</span></span><br/></pre></td></tr></tbody></table></figure>\n<p>这样，我们就可以先写一个.lua文件，然后再使用redis-cli命令来执行了，看起来也不会很凌乱，使用这种方式传入参数时，不需要指定key的数量，而是用逗号分隔key和argv。</p>\n<h5 id=\"EVALSHA\"><a href=\"#EVALSHA\" class=\"headerlink\" title=\"EVALSHA\"></a>EVALSHA</h5><p>你以为到这就结束了吗？那就too naive了。如果我们在Redis交互模式中，想要执行脚本文件怎么办？每次都退出来，执行完再连接一次？这未免太麻烦了。Redis提供了EVALSHA命令，使我们可以在交互模式执行脚本文件。</p>\n<p>首先，需要上传脚本文件</p>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">$ redis-cli SCRIPT LOAD <span class=\"string\">&#34;<span class=\"variable\">$(cat hello.lua)</span>&#34;</span></span><br/><span class=\"line\"><span class=\"string\">&#34;463ff2ca9e78e36cd66ee9d37ee0dcd59100bf46&#34;</span></span><br/></pre></td></tr></tbody></table></figure>\n<p>会得到一串十六进制的数字，这是这个脚本的唯一标识。拿到这个数字后，表示我们已经将脚本上传到服务器了，接下来就可以使用这个标识来执行脚本了。</p>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; EVALSHA 463ff2ca9e78e36cd66ee9d37ee0dcd59100bf46 1 my_name Hello</span><br/><span class=\"line\"><span class=\"string\">&#34;Hello Jackeyzhe&#34;</span></span><br/></pre></td></tr></tbody></table></figure>\n<h4 id=\"终止脚本\"><a href=\"#终止脚本\" class=\"headerlink\" title=\"终止脚本\"></a>终止脚本</h4><p>Redis中Lua脚本到默认执行时长是5秒，一般情况下脚本的执行时间都是毫秒级的，如果执行超时，脚本也不会停止，而是记录错误日志。</p>\n<p>终止脚本执行的方法有两种</p>\n<ol>\n<li>使用KILL SCRIPT命令</li>\n<li>使用SHUTDOWN NOSAVE命令关闭服务器</li>\n</ol>\n<p>不过不建议手动终止脚本</p>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>本文简要介绍了什么是Lua，以及Redis执行和终止Lua脚本的方法。如果都掌握了，那么恭喜你已经从Lua小学毕业了。在Lua中学你会学到Redis关于Lua命令的更详细介绍。</p>","text":"Redis提供了丰富的指令集，但是仍然不能满足所有场景，在一些特定场景下，需要自定义一些指定来完成某些功能。因此，Redis提供了Lua脚本支持，用户可以自己编写脚本来实现想要的功能。 什么是Lua？Lua是一种功能强大的，高效，轻量级，可嵌入的脚本语言。它是动态类型语言，通过使...","link":"","photos":[],"count_time":{"symbolsCount":"2.3k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%BB%80%E4%B9%88%E6%98%AFLua%EF%BC%9F\"><span class=\"toc-text\">什么是Lua？</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Redis%E6%80%8E%E4%B9%88%E6%89%A7%E8%A1%8CLua%E8%84%9A%E6%9C%AC\"><span class=\"toc-text\">Redis怎么执行Lua脚本</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#EVAL%E5%91%BD%E4%BB%A4\"><span class=\"toc-text\">EVAL命令</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#redis-cli-%E2%80%93eval\"><span class=\"toc-text\">redis-cli –eval</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#EVALSHA\"><span class=\"toc-text\">EVALSHA</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%BB%88%E6%AD%A2%E8%84%9A%E6%9C%AC\"><span class=\"toc-text\">终止脚本</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">总结</span></a></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"lua学习笔记","uid":"329726c67d21b0b62fc4af0c5b68cfed","slug":"zl/2016-01-01-1011_lua学习笔记","date":"2024-04-03T03:47:32.964Z","updated":"2024-04-03T03:47:32.965Z","comments":true,"path":"api/articles/zl/2016-01-01-1011_lua学习笔记.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":" &lt;p&gt;lua是一门轻量级的脚本语言…好像比较适合写游戏？在 &lt;a href=&quot;https://github.com/Mogara/QSanguosha&quot;&gt;太阳神三国杀&lt;/a&gt; 中见过很多lua脚本。 由于&lt;a hre...","link":"","photos":[],"count_time":{"symbolsCount":"14k","symbolsTime":"12 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"nginx和lua的简单使用","uid":"b02d8c9f6693d11804eff7cfdf507c64","slug":"zl/2016-01-01-1009_nginx和lua的简单使用","date":"2024-04-03T03:47:32.963Z","updated":"2024-04-03T03:47:32.963Z","comments":true,"path":"api/articles/zl/2016-01-01-1009_nginx和lua的简单使用.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"OpenResty 是一款基于 NGINX 和 LuaJIT 的 Web 平台 一、安装环境 根据官网教程，macos我们只需要一行命令就可以开心的安装openresty (brew install openresty/brew/openresty) 12345678910111...","link":"","photos":[],"count_time":{"symbolsCount":"11k","symbolsTime":"10 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}