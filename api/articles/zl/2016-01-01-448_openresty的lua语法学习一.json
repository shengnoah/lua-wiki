{"title":"openresty的lua语法学习一","uid":"df8e57e9978129be635de09ab0e93a6f","slug":"zl/2016-01-01-448_openresty的lua语法学习一","date":"2024-04-03T03:47:35.729Z","updated":"2024-04-03T03:47:35.729Z","comments":true,"path":"api/articles/zl/2016-01-01-448_openresty的lua语法学习一.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<hr/>\n<p>openresty的lua语法学习</p>\n<hr/>\n<p>lua的popen获取命令的执行结果</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/><span class=\"line\">9</span><br/><span class=\"line\">10</span><br/><span class=\"line\">11</span><br/><span class=\"line\">12</span><br/><span class=\"line\">13</span><br/><span class=\"line\">14</span><br/><span class=\"line\">15</span><br/><span class=\"line\">16</span><br/><span class=\"line\">17</span><br/><span class=\"line\">18</span><br/><span class=\"line\">19</span><br/><span class=\"line\">20</span><br/><span class=\"line\">21</span><br/><span class=\"line\">22</span><br/><span class=\"line\">23</span><br/><span class=\"line\">24</span><br/><span class=\"line\">25</span><br/><span class=\"line\">26</span><br/><span class=\"line\">27</span><br/><span class=\"line\">28</span><br/><span class=\"line\">29</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br/><span class=\"line\"><span class=\"keyword\">local</span> myfile = <span class=\"built_in\">io</span>.<span class=\"built_in\">popen</span>(<span class=\"string\">&#34;pwd&#34;</span>, <span class=\"string\">&#34;r&#34;</span>)</span><br/><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"literal\">nil</span> == myfile <span class=\"keyword\">then</span></span><br/><span class=\"line\">  <span class=\"built_in\">print</span>(<span class=\"string\">&#34;open file for dir fail!!&#34;</span>)</span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#34;n=========command dir result:&#34;</span>)</span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"comment\">-- 读取文件内容</span></span><br/><span class=\"line\"><span class=\"keyword\">for</span> cnt <span class=\"keyword\">in</span> myfile:<span class=\"built_in\">lines</span>() <span class=\"keyword\">do</span></span><br/><span class=\"line\">    <span class=\"built_in\">print</span>(cnt)</span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"comment\">-- 关闭文件</span></span><br/><span class=\"line\">myfile:<span class=\"built_in\">close</span>()</span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"keyword\">local</span> secondfile = <span class=\"built_in\">io</span>.<span class=\"built_in\">popen</span>(<span class=\"string\">&#34;ifconfig&#34;</span>)</span><br/><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"literal\">nil</span> == secondfile <span class=\"keyword\">then</span></span><br/><span class=\"line\">  <span class=\"built_in\">print</span>(<span class=\"string\">&#34;open file for ifconfig fail!!&#34;</span>)</span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#34;n==========command ifconfig result:&#34;</span>)</span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"comment\">-- 读取文件内容</span></span><br/><span class=\"line\"><span class=\"keyword\">local</span> content = secondfile:<span class=\"built_in\">read</span>(<span class=\"string\">&#34;*a&#34;</span>)</span><br/><span class=\"line\"><span class=\"built_in\">print</span>(content)</span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"comment\">-- 关闭文件</span></span><br/><span class=\"line\">secondfile:<span class=\"built_in\">close</span>()</span><br/></pre></td></tr></tbody></table></figure>\n<p>通过openresty的web服务提供一个接口，执行系统脚本，停止某个服务，并返回结果</p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/><span class=\"line\">9</span><br/><span class=\"line\">10</span><br/><span class=\"line\">11</span><br/><span class=\"line\">12</span><br/><span class=\"line\">13</span><br/><span class=\"line\">14</span><br/><span class=\"line\">15</span><br/><span class=\"line\">16</span><br/><span class=\"line\">17</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"># 调用 http://192.168.1.12/testapi?value=stop</span><br/><span class=\"line\">location = /testapi {</span><br/><span class=\"line\">\tdefault_type &#39;text/plain&#39;;</span><br/><span class=\"line\">\tcontent_by_lua_block {</span><br/><span class=\"line\">\t\tlocal value = ngx.var.arg_value</span><br/><span class=\"line\">\t\tif value ~= nil then</span><br/><span class=\"line\">\t\t\tlocal command = &#34;/usr/bin/bash /usr/local/src/stopService.sh &#34;..value</span><br/><span class=\"line\">\t\t\tlocal handle = io.popen(command)   </span><br/><span class=\"line\">\t\t\tlocal result = handle:read(&#34;*a&#34;)</span><br/><span class=\"line\">\t\t\thandle:close()</span><br/><span class=\"line\">\t\t\tngx.say(result)</span><br/><span class=\"line\">\t\t\tngx.exit(200)</span><br/><span class=\"line\">\t\telse</span><br/><span class=\"line\">\t\t\tngx.exit(404)</span><br/><span class=\"line\">\t\tend</span><br/><span class=\"line\">\t}</span><br/><span class=\"line\">}</span><br/></pre></td></tr></tbody></table></figure>\n<h1 id=\"lua语法的字符串分割，自定义方法\"><a href=\"#lua语法的字符串分割，自定义方法\" class=\"headerlink\" title=\"lua语法的字符串分割，自定义方法\"></a>lua语法的字符串分割，自定义方法</h1><figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/><span class=\"line\">9</span><br/><span class=\"line\">10</span><br/><span class=\"line\">11</span><br/><span class=\"line\">12</span><br/><span class=\"line\">13</span><br/><span class=\"line\">14</span><br/><span class=\"line\">15</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">--定义函数，分割字符串</span><br/><span class=\"line\"><span class=\"keyword\">function</span> string.split(str, splitParameter) </span><br/><span class=\"line\">    <span class=\"built_in\">local</span> result = {}</span><br/><span class=\"line\">    string.gsub(str,<span class=\"string\">&#39;[^&#39;</span>..splitParameter..<span class=\"string\">&#39;]+&#39;</span>, <span class=\"keyword\">function</span>(w) table.insert(result, w) end)</span><br/><span class=\"line\">    <span class=\"built_in\">return</span> result</span><br/><span class=\"line\">end</span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"comment\"># 可能不太好理解的就是 string.gsub中使用了另一个函数</span></span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"comment\"># 先看下string.gsub的使用格式 string.gsub (s, pattern, repl [,m])</span></span><br/><span class=\"line\"><span class=\"comment\"># s 为原字符串， pattern 为匹配的模式  repl 替换的内容  m 只查找pattern匹配的m个子串</span></span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"comment\"># repl 为常规字符串，成功匹配的字串会被repl直接替换</span></span><br/><span class=\"line\"><span class=\"comment\"># repl 是一个表，每次匹配中的第一个子串将会作为整个表的键，取table[匹配子串]来替换所匹配出来的子串，当匹配不成功时，函数会使用整个字符串来作为table的键值</span></span><br/><span class=\"line\"><span class=\"comment\"># repl 为函数，每一次匹配的字串都将作为整个函数的参数，取function(匹配字串)来替换所匹配出来的子串,当匹配不成功时，函数会使用整个字符串来作为函数的参数。如果函数的返回值是一个数字或者是字符串，那么会直接拿来替换，如果它返回false或者nil，替换动作将不会发生，如果返回其他的值将会报错</span></span><br/></pre></td></tr></tbody></table></figure>\n<h1 id=\"lua语法读取文件\"><a href=\"#lua语法读取文件\" class=\"headerlink\" title=\"lua语法读取文件\"></a>lua语法读取文件</h1><figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/><span class=\"line\">9</span><br/><span class=\"line\">10</span><br/><span class=\"line\">11</span><br/><span class=\"line\">12</span><br/><span class=\"line\">13</span><br/><span class=\"line\">14</span><br/><span class=\"line\">15</span><br/><span class=\"line\">16</span><br/><span class=\"line\">17</span><br/><span class=\"line\">18</span><br/><span class=\"line\">19</span><br/><span class=\"line\">20</span><br/><span class=\"line\">21</span><br/><span class=\"line\">22</span><br/><span class=\"line\">23</span><br/><span class=\"line\">24</span><br/><span class=\"line\">25</span><br/><span class=\"line\">26</span><br/><span class=\"line\">27</span><br/><span class=\"line\">28</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 此配置简写nginx的配置文件，动态匹配url，根据文件定义proxy_pass的值</span></span><br/><span class=\"line\"><span class=\"keyword\">function</span> FileRead()</span><br/><span class=\"line\">    <span class=\"built_in\">local</span> file_path = <span class=\"string\">&#34;/usr/local/openresty/nginx/conf/gb/3rd/api-pay-env.conf&#34;</span></span><br/><span class=\"line\">    <span class=\"built_in\">local</span> file = io.open(file_path, <span class=\"string\">&#34;r&#34;</span>)</span><br/><span class=\"line\">    <span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> file:lines() <span class=\"keyword\">do</span></span><br/><span class=\"line\">        <span class=\"built_in\">local</span> splitValues = string.split(line, <span class=\"string\">&#34;=&#34;</span>)</span><br/><span class=\"line\">        <span class=\"keyword\">if</span> splitValues[1] == location_uri <span class=\"keyword\">then</span>  -- 判断访问的location匹配的uri 是否存在文件</span><br/><span class=\"line\">            <span class=\"built_in\">local</span> proxy_pass_split = string.split(splitValues[2], <span class=\"string\">&#34;/&#34;</span>)[2] -- 获取proxy_pass中的host，将端口去掉</span><br/><span class=\"line\">            <span class=\"built_in\">local</span> valueMatch = string.match(proxy_pass_split, <span class=\"string\">&#34;:&#34;</span>)</span><br/><span class=\"line\">            <span class=\"keyword\">if</span> valueMatch ~= nil <span class=\"keyword\">then</span></span><br/><span class=\"line\">                <span class=\"built_in\">local</span> proxy_pass_split = string.split(proxy_pass_split, <span class=\"string\">&#34;:&#34;</span>)[1]</span><br/><span class=\"line\">            end</span><br/><span class=\"line\"></span><br/><span class=\"line\">            ngx.var.query_host = proxy_pass_split -- 修改nginx设置的query_host值,用于proxy_set_header Host <span class=\"variable\">$query_host</span>;</span><br/><span class=\"line\">            </span><br/><span class=\"line\">            <span class=\"built_in\">local</span> uri = ngx.re.sub(ngx.var.request_uri, <span class=\"string\">&#34;^/.*-api/(.*)&#34;</span>, <span class=\"string\">&#34;<span class=\"variable\">$1</span>&#34;</span>, <span class=\"string\">&#34;o&#34;</span>)</span><br/><span class=\"line\">            <span class=\"built_in\">local</span> resultProxyPass = splitValues[2] .. uri</span><br/><span class=\"line\">            ngx.log(ngx.ERR, <span class=\"string\">&#34;set_host的值: &#34;</span>, proxy_pass_split)</span><br/><span class=\"line\">            ngx.log(ngx.ERR, <span class=\"string\">&#34;proxy_pass的值: &#34;</span>, resultProxyPass)</span><br/><span class=\"line\">            <span class=\"built_in\">return</span> resultProxyPass</span><br/><span class=\"line\">        end</span><br/><span class=\"line\">    end</span><br/><span class=\"line\">end</span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"comment\"># cat /usr/local/openresty/nginx/conf/gb/3rd/api-pay-env.conf</span></span><br/><span class=\"line\">dsi-api=http://beijingxinagwang.com/api/</span><br/><span class=\"line\">sb-api=http://woaibeijing.com:8084/</span><br/><span class=\"line\">im-api=http://it.com/</span><br/></pre></td></tr></tbody></table></figure>\n<h1 id=\"获取location匹配的url\"><a href=\"#获取location匹配的url\" class=\"headerlink\" title=\"获取location匹配的url\"></a>获取location匹配的url</h1><figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/><span class=\"line\">9</span><br/><span class=\"line\">10</span><br/><span class=\"line\">11</span><br/><span class=\"line\">12</span><br/><span class=\"line\">13</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">ngx.var.uri  <span class=\"comment\">--获取访问的url，不带参数</span></span><br/><span class=\"line\">ngx.var.request_uri   <span class=\"comment\">--带参数的url</span></span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"comment\">--获取location匹配的url</span></span><br/><span class=\"line\"><span class=\"comment\">--定义函数，分割url路径</span></span><br/><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(str, splitParameter)</span></span> </span><br/><span class=\"line\">    <span class=\"keyword\">local</span> result = {}</span><br/><span class=\"line\">    <span class=\"built_in\">string</span>.<span class=\"built_in\">gsub</span>(str,<span class=\"string\">&#39;[^&#39;</span>..splitParameter..<span class=\"string\">&#39;]+&#39;</span>, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(w)</span></span> <span class=\"built_in\">table</span>.<span class=\"built_in\">insert</span>(result, w) <span class=\"keyword\">end</span>)</span><br/><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"keyword\">local</span> request_uri = ngx.var.uri <span class=\"comment\">--获取访问的url，不带参数</span></span><br/><span class=\"line\"><span class=\"keyword\">local</span> location_uri = <span class=\"built_in\">string</span>.split(request_uri, <span class=\"string\">&#34;/&#34;</span>)[<span class=\"number\">1</span>]</span><br/></pre></td></tr></tbody></table></figure>\n<h1 id=\"nginx修改客户访问的uri\"><a href=\"#nginx修改客户访问的uri\" class=\"headerlink\" title=\"nginx修改客户访问的uri\"></a>nginx修改客户访问的uri</h1><figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">rewrite_by_lua<span class=\"string\">&#39;</span></span><br/><span class=\"line\"><span class=\"string\">            local uri = ngx.re.sub(ngx.var.request_uri, &#34;^/.*-api/(.*)&#34;, &#34;/$1&#34;, &#34;o&#34;)</span></span><br/><span class=\"line\"><span class=\"string\">            ngx.req.set_uri(uri)</span></span><br/><span class=\"line\"><span class=\"string\">            ngx.log(ngx.ERR, &#34;set_uri: &#34;, uri)</span></span><br/><span class=\"line\"><span class=\"string\">        &#39;</span>;</span><br/></pre></td></tr></tbody></table></figure>\n<h1 id=\"lua读取json文件\"><a href=\"#lua读取json文件\" class=\"headerlink\" title=\"lua读取json文件\"></a>lua读取json文件</h1><h1 id=\"通过lua获取get或者post提交的参数\"><a href=\"#通过lua获取get或者post提交的参数\" class=\"headerlink\" title=\"通过lua获取get或者post提交的参数\"></a>通过lua获取get或者post提交的参数</h1><figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/><span class=\"line\">9</span><br/><span class=\"line\">10</span><br/><span class=\"line\">11</span><br/><span class=\"line\">12</span><br/><span class=\"line\">13</span><br/><span class=\"line\">14</span><br/><span class=\"line\">15</span><br/><span class=\"line\">16</span><br/><span class=\"line\">17</span><br/><span class=\"line\">18</span><br/><span class=\"line\">19</span><br/><span class=\"line\">20</span><br/><span class=\"line\">21</span><br/><span class=\"line\">22</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">set</span> <span class=\"variable\">$service</span> <span class=\"string\">&#39;&#39;</span>;</span><br/><span class=\"line\">           rewrite_by_lua  <span class=\"string\">&#39;</span></span><br/><span class=\"line\"><span class=\"string\">                    local request_method = ngx.var.request_method</span></span><br/><span class=\"line\"><span class=\"string\">                    if request_method == &#34;GET&#34; then</span></span><br/><span class=\"line\"><span class=\"string\">                            local arg = ngx.req.get_uri_args()[&#34;service&#34;] or 0</span></span><br/><span class=\"line\"><span class=\"string\">                            ngx.var.service = arg</span></span><br/><span class=\"line\"><span class=\"string\">                    elseif request_method == &#34;POST&#34; then</span></span><br/><span class=\"line\"><span class=\"string\">                            ngx.req.read_body()</span></span><br/><span class=\"line\"><span class=\"string\">                            local arg = ngx.req.get_post_args()[&#34;service&#34;] or 0</span></span><br/><span class=\"line\"><span class=\"string\">                            ngx.var.service = arg</span></span><br/><span class=\"line\"><span class=\"string\">                    end;&#39;</span>;</span><br/><span class=\"line\">            </span><br/><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"variable\">$service</span> = <span class=\"string\">&#39;register&#39;</span>)</span><br/><span class=\"line\">                    {       </span><br/><span class=\"line\">                            proxy_pass http://userinfo;</span><br/><span class=\"line\">                    }</span><br/><span class=\"line\">                            </span><br/><span class=\"line\">            proxy_redirect off;</span><br/><span class=\"line\">            proxy_set_header HOST <span class=\"variable\">$host</span>;</span><br/><span class=\"line\">            proxy_set_header X-Real-IP <span class=\"variable\">$remote_addr</span>;</span><br/><span class=\"line\">            proxy_set_header X-Forwarded-For <span class=\"variable\">$proxy_add_x_forwarded_for</span>;</span><br/><span class=\"line\">    }</span><br/></pre></td></tr></tbody></table></figure>","text":" openresty的lua语法学习 lua的popen获取命令的执行结果 1234567891011121314151617181920212223242526272829local myfile = io.popen(&#34;pwd&#34;, &#34;r&#34;)if...","link":"","photos":[],"count_time":{"symbolsCount":"4.8k","symbolsTime":"4 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#lua%E8%AF%AD%E6%B3%95%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%88%86%E5%89%B2%EF%BC%8C%E8%87%AA%E5%AE%9A%E4%B9%89%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">lua语法的字符串分割，自定义方法</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#lua%E8%AF%AD%E6%B3%95%E8%AF%BB%E5%8F%96%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">lua语法读取文件</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E8%8E%B7%E5%8F%96location%E5%8C%B9%E9%85%8D%E7%9A%84url\"><span class=\"toc-text\">获取location匹配的url</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#nginx%E4%BF%AE%E6%94%B9%E5%AE%A2%E6%88%B7%E8%AE%BF%E9%97%AE%E7%9A%84uri\"><span class=\"toc-text\">nginx修改客户访问的uri</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#lua%E8%AF%BB%E5%8F%96json%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">lua读取json文件</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E9%80%9A%E8%BF%87lua%E8%8E%B7%E5%8F%96get%E6%88%96%E8%80%85post%E6%8F%90%E4%BA%A4%E7%9A%84%E5%8F%82%E6%95%B0\"><span class=\"toc-text\">通过lua获取get或者post提交的参数</span></a></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Nginx安装Lua模块","uid":"ae334ff60bb22fb2ed5701f79313d113","slug":"zl/2016-01-01-447_Nginx安装Lua模块","date":"2024-04-03T03:47:35.729Z","updated":"2024-04-03T03:47:35.729Z","comments":true,"path":"api/articles/zl/2016-01-01-447_Nginx安装Lua模块.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"NGINX安装LUA（基于LNMP）：1.下载安装LuaJIT 2.1：http://luajit.org/download.html 12345wget http://luajit.org/download/LuaJIT-2.1.0-beta3.tar.gztar zxf Lu...","link":"","photos":[],"count_time":{"symbolsCount":"1.1k","symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Lua作图教程之设计模式","uid":"f5fa6c4f2499c0d40f721be59caa4a29","slug":"zl/2016-01-01-449_Lua作图教程之设计模式","date":"2024-04-03T03:47:35.729Z","updated":"2024-04-03T03:47:35.729Z","comments":true,"path":"api/articles/zl/2016-01-01-449_Lua作图教程之设计模式.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"设计模式设计模式（Design pattern）代表了最佳的实践，通常被有经验的面向对象的软件开发人员所采用。设计模式是软件开发人员在软件开发过程中面临的一般问题的解决方案。这些解决方案是众多软件开发人员经过相当长的一段时间的试验和错误总结出来的。 到目前为止，我在用lua作图时...","link":"","photos":[],"count_time":{"symbolsCount":"1.1k","symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}