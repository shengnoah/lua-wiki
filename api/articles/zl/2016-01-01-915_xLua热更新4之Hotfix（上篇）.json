{"title":"xLua热更新4之Hotfix（上篇）","uid":"e988662893ced0a5e1e7507e4bbb5a0b","slug":"zl/2016-01-01-915_xLua热更新4之Hotfix（上篇）","date":"2024-04-03T03:47:36.185Z","updated":"2024-04-03T03:47:36.185Z","comments":true,"path":"api/articles/zl/2016-01-01-915_xLua热更新4之Hotfix（上篇）.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<p>思考并回答以下问题：</p>\n<p>xLua里面有一个热补丁的功能。就是你有的C#代码不用改，就可以加入热更新的功能。</p>\n<p>为什么叫热补丁呢？已有项目中的C#代码只需要增加一些配置，不用做其他任何调整就可使用上类似热更新的功能。由于和热更新也不同，所以叫热补丁。这也是xLua首创的一项功能。</p>\n<p>热补丁的优点有这些：</p>\n<ul>\n<li>侵入性小，老项目原有代码不做任何调整就可使用。</li>\n<li>出问题了才用Lua代码来打补丁，这时才会走到lua代码逻辑。运行时影响小，不打补丁基本和原有程序一样。</li>\n</ul>\n<h2 id=\"使用流程\"><a href=\"#使用流程\" class=\"headerlink\" title=\"使用流程\"></a>使用流程</h2><p>xLua的热补丁使用大体流程如下：</p>\n<ul>\n<li>添加HOTFIX_ENABLE宏打开该特性（在Unity3D的File-›Build Setting-›Scripting Define Symbols下添加）。编辑器、各手机平台这个宏要分别设置。如果是自动化打包，要注意在代码里用API设置的宏是不生效的，需要在编辑器设置。</li>\n</ul>\n<p>（建议平时开发业务代码不打开HOTFIX_ENABLE，只在build手机版本或者要在编译器下开发补丁时打开HOTFIX_ENABLE）</p>\n<img src=\"https://chebincarl.github.io//2019/10/22/xLua热更新4之Hotfix（上篇）/1.png\"/>\n<ul>\n<li><p>配置热补丁代码，标识要热更新的类型</p>\n</li>\n<li><p>执行XLua/Generate Code菜单。</p>\n</li>\n<li><p>编辑器下开发补丁需要手动执行”XLua/Hotfix Inject In Editor”菜单。打印“hotfix inject finish!”或者“had injected!”才算成功，否则会打印错误信息。发布构建时，这个步骤会自动进行。</p>\n</li>\n</ul>\n<blockquote>\n<p>如果已经打印了“hotfix inject finish!”或者“had injected!”，执行xlua.hotfix仍然报类似“xlua.access, no field __Hitfix0_Update”的错误，要么是该类没配置到Hotfix列表，要么是注入成功后，又触发了编译，覆盖了注入结果。<br/><img src=\"https://chebincarl.github.io//2019/10/22/xLua热更新4之Hotfix（上篇）/2.png\"/></p>\n</blockquote>\n<p>注意这个过程会用到xLua中的Tools，需要放到和Assets的同级目录</p>\n<img src=\"https://chebincarl.github.io//2019/10/22/xLua热更新4之Hotfix（上篇）/3.png\"/>\n<h2 id=\"标识要热更新的类型\"><a href=\"#标识要热更新的类型\" class=\"headerlink\" title=\"标识要热更新的类型\"></a>标识要热更新的类型</h2><p>和之前学到的xLua配置生成代码类似，有两种方式：</p>\n<ul>\n<li><p>方式一：直接在类里头打Hotfix标签（不建议使用，示例代码只是为了方便演示采取这种方式）；</p>\n</li>\n<li><p>方式二：在一个static类的static字段或者属性里头配置一个列表。属性可以用于实现的比较复杂的配置，比如根据Namespace做白名单。</p>\n<figure class=\"highlight cs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/><span class=\"line\">9</span><br/><span class=\"line\">10</span><br/><span class=\"line\">11</span><br/><span class=\"line\">12</span><br/><span class=\"line\">13</span><br/><span class=\"line\">14</span><br/><span class=\"line\">15</span><br/><span class=\"line\">16</span><br/><span class=\"line\">17</span><br/><span class=\"line\">18</span><br/><span class=\"line\">19</span><br/><span class=\"line\">20</span><br/><span class=\"line\">21</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br/><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> </span><br/><span class=\"line\">{</span><br/><span class=\"line\">    []</span><br/><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> List‹Type› by_field = <span class=\"keyword\">new</span> List‹Type›()</span><br/><span class=\"line\">    {</span><br/><span class=\"line\">        <span class=\"keyword\">typeof</span>(HotFixSubClass),</span><br/><span class=\"line\">        <span class=\"keyword\">typeof</span>(GenericClass‹›),</span><br/><span class=\"line\">    };</span><br/><span class=\"line\"></span><br/><span class=\"line\">    []</span><br/><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> List‹Type› by_property</span><br/><span class=\"line\">    {</span><br/><span class=\"line\">        <span class=\"keyword\">get</span></span><br/><span class=\"line\">        {</span><br/><span class=\"line\">            <span class=\"keyword\">return</span> (<span class=\"keyword\">from</span> type <span class=\"keyword\">in</span> Assembly.Load(<span class=\"string\">&#34;Assembly-CSharp&#34;</span>).GetTypes()</span><br/><span class=\"line\">                    <span class=\"keyword\">where</span> type.Namespace == <span class=\"string\">&#34;XXXX&#34;</span></span><br/><span class=\"line\">                    <span class=\"keyword\">select</span> type).ToList();</span><br/><span class=\"line\">        }</span><br/><span class=\"line\">    }</span><br/><span class=\"line\">}</span><br/></pre></td></tr></tbody></table></figure>\n</li>\n</ul>\n<h2 id=\"热补丁的限制\"><a href=\"#热补丁的限制\" class=\"headerlink\" title=\"热补丁的限制\"></a>热补丁的限制</h2><ul>\n<li>不支持静态构造函数。</li>\n<li>目前只支持Assets下代码的热补丁，不支持引擎，c#系统库的热补丁。</li>\n</ul>\n<h2 id=\"热补丁Lua-API\"><a href=\"#热补丁Lua-API\" class=\"headerlink\" title=\"热补丁Lua API\"></a>热补丁Lua API</h2><p><strong>xlua.hotfix(class, [method_name], fix)</strong></p>\n<p>描述 ： 注入lua补丁<br/>class ： C#类，两种表示方法，CS.Namespace.TypeName或者字符串方式”Namespace.TypeName”，字符串格式和C#的Type.GetType要求一致，如果是内嵌类型（Nested Type）是非Public类型的话，只能用字符串方式表示Namespace.TypeName+NestedTypeName；<br/>method_name ： 方法名，可选；<br/>fix ： 如果传了method_name，fix将会是一个function，否则通过table提供一组函数。table的组织按key是method_name，value是function的方式。</p>\n<p><strong>base(csobj)</strong></p>\n<p>描述 ： 子类override函数通过base调用父类实现。<br/>csobj ： 对象<br/>返回值 ： 新对象，可以通过该对象base上的方法<br/>例子：<br/></p><figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">xlua.hotfix(CS.BaseTest, <span class=\"string\">&#39;Foo&#39;</span>, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(self, p)</span></span></span><br/><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#39;BaseTest&#39;</span>, p)</span><br/><span class=\"line\">    base(self):Foo(p)</span><br/><span class=\"line\"><span class=\"keyword\">end</span>)</span><br/><span class=\"line\">util.hotfix_ex(class, method_name, fix)</span><br/></pre></td></tr></tbody></table></figure><p></p>\n<p>描述 ： xlua.hotfix的增强版本，可以在fix函数里头执行原来的函数，缺点是fix的执行会略慢。<br/>method_name ： 方法名；<br/>fix ： 用来替换C#方法的lua function。</p>\n<h2 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h2><p>下面来看个简单的例子：<br/></p><figure class=\"highlight cs\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/><span class=\"line\">9</span><br/><span class=\"line\">10</span><br/><span class=\"line\">11</span><br/><span class=\"line\">12</span><br/><span class=\"line\">13</span><br/><span class=\"line\">14</span><br/><span class=\"line\">15</span><br/><span class=\"line\">16</span><br/><span class=\"line\">17</span><br/><span class=\"line\">18</span><br/><span class=\"line\">19</span><br/><span class=\"line\">20</span><br/><span class=\"line\">21</span><br/><span class=\"line\">22</span><br/><span class=\"line\">23</span><br/><span class=\"line\">24</span><br/><span class=\"line\">25</span><br/><span class=\"line\">26</span><br/><span class=\"line\">27</span><br/><span class=\"line\">28</span><br/><span class=\"line\">29</span><br/><span class=\"line\">30</span><br/><span class=\"line\">31</span><br/><span class=\"line\">32</span><br/><span class=\"line\">33</span><br/><span class=\"line\">34</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> UnityEngine;</span><br/><span class=\"line\"><span class=\"keyword\">using</span> XLua;</span><br/><span class=\"line\"></span><br/><span class=\"line\">[]</span><br/><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">HotfixTest</span> : <span class=\"title\">MonoBehaviour</span></span><br/><span class=\"line\">{</span><br/><span class=\"line\">    LuaEnv luaenv = <span class=\"keyword\">new</span> LuaEnv();</span><br/><span class=\"line\"></span><br/><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> tick = <span class=\"number\">0</span>;</span><br/><span class=\"line\"></span><br/><span class=\"line\">    <span class=\"comment\">// Update is called once per frame</span></span><br/><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Update</span>(<span class=\"params\"></span>)</span></span><br/><span class=\"line\"><span class=\"function\"></span>    {</span><br/><span class=\"line\">        <span class=\"keyword\">if</span> (++tick % <span class=\"number\">50</span> == <span class=\"number\">0</span>)</span><br/><span class=\"line\">        {</span><br/><span class=\"line\">            Debug.Log(<span class=\"string\">&#34;››››››››Update in C#, tick = &#34;</span> + tick);</span><br/><span class=\"line\">        }</span><br/><span class=\"line\">    }</span><br/><span class=\"line\"></span><br/><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">OnGUI</span>(<span class=\"params\"></span>)</span></span><br/><span class=\"line\"><span class=\"function\"></span>    {</span><br/><span class=\"line\">        <span class=\"keyword\">if</span> (GUI.Button(<span class=\"keyword\">new</span> Rect(<span class=\"number\">10</span>, <span class=\"number\">10</span>, <span class=\"number\">300</span>, <span class=\"number\">80</span>), <span class=\"string\">&#34;Hotfix&#34;</span>))</span><br/><span class=\"line\">        {</span><br/><span class=\"line\">            luaenv.DoString(<span class=\"string\">@&#34;</span></span><br/><span class=\"line\"><span class=\"string\">                xlua.hotfix(CS.HotfixTest, &#39;Update&#39;, function(self)</span></span><br/><span class=\"line\"><span class=\"string\">                    self.tick = self.tick + 1</span></span><br/><span class=\"line\"><span class=\"string\">                    if (self.tick % 50) == 0 then</span></span><br/><span class=\"line\"><span class=\"string\">                        print(&#39;‹‹‹‹‹‹‹‹Update in lua, tick = &#39; .. self.tick)</span></span><br/><span class=\"line\"><span class=\"string\">                    end</span></span><br/><span class=\"line\"><span class=\"string\">                end)</span></span><br/><span class=\"line\"><span class=\"string\">            &#34;</span>);</span><br/><span class=\"line\">        }</span><br/><span class=\"line\">    }</span><br/><span class=\"line\">}</span><br/></pre></td></tr></tbody></table></figure><p></p>\n<p>运行这个例子有几步需要注意，其实就是上面学到的热补丁使用流程：</p>\n<p>添加 HOTFIX_ENABLE 到 ‘Edit › Project Settings › Player › Other Settings › Scripting Define Symbols’<br/>配置生成代码，这个代码中已经有了<br/>生成代码：执行 ‘XLua › Generate Code’ 菜单，等待Unity编译完成。<br/>注入：执行 ‘XLua › Hotfix Inject In Editor’ 菜单。在编辑器中需要执行，发布时会自动执行。<br/>运行，点击Hotfix按钮查看效果。<br/>这个例子也可以在xLua的XLuaExamples","text":"思考并回答以下问题： xLua里面有一个热补丁的功能。就是你有的C#代码不用改，就可以加入热更新的功能。 为什么叫热补丁呢？已有项目中的C#代码只需要增加一些配置，不用做其他任何调整就可使用上类似热更新的功能。由于和热更新也不同，所以叫热补丁。这也是xLua首创的一项功能。 热补...","link":"","photos":[],"count_time":{"symbolsCount":"3.3k","symbolsTime":"3 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8%E6%B5%81%E7%A8%8B\"><span class=\"toc-text\">使用流程</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%A0%87%E8%AF%86%E8%A6%81%E7%83%AD%E6%9B%B4%E6%96%B0%E7%9A%84%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">标识要热更新的类型</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%83%AD%E8%A1%A5%E4%B8%81%E7%9A%84%E9%99%90%E5%88%B6\"><span class=\"toc-text\">热补丁的限制</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%83%AD%E8%A1%A5%E4%B8%81Lua-API\"><span class=\"toc-text\">热补丁Lua API</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BE%8B%E5%AD%90\"><span class=\"toc-text\">例子</span></a></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Linux安装ngx_lua_waf实现waf功能","uid":"5429aa38fc7f679f0141d2dbc38516f6","slug":"zl/2016-01-01-916_Linux安装ngx_lua_waf实现waf功能","date":"2024-04-03T03:47:36.186Z","updated":"2024-04-03T03:47:36.189Z","comments":true,"path":"api/articles/zl/2016-01-01-916_Linux安装ngx_lua_waf实现waf功能.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"一、ngx_lua_waf用途 1、防止SQL注入，本地包含，本地溢出，fuzzing测试，XSS，SSRF等web攻击;2、防止SVN/备份之类文件泄漏;3、防止apachebench之类的压力测试工具的攻击;4、屏蔽常见的扫描黑客工具，扫描器;5、屏蔽常见的网络请求;6、屏蔽...","link":"","photos":[],"count_time":{"symbolsCount":"4k","symbolsTime":"4 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"redis编写lua脚本","uid":"a628b5f8d3069a00eec61e6c67b75d18","slug":"zl/2016-01-01-912_redis编写lua脚本","date":"2024-04-03T03:47:36.184Z","updated":"2024-04-03T03:47:36.184Z","comments":true,"path":"api/articles/zl/2016-01-01-912_redis编写lua脚本.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"由于redis并没有类似mysql或者mongo的乐观锁机制，并发控制成了一个棘手的问题这块是可以用redis的watch来做，但是如果能实现乐观锁，那就非常方便了 redis使用lua的基础语法12345&gt; eval &#34;return {KEYS[1],KEYS[2...","link":"","photos":[],"count_time":{"symbolsCount":"1.6k","symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}