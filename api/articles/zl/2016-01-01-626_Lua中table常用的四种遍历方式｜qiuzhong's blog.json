{"title":"Lua中table常用的四种遍历方式｜qiuzhong's blog","uid":"5f54e1dfbf1c719150010bb064c034cd","slug":"zl/2016-01-01-626_Lua中table常用的四种遍历方式｜qiuzhong's blog","date":"2024-04-03T03:47:35.849Z","updated":"2024-04-03T03:47:35.849Z","comments":true,"path":"api/articles/zl/2016-01-01-626_Lua中table常用的四种遍历方式｜qiuzhong's blog.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<p>第一种遍历方式：<br/></p><figure class=\"highlight plain\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">for key, value in ipairs(table) do</span><br/><span class=\"line\">\t</span><br/><span class=\"line\">end</span><br/></pre></td></tr></tbody></table></figure><p></p>\n<p>注：这种方式的遍历只会从key为1的地方开始，一直以key递增1的顺序来遍历，若找到一个递增不是1的key就结束遍历，无论后面是否仍然是顺序的key。请看下面例子：</p>\n<p>Sample_1:<br/></p><figure class=\"highlight plain\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">local tab1 = </span><br/><span class=\"line\">{</span><br/><span class=\"line\">\t[1] = 1,</span><br/><span class=\"line\">\t[2] = 2,</span><br/><span class=\"line\">\t[3] = 3,</span><br/><span class=\"line\">\t[4] = 4,</span><br/><span class=\"line\">}</span><br/><span class=\"line\"> </span><br/><span class=\"line\">for key, value in ipairs(tab1) do</span><br/><span class=\"line\">\tprint(value)\t--&gt;1 2 3 4</span><br/><span class=\"line\">end</span><br/></pre></td></tr></tbody></table></figure><p></p>\n<p>Sample_2:<br/></p><figure class=\"highlight plain\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">local tab2 = </span><br/><span class=\"line\">{</span><br/><span class=\"line\">\t[1] = 1,</span><br/><span class=\"line\">\t[2] = 2,</span><br/><span class=\"line\">\t[3] = 3,</span><br/><span class=\"line\">\t[5] = 5,</span><br/><span class=\"line\">\t[6] = 6,</span><br/><span class=\"line\">}</span><br/><span class=\"line\">for key, value in ipairs(tab2) do</span><br/><span class=\"line\">\tprint(value)\t--&gt;1 2 3</span><br/><span class=\"line\">end</span><br/></pre></td></tr></tbody></table></figure><p></p>\n<p>Sample_3:<br/></p><figure class=\"highlight plain\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">local tab3 = </span><br/><span class=\"line\">{</span><br/><span class=\"line\">\t[2] = 2,</span><br/><span class=\"line\">\t[3] = 3,</span><br/><span class=\"line\">\t[4] = 4,</span><br/><span class=\"line\">}</span><br/><span class=\"line\"> </span><br/><span class=\"line\">for key, value in ipairs(tab3) do</span><br/><span class=\"line\">\tprint(value)\t--&gt;没有打印</span><br/><span class=\"line\">end</span><br/></pre></td></tr></tbody></table></figure><p></p>\n<p>第二种遍历方式：<br/></p><figure class=\"highlight plain\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">for key, value in pairs(table) do</span><br/><span class=\"line\">\t</span><br/><span class=\"line\">end</span><br/></pre></td></tr></tbody></table></figure><p></p>\n<p>注：这种方式的遍历是根据table中key的hash值排列的顺序来遍历，并非是table中key的排列顺序，并且不关心key是否从1开始和key是否以1递增。请看下面例子：</p>\n<p>Sample_1:<br/></p><figure class=\"highlight plain\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">local tab1 = </span><br/><span class=\"line\">{</span><br/><span class=\"line\">\t[1] = 1,</span><br/><span class=\"line\">\t[2] = 2,</span><br/><span class=\"line\">\t[3] = 3,</span><br/><span class=\"line\">\t[4] = 4,</span><br/><span class=\"line\">}</span><br/><span class=\"line\"> </span><br/><span class=\"line\">for key, value in pairs(tab1) do</span><br/><span class=\"line\">\tprint(value)\t--&gt;1 2 4 3</span><br/><span class=\"line\">end</span><br/></pre></td></tr></tbody></table></figure><p></p>\n<p>Sample_2:<br/></p><figure class=\"highlight plain\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">local tab2 = </span><br/><span class=\"line\">{</span><br/><span class=\"line\">\t[1] = 1,</span><br/><span class=\"line\">\t[2] = 2,</span><br/><span class=\"line\">\t[3] = 3,</span><br/><span class=\"line\">\t[5] = 5,</span><br/><span class=\"line\">\t[6] = 6,</span><br/><span class=\"line\">}</span><br/><span class=\"line\">for key, value in pairs(tab2) do</span><br/><span class=\"line\">\tprint(value)\t--&gt;1 2 3</span><br/><span class=\"line\">end</span><br/></pre></td></tr></tbody></table></figure><p></p>\n<p>Sample_3:<br/></p><figure class=\"highlight plain\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">local tab3 = </span><br/><span class=\"line\">{</span><br/><span class=\"line\">\t[2] = 2,</span><br/><span class=\"line\">\t[3] = 3,</span><br/><span class=\"line\">\t[4] = 4,</span><br/><span class=\"line\">}</span><br/><span class=\"line\"> </span><br/><span class=\"line\">for key, value in pairs(tab3) do</span><br/><span class=\"line\">\tprint(value)\t--&gt;3 2 4</span><br/><span class=\"line\">end</span><br/></pre></td></tr></tbody></table></figure><p></p>\n<p>第三种遍历方式：<br/></p><figure class=\"highlight plain\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">for i=1, #(table) do</span><br/><span class=\"line\">\t</span><br/><span class=\"line\">end</span><br/></pre></td></tr></tbody></table></figure><p></p>\n<p>注：这种方式的遍历关键的地方在于获取table的大小，#(table)只会从key为1的地方开始，一直以key递增1的顺序来遍历，若找到一个递增不是1的key就结束遍历并且返回table的大小，无论后面是否仍然是顺序的key。请看下面例子：</p>\n<p>Sample_1:<br/></p><figure class=\"highlight plain\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">local tab1 = </span><br/><span class=\"line\">{</span><br/><span class=\"line\">\t[1] = 1,</span><br/><span class=\"line\">\t[2] = 2,</span><br/><span class=\"line\">\t[3] = 3,</span><br/><span class=\"line\">\t[4] = 4,</span><br/><span class=\"line\">}</span><br/><span class=\"line\"> </span><br/><span class=\"line\">print(&#34;#table:&#34;..#(tab1))\t\t--&gt;4</span><br/><span class=\"line\">for i = 1, #(tab1) do</span><br/><span class=\"line\">\tprint(tab1[i])\t--&gt;1 2 3 4</span><br/><span class=\"line\">end</span><br/></pre></td></tr></tbody></table></figure><p></p>\n<p>Sample_2:<br/></p><figure class=\"highlight plain\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">local tab2 = </span><br/><span class=\"line\">{</span><br/><span class=\"line\">\t[1] = 1,</span><br/><span class=\"line\">\t[2] = 2,</span><br/><span class=\"line\">\t[3] = 3,</span><br/><span class=\"line\">\t[5] = 5,</span><br/><span class=\"line\">\t[6] = 6,</span><br/><span class=\"line\">}</span><br/><span class=\"line\"> </span><br/><span class=\"line\">print(&#34;#table:&#34;..#(tab2))\t--&gt;3</span><br/><span class=\"line\">for i = 1, #(tab2) do</span><br/><span class=\"line\">\tprint(tab2[i])</span><br/><span class=\"line\">end</span><br/></pre></td></tr></tbody></table></figure><p></p>\n<p>Sample_3:<br/></p><figure class=\"highlight plain\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">local tab3 = </span><br/><span class=\"line\">{</span><br/><span class=\"line\">\t[2] = 2,</span><br/><span class=\"line\">\t[3] = 3,</span><br/><span class=\"line\">\t[4] = 4,</span><br/><span class=\"line\">}</span><br/><span class=\"line\"> </span><br/><span class=\"line\">print(&#34;#table:&#34;..#(tab3))\t--&gt;0</span><br/><span class=\"line\">for i = 1, #(tab3) do</span><br/><span class=\"line\">\tprint(tab3[i])\t--&gt;没有打印</span><br/><span class=\"line\">end</span><br/></pre></td></tr></tbody></table></figure><p></p>\n<p>第四种遍历方式：<br/></p><figure class=\"highlight plain\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">for i=1, table.maxn(table) do</span><br/><span class=\"line\">\t</span><br/><span class=\"line\">end</span><br/></pre></td></tr></tbody></table></figure><p></p>\n<p>注：这种方式的遍历和第三种方式差不多，关键的地方是在table.maxn(table)，table.maxn(table)的意思是获取table中最大值的key。在lua5.2版本table.maxn被移除，请看下面例子：</p>\n<p>Sample_1:<br/></p><figure class=\"highlight plain\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">local tab1 = </span><br/><span class=\"line\">{</span><br/><span class=\"line\">\t[1] = 1,</span><br/><span class=\"line\">\t[2] = 2,</span><br/><span class=\"line\">\t[3] = 3,</span><br/><span class=\"line\">\t[4] = 4,</span><br/><span class=\"line\">}</span><br/><span class=\"line\"> </span><br/><span class=\"line\">print(&#34;table.maxn:&#34;..table.maxn(tab1))\t\t--&gt;4</span><br/><span class=\"line\">for i = 1, table.maxn(tab1) do</span><br/><span class=\"line\">\tprint(tab1[i])\t--&gt;1 2 3 4</span><br/><span class=\"line\">end</span><br/></pre></td></tr></tbody></table></figure><p></p>\n<p>Sample_2:<br/></p><figure class=\"highlight plain\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">local tab2 = </span><br/><span class=\"line\">{</span><br/><span class=\"line\">\t[1] = 1,</span><br/><span class=\"line\">\t[2] = 2,</span><br/><span class=\"line\">\t[3] = 3,</span><br/><span class=\"line\">\t[&#34;a&#34;] = 4,</span><br/><span class=\"line\">\t[5] = 5,</span><br/><span class=\"line\">\t[6] = 6,</span><br/><span class=\"line\">}</span><br/><span class=\"line\"> </span><br/><span class=\"line\">print(&#34;table.maxn:&#34;..table.maxn(tab2))\t--&gt;6</span><br/><span class=\"line\">for i = 1, table.maxn(tab2) do</span><br/><span class=\"line\">\tprint(tab2[i])\t--&gt;1 2 3 nil 5 6</span><br/><span class=\"line\">end</span><br/></pre></td></tr></tbody></table></figure><p></p>\n<p>Sample_3:<br/></p><figure class=\"highlight plain\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">local tab3 = </span><br/><span class=\"line\">{</span><br/><span class=\"line\">\t[2] = 2,</span><br/><span class=\"line\">\t[3] = 3,</span><br/><span class=\"line\">\t[4] = 4,</span><br/><span class=\"line\">}</span><br/><span class=\"line\"> </span><br/><span class=\"line\">print(&#34;table.maxn:&#34;..table.maxn(tab3))\t--&gt;4</span><br/><span class=\"line\">for i = 1, table.maxn(tab2) do</span><br/><span class=\"line\">\tprint(tab3[i])\t--&gt;nil 2 3 4 nil nil</span><br/><span class=\"line\">end</span><br/></pre></td></tr></tbody></table></figure><p></p>\n<pre><code>            &lt;hr/&gt;\n</code></pre>\n","text":"第一种遍历方式：for key, value in ipairs(table) do end 注：这种方式的遍历只会从key为1的地方开始，一直以key递增1的顺序来遍历，若找到一个递增不是1的key就结束遍历，无论后面是否仍然是顺序的key。请看下面例子： Sample_1:l...","link":"","photos":[],"count_time":{"symbolsCount":"2.4k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Programming in Lua(Thrid Edition)笔记","uid":"a502732b8dc58224e972b6c53538b8c4","slug":"zl/2016-01-01-628_Programming in Lua(Thrid Edition)笔记","date":"2024-04-03T03:47:35.852Z","updated":"2024-04-03T03:47:35.853Z","comments":true,"path":"api/articles/zl/2016-01-01-628_Programming in Lua(Thrid Edition)笔记.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"17 Weak Tables and Finalizers第二部分的这后几章都不太好理解，作为第二部分的这最后一章尤其如此，看了至少有三遍才看明白，为了保证之后能看懂，这一章的笔记会加上不少自己的理解。 这章看完PiL第二部分也就学完，前两部分占了全书一半多一点，偏重语法和语言本...","link":"","photos":[],"count_time":{"symbolsCount":"5.3k","symbolsTime":"5 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"浅谈Lua协程 [ 奔跑的蜗牛 ]","uid":"bc6521bfffe786c923335f804481d6ed","slug":"zl/2016-01-01-627_浅谈Lua协程 [ 奔跑的蜗牛 ]","date":"2024-04-03T03:47:35.849Z","updated":"2024-04-03T03:47:35.852Z","comments":true,"path":"api/articles/zl/2016-01-01-627_浅谈Lua协程 [ 奔跑的蜗牛 ].json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":" 撰写于 2018-05-09 &lt;span id=&quot;post-title-updated&quot;&gt;修改于 2018-05-10&lt;/span&gt; &lt;/p&gt; &lt;p&gt;很多脚本语言都有线程的概念，lua也不例外，但是lua的线程...","link":"","photos":[],"count_time":{"symbolsCount":"1.8k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}