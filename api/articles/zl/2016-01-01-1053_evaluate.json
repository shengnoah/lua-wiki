{"title":"evaluate","uid":"64986b79057a2e72b7afccabeab1107b","slug":"zl/2016-01-01-1053_evaluate","date":"2024-04-03T03:47:32.983Z","updated":"2024-04-03T03:47:32.984Z","comments":true,"path":"api/articles/zl/2016-01-01-1053_evaluate.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<p>Evaluate the value of an arithmetic expression in Reverse Polish Notation.<br/>Valid operators are+,-,*,/. Each operand may be an integer or another expression.<br/>Some examples:</p>\n<blockquote>\n<p> [“2”, “1”, “+”, “3”, “<em>“] -&gt; ((2 + 1) </em> 3) -&gt; 9<br/>  [“4”, “13”, “5”, “/“, “+”] -&gt; (4 + (13 / 5)) -&gt; 6</p>\n</blockquote>\n<h2 id=\"java\"><a href=\"#java\" class=\"headerlink\" title=\"java\"></a>java</h2><p>java的stack中，s.pop()不仅会弹出栈顶元素，还会返回栈顶元素。</p>\n<blockquote>\n<p>String转int<br/>Integer.parseInt<br/>Integer.valueof()返回的是Integer的对象。<br/>Integer.valueof().intValue();返回的也是一个int的值。</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/><span class=\"line\">9</span><br/><span class=\"line\">10</span><br/><span class=\"line\">11</span><br/><span class=\"line\">12</span><br/><span class=\"line\">13</span><br/><span class=\"line\">14</span><br/><span class=\"line\">15</span><br/><span class=\"line\">16</span><br/><span class=\"line\">17</span><br/><span class=\"line\">18</span><br/><span class=\"line\">19</span><br/><span class=\"line\">20</span><br/><span class=\"line\">21</span><br/><span class=\"line\">22</span><br/><span class=\"line\">23</span><br/><span class=\"line\">24</span><br/><span class=\"line\">25</span><br/><span class=\"line\">26</span><br/><span class=\"line\">27</span><br/><span class=\"line\">28</span><br/><span class=\"line\">29</span><br/><span class=\"line\">30</span><br/><span class=\"line\">31</span><br/><span class=\"line\">32</span><br/><span class=\"line\">33</span><br/><span class=\"line\">34</span><br/><span class=\"line\">35</span><br/><span class=\"line\">36</span><br/><span class=\"line\">37</span><br/><span class=\"line\">38</span><br/><span class=\"line\">39</span><br/><span class=\"line\">40</span><br/><span class=\"line\">41</span><br/><span class=\"line\">42</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Stack;</span><br/><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span>  </span>{</span><br/><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">evalRPN</span><span class=\"params\">(String[] tokens)</span> </span>{</span><br/><span class=\"line\">      Stack&lt;Integer&gt; s=<span class=\"keyword\">new</span> Stack&lt;Integer&gt;();</span><br/><span class=\"line\">        <span class=\"keyword\">int</span> len=tokens.length;</span><br/><span class=\"line\">        <span class=\"keyword\">if</span>(len==<span class=\"number\">0</span>)</span><br/><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br/><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;len;i++)</span><br/><span class=\"line\">        {</span><br/><span class=\"line\">            <span class=\"keyword\">if</span>(tokens[i].equals(<span class=\"string\">&#34;+&#34;</span>))</span><br/><span class=\"line\">            {</span><br/><span class=\"line\">            \t<span class=\"keyword\">int</span> a=s.pop();</span><br/><span class=\"line\">            \t<span class=\"keyword\">int</span> b=s.pop();</span><br/><span class=\"line\">            \ts.push(a+b);</span><br/><span class=\"line\">            }</span><br/><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(tokens[i].equals(<span class=\"string\">&#34;-&#34;</span>))</span><br/><span class=\"line\">            {</span><br/><span class=\"line\">            \t<span class=\"keyword\">int</span> a=s.pop();</span><br/><span class=\"line\">            \t<span class=\"keyword\">int</span> b=s.pop();</span><br/><span class=\"line\">            \ts.push(b-a);</span><br/><span class=\"line\">            }</span><br/><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(tokens[i].equals(<span class=\"string\">&#34;*&#34;</span>))</span><br/><span class=\"line\">            {</span><br/><span class=\"line\">            \t<span class=\"keyword\">int</span> a=s.pop();</span><br/><span class=\"line\">            \t<span class=\"keyword\">int</span> b=s.pop();</span><br/><span class=\"line\">            \ts.push(a*b);</span><br/><span class=\"line\">            }</span><br/><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(tokens[i].equals(<span class=\"string\">&#34;/&#34;</span>))</span><br/><span class=\"line\">            {</span><br/><span class=\"line\">            \t<span class=\"keyword\">int</span> a=s.pop();</span><br/><span class=\"line\">            \t<span class=\"keyword\">int</span> b=s.pop();</span><br/><span class=\"line\">            \ts.push(b/a);</span><br/><span class=\"line\">            }</span><br/><span class=\"line\">            <span class=\"keyword\">else</span></span><br/><span class=\"line\">            {</span><br/><span class=\"line\">            \t<span class=\"keyword\">int</span> temp=Integer.parseInt(tokens[i]);</span><br/><span class=\"line\">            \ts.push(temp);</span><br/><span class=\"line\">            }</span><br/><span class=\"line\">        }</span><br/><span class=\"line\">        <span class=\"keyword\">return</span> s.peek();</span><br/><span class=\"line\">\t}</span><br/><span class=\"line\">}</span><br/></pre></td></tr></tbody></table></figure>\n<h2 id=\"C\"><a href=\"#C\" class=\"headerlink\" title=\"C++\"></a>C++</h2><figure class=\"highlight c++\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/><span class=\"line\">9</span><br/><span class=\"line\">10</span><br/><span class=\"line\">11</span><br/><span class=\"line\">12</span><br/><span class=\"line\">13</span><br/><span class=\"line\">14</span><br/><span class=\"line\">15</span><br/><span class=\"line\">16</span><br/><span class=\"line\">17</span><br/><span class=\"line\">18</span><br/><span class=\"line\">19</span><br/><span class=\"line\">20</span><br/><span class=\"line\">21</span><br/><span class=\"line\">22</span><br/><span class=\"line\">23</span><br/><span class=\"line\">24</span><br/><span class=\"line\">25</span><br/><span class=\"line\">26</span><br/><span class=\"line\">27</span><br/><span class=\"line\">28</span><br/><span class=\"line\">29</span><br/><span class=\"line\">30</span><br/><span class=\"line\">31</span><br/><span class=\"line\">32</span><br/><span class=\"line\">33</span><br/><span class=\"line\">34</span><br/><span class=\"line\">35</span><br/><span class=\"line\">36</span><br/><span class=\"line\">37</span><br/><span class=\"line\">38</span><br/><span class=\"line\">39</span><br/><span class=\"line\">40</span><br/><span class=\"line\">41</span><br/><span class=\"line\">42</span><br/><span class=\"line\">43</span><br/><span class=\"line\">44</span><br/><span class=\"line\">45</span><br/><span class=\"line\">46</span><br/><span class=\"line\">47</span><br/><span class=\"line\">48</span><br/><span class=\"line\">49</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> Solution {</span><br/><span class=\"line\"><span class=\"keyword\">public</span>:</span><br/><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">evalRPN</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">string</span>&gt;&amp; tokens)</span> </span>{</span><br/><span class=\"line\">                <span class=\"built_in\">stack</span>&lt;<span class=\"keyword\">int</span>&gt; s;</span><br/><span class=\"line\">        <span class=\"keyword\">int</span> len=tokens.size();</span><br/><span class=\"line\">        <span class=\"keyword\">if</span>(len==<span class=\"number\">0</span>)</span><br/><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br/><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;len;i++)</span><br/><span class=\"line\">        {</span><br/><span class=\"line\">            <span class=\"keyword\">if</span>(tokens[i]==<span class=\"string\">&#34;+&#34;</span>)</span><br/><span class=\"line\">            {</span><br/><span class=\"line\">            \t<span class=\"keyword\">int</span> a=s.top();</span><br/><span class=\"line\">                s.pop();</span><br/><span class=\"line\">            \t<span class=\"keyword\">int</span> b=s.top();</span><br/><span class=\"line\">                s.pop();</span><br/><span class=\"line\">            \ts.push(a+b);</span><br/><span class=\"line\">            }</span><br/><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(tokens[i]==<span class=\"string\">&#34;-&#34;</span>)</span><br/><span class=\"line\">            {</span><br/><span class=\"line\">            \t<span class=\"keyword\">int</span> a=s.top();</span><br/><span class=\"line\">                s.pop();</span><br/><span class=\"line\">            \t<span class=\"keyword\">int</span> b=s.top();</span><br/><span class=\"line\">                s.pop();</span><br/><span class=\"line\">            \ts.push(b-a);</span><br/><span class=\"line\">            }</span><br/><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(tokens[i]==<span class=\"string\">&#34;*&#34;</span>)</span><br/><span class=\"line\">            {</span><br/><span class=\"line\">            \t<span class=\"keyword\">int</span> a=s.top();</span><br/><span class=\"line\">                s.pop();</span><br/><span class=\"line\">            \t<span class=\"keyword\">int</span> b=s.top();</span><br/><span class=\"line\">                s.pop();</span><br/><span class=\"line\">            \ts.push(a*b);</span><br/><span class=\"line\">            }</span><br/><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(tokens[i]==<span class=\"string\">&#34;/&#34;</span>)</span><br/><span class=\"line\">            {</span><br/><span class=\"line\">            \t<span class=\"keyword\">int</span> a=s.top();</span><br/><span class=\"line\">                s.pop();</span><br/><span class=\"line\">            \t<span class=\"keyword\">int</span> b=s.top();</span><br/><span class=\"line\">                s.pop();</span><br/><span class=\"line\">            \ts.push(b/a);</span><br/><span class=\"line\">            }</span><br/><span class=\"line\">            <span class=\"keyword\">else</span></span><br/><span class=\"line\">            {</span><br/><span class=\"line\">            \ts.push(stoi(tokens[i]));</span><br/><span class=\"line\">            }</span><br/><span class=\"line\">        }</span><br/><span class=\"line\">        <span class=\"keyword\">return</span> s.top();</span><br/><span class=\"line\">    }</span><br/><span class=\"line\">};</span><br/></pre></td></tr></tbody></table></figure>","text":"Evaluate the value of an arithmetic expression in Reverse Polish Notation.Valid operators are+,-,*,/. Each operand may be an integer or anot...","link":"","photos":[],"count_time":{"symbolsCount":"2.7k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#java\"><span class=\"toc-text\">java</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#C\"><span class=\"toc-text\">C++</span></a></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"do something valuable","uid":"a00f6adf3891e2fa7b835b39b4261963","slug":"zl/2016-01-01-1052_do something valuable","date":"2024-04-03T03:47:32.983Z","updated":"2024-04-03T03:47:32.983Z","comments":true,"path":"api/articles/zl/2016-01-01-1052_do something valuable.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"真诚地重复做不变、简单的事情","link":"","photos":[],"count_time":{"symbolsCount":14,"symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"lua学习笔记：基本语法","uid":"1833203e78e3eab5f402d19caf5b4ba0","slug":"zl/2016-01-01-1051_lua学习笔记：基本语法","date":"2024-04-03T03:47:32.983Z","updated":"2024-04-03T03:47:32.983Z","comments":true,"path":"api/articles/zl/2016-01-01-1051_lua学习笔记：基本语法.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":" JVM学习笔记11：synchronized的实现 编程语言 ","link":"","photos":[],"count_time":{"symbolsCount":185,"symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}