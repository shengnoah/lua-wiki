{"title":"Lua oop","uid":"3d3912f23542b320334cb8de75667ab4","slug":"zl/2016-01-01-668_Lua oop","date":"2024-04-03T03:47:35.892Z","updated":"2024-04-03T03:47:35.892Z","comments":true,"path":"api/articles/zl/2016-01-01-668_Lua oop.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<p><code class=\"highlighter-rouge\">Lua</code> 是一门很简单的语言. 本身语言设计中没有原生的 <code class=\"highlighter-rouge\">oop</code> 设计, 但是我们可以使用 <code class=\"highlighter-rouge\">setmetatable</code> 来做一个伪装的 <code class=\"highlighter-rouge\">class</code>.</p>\n<h2 id=\"setmetatable\">setmetatable</h2>\n<p><code class=\"highlighter-rouge\">setmetatable</code> 类似于 <code class=\"highlighter-rouge\">python</code> 中 <code class=\"highlighter-rouge\">__metaclass__</code>， 是用来设置一个 <code class=\"highlighter-rouge\">table</code> 的元 <code class=\"highlighter-rouge\">table</code>. 如下为 <code class=\"highlighter-rouge\">coolshell</code> 中的一个简单的例子:</p>\n<div class=\"language-lua highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">fraction_a</span> <span class=\"o\">=</span> <span class=\"p\">&#123;</span><span class=\"n\">numerator</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">denominator</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">&#125;</span>\n<span class=\"n\">fraction_b</span> <span class=\"o\">=</span> <span class=\"p\">&#123;</span><span class=\"n\">numerator</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"n\">denominator</span><span class=\"o\">=</span><span class=\"mi\">7</span><span class=\"p\">&#125;</span>\n</code></pre></div></div>\n<p>如上, 我们设置了两个分数, 分别为 <code class=\"highlighter-rouge\">fraction_a</code>, <code class=\"highlighter-rouge\">fraction_b</code>. 我们想要对这两个分数进行相加操作. 直接使用 <code class=\"highlighter-rouge\">+</code> 必然是不行的.</p>\n<p><code class=\"highlighter-rouge\">Lua</code> 给我们提供了 <code class=\"highlighter-rouge\">setmetatable</code>. 如下, 我们来让 <code class=\"highlighter-rouge\">fraction_a</code>, <code class=\"highlighter-rouge\">fraction_b</code> 可以相加.</p>\n<p><strong>1.</strong> 创建一个 <code class=\"highlighter-rouge\">metatable</code></p>\n<div class=\"language-lua highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">funciton_op</span> <span class=\"o\">=</span> <span class=\"p\">&#123;&#125;</span>\n</code></pre></div></div>\n<p><strong>2.</strong> 给 <code class=\"highlighter-rouge\">metatable</code> 的 <code class=\"highlighter-rouge\">__add</code> 方法进行完善, 要求传入两个 <code class=\"highlighter-rouge\">table</code>, 可以对这两个 <code class=\"highlighter-rouge\">table</code> 按照分数相加的算法进行执行。</p>\n<div class=\"language-lua highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>\n<span class=\"n\">function_op</span><span class=\"p\">.</span><span class=\"n\">__add</span> <span class=\"o\">=</span> <span class=\"k\">function</span><span class=\"p\">(</span><span class=\"n\">f1</span><span class=\"p\">,</span> <span class=\"n\">f2</span><span class=\"p\">)</span>\n    <span class=\"n\">ret</span> <span class=\"o\">=</span> <span class=\"p\">&#123;&#125;</span>\n    <span class=\"n\">ret</span><span class=\"p\">.</span><span class=\"n\">numerator</span> <span class=\"o\">=</span> <span class=\"n\">f1</span><span class=\"p\">.</span><span class=\"n\">numerator</span> <span class=\"o\">*</span> <span class=\"n\">f2</span><span class=\"p\">.</span><span class=\"n\">denominator</span> <span class=\"o\">+</span> <span class=\"n\">f2</span><span class=\"p\">.</span><span class=\"n\">numerator</span> <span class=\"o\">*</span> <span class=\"n\">f1</span><span class=\"p\">.</span><span class=\"n\">denominator</span>\n    <span class=\"n\">ret</span><span class=\"p\">.</span><span class=\"n\">denominator</span> <span class=\"o\">=</span> <span class=\"n\">f1</span><span class=\"p\">.</span><span class=\"n\">denominator</span> <span class=\"o\">*</span> <span class=\"n\">f2</span><span class=\"p\">.</span><span class=\"n\">denominator</span>\n    <span class=\"k\">return</span> <span class=\"n\">ret</span>\n<span class=\"k\">end</span>\n</code></pre></div></div>\n<p><strong>3.</strong> 我们使用 <code class=\"highlighter-rouge\">setmetatable</code>, 来设定 <code class=\"highlighter-rouge\">fraction_a</code>, <code class=\"highlighter-rouge\">fraction_b</code>, 的 <strong>metatable</strong> 为 <code class=\"highlighter-rouge\">function_op</code></p>\n<div class=\"language-lua highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>\n<span class=\"nb\">setmetatable</span><span class=\"p\">(</span><span class=\"n\">fraction_a</span><span class=\"p\">,</span> <span class=\"n\">function_op</span><span class=\"p\">)</span>\n<span class=\"nb\">setmetatable</span><span class=\"p\">(</span><span class=\"n\">fraction_b</span><span class=\"p\">,</span> <span class=\"n\">function_op</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>这样, 当我们执行 <code class=\"highlighter-rouge\">fraction_a + fraction_b</code> 时, 会自动调用自己所属的 <code class=\"highlighter-rouge\">metatable</code> 的 <code class=\"highlighter-rouge\">__add</code> 方法, 同时传入自己, <code class=\"highlighter-rouge\">+</code> 后面的操作变量作为第二个参数传入.</p>\n<p>如上, 当我们调用 <code class=\"highlighter-rouge\">fraction_a + fraction_b</code> 时候, 会执行 <code class=\"highlighter-rouge\">funciton_op.__add(fraction_a, fraction_b)</code>;</p>\n<p><strong>注</strong>: <code class=\"highlighter-rouge\">metatable</code> 可以理解为 <code class=\"highlighter-rouge\">javascript</code> 中的 <code class=\"highlighter-rouge\">prototype</code>.</p>\n<p><code class=\"highlighter-rouge\">metatable</code> 还支持非常多的 <code class=\"highlighter-rouge\">metamethod</code>, 如下:</p>\n<table>\n  <thead>\n    <tr>\n      <th>metamethod</th>\n      <th>说明</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>__add(a, b)</td>\n      <td>对应表达式 a + b</td>\n    </tr>\n    <tr>\n      <td>__sub(a, b)</td>\n      <td>对应表达式 a - b</td>\n    </tr>\n    <tr>\n      <td>__mul(a, b)</td>\n      <td>对应表达式 a * b</td>\n    </tr>\n    <tr>\n      <td>__div(a, b)</td>\n      <td>对应表达式 a / b</td>\n    </tr>\n    <tr>\n      <td>__mod(a, b)</td>\n      <td>对应表达式 a % b</td>\n    </tr>\n    <tr>\n      <td>__pow(a, b)</td>\n      <td>对应表达式 a ^ b</td>\n    </tr>\n    <tr>\n      <td>__unm(a)</td>\n      <td>对应表达式 -a</td>\n    </tr>\n    <tr>\n      <td>__concat(a, b)</td>\n      <td>对应表达式 a .. b</td>\n    </tr>\n    <tr>\n      <td>__len(a)</td>\n      <td>对应表达式 #a</td>\n    </tr>\n    <tr>\n      <td>__eq(a, b)</td>\n      <td>对应表达式 a == b</td>\n    </tr>\n    <tr>\n      <td>__lt(a, b)</td>\n      <td>对应表达式 a &lt; b</td>\n    </tr>\n    <tr>\n      <td>__le(a, b)</td>\n      <td>对应表达式 a &lt;= b</td>\n    </tr>\n    <tr>\n      <td>__index(a, b)</td>\n      <td>对应表达式 a.b</td>\n    </tr>\n    <tr>\n      <td>__newindex(a, b, c)</td>\n      <td>对应表达式 a.b = c</td>\n    </tr>\n    <tr>\n      <td>__call(a, …)</td>\n      <td>对应表达式 a(…)</td>\n    </tr>\n  </tbody>\n</table>\n<h2 id=\"如何让-lua-可以-oop\">如何让 Lua 可以 OOP</h2>\n<p>如果我们设定了一个 <code class=\"highlighter-rouge\">table</code>, 给这个 <code class=\"highlighter-rouge\">table</code> 设定了一些方法, 那么别人来调用这个 <code class=\"highlighter-rouge\">table</code>, 同时传入我自己, 是不是就可以 <code class=\"highlighter-rouge\">OOP</code> 了 ?</p>\n<div class=\"language-lua highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">local</span> <span class=\"n\">Class</span> <span class=\"o\">=</span> <span class=\"p\">&#123;&#125;</span>    <span class=\"c1\">--创建了一个名为 Class 的 class</span>\n<p><span class=\"n\">Class</span><span class=\"p\">.</span><span class=\"n\">getName</span> <span class=\"o\">=</span> <span class=\"k\">function</span><span class=\"p\">(</span><span class=\"n\">obj</span><span class=\"p\">)</span>   <span class=\"c1\">–给 Class 设定了一个 getName 的方法</span><br />\n<span class=\"k\">return</span> <span class=\"n\">obj</span><span class=\"p\">.</span><span class=\"n\">name</span><br />\n<span class=\"k\">end</span></p>\n<p><span class=\"n\">Class</span><span class=\"p\">.</span><span class=\"n\">setName</span> <span class=\"o\">=</span> <span class=\"k\">function</span><span class=\"p\">(</span><span class=\"n\">obj</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">)</span>   <span class=\"c1\">–给 Class 设定了一个 setName 的方法, 对传入的对象, 我们可以设置</span><br />\n<span class=\"n\">obj</span><span class=\"p\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">name</span><br />\n<span class=\"k\">end</span></p>\n<p><span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"p\">&#123;&#125;</span>  <span class=\"c1\">–初始化一个 table</span></p>\n<p><span class=\"n\">Class</span><span class=\"p\">.</span><span class=\"n\">setName</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"s1\">'mario'</span><span class=\"p\">)</span> <span class=\"c1\">–调用 Class.setName, 给 c 设定 name</span></p>\n<p><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">Class</span><span class=\"p\">.</span><span class=\"n\">getName</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">))</span>     <span class=\"c1\">–调用 Class.getName, 用来获取 c 的 name</span><br />\n</code></pre></div></div></p>\n<p>上面的代码有这么几个问题:</p>\n<ul>\n  <li>每次我都要使用 <code class=\"highlighter-rouge\">Class</code> 作为前缀, 使用 <code class=\"highlighter-rouge\">Class</code> 的方法来操作 <code class=\"highlighter-rouge\">obj</code>, 有点麻烦</li>\n  <li><code class=\"highlighter-rouge\">Class</code> 的这几个方法, 第一个参数都是 <code class=\"highlighter-rouge\">obj</code>, 有啥办法能省略么 ?</li>\n  <li>我每次都要初始化一个 <code class=\"highlighter-rouge\">table</code>, 再把这个 <code class=\"highlighter-rouge\">table</code> 的 <code class=\"highlighter-rouge\">metatable</code> 设置为这个名为 <code class=\"highlighter-rouge\">Class</code> 的 <code class=\"highlighter-rouge\">table</code> 么? 可以封装一下么?</li>\n</ul>\n<p>如下, 我们一个一个解决:</p>\n<h3 id=\"每次我都要使用-class-作为前缀-使用-class-的方法来操作-obj-有点麻烦\">每次我都要使用 <code class=\"highlighter-rouge\">Class</code> 作为前缀, 使用 <code class=\"highlighter-rouge\">Class</code> 的方法来操作 <code class=\"highlighter-rouge\">obj</code>, 有点麻烦</h3>\n<div class=\"language-lua highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">local</span> <span class=\"n\">Class</span> <span class=\"o\">=</span> <span class=\"p\">&#123;&#125;</span>    <span class=\"c1\">--创建了一个名为 Class 的 class</span>\n<p><span class=\"n\">Class</span><span class=\"p\">.</span><span class=\"n\">getName</span> <span class=\"o\">=</span> <span class=\"k\">function</span><span class=\"p\">(</span><span class=\"n\">obj</span><span class=\"p\">)</span>   <span class=\"c1\">–给 Class 设定了一个 getName 的方法</span><br />\n<span class=\"k\">return</span> <span class=\"n\">obj</span><span class=\"p\">.</span><span class=\"n\">name</span><br />\n<span class=\"k\">end</span></p>\n<p><span class=\"n\">Class</span><span class=\"p\">.</span><span class=\"n\">setName</span> <span class=\"o\">=</span> <span class=\"k\">function</span><span class=\"p\">(</span><span class=\"n\">obj</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">)</span>   <span class=\"c1\">–给 Class 设定了一个 setName 的方法, 对传入的对象, 我们可以设置</span><br />\n<span class=\"n\">obj</span><span class=\"p\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">name</span><br />\n<span class=\"k\">end</span></p>\n<p><span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"p\">&#123;&#125;</span>  <span class=\"c1\">–初始化一个 table</span></p>\n<p><span class=\"nb\">setmetatable</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"p\">&#123;</span><span class=\"n\">__index</span><span class=\"o\">=</span><span class=\"n\">Class</span><span class=\"p\">&#125;)</span></p>\n<p><span class=\"cm\">–[[<br />\n这个命令分为两步:<br />\n第一步, 创建了一个 table, 设定 table 的 __index 为 Class<br />\n第二步, 设定 c 的 metatable 是这个新创建的 table<br />\n这样, 当 c 如果调用不存在的函数, 会尝试去调用 Class 的函数, 同时把 c 当做第一个参数传入进去<br />\n–]]</span></p>\n<p><span class=\"n\">c</span><span class=\"p\">.</span><span class=\"n\">setName</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"s1\">'mario'</span><span class=\"p\">)</span>  <span class=\"c1\">–由于设定了 metatable, 这么调用可行</span></p>\n<p><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">.</span><span class=\"n\">getName</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">))</span>  <span class=\"c1\">– 由于设定了 metatable, 这么调用可行</span><br />\n</code></pre></div></div></p>\n<p>如上, 我们每次调用, 就不需要写 <code class=\"highlighter-rouge\">Class</code> 了, 直接写新生成的 <code class=\"highlighter-rouge\">table</code> 名称即可.</p>\n<h3 id=\"class-的这几个方法-第一个参数都是-obj-有啥办法能省略么-\"><code class=\"highlighter-rouge\">Class</code> 的这几个方法, 第一个参数都是 <code class=\"highlighter-rouge\">obj</code>, 有啥办法能省略么 ?</h3>\n<p>第二个问题呢, <code class=\"highlighter-rouge\">lua</code> 自己提供了一个语法糖，如下:</p>\n<div class=\"language-lua highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>\n<span class=\"kd\">local</span> <span class=\"n\">Class</span> <span class=\"o\">=</span> <span class=\"p\">&#123;&#125;</span>    <span class=\"c1\">--创建了一个名为 Class 的 class</span>\n<p><span class=\"k\">function</span> <span class=\"nf\">Class</span><span class=\"p\">:</span><span class=\"n\">getName</span><span class=\"p\">()</span>  <span class=\"c1\">–给 Class 设定了一个 getName 的方法</span><br />\n<span class=\"k\">return</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">name</span><br />\n<span class=\"k\">end</span></p>\n<p><span class=\"cm\">–[[<br />\n相当于:</p>\n<p>Class.getName(obj)<br />\nreturn <a href=\"http://obj.name\">obj.name</a><br />\nend<br />\n–]]</span></p>\n<p><span class=\"k\">function</span> <span class=\"nf\">Class</span><span class=\"p\">:</span><span class=\"n\">setName</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)</span>  <span class=\"c1\">–给 Class 设定了一个 setName 的方法, 对传入的对象, 我们可以设置</span><br />\n<span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">name</span><br />\n<span class=\"k\">end</span></p>\n<p><span class=\"cm\">–[[<br />\n相当于:</p>\n<p>Class.setName(obj, name)<br />\n<a href=\"http://obj.name\">obj.name</a> = name<br />\nend<br />\n–]]</span></p>\n<p><span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"p\">&#123;&#125;</span>  <span class=\"c1\">–初始化一个 table</span></p>\n<p><span class=\"nb\">setmetatable</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"p\">&#123;</span><span class=\"n\">__index</span><span class=\"o\">=</span><span class=\"n\">Class</span><span class=\"p\">&#125;)</span></p>\n<p><span class=\"cm\">–[[<br />\n这个命令分为两步:<br />\n第一步, 创建了一个 table, 设定 table 的 __index 为 Class<br />\n第二步, 设定 c 的 metatable 是这个新创建的 table<br />\n这样, 当 c 如果调用不存在的函数, 会尝试去调用 Class 的函数, 同时把 c 当做第一个参数传入进去<br />\n–]]</span></p>\n<p><span class=\"n\">c</span><span class=\"p\">:</span><span class=\"n\">setName</span><span class=\"p\">(</span><span class=\"s1\">'mario'</span><span class=\"p\">)</span>  <span class=\"c1\">–由于设定了 metatable, 这么调用可行</span><br />\n<span class=\"cm\">–[[<br />\n相当于调用了 c.setName(c, 'mario')<br />\n–]]</span></p>\n<p><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">:</span><span class=\"n\">getName</span><span class=\"p\">())</span>  <span class=\"c1\">– 由于设定了 metatable, 这么调用可行</span><br />\n<span class=\"cm\">–[[<br />\n相当于 print(c.getName©)<br />\n–]]</span><br />\n</code></pre></div></div></p>\n<p>如上, 我们使用  <code class=\"highlighter-rouge\">function Class:getName()</code> 替代了 <code class=\"highlighter-rouge\">Class.getName = function(obj)</code>. 同时, 给所有的代码中增加了一个隐形的 <code class=\"highlighter-rouge\">self</code> 表示调用当前函数的 <code class=\"highlighter-rouge\">table</code></p>\n<h3 id=\"我每次都要初始化一个-table-再把这个-table-的-metatable-设置为这个名为-class-的-table-么-可以封装一下么\">我每次都要初始化一个 <code class=\"highlighter-rouge\">table</code>, 再把这个 <code class=\"highlighter-rouge\">table</code> 的 <code class=\"highlighter-rouge\">metatable</code> 设置为这个名为 <code class=\"highlighter-rouge\">Class</code> 的 <code class=\"highlighter-rouge\">table</code> 么? 可以封装一下么?</h3>\n<p>我们先写一个函数</p>\n<div class=\"language-lua highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">function</span> <span class=\"nf\">ClassObject</span><span class=\"p\">(</span><span class=\"n\">metaTable</span><span class=\"p\">,</span> <span class=\"n\">obj</span><span class=\"p\">)</span> <span class=\"c1\">--创建函数, 传入一个 obj</span>\n<pre><code>&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;\n    &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&#123;&#125;&lt;/span&gt;\n&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;\n&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;setmetatable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&#123;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;metaTable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&#125;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;--设定这个 obj 的 metatable 的 __index 为 metaTable&lt;/span&gt;\n</code></pre>\n<p><span class=\"k\">end</span><br />\n</code></pre></div></div></p>\n<p>如上, 当我们调用的时候, 返回一个 <code class=\"highlighter-rouge\">metatable</code> 为 <code class=\"highlighter-rouge\">metaTable</code> 的 <code class=\"highlighter-rouge\">table</code>.</p>\n<p>貌似不是太优雅…</p>\n<p>如果我们直接给 <code class=\"highlighter-rouge\">Class</code> 这个 <code class=\"highlighter-rouge\">table</code> 设定一个 <code class=\"highlighter-rouge\">new</code> 函数呢?</p>\n<div class=\"language-lua highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">local</span> <span class=\"n\">Class</span> <span class=\"o\">=</span> <span class=\"p\">&#123;&#125;</span>\n<p><span class=\"n\">Class</span><span class=\"p\">.</span><span class=\"n\">new</span> <span class=\"o\">=</span> <span class=\"k\">function</span><span class=\"p\">(</span><span class=\"n\">metaTable</span><span class=\"p\">,</span> <span class=\"n\">newObj</span><span class=\"p\">)</span> <span class=\"c1\">–当我们传入 metaTable, newObj, 返回了 newObj, 并且 newObj 的 metatable 的 __index 为 <code>metaTable</code></span></p>\n<pre><code>&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newObj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;\n    &lt;span class=&quot;n&quot;&gt;newObj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&#123;&#125;&lt;/span&gt;\n&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;\n\n&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;setmetatable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;newObj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&#123;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;metaTable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&#125;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;--setmetatable 返回第一个参数&lt;/span&gt;\n</code></pre>\n<p><span class=\"k\">end</span></p>\n<p><span class=\"n\">Class</span><span class=\"p\">.</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">Class</span><span class=\"p\">,</span> <span class=\"p\">{})</span> <span class=\"c1\">–创建这个 table</span><br />\n</code></pre></div></div></p>\n<p>当 <code class=\"highlighter-rouge\">metaTable</code> 为 <code class=\"highlighter-rouge\">Class</code> 时 ：</p>\n<div class=\"language-lua highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">local</span> <span class=\"n\">Class</span> <span class=\"o\">=</span> <span class=\"p\">&#123;&#125;</span>\n<p><span class=\"n\">Class</span><span class=\"p\">.</span><span class=\"n\">new</span> <span class=\"o\">=</span> <span class=\"k\">function</span><span class=\"p\">(</span><span class=\"n\">Class</span><span class=\"p\">,</span> <span class=\"n\">newObj</span><span class=\"p\">)</span><br />\n<span class=\"k\">if</span> <span class=\"n\">newObj</span> <span class=\"o\">==</span> <span class=\"kc\">nil</span> <span class=\"k\">then</span><br />\n<span class=\"n\">newObj</span> <span class=\"o\">=</span> <span class=\"p\">&#123;&#125;</span><br />\n<span class=\"k\">end</span><br />\n<span class=\"k\">return</span> <span class=\"nb\">setmetatable</span><span class=\"p\">(</span><span class=\"n\">newObj</span><span class=\"p\">,</span> <span class=\"p\">&#123;</span><span class=\"n\">__index</span><span class=\"o\">=</span><span class=\"n\">Class</span><span class=\"p\">&#125;)</span><br />\n</code></pre></div></div></p>\n<p>这样, 貌似还是不好看. 我们看上面解决问题 2 的时候的语法糖, 继续改写上面的代码</p>\n<div class=\"language-lua highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">local</span> <span class=\"n\">Class</span> <span class=\"o\">=</span> <span class=\"p\">&#123;&#125;</span>\n<p><span class=\"k\">function</span> <span class=\"nf\">Class</span><span class=\"p\">:</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">obj</span><span class=\"p\">)</span></p>\n<pre><code>&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;\n    &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&#123;&#125;&lt;/span&gt;\n&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;\n\n&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;setmetatable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&#123;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&#125;)&lt;/span&gt;\n</code></pre>\n<p><span class=\"k\">end</span></p>\n<p><span class=\"n\">obj1</span> <span class=\"o\">=</span> <span class=\"n\">Class</span><span class=\"p\">:</span><span class=\"n\">new</span><span class=\"p\">()</span>  <span class=\"c1\">–不给 obj 设置默认值</span><br />\n<span class=\"n\">obj2</span> <span class=\"o\">=</span> <span class=\"n\">Class</span><span class=\"p\">:</span><span class=\"n\">new</span><span class=\"p\">({</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'mario'</span><span class=\"p\">})</span> <span class=\"c1\">–给 obj 设置默认值</span><br />\n</code></pre></div></div></p>\n<p>如上, 最后我们总结一下代码</p>\n<div class=\"language-lua highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">local</span> <span class=\"n\">Class</span> <span class=\"o\">=</span> <span class=\"p\">&#123;&#125;</span>\n<p><span class=\"k\">function</span> <span class=\"nf\">Class</span><span class=\"p\">:</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">obj</span><span class=\"p\">)</span><br />\n<span class=\"k\">if</span> <span class=\"n\">obj</span> <span class=\"o\">==</span> <span class=\"kc\">nil</span> <span class=\"k\">then</span><br />\n<span class=\"n\">obj</span> <span class=\"o\">=</span> <span class=\"p\">&#123;&#125;</span><br />\n<span class=\"k\">end</span></p>\n<pre><code>&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;setmetatable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&#123;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&#125;)&lt;/span&gt;\n</code></pre>\n<p><span class=\"k\">end</span></p>\n<p><span class=\"k\">function</span> <span class=\"nf\">Class</span><span class=\"p\">:</span><span class=\"n\">getName</span><span class=\"p\">()</span><br />\n<span class=\"k\">return</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">name</span><br />\n<span class=\"k\">end</span></p>\n<p><span class=\"k\">function</span> <span class=\"nf\">Class</span><span class=\"p\">:</span><span class=\"n\">setName</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)</span><br />\n<span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">name</span><br />\n<span class=\"k\">end</span></p>\n<p><span class=\"c1\">–如下为调用方法</span></p>\n<p><span class=\"n\">obj</span> <span class=\"o\">=</span> <span class=\"n\">Class</span><span class=\"p\">:</span><span class=\"n\">new</span><span class=\"p\">()</span></p>\n<p><span class=\"n\">obj</span><span class=\"p\">:</span><span class=\"n\">setName</span><span class=\"p\">(</span><span class=\"s1\">'obj'</span><span class=\"p\">)</span> <span class=\"c1\">–设定 name</span></p>\n<p><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">obj</span><span class=\"p\">:</span><span class=\"n\">getName</span><span class=\"p\">())</span> <span class=\"c1\">–返回上面设置的 obj</span><br />\n</code></pre></div></div></p>\n<p>最后的最后, 当我们要创建一个类, 可以直接:</p>\n<div class=\"language-lua highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">local</span> <span class=\"n\">className</span> <span class=\"o\">=</span> <span class=\"p\">&#123;&#125;</span>\n<p><span class=\"k\">function</span> <span class=\"nf\">className</span><span class=\"p\">:</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">obj</span><span class=\"p\">)</span><br />\n<span class=\"c1\">–返回一个 metatable 为 &#123;__index=self&#125; 的 table</span><br />\n<span class=\"k\">end</span></p>\n<p><span class=\"k\">function</span> <span class=\"nf\">className</span><span class=\"p\">:</span><span class=\"n\">method1</span><span class=\"p\">()</span><br />\n<span class=\"k\">end</span></p>\n<p><span class=\"k\">function</span> <span class=\"nf\">className</span><span class=\"p\">:</span><span class=\"n\">method2</span><span class=\"p\">()</span><br />\n<span class=\"k\">end</span></p>\n<p><span class=\"c1\">– 等等等</span></p>\n<p><span class=\"c1\">– 实例化</span></p>\n<p><span class=\"n\">obj</span> <span class=\"o\">=</span> <span class=\"n\">className</span><span class=\"p\">:</span><span class=\"n\">new</span><span class=\"p\">()</span></p>\n<p><span class=\"c1\">– 调用方法:</span></p>\n<p><span class=\"n\">obj</span><span class=\"p\">:</span><span class=\"n\">method1</span><span class=\"p\">()</span><br />\n<span class=\"n\">obj</span><span class=\"p\">:</span><span class=\"n\">method2</span><span class=\"p\">()</span><br />\n</code></pre></div></div></p>\n","text":"Lua 是一门很简单的语言. 本身语言设计中没有原生的 oop 设计, 但是我们可以使用 setmetatable 来做一个伪装的 class. setmetatable setmetatable 类似于 python 中 __metaclass__， 是用来设置一个 table...","link":"","photos":[],"count_time":{"symbolsCount":"9.1k","symbolsTime":"8 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#setmetatable\"><span class=\"toc-text\">setmetatable</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%A6%82%E4%BD%95%E8%AE%A9-lua-%E5%8F%AF%E4%BB%A5-oop\"><span class=\"toc-text\">如何让 Lua 可以 OOP</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%AF%8F%E6%AC%A1%E6%88%91%E9%83%BD%E8%A6%81%E4%BD%BF%E7%94%A8-class-%E4%BD%9C%E4%B8%BA%E5%89%8D%E7%BC%80-%E4%BD%BF%E7%94%A8-class-%E7%9A%84%E6%96%B9%E6%B3%95%E6%9D%A5%E6%93%8D%E4%BD%9C-obj-%E6%9C%89%E7%82%B9%E9%BA%BB%E7%83%A6\"><span class=\"toc-text\">每次我都要使用 Class 作为前缀, 使用 Class 的方法来操作 obj, 有点麻烦</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#class-%E7%9A%84%E8%BF%99%E5%87%A0%E4%B8%AA%E6%96%B9%E6%B3%95-%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%8F%82%E6%95%B0%E9%83%BD%E6%98%AF-obj-%E6%9C%89%E5%95%A5%E5%8A%9E%E6%B3%95%E8%83%BD%E7%9C%81%E7%95%A5%E4%B9%88-\"><span class=\"toc-text\">Class 的这几个方法, 第一个参数都是 obj, 有啥办法能省略么 ?</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%88%91%E6%AF%8F%E6%AC%A1%E9%83%BD%E8%A6%81%E5%88%9D%E5%A7%8B%E5%8C%96%E4%B8%80%E4%B8%AA-table-%E5%86%8D%E6%8A%8A%E8%BF%99%E4%B8%AA-table-%E7%9A%84-metatable-%E8%AE%BE%E7%BD%AE%E4%B8%BA%E8%BF%99%E4%B8%AA%E5%90%8D%E4%B8%BA-class-%E7%9A%84-table-%E4%B9%88-%E5%8F%AF%E4%BB%A5%E5%B0%81%E8%A3%85%E4%B8%80%E4%B8%8B%E4%B9%88\"><span class=\"toc-text\">我每次都要初始化一个 table, 再把这个 table 的 metatable 设置为这个名为 Class 的 table 么? 可以封装一下么?</span></a></li></ol></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Lua table 学习笔记","uid":"3c308f04254437109c4c8f5fc6f1f496","slug":"zl/2016-01-01-66_Lua table 学习笔记","date":"2024-04-03T03:47:35.893Z","updated":"2024-04-03T03:47:35.897Z","comments":true,"path":"api/articles/zl/2016-01-01-66_Lua table 学习笔记.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"Lua table定义 table类型实现了“关联数组”。“关联数组” 是一种具有特殊索引方式的数组，索引可为字符串string或(整)数number类型. local corp = &#123; web = &#34;www.google.com&#34;, --索引为字符串，...","link":"","photos":[],"count_time":{"symbolsCount":"4.8k","symbolsTime":"4 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"最近关于Lua的学习篇总结（三）","uid":"d7b45f606117ca5a1be9c664ce73539a","slug":"zl/2016-01-01-667_最近关于Lua的学习篇总结（三）","date":"2024-04-03T03:47:35.892Z","updated":"2024-04-03T03:47:35.892Z","comments":true,"path":"api/articles/zl/2016-01-01-667_最近关于Lua的学习篇总结（三）.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":" Contents &lt;/div&gt; &lt;h2 id=&quot;lua和-Net的相互调用&quot;&gt;&lt;a href=&quot;#lua和-Net的相互调用&quot; class=&quot;headerlink&quot; title=&quot...","link":"","photos":[],"count_time":{"symbolsCount":"2.6k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}