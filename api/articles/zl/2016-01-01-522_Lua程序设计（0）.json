{"title":"Lua程序设计（0）","uid":"41764cff92c84a96a528bcb8bddcc07c","slug":"zl/2016-01-01-522_Lua程序设计（0）","date":"2024-04-03T03:47:35.796Z","updated":"2024-04-03T03:47:35.796Z","comments":true,"path":"api/articles/zl/2016-01-01-522_Lua程序设计（0）.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<p>Lua程序设计的第一篇，主要内容是基本语法以及运算符。</p>\n<h3 id=\"交互模式：\"><a href=\"#交互模式：\" class=\"headerlink\" title=\"交互模式：\"></a>交互模式：</h3><p>在交互模式下，Lua语言解释器如果发现我们输入的某一行不完整，会等待知道程序块或表达式被输入完整后再进行解释执行。</p>\n<ul>\n<li><p>我们可以使用-i参数让Lua语言解释器在执行完制定的程序段之后进入交互模式。</p>\n<p><code>% lua -i prog</code></p>\n<p>在执行完文件prog中的程序段之后进入交互模式。</p>\n</li>\n<li><p>另一种运行程序段的方式：dofile</p>\n<p>我们可以同时打开两个窗口，一个窗口中使用文件编辑器编辑的代码，另一个窗口中使用交互模式运行lua语言解释器，当修改完代码并保存时，只要在Lua语言交互模式的提示符下执行dofile就可以加载新代码，然后就可以观察新代码的函数调用与执行结果了。</p>\n</li>\n</ul>\n<h3 id=\"词法规范：\"><a href=\"#词法规范：\" class=\"headerlink\" title=\"词法规范：\"></a>词法规范：</h3><ul>\n<li>标识符是由<strong>任意字母，数字和下划线</strong>组成的字符串</li>\n<li>下划线+大写字母的标识符通常用作特殊用途</li>\n<li>可以将下划线+小写字母用作“哑变量”</li>\n<li><strong>Lua 语言对大小写敏感</strong></li>\n<li>单行注释：两个连续的连字符（- -）；多行注释：两个连续的连字符加两对连续左方括号表示长注释或多行注释的开始，直到两个连续的右括号为止，需要重新启用代码时，在第一行行首添加一个连字符即可。</li>\n<li>可以用分号对语句进行分隔，但一般不使用</li>\n</ul>\n<h3 id=\"全局变量：\"><a href=\"#全局变量：\" class=\"headerlink\" title=\"全局变量：\"></a>全局变量：</h3><ul>\n<li><strong>全局变量无需声明便可使用，若使用未经初始化的全局变量，其结果为nil</strong></li>\n<li><strong>当把nil赋值给全局变量时，Lua会回收该全局变量</strong></li>\n<li><strong>Lua不区分未初始化变量和被赋值为nil的变量，当赋值语句执行后，Lua语言会最终回收该变量占用的内存</strong></li>\n</ul>\n<h3 id=\"类型和值：\"><a href=\"#类型和值：\" class=\"headerlink\" title=\"类型和值：\"></a>类型和值：</h3><ul>\n<li><p>Lua语言是一种动态类型语言，在这种语言中， <strong>没有类型定义，每个值都有其自身的类型信息。</strong></p>\n</li>\n<li><p>Lua中有八种基本类型：</p>\n<ul>\n<li>nil</li>\n<li>boolean</li>\n<li>number</li>\n<li>string</li>\n<li>userdata</li>\n<li>function</li>\n<li>thread</li>\n<li>table</li>\n</ul>\n</li>\n<li><p>使用函数type可获取一个值的对应类型名称，以字符串形式表示。</p>\n</li>\n<li>变量没有预定义的类型，任何变量都可以包含任何类型的值。</li>\n</ul>\n<h4 id=\"nil：\"><a href=\"#nil：\" class=\"headerlink\" title=\"nil：\"></a>nil：</h4><p>只有一个nil值的类型，用于与其他所有值进行区分，来表示无效值。</p>\n<h4 id=\"boolean：\"><a href=\"#boolean：\" class=\"headerlink\" title=\"boolean：\"></a>boolean：</h4><p>拥有true与false两个值。</p>\n<ul>\n<li><p><strong>条件测试将除false与nil外的所有值视为真。</strong></p>\n</li>\n<li><p>逻辑运算符：and、or和not</p>\n<ul>\n<li>and：如果它的第一个操作数为false，则返回第一个操作数，否则返回第二个操作数</li>\n<li>or：如果第一个操作数不为false，则返回第一个操作数，否则返回第二个操作数</li>\n<li>not：永远返回Boolean类型的值</li>\n</ul>\n</li>\n<li><p>两种便捷写法：</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">x=x <span class=\"keyword\">or</span> v </span><br/><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">not</span> x <span class=\"keyword\">then</span> x = v <span class=\"keyword\">end</span> <span class=\"comment\">-- 当x未被初始化时，将其默认值设置为v</span></span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"comment\">--</span></span><br/><span class=\"line\"></span><br/><span class=\"line\">((a <span class=\"keyword\">and</span> b)<span class=\"keyword\">or</span> c) <span class=\"comment\">-- 当b不为false时，等价于三目运算符：a?b:c</span></span><br/></pre></td></tr></tbody></table></figure>\n</li>\n</ul>\n<h3 id=\"数值\"><a href=\"#数值\" class=\"headerlink\" title=\"数值\"></a>数值</h3><p>从Lua5.3版本开始，Lua为数值类型提供了两种选择：</p>\n<ul>\n<li>integer：64位整型</li>\n<li>float：双精度浮点类型</li>\n</ul>\n<h4 id=\"数值常量：\"><a href=\"#数值常量：\" class=\"headerlink\" title=\"数值常量：\"></a>数值常量：</h4><ul>\n<li>可以使用科学计数法来表示数值常量</li>\n<li>具有十进制小数或者指数的值的数值会被当作浮点型，其余的为整型</li>\n<li>整型与浮点型的值的类型都为number，相同算术值的不同整型值与浮点型值是相等的</li>\n<li>可使用math.type函数具体区分整型值与浮点型值</li>\n<li>可用0x开头表示十六进制常量，也支持十六进制的浮点数，由小数部分和以p或P开头的指数部分组成，其转换规则大抵如下：<ul>\n<li>十六进制：0xa.bp2，将其拆解为二进制为1010.1011*10^2，即为101010.11，十进制下为42.75</li>\n</ul>\n</li>\n<li>可以使用%a参数与string.format函数对上述格式进行格式化输出：<ul>\n<li>string.format(“%a”,419)        –&gt; 0x1.a3p+8</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"算术运算：\"><a href=\"#算术运算：\" class=\"headerlink\" title=\"算术运算：\"></a>算术运算：</h4><ul>\n<li><p>支持加、减、乘、除、floor（//）、取模（%）、指数运算（^）</p>\n</li>\n<li><p>除法运算操作的永远是浮点数且产生浮点数的结果</p>\n</li>\n<li>floor除法：对得到的商向负无穷取整，以确保结果是一个整数</li>\n<li>幂运算的操作数也永远是浮点类型</li>\n</ul>\n<h4 id=\"关系运算：\"><a href=\"#关系运算：\" class=\"headerlink\" title=\"关系运算：\"></a>关系运算：</h4><ul>\n<li>支持小于、大于、小于等于、大于等于、等于（==）、不等于（～=）</li>\n</ul>\n<h4 id=\"数学库：\"><a href=\"#数学库：\" class=\"headerlink\" title=\"数学库：\"></a>数学库：</h4><h5 id=\"随机数发生器：\"><a href=\"#随机数发生器：\" class=\"headerlink\" title=\"随机数发生器：\"></a>随机数发生器：</h5><p>math.random用于生成伪随机数，当不带参数调用时，该函数返回一个在[0，1）范围内均匀分布的伪随机实数；当使用整型n作为参数时，返回一个在[1，n]范围内的伪随机整数，使用两个整型值l和u时，返回[l，u]范围内的伪随机整数。</p>\n<p>可以用函数randomseed来设置伪随机数发生器的种子，以使加强其随机性。</p>\n<h5 id=\"取整函数：\"><a href=\"#取整函数：\" class=\"headerlink\" title=\"取整函数：\"></a>取整函数：</h5><ul>\n<li>floor函数：向负无穷取整</li>\n<li>ceil函数：向正无穷取整</li>\n<li>modf函数：向零取整，返回取整后的值以及小数部分作为第二个结果。</li>\n</ul>\n<h4 id=\"表示范围：\"><a href=\"#表示范围：\" class=\"headerlink\" title=\"表示范围：\"></a>表示范围：</h4><p>标准Lua使用64个比特位来存储整型值，其最大值为2^63 - 1；精简Lua使用32个比特位存储整型值。</p>\n<p>当对整形操作时出现比mininteger更小或者maxinteger更大的数值时，结果就会回环。在计算机领域，回环的意思就是丢弃最高进位。</p>\n<p>对于浮点数而言，标准Lua使用双精度。</p>\n<h4 id=\"运算符优先级：\"><a href=\"#运算符优先级：\" class=\"headerlink\" title=\"运算符优先级：\"></a>运算符优先级：</h4><p>详见：<a href=\"https://www.runoob.com/lua/lua-miscellaneous-operator.html\" target=\"_blank\" rel=\"noopener noreferrer\">https://www.runoob.com/lua/lua-miscellaneous-operator.html</a></p>","text":"Lua程序设计的第一篇，主要内容是基本语法以及运算符。 交互模式：在交互模式下，Lua语言解释器如果发现我们输入的某一行不完整，会等待知道程序块或表达式被输入完整后再进行解释执行。 我们可以使用-i参数让Lua语言解释器在执行完制定的程序段之后进入交互模式。 % lua -i p...","link":"","photos":[],"count_time":{"symbolsCount":"2.1k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BA%A4%E4%BA%92%E6%A8%A1%E5%BC%8F%EF%BC%9A\"><span class=\"toc-text\">交互模式：</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%AF%8D%E6%B3%95%E8%A7%84%E8%8C%83%EF%BC%9A\"><span class=\"toc-text\">词法规范：</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F%EF%BC%9A\"><span class=\"toc-text\">全局变量：</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%B1%BB%E5%9E%8B%E5%92%8C%E5%80%BC%EF%BC%9A\"><span class=\"toc-text\">类型和值：</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#nil%EF%BC%9A\"><span class=\"toc-text\">nil：</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#boolean%EF%BC%9A\"><span class=\"toc-text\">boolean：</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%95%B0%E5%80%BC\"><span class=\"toc-text\">数值</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%95%B0%E5%80%BC%E5%B8%B8%E9%87%8F%EF%BC%9A\"><span class=\"toc-text\">数值常量：</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%AE%97%E6%9C%AF%E8%BF%90%E7%AE%97%EF%BC%9A\"><span class=\"toc-text\">算术运算：</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%85%B3%E7%B3%BB%E8%BF%90%E7%AE%97%EF%BC%9A\"><span class=\"toc-text\">关系运算：</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%95%B0%E5%AD%A6%E5%BA%93%EF%BC%9A\"><span class=\"toc-text\">数学库：</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E9%9A%8F%E6%9C%BA%E6%95%B0%E5%8F%91%E7%94%9F%E5%99%A8%EF%BC%9A\"><span class=\"toc-text\">随机数发生器：</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%8F%96%E6%95%B4%E5%87%BD%E6%95%B0%EF%BC%9A\"><span class=\"toc-text\">取整函数：</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%A1%A8%E7%A4%BA%E8%8C%83%E5%9B%B4%EF%BC%9A\"><span class=\"toc-text\">表示范围：</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%BF%90%E7%AE%97%E7%AC%A6%E4%BC%98%E5%85%88%E7%BA%A7%EF%BC%9A\"><span class=\"toc-text\">运算符优先级：</span></a></li></ol></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Lua","uid":"15b0cdc6d03f6c3f6bf8d3a7ff197317","slug":"zl/2016-01-01-521_Lua","date":"2024-04-03T03:47:35.796Z","updated":"2024-04-03T03:47:35.796Z","comments":true,"path":"api/articles/zl/2016-01-01-521_Lua.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"Lua 字符串操作 函数 功能 string.upper(argument) 字符串全部转为大写字母 string.lower(argument) 字符串全部转为小写字母 string.gsub(mainString,findString,replaceString,num) 字...","link":"","photos":[],"count_time":{"symbolsCount":"1.3k","symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"lua支持init64","uid":"9485aec3aa9494e98d0fdf9b67a599c4","slug":"zl/2016-01-01-523_lua支持init64","date":"2024-04-03T03:47:35.796Z","updated":"2024-04-03T03:47:35.797Z","comments":true,"path":"api/articles/zl/2016-01-01-523_lua支持init64.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"lua5.3提供了很多很好的特性例如string.pack unpack这样的好东西，同时还支持ini64.在lua之前的版本中number只有一种类型double.对于init64基本按照int来处理. 对于64位的解决方案有很多种,基本的思路都是使用8byte的string或...","link":"","photos":[],"count_time":{"symbolsCount":"6.6k","symbolsTime":"6 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}