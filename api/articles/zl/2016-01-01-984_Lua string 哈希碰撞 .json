{"title":"Lua string 哈希碰撞","uid":"238efc63608af17eea7a4ab65a98f6e7","slug":"zl/2016-01-01-984_Lua string 哈希碰撞 ","date":"2024-04-03T03:47:36.238Z","updated":"2024-04-03T03:47:36.238Z","comments":true,"path":"api/articles/zl/2016-01-01-984_Lua string 哈希碰撞 .json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<p>Lua 中 40 字节以下的字符串会被内部化到一张表中(Lua 5.3)，这张表挂在 global state 结构下。对于短字符串，相同的串在同一虚拟机上只会存在一份，这被称为字符串的内部化。</p>\n<blockquote>\n  <p>其实字符串在 Lua VM 中是以两种内部形式保存的：短字符串及长字符串。其界限默认设置为40（字节）</p>\n</blockquote>\n<p>对于比较长的字符串（32字节以上），为了加快哈希过程，计算字符串哈希值是跳跃进行的（并没有 hash 全部的位）。</p>\n<p><a href=\"http://lua-users.org/wiki/HashDos\">Lua Wiki</a> 上列出了各个版本的 Lua 对于 <code class=\"language-plaintext highlighter-rouge\">string</code> 没有计算 hash 的长度：</p>\n<div class=\"language-lua highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">Hash</span> <span class=\"n\">algorithm</span> <span class=\"n\">analysis</span>\n<span class=\"c1\">-- number of bytes not used in hash function</span>\n<span class=\"o\">==============================================================</span>\n<span class=\"n\">String</span> <span class=\"n\">length</span>                  <span class=\"o\">&lt;</span> <span class=\"mi\">15</span><span class=\"p\">,</span>  <span class=\"mi\">15</span><span class=\"o\">-</span><span class=\"mi\">20</span> <span class=\"p\">,</span>  <span class=\"mi\">20</span><span class=\"o\">-</span><span class=\"mi\">32</span> <span class=\"p\">,</span> <span class=\"mi\">32</span><span class=\"o\">-</span><span class=\"mi\">64</span>\n<span class=\"c1\">--------------------------------------------------------------</span>\n<span class=\"n\">Lua</span> <span class=\"mi\">5</span><span class=\"p\">.</span><span class=\"mi\">1</span>                        <span class=\"mi\">0</span>   <span class=\"p\">,</span>    <span class=\"mi\">0</span>   <span class=\"p\">,</span>    <span class=\"mi\">0</span>   <span class=\"p\">,</span> <span class=\"n\">len</span><span class=\"o\">/</span><span class=\"mi\">2</span>\n<span class=\"n\">Lua</span> <span class=\"mi\">5</span><span class=\"p\">.</span><span class=\"mi\">2</span><span class=\"p\">.</span><span class=\"mi\">0</span>                      <span class=\"mi\">0</span>   <span class=\"p\">,</span>    <span class=\"mi\">0</span>   <span class=\"p\">,</span>    <span class=\"mi\">0</span>   <span class=\"p\">,</span> <span class=\"n\">len</span><span class=\"o\">/</span><span class=\"mi\">2</span>\n<span class=\"n\">LuaJit</span> <span class=\"mi\">2</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"o\">-</span><span class=\"n\">beta9</span>             <span class=\"mi\">0</span><span class=\"o\">-</span><span class=\"mi\">1</span> <span class=\"p\">,</span>   <span class=\"mi\">2</span><span class=\"o\">-</span><span class=\"mi\">4</span>  <span class=\"p\">,</span> <span class=\"n\">len</span><span class=\"o\">-</span><span class=\"mi\">16</span> <span class=\"p\">,</span> <span class=\"n\">len</span><span class=\"o\">-</span><span class=\"mi\">16</span>\n</code></pre></div></div>\n<p>可以看到对于 Lua 5.1 来说，当字符串大于 32 字节时，有一半的长度被忽略掉了。这样就很容易来构造一个 hash 碰撞。比如下面 3 个字符串，就拥有相同的 hash：</p>\n<div class=\"language-lua highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"s2\">&#34;0000000000000000000000000000000000&#34;</span>\n<span class=\"s2\">&#34;f0l0l0w0m0e0n0t0w0i0t0t0e0r0?0:0)0&#34;</span>\n<span class=\"s2\">&#34;x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0&#34;</span>\n</code></pre></div></div>\n<blockquote>\n  <p>在 Python 中可以通过 <code class=\"language-plaintext highlighter-rouge\">hash(str)</code> 来查看字符串的 hash；Ruby 可以这样 <code class=\"language-plaintext highlighter-rouge\">str.hash</code>。遗憾的是，Lua 并没有提供这样的能力，so sad.</p>\n</blockquote>\n<p>另外，<a href=\"https://gist.github.com/funny-falcon/685dbfaea16b5919e6c84ab1b156d2f6https://gist.github.com/funny-falcon/685dbfaea16b5919e6c84ab1b156d2f6\">@Sokolov Yura</a> 也给出了一个用例：</p>\n<div class=\"language-lua highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">-- for i in &#123;1..6&#125;; do time lua test_str_hash_collision.lua $i; done</span>\n<p><span class=\"kd\">local</span> <span class=\"n\">lng</span> <span class=\"o\">=</span> <span class=\"nb\">string.rep</span><span class=\"p\">(</span><span class=\"s1\">'a'</span><span class=\"p\">,</span><span class=\"mi\">128</span><span class=\"p\">)</span><br />\n<span class=\"kd\">local</span> <span class=\"n\">N</span> <span class=\"o\">=</span> <span class=\"o\">…</span><br />\n<span class=\"n\">N</span> <span class=\"o\">=</span> <span class=\"n\">N</span> <span class=\"ow\">and</span> <span class=\"nb\">tonumber</span><span class=\"p\">(</span><span class=\"n\">N</span><span class=\"p\">)</span> <span class=\"ow\">or</span> <span class=\"mi\">1</span><br />\n<span class=\"kd\">local</span> <span class=\"n\">J</span></p>\n<p><span class=\"kd\">local</span> <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"p\">&#123;&#125;</span><br />\n<span class=\"k\">if</span> <span class=\"n\">N</span> <span class=\"o\"><mark></span> <span class=\"mi\">1</span> <span class=\"k\">then</span><br />\n<span class=\"n\">J</span> <span class=\"o\">=</span> <span class=\"mi\">1000000</span><br />\n<span class=\"k\">for</span> <span class=\"n\">j</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"n\">J</span> <span class=\"k\">do</span><br />\n<span class=\"n\">a</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"o\">%</span><span class=\"mi\">8192</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nb\">string.format</span><span class=\"p\">(</span><span class=\"s2\">&quot;%08x&quot;</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"p\">)</span><br />\n<span class=\"k\">end</span><br />\n<span class=\"k\">elseif</span> <span class=\"n\">N</span> <span class=\"o\"></mark></span> <span class=\"mi\">2</span> <span class=\"k\">then</span><br />\n<span class=\"n\">J</span> <span class=\"o\">=</span> <span class=\"mi\">500000</span><br />\n<span class=\"k\">for</span> <span class=\"n\">j</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"n\">J</span> <span class=\"k\">do</span><br />\n<span class=\"n\">a</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"o\">%</span><span class=\"mi\">8192</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nb\">string.format</span><span class=\"p\">(</span><span class=\"s2\">&quot;%s%08x&quot;</span><span class=\"p\">,</span> <span class=\"n\">lng</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"p\">)</span><br />\n<span class=\"k\">end</span><br />\n<span class=\"k\">elseif</span> <span class=\"n\">N</span> <span class=\"o\"><mark></span> <span class=\"mi\">3</span> <span class=\"k\">then</span><br />\n<span class=\"n\">J</span> <span class=\"o\">=</span> <span class=\"mi\">100000</span><br />\n<span class=\"k\">for</span> <span class=\"n\">j</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"n\">J</span> <span class=\"k\">do</span><br />\n<span class=\"n\">a</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"o\">%</span><span class=\"mi\">8192</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nb\">string.format</span><span class=\"p\">(</span><span class=\"s2\">&quot;%s%08x%s&quot;</span><span class=\"p\">,</span> <span class=\"n\">lng</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"p\">,</span> <span class=\"n\">lng</span><span class=\"p\">)</span><br />\n<span class=\"k\">end</span><br />\n<span class=\"k\">elseif</span> <span class=\"n\">N</span> <span class=\"o\"></mark></span> <span class=\"mi\">4</span> <span class=\"k\">then</span><br />\n<span class=\"n\">J</span> <span class=\"o\">=</span> <span class=\"mi\">10000</span><br />\n<span class=\"k\">for</span> <span class=\"n\">j</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"n\">J</span> <span class=\"k\">do</span><br />\n<span class=\"n\">a</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"o\">%</span><span class=\"mi\">8192</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nb\">string.format</span><span class=\"p\">(</span><span class=\"s2\">&quot;%s%08x%s%s&quot;</span><span class=\"p\">,</span> <span class=\"n\">lng</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"p\">,</span> <span class=\"n\">lng</span><span class=\"p\">,</span> <span class=\"n\">lng</span><span class=\"p\">)</span><br />\n<span class=\"k\">end</span><br />\n<span class=\"k\">elseif</span> <span class=\"n\">N</span> <span class=\"o\"><mark></span> <span class=\"mi\">5</span> <span class=\"k\">then</span><br />\n<span class=\"n\">J</span> <span class=\"o\">=</span> <span class=\"mi\">10000</span><br />\n<span class=\"k\">for</span> <span class=\"n\">j</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"n\">J</span> <span class=\"k\">do</span><br />\n<span class=\"n\">a</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"o\">%</span><span class=\"mi\">8192</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nb\">string.format</span><span class=\"p\">(</span><span class=\"s2\">&quot;%s%s%08x%s&quot;</span><span class=\"p\">,</span> <span class=\"n\">lng</span><span class=\"p\">,</span> <span class=\"n\">lng</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"p\">,</span> <span class=\"n\">lng</span><span class=\"p\">)</span><br />\n<span class=\"k\">end</span><br />\n<span class=\"k\">elseif</span> <span class=\"n\">N</span> <span class=\"o\"></mark></span> <span class=\"mi\">6</span> <span class=\"k\">then</span><br />\n<span class=\"n\">J</span> <span class=\"o\">=</span> <span class=\"mi\">300000</span><br />\n<span class=\"k\">for</span> <span class=\"n\">j</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"n\">J</span> <span class=\"k\">do</span><br />\n<span class=\"n\">a</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"o\">%</span><span class=\"mi\">8192</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nb\">string.format</span><span class=\"p\">(</span><span class=\"s2\">&quot;%s%s%s%08x&quot;</span><span class=\"p\">,</span> <span class=\"n\">lng</span><span class=\"p\">,</span> <span class=\"n\">lng</span><span class=\"p\">,</span> <span class=\"n\">lng</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"p\">)</span><br />\n<span class=\"k\">end</span><br />\n<span class=\"k\">end</span></p>\n<p><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"n\">J</span><span class=\"p\">,</span> <span class=\"o\">#</span><span class=\"n\">a</span><span class=\"p\">)</span><br />\n</code></pre></div></div></p>\n<p>为了防止 Hash DoS 攻击的发生，Lua 5.3 开始，一方面将长字符串独立出来，大文本的输入字符串将不再通过哈希内部化进入全局字符串表中；<u>另一方面使用一个随机种子用于字符串哈希值的计算，使得攻击者无法轻易构造出拥有相同哈希值的不同字符串</u>。</p>\n<p>而对于 Lua 5.1，Wiki 给出了一个 <a href=\"http://lua-users.org/files/wiki_insecure/power_patches/5.1/lua_5.1_second_hash_fix.patch\">Second Hash 补丁</a>，就是如果发生了冲突，则再用 <code class=\"language-plaintext highlighter-rouge\">FNV1 hash</code> 算法重新计算 hash.</p>\n<hr/>\n<h4 id=\"参考文献\">参考文献：</h4>\n<ul>\n  <li><a href=\"http://www.cnblogs.com/heartchord/p/4561308.html\">lua 字符串</a></li>\n  <li><a href=\"https://github.com/LuaJIT/LuaJIT/issues/168\">Reduce string hash collisions</a></li>\n  <li><a href=\"https://kate.io/blog/simple-hash-collisions-in-lua/\">Simple Hash Collisions</a></li>\n</ul>\n<pre><code>            &lt;hr style=&quot;visibility: hidden;&quot;/&gt;\n</code></pre>\n","text":"Lua 中 40 字节以下的字符串会被内部化到一张表中(Lua 5.3)，这张表挂在 global state 结构下。对于短字符串，相同的串在同一虚拟机上只会存在一份，这被称为字符串的内部化。 其实字符串在 Lua VM 中是以两种内部形式保存的：短字符串及长字符串。其界限默认...","link":"","photos":[],"count_time":{"symbolsCount":"2.2k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%8F%82%E8%80%83%E6%96%87%E7%8C%AE\"><span class=\"toc-text\">参考文献：</span></a></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"lua gc分析","uid":"907fabdd67222b9ee3c6f8c656f559b7","slug":"zl/2016-01-01-983_lua gc分析","date":"2024-04-03T03:47:36.238Z","updated":"2024-04-03T03:47:36.238Z","comments":true,"path":"api/articles/zl/2016-01-01-983_lua gc分析.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"说明分析lua使用的gc算法，如何做到分步gc，以及测试结论 gc算法分析lua gc采用的是标记-清除算法，即一次gc分两步： 从根节点开始遍历gc对象，如果可达，则标记 遍历所有的gc对象，清除没有被标记的对象 二色标记法lua 5.1之前采用的算法，二色回收法是最简单的标记...","link":"","photos":[],"count_time":{"symbolsCount":"6.5k","symbolsTime":"6 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"PIL.9Lua中的闭包","uid":"66065dc59985b4408d9fe81f872d389b","slug":"zl/2016-01-01-985_PIL.9Lua中的闭包","date":"2024-04-03T03:47:36.238Z","updated":"2024-04-03T03:47:36.239Z","comments":true,"path":"api/articles/zl/2016-01-01-985_PIL.9Lua中的闭包.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"Lua中的函数是 第一类的值加上合适的词法域。那么，函数是第一类值意味着什么呢？这是说，在Lua中，一个函数，就是一个和 数字或字符串一样具有某些权限的值。一个程序可以把函数存储在变量中（全局或者局部都可以）和表中，把函数作为参数传递给其他函数，或者以函数作为值返回。 函数具有词...","link":"","photos":[],"count_time":{"symbolsCount":"7k","symbolsTime":"6 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}