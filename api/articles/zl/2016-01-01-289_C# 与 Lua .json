{"title":"C# 与 Lua","uid":"c4823e345a6d3773abfe476da6a9aec3","slug":"zl/2016-01-01-289_C# 与 Lua ","date":"2024-04-03T03:47:33.146Z","updated":"2024-04-03T03:47:33.146Z","comments":true,"path":"api/articles/zl/2016-01-01-289_C# 与 Lua .json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<h2 id=\"交互原理\">交互原理</h2>\n<h3 id=\"lua-call-c\">Lua Call C#</h3>\n<ul>\n  <li>Wrap 方式:<br/>\n 首先生成 C# 源文件所对应的Wrap文件，由 Lua 文件调用 Wrap 文件，再由 Wrap 文件调用 C# 文件</li>\n  <li>反射方式：<br/>\n当索引系统 API、dll 库或者第三方库时，如果无法将代码的具体实现进行代码生成，可采用此方式实现交互。<br/>\n缺点:执行效率低。</li>\n</ul>\n<h4 id=\"过程\">过程</h4>\n<ul>\n  <li>lua-&gt;wrap-&gt;C#<br/>\n先生成 Wrap 文件（中间文件/适配文件）或者编写 C# 源文件所对应的 c 模块， wrap 文件把字段方法，然后将源文件内容通过 Wrap 文件或者 C 模块把字段方法注册到 lua 虚拟机中（解释器 luajit ），然后 lua 通过 wrap 去调用这个模块的函数。</li>\n</ul>\n<h3 id=\"c-call-lua\">C# Call Lua</h3>\n<ul>\n  <li>虚拟栈操作方式<br/>\nC# 把请求或数据放在栈顶，然后 lua 从栈顶取出该数据，在 lua 中做出相应处理（查询，改变），然后把处理结果放回栈顶，最后 C# 再从栈顶取出 lua 处理完的数据，完成交互。<br/>\n或者在 config 文件中添加相应类型也可以</li>\n</ul>\n<h4 id=\"过程-1\">过程</h4>\n<ul>\n  <li>C#-&gt;Bridge-&gt;dll-&gt;Lua  OR   C#-&gt;dll-&gt;Lua<br/>\nC# 生成 Bridge 文件， Bridge 调 dll 文件（ dll 是用 C 写的库），先调用 lua 中 dll 文件，由 dll 文件执行lua代码</li>\n</ul>\n<h2 id=\"交互优化\">交互优化</h2>\n<ol>\n  <li>尽量不要在 lua 中传递 Unity 中的类，尽量只传递int,float,double 类型\n解决方法：在 C# 中封装方法 Unity 类型的赋值，使用 id（int） 代表对应 object 的传递</li>\n  <li>调用的 C# 方法参数数量尽量少与4个</li>\n  <li>C# 方法尽量为静态方法（减少 lua gc ）</li>\n  <li>在 lua 中调用 C# 方法获取数据时，其方法参数尽量使用 out 关键字（将表查找转换为对栈访问）</li>\n</ol>\n<h2 id=\"资料\">资料</h2>\n<p>原理：\nhttps://blog.csdn.net/Pan_mouren/article/details/81000303<br/>\n性能优化：https://blog.csdn.net/swj524152416/article/details/71125478?tdsourcetag=s_pctim_aiomsg</p>\n<pre><code>            &lt;hr style=&quot;visibility: hidden;&quot;/&gt;\n</code></pre>\n","text":"交互原理 Lua Call C# Wrap 方式: 首先生成 C# 源文件所对应的Wrap文件，由 Lua 文件调用 Wrap 文件，再由 Wrap 文件调用 C# 文件 反射方式： 当索引系统 API、dll 库或者第三方库时，如果无法将代码的具体实现进行代码生成，可采用此方式...","link":"","photos":[],"count_time":{"symbolsCount":"1.1k","symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BA%A4%E4%BA%92%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">交互原理</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#lua-call-c\"><span class=\"toc-text\">Lua Call C#</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%BF%87%E7%A8%8B\"><span class=\"toc-text\">过程</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#c-call-lua\"><span class=\"toc-text\">C# Call Lua</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%BF%87%E7%A8%8B-1\"><span class=\"toc-text\">过程</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BA%A4%E4%BA%92%E4%BC%98%E5%8C%96\"><span class=\"toc-text\">交互优化</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%B5%84%E6%96%99\"><span class=\"toc-text\">资料</span></a></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Lua源码阅读：基本数据类型","uid":"0ba70c15bedb292799e8bc2c04139b6c","slug":"zl/2016-01-01-290_Lua源码阅读：基本数据类型","date":"2024-04-03T03:47:33.147Z","updated":"2024-04-03T03:47:33.147Z","comments":true,"path":"api/articles/zl/2016-01-01-290_Lua源码阅读：基本数据类型.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"关于Lua中基本数据类型的底层实现方式，本篇是IState。 lStatelua_State在lState.h中定义了lua_State的结构体，这是每个 Lua 函数都会接受的表示当前状态的结构，最主要的成员包括运行栈 stack, 栈用于表示函数调用、传递参数及返回值： 12...","link":"","photos":[],"count_time":{"symbolsCount":"8.7k","symbolsTime":"8 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Linux下lua开发环境安装及安装luafilesystem","uid":"3f5fc0e8fdd43ef37c7942dee66a8753","slug":"zl/2016-01-01-28_Linux 下 lua 开发环境安装及安装 luafilesystem","date":"2024-04-03T03:47:33.146Z","updated":"2024-04-03T03:47:33.146Z","comments":true,"path":"api/articles/zl/2016-01-01-28_Linux 下 lua 开发环境安装及安装 luafilesystem.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"火云邪神语录：天下武功，无坚不破，唯快不破！Nginx 的看家本领就是速度，Lua 的拿手好戏亦是速度，这两者的结合在速度上无疑有基因上的优势。 最近一直再折腾这个，干脆就稍微整理下。以防后面继续跳坑！ 安装： 1.先安装 lua 的相关依赖安装 C 开发环境由于 gcc 包需要...","link":"","photos":[],"count_time":{"symbolsCount":"2.7k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}