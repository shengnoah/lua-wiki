{"title":"redis学习5 lua脚本 · 老白开发","uid":"348337c0a12434a59d910b67816fcdda","slug":"zl/2016-01-01-69_redis学习5 lua脚本 · 老白开发","date":"2024-04-03T03:47:35.933Z","updated":"2024-04-03T03:47:35.933Z","comments":true,"path":"api/articles/zl/2016-01-01-69_redis学习5 lua脚本 · 老白开发.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<p>redis内置的 Lua 解释器，可以使用lua对redis进行操作。使用脚本有以下好处:</p>\n<ul>\n<li>减少网络开销:批量执行redis命令。</li>\n<li>原子性操作:Redis也保证脚本会以原子性的方式执行:当某个脚本正在运行的时候，不会有其他脚本或Redis 命令被执行。</li>\n<li>复用：客户端发送的脚本会永久存储在Redis中，意味着其他客户端可以复用这一脚本而不需要使用代码完成同样的逻辑。\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2></li>\n<li>lua脚本<br/>lua是一个很容易嵌入其它语言中使用的语言。很多应用程序、游戏使用LUA作为自己的嵌入式脚本语言，以此来实现可配置性、可扩展性。查看<a href=\"http://manual.luaer.cn/\" target=\"_blank\" rel=\"external noopener noreferrer\">lua5.1在线中文用户手册</a>。</li>\n<li>Eval<br/>通过redis-cli客户端单独调用Lua脚本文件，格式如下:<br/>redis-cli –eval myscript.lua [key …] arg [arg …]<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/><span class=\"line\">9</span><br/><span class=\"line\">10</span><br/><span class=\"line\">11</span><br/><span class=\"line\">12</span><br/><span class=\"line\">13</span><br/><span class=\"line\">14</span><br/><span class=\"line\">15</span><br/><span class=\"line\">16</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><br/><span class=\"line\">限制一定时间内的调用次数 </span><br/><span class=\"line\">KEYS[1]:key </span><br/><span class=\"line\">ARGV[1]:存在时长</span><br/><span class=\"line\">ARGV[2]:调用次数</span><br/><span class=\"line\">]]</span></span><br/><span class=\"line\"><span class=\"keyword\">local</span> times = redis.call(<span class=\"string\">&#39;incr&#39;</span>,KEYS[<span class=\"number\">1</span>])</span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"keyword\">if</span> times == <span class=\"number\">1</span> <span class=\"keyword\">then</span></span><br/><span class=\"line\">    redis.call(<span class=\"string\">&#39;expire&#39;</span>,KEYS[<span class=\"number\">1</span>], ARGV[<span class=\"number\">1</span>])</span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"keyword\">if</span> times &gt; <span class=\"built_in\">tonumber</span>(ARGV[<span class=\"number\">2</span>]) <span class=\"keyword\">then</span></span><br/><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br/></pre></td></tr></tbody></table></figure>\n</li>\n</ul>\n<p>调用 redis-cli –eval d:test.lua test:127.0.0.1 , 10 3</p>\n<p>通过EVAL命令执行脚本，格式如下:<br/>EVAL script numkeys key [key …] arg [arg …]<br/></p><figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt;<span class=\"built_in\">eval</span> <span class=\"string\">&#34;local times = redis.call(&#39;incr&#39;,KEYS[1]);if times == 1 then redis.call(&#39;expire&#39;,KEYS[1], ARGV[1]);end;if times &gt; tonumber(ARGV[2]) then return 0;end;return 1&#34;</span> 1 <span class=\"built_in\">test</span>:127.0.0.1 , 10 3</span><br/><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br/><span class=\"line\">127.0.0.1:6379&gt;get <span class=\"built_in\">test</span>:127.0.0.1</span><br/><span class=\"line\"><span class=\"string\">&#34;1&#34;</span></span><br/></pre></td></tr></tbody></table></figure><p></p>\n<p>redis.call lua脚本通过redis.call调用redis命令。</p>\n<p> 总结:我们可以通过Lua来实现很多功功能:用Lua来封装复杂了Redis操作的业务;计数，统计，分析，收集数据;实现业务操作事务控制等等。</p>","text":"redis内置的 Lua 解释器，可以使用lua对redis进行操作。使用脚本有以下好处: 减少网络开销:批量执行redis命令。 原子性操作:Redis也保证脚本会以原子性的方式执行:当某个脚本正在运行的时候，不会有其他脚本或Redis 命令被执行。 复用：客户端发送的脚本会永...","link":"","photos":[],"count_time":{"symbolsCount":"1.1k","symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">使用</span></a></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Java中内嵌Lua脚本","uid":"f95a8e8d7211e7be31a7335f1e131d1a","slug":"zl/2016-01-01-698_Java中内嵌Lua脚本","date":"2024-04-03T03:47:35.933Z","updated":"2024-04-03T03:47:35.933Z","comments":true,"path":"api/articles/zl/2016-01-01-698_Java中内嵌Lua脚本.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"Lua是一种小巧的脚本语言，如今常用于游戏开发，特别是客户端开发，基本上都是基于Lua来实现热更新，在Unity开发中更有uLua（最新版改名为toLua）这样成熟的热更框架。这里我设想用Lua+Java来实现服务器的热更，不成熟的想法，这里想尝试一下Lua和Java如何互相调用...","link":"","photos":[],"count_time":{"symbolsCount":"4.8k","symbolsTime":"4 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Lua_Trace","uid":"0c6a1f60edcd64859d101b7cc62dd1cb","slug":"zl/2016-01-01-6_[Lua_Trace] 1. Lua数据结构 ","date":"2024-04-03T03:47:35.933Z","updated":"2024-04-03T03:47:35.933Z","comments":true,"path":"api/articles/zl/2016-01-01-6_[Lua_Trace] 1. Lua数据结构 .json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":" &lt;p&gt;摘要:[Lua_Trace] 1. Lua数据结构 - TString&lt;/p&gt; &lt;br /&gt; &lt;p&gt; 此源码分析的版本为 : &lt;strong&gt;Lua 5.3.1&lt;/strong&gt;&lt;/p&gt; ...","link":"","photos":[],"count_time":{"symbolsCount":"3.8k","symbolsTime":"3 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}