{"title":"lua与luajit string hash算法对比","uid":"61039a24500e08c1c8a66d718a496a12","slug":"zl/2016-01-01-97_lua与luajit string hash算法对比","date":"2024-04-03T03:47:36.236Z","updated":"2024-04-03T03:47:36.237Z","comments":true,"path":"api/articles/zl/2016-01-01-97_lua与luajit string hash算法对比.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<h2 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h2><p>研究lua与luajit两种string hash算法的原理，以及性能对比</p>\n<h2 id=\"string-hash\"><a href=\"#string-hash\" class=\"headerlink\" title=\"string hash\"></a>string hash</h2><h3 id=\"lua\"><a href=\"#lua\" class=\"headerlink\" title=\"lua\"></a>lua</h3><ol>\n<li>如果string长度小于32，则会对所有字符串的字符进行遍历，然后计算hash值</li>\n<li>如果string长度大于等于32，则把string进行等分，等分间隔为长度/32+1，然后取每等分的第一个字符进行hash值计算。所以不管字符串多长，最多会循环32次</li>\n</ol>\n<h4 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h4><figure class=\"highlight cpp\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/><span class=\"line\">9</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br/><span class=\"line\"><span class=\"function\"><span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span>  <span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *str, <span class=\"keyword\">size_t</span> l, <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> seed)</span> </span>{</span><br/><span class=\"line\">  <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> h = seed ^ cast(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span>, l);</span><br/><span class=\"line\">  <span class=\"keyword\">size_t</span> l1;</span><br/><span class=\"line\">  <span class=\"keyword\">size_t</span> step = (l &gt;&gt; LUAI_HASHLIMIT) + <span class=\"number\">1</span>;  <span class=\"comment\">// LUAI_HASHLIMIT值为5，l是字符串长度，不是一</span></span><br/><span class=\"line\">  <span class=\"keyword\">for</span> (l1 = l; l1 &gt;= step; l1 -= step)</span><br/><span class=\"line\">    h = h ^ ((h&lt;&lt;<span class=\"number\">5</span>) + (h&gt;&gt;<span class=\"number\">2</span>) + cast_byte(str[l1 - <span class=\"number\">1</span>]));</span><br/><span class=\"line\">  <span class=\"keyword\">return</span> h;</span><br/><span class=\"line\">}</span><br/></pre></td></tr></tbody></table></figure>\n<h3 id=\"luajit\"><a href=\"#luajit\" class=\"headerlink\" title=\"luajit\"></a>luajit</h3><ol>\n<li>如果string小于4，则会取字符串的第一位，最后一位，以及中间位，进行hash值计算</li>\n<li>如果string长度大于等于4，则会取字符串第1~4位，最后4位，len/2-2~len/2+2，len/4-1~len/4+3，进行hash计算</li>\n</ol>\n<h4 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h4><figure class=\"highlight cpp\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/><span class=\"line\">9</span><br/><span class=\"line\">10</span><br/><span class=\"line\">11</span><br/><span class=\"line\">12</span><br/><span class=\"line\">13</span><br/><span class=\"line\">14</span><br/><span class=\"line\">15</span><br/><span class=\"line\">16</span><br/><span class=\"line\">17</span><br/><span class=\"line\">18</span><br/><span class=\"line\">19</span><br/><span class=\"line\">20</span><br/><span class=\"line\">21</span><br/><span class=\"line\">22</span><br/><span class=\"line\">23</span><br/><span class=\"line\">24</span><br/><span class=\"line\">25</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 代码我整理了封装了下，用来展示和测试</span></span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> lj_rol(x, n)\t(((x)<span class=\"meta-string\">&lt;&lt;(n)) | ((x)&gt;&gt;(-(int)(n)&amp;(8*sizeof(x)-1))))</span></span></span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">luajit_hash</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *str, <span class=\"keyword\">size_t</span> len)</span></span></span><br/><span class=\"line\"><span class=\"function\"></span>{</span><br/><span class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> a, b, h = len;</span><br/><span class=\"line\">\t<span class=\"keyword\">if</span> (len &gt;= <span class=\"number\">4</span>) {  <span class=\"comment\">/* Caveat: unaligned access! */</span></span><br/><span class=\"line\">\t\ta = lj_getu32(str);</span><br/><span class=\"line\">\t\th ^= lj_getu32(str + len - <span class=\"number\">4</span>);</span><br/><span class=\"line\">\t\tb = lj_getu32(str + (len &gt;&gt; <span class=\"number\">1</span>) - <span class=\"number\">2</span>);</span><br/><span class=\"line\">\t\th ^= b; h -= lj_rol(b, <span class=\"number\">14</span>);</span><br/><span class=\"line\">\t\tb += lj_getu32(str + (len &gt;&gt; <span class=\"number\">2</span>) - <span class=\"number\">1</span>);</span><br/><span class=\"line\">\t}</span><br/><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (len &gt; <span class=\"number\">0</span>) {</span><br/><span class=\"line\">\t\ta = *(<span class=\"keyword\">const</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> *)str;</span><br/><span class=\"line\">\t\th ^= *(<span class=\"keyword\">const</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> *)(str + len - <span class=\"number\">1</span>);</span><br/><span class=\"line\">\t\tb = *(<span class=\"keyword\">const</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> *)(str + (len &gt;&gt; <span class=\"number\">1</span>));</span><br/><span class=\"line\">\t\th ^= b; h -= lj_rol(b, <span class=\"number\">14</span>);</span><br/><span class=\"line\">\t}</span><br/><span class=\"line\">\ta ^= h; a -= lj_rol(h, <span class=\"number\">11</span>);</span><br/><span class=\"line\">\tb ^= a; b -= lj_rol(a, <span class=\"number\">25</span>);</span><br/><span class=\"line\">\th ^= b; h -= lj_rol(b, <span class=\"number\">16</span>);</span><br/><span class=\"line\">\t<span class=\"keyword\">return</span> h;</span><br/><span class=\"line\">}</span><br/></pre></td></tr></tbody></table></figure>\n<h3 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h3><p>从采样随机性及次数上来看，肯定是lua原生自带的hash算法好。但也因为采样次数增加，导致原生hash算法的性能会有损失</p>\n<h2 id=\"性能对比\"><a href=\"#性能对比\" class=\"headerlink\" title=\"性能对比\"></a>性能对比</h2><p>对lua以及luajit的string hash算法，进行不同字符串长度的性能对比</p>\n<h3 id=\"测试环境\"><a href=\"#测试环境\" class=\"headerlink\" title=\"测试环境\"></a>测试环境</h3><p>操作系统：Debian GNU/Linux 8<br/>CPU：Intel(R) Xeon(R) CPU E5-2640 v2 @ 2.00GHz<br/>内存：64G</p>\n<h3 id=\"测试代码\"><a href=\"#测试代码\" class=\"headerlink\" title=\"测试代码\"></a>测试代码</h3><figure class=\"highlight cpp\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/><span class=\"line\">9</span><br/><span class=\"line\">10</span><br/><span class=\"line\">11</span><br/><span class=\"line\">12</span><br/><span class=\"line\">13</span><br/><span class=\"line\">14</span><br/><span class=\"line\">15</span><br/><span class=\"line\">16</span><br/><span class=\"line\">17</span><br/><span class=\"line\">18</span><br/><span class=\"line\">19</span><br/><span class=\"line\">20</span><br/><span class=\"line\">21</span><br/><span class=\"line\">22</span><br/><span class=\"line\">23</span><br/><span class=\"line\">24</span><br/><span class=\"line\">25</span><br/><span class=\"line\">26</span><br/><span class=\"line\">27</span><br/><span class=\"line\">28</span><br/><span class=\"line\">29</span><br/><span class=\"line\">30</span><br/><span class=\"line\">31</span><br/><span class=\"line\">32</span><br/><span class=\"line\">33</span><br/><span class=\"line\">34</span><br/><span class=\"line\">35</span><br/><span class=\"line\">36</span><br/><span class=\"line\">37</span><br/><span class=\"line\">38</span><br/><span class=\"line\">39</span><br/><span class=\"line\">40</span><br/><span class=\"line\">41</span><br/><span class=\"line\">42</span><br/><span class=\"line\">43</span><br/><span class=\"line\">44</span><br/><span class=\"line\">45</span><br/><span class=\"line\">46</span><br/><span class=\"line\">47</span><br/><span class=\"line\">48</span><br/><span class=\"line\">49</span><br/><span class=\"line\">50</span><br/><span class=\"line\">51</span><br/><span class=\"line\">52</span><br/><span class=\"line\">53</span><br/><span class=\"line\">54</span><br/><span class=\"line\">55</span><br/><span class=\"line\">56</span><br/><span class=\"line\">57</span><br/><span class=\"line\">58</span><br/><span class=\"line\">59</span><br/><span class=\"line\">60</span><br/><span class=\"line\">61</span><br/><span class=\"line\">62</span><br/><span class=\"line\">63</span><br/><span class=\"line\">64</span><br/><span class=\"line\">65</span><br/><span class=\"line\">66</span><br/><span class=\"line\">67</span><br/><span class=\"line\">68</span><br/><span class=\"line\">69</span><br/><span class=\"line\">70</span><br/><span class=\"line\">71</span><br/><span class=\"line\">72</span><br/><span class=\"line\">73</span><br/><span class=\"line\">74</span><br/><span class=\"line\">75</span><br/><span class=\"line\">76</span><br/><span class=\"line\">77</span><br/><span class=\"line\">78</span><br/><span class=\"line\">79</span><br/><span class=\"line\">80</span><br/><span class=\"line\">81</span><br/><span class=\"line\">82</span><br/><span class=\"line\">83</span><br/><span class=\"line\">84</span><br/><span class=\"line\">85</span><br/><span class=\"line\">86</span><br/><span class=\"line\">87</span><br/><span class=\"line\">88</span><br/><span class=\"line\">89</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></span><br/><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;time.h&gt;</span></span></span><br/><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br/><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> lua_hash_seed = <span class=\"number\">0</span>;</span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">lua_hash</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *str, <span class=\"keyword\">size_t</span> len)</span></span></span><br/><span class=\"line\"><span class=\"function\"></span>{</span><br/><span class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> h = lua_hash_seed ^ (<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span>)len;</span><br/><span class=\"line\">\t<span class=\"keyword\">size_t</span> step = (len &gt;&gt; <span class=\"number\">5</span>) + <span class=\"number\">1</span>;</span><br/><span class=\"line\">\t<span class=\"keyword\">for</span> (; len &gt;= step; len -= step)</span><br/><span class=\"line\">\t\th ^= ((h &lt;&lt; <span class=\"number\">5</span>) + (h &gt;&gt; <span class=\"number\">2</span>) + (<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span>)(str[len - <span class=\"number\">1</span>]));</span><br/><span class=\"line\">\t<span class=\"keyword\">return</span> h;</span><br/><span class=\"line\">}</span><br/><span class=\"line\"></span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> lj_rol(x, n)\t(((x)<span class=\"meta-string\">&lt;&lt;(n)) | ((x)&gt;&gt;(-(int)(n)&amp;(8*sizeof(x)-1))))</span></span></span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">luajit_hash</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *str, <span class=\"keyword\">size_t</span> len)</span></span></span><br/><span class=\"line\"><span class=\"function\"></span>{</span><br/><span class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> a, b, h = len;</span><br/><span class=\"line\">\t<span class=\"keyword\">if</span> (len &gt;= <span class=\"number\">4</span>) {  <span class=\"comment\">/* Caveat: unaligned access! */</span></span><br/><span class=\"line\">\t\ta = lj_getu32(str);</span><br/><span class=\"line\">\t\th ^= lj_getu32(str + len - <span class=\"number\">4</span>);</span><br/><span class=\"line\">\t\tb = lj_getu32(str + (len &gt;&gt; <span class=\"number\">1</span>) - <span class=\"number\">2</span>);</span><br/><span class=\"line\">\t\th ^= b; h -= lj_rol(b, <span class=\"number\">14</span>);</span><br/><span class=\"line\">\t\tb += lj_getu32(str + (len &gt;&gt; <span class=\"number\">2</span>) - <span class=\"number\">1</span>);</span><br/><span class=\"line\">\t}</span><br/><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (len &gt; <span class=\"number\">0</span>) {</span><br/><span class=\"line\">\t\ta = *(<span class=\"keyword\">const</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> *)str;</span><br/><span class=\"line\">\t\th ^= *(<span class=\"keyword\">const</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> *)(str + len - <span class=\"number\">1</span>);</span><br/><span class=\"line\">\t\tb = *(<span class=\"keyword\">const</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> *)(str + (len &gt;&gt; <span class=\"number\">1</span>));</span><br/><span class=\"line\">\t\th ^= b; h -= lj_rol(b, <span class=\"number\">14</span>);</span><br/><span class=\"line\">\t}</span><br/><span class=\"line\">\ta ^= h; a -= lj_rol(h, <span class=\"number\">11</span>);</span><br/><span class=\"line\">\tb ^= a; b -= lj_rol(a, <span class=\"number\">25</span>);</span><br/><span class=\"line\">\th ^= b; h -= lj_rol(b, <span class=\"number\">16</span>);</span><br/><span class=\"line\">\t<span class=\"keyword\">return</span> h;</span><br/><span class=\"line\">}</span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">random_string</span><span class=\"params\">(<span class=\"built_in\">std</span>::<span class=\"built_in\">string</span> &amp;str, <span class=\"keyword\">size_t</span> size)</span></span></span><br/><span class=\"line\"><span class=\"function\"></span>{</span><br/><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; size; ++i)</span><br/><span class=\"line\">\t{</span><br/><span class=\"line\">\t\tstr.push_back((<span class=\"keyword\">char</span>)(rand() % <span class=\"number\">255</span>));</span><br/><span class=\"line\">\t}</span><br/><span class=\"line\">}</span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> HASH_COUNT 100000</span></span><br/><span class=\"line\"><span class=\"keyword\">int</span> a[HASH_COUNT];</span><br/><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br/><span class=\"line\"><span class=\"function\"></span>{</span><br/><span class=\"line\">\t<span class=\"built_in\">std</span>::<span class=\"built_in\">string</span> str;</span><br/><span class=\"line\"></span><br/><span class=\"line\">\tsrand(clock());</span><br/><span class=\"line\"></span><br/><span class=\"line\">\t<span class=\"keyword\">int</span> step = <span class=\"number\">1</span>;</span><br/><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> len = <span class=\"number\">1</span>; len &lt;= <span class=\"number\">65535</span>; len += step)</span><br/><span class=\"line\">\t{</span><br/><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&#34;string len = %d:n&#34;</span>, len);</span><br/><span class=\"line\"></span><br/><span class=\"line\">\t\trandom_string(str, step);</span><br/><span class=\"line\">\t\t</span><br/><span class=\"line\">\t\t{</span><br/><span class=\"line\">\t\t\t<span class=\"keyword\">clock_t</span> start = clock();</span><br/><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; HASH_COUNT; ++i)</span><br/><span class=\"line\">\t\t\t{</span><br/><span class=\"line\">\t\t\t\ta[i] = luajit_hash(str.c_str(), str.size());\t<span class=\"comment\">// 防止编译器优化;</span></span><br/><span class=\"line\">\t\t\t}</span><br/><span class=\"line\">\t\t\t<span class=\"keyword\">clock_t</span> use_time = clock() - start;</span><br/><span class=\"line\"></span><br/><span class=\"line\">\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&#34;tluajit use: %lfn&#34;</span>, use_time*<span class=\"number\">1.0</span> / CLOCKS_PER_SEC);</span><br/><span class=\"line\">\t\t}</span><br/><span class=\"line\">\t\t</span><br/><span class=\"line\">\t\t{</span><br/><span class=\"line\">\t\t\t<span class=\"keyword\">clock_t</span> start = clock();</span><br/><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; HASH_COUNT; ++i)</span><br/><span class=\"line\">\t\t\t{</span><br/><span class=\"line\">\t\t\t\ta[i] = lua_hash(str.c_str(), str.size());</span><br/><span class=\"line\">\t\t\t}</span><br/><span class=\"line\">\t\t\t<span class=\"keyword\">clock_t</span> use_time = clock() - start;</span><br/><span class=\"line\"></span><br/><span class=\"line\">\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&#34;tlua use: %lfn&#34;</span>, use_time*<span class=\"number\">1.0</span> / CLOCKS_PER_SEC);</span><br/><span class=\"line\">\t\t}</span><br/><span class=\"line\">\t}</span><br/><span class=\"line\"></span><br/><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br/><span class=\"line\">}</span><br/></pre></td></tr></tbody></table></figure>\n<h3 id=\"测试结果\"><a href=\"#测试结果\" class=\"headerlink\" title=\"测试结果\"></a>测试结果</h3><figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/><span class=\"line\">9</span><br/><span class=\"line\">10</span><br/><span class=\"line\">11</span><br/><span class=\"line\">12</span><br/><span class=\"line\">13</span><br/><span class=\"line\">14</span><br/><span class=\"line\">15</span><br/><span class=\"line\">16</span><br/><span class=\"line\">17</span><br/><span class=\"line\">18</span><br/><span class=\"line\">19</span><br/><span class=\"line\">20</span><br/><span class=\"line\">21</span><br/><span class=\"line\">22</span><br/><span class=\"line\">23</span><br/><span class=\"line\">24</span><br/><span class=\"line\">25</span><br/><span class=\"line\">26</span><br/><span class=\"line\">27</span><br/><span class=\"line\">28</span><br/><span class=\"line\">29</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">string len = 1:</span><br/><span class=\"line\">    luajit use: 0.000615</span><br/><span class=\"line\">    lua use: 0.000205</span><br/><span class=\"line\">string len = 2:</span><br/><span class=\"line\">    luajit use: 0.000410</span><br/><span class=\"line\">    lua use: 0.000352</span><br/><span class=\"line\">string len = 3:</span><br/><span class=\"line\">    luajit use: 0.000426</span><br/><span class=\"line\">    lua use: 0.000505</span><br/><span class=\"line\">string len = 4:</span><br/><span class=\"line\">    luajit use: 0.000485</span><br/><span class=\"line\">    lua use: 0.000552</span><br/><span class=\"line\">string len = 5:</span><br/><span class=\"line\">    luajit use: 0.000531</span><br/><span class=\"line\">    lua use: 0.000803</span><br/><span class=\"line\">string len = 6:</span><br/><span class=\"line\">    luajit use: 0.000455</span><br/><span class=\"line\">    lua use: 0.000910</span><br/><span class=\"line\">string len = 7:</span><br/><span class=\"line\">    luajit use: 0.000479</span><br/><span class=\"line\">    lua use: 0.001106</span><br/><span class=\"line\">...</span><br/><span class=\"line\">string len = 31:</span><br/><span class=\"line\">    luajit use: 0.000483</span><br/><span class=\"line\">    lua use: 0.005269</span><br/><span class=\"line\">string len = 32:</span><br/><span class=\"line\">    luajit use: 0.000506</span><br/><span class=\"line\">    lua use: 0.002439</span><br/><span class=\"line\">...</span><br/></pre></td></tr></tbody></table></figure>\n<ul>\n<li>可以看到，除了1，2长度的字符串，lua原生hash快，其他都是luajit快。<br/>漫的速度大致可以通过lua原生hash的循环次数大致估算，如果循环满32次，则性能大致是luajit的1/10倍，如果为16次则为1/5。</li>\n</ul>\n<h2 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h2><ol>\n<li>lua原生的hash算法会导致性能的开销，测试最慢为0.005s/10W次，而luajit为0.0004s/10W次</li>\n<li>性能开销带来的同时，从算法层面看到，lua原生的hash算法会跟好，不过这还得需要在实际使用当中进行测试才能得到更准确得结论</li>\n</ol>","text":"说明研究lua与luajit两种string hash算法的原理，以及性能对比 string hashlua 如果string长度小于32，则会对所有字符串的字符进行遍历，然后计算hash值 如果string长度大于等于32，则把string进行等分，等分间隔为长度/32+1，然...","link":"","photos":[],"count_time":{"symbolsCount":"4.5k","symbolsTime":"4 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%AF%B4%E6%98%8E\"><span class=\"toc-text\">说明</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#string-hash\"><span class=\"toc-text\">string hash</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#lua\"><span class=\"toc-text\">lua</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%BB%A3%E7%A0%81\"><span class=\"toc-text\">代码</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#luajit\"><span class=\"toc-text\">luajit</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%BB%A3%E7%A0%81-1\"><span class=\"toc-text\">代码</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%86%E6%9E%90\"><span class=\"toc-text\">分析</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%80%A7%E8%83%BD%E5%AF%B9%E6%AF%94\"><span class=\"toc-text\">性能对比</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B5%8B%E8%AF%95%E7%8E%AF%E5%A2%83\"><span class=\"toc-text\">测试环境</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B5%8B%E8%AF%95%E4%BB%A3%E7%A0%81\"><span class=\"toc-text\">测试代码</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B5%8B%E8%AF%95%E7%BB%93%E6%9E%9C\"><span class=\"toc-text\">测试结果</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%BB%93%E8%AE%BA\"><span class=\"toc-text\">结论</span></a></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"基于AndroLua_Pro的Android开发代码示例","uid":"94417dda5756bd306e745ea97ae3cbdc","slug":"zl/2016-01-01-978_基于AndroLua_Pro的Android开发代码示例","date":"2024-04-03T03:47:36.236Z","updated":"2024-04-03T03:47:36.236Z","comments":true,"path":"api/articles/zl/2016-01-01-978_基于AndroLua_Pro的Android开发代码示例.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":" 温馨提示:请使用电脑浏览器打开,以确保最佳的阅读体验,谢谢.(￣▽￣)” 我希望你有了一些AndroLua_Pro的基础, 如果还没有可以结合这篇文章(基于AndroLua_Pro的Android开发笔记)来看. 其实我代码都放在了GitHub, 可以去看看呗. 缓存 缓存函数...","link":"","photos":[],"count_time":{"symbolsCount":"1.9k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Lua学习笔记一","uid":"4ff1e2a53b46dffd40e47f7016f14195","slug":"zl/2016-01-01-979_Lua学习笔记一","date":"2024-04-03T03:47:36.236Z","updated":"2024-04-03T03:47:36.236Z","comments":true,"path":"api/articles/zl/2016-01-01-979_Lua学习笔记一.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"PS:由于公司项目中用到Lua,所以准备学习一下，这里做下学习笔记。 Lua 是一种轻量小巧的脚本语言，用标准C语言编写并以源代码形式开放， 其设计目的是为了嵌入应用程序中，从而为应用程序提供灵活的扩展和定制功能。 基本语法交互式编程lua -i 进入交互式编程 脚本式编程新建一...","link":"","photos":[],"count_time":{"symbolsCount":"4.4k","symbolsTime":"4 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}