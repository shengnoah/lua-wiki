{"title":"lua","uid":"df60e476b394b1dd4755ec96c53302ff","slug":"zl/2016-01-01-401_lua","date":"2024-04-03T03:47:35.692Z","updated":"2024-04-03T03:47:35.692Z","comments":true,"path":"api/articles/zl/2016-01-01-401_lua.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<h2 id=\"一-概述\">一 概述</h2> <p><code class=\"highlighter-rouge\">lua-upstream</code> 模块提供了对 <code class=\"highlighter-rouge\">upstrem</code> 配置的查看，查看所有的 <code class=\"highlighter-rouge\">upstream</code>、<code class=\"highlighter-rouge\">upstream</code> 内所有的/启用的/备用的 <code class=\"highlighter-rouge\">server</code>，当前使用的 <code class=\"highlighter-rouge\">upstream</code> 名。<strong>虽然有 <code class=\"highlighter-rouge\">set_peer_down</code> 指令，但是模块只修改单个 <code class=\"highlighter-rouge\">worker</code> 内的 <code class=\"highlighter-rouge\">server</code> 标记（处理 <code class=\"highlighter-rouge\">set_peer_down</code> 请求的 <code class=\"highlighter-rouge\">worker</code>），无法再生产环境使用</strong>。</p> <h2 id=\"二-示例\">二 示例</h2><pre><code class=\"language-ngin\">worker_processes  1;\n<p>error_log logs/error.log info;</p>\n<p>events &#123;<br />\nworker_connections 1024;<br />\n&#125;</p>\n<p>http &#123;</p>\n<pre><code>lua_code_cache off;\n\nupstream backend &#123;\n    server localhost:8081 down;\n    server localhost:8082;\n&#125;\n\nserver &#123;\n    listen 8081;\n    location / &#123;\n        default_type text/plain; \n        content_by_lua_block &#123;\n            ngx.say(&amp;#34;hello world&amp;#34;)\n        &#125;\n    &#125;\n&#125;\nserver &#123;\n    listen 8082;\n    location / &#123;\n        default_type text/plain; \n        content_by_lua_block &#123;\n\n            ngx.say(&amp;#34;hello world 8082&amp;#34;)\n        &#125;\n    &#125;\n&#125;\n\nserver &#123;\n    listen 8080;\n\n\t\t\t## 查看当前使用的 upstream\n    location /call_upstream &#123;\n        header_filter_by_lua_block &#123;\n            local upstream = require &amp;#34;ngx.upstream&amp;#34;\n            ngx.log(ngx.INFO,&amp;#34;current upstream:&amp;#34;, upstream.current_upstream_name())\n        &#125;\n        proxy_pass http://backend;\n    &#125;\n    \n\t\t\t## 查看所有 upstream\n    location /status_upstream &#123;\n        content_by_lua_block &#123;\n            local upstream = require &amp;#34;ngx.upstream&amp;#34;\n            local us = upstream.get_upstreams()\n            for _, v in ipairs(us) do\n                ngx.log(ngx.INFO, &amp;#34;upstream name:&amp;#34;, v)\n                local servers, _ = upstream.get_servers(v)\n\n                if not servers then\n                    ngx.log(ngx.ERR, &amp;#34;no server in upstream&amp;#34;)\n                else \n                    for idx, s in ipairs (servers) do\n                        local msg = &amp;#34;idx:&amp;#34; .. idx\n                        \n                        for k, v in pairs (s) do\n                            msg = msg .. &amp;#34; &amp;#34; .. k .. &amp;#34;:&amp;#34;\n                            if type(v) == &amp;#34;table&amp;#34; then\n                                msg = msg .. table.concat(v, &amp;#34;,&amp;#34;)\n                            else\n                                msg = msg .. tostring(v)\n                            end\n                        end\n\n                        ngx.log(ngx.INFO, msg)\n                    end\n                end\n            end\n        &#125;\n    &#125;\n    \n    ## 将 backend 中第一个启用 server 设置为 down 状态\n    location /set_upstream &#123;\n        content_by_lua_block &#123;\n            local upstream = require &amp;#34;ngx.upstream&amp;#34;\n\n            upstream.set_peer_down(&amp;#34;backend&amp;#34;, false, 0, false)\n        &#125;\n    &#125;\n&#125;\n</code></pre>\n<p>}<br />\n</code></pre><h3 id=\"1-示例运行\">1. 示例运行</h3> <p>在调用 <code class=\"highlighter-rouge\">status_upstream</code>、<code class=\"highlighter-rouge\">set_upstream</code>、<code class=\"highlighter-rouge\">status_upstream</code> 调用顺序中，最终并无法看到 <code class=\"highlighter-rouge\">server</code> 被标记为 <code class=\"highlighter-rouge\">down</code> 状态。这是 <code class=\"highlighter-rouge\">set_peer_down</code> 修改的是 <code class=\"highlighter-rouge\">round_robin</code> 模块中 <code class=\"highlighter-rouge\">server</code> 的标记，<code class=\"highlighter-rouge\">get_servers</code> 读取的是配置结构体（<code class=\"highlighter-rouge\">ngx_http_upstream_server_t</code>）中的内容。</p> <h3 id=\"2-get_servers-函数\">2. <code class=\"highlighter-rouge\">get_servers</code> 函数</h3> <p>如果 <code class=\"highlighter-rouge\">server</code> 未指定 <code class=\"highlighter-rouge\">down/backup</code> 标记，在 <code class=\"highlighter-rouge\">get_servers</code> 函数返回值中不会包含 <code class=\"highlighter-rouge\">down/backup</code> 状态。</p> <h2 id=\"三-后记\">三 后记</h2> <p>在 <code class=\"highlighter-rouge\">lua-upstream</code> 模块的 <code class=\"highlighter-rouge\">TODO</code> 中有提及动态添加、删除 <code class=\"highlighter-rouge\">server</code> 的考虑，到时候应该会更好用。</p> <h2 id=\"四-链接\">四 链接</h2> <ul> <li><em><a href=\"https://github.com/openresty/lua-upstream-nginx-module\">项目连接</a></em></li> </ul></p>\n","text":"一 概述 lua-upstream 模块提供了对 upstrem 配置的查看，查看所有的 upstream、upstream 内所有的/启用的/备用的 server，当前使用的 upstream 名。虽然有 set_peer_down 指令，但是模块只修改单个 worker 内的...","link":"","photos":[],"count_time":{"symbolsCount":"3.1k","symbolsTime":"3 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%80-%E6%A6%82%E8%BF%B0\"><span class=\"toc-text\">一 概述</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BA%8C-%E7%A4%BA%E4%BE%8B\"><span class=\"toc-text\">二 示例</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E7%A4%BA%E4%BE%8B%E8%BF%90%E8%A1%8C\"><span class=\"toc-text\">1. 示例运行</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-get_servers-%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">2. get_servers 函数</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%89-%E5%90%8E%E8%AE%B0\"><span class=\"toc-text\">三 后记</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%9B%9B-%E9%93%BE%E6%8E%A5\"><span class=\"toc-text\">四 链接</span></a></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Lua源码阅读：标准库","uid":"1607a98167353110709d7e74e3d69118","slug":"zl/2016-01-01-404_Lua源码阅读：标准库","date":"2024-04-03T03:47:35.693Z","updated":"2024-04-03T03:47:35.697Z","comments":true,"path":"api/articles/zl/2016-01-01-404_Lua源码阅读：标准库.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"Lua标准库中定义的一些函数及其实现方式。 lmathlib.c从一个简单的math.Abs()函数开始： 12345678910static int (lua_State *L) { if (lua_isinteger(L, 1)) { lua_Integer n = lua_...","link":"","photos":[],"count_time":{"symbolsCount":"1.2k","symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Lua函数重载","uid":"3740102d1bd791c516d63239915f958a","slug":"zl/2016-01-01-402_Lua函数重载","date":"2024-04-03T03:47:35.692Z","updated":"2024-04-03T03:47:35.692Z","comments":true,"path":"api/articles/zl/2016-01-01-402_Lua函数重载.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"想法和思路在最近学习lua面向对象的时候，在想可不可以为一个类实现多个构造函数或者是new，也就是传统意义上的函数重载。尽管没有什么没有什么实际用途，毕竟想要实现同名函数的不同入参，只要入参的表内容不同即可。于是，这个问题就变成了有没有什么办法可以在Lua中从形式上实现和静态语言...","link":"","photos":[],"count_time":{"symbolsCount":"4.5k","symbolsTime":"4 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}