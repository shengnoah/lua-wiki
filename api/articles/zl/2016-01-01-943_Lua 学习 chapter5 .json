{"title":"Lua 学习 chapter5","uid":"c888a1cf7e4d1c58568bc08fa2b4538e","slug":"zl/2016-01-01-943_Lua 学习 chapter5 ","date":"2024-04-03T03:47:36.216Z","updated":"2024-04-03T03:47:36.216Z","comments":true,"path":"api/articles/zl/2016-01-01-943_Lua 学习 chapter5 .json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<h3 id=\"目录\">目录</h3>\n<ol>\n  <li>表索引</li>\n  <li>表构造器</li>\n  <li>数组、列表和序列</li>\n  <li>遍历表</li>\n  <li>安全访问</li>\n  <li>表标准库</li>\n  <li>练习</li>\n</ol>\n<blockquote>\n  <p>Work hard, come on baby.\nThis chapter expresses the table.</p>\n</blockquote>\n<h2 id=\"表索引\">表索引</h2>\n<p>a.x 表示的意思和a[“x”]一样，所以前者的可读性更高。</p>\n<div class=\"language-lua highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">local</span> <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"p\">&#123;&#125;</span>  <span class=\"c1\">--空白表，建立了一个表的索引</span>\n<span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>\n<span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">x</span> <span class=\"c1\">--&gt; 10</span>\n<span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">y</span> <span class=\"c1\">--&gt; nil</span>\n<span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"kc\">nil</span> <span class=\"c1\">--&gt;取消对表的索引，然后lua的垃圾处理器就会对其进行回收</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n<h2 id=\"表构造器\">表构造器</h2>\n<p>表构造器是用来创建和初始化表的表达式，也是lua语言中独有的也是最有用、最灵活的机制之一。</p>\n<p>在构造表的时候可以使用记录式和列表式，当然你也可以混用它们：</p>\n<div class=\"language-lua highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n</pre></td><td class=\"rouge-code\"><pre><span class=\"n\">days</span><span class=\"o\">=</span> <span class=\"p\">&#123;</span><span class=\"s2\">&#34;Mon&#34;</span><span class=\"p\">,</span><span class=\"s2\">&#34;Tues&#34;</span><span class=\"p\">,</span><span class=\"s2\">&#34;Wednes&#34;</span><span class=\"p\">,</span><span class=\"s2\">&#34;Thurs&#34;</span><span class=\"p\">,</span><span class=\"s2\">&#34;Fri&#34;</span><span class=\"p\">,</span><span class=\"s2\">&#34;Satur&#34;</span><span class=\"p\">,</span><span class=\"s2\">&#34;Sun&#34;</span><span class=\"p\">&#125;</span>\n<span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"p\">&#123;</span><span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"mi\">100</span><span class=\"p\">&#125;</span>\n<span class=\"n\">poly</span> <span class=\"o\">=</span> <span class=\"p\">&#123;</span>\n\t<span class=\"n\">color</span> <span class=\"o\">=</span> <span class=\"s2\">&#34;blue&#34;</span><span class=\"p\">,</span>\n\t<span class=\"n\">thickness</span> <span class=\"o\">=</span> <span class=\"mi\">2</span><span class=\"p\">,</span>\n\t<span class=\"p\">&#123;</span><span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">&#125;,</span> <span class=\"c1\">--polyline[1]</span>\n\t<span class=\"n\">nppoints</span> <span class=\"o\">=</span> <span class=\"mi\">4</span><span class=\"p\">,</span>\n\t<span class=\"p\">&#123;</span><span class=\"n\">x</span> <span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">y</span> <span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">&#125;,</span> <span class=\"c1\">--polyline[2]</span>\n\t<span class=\"p\">&#123;</span><span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"o\">=</span> <span class=\"mi\">6</span><span class=\"p\">&#125;,</span> <span class=\"c1\">--polyline[3]</span>\n\t<span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">&#123;</span><span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"n\">y</span> <span class=\"o\">=</span><span class=\"mi\">8</span><span class=\"p\">&#125;,</span>\n\t<span class=\"p\">[</span><span class=\"mi\">6</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">&#123;</span><span class=\"n\">x</span><span class=\"o\">=</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"mi\">10</span><span class=\"p\">&#125;</span>\n<span class=\"p\">&#125;</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n<p>可以看到在表中你可以使用键值对方式，当然也可以直接存入值(或者整数作为元素的索引)。直接存入值的地方就可以通过整数来索引像上面的表索引的那样。</p>\n<p>使用ipairs循环打印的时候，使用整数索引的值能够被打印出来，正如顺序构造的那样。</p>\n<p><img src=\"https://i.imgur.com/MMD6oy1.png\" alt=\"\"/></p>\n<p>当分别使用ipairs和pairs进行循环遍历的时候，我们会发现其中的特点。这说明表的存储结构，它是由数组部分和hashtable部分组成的，在输出的时候数组的部分会被优先输出，之后是hashtable部分。</p>\n<p>其中ipairs只会遍历数组部分，而pairs会遍历所有部分。</p>\n<p><strong>ipairs遍历的时候只会从1开始，直到顺序断开，pairs的遍历是乱序的，不能保证的</strong></p>\n<p>当然你也可以使用特定的数字来作为表的索引，需要使用中括号,如上例[4]就能被ipairs遍历到，但是[6]就不行，因为不连续。</p>\n<h2 id=\"数组列表和序列\">数组、列表和序列</h2>\n<p>在table中，想表示常见的数组或者列表，那么只需要使用整形作为索引的表即可。</p>\n<p>当然当列表中不存在nil的时候这样的数组可以被称之为序列。</p>\n<p>更准确的说序列是由指定的n个正整数为键值组成的[1…n]的集合。在中间既不能存在空洞(值为nil或者干脆没有键值直接越到后面的整数去)，这样通过<strong>#访问数组的长度只会返回空洞之前的有效长度。</strong></p>\n<h2 id=\"遍历表\">遍历表</h2>\n<ol>\n  <li>ipairs 针对于序列，顺序输出</li>\n  <li>pairs  针对于所有表，输出所有元素，但是不保证顺序(因为存储方式为hashtable)</li>\n  <li>for i = 1, #t do print(t[i]) end  使用for循环</li>\n</ol>\n<h2 id=\"安全访问\">安全访问</h2>\n<p>可以通过<strong>or</strong>来实现安全访问：</p>\n<div class=\"language-lua highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n</pre></td><td class=\"rouge-code\"><pre><span class=\"n\">E</span> <span class=\"o\">=</span> <span class=\"p\">&#123;&#125;</span>\n<span class=\"n\">zip</span> <span class=\"o\">=</span> <span class=\"p\">(((</span><span class=\"n\">company</span> <span class=\"ow\">or</span> <span class=\"n\">E</span><span class=\"p\">).</span><span class=\"n\">director</span> <span class=\"ow\">or</span> <span class=\"n\">E</span><span class=\"p\">).</span><span class=\"n\">address</span> <span class=\"ow\">or</span> <span class=\"p\">&#123;&#125;).</span><span class=\"n\">zipcode</span> \n</pre></td></tr></tbody></table></code></pre></div></div>\n<p>这样不会报错，最后返回的值也是nil，而且还减少了对表的访问。</p>\n<h2 id=\"表标准库\">表标准库</h2>\n<ol>\n  <li>table.insert(t,pos,val)  –&gt;向指定的位置插入一个值，当然也可以不指定位置，就会直接在最后插入</li>\n  <li>table.remove(t,pos) –&gt; 移除指定位置的元素，如不指定，移除最后一位，移除之后后面的元素会自动前移</li>\n  <li>table.move(a,f,e,t) –&gt; 将表a中，从f到e的元素移到从t开始的位置</li>\n  <li>table.move(a,f,e,t,{}) –&gt; 将a表中从f到e的元素移动到新表{},从t开始的位置</li>\n  <li>table.concat(“hello”,” world”) –&gt; hello world 连接字符串</li>\n</ol>\n<div class=\"language-lua highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">local</span> <span class=\"n\">t2</span> <span class=\"o\">=</span> <span class=\"p\">&#123;</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">7</span> <span class=\"p\">&#125;</span>\n<span class=\"kd\">local</span> <span class=\"n\">t3</span> <span class=\"o\">=</span> <span class=\"p\">&#123;&#125;</span>\n<span class=\"nb\">table.insert</span><span class=\"p\">(</span><span class=\"n\">t3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">table</span><span class=\"p\">.</span><span class=\"n\">move</span><span class=\"p\">(</span><span class=\"n\">t2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"o\">#</span><span class=\"n\">t2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"n\">table</span><span class=\"p\">.</span><span class=\"n\">move</span><span class=\"p\">(</span><span class=\"n\">t2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"o\">#</span><span class=\"n\">t2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">t3</span><span class=\"p\">)</span>\n<span class=\"k\">for</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">v</span> <span class=\"k\">in</span> <span class=\"nb\">ipairs</span><span class=\"p\">(</span><span class=\"n\">t2</span><span class=\"p\">)</span> <span class=\"k\">do</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">t2</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">])</span>\n<span class=\"k\">end</span>\n<p><span class=\"k\">for</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">v</span> <span class=\"k\">in</span> <span class=\"nb\">ipairs</span><span class=\"p\">(</span><span class=\"n\">t3</span><span class=\"p\">)</span> <span class=\"k\">do</span><br />\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">t3</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">])</span><br />\n<span class=\"k\">end</span><br />\n</pre></td></tr></tbody></table></code></pre></div></div></p>\n<p><img src=\"https://i.imgur.com/q882Pfl.png\" alt=\"\"/></p>\n<h2 id=\"练习\">练习</h2>\n<div class=\"language-lua highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n</pre></td><td class=\"rouge-code\"><pre><span class=\"n\">a</span><span class=\"o\">=</span><span class=\"p\">&#123;&#125;</span>\n<span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">a</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">a</span><span class=\"p\">)</span>\n<span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"mi\">3</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">a</span><span class=\"p\">)</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n<p>在赋值3之前无论打印那个a他们都指向的是那张空表，当赋值之后a.a 指向3，所以a.a.a即3.a会报错</p>\n<pre><code>            &lt;hr style=&quot;visibility: hidden;&quot;/&gt;\n            \n            &lt;hr style=&quot;visibility: hidden;&quot;/&gt;\n</code></pre>\n","text":"目录 表索引 表构造器 数组、列表和序列 遍历表 安全访问 表标准库 练习 Work hard, come on baby. This chapter expresses the table. 表索引 a.x 表示的意思和a[“x”]一样，所以前者的可读性更高。 1 2 3 4 ...","link":"","photos":[],"count_time":{"symbolsCount":"2.4k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%9B%AE%E5%BD%95\"><span class=\"toc-text\">目录</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%A1%A8%E7%B4%A2%E5%BC%95\"><span class=\"toc-text\">表索引</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%A1%A8%E6%9E%84%E9%80%A0%E5%99%A8\"><span class=\"toc-text\">表构造器</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%95%B0%E7%BB%84%E5%88%97%E8%A1%A8%E5%92%8C%E5%BA%8F%E5%88%97\"><span class=\"toc-text\">数组、列表和序列</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%81%8D%E5%8E%86%E8%A1%A8\"><span class=\"toc-text\">遍历表</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AE%89%E5%85%A8%E8%AE%BF%E9%97%AE\"><span class=\"toc-text\">安全访问</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%A1%A8%E6%A0%87%E5%87%86%E5%BA%93\"><span class=\"toc-text\">表标准库</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%BB%83%E4%B9%A0\"><span class=\"toc-text\">练习</span></a>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Evaluation measure of pose estimation","uid":"47d3582a7617de7fd8f199c409749375","slug":"zl/2016-01-01-945_Evaluation measure of pose estimation","date":"2024-04-03T03:47:36.217Z","updated":"2024-04-03T03:47:36.218Z","comments":true,"path":"api/articles/zl/2016-01-01-945_Evaluation measure of pose estimation.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"单人检测单人姿态估计的评估标准。 PCKPCK(Percentage of Correct Keypoints)正确关键点的比例。 PCK的思想是，关键点坐标pred与groundtrue之间的归一化距离小于一定阈值时，视为正确估计，以正确估计的关键点的比例作为评估标准。 从定义...","link":"","photos":[],"count_time":{"symbolsCount":406,"symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"150.Evaluate Reverse Polish Notation","uid":"822f2b75bb566ca0a24d71cff86dfdda","slug":"zl/2016-01-01-941_150.Evaluate Reverse Polish Notation","date":"2024-04-03T03:47:36.215Z","updated":"2024-04-03T03:47:36.215Z","comments":true,"path":"api/articles/zl/2016-01-01-941_150.Evaluate Reverse Polish Notation.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":" Evaluate the value of an arithmetic expression in Reverse Polish Notation.Valid operators are +, -, *, /. Each operand may be an integer or...","link":"","photos":[],"count_time":{"symbolsCount":"1.1k","symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}