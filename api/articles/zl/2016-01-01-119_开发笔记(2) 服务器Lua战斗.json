{"title":"开发笔记(2) 服务器Lua战斗","uid":"41fdac5ddcf197d3c03efe34a7a44c49","slug":"zl/2016-01-01-119_开发笔记(2) 服务器Lua战斗","date":"2024-04-03T03:47:33.028Z","updated":"2024-04-03T03:47:33.029Z","comments":true,"path":"api/articles/zl/2016-01-01-119_开发笔记(2) 服务器Lua战斗.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<p>服务器战斗系统是自动战斗的，没有玩家实际操作，因此实际上是一份客户端的Lua战斗代码，这里讨论如何在Erlang中植入Lua代码。</p>\n<h3 id=\"1-Port-Driver\"><a href=\"#1-Port-Driver\" class=\"headerlink\" title=\"1. Port Driver\"></a>1. Port Driver</h3><p>最开始，出于简单考虑，我使用Port Driver的方式来挂接战斗模块，使用<a href=\"https://github.com/Motiejus/erlualib\" target=\"_blank\" rel=\"noopener noreferrer\">erlualib</a>库，通过<code>luam:one_call</code>执行调用，进行了简单的时间统计，其中new_state&lt;1ms，dostring: 600ms，call: 20-300ms。</p>\n<p>由于是3D+NvN的战斗，整个Lua代码跑起来还是很耗时的，跑一场战斗需要接近1s的时间。由于Port Driver中的Lua代码是在虚拟机调度线程上下文中执行的，而Erlang虚拟机无法对原生代码进行公平调度，这会使在Lua代码执行期间，该调度器上其它任务都被挂起，得不到正常调度。</p>\n<h3 id=\"2-异步nif\"><a href=\"#2-异步nif\" class=\"headerlink\" title=\"2. 异步nif\"></a>2. 异步nif</h3><p>为了避免阻塞调度，Port driver是行不通的，我们还剩两种方案：</p>\n<ol>\n<li>用Ports，将战斗独立为一个操作系统进程</li>\n<li>异步nif</li>\n</ol>\n<p>考虑到尽量利用Erlang Node以及以后手动PVP的可能性，我选择了方案二，而刚好同事写了一个<a href=\"https://github.com/zhuoyikang/elua\" target=\"_blank\" rel=\"noopener noreferrer\">异步nif库</a>，也就拿来测试了。所谓异步nif，就是在nif内部提供一个C原生线程池，来做nif实际的工作，而Erlang虚拟机内只需要receive阻塞等待结果即可，Erlang层面的阻塞是可被调度的，也就是不会影响到节点上其它进程的公平调度。</p>\n<p>简单介绍一下elua，elua内部提供一个线程池，每个线程都有自己的任务队列，同一个lua state上的操作将会被推送到同一个线程的任务队列中(通过简单hash)，以保证lua state不被并发。elua使用和定制都非常灵活，可以很轻松地添加nif接口和自定义数据类型的序列化。</p>\n<h3 id=\"3-序列化数据\"><a href=\"#3-序列化数据\" class=\"headerlink\" title=\"3. 序列化数据\"></a>3. 序列化数据</h3><p>在erlualib中，数据序列化是在erlang层完成的，erlang层通过<code>lua:push_xxx</code>来将基本数据(bool,integer,atom)一个个压入Lua栈，每一次push操作，都是一次port_command，而战斗入口的数据是比较繁杂的，英雄成长，技能，装备属性等等，涉及很多key-value，一来是序列化效率低，二来是这种数据结构不能兼容于客户端。同一套战斗入口数据，最好能同时用于服务器和客户端的战斗模块。</p>\n<p>因此在elua中，我选择使用protobuf，通过二进制传输战斗入口数据，这个二进制流也可以传输给客户端，用于支持重放。</p>\n<h3 id=\"4-进程池\"><a href=\"#4-进程池\" class=\"headerlink\" title=\"4. 进程池\"></a>4. 进程池</h3><p>由于每场战斗是独立的，原则上对lua state是没有依赖的，事先分配一个lua state池，将耗时的dostring操作提前完成，每场战斗取出一个可用的lua state，然后spawn一个battle_worker进程来跑战斗，跑完之后将战斗结果cast回逻辑进程，进行后续逻辑处理。这样receive阻塞放在battle_worker中，实际Lua代码执行由elua线程池完成，对逻辑进程来说，是完全异步的。</p>\n<p>受限于elua内部的C线程(称为worker)和CPU核心数的多少，并不是erlang process越多，战斗就跑得越快，当战斗请求过多时，请求被阻塞在elua内部各个worker的任务队列中。并且spawn的process不够健壮，也没有重启机制。显然我们应该让worker process常驻，并且通过gen_server+sup实现，worker process的个数可以刚好等于elua worker的个数，这样process和worker可以直接保持一对一的关系，修改elua任务分配hash算法，让process[i]的战斗请求将分发到worker[i]的任务队列。这样我们只需把process的分配调度做好，elua即可高效地利用起来。每个process持有一个lua state，保证lua state不被并发。当战斗请求过多时，消息将阻塞在process的消息队列中，而不是elua worker的任务队列中。</p>\n<p>另外，如果战斗模块负荷较重，可以将elua线程池的大小设为Erlang虚拟机可用的CPU个数-1，这样即使elua所有线程忙碌，也不会占用全部的CPU，进一步保证节点其它进程得到调度。</p>\n<h3 id=\"5-无状态服务\"><a href=\"#5-无状态服务\" class=\"headerlink\" title=\"5. 无状态服务\"></a>5. 无状态服务</h3><p>到这里，我们讨论的都是如何将Lua代码嵌入在逻辑服务器中，如pvp_server，这样做实际上还有两点隐患：</p>\n<ol>\n<li>多个pvp_server不能有效地利用同一个pvp_node资源，因为它们具有各自的worker proces pool</li>\n<li>我们都假设elua和Lua战斗代码是足够健壮的，虽然Lua代码本身的异常可以通过<code>lua_pcall</code>捕获，但是Lua虚拟机本身的状态异常，如内存增长，仍然是不稳定的因素，可能会影响到整个pvp_node的逻辑处理</li>\n</ol>\n<p>因此，将所有Lua战斗相关的东西，抽象到一个battle_node上，才是最好的方案，battle_node本身没有状态，可以为来自不同ServerId，不同模块的战斗请求提供服务，battle_node上有唯一的battle_server，动态管理该节点上的battle_worker process，并且分发任务，battle_server本身不属于任何一个ServerId。battle_worker由sup监控，并且在启动和挂掉时，都向battle_server注册/注销自己。</p>\n<p>battle_server仍然需要向cluster_server注册自己，只不过不是以逻辑Server：{NodeType,ServerId,Node,Pid}的方式，而是以服务的方式：{ServiceName,_,Node,ServicePid}注册自己，cluster_server需要为Service提供一套筛选机制，在某个服务的所有注册节点中，选出一个可用节点:<code>cluster_server:get_service(ServiceName)</code>。</p>\n<p>再来看看整个异常处理流程：</p>\n<ul>\n<li>lua代码错误: lua_pcall捕获 -&gt; Erlang逻辑层的battle_error</li>\n<li>battle_worker crash: 向battle_server注销自己 -&gt; battle_worker_sup重启 -&gt; 重建lua state -&gt; 向battle_server重新注册自己</li>\n<li>battle_server crash: 终止所有battle_worker -&gt; 向cluster_server注销自己 -&gt; battle_server_sup重启 -&gt; 重新创建所有battle_worker -&gt; 向cluster_server重新注册</li>\n<li>elua crash: battle_node crash -&gt; 该节点不可用 -&gt; 外部请求仍然可能路由到该节点 -&gt; 战斗超时 -&gt; cluster_server检测到(节点心跳机制)该节点不可响应 -&gt; 在集群中删除该节点 -&gt; 外部请求路由到其它可用节点</li>\n</ul>\n<p>并且整个战斗系统的伸缩性很强，可以通过简单添加机器来缓解服务器战斗压力。</p>\n<h3 id=\"6-Lua代码热更\"><a href=\"#6-Lua代码热更\" class=\"headerlink\" title=\"6. Lua代码热更\"></a>6. Lua代码热更</h3><p>这个是Lua的强项，直接通过elua再次dofile Lua入口文件即可，但是要保证该Lua入口不具备副作用，如对一些全局符号进行了改写，否则下一次直接dofile，将叠加这种副作用从而导致代码异常。如果有一些全局初始化操作，应该单独抽离出来，放在另一个Lua文件中，只在创建Lua虚拟机时执行。</p>\n<p>另一种热更方案是，每次都重新创建一个Lua虚拟机，这样可以保证每次热更后的Lua虚拟机状态都得以重置恢复。</p>\n<p>最重要的是，这一切，所有外部请求来说，都是透明的。</p>","text":"服务器战斗系统是自动战斗的，没有玩家实际操作，因此实际上是一份客户端的Lua战斗代码，这里讨论如何在Erlang中植入Lua代码。 1. Port Driver最开始，出于简单考虑，我使用Port Driver的方式来挂接战斗模块，使用erlualib库，通过luam:one_c...","link":"","photos":[],"count_time":{"symbolsCount":"3.2k","symbolsTime":"3 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-Port-Driver\"><span class=\"toc-text\">1. Port Driver</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E5%BC%82%E6%AD%A5nif\"><span class=\"toc-text\">2. 异步nif</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E5%BA%8F%E5%88%97%E5%8C%96%E6%95%B0%E6%8D%AE\"><span class=\"toc-text\">3. 序列化数据</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-%E8%BF%9B%E7%A8%8B%E6%B1%A0\"><span class=\"toc-text\">4. 进程池</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-%E6%97%A0%E7%8A%B6%E6%80%81%E6%9C%8D%E5%8A%A1\"><span class=\"toc-text\">5. 无状态服务</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-Lua%E4%BB%A3%E7%A0%81%E7%83%AD%E6%9B%B4\"><span class=\"toc-text\">6. Lua代码热更</span></a></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Lua入门","uid":"09cde711228cba9ba4505d40c71d393c","slug":"zl/2016-01-01-120_Lua入门","date":"2024-04-03T03:47:33.029Z","updated":"2024-04-03T03:47:33.029Z","comments":true,"path":"api/articles/zl/2016-01-01-120_Lua入门.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"1 注释行注释：--；块注释：--[[注释内容]]，推荐用--[=[注释内容]=]，其中=的个数前后一致。 2 数据类型基础类型有8种： nil未初始化的变量默认为nil；删除一个全局变量b=nil boolean只有false和nil视为false，其他值都为true numb...","link":"","photos":[],"count_time":{"symbolsCount":"1.4k","symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"150.逆波兰表达式求值（evaluate reverse polish notation）","uid":"48d2fbd6ac9821bd900193767d3f6714","slug":"zl/2016-01-01-1183_150.逆波兰表达式求值（evaluate reverse polish notation）","date":"2024-04-03T03:47:33.027Z","updated":"2024-04-03T03:47:33.027Z","comments":true,"path":"api/articles/zl/2016-01-01-1183_150.逆波兰表达式求值（evaluate reverse polish notation）.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"根据逆波兰表示法，求表达式的值。 有效的运算符包括 +, -, *, / 。每个运算对象可以是整数，也可以是另一个逆波兰表达式。 说明： 整数除法只保留整数部分。 给定逆波兰表达式总是有效的。换句话说，表达式总会得出有效数值且不存在除数为 0 的情况。 示例 1： 输入: [&#...","link":"","photos":[],"count_time":{"symbolsCount":"2.6k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}