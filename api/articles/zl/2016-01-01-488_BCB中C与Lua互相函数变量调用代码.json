{"title":"BCB中C与Lua互相函数变量调用代码","uid":"2c353516271c5536f77da6a0c0d37a2f","slug":"zl/2016-01-01-488_BCB中C与Lua互相函数变量调用代码","date":"2024-04-03T03:47:35.768Z","updated":"2024-04-03T03:47:35.769Z","comments":true,"path":"api/articles/zl/2016-01-01-488_BCB中C与Lua互相函数变量调用代码.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<div class=\"main-content-wrap\">\n              <p>BCB中C与Lua互相函数变量调用代码</p>\n<p></p>\n<pre><code class=\"language-CPP\">\n/*\n\n* 转载请带上此行: FreedomKnight_Duzhi     E_mail:\n\n*/\n\n本代码需要三个Label,三个Button,一个BCB编译好的Lua5.1.2库或者原码.需要的请直接邮件联系我.(个人建议自己编译生成)\n\n头文件就添加俩处\n\n#include &#34;lua.hpp&#34;\nlua_State *l;\n\n//---------------------------------------------------------------------------\n\n#include &lt;vcl.h&gt;\n#pragma hdrstop\n\n#include &#34;Unit1.h&#34;\n//---------------------------------------------------------------------------\n#pragma package(smart_init)\n#pragma resource &#34;*.dfm&#34;\nTForm1 *Form1;\nlua_State *L;\n\n\n//---------------------------------------------------------------------------\n\n/*\n提供给lua调用,有格式要求\n\n在cbuilder中通过堆栈来获得lua的参数，经过该函数处理后，\n也将按栈方式返回，按左序压入\n\n通过lua_gettop获得调用函数的传入参数个数。\n\n第一个参数在索引 1 的地方，最后一个参数在索引 lua_gettop(L) 处。\n返回一个结果时，也是通过左序压到堆栈上（第一个返回值最先压入），然后返回这些返回值的个数。\n在这些返回值之下的，堆栈上的东西都会被 Lua 丢掉。\n*/\nint mytest_call(lua_State *L)\n&#123;\n     int n = lua_gettop(L);\n\n     //typedef double lua_Number;\n     //Lua 中数字的类型。确省是 double ，可以在luaconf.h 中修改它\n     lua_Number sum = 0;\n     int i;\n     for (i = 1; i &lt;= n; i++)\n&#123;\n      //lua调用该函数参数时是从栈上索引为1开始\n      sum -= lua_tonumber(L, i);     // 保证传入的参数是数值类型，否则会报错。\n     &#125;\n\n     lua_pushnumber(L, sum);      //返回值压入栈传回\n     return 1;                   //返回参数数量值\n&#125;\n\n\n//--------------------------------------------------------------------------\n\n__fastcall TForm1::TForm1(TComponent* Owner) \n: TForm(Owner) \n&#123;\n// 打开新的lua库\n    L = lua_open();\n    luaopen_base(L);\n    luaopen_string(L);\n\n\n    //将主程序中的mytest_call函数注册到lua引擎中,\n    //脚本用mytest回调宿主程序\n    lua_register(L, &#34;mytest&#34;, mytest_call);\n\n\n     //加载脚本\n    String sFileName = &#34;E:\\VCProject\\BCB_lua_try05_25\\Lua_test1.lua&#34;;\n    luaL_dofile(L, sFileName.c_str());\n&#125;\n\n//---------------------------------------------------------------------------\n\nvoid __fastcall TForm1::FormClose(TObject *Sender, TCloseAction &amp;Action)\n&#123;\n// 清空Lua栈和对象，释放所有动态内存\nlua_close(L);\n&#125;\n\n//---------------------------------------------------------------------------\n\nvoid __fastcall TForm1::Button1Click(TObject *Sender)\n&#123;\n     //加载后要用lua_resume运行.\n     // lua_resume(L,0);\n\n     //调用脚本中函数\n     lua_getglobal(L, &#34;lua_func1&#34;);\n\n     //传给lua_func1参数1,参数2\n     lua_pushnumber(L, 21);\n     lua_pushnumber(L, 23);\n\n     //调用lua中函数，传入个参数，有一个返回值 ，看lua_call 和lua_pcall区别\nint    nErr = lua_pcall(L, 2, 1, 0);\nif(    nErr == LUA_ERRERR )\n    &#123;\n     ShowMessage( &#34;在运行错误处理函数时发生的错误&#34; );\n    &#125;\nif(    nErr == LUA_ERRMEM )\n    &#123;\n     ShowMessage( &#34;内存分配错误&#34; );\n    &#125;\nif(    nErr == LUA_ERRRUN )\n    &#123;\n     AnsiString s3 =    lua_tostring(L, -1);\n     ShowMessage(s3);\n    &#125;\n     // lua_call( L, 2, 1 );\n\n     lua_Number retsum;\n\n     //注意返回值是通过\n     retsum = lua_tonumber(L, -1);\n     Label1-&gt;Caption = IntToStr((int)retsum);\nLabel2-&gt;Caption = lua_tostring(L, -1);\n&#125;\n\n//---------------------------------------------------------------------------\n\nvoid __fastcall TForm1::Button2Click(TObject *Sender)\n&#123;\n     //用lua_resume运行.\n    // lua_resume(L,0);\n\n     lua_getglobal(L,&#34;lua_fun3&#34;);\n     lua_pushnumber(L, 100);\n     lua_pcall(L, 1, 1, 0);\n     Label2-&gt;Caption = lua_tostring(L, -1);\n\n\n     //测试调用lua中全局变量，\n     lua_getglobal(L, &#34;retStr&#34;);\n     Label3-&gt;Caption = lua_tostring(L, -1);\n&#125;\n\n//---------------------------------------------------------------------------\n\nvoid __fastcall TForm1::Button3Click(TObject *Sender)\n&#123;\n    // lua_resume(L,0);\n\n     //调用脚本中函数\n     lua_getglobal(L, &#34;lua_func2&#34;);\n\n     //传给lua_func1参数1,参数2\n     lua_pushnumber(L, 21);\n     lua_pushnumber(L, 55);\n\n     //调用lua中函数，传入个参数，有一个返回值 ，看lua_call 和lua_pcall区别\n     lua_pcall(L, 2, 1, 0);\n\n     lua_Number retsum;\n     //注意返回值是通过\n     retsum = lua_tonumber(L,-1);\n     Label1-&gt;Caption = lua_tostring(L, -1);\n     Label2-&gt;Caption = IntToStr((int)retsum);\n&#125;\n\n//---------------------------------------------------------------------------\n\n以下是Lua_test1.lua中的内容\n\n\nretStr=&#34;123&#34;\n\nfunction lua_fun3(ss)\n    ss = ss .. &#34;&lt;-参数SS的值&#34;\n    retStr = &#34;这是内部变量Str值&#34;\n    return ss\nend\n\nfunction lua_func2(val1, val2)\nsum = val1+val2\nreturn sum\nend\n\nfunction lua_func1(val1, val2)\n-- 调用cbuilder中函数\nval1 = mytest(val1, val2)\nreturn val1\nend\n\n</code></pre>\n<pre><code>        &lt;/div&gt;\n</code></pre>\n","text":" BCB中C与Lua互相函数变量调用代码 /* * 转载请带上此行: FreedomKnight_Duzhi E_mail: */ 本代码需要三个Label,三个Button,一个BCB编译好的Lua5.1.2库或者原码.需要的请直接邮件联系我.(个人建议自己编译生成) 头文件就...","link":"","photos":[],"count_time":{"symbolsCount":"4.3k","symbolsTime":"4 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Lua 学习 chapter4","uid":"1babe7f63fb1a605119f0a71ddea3222","slug":"zl/2016-01-01-487_Lua 学习 chapter4 ","date":"2024-04-03T03:47:35.768Z","updated":"2024-04-03T03:47:35.768Z","comments":true,"path":"api/articles/zl/2016-01-01-487_Lua 学习 chapter4 .json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"目录 字符串常量 强制类型转换 字符串的标准库 Unicode编码 I think you should do your best when you are work. 字符串常量 在lua中你可以使用一对双引号或者单引号来声明字符串常量。 它们两个是等价的，唯一区别在于，使用双...","link":"","photos":[],"count_time":{"symbolsCount":"2k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Lua string 哈希碰撞","uid":"238efc63608af17eea7a4ab65a98f6e7","slug":"zl/2016-01-01-484_Lua string 哈希碰撞 ","date":"2024-04-03T03:47:35.767Z","updated":"2024-04-03T03:47:35.768Z","comments":true,"path":"api/articles/zl/2016-01-01-484_Lua string 哈希碰撞 .json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"Lua 中 40 字节以下的字符串会被内部化到一张表中(Lua 5.3)，这张表挂在 global state 结构下。对于短字符串，相同的串在同一虚拟机上只会存在一份，这被称为字符串的内部化。 其实字符串在 Lua VM 中是以两种内部形式保存的：短字符串及长字符串。其界限默认...","link":"","photos":[],"count_time":{"symbolsCount":"2.2k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}