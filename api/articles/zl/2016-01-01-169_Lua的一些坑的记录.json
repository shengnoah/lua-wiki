{"title":"Lua的一些坑的记录","uid":"7568e7cf6fdf0fe69d16d835e9f09b0a","slug":"zl/2016-01-01-169_Lua的一些坑的记录","date":"2024-04-03T03:47:33.055Z","updated":"2024-04-03T03:47:33.059Z","comments":true,"path":"api/articles/zl/2016-01-01-169_Lua的一些坑的记录.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<p>Lua是一门很小巧的编程语言，不过使用过程中发下一些容易出现问题的地方，这里记录一下（API正常使用不记录）。记录时使用的版本是官方Lua 5.3.4版本源码.</p>\n<ul>\n<li><p>Lua的table区分数组部分和哈希表部分，数组部分索引从1开始，而不是0-based</p>\n</li>\n<li><p>Lua的C API中的lua_isstring和lua_isnumber有点坑</p>\n</li>\n</ul>\n<figure class=\"highlight lisp\"><table><tbody><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div></pre></td><td class=\"code\"><pre><div class=\"line\">LUA_API int lua_isnumber (<span class=\"name\">lua_State</span> *L, int idx) {</div><div class=\"line\">    lua_Number n;</div><div class=\"line\">    const TValue *o = index2addr(<span class=\"name\">L</span>, idx)</div><div class=\"line\">    return tonumber(<span class=\"name\">o</span>, <span class=\"symbol\">&amp;n</span>)<span class=\"comment\">;   // 坑，会执行转换成number类型改动栈</span></div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\">LUA_API int lua_isstring (<span class=\"name\">lua_State</span> *L, int idx) {</div><div class=\"line\">    const TValue *o = index2addr(<span class=\"name\">L</span>, idx)</div><div class=\"line\">    // 坑，这里逻辑是看能否转换成string，之后如果调用lua_tostring会改动栈中值，在遍历table判断key的时候就悲催了</div><div class=\"line\">    return (<span class=\"name\">ttisstring</span>(<span class=\"name\">o</span>) || cvt2str(<span class=\"name\">o</span>))<span class=\"comment\">;  </span></div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\">-- 容易导致错误的使用比如</div><div class=\"line\">lua_State *L = luaL_newstate();</div><div class=\"line\">luaL_dostring(L, &#34;a={};a[2]=123&#34;);</div><div class=\"line\">lua_getglobal(L, &#34;a&#34;);</div><div class=\"line\"></div><div class=\"line\">lua_pushnil(L);</div><div class=\"line\">while(lua_next(L, -2))</div><div class=\"line\">{</div><div class=\"line\">    auto is_string_key = lua_isstring(L, -2);</div><div class=\"line\">    if (lua_isstring(L, -2))</div><div class=\"line\">    {</div><div class=\"line\">        printf(&#34;%s=&#34;, luaL_checkstring(L, -2));</div><div class=\"line\">    }</div><div class=\"line\">    else if(lua_isinteger(L, -2))</div><div class=\"line\">    {</div><div class=\"line\">        printf(&#34;%d=&#34;, luaL_checkinteger(L, -2));</div><div class=\"line\">    }</div><div class=\"line\">    printf(&#34;%dn&#34;, luaL_checkinteger(L, -1));</div><div class=\"line\">    lua_pop(L, 1);</div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\">lua_close(L);</div><div class=\"line\"></div><div class=\"line\">-- 以上这段代码会进程崩溃,因为错误的对int值进行了luaL_checkstring(或lua_tostring)导致当前lua虚拟堆栈被改写，然后lua_next的时候会找不到正确的key，然后报错崩溃</div><div class=\"line\">-- 而下面这样写就正常了</div><div class=\"line\">lua_State *L = luaL_newstate()</div><div class=\"line\">    </div><div class=\"line\">luaL_dostring(<span class=\"name\">L</span>, <span class=\"string\">&#34;a={};a[2]=123&#34;</span>)</div><div class=\"line\">lua_getglobal(<span class=\"name\">L</span>, <span class=\"string\">&#34;a&#34;</span>)</div><div class=\"line\"></div><div class=\"line\">lua_pushnil(<span class=\"name\">L</span>)</div><div class=\"line\">while(<span class=\"name\">lua_next</span>(<span class=\"name\">L</span>, <span class=\"number\">-2</span>))</div><div class=\"line\">{</div><div class=\"line\">    auto is_string_key = lua_isstring(<span class=\"name\">L</span>, <span class=\"number\">-2</span>)</div><div class=\"line\">    if(<span class=\"name\">lua_isinteger</span>(<span class=\"name\">L</span>, <span class=\"number\">-2</span>))</div><div class=\"line\">    {</div><div class=\"line\">        printf(<span class=\"string\">&#34;%d=&#34;</span>, luaL_checkinteger(<span class=\"name\">L</span>, <span class=\"number\">-2</span>))</div><div class=\"line\">    } </div><div class=\"line\">    else if (<span class=\"name\">lua_isstring</span>(<span class=\"name\">L</span>, <span class=\"number\">-2</span>))</div><div class=\"line\">    {</div><div class=\"line\">        printf(<span class=\"string\">&#34;%s=&#34;</span>, luaL_checkstring(<span class=\"name\">L</span>, <span class=\"number\">-2</span>))</div><div class=\"line\">    }</div><div class=\"line\">    printf(<span class=\"string\">&#34;%dn&#34;</span>, luaL_checkinteger(<span class=\"name\">L</span>, <span class=\"number\">-1</span>))</div><div class=\"line\">    lua_pop(<span class=\"name\">L</span>, <span class=\"number\">1</span>)<span class=\"comment\">;</span></div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\">lua_close(<span class=\"name\">L</span>)<span class=\"comment\">;</span></div><div class=\"line\"></div><div class=\"line\">-- lua_isnumber也有类似问题，实现中是调用lua_tonumber看能否转换成number类型来判断，而这会改动lua虚拟堆栈结构，在遍历lua table的时候有问题</div></pre></td></tr></tbody></table></figure>\n<ul>\n<li><p>Lua的C API中的lua_type函数，得到的类型可以用来判断布尔，nil，字符串类型,比如lua_type(L, -1) == LUA_TSTRING,但是不能用来直接判断整数，不能lua_type(L, -1) == LUA_TNUMINT  因为Lua 5.3中虽然区分了int和number类型，把整数和浮点数区分出来了，但是lua_type的返回类型都是LUA_TNUMBER，LUA_TNUMINT和LUA_TNUMFLT都是LUA_TNUMBER进行偏移后的结果。需要判断类型的时候整数需要使用lua_isinteger(L,-1)，浮点数需要使用lua_type(L, -1) == LUA_TNUMBER</p>\n</li>\n<li><p>Lua的一些函数比如#，ipairs, table中一些函数，都是只对Lua table中的数组部分起效果，建议不要对同一个lua table同时使用数组部分和哈希表部分，可能容易出错。我们的做法是对Lua语言做了修改，增加了可选的类型声明和编译期静态类型系统并区分了Array<t>和Map<t>类型，减少混用导致的问题。</t></t></p>\n</li>\n<li><p>Lua中的数学操作符，必须参数都是数字，注意使用时候不要错误使用了类型，包括nil也不行，比如+/-/*//还有其他一些数学操作符</p>\n</li>\n<li><p>注意区分lua_pcall/lua_pcallk和lua_call/lua_callk的使用区分，前者是runproteced模式下运行，也就是会捕获运行时异常并处理，不对使用者再直接抛出异常崩溃.但是也不要乱用lua_pcall，只在最外层使用</p>\n</li>\n<li><p>暂时就想到这些，以前可能也碰到一些其他问题没记录下来，以后我想起或者又碰到了再补充</p>\n</li>\n</ul>","text":"Lua是一门很小巧的编程语言，不过使用过程中发下一些容易出现问题的地方，这里记录一下（API正常使用不记录）。记录时使用的版本是官方Lua 5.3.4版本源码. Lua的table区分数组部分和哈希表部分，数组部分索引从1开始，而不是0-based Lua的C API中的lua_...","link":"","photos":[],"count_time":{"symbolsCount":"2.5k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"LeetCode 399. Evaluate Division  ","uid":"cb334b4622db6fe8d9c4092b783ee545","slug":"zl/2016-01-01-16_LeetCode 399. Evaluate Division  ","date":"2024-04-03T03:47:33.059Z","updated":"2024-04-03T03:47:33.059Z","comments":true,"path":"api/articles/zl/2016-01-01-16_LeetCode 399. Evaluate Division  .json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":" &lt;i class=&quot;mobile-toggle&quot; style=&quot;display:none;&quot;&gt;&lt;img src=&quot;https://img.dazhuanlan.com/2019/11/26/5ddcf6326f...","link":"","photos":[],"count_time":{"symbolsCount":"3.8k","symbolsTime":"3 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Lua 表序列化与反序列化","uid":"c4ed4c59694f75fec9b905a00c141865","slug":"zl/2016-01-01-168_Lua 表序列化与反序列化","date":"2024-04-03T03:47:33.055Z","updated":"2024-04-03T03:47:33.055Z","comments":true,"path":"api/articles/zl/2016-01-01-168_Lua 表序列化与反序列化.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"前言今天看了下同事写的关于 Lua 序列化的代码，觉得代码存在几个问题，其主要欠缺以下几点： 1.支持循环引用的 table，反序列后，能正确恢复循环引用状态，如：12local a = {1, 2, 3}a.b = {4, 5, 6, a} 2.字符串内支持内嵌双引号、支持转义...","link":"","photos":[],"count_time":{"symbolsCount":"2.6k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}