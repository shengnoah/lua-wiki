{"title":"cocos2dx lua 常见错误汇总与解决方案","uid":"fed77f3763ddef52e3228c6f3ec148b5","slug":"zl/2016-01-01-427_cocos2dx lua 常见错误汇总与解决方案","date":"2024-04-03T03:47:35.718Z","updated":"2024-04-03T03:47:35.718Z","comments":true,"path":"api/articles/zl/2016-01-01-427_cocos2dx lua 常见错误汇总与解决方案.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<p>cocos2dx lua开比较苦恼的是，没办法断点或者直接一步一步调试处理，但是幸好官方有点良心，给了一个打印的调试Log，我们可以使用它调试和查找对应的错误。</p>\n<p>这里就记录一些，个人学习和实战中遇到的一些错误和问题的总结</p>\n<ul>\n<li>not found view “ApiTest” in search paths “app.views”  <ul>\n<li>ApiTest不在Views里面或者名字写错了，或者没有初始化</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>attempt to index upvalue ‘HttpSingleton’ (a boolean value)<ul>\n<li>末尾没有返回HttpSingleton</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>attempt to index local ‘self’ (a nil value) <ul>\n<li>参数传错了或者将逗号(.)与冒号(:)搞混了</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>attempt to call method ‘schedulerScriptFunc’ (a nil value)<ul>\n<li>方法写错了</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>attempt to call global ‘getScheduler’ (a nil value)<ul>\n<li>代码或者语法错误</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>syntax error during pre-compilation<ul>\n<li>严重的语法错误</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>invalid ‘cobj’ in function ‘lua_cocos2dx_Node_getLocalZOrder’<ul>\n<li>这个报错是lua的变量还在，但是他底层对应的C++对象已被销毁。</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>InterpolationMissingOptionError: Bad value substitution:<ul>\n<li>在执行genbindings.py脚本文件时，不要在该文件的外部路径执行，需要CD到该文件目录下执行./genbindings.py</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>TranslationUnitLoadError: Error parsing translation unit.<ul>\n<li>基本都是.ini文件没有配置正确，仔细检查一下 .ini文件里的 “headers = ”指向的路径是否正确</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>Xcode编译错误，header error<ul>\n<li>再此外，把.hpp和.cpp加进cocos2d_lua_bindings.xcodeproj时，target需要勾选ios。在设置 UserHeaderSearchPaths 时，注意选择该proj的Ios target进行设置 ，不要选择了mac target 选项，否则ios环境编译不过</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>mportError: No module named yaml<ul>\n<li>安装了yaml模块，如果还是报错找不到这个模块，这个就是是路径问题，因为我从新安装了python，然而：这里使用的python是系统默认的#!/usr/bin/python，处理好python版本和当前匹配的版本<ul>\n<li>网上说还有其他方式解决(待验证)<ul>\n<li>import sys</li>\n<li>sys.path.append(‘/xxx/xxxxx/‘) 加进去也行。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>attempt to perform arithmetic on local ‘x’ (a nil value)<ul>\n<li>忘了记录…..</li>\n</ul>\n</li>\n</ul>\n<p>这里专门说需要关于cocos2dx lua开发中的错误，其实cocos2dx lua中也和iOS中一样，分为两种错误：编译时错误和运行时错误</p>\n<ul>\n<li>编译错误，一般是语法上存在问题，编译过不去;</li>\n<li>运行错误，是指程序在运行过程中出现错误，只能说是程序存在一定的边界bug;</li>\n</ul>\n<h3 id=\"编译时错误和运行时错误\"><a href=\"#编译时错误和运行时错误\" class=\"headerlink\" title=\"编译时错误和运行时错误\"></a>编译时错误和运行时错误</h3><h4 id=\"编译错误，\"><a href=\"#编译错误，\" class=\"headerlink\" title=\"编译错误，\"></a>编译错误，</h4><p>比如上面一条</p>\n<pre><code>error:syntax error during pre-compliation\n</code></pre><p>就属于编译语法错误，这里报错其实还会有一些提示信息，如果我们可以通过提示信息，找到LuaStack，在LuaStack中有个LuaStack::luaLoadBuffer(…)，然后查看源码如下：</p>\n<pre><code>switch (r)\n&#123;\n　　case LUA_ERRSYNTAX:     // 编译出错\n　　CCLOG(&#34;[LUA ERROR] load &#34;%s&#34;, error: syntax error during pre-compilation.&#34;, chunkName);\n　　break;\n　　case LUA_ERRMEM:        // 内存分配错误\n　　CCLOG(&#34;[LUA ERROR] load &#34;%s&#34;, error: memory allocation error.&#34;, chunkName);\n　　break;\n　　case LUA_ERRRUN:        // 运行错误\n　　CCLOG(&#34;[LUA ERROR] load &#34;%s&#34;, error: run error.&#34;, chunkName);\n　　break;\n　　case LUA_YIELD:         // 线程被挂起\n　　CCLOG(&#34;[LUA ERROR] load &#34;%s&#34;, error: thread has suspended.&#34;, chunkName);\n　　break;\n　　case LUA_ERRFILE:\n　　CCLOG(&#34;[LUA ERROR] load &#34;%s&#34;, error: cannot open/read file.&#34;, chunkName);\n　　break;\n　　case LUA_ERRERR:        // 运行错误处理函数时发生错误\n　　CCLOG(&#34;[LUA ERROR] load &#34;%s&#34;, while running the error handler function.&#34;, chunkName);\n　　break;\n　　default:\n　　CCLOG(&#34;[LUA ERROR] load &#34;%s&#34;, error: unknown.&#34;, chunkName);\n&#125;\n</code></pre><p>所以，无论怎样，出现错误时，都能将错误信息返回到堆栈的最顶层</p>\n<h5 id=\"如果遇到编译错误是，可以通过如下的代码来打印错误信息：在以上-之外的后面加\"><a href=\"#如果遇到编译错误是，可以通过如下的代码来打印错误信息：在以上-之外的后面加\" class=\"headerlink\" title=\"如果遇到编译错误是，可以通过如下的代码来打印错误信息：在以上{}之外的后面加\"></a>如果遇到编译错误是，可以通过如下的代码来打印错误信息：在以上{}之外的后面加</h5><pre><code>const char* error = lua_tostring(L, -1);\nCCLOG(&#34;[LUA ERROR] error result: %s&#34;,error);\nlua_pop(L, 1);\n</code></pre><p>　　</p>\n<h4 id=\"运行错误\"><a href=\"#运行错误\" class=\"headerlink\" title=\"运行错误\"></a>运行错误</h4><p>而针对于运行错误，一般情况下，你可以参考如下代码(此代码在main.lua中)：</p>\n<pre><code>-- lua提供，调用其他函数，可以捕捉到错误，第一个参数为要调用的函数， 第二个参数为捕捉到错误时所调用的函数\n-- 返回的参数status为错误状态， msg为错误信息\nlocal status, msg = xpcall(main, __G__TRACKBACK__)\nif not status then\nprint(msg)\nend\n</code></pre><ul>\n<li>推荐<ul>\n<li><a href=\"http://www.cocoachina.com/bbs/read.php?tid=200145\" target=\"_blank\" rel=\"noopener noreferrer\">http://www.cocoachina.com/bbs/read.php?tid=200145</a></li>\n<li><a href=\"https://blog.csdn.net/msdb198901/article/details/52128175\" target=\"_blank\" rel=\"noopener noreferrer\">https://blog.csdn.net/msdb198901/article/details/52128175 </a></li>\n</ul>\n</li>\n</ul>","text":"cocos2dx lua开比较苦恼的是，没办法断点或者直接一步一步调试处理，但是幸好官方有点良心，给了一个打印的调试Log，我们可以使用它调试和查找对应的错误。 这里就记录一些，个人学习和实战中遇到的一些错误和问题的总结 not found view “ApiTest” in s...","link":"","photos":[],"count_time":{"symbolsCount":"3.1k","symbolsTime":"3 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BC%96%E8%AF%91%E6%97%B6%E9%94%99%E8%AF%AF%E5%92%8C%E8%BF%90%E8%A1%8C%E6%97%B6%E9%94%99%E8%AF%AF\"><span class=\"toc-text\">编译时错误和运行时错误</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%BC%96%E8%AF%91%E9%94%99%E8%AF%AF%EF%BC%8C\"><span class=\"toc-text\">编译错误，</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%A6%82%E6%9E%9C%E9%81%87%E5%88%B0%E7%BC%96%E8%AF%91%E9%94%99%E8%AF%AF%E6%98%AF%EF%BC%8C%E5%8F%AF%E4%BB%A5%E9%80%9A%E8%BF%87%E5%A6%82%E4%B8%8B%E7%9A%84%E4%BB%A3%E7%A0%81%E6%9D%A5%E6%89%93%E5%8D%B0%E9%94%99%E8%AF%AF%E4%BF%A1%E6%81%AF%EF%BC%9A%E5%9C%A8%E4%BB%A5%E4%B8%8A-%E4%B9%8B%E5%A4%96%E7%9A%84%E5%90%8E%E9%9D%A2%E5%8A%A0\"><span class=\"toc-text\">如果遇到编译错误是，可以通过如下的代码来打印错误信息：在以上{}之外的后面加</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%BF%90%E8%A1%8C%E9%94%99%E8%AF%AF\"><span class=\"toc-text\">运行错误</span></a></li></ol></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Vanilla （lua web framework）中文文档 [2018.09.19]","uid":"86e8629cb9957ff7d89a2091971ba184","slug":"zl/2016-01-01-431_Vanilla （lua web framework）中文文档 [2018.09.19]","date":"2024-04-03T03:47:35.719Z","updated":"2024-04-03T03:47:35.719Z","comments":true,"path":"api/articles/zl/2016-01-01-431_Vanilla （lua web framework）中文文档 [2018.09.19].json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"0、前言香草/Vanilla是一个基于Openresty实现的高性能Web应用开发框架. 邮件列表 vanilla-en vanilla-en@googlegroups.com vanilla-devel vanilla-devel@googlegroups.com vanill...","link":"","photos":[],"count_time":{"symbolsCount":"8.5k","symbolsTime":"8 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"The Evaluation of Sentence Similarity","uid":"78153e09a4f78ad785398cbaeffd1088","slug":"zl/2016-01-01-429_The Evaluation of Sentence Similarity","date":"2024-04-03T03:47:35.718Z","updated":"2024-04-03T03:47:35.718Z","comments":true,"path":"api/articles/zl/2016-01-01-429_The Evaluation of Sentence Similarity.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"I am trying to write my first english blog based on two reasons: First, the data set used in this blog is english; Second, I’d like to expan...","link":"","photos":[],"count_time":{"symbolsCount":"8.7k","symbolsTime":"8 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}