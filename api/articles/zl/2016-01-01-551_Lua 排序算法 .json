{"title":"Lua 排序算法","uid":"18c65ae79c1521b9ec150d64b8237a42","slug":"zl/2016-01-01-551_Lua 排序算法 ","date":"2024-04-03T03:47:35.818Z","updated":"2024-04-03T03:47:35.818Z","comments":true,"path":"api/articles/zl/2016-01-01-551_Lua 排序算法 .json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<p>设有一组关键字｛K1， K2，…， Kn｝；排序开始就认为 K1 是一个有序序列；让 K2 插入上述表长为 1 的有序序列，使之成为一个表长为 2 的有序序列；然后让 K3 插入上述表长为 2 的有序序列，使之成为一个表长为 3 的有序序列；依次类推，最后让 Kn 插入上述表长为 n-1 的有序序列，得一个表长为 n 的有序序列。</p>\n<h5 id=\"算法步骤\">算法步骤</h5>\n<ol>\n  <li>从第一个元素开始，该元素可以认为已经被排序</li>\n  <li>取出下一个元素，在已经排序的元素序列中从后向前扫描</li>\n  <li>如果该元素（已排序）大于新元素，将该元素移到下一位置</li>\n  <li>重复步骤 3，直到找到已排序的元素小于或者等于新元素的位置</li>\n  <li>将新元素插入到该位置后</li>\n  <li>重复步骤 2~5</li>\n</ol>\n<h5 id=\"动画演示\">动画演示</h5>\n<p><img src=\"https://qmsheng.github.io//img/in-post/sort/Insertion-sort-example.gif\" alt=\"Alt text\"/></p>\n<h5 id=\"lua-实现\">Lua 实现</h5>\n<div class=\"language-lua highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">local</span> <span class=\"k\">function</span> <span class=\"nf\">insertionSort</span><span class=\"p\">(</span><span class=\"n\">arr</span><span class=\"p\">)</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"o\">#</span><span class=\"n\">arr</span><span class=\"p\">,</span> <span class=\"mi\">1</span> <span class=\"k\">do</span>\n        <span class=\"kd\">local</span> <span class=\"n\">tmp</span> <span class=\"o\">=</span> <span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span>\n        <span class=\"kd\">local</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span>\n        <span class=\"k\">while</span> <span class=\"n\">j</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">1</span> <span class=\"ow\">and</span> <span class=\"n\">tmp</span> <span class=\"o\">&lt;</span> <span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"k\">do</span>\n            <span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">]</span>\n            <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"n\">j</span> <span class=\"o\">-</span> <span class=\"mi\">1</span>\n        <span class=\"k\">end</span>\n        <span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">tmp</span>\n    <span class=\"k\">end</span>\n<span class=\"k\">end</span>\n<p><span class=\"kd\">local</span> <span class=\"n\">list</span> <span class=\"o\">=</span> <span class=\"p\">&#123;</span><br />\n<span class=\"o\">-</span><span class=\"mi\">81</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">93</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">36</span><span class=\"p\">.</span><span class=\"mi\">85</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">53</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">31</span><span class=\"p\">,</span> <span class=\"mi\">79</span><span class=\"p\">,</span> <span class=\"mi\">45</span><span class=\"p\">.</span><span class=\"mi\">94</span><span class=\"p\">,</span> <span class=\"mi\">36</span><span class=\"p\">,</span> <span class=\"mi\">94</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">95</span><span class=\"p\">.</span><span class=\"mi\">03</span><span class=\"p\">,</span> <span class=\"mi\">11</span><span class=\"p\">,</span> <span class=\"mi\">56</span><span class=\"p\">,</span> <span class=\"mi\">23</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">39</span><span class=\"p\">,</span><br />\n<span class=\"mi\">14</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">20</span><span class=\"p\">.</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">21</span><span class=\"p\">,</span> <span class=\"mi\">91</span><span class=\"p\">,</span> <span class=\"mi\">31</span><span class=\"p\">,</span> <span class=\"mi\">91</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">23</span><span class=\"p\">,</span> <span class=\"mi\">36</span><span class=\"p\">.</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">44</span><span class=\"p\">,</span> <span class=\"mi\">82</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"mi\">51</span><span class=\"p\">,</span> <span class=\"mi\">96</span><span class=\"p\">,</span> <span class=\"mi\">64</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">41</span><br />\n<span class=\"p\">&#125;</span><br />\n<span class=\"n\">insertionSort</span><span class=\"p\">(</span><span class=\"n\">list</span><span class=\"p\">)</span><br />\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"nb\">table.concat</span><span class=\"p\">(</span><span class=\"n\">list</span><span class=\"p\">,</span> <span class=\"s2\">&quot;, &quot;</span><span class=\"p\">))</span><br />\n</code></pre></div></div></p>\n<pre><code>            &lt;hr style=&quot;visibility: hidden;&quot;/&gt;\n</code></pre>\n","text":"设有一组关键字｛K1， K2，…， Kn｝；排序开始就认为 K1 是一个有序序列；让 K2 插入上述表长为 1 的有序序列，使之成为一个表长为 2 的有序序列；然后让 K3 插入上述表长为 2 的有序序列，使之成为一个表长为 3 的有序序列；依次类推，最后让 Kn 插入上述表长为...","link":"","photos":[],"count_time":{"symbolsCount":878,"symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E7%AE%97%E6%B3%95%E6%AD%A5%E9%AA%A4\"><span class=\"toc-text\">算法步骤</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%8A%A8%E7%94%BB%E6%BC%94%E7%A4%BA\"><span class=\"toc-text\">动画演示</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#lua-%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">Lua 实现</span></a></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Evaluating","uid":"8cdca36e4e726105283a773513b5e4a0","slug":"zl/2016-01-01-554_Evaluating","date":"2024-04-03T03:47:35.818Z","updated":"2024-04-03T03:47:35.819Z","comments":true,"path":"api/articles/zl/2016-01-01-554_Evaluating.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"This paper proposed some evaluating guidelines from 5 aspects, including multiple runs, performance measurement, time out(running time for o...","link":"","photos":[],"count_time":{"symbolsCount":"2k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"深入 Lua Garbage Collector(二)","uid":"4bed524af92ecfb3c4f291a01615c437","slug":"zl/2016-01-01-548_深入 Lua Garbage Collector(二)","date":"2024-04-03T03:47:35.817Z","updated":"2024-04-03T03:47:35.817Z","comments":true,"path":"api/articles/zl/2016-01-01-548_深入 Lua Garbage Collector(二).json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":" 这一篇我们主要介绍一下 Lua 的 GC 机制 Lua垃圾回收器函数Lua 提供了以下函数 collectgarbage ([opt [, arg]]) 用来控制自动内存管理: collectgarbage(“collect”): 做一次完整的垃圾收集循环。通过参数 opt 它...","link":"","photos":[],"count_time":{"symbolsCount":"2.3k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}