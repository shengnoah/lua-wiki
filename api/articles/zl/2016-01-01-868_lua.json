{"title":"lua","uid":"df60e476b394b1dd4755ec96c53302ff","slug":"zl/2016-01-01-868_lua","date":"2024-04-03T03:47:36.138Z","updated":"2024-04-03T03:47:36.139Z","comments":true,"path":"api/articles/zl/2016-01-01-868_lua.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<p><br/>因为决定学习开发网关kong的插件，所以需要学习lua语言，正在从<a href=\"https://www.runoob.com/lua/\" target=\"_blank\" rel=\"noopener noreferrer\">Lua 菜鸟教程</a>学习<br/><br/>关于kong插件开发的博客 <a href=\"https://www.jianshu.com/p/68457b42b84f\" target=\"_blank\" rel=\"noopener noreferrer\">链接1</a><br/><br/>发现一个很有意思的lua 模块  :openresty 的lua-resty-template 模块，提供模板渲染的功能<br/><br/>准备在网关处进行对于token的检验工作，由于没有使用已有的oauth server 插件，所以需要自己写个额外插件<br/>    在这个插件中主要需要完成的工作是从cookie 中 提取出 token ,并以此为凭借到oauth  server 进行相关检验，如果检验成功，应当返回id 以及这个token的ttl ,网关处获得id 应当 将之体现在日志里(插件逻辑处新建header,在nginx日志处自定义日志格式,指明该id或者在网关处建立与oauth server相同的用户体系，起码账户名一致，这样根据id 可以从数据库中提取出相应的consumer credential ,这样的话可以用于后续的基于用户的限流等操作)<br/>主要点在于1.Lua中进行http 操作  ,<a href=\"https://github.com/ledgetech/lua-resty-http#request\" target=\"_blank\" rel=\"noopener noreferrer\">Github 源码文档</a><br/>        2.考虑对token进行缓存,[‘token’,’id’,ttl],这样无需多次存取(可能带来的问题有，注销登录后如何通知网关注销token：这又分为两种注销后不再登录和重新登陆，对于后者可以下次请求经过网关时,注销相同id的键值对)<br/>        <a href=\"https://github.com/openresty/lua-resty-redis/\" target=\"_blank\" rel=\"noopener noreferrer\">Github lua-resty-redis</a><br/>        <a href=\"https://github.com/Kong/kong/blob/master/kong/plugins/rate-limiting/policies/init.lua\" target=\"_blank\" rel=\"noopener noreferrer\">Kong rate-limiting 插件</a>中涉及对于redis的操作,可以观摩下</p>\n<p><br/>目前在网关处验证用户身份成功后，在后端为避免再次检验身份的需要，因此需要网关提供给后端身份凭据，认可这次身份凭据，同时应当提供某种验证手段，让后端验证请求是否身份凭据是否是真的/是否是伪造<br/>方案1 ：利用某种对称加密算法,网关对用户身份进行加密,后端以相同的密钥进行解密,得到身份<br/>        确定使用AES算法<a href=\"https://github.com/openresty/lua-resty-string/\" target=\"_blank\" rel=\"noopener noreferrer\">Github 示例</a>,在网关处使用CBC加密，相同的偏移向量,结果转化为hex格式，传输到python后端，对结果转发，解密，但是解密始终得不到正确的结果，怀疑是<a href=\"https://blog.csdn.net/diodosu/article/details/51923670\" target=\"_blank\" rel=\"noopener noreferrer\">博客</a>中提到的问题，但是我在测试中设置的加密字段,加密密钥，偏移向量都是16位的，看起来应该不会有填充的问题才对，但是解密仍然失败<br/>方案2 ：采取非对称加密算法，在网关处向后端传递两个header：userid,encrypted 在网关处按照某种方法加密得到 encrypt header,后端使用同样的方法加密，如果结果相同，则认为 userid 经过了网关的认证，同时加密内容应当是网关与后端之间相互约定的动态的内容</p>\n<p><br/>2020-1-10 代码更新，把硬编码信息改为插件的配置输入<br/>curl -i -X POST <a href=\"http://localhost:8001/plugins\" target=\"_blank\" rel=\"noopener noreferrer\">http://localhost:8001/plugins</a> <br/>–data “name=kong-plugin-myplugin” <br/>–data “config.sso_domain=SS0_DOMAIN” <br/>–data “config.check_path=CHECK_PATH” <br/>–data “config.front_domain=FRONT_DOMAIN” <br/>–data “config.client=CLIENT_JSON”</p>\n<p>其中需要注意的是，kong网关对于插件配置的输入中对于字符 ‘&amp;’ 的支持不好，而使用’&amp;’的话，网关处接收后会转化为’\\&amp;’,看起来很不舒服，然后我 使用 ‘a’ 字符代表 ‘&amp;’,在插件处理逻辑处再替换回来(需要注意的是如果单个的’&#39;存在，会影响 string 转化为 json)</p>","text":"因为决定学习开发网关kong的插件，所以需要学习lua语言，正在从Lua 菜鸟教程学习关于kong插件开发的博客 链接1发现一个很有意思的lua 模块 :openresty 的lua-resty-template 模块，提供模板渲染的功能准备在网关处进行对于token的检验工作，...","link":"","photos":[],"count_time":{"symbolsCount":"1.5k","symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Redis Lua scripts debugger使用","uid":"f1867e278df46ddd186c73afab0cb98b","slug":"zl/2016-01-01-869_Redis Lua scripts debugger使用","date":"2024-04-03T03:47:36.139Z","updated":"2024-04-03T03:47:36.141Z","comments":true,"path":"api/articles/zl/2016-01-01-869_Redis Lua scripts debugger使用.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"背景说明使用Redis开发分布式应用时，难免会遇到需要使用分布式锁来确保某一小段逻辑的原子性操作，如：当存在某个key对应的值A大于值B时，则返回false；否则A + 1。试想一下，如果用到分布式锁，是不是有点感觉像是杀鸡用宰牛刀？ 由于Redis的操作都是原子性的，所以我们可...","link":"","photos":[],"count_time":{"symbolsCount":"1.9k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Nginx_Lua_Module扩展的安装与配置_适用于Ubuntu系统","uid":"c8f0056864d5f78dae05a2d947e131e3","slug":"zl/2016-01-01-866_Nginx_Lua_Module扩展的安装与配置_适用于Ubuntu系统","date":"2024-04-03T03:47:36.134Z","updated":"2024-04-03T03:47:36.134Z","comments":true,"path":"api/articles/zl/2016-01-01-866_Nginx_Lua_Module扩展的安装与配置_适用于Ubuntu系统.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"Lua 是一个简洁、轻量、可扩展的脚本语言，也是号称性能最高的脚本语言，用在很多需要性能的地方，比如：游戏脚本，nginx，wireshark的脚本。很多应用程序使用Lua作为自己的嵌入式脚本语言，以此来实现可配置性、可扩展性。Lua原生支持的数据类型非常之少，它只提供了nil、...","link":"","photos":[],"count_time":{"symbolsCount":"33k","symbolsTime":"30 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}