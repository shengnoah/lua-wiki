{"title":"lua学习之元表和元方法","uid":"488e07f634274a724256a88ffcf3108a","slug":"zl/2016-01-01-759_lua学习之元表和元方法","date":"2024-04-03T03:47:36.005Z","updated":"2024-04-03T03:47:36.005Z","comments":true,"path":"api/articles/zl/2016-01-01-759_lua学习之元表和元方法.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<p>学习lua也有大概一年了，对lua的一些基本的语法很熟练了，也做了一些简单的业务，但是对于lua的高级特性还是不是很熟，最近有时间得以系统的学习学习。本文主要讲述的是lua高级特性之一的元表和元方法。</p>\n<h3 id=\"文字简述\"><a href=\"#文字简述\" class=\"headerlink\" title=\"文字简述\"></a>文字简述</h3><ul>\n<li><p>metatable(元表) 本质上来讲元表也是一个表，不过这个表是用来定义对lua的值进行自定义运算行为的地方。</p>\n</li>\n<li><p>metamethod(元方法) 本质上来讲就是一个lua函数，不过这个函数是用来绑定lua中特定的值，这些特定的值可以称为事件。这个函数我们可以进行我们一些自定义的操作。</p>\n<blockquote>\n<p>元表之中的事件其实是一些定义的值，这些值后面会讲到；<br/>实际上我们只能对lua中table类型的值进行修改元表和元方法的操作，其它的一些例如number, string等都已经有自己内置的元表和元方法，且不可改变。</p>\n</blockquote>\n</li>\n<li><p>通过元表和元方法，我们可以实现lua的面向对象编程。</p>\n</li>\n</ul>\n<h3 id=\"代码讲解\"><a href=\"#代码讲解\" class=\"headerlink\" title=\"代码讲解\"></a>代码讲解</h3><h4 id=\"api-介绍\"><a href=\"#api-介绍\" class=\"headerlink\" title=\"api 介绍\"></a>api 介绍</h4><p>简单的介绍一下会用到的api。</p>\n<blockquote>\n<p><code>setmetatable(table, metatable)</code> 设置table的元表为metatable并且返回这个table。不能为除table类型之外的值设置元表，如果metatable为nil，则将指定的元表移除 。如果存在<code>__metatable</code>，则会抛出一个错误。<br/><code>getmetatable(obj)</code> 返回一个类型的元表，如果没有元表返回nil。如果存在<code>__metatable</code>，则返回这个域的值。<br/><code>rawget(table, index)</code> 在不触发任何元方法的情况下获取table中的值。也就是跳过元表和元方法。<br/><code>rawset(table, index, value)</code> 在不触发任何元方法的情况下设置table[index]的值为value，index不能是nil和NaN</p>\n</blockquote>\n<h4 id=\"元方法介绍\"><a href=\"#元方法介绍\" class=\"headerlink\" title=\"元方法介绍\"></a>元方法介绍</h4><p>我们都知道对于两个number型的值，我们可以进行加，减，乘，除等的元算，但是对于table我们是不能直接进行这些预定义的运算的。但是通过通过元表和元方法我们是可以实现的；首先介绍下有哪些特定的值被用于绑定元方法，也称为事件，如下：</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/><span class=\"line\">9</span><br/><span class=\"line\">10</span><br/><span class=\"line\">11</span><br/><span class=\"line\">12</span><br/><span class=\"line\">13</span><br/><span class=\"line\">14</span><br/><span class=\"line\">15</span><br/><span class=\"line\">16</span><br/><span class=\"line\">17</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">__index</span> </span><br/><span class=\"line\"><span class=\"built_in\">__newindex</span> <span class=\"comment\">-- 用于赋值操作</span></span><br/><span class=\"line\"><span class=\"built_in\">__metatable</span> <span class=\"comment\">-- 限定元表操作</span></span><br/><span class=\"line\"><span class=\"built_in\">__call</span> <span class=\"comment\">-- 用于把一个函数当成函数调用的操作</span></span><br/><span class=\"line\"><span class=\"built_in\">__add</span> <span class=\"comment\">-- &#39;+&#39; 加</span></span><br/><span class=\"line\"><span class=\"built_in\">__sub</span> <span class=\"comment\">-- &#39;-&#39; 减</span></span><br/><span class=\"line\"><span class=\"built_in\">__mul</span> <span class=\"comment\">-- &#39;*&#39; 乘</span></span><br/><span class=\"line\"><span class=\"built_in\">__div</span> <span class=\"comment\">-- &#39;/&#39; 除</span></span><br/><span class=\"line\"><span class=\"built_in\">__mod</span> <span class=\"comment\">-- &#39;%&#39; 取余</span></span><br/><span class=\"line\"><span class=\"built_in\">__pow</span> <span class=\"comment\">-- &#39;^&#39; 次方</span></span><br/><span class=\"line\"><span class=\"built_in\">__unm</span> <span class=\"comment\">-- &#39;-&#39; 取反</span></span><br/><span class=\"line\"><span class=\"built_in\">__concat</span> <span class=\"comment\">-- &#39;..&#39; 连接</span></span><br/><span class=\"line\"><span class=\"built_in\">__tostring</span> <span class=\"comment\">-- 字符串序列话</span></span><br/><span class=\"line\"><span class=\"built_in\">__len</span> <span class=\"comment\">-- &#39;#&#39; 取长</span></span><br/><span class=\"line\"><span class=\"built_in\">__eq</span> <span class=\"comment\">-- &#39;==’ 相等</span></span><br/><span class=\"line\"><span class=\"built_in\">__lt</span> <span class=\"comment\">-- &#39;&lt;&#39; 小于</span></span><br/><span class=\"line\"><span class=\"built_in\">__le</span> <span class=\"comment\">-- &#39;&lt;=&#39; 小于等于</span></span><br/></pre></td></tr></tbody></table></figure>\n<blockquote>\n<p>对于不同的lua版本可能这些事件还有区别，具体详细的可以看lua对应版本的介绍，这里只列出了一些常用的。<br/>对于一些特定的事件进行一些简单的介绍</p>\n<blockquote>\n<ul>\n<li>__index 当我们在取一个table中的不存在这个index的值的时候，如果有元表的话，会触发这个操作，会到元表中进行查询，并且返回这个值，元表中月不存在的时候返回nil。</li>\n<li>__newindex 当我们对一个table中的一个不存在的index赋值的时候，如果有元表的话，会触发这个操作，如果元表中有定义这个行为，就按照这个进行。</li>\n<li>__metatable 使用这个元方法的时候是保护元表，进值对元表中的成员进行获取或者修改</li>\n<li>__call 使用这个的时候我们可以吧table当成函数来进行调用。</li>\n</ul>\n</blockquote>\n</blockquote>\n<h4 id=\"代码分析\"><a href=\"#代码分析\" class=\"headerlink\" title=\"代码分析\"></a>代码分析</h4><h5 id=\"简单的元方法\"><a href=\"#简单的元方法\" class=\"headerlink\" title=\"简单的元方法\"></a>简单的元方法</h5><figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/><span class=\"line\">9</span><br/><span class=\"line\">10</span><br/><span class=\"line\">11</span><br/><span class=\"line\">12</span><br/><span class=\"line\">13</span><br/><span class=\"line\">14</span><br/><span class=\"line\">15</span><br/><span class=\"line\">16</span><br/><span class=\"line\">17</span><br/><span class=\"line\">18</span><br/><span class=\"line\">19</span><br/><span class=\"line\">20</span><br/><span class=\"line\">21</span><br/><span class=\"line\">22</span><br/><span class=\"line\">23</span><br/><span class=\"line\">24</span><br/><span class=\"line\">25</span><br/><span class=\"line\">26</span><br/><span class=\"line\">27</span><br/><span class=\"line\">28</span><br/><span class=\"line\">29</span><br/><span class=\"line\">30</span><br/><span class=\"line\">31</span><br/><span class=\"line\">32</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">local</span> t1 = {<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>}</span><br/><span class=\"line\"><span class=\"keyword\">local</span> t2 = {<span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">9</span>}</span><br/><span class=\"line\"><span class=\"keyword\">local</span> t = {</span><br/><span class=\"line\">    <span class=\"built_in\">__add</span> = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(a, b)</span></span></span><br/><span class=\"line\">        <span class=\"keyword\">local</span> tmp = {}</span><br/><span class=\"line\">        <span class=\"keyword\">for</span> i = <span class=\"number\">1</span>, #a <span class=\"keyword\">do</span></span><br/><span class=\"line\">            tmp[i] = a[i] + b[i]</span><br/><span class=\"line\">        <span class=\"keyword\">end</span></span><br/><span class=\"line\">        <span class=\"keyword\">for</span> i = #tmp + <span class=\"number\">1</span>, #b <span class=\"keyword\">do</span></span><br/><span class=\"line\">            tmp[i] = b[i]</span><br/><span class=\"line\">        <span class=\"keyword\">end</span></span><br/><span class=\"line\">        <span class=\"keyword\">return</span> tmp</span><br/><span class=\"line\">    <span class=\"keyword\">end</span>,</span><br/><span class=\"line\">    <span class=\"built_in\">__tostring</span> = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(a)</span></span></span><br/><span class=\"line\">        <span class=\"keyword\">local</span> str = <span class=\"string\">&#34;&#34;</span></span><br/><span class=\"line\">        <span class=\"keyword\">local</span> split = <span class=\"string\">&#34;&#34;</span></span><br/><span class=\"line\">        <span class=\"keyword\">for</span> i = <span class=\"number\">1</span>, #a <span class=\"keyword\">do</span></span><br/><span class=\"line\">            str = str .. split .. a[i]</span><br/><span class=\"line\">            split = <span class=\"string\">&#34;|&#34;</span></span><br/><span class=\"line\">        <span class=\"keyword\">end</span></span><br/><span class=\"line\">        <span class=\"keyword\">return</span> str</span><br/><span class=\"line\">    <span class=\"keyword\">end</span></span><br/><span class=\"line\">}</span><br/><span class=\"line\"><span class=\"built_in\">setmetatable</span>(t1, t)</span><br/><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#34;t1 : &#34;</span>, t1)</span><br/><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#34;t2 : &#34;</span>, t2)</span><br/><span class=\"line\"><span class=\"keyword\">local</span> tmp = t1 + t2</span><br/><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#34;tmp : &#34;</span>, tmp)</span><br/><span class=\"line\"><span class=\"built_in\">setmetatable</span>(t2, t)</span><br/><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#34; - t2 : &#34;</span>, t2)</span><br/><span class=\"line\"><span class=\"built_in\">setmetatable</span>(tmp, t)</span><br/><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#34; - tmp : &#34;</span>, tmp)</span><br/></pre></td></tr></tbody></table></figure>\n<blockquote>\n<p>运行结果如下</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">t1 :    1|2|3</span><br/><span class=\"line\">t2 :    table: 0x16984f0</span><br/><span class=\"line\">tmp :   table: 0x16981c0</span><br/><span class=\"line\"> - t2 :         5|6|7|9</span><br/><span class=\"line\"> - tmp :        6|8|10|9</span><br/></pre></td></tr></tbody></table></figure>\n<blockquote>\n<p>当对两个table进行加(+)的操作的时候，会查找元表中对应的元方法，然后按照元方法的行为去做。其它的一些算术运算都和这个例子大同小异，就不多做介绍了。</p>\n</blockquote>\n<h5 id=\"index\"><a href=\"#index\" class=\"headerlink\" title=\"__index\"></a>__index</h5><figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">local</span> t1 = {}</span><br/><span class=\"line\"><span class=\"keyword\">local</span> t2 = {}</span><br/><span class=\"line\">t2.a = <span class=\"number\">10</span></span><br/><span class=\"line\"><span class=\"built_in\">setmetatable</span>(t1, {<span class=\"built_in\">__index</span> = t2})</span><br/><span class=\"line\"><span class=\"built_in\">print</span>(t1.a)</span><br/></pre></td></tr></tbody></table></figure>\n<blockquote>\n<p>运行结果如下</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">10</span><br/></pre></td></tr></tbody></table></figure>\n<blockquote>\n<p>当访问t1中的a的时候，t1中并没有这个值，但是t1有元表，则会到元表中查询a，并返回；<br/>__index 也可以是一个函数，用于自定义的一些行为。</p>\n</blockquote>\n<h5 id=\"newindex\"><a href=\"#newindex\" class=\"headerlink\" title=\"__newindex\"></a>__newindex</h5><figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/><span class=\"line\">9</span><br/><span class=\"line\">10</span><br/><span class=\"line\">11</span><br/><span class=\"line\">12</span><br/><span class=\"line\">13</span><br/><span class=\"line\">14</span><br/><span class=\"line\">15</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">local</span> t1 = {}</span><br/><span class=\"line\">t1.c = <span class=\"number\">30</span></span><br/><span class=\"line\"><span class=\"keyword\">local</span> t2 = {}</span><br/><span class=\"line\">t2.a = <span class=\"number\">10</span></span><br/><span class=\"line\">t2.b = <span class=\"number\">20</span></span><br/><span class=\"line\"><span class=\"built_in\">setmetatable</span>(t1, {<span class=\"built_in\">__newindex</span> = t2})</span><br/><span class=\"line\"><span class=\"built_in\">print</span>(t1.a)</span><br/><span class=\"line\"><span class=\"built_in\">print</span>(t2.a)</span><br/><span class=\"line\">t1.a = <span class=\"string\">&#34;a10&#34;</span></span><br/><span class=\"line\"><span class=\"built_in\">print</span>(t1.a)</span><br/><span class=\"line\"><span class=\"built_in\">print</span>(t2.a)</span><br/><span class=\"line\"><span class=\"built_in\">print</span>(t1.c)</span><br/><span class=\"line\">t1.c = <span class=\"string\">&#34;c10&#34;</span></span><br/><span class=\"line\"><span class=\"built_in\">print</span>(t1.c)</span><br/><span class=\"line\"><span class=\"built_in\">print</span>(t2.c)</span><br/></pre></td></tr></tbody></table></figure>\n<blockquote>\n<p>运行结果如下</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">nil</span><br/><span class=\"line\">10</span><br/><span class=\"line\">nil</span><br/><span class=\"line\">a10</span><br/><span class=\"line\">30</span><br/><span class=\"line\">c10</span><br/><span class=\"line\">nil</span><br/></pre></td></tr></tbody></table></figure>\n<blockquote>\n<p>在对t1中的变量进行赋值的时候，如果存在则直接进行赋值，如果不存在则触发__newindex，设置元表中对应的值</p>\n</blockquote>\n<h5 id=\"metatable\"><a href=\"#metatable\" class=\"headerlink\" title=\"__metatable\"></a>__metatable</h5><figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">local</span> t1 = {}</span><br/><span class=\"line\"><span class=\"keyword\">local</span> t = {}</span><br/><span class=\"line\"><span class=\"built_in\">setmetatable</span>(t1, t)</span><br/><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">getmetatable</span>(t1))</span><br/><span class=\"line\">t.<span class=\"built_in\">__metatable</span> = <span class=\"string\">&#34;lock&#34;</span></span><br/><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#34; metatable : &#34;</span>, <span class=\"built_in\">getmetatable</span>(t1))</span><br/><span class=\"line\"><span class=\"built_in\">setmetatable</span>(t1, t)</span><br/></pre></td></tr></tbody></table></figure>\n<blockquote>\n<p>运行结果如下</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">table: 0xe7f4f0</span><br/><span class=\"line\"> metatable :    lock</span><br/><span class=\"line\">lua: test.lua:11: cannot change a protected metatable</span><br/></pre></td></tr></tbody></table></figure>\n<blockquote>\n<p>在设置完__metatable域的时候，就不能再对元表进行操作了，会报错。</p>\n</blockquote>\n<h5 id=\"call\"><a href=\"#call\" class=\"headerlink\" title=\"__call\"></a>__call</h5><figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">local</span> t1 = {}</span><br/><span class=\"line\"><span class=\"built_in\">setmetatable</span>(t1, {</span><br/><span class=\"line\">    <span class=\"built_in\">__call</span> = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(t, a, b, c, ...)</span></span></span><br/><span class=\"line\">        <span class=\"keyword\">local</span> num = a + b + c</span><br/><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#34;__call str : &#34;</span>, num)</span><br/><span class=\"line\">    <span class=\"keyword\">end</span></span><br/><span class=\"line\">})</span><br/><span class=\"line\">t1(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>)</span><br/></pre></td></tr></tbody></table></figure>\n<blockquote>\n<p>运行结果如下</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">__call str :    6</span><br/></pre></td></tr></tbody></table></figure>\n<blockquote>\n<p>t1作为table，但是可以直接当成函数来进行调用，会查找__call元方法</p>\n</blockquote>\n<h5 id=\"rawget\"><a href=\"#rawget\" class=\"headerlink\" title=\"rawget\"></a>rawget</h5><figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">local</span> t1 = {}</span><br/><span class=\"line\"><span class=\"keyword\">local</span> t2 = {}</span><br/><span class=\"line\">t2.a = <span class=\"number\">20</span></span><br/><span class=\"line\"><span class=\"built_in\">setmetatable</span>(t1, {<span class=\"built_in\">__index</span> = t2})</span><br/><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#34;t1 a : &#34;</span>, t1.a)</span><br/><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#34;rawget t1 a : &#34;</span>, <span class=\"built_in\">rawget</span>(t1,a))</span><br/></pre></td></tr></tbody></table></figure>\n<blockquote>\n<p>运行结果如下</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">t1 a :  20</span><br/><span class=\"line\">rawget t1 a :   nil</span><br/></pre></td></tr></tbody></table></figure>\n<blockquote>\n<p>设置完元表后可以取到t1中的a，从元表t2中，但是用rawget的时候会会忽略元表的存在</p>\n</blockquote>\n<h5 id=\"rawset\"><a href=\"#rawset\" class=\"headerlink\" title=\"rawset\"></a>rawset</h5><figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">local</span> t1 = {}</span><br/><span class=\"line\"><span class=\"keyword\">local</span> t2 = {}</span><br/><span class=\"line\">t2.a = <span class=\"number\">20</span></span><br/><span class=\"line\"><span class=\"built_in\">setmetatable</span>(t1, {<span class=\"built_in\">__newindex</span> = t2})</span><br/><span class=\"line\">t1.b = <span class=\"string\">&#34;bbb&#34;</span></span><br/><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#34;t1 b : &#34;</span>, t1.b)</span><br/><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#34;t2 b : &#34;</span>, t2.b)</span><br/><span class=\"line\"><span class=\"built_in\">rawset</span>(t1, b, <span class=\"string\">&#34;ccc&#34;</span>)</span><br/></pre></td></tr></tbody></table></figure>\n<blockquote>\n<p>运行结果如下</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">t1 b :  nil</span><br/><span class=\"line\">t2 b :  bbb</span><br/><span class=\"line\">lua: table index is nil</span><br/></pre></td></tr></tbody></table></figure>\n<blockquote>\n<p>正常的设置完元表并且设置__newindex域之后，对t1中的不存在的b赋值的时候会触发__newindex操作，但是如果用rawset的话就会报错，rawset(t1, b, “ccc”)，会对t1中的b进行赋值，并不会触发__newindex，而t1中也没有b这个值，所以报错了。</p>\n</blockquote>\n<h5 id=\"系统代码\"><a href=\"#系统代码\" class=\"headerlink\" title=\"系统代码\"></a>系统代码</h5><p>以一个之前写的例子结束这篇介绍</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/><span class=\"line\">9</span><br/><span class=\"line\">10</span><br/><span class=\"line\">11</span><br/><span class=\"line\">12</span><br/><span class=\"line\">13</span><br/><span class=\"line\">14</span><br/><span class=\"line\">15</span><br/><span class=\"line\">16</span><br/><span class=\"line\">17</span><br/><span class=\"line\">18</span><br/><span class=\"line\">19</span><br/><span class=\"line\">20</span><br/><span class=\"line\">21</span><br/><span class=\"line\">22</span><br/><span class=\"line\">23</span><br/><span class=\"line\">24</span><br/><span class=\"line\">25</span><br/><span class=\"line\">26</span><br/><span class=\"line\">27</span><br/><span class=\"line\">28</span><br/><span class=\"line\">29</span><br/><span class=\"line\">30</span><br/><span class=\"line\">31</span><br/><span class=\"line\">32</span><br/><span class=\"line\">33</span><br/><span class=\"line\">34</span><br/><span class=\"line\">35</span><br/><span class=\"line\">36</span><br/><span class=\"line\">37</span><br/><span class=\"line\">38</span><br/><span class=\"line\">39</span><br/><span class=\"line\">40</span><br/><span class=\"line\">41</span><br/><span class=\"line\">42</span><br/><span class=\"line\">43</span><br/><span class=\"line\">44</span><br/><span class=\"line\">45</span><br/><span class=\"line\">46</span><br/><span class=\"line\">47</span><br/><span class=\"line\">48</span><br/><span class=\"line\">49</span><br/><span class=\"line\">50</span><br/><span class=\"line\">51</span><br/><span class=\"line\">52</span><br/><span class=\"line\">53</span><br/><span class=\"line\">54</span><br/><span class=\"line\">55</span><br/><span class=\"line\">56</span><br/><span class=\"line\">57</span><br/><span class=\"line\">58</span><br/><span class=\"line\">59</span><br/><span class=\"line\">60</span><br/><span class=\"line\">61</span><br/><span class=\"line\">62</span><br/><span class=\"line\">63</span><br/><span class=\"line\">64</span><br/><span class=\"line\">65</span><br/><span class=\"line\">66</span><br/><span class=\"line\">67</span><br/><span class=\"line\">68</span><br/><span class=\"line\">69</span><br/><span class=\"line\">70</span><br/><span class=\"line\">71</span><br/><span class=\"line\">72</span><br/><span class=\"line\">73</span><br/><span class=\"line\">74</span><br/><span class=\"line\">75</span><br/><span class=\"line\">76</span><br/><span class=\"line\">77</span><br/><span class=\"line\">78</span><br/><span class=\"line\">79</span><br/><span class=\"line\">80</span><br/><span class=\"line\">81</span><br/><span class=\"line\">82</span><br/><span class=\"line\">83</span><br/><span class=\"line\">84</span><br/><span class=\"line\">85</span><br/><span class=\"line\">86</span><br/><span class=\"line\">87</span><br/><span class=\"line\">88</span><br/><span class=\"line\">89</span><br/><span class=\"line\">90</span><br/><span class=\"line\">91</span><br/><span class=\"line\">92</span><br/><span class=\"line\">93</span><br/><span class=\"line\">94</span><br/><span class=\"line\">95</span><br/><span class=\"line\">96</span><br/><span class=\"line\">97</span><br/><span class=\"line\">98</span><br/><span class=\"line\">99</span><br/><span class=\"line\">100</span><br/><span class=\"line\">101</span><br/><span class=\"line\">102</span><br/><span class=\"line\">103</span><br/><span class=\"line\">104</span><br/><span class=\"line\">105</span><br/><span class=\"line\">106</span><br/><span class=\"line\">107</span><br/><span class=\"line\">108</span><br/><span class=\"line\">109</span><br/><span class=\"line\">110</span><br/><span class=\"line\">111</span><br/><span class=\"line\">112</span><br/><span class=\"line\">113</span><br/><span class=\"line\">114</span><br/><span class=\"line\">115</span><br/><span class=\"line\">116</span><br/><span class=\"line\">117</span><br/><span class=\"line\">118</span><br/><span class=\"line\">119</span><br/><span class=\"line\">120</span><br/><span class=\"line\">121</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--[[</span></span><br/><span class=\"line\"><span class=\"comment\">    lua 5.1.5</span></span><br/><span class=\"line\"><span class=\"comment\">    socket 2.0.2</span></span><br/><span class=\"line\"><span class=\"comment\">]]</span><span class=\"comment\">--</span></span><br/><span class=\"line\"><span class=\"keyword\">local</span> socket = <span class=\"built_in\">require</span>(<span class=\"string\">&#34;socket&#34;</span>)</span><br/><span class=\"line\"><span class=\"keyword\">local</span> <span class=\"built_in\">sub</span> = <span class=\"built_in\">string</span>.<span class=\"built_in\">sub</span></span><br/><span class=\"line\"><span class=\"keyword\">local</span> <span class=\"built_in\">byte</span> = <span class=\"built_in\">string</span>.<span class=\"built_in\">byte</span></span><br/><span class=\"line\"><span class=\"keyword\">local</span> <span class=\"built_in\">concat</span> = <span class=\"built_in\">table</span>.<span class=\"built_in\">concat</span></span><br/><span class=\"line\"><span class=\"keyword\">local</span> <span class=\"built_in\">tonumber</span> = <span class=\"built_in\">tonumber</span></span><br/><span class=\"line\"><span class=\"keyword\">local</span> <span class=\"built_in\">tostring</span> = <span class=\"built_in\">tostring</span></span><br/><span class=\"line\"><span class=\"keyword\">local</span> _M = {</span><br/><span class=\"line\">    <span class=\"built_in\">_VERSION</span> = <span class=\"string\">&#34;0.1&#34;</span>,</span><br/><span class=\"line\">}</span><br/><span class=\"line\"><span class=\"keyword\">local</span> mt = { <span class=\"built_in\">__index</span> = _M }</span><br/><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> _M.new<span class=\"params\">(self)</span></span></span><br/><span class=\"line\">    <span class=\"keyword\">local</span> sock, err = socket.tcp()</span><br/><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> sock <span class=\"keyword\">then</span></span><br/><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br/><span class=\"line\">    <span class=\"keyword\">end</span></span><br/><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">setmetatable</span>({_sock = sock, _subscribed = <span class=\"literal\">false</span> }, mt)</span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> _M.connect<span class=\"params\">(self, ...)</span></span></span><br/><span class=\"line\">    <span class=\"keyword\">local</span> args = {...}</span><br/><span class=\"line\">    <span class=\"keyword\">local</span> sock = <span class=\"built_in\">rawget</span>(self, <span class=\"string\">&#34;_sock&#34;</span>)</span><br/><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> sock <span class=\"keyword\">then</span></span><br/><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, <span class=\"string\">&#34;not initialized&#34;</span></span><br/><span class=\"line\">    <span class=\"keyword\">end</span></span><br/><span class=\"line\">    self._subscribed = <span class=\"literal\">false</span></span><br/><span class=\"line\">    <span class=\"keyword\">return</span> sock:connect(...)</span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> _M.close<span class=\"params\">(self)</span></span></span><br/><span class=\"line\">    <span class=\"keyword\">local</span> sock = <span class=\"built_in\">rawget</span>(self, <span class=\"string\">&#34;_sock&#34;</span>)</span><br/><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> sock <span class=\"keyword\">then</span></span><br/><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, <span class=\"string\">&#34;not initialized&#34;</span></span><br/><span class=\"line\">    <span class=\"keyword\">end</span></span><br/><span class=\"line\">    <span class=\"keyword\">return</span> sock:<span class=\"built_in\">close</span>()</span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/><span class=\"line\"><span class=\"keyword\">local</span> <span class=\"function\"><span class=\"keyword\">function</span> _gen_req<span class=\"params\">(args)</span></span></span><br/><span class=\"line\">    <span class=\"keyword\">local</span> nargs = #args</span><br/><span class=\"line\">    <span class=\"keyword\">local</span> req = <span class=\"string\">&#34;&#34;</span></span><br/><span class=\"line\">    req = req .. <span class=\"string\">&#34;*&#34;</span> .. nargs .. <span class=\"string\">&#34;rn&#34;</span></span><br/><span class=\"line\">    <span class=\"keyword\">for</span> i = <span class=\"number\">1</span>, nargs <span class=\"keyword\">do</span></span><br/><span class=\"line\">        <span class=\"keyword\">local</span> <span class=\"built_in\">arg</span> = args[i]</span><br/><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">type</span>(<span class=\"built_in\">arg</span>) ~= <span class=\"string\">&#34;string&#34;</span> <span class=\"keyword\">then</span> <span class=\"built_in\">arg</span> = <span class=\"built_in\">tostring</span>(<span class=\"built_in\">arg</span>) <span class=\"keyword\">end</span></span><br/><span class=\"line\">        req = req .. <span class=\"string\">&#34;$&#34;</span></span><br/><span class=\"line\">        req = req .. #<span class=\"built_in\">arg</span></span><br/><span class=\"line\">        req = req .. <span class=\"string\">&#34;rn&#34;</span></span><br/><span class=\"line\">        req = req .. <span class=\"built_in\">arg</span></span><br/><span class=\"line\">        req = req .. <span class=\"string\">&#34;rn&#34;</span></span><br/><span class=\"line\">    <span class=\"keyword\">end</span></span><br/><span class=\"line\"><span class=\"comment\">-- print(&#34;req : &#34;, req)</span></span><br/><span class=\"line\">    <span class=\"keyword\">return</span> req</span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/><span class=\"line\"><span class=\"keyword\">local</span> <span class=\"function\"><span class=\"keyword\">function</span> _read_reply<span class=\"params\">(self, sock)</span></span></span><br/><span class=\"line\">    <span class=\"keyword\">local</span> line, err = sock:receive()</span><br/><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> line <span class=\"keyword\">then</span></span><br/><span class=\"line\">        <span class=\"keyword\">if</span> err == <span class=\"string\">&#34;timeout&#34;</span> <span class=\"keyword\">then</span></span><br/><span class=\"line\">            sock:<span class=\"built_in\">close</span>()</span><br/><span class=\"line\">        <span class=\"keyword\">end</span></span><br/><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br/><span class=\"line\">    <span class=\"keyword\">end</span></span><br/><span class=\"line\">    <span class=\"keyword\">local</span> prefix = <span class=\"built_in\">byte</span>(line)</span><br/><span class=\"line\">    <span class=\"keyword\">if</span> prefix == <span class=\"number\">42</span> <span class=\"keyword\">then</span> <span class=\"comment\">-- char &#34;*&#34;</span></span><br/><span class=\"line\">        <span class=\"keyword\">local</span> n = <span class=\"built_in\">tonumber</span>(<span class=\"built_in\">sub</span>(line, <span class=\"number\">2</span>))</span><br/><span class=\"line\">        <span class=\"keyword\">if</span> n &lt; <span class=\"number\">0</span> <span class=\"keyword\">then</span> <span class=\"keyword\">return</span> <span class=\"literal\">nil</span> <span class=\"keyword\">end</span></span><br/><span class=\"line\">        <span class=\"keyword\">local</span> vals = {}</span><br/><span class=\"line\">        <span class=\"keyword\">local</span> ind = <span class=\"number\">1</span></span><br/><span class=\"line\">        <span class=\"keyword\">for</span> i = <span class=\"number\">1</span>, n <span class=\"keyword\">do</span></span><br/><span class=\"line\">            <span class=\"keyword\">local</span> res, err = _read_reply(self, sock)</span><br/><span class=\"line\">            <span class=\"keyword\">if</span> res <span class=\"keyword\">then</span></span><br/><span class=\"line\">","text":"学习lua也有大概一年了，对lua的一些基本的语法很熟练了，也做了一些简单的业务，但是对于lua的高级特性还是不是很熟，最近有时间得以系统的学习学习。本文主要讲述的是lua高级特性之一的元表和元方法。 文字简述 metatable(元表) 本质上来讲元表也是一个表，不过这个表是用...","link":"","photos":[],"count_time":{"symbolsCount":"6.3k","symbolsTime":"6 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%96%87%E5%AD%97%E7%AE%80%E8%BF%B0\"><span class=\"toc-text\">文字简述</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BB%A3%E7%A0%81%E8%AE%B2%E8%A7%A3\"><span class=\"toc-text\">代码讲解</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#api-%E4%BB%8B%E7%BB%8D\"><span class=\"toc-text\">api 介绍</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%85%83%E6%96%B9%E6%B3%95%E4%BB%8B%E7%BB%8D\"><span class=\"toc-text\">元方法介绍</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90\"><span class=\"toc-text\">代码分析</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E7%AE%80%E5%8D%95%E7%9A%84%E5%85%83%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">简单的元方法</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#index\"><span class=\"toc-text\">__index</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#newindex\"><span class=\"toc-text\">__newindex</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#metatable\"><span class=\"toc-text\">__metatable</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#call\"><span class=\"toc-text\">__call</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#rawget\"><span class=\"toc-text\">rawget</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#rawset\"><span class=\"toc-text\">rawset</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E7%B3%BB%E7%BB%9F%E4%BB%A3%E7%A0%81\"><span class=\"toc-text\">系统代码</span></a></li></ol></li></ol></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"LeetCode 399. Evaluate Division","uid":"c93abbebcc2158e4112e5ecf116ad7f6","slug":"zl/2016-01-01-760_LeetCode 399. Evaluate Division","date":"2024-04-03T03:47:36.005Z","updated":"2024-04-03T03:47:36.006Z","comments":true,"path":"api/articles/zl/2016-01-01-760_LeetCode 399. Evaluate Division.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"题目描述给出方程式 A / B = k, 其中 A 和 B 均为代表字符串的变量， k 是一个浮点型数字。根据已知方程式求解问题，并返回计算结果。如果结果不存在，则返回 -1.0。 输入总是有效的。你可以假设除法运算中不会出现除数为0的情况，且不存在任何矛盾的结果。 tagDFS...","link":"","photos":[],"count_time":{"symbolsCount":"2.8k","symbolsTime":"3 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Programming in Lua(Thrid Edition)笔记","uid":"a502732b8dc58224e972b6c53538b8c4","slug":"zl/2016-01-01-758_Programming in Lua(Thrid Edition)笔记","date":"2024-04-03T03:47:36.004Z","updated":"2024-04-03T03:47:36.005Z","comments":true,"path":"api/articles/zl/2016-01-01-758_Programming in Lua(Thrid Edition)笔记.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"15 Modules and Packages 从用户的角度来看，一个module是一些可以用require()加载的代码（Lua或者C），它可以创造并返回一个table，module输出的一切，例如函数和常量，都定义在这个table中，相当与一个namespace。所有的标准库...","link":"","photos":[],"count_time":{"symbolsCount":"5.9k","symbolsTime":"5 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}