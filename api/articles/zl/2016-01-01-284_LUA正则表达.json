{"title":"LUA正则表达","uid":"cd06e6a1b369cf8c626d41c3edba32b6","slug":"zl/2016-01-01-284_LUA正则表达","date":"2024-04-03T03:47:33.143Z","updated":"2024-04-03T03:47:33.144Z","comments":true,"path":"api/articles/zl/2016-01-01-284_LUA正则表达.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<p>##LUA正则表达</p>\n<h3 id=\"规则\"><a href=\"#规则\" class=\"headerlink\" title=\"规则\"></a>规则</h3><ul>\n<li>x: (where x is not one of the magic characters ^$()%.[]*+-?) represents the character x itself.</li>\n<li>.: (a dot) represents all characters.</li>\n<li>%a: represents all letters.</li>\n<li>%c: represents all control characters.</li>\n<li>%d: represents all digits.</li>\n<li>%l: represents all lowercase letters.</li>\n<li>%p: represents all punctuation characters.</li>\n<li>%s: represents all space characters.</li>\n<li>%u: represents all uppercase letters.</li>\n<li>%w: represents all alphanumeric characters.</li>\n<li>%x: represents all hexadecimal digits.</li>\n<li>%z: represents the character with representation 0.</li>\n<li>%x: (where x is any non-alphanumeric character) represents the character x</li>\n</ul>\n<h3 id=\"常用函数\"><a href=\"#常用函数\" class=\"headerlink\" title=\"常用函数\"></a>常用函数</h3><p><code>string.gsub (s, pattern, repl [, n])</code></p>\n<ul>\n<li>s 目标字符串</li>\n<li>pattern 规则（也就是上面的那些）</li>\n<li>repl 替换字符串 最常用的是 作为string ex: “” 或者 “%n” 这里n可以是1-9 %几的意思就是匹配到的第几组也可以理解为第几个括号里匹配到的内容</li>\n<li>n就是要执行几次正则匹配替换</li>\n</ul>\n<p>例子：</p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/><span class=\"line\">9</span><br/><span class=\"line\">10</span><br/><span class=\"line\">11</span><br/><span class=\"line\">12</span><br/><span class=\"line\">13</span><br/><span class=\"line\">14</span><br/><span class=\"line\">15</span><br/><span class=\"line\">16</span><br/><span class=\"line\">17</span><br/><span class=\"line\">18</span><br/><span class=\"line\">19</span><br/><span class=\"line\">20</span><br/><span class=\"line\">21</span><br/><span class=\"line\">22</span><br/><span class=\"line\">23</span><br/><span class=\"line\">24</span><br/><span class=\"line\">25</span><br/><span class=\"line\">26</span><br/><span class=\"line\">27</span><br/><span class=\"line\">28</span><br/><span class=\"line\">29</span><br/><span class=\"line\">30</span><br/><span class=\"line\">31</span><br/><span class=\"line\">32</span><br/><span class=\"line\">33</span><br/><span class=\"line\">34</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">s=&#34;先来最基础简单的&#34;</span><br/><span class=\"line\">x = string.gsub(s,&#34;基础简单&#34;,&#34;复杂困难&#34;) --将&#34;基础简单&#34;替换成&#34;复杂困难&#34;</span><br/><span class=\"line\">--&gt; x = &#34;先来最复杂困难的&#34;</span><br/><span class=\"line\"></span><br/><span class=\"line\">s=&#34;多次替换数字123,多次替换数字321&#34;</span><br/><span class=\"line\">x = string.gsub(s,&#34;%d+&#34;,&#34;lalala&#34;) --将数字替换成&#34;lalala&#34;</span><br/><span class=\"line\">--&gt; x = &#34;多次替换数字lalala,多次替换数字lalala&#34;</span><br/><span class=\"line\"></span><br/><span class=\"line\">s=&#34;本末&amp;倒置，开始=逆转&#34;</span><br/><span class=\"line\">x = string.gsub(s,&#34;(.+)&amp;(.+)，(.+)=(.+)&#34;,&#34;%3%2%4%1&#34;) --一次匹配下返回括号内四个值，并且排列后替换整个字符串</span><br/><span class=\"line\">--&gt; x = &#34;开始倒置逆转本末&#34;</span><br/><span class=\"line\"></span><br/><span class=\"line\">%1-%4相当于临时变量，将临时变量赋予括号内的值并且将整个字符串替换成临时排列后的变量。</span><br/><span class=\"line\">%1 = 本末，%2 = 倒置，%3=开始，%4=逆转，而%0则是等于整个字符串：本末&amp;倒置，开始=逆转</span><br/><span class=\"line\">***从这里看出来了规则里的括号()就是%n的替换第几个括号就是n几***</span><br/><span class=\"line\"></span><br/><span class=\"line\">s=&#34;hello string test world&#34;</span><br/><span class=\"line\">x = string.gsub(s,&#34;(%w+)%s*(%w+)&#34;,&#34;%1&#34;,1) --一次匹配返回两个值，将这两个替换成第一个值，只执行一次</span><br/><span class=\"line\">--&gt; x = &#34;hello test world&#34;</span><br/><span class=\"line\">这里最后的参数是1那么表示这次正则替换我们只执行一次，什么是执行一次呢？</span><br/><span class=\"line\">这里&#34;hello string test world&#34;我们定义的查找规则是&#34;(%w+)%s*(%w+)&#34;也就是 &#34;字符空格字符&#34; </span><br/><span class=\"line\">那我们按照规则去s里查找一次得到的结果是找到了并且返回了&#34;hello string&#34;。这，对这就是一次了。如果我们不填1或者写成2那就是要全匹配完或者匹配两次，就会再从s串里接着找，这次我们找到的是&#34;test world&#34;。对的，这就是第二次了。然后每次执行括号里的就是%n，所以上面定义的只执行一次匹配替换，那么我们就按照上面说的执行一次的结果来：</span><br/><span class=\"line\">1次的结果是&#34;hello string&#34;然后%1对照&#34;(%w+)%s*(%w+)&#34;第一个括号是 hello %2是 string</span><br/><span class=\"line\">然后repl是&#34;%1&#34;也就是替换的字符串是%1也就是hello，那么结果有了，就是把这第一次找到的hello string 替换为hello 然后我们不进行往后的正则查找匹配替换了，到此为止。所以结果就是hello test world。</span><br/><span class=\"line\"></span><br/><span class=\"line\">s=&#34;hello string test world&#34;</span><br/><span class=\"line\">x = string.gsub(s,&#34;(%w+)%s*(%w+)&#34;,&#34;%0 %0&#34;,1) --匹配成功后将多复制一次，只执行一次</span><br/><span class=\"line\">--&gt; x = &#34;hello string hello string test world&#34;</span><br/><span class=\"line\">这个同理如上，只不过 repl变成了&#34;%0 %0&#34;其实就是连着输出两次的意思没啥的</span><br/><span class=\"line\">这里匹配查找一次的结果是:</span><br/><span class=\"line\">%1=hello %2=string %0就是连起来 hello string</span><br/><span class=\"line\">然后repl是&#34;%0 %0&#34; 那么就是 hello string hello string</span><br/><span class=\"line\">所以结果就是把第一次匹配到的内容 hello string 变成了 hello string hello string</span><br/><span class=\"line\">那么此时的s变成了&#34;hello string hello string test world&#34;</span><br/></pre></td></tr></tbody></table></figure>\n<hr/>\n<p><code>string.match (s, pattern [, init])</code></p>\n<ul>\n<li>s 目标字符串</li>\n<li>pattern 查询匹配规则</li>\n<li>可选init表示匹配字符串的起始索引默认为1<br/>在字符串s中匹配pattern，如果匹配失败返回nil。否则，当pattern中没有分组时，返回第一个匹配到的子串；<strong>当pattern中有分组时，返回第一个匹配到子串的分组，多个分组就返回多个</strong>。\n也就是当有小括号()分组的时候就有多个返回值了</li>\n</ul>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">s, func = string.match(&#34;static bool getBoolean(const char *key, bool defaultValue = false);&#34;, &#34;(.+[ *])([^ ]+)[ ]*%(&#34;)</span><br/><span class=\"line\">print(s, func)</span><br/></pre></td></tr></tbody></table></figure>","text":"##LUA正则表达 规则 x: (where x is not one of the magic characters ^$()%.[]*+-?) represents the character x itself. .: (a dot) represents all chara...","link":"","photos":[],"count_time":{"symbolsCount":"2.9k","symbolsTime":"3 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%A7%84%E5%88%99\"><span class=\"toc-text\">规则</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">常用函数</span></a></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"梦幻手游部分Luac反编译失败的解决方法","uid":"f1e42241288cd1c9d438e5eb03afe8a9","slug":"zl/2016-01-01-285_梦幻手游部分Luac反编译失败的解决方法","date":"2024-04-03T03:47:33.144Z","updated":"2024-04-03T03:47:33.145Z","comments":true,"path":"api/articles/zl/2016-01-01-285_梦幻手游部分Luac反编译失败的解决方法.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":" 这一篇是去年学习破解梦幻西游手游lua代码时记录的一些问题，今天将其整理并共享出来，所以不一定适合现在版本的梦幻手游，大家还是以参考为目的呗。lua相关的文章（共4篇）到此也写完了，如果以后还有新的东西会继续更新，接下来会写几篇关于2018 腾讯游戏安全竞赛的详细分析，敬请期待...","link":"","photos":[],"count_time":{"symbolsCount":"8.1k","symbolsTime":"7 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"lua学习笔记","uid":"329726c67d21b0b62fc4af0c5b68cfed","slug":"zl/2016-01-01-283_lua学习笔记","date":"2024-04-03T03:47:33.140Z","updated":"2024-04-03T03:47:33.140Z","comments":true,"path":"api/articles/zl/2016-01-01-283_lua学习笔记.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":" &lt;p&gt;&lt;img src=&quot;https://lostplesed.github.io/images/lua.jpg&quot; alt=&quot;img&quot;&gt;&lt;/p&gt; 使用命令行参数-i来启动lua解释器，那么解释器就会在运...","link":"","photos":[],"count_time":{"symbolsCount":"2.9k","symbolsTime":"3 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}