{"title":"Lua学习笔记","uid":"d112c00bf05f368c0020529ea6c8efaf","slug":"zl/2016-01-01-263_Lua学习笔记","date":"2024-04-03T03:47:33.123Z","updated":"2024-04-03T03:47:33.128Z","comments":true,"path":"api/articles/zl/2016-01-01-263_Lua学习笔记.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<pre><code>&lt;div class=&quot;markdown-body&quot;&gt;\n  &lt;ul&gt;\n</code></pre>\n<li>Lua快，LuaJIT更快</li>\n<li>用源码的方式安装LuaJIT 2.1版本，虽然是beta版本，但是比正式版本的2.0的效率高</li>\n<li>安装好Lua后运行<code>ln -sf luajit-2.1.0-beta1 /usr/local/bin/luajit</code>才能在命令行使用luajit命令</li>\n<li>type()方法显示变量类型</li>\n<li>nil表示空类型</li>\n<li>boolean:0和false为假，其他为真</li>\n<li>除单引号、双引号外可以用长括号的方式定义字符串,[[0级,[=[1级,[==[2级</li>\n<li>字符串会内化（intern）,值相同的字符串存储在相同的地址中，比较两个字符串值是否相同即比较他们的地址是否一致</li>\n<li>函数也是一种数据类型，有名函数的定义本质上是匿名函数对变量的赋值</li>\n<li>^指数</li>\n<li>~=不等于</li>\n<li>a and b a为nil返回a,否则返回b</li>\n<li>a or b a为nil返回b,否则返回a</li>\n<li>不要在循环中进行大量的字符串的拼接，会生成很多新的字符串，用table和table.contact代替，或使用table.new</li>\n<li>..用来进行字符串的拼接</li>\n<li>elseif和else if不同，else if表示在else中嵌套了if</li>\n<li>while语句有break，没有continue；没有do-while，有repeat</li>\n<li>repeat-until直到条件为真时结束</li>\n<li>for var=begin,finish(,step) do step可省略,默认为1，不想设置上限时，可以让finish=math.huge</li>\n<li>for i,v in ipairs(array) do 通过迭代器ipairs遍历数组中的值</li>\n<li>其他迭代器包括：io.lines迭代文档中的每行;pairs迭代table元素；string.gmatch迭代字符串</li>\n<li>ipairs()可以被JIT编译，pairs()只能被解释执行。在性能敏感的场景，避免对表遍历</li>\n<li>return只能写在语句块的最后，一旦执行了return语句，该语句之后的所有语句都不会再执行</li>\n<li>全局变量会污染全局变量空间，有性能损耗，尽量使用局部变量和局部函数：local</li>\n</ul>\n    </div>","text":"&lt;div class=&quot;markdown-body&quot;&gt; &lt;ul&gt; Lua快，LuaJIT更快 用源码的方式安装LuaJIT 2.1版本，虽然是beta版本，但是比正式版本的2.0的效率高 安装好Lua后运行ln -sf luajit-2...","link":"","photos":[],"count_time":{"symbolsCount":927,"symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Lua学习笔记(四)","uid":"de07bd24165865034200079feb4e7e5f","slug":"zl/2016-01-01-261_Lua学习笔记(四)","date":"2024-04-03T03:47:33.123Z","updated":"2024-04-03T03:47:33.123Z","comments":true,"path":"api/articles/zl/2016-01-01-261_Lua学习笔记(四).json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":" 协同 协同与线程的区别 语法 生产者-消费者问题解决（协同） I/O文档 两种模式 打开文档操作 简单模式 安全模式 协同协同，即coroutine与线程比较类似：拥有独立的堆栈，独立的局部变量，独立的命令指针，以及与其它的协同进程共享全局变量等等。 协同与线程的区别一个具有多...","link":"","photos":[],"count_time":{"symbolsCount":"4.5k","symbolsTime":"4 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Lua 面向对象","uid":"556bb9604a5d13d5fc4856d4cf15bf71","slug":"zl/2016-01-01-25_Lua 面向对象","date":"2024-04-03T03:47:33.122Z","updated":"2024-04-03T03:47:33.122Z","comments":true,"path":"api/articles/zl/2016-01-01-25_Lua 面向对象.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":" 隐藏 self 参数 用 lua 进行面向对象的编程 声明方法和调用方法统一用 &#34;:&#34; 属性的定义和调用全部用 &#34;.&#34; 定义的时候冒号默认接收 self 参数，调用的时候默认传递调用者自身作为参数，而点号要显式传递或接收 self 参数。 一个简...","link":"","photos":[],"count_time":{"symbolsCount":"5.8k","symbolsTime":"5 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}