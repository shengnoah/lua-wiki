{"title":"如何快速进行lua表的制作","uid":"fd8106976a46519300cb718c147695e8","slug":"zl/2016-01-01-894_如何快速进行lua表的制作","date":"2024-04-03T03:47:36.164Z","updated":"2024-04-03T03:47:36.168Z","comments":true,"path":"api/articles/zl/2016-01-01-894_如何快速进行lua表的制作.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<p>在日常的开发中, 或多或少会遇到将大量的, 需要初始化的数据制作到luatable里面,<br/>将花费很多的精力, 还往往由于打错字、打错标点符号浪费了大量的时间.<br/>经过一段时间的思考, 决定编写一个工具来配合excel表进行制作这类的大量的重复的数据<br/>由于现在项目都是android和ios并行开发, 隧使用python语言进行工具的编写, 下面贴出python代码:<br/>(如果缺少xlrd库的话 pip install xlrd)</p>\n<p>代码:</p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/><span class=\"line\">9</span><br/><span class=\"line\">10</span><br/><span class=\"line\">11</span><br/><span class=\"line\">12</span><br/><span class=\"line\">13</span><br/><span class=\"line\">14</span><br/><span class=\"line\">15</span><br/><span class=\"line\">16</span><br/><span class=\"line\">17</span><br/><span class=\"line\">18</span><br/><span class=\"line\">19</span><br/><span class=\"line\">20</span><br/><span class=\"line\">21</span><br/><span class=\"line\">22</span><br/><span class=\"line\">23</span><br/><span class=\"line\">24</span><br/><span class=\"line\">25</span><br/><span class=\"line\">26</span><br/><span class=\"line\">27</span><br/><span class=\"line\">28</span><br/><span class=\"line\">29</span><br/><span class=\"line\">30</span><br/><span class=\"line\">31</span><br/><span class=\"line\">32</span><br/><span class=\"line\">33</span><br/><span class=\"line\">34</span><br/><span class=\"line\">35</span><br/><span class=\"line\">36</span><br/><span class=\"line\">37</span><br/><span class=\"line\">38</span><br/><span class=\"line\">39</span><br/><span class=\"line\">40</span><br/><span class=\"line\">41</span><br/><span class=\"line\">42</span><br/><span class=\"line\">43</span><br/><span class=\"line\">44</span><br/><span class=\"line\">45</span><br/><span class=\"line\">46</span><br/><span class=\"line\">47</span><br/><span class=\"line\">48</span><br/><span class=\"line\">49</span><br/><span class=\"line\">50</span><br/><span class=\"line\">51</span><br/><span class=\"line\">52</span><br/><span class=\"line\">53</span><br/><span class=\"line\">54</span><br/><span class=\"line\">55</span><br/><span class=\"line\">56</span><br/><span class=\"line\">57</span><br/><span class=\"line\">58</span><br/><span class=\"line\">59</span><br/><span class=\"line\">60</span><br/><span class=\"line\">61</span><br/><span class=\"line\">62</span><br/><span class=\"line\">63</span><br/><span class=\"line\">64</span><br/><span class=\"line\">65</span><br/><span class=\"line\">66</span><br/><span class=\"line\">67</span><br/><span class=\"line\">68</span><br/><span class=\"line\">69</span><br/><span class=\"line\">70</span><br/><span class=\"line\">71</span><br/><span class=\"line\">72</span><br/><span class=\"line\">73</span><br/><span class=\"line\">74</span><br/><span class=\"line\">75</span><br/><span class=\"line\">76</span><br/><span class=\"line\">77</span><br/><span class=\"line\">78</span><br/><span class=\"line\">79</span><br/><span class=\"line\">80</span><br/><span class=\"line\">81</span><br/><span class=\"line\">82</span><br/><span class=\"line\">83</span><br/><span class=\"line\">84</span><br/><span class=\"line\">85</span><br/><span class=\"line\">86</span><br/><span class=\"line\">87</span><br/><span class=\"line\">88</span><br/><span class=\"line\">89</span><br/><span class=\"line\">90</span><br/><span class=\"line\">91</span><br/><span class=\"line\">92</span><br/><span class=\"line\">93</span><br/><span class=\"line\">94</span><br/><span class=\"line\">95</span><br/><span class=\"line\">96</span><br/><span class=\"line\">97</span><br/><span class=\"line\">98</span><br/><span class=\"line\">99</span><br/><span class=\"line\">100</span><br/><span class=\"line\">101</span><br/><span class=\"line\">102</span><br/><span class=\"line\">103</span><br/><span class=\"line\">104</span><br/><span class=\"line\">105</span><br/><span class=\"line\">106</span><br/><span class=\"line\">107</span><br/><span class=\"line\">108</span><br/><span class=\"line\">109</span><br/><span class=\"line\">110</span><br/><span class=\"line\">111</span><br/><span class=\"line\">112</span><br/><span class=\"line\">113</span><br/><span class=\"line\">114</span><br/><span class=\"line\">115</span><br/><span class=\"line\">116</span><br/><span class=\"line\">117</span><br/><span class=\"line\">118</span><br/><span class=\"line\">119</span><br/><span class=\"line\">120</span><br/><span class=\"line\">121</span><br/><span class=\"line\">122</span><br/><span class=\"line\">123</span><br/><span class=\"line\">124</span><br/><span class=\"line\">125</span><br/><span class=\"line\">126</span><br/><span class=\"line\">127</span><br/><span class=\"line\">128</span><br/><span class=\"line\">129</span><br/><span class=\"line\">130</span><br/><span class=\"line\">131</span><br/><span class=\"line\">132</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"># -- coding: utf-8 --</span><br/><span class=\"line\">import sys</span><br/><span class=\"line\">reload(sys)</span><br/><span class=\"line\">sys.setdefaultencoding( &#34;utf-8&#34; )</span><br/><span class=\"line\"></span><br/><span class=\"line\">import os</span><br/><span class=\"line\">import xlrd</span><br/><span class=\"line\">import re</span><br/><span class=\"line\"></span><br/><span class=\"line\">cur_path = os.path.abspath(sys.argv[0] + &#34;/../&#34;)</span><br/><span class=\"line\"></span><br/><span class=\"line\"># 分析一个表的内容</span><br/><span class=\"line\"># sheetObject 工作表的对象</span><br/><span class=\"line\">def parseOneSheet(excel_sheet):</span><br/><span class=\"line\">    # excel data dict</span><br/><span class=\"line\">    excel_data_dict = {}</span><br/><span class=\"line\"></span><br/><span class=\"line\">    # col name list</span><br/><span class=\"line\">    col_name_list = []</span><br/><span class=\"line\"></span><br/><span class=\"line\">    #col val type list</span><br/><span class=\"line\">    col_val_type_list = []</span><br/><span class=\"line\"></span><br/><span class=\"line\">    # ctype: 0 empty, 1 string, 2 number, 3 date, 4 boolean, 5 error</span><br/><span class=\"line\">    #value名字 比如 id desc</span><br/><span class=\"line\">    for col in range(0, excel_sheet.ncols):</span><br/><span class=\"line\">        cell = excel_sheet.cell(1, col)</span><br/><span class=\"line\">        col_name_list.append(str(cell.value))</span><br/><span class=\"line\">        assert cell.ctype == 1, &#34;found a invalid col name in col [%d] !~&#34; % (col)</span><br/><span class=\"line\"></span><br/><span class=\"line\">    #value的类型 比如int string boolean啊</span><br/><span class=\"line\">    for col in range(0, excel_sheet.ncols):</span><br/><span class=\"line\">        cell = excel_sheet.cell(2, col)</span><br/><span class=\"line\">        col_val_type_list.append(str(cell.value))</span><br/><span class=\"line\">        assert cell.ctype == 1, &#34;found a invalid col val type in col [%d] !~&#34; % (col)</span><br/><span class=\"line\"></span><br/><span class=\"line\">    #遍历所有有效的行</span><br/><span class=\"line\">    for row in range(3, excel_sheet.nrows):</span><br/><span class=\"line\">        cell_id = excel_sheet.cell(row, 0)</span><br/><span class=\"line\"></span><br/><span class=\"line\">        assert cell_id.ctype == 2, &#34;found a invalid id in row [%d] !~&#34; % (row)</span><br/><span class=\"line\"></span><br/><span class=\"line\">        if cell_id.value in excel_data_dict:</span><br/><span class=\"line\">            print(&#39;[警告] 配置了相同的&#34;%d&#34;物品, 请做检查&#39; % (cell_id.value))</span><br/><span class=\"line\">            print(&#39;[警告] 配置了相同的&#34;%d&#34;物品, 请做检查&#39; % (cell_id.value))</span><br/><span class=\"line\">            print(&#39;[警告] 配置了相同的&#34;%d&#34;物品, 请做检查&#39; % (cell_id.value))</span><br/><span class=\"line\"></span><br/><span class=\"line\">        # row data list</span><br/><span class=\"line\">        row_data_list = []</span><br/><span class=\"line\"></span><br/><span class=\"line\">        for col in range(0, excel_sheet.ncols):</span><br/><span class=\"line\">            cell = excel_sheet.cell(row, col)</span><br/><span class=\"line\">            k = col_name_list[col]</span><br/><span class=\"line\">            cell_val_type = col_val_type_list[col]</span><br/><span class=\"line\"></span><br/><span class=\"line\">            # ignored the string that start with &#39;_&#39;</span><br/><span class=\"line\">            if str(k).startswith(&#39;#&#39;):</span><br/><span class=\"line\">                continue</span><br/><span class=\"line\"></span><br/><span class=\"line\">            if cell_val_type == &#39;string&#39;:</span><br/><span class=\"line\">                if cell.ctype == 0:</span><br/><span class=\"line\">                    v = &#39;&#39;&#39;&#39;</span><br/><span class=\"line\">                else:</span><br/><span class=\"line\">                    v = &#39;&#39;%s&#39;&#39; % (cell.value)</span><br/><span class=\"line\">            elif cell_val_type == &#39;int&#39;:</span><br/><span class=\"line\">                if cell.ctype == 0:</span><br/><span class=\"line\">                    v = -1</span><br/><span class=\"line\">                else:</span><br/><span class=\"line\">                    v = int(cell.value)</span><br/><span class=\"line\">            elif cell_val_type == &#39;float&#39;:</span><br/><span class=\"line\">                if cell.ctype == 0:</span><br/><span class=\"line\">                    v = -1</span><br/><span class=\"line\">                else:</span><br/><span class=\"line\">                    v = float(cell.value)</span><br/><span class=\"line\">            elif cell_val_type == &#39;table&#39;:</span><br/><span class=\"line\">                if cell.ctype == 0:</span><br/><span class=\"line\">                    v = &#39;{}&#39;</span><br/><span class=\"line\">                else:</span><br/><span class=\"line\">                    v = cell.value</span><br/><span class=\"line\">            else:</span><br/><span class=\"line\">                v = cell.value</span><br/><span class=\"line\"></span><br/><span class=\"line\">            row_data_list.append([k, v])</span><br/><span class=\"line\"></span><br/><span class=\"line\">        excel_data_dict[cell_id.value] = row_data_list</span><br/><span class=\"line\"></span><br/><span class=\"line\">    return excel_data_dict</span><br/><span class=\"line\"></span><br/><span class=\"line\"></span><br/><span class=\"line\">def excel2lua(src_excel_path, tgt_lua_path):</span><br/><span class=\"line\">    # print(&#39;[file] %s -&gt; %s&#39; % (src_excel_path, tgt_lua_path))</span><br/><span class=\"line\">    # load excel data</span><br/><span class=\"line\">    excel_data_src = xlrd.open_workbook(src_excel_path, encoding_override = &#39;utf-8&#39;)</span><br/><span class=\"line\">    for name in excel_data_src.sheet_names():</span><br/><span class=\"line\">        print(&#34;Worksheet name %s &#34; % name)</span><br/><span class=\"line\">        data_dict = parseOneSheet(excel_data_src.sheet_by_name(name))</span><br/><span class=\"line\">        lua_path = tgt_lua_path + name + &#34;.lua&#34;</span><br/><span class=\"line\">        lua_export_file = open(lua_path, &#34;w&#34;)</span><br/><span class=\"line\">        lua_export_file.write(&#39;local %s = {n&#39; % name)</span><br/><span class=\"line\"></span><br/><span class=\"line\">        for k, v in data_dict.items():</span><br/><span class=\"line\">            lua_export_file.write(&#39;  [%d] = {n&#39; % k)</span><br/><span class=\"line\">            for row_data in v:</span><br/><span class=\"line\">                lua_export_file.write(&#39;   {0} = {1},n&#39;.format(row_data[0], row_data[1]))</span><br/><span class=\"line\">            lua_export_file.write(&#39;  },n&#39;)</span><br/><span class=\"line\"></span><br/><span class=\"line\">        lua_export_file.write(&#39;}n&#39;)</span><br/><span class=\"line\">        lua_export_file.write(&#39;return %s&#39; % name)</span><br/><span class=\"line\"></span><br/><span class=\"line\">        lua_export_file.close()</span><br/><span class=\"line\"></span><br/><span class=\"line\">if __name__ == &#39;__main__&#39;:</span><br/><span class=\"line\">    in_path = &#34;&#34;</span><br/><span class=\"line\">    out_path = &#34;&#34;</span><br/><span class=\"line\">    if len(sys.argv) == 1:</span><br/><span class=\"line\">        print(&#39;未检测到内容,采用默认路径&#39;)</span><br/><span class=\"line\">        in_path = cur_path + &#34;/in/&#34;</span><br/><span class=\"line\">        out_path = cur_path + &#34;/out/&#34;</span><br/><span class=\"line\">    else:</span><br/><span class=\"line\">        # excel文件的文件夹地址 默认为同目录下的in文件夹</span><br/><span class=\"line\">        in_path = sys.argv[1]</span><br/><span class=\"line\">        # 输出到lua的文件夹地址 默认为同目录下的in文件夹</span><br/><span class=\"line\">        out_path = sys.argv[2]</span><br/><span class=\"line\"></span><br/><span class=\"line\">    print(&#34;输入目录为 %s, 输出目录为%sn&#34; % (in_path, out_path))</span><br/><span class=\"line\">    for root, dirs, files in os.walk(in_path):</span><br/><span class=\"line\">        for name in files:</span><br/><span class=\"line\">            if( &#34;.xls&#34; in name and &#34;.xlsx&#34; in name ):</span><br/><span class=\"line\">                print(root + name)</span><br/><span class=\"line\">                excel2lua(root + name, out_path)</span><br/><span class=\"line\">            </span><br/><span class=\"line\">    exit(0)</span><br/></pre></td></tr></tbody></table></figure>\n<p>代码从一位网友的blog找到的, 权侵删.</p>","text":"在日常的开发中, 或多或少会遇到将大量的, 需要初始化的数据制作到luatable里面,将花费很多的精力, 还往往由于打错字、打错标点符号浪费了大量的时间.经过一段时间的思考, 决定编写一个工具来配合excel表进行制作这类的大量的重复的数据由于现在项目都是android和ios...","link":"","photos":[],"count_time":{"symbolsCount":"4.8k","symbolsTime":"4 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Lua知识回顾","uid":"99b82723dc824681436b2f3b42032285","slug":"zl/2016-01-01-893_Lua知识回顾","date":"2024-04-03T03:47:36.164Z","updated":"2024-04-03T03:47:36.164Z","comments":true,"path":"api/articles/zl/2016-01-01-893_Lua知识回顾.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"学习 Lua 编程语言的比较 无聊之余，想要找个东西来打发时间和排解心中的百无聊赖，于是乎，想要重新玩一下 corona 这个游戏开发引擎。当然，第一步就是重温下以前学过的 lua 编程语言，这次我打算在 Windows 操作系统上摆弄下这玩意。 首先进入lua 官网找到二进制文...","link":"","photos":[],"count_time":{"symbolsCount":"2.2k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Evaluation measure of pose estimation","uid":"47d3582a7617de7fd8f199c409749375","slug":"zl/2016-01-01-890_Evaluation measure of pose estimation","date":"2024-04-03T03:47:36.163Z","updated":"2024-04-03T03:47:36.163Z","comments":true,"path":"api/articles/zl/2016-01-01-890_Evaluation measure of pose estimation.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"单人检测单人姿态估计的评估标准。 PCKPCK(Percentage of Correct Keypoints)正确关键点的比例。 PCK的思想是，关键点坐标pred与groundtrue之间的归一化距离小于一定阈值时，视为正确估计，以正确估计的关键点的比例作为评估标准。 从定义...","link":"","photos":[],"count_time":{"symbolsCount":406,"symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}