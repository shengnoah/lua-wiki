{"title":"LuaFramework笔记One","uid":"785eae8982424fd04179c4f85b57c3b9","slug":"zl/2016-01-01-613_LuaFramework笔记One","date":"2024-04-03T03:47:35.840Z","updated":"2024-04-03T03:47:35.840Z","comments":true,"path":"api/articles/zl/2016-01-01-613_LuaFramework笔记One.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<div id=\"toc\" class=\"toc-article\">\n\t\t\t<strong class=\"toc-title\">Contents</strong>\n<pre><code>\t&lt;/div&gt;\n\t\n\t&lt;h2 id=&quot;AppConst-DebugMode&quot;&gt;&lt;a href=&quot;#AppConst-DebugMode&quot; class=&quot;headerlink&quot; title=&quot;AppConst.DebugMode&quot;&gt;&lt;/a&gt;AppConst.DebugMode&lt;/h2&gt;&lt;ol&gt;\n</code></pre>\n<li>当AppConst.DebugMode=true时<br/>1.1 获取的本地持久化资源目录为<br/><code>return Application.dataPath + &#34;/&#34; + AppConst.AssetDir + &#34;/&#34;;</code><br/>在LuaFramework框架中这个路径为Assets/StreamingAssets目录，也就是说读取的ab资源是Assets/StreamingAssets下面的ab资源；<br/>1.2 不会进行StreamingAssets下面资源的解压释放，但是会执行更新逻辑<br/>1.3 lua引擎所初始化的搜索路劲为Assets/{AppName}/Lua和Assets/{AppName}/ToLua/Lua</li>\n<li>当AppConst.DebugMode=false时<br/>2.1 获取的本地持久化资源目录为当前系统的持久化目录<br/>2.2 会根据是否解压释放过，进行Asset/StreamingAssets下面的ab资源的释放<br/>2.3 lua引擎所初始化的搜索路劲为本地持久化目录下面的Lua文件夹</li>\n</ol>\n<h2 id=\"AppConst-UpdateMode\"><a href=\"#AppConst-UpdateMode\" class=\"headerlink\" title=\"AppConst.UpdateMode\"></a>AppConst.UpdateMode</h2><p>当AppConst.UpdateMode=false时，框架不会进行资源的更新下载</p>\n<h2 id=\"AppConst-LuaBundleMode\"><a href=\"#AppConst-LuaBundleMode\" class=\"headerlink\" title=\"AppConst.LuaBundleMode\"></a>AppConst.LuaBundleMode</h2><p>当AppConst.LuaBundleMode为true时：</p>\n<ol>\n<li>会将.lua文件打包进ab：<br/>打包lua文件流程：先创建Assets/Lua文件夹，然后遍历Assets/{AppName}/Lua/和Assets/{AppName}/ToLua/Lua这两个文件夹；<br/>1.1 当AppConst.LuaByteMode为true时，先将文件夹下面的所有.lua文件遍历出来，然后执行EncodeLuaFile(files[j], dest)函数：将非.lua文件直接copy到Assets/Lua下面的相应文件夹下面，将.lua文件进行luajit加密，然后copy到Assets/Lua下面的相应文件夹下面。<br/>1.2 当AppConst.LuaByteMode为false时,直接将文件加上.bytes后缀，copy到Assets/Lua下面的相应文件夹下面。<br/>1.3 所有Assets/Lua目录下面的所有文件夹路径，然后获取到ab包的名字（规则是lua/lua_{文件夹文字}.{AppConst.ExtName}）;然后将Assets/Lua/下面的每一个文件夹作为一个ab包，加入要打包的map中。<br/>1.4 最后将Assets/Lua下面的所有.bytes文件加入要打包的map中，名字为lua/lua.{AppConst.ExtName}<br/>1.5 最终，将Assets/{AppName}/Lua/和Assets/{AppName}/ToLua/Lua这两个文件夹下面的所有非.lua文件直接copy到Assets/StreamingAssets/lua/目录下面</li>\n<li>LuaLoader对象中的 beZip = AppConst.LuaBundleMode，这样，LuaManager中InitLuaBundle()函数会将打包的加入lua引擎的搜索目录</li>\n</ol>\n<p>当AppConst.LuaBundleMode为false时：</p>\n<ol>\n<li>直接copyAssets/{AppName}/Lua/和Assets/{AppName}/ToLua/Lua这两个文件夹下面的文件到Assets/StreamingAssets/lua/下面</li>\n</ol>\n<h2 id=\"AppConst-AppName\"><a href=\"#AppConst-AppName\" class=\"headerlink\" title=\"AppConst.AppName\"></a>AppConst.AppName</h2><p>决定Lua的打包和搜索目录</p>\n<h2 id=\"AppConst-DebugMode-和-AppConst-LuaBundleMode-的合作\"><a href=\"#AppConst-DebugMode-和-AppConst-LuaBundleMode-的合作\" class=\"headerlink\" title=\"AppConst.DebugMode 和 AppConst.LuaBundleMode 的合作\"></a>AppConst.DebugMode 和 AppConst.LuaBundleMode 的合作</h2><ol>\n<li>AppConst.DebugMode为true和AppConst.LuaBundleMode为true：<br/>打包时：lua文件会被打包进入ab。<br/>运行时：ab包中的lua文件会被加入lua引擎搜索目录。程序不会进行解压资源。读取的lua文件是ab包中的lua文件，如果ab包不存在就会报错</li>\n<li>AppConst.DebugMode为true和AppConst.LuaBundleMode为false：<br/>打包时：lua文件不会被打包进入ab。<br/>运行时：ab包中的lua文件不会被加入lua引擎搜索目录。程序不会进行解压资源。读取的lua文件是Assets/{AppName}/Lua/和Assets/{AppName}/ToLua/Lua这两个文件夹下面的文件</li>\n<li>AppConst.DebugMode为false时，会进行资源解压，其他照旧。</li>\n<li>总结 ：<br/>开发时，AppConst.DebugMode为true和AppConst.LuaBundleMode为false；</li>\n</ol>","text":" Contents &lt;/div&gt; &lt;h2 id=&quot;AppConst-DebugMode&quot;&gt;&lt;a href=&quot;#AppConst-DebugMode&quot; class=&quot;headerlink&quot; t...","link":"","photos":[],"count_time":{"symbolsCount":"2.2k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#AppConst-UpdateMode\"><span class=\"toc-text\">AppConst.UpdateMode</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#AppConst-LuaBundleMode\"><span class=\"toc-text\">AppConst.LuaBundleMode</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#AppConst-AppName\"><span class=\"toc-text\">AppConst.AppName</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#AppConst-DebugMode-%E5%92%8C-AppConst-LuaBundleMode-%E7%9A%84%E5%90%88%E4%BD%9C\"><span class=\"toc-text\">AppConst.DebugMode 和 AppConst.LuaBundleMode 的合作</span></a></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"study_lua","uid":"eafee6ad072d01002f94e94cb70747d8","slug":"zl/2016-01-01-618_study_lua","date":"2024-04-03T03:47:35.841Z","updated":"2024-04-03T03:47:35.842Z","comments":true,"path":"api/articles/zl/2016-01-01-618_study_lua.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"#Lua 学习 ##知识点1.requeire加载路径 ###加载机制对于自定义的模块，模块文件不是放在哪个文件目录都行，函数 require 有它自己的文件路径加载策略，它会尝试从 Lua 文件或 C 程序库中加载模块。require 用于搜索 Lua 文件的路径是存放在全局变...","link":"","photos":[],"count_time":{"symbolsCount":"1.1k","symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"2.3 lua 表达式","uid":"dbea4ef0040d964bfdee0e07b0e19da7","slug":"zl/2016-01-01-614_2.3 lua 表达式","date":"2024-04-03T03:47:35.840Z","updated":"2024-04-03T03:47:35.840Z","comments":true,"path":"api/articles/zl/2016-01-01-614_2.3 lua 表达式.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"算术表达式Lua 的算术运算符如下表所示： 表达符 备注 + 加法 - 减法 * 乘法 / 除法 ^ 指数 % 取模 实例123456789print(1 + 2) print(5 / 10) --&gt;打印 0.5。 这是Lua不同于c语言的print(5.0 / 10) -...","link":"","photos":[],"count_time":{"symbolsCount":"2k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}