{"title":"Lua table","uid":"73ce1cd453aea8f6dbbd9fe8e760883a","slug":"zl/2016-01-01-148_Lua table","date":"2024-04-03T03:47:33.044Z","updated":"2024-04-03T03:47:33.044Z","comments":true,"path":"api/articles/zl/2016-01-01-148_Lua table.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<div itemprop=\"articleBody\">\n<h2 id=\"heading-table\">table</h2>\n<h3 id=\"heading-常用函数\">常用函数</h3>\n<div class=\"language-lua highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>\n<span class=\"c1\">-- 获取参数表 table，并对这个 table 预定义一个字段 n（表示该表的长度）。</span>\n<span class=\"kd\">local</span> <span class=\"n\">arg</span> <span class=\"o\">=</span> <span class=\"nb\">table.pack</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">)</span>\n<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">arg</span><span class=\"p\">.</span><span class=\"n\">n</span> <span class=\"k\">do</span>  \n  <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">arg</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">])</span>\n<span class=\"k\">end</span>\n<p><span class=\"cm\">–[[<br />\n提供一个列表，其所有元素都是字符串或数字，返回字符串 list[i]…sep…list[i+1] ··· sep…list[j]。<br />\nsep 的默认值是空串， i 的默认值是 1 ， j 的默认值是 #list 。 如果 i 比 j 大，返回空串。<br />\n]]</span></p>\n<p><span class=\"nb\">table.concat</span><span class=\"p\">(</span><span class=\"n\">list</span> <span class=\"p\">[,</span> <span class=\"n\">sep</span> <span class=\"p\">[,</span> <span class=\"n\">i</span> <span class=\"p\">[,</span> <span class=\"n\">j</span><span class=\"p\">]]])</span></p>\n<p><span class=\"cm\">–[[<br />\n在 list 的位置 pos 处插入元素 value ， 并后移元素 list[pos], list[pos+1], ···, list[#list] 。<br />\npos 的默认值为 #list+1 ， 因此调用 table.insert(t,x) 会将 x 插在列表 t 的末尾。<br />\n]]</span><br />\n<span class=\"nb\">table.insert</span><span class=\"p\">(</span><span class=\"n\">list</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">pos</span><span class=\"p\">,]</span> <span class=\"n\">value</span><span class=\"p\">)</span></p>\n<p><span class=\"cm\">–[[<br />\n将元素从表 a1 移到表 a2。 这个函数做了次等价于后面这个多重赋值的等价操作： a2[t],··· = a1[f],···,a1[e]。 a2 的默认值为 a1。<br />\n目标区间可以和源区间重叠。 索引 f 必须是正数。<br />\n]]</span><br />\n<span class=\"n\">table</span><span class=\"p\">.</span><span class=\"n\">move</span><span class=\"p\">(</span><span class=\"n\">a1</span><span class=\"p\">,</span> <span class=\"n\">f</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">t</span> <span class=\"p\">[,</span> <span class=\"n\">a2</span><span class=\"p\">])</span></p>\n<p><span class=\"cm\">–[[<br />\n移除 list 中 pos 位置上的元素，并返回这个被移除的值。<br />\n当 pos 是在 1 到 #list 之间的整数时， 它向前移动元素　list[pos+1], list[pos+2], ···, list[#list] 并删除元素 list[#list]；<br />\n索引 pos 可以是 #list + 1 ，或在 #list 为 0 时可以是 0 ； 在这些情况下，函数删除元素 list[pos]。<br />\npos 默认为 #list， 因此调用 table.remove(l) 将移除表 l 的最后一个元素。<br />\n]]</span><br />\n<span class=\"nb\">table.remove</span><span class=\"p\">(</span><span class=\"n\">list</span> <span class=\"p\">[,</span> <span class=\"n\">pos</span><span class=\"p\">])</span></p>\n<p><span class=\"cm\">–[[<br />\n在表内从 list[1] 到 list[#list] 原地 对其间元素按指定次序排序。<br />\n如果提供了 comp ， 它必须是一个可以接收两个列表内元素为参数的函数。<br />\n当第一个元素需要排在第二个元素之前时，返回真 （因此 not comp(list[i+1],list[i]) 在排序结束后将为真）。<br />\n如果没有提供 comp， 将使用标准 Lua 操作 &lt; 作为替代品。<br />\n排序算法并不稳定； 即当两个元素次序相等时，它们在排序后的相对位置可能会改变。<br />\n]]</span><br />\n<span class=\"nb\">table.sort</span><span class=\"p\">(</span><span class=\"n\">list</span> <span class=\"p\">[,</span> <span class=\"n\">comp</span><span class=\"p\">])</span></p>\n<p><span class=\"cm\">–[[<br />\n返回列表中的元素。 这个函数等价于<br />\nreturn list[i], list[i+1], ···, list[j]<br />\ni 默认为 1 ，j 默认为 #list。<br />\n]]</span><br />\n<span class=\"nb\">table.unpack</span><span class=\"p\">(</span><span class=\"n\">list</span> <span class=\"p\">[,</span> <span class=\"n\">i</span> <span class=\"p\">[,</span> <span class=\"n\">j</span><span class=\"p\">]])</span></p>\n<p></code></pre></div></div></p>\n<h3 id=\"heading-table-的深拷贝\">table 的深拷贝</h3>\n<div class=\"language-lua highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>\n<span class=\"cm\">--[[\n一般表的复制都是引用，深拷贝需要实现：1、值的复制，2、方法的复制\n所以要解决 3 个问题：\n1、table 存在循环引用\n2、metatable（metatable 都不参与复制）\n3、keys 也是 table\n]]</span>\n<span class=\"k\">function</span> <span class=\"nf\">deepcopy</span><span class=\"p\">(</span><span class=\"n\">obj</span><span class=\"p\">)</span>\n  <span class=\"kd\">local</span> <span class=\"n\">Table</span> <span class=\"o\">=</span> <span class=\"p\">&#123;&#125;</span>\n  <span class=\"kd\">local</span> <span class=\"k\">function</span> <span class=\"nf\">func</span><span class=\"p\">(</span><span class=\"n\">obj</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"n\">obj</span><span class=\"p\">)</span> <span class=\"o\">~=</span> <span class=\"s2\">&#34;table&#34;</span> <span class=\"k\">then</span>\n      <span class=\"k\">return</span>\n    <span class=\"k\">end</span>\n    <span class=\"kd\">local</span> <span class=\"n\">newtable</span> <span class=\"o\">=</span> <span class=\"p\">&#123;&#125;</span>\n    <span class=\"n\">Table</span><span class=\"p\">[</span><span class=\"n\">obj</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">newtable</span>\n    <span class=\"k\">for</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">v</span> <span class=\"k\">in</span> <span class=\"nb\">pairs</span><span class=\"p\">(</span><span class=\"n\">obj</span><span class=\"p\">)</span> <span class=\"k\">do</span>\n      <span class=\"n\">newtable</span><span class=\"p\">[</span><span class=\"n\">func</span><span class=\"p\">(</span><span class=\"n\">k</span><span class=\"p\">)]</span> <span class=\"o\">=</span> <span class=\"n\">func</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span>\n    <span class=\"k\">end</span>\n    <span class=\"k\">return</span> <span class=\"nb\">setmetatable</span><span class=\"p\">(</span><span class=\"n\">newtable</span><span class=\"p\">,</span> <span class=\"nb\">getmetatable</span><span class=\"p\">(</span><span class=\"n\">obj</span><span class=\"p\">))</span>\n  <span class=\"k\">end</span>\n  <span class=\"k\">return</span> <span class=\"n\">func</span><span class=\"p\">(</span><span class=\"n\">obj</span><span class=\"p\">)</span>\n<span class=\"k\">end</span>\n</code></pre></div></div>\n<h2 id=\"heading-元表\">元表</h2>\n<h1 id=\"heading-参考链接\">参考链接</h1>\n<ul>\n  <li><a href=\"https://blog.csdn.net/zr339361504/article/details/52432163\">lua table 的内部实现</a></li>\n</ul>\n<pre><code>                &lt;/div&gt;\n</code></pre>\n","text":" table 常用函数 -- 获取参数表 table，并对这个 table 预定义一个字段 n（表示该表的长度）。 local arg = table.pack(...) for i = 1, arg.n do print(i, arg[i]) end –[[ 提供一个列表，其所...","link":"","photos":[],"count_time":{"symbolsCount":"1.8k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#heading-table\"><span class=\"toc-text\">table</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#heading-%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">常用函数</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#heading-table-%E7%9A%84%E6%B7%B1%E6%8B%B7%E8%B4%9D\"><span class=\"toc-text\">table 的深拷贝</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#heading-%E5%85%83%E8%A1%A8\"><span class=\"toc-text\">元表</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#heading-%E5%8F%82%E8%80%83%E9%93%BE%E6%8E%A5\"><span class=\"toc-text\">参考链接</span></a>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"C++与Lua初探","uid":"cb25719c3491a610b47df036c787cab4","slug":"zl/2016-01-01-150_C++与Lua初探","date":"2024-04-03T03:47:33.045Z","updated":"2024-04-03T03:47:33.045Z","comments":true,"path":"api/articles/zl/2016-01-01-150_C++与Lua初探.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"最近在工作中用到了Lua与C++的相互调用的知识，现在对两者的互相调用进行总结。 我觉得要了解两者之间的调用关系，需要弄清三件事情： lua栈是什么 C++如何调用lua lua如何调用C++ 在弄清这三件事情之前，让我们先来看看怎么讲Lua嵌入到C++程序中。 大致思路就是将L...","link":"","photos":[],"count_time":{"symbolsCount":"9.7k","symbolsTime":"9 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Lua","uid":"15b0cdc6d03f6c3f6bf8d3a7ff197317","slug":"zl/2016-01-01-149_Lua","date":"2024-04-03T03:47:33.044Z","updated":"2024-04-03T03:47:33.045Z","comments":true,"path":"api/articles/zl/2016-01-01-149_Lua.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"日常 入门了一个很可爱的脚本语言，撸啊!Lua脚本号称是性能最高的脚本，用在许多需要性能的地方，比如游戏脚本，nginx等。源码解释器不到200K，能够和C语言友好互动。 变量变量在使用前，必须在代码中声明来创建该变量。 编译程序执行代码前需要知道如何给语句变量开辟存储区来存储变...","link":"","photos":[],"count_time":{"symbolsCount":"1.5k","symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}