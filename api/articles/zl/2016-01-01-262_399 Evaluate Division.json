{"title":"399 Evaluate Division","uid":"d52806f532a05cde407ce40f8a15f379","slug":"zl/2016-01-01-262_399 Evaluate Division","date":"2024-04-03T03:47:33.123Z","updated":"2024-04-03T03:47:33.123Z","comments":true,"path":"api/articles/zl/2016-01-01-262_399 Evaluate Division.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<p>Equations are given in the format <code>A / B = k</code>, where <code>A</code> and <code>B</code> are variables represented as strings, and <code>k</code> is a real number (floating point number). Given some queries, return the answers. If the answer does not exist, return <code>-1.0</code>.</p>\n<p><strong>Example:</strong><br>Given <code>a / b = 2.0, b / c = 3.0.</code><br>queries are: <code>a / c = ?, b / a = ?, a / e = ?, a / a = ?, x / x = ? .</code><br>return <code>[6.0, 0.5, -1.0, 1.0, -1.0 ].</code></p>\n<p>The input is: <code>vector&lt;pair&lt;string, string&gt;&gt; equations, vector&lt;double&gt;&amp; values, vector&lt;pair&lt;string, string&gt;&gt; queries</code>, where <code>equations.size() == values.size()</code>, and the values are positive. This represents the equations. Return <code>vector&lt;double&gt;</code>.</p>\n<p>According to the example above:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">equations = [ [\"a\", \"b\"], [\"b\", \"c\"] ],</div><div class=\"line\">values = [2.0, 3.0],</div><div class=\"line\">queries = [ [\"a\", \"c\"], [\"b\", \"a\"], [\"a\", \"e\"], [\"a\", \"a\"], [\"x\", \"x\"] ].</div></pre></td></tr></table></figure>\n<p>The input is always valid. You may assume that evaluating the queries will result in no division by zero and there is no contradiction.</p>\n<h2 id=\"思路\"><a href=\"https://wf94.github.io/#%E6%80%9D%E8%B7%AF\" class=\"headerlink\" title=\"思路\"></a>思路</h2><p>我们要利用图的方法来解决这道问题。 我们将每一次除法操作看作有向图的一条边。如a÷b，则构造一个自a到b的边，边上的权值为2，以此类推。</p>\n<p>构造邻接表，分配数组下标，利用BFS的方法遍历图。如果我们需要提高执行效率的话，还可以给图的邻接表增加新的项目以缓存结果。 <a href=\"https://www.xiadong.info/2016/09/14/leetcode-399-evaluate-division/\" target=\"_blank\" rel=\"external noopener noreferrer\">Shell32的博客</a></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> Solution {</div><div class=\"line\"><span class=\"keyword\">public</span>:</div><div class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">double</span>&gt; calcEquation(<span class=\"built_in\">vector</span>&lt;pair&lt;<span class=\"built_in\">string</span>, <span class=\"built_in\">string</span>&gt;&gt; equations, <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">double</span>&gt;&amp; values, <span class=\"built_in\">vector</span>&lt;pair&lt;<span class=\"built_in\">string</span>, <span class=\"built_in\">string</span>&gt;&gt; queries) {</div><div class=\"line\">        <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">double</span>&gt; result;</div><div class=\"line\">        <span class=\"keyword\">int</span> count = <span class=\"number\">1</span>;</div><div class=\"line\">        <span class=\"built_in\">unordered_map</span>&lt;<span class=\"built_in\">string</span>, <span class=\"keyword\">int</span>&gt; index;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; equations.size(); i++){</div><div class=\"line\">            <span class=\"built_in\">string</span> tmp1 = equations[i].first;</div><div class=\"line\">            <span class=\"built_in\">string</span> tmp2 = equations[i].second;</div><div class=\"line\">            <span class=\"keyword\">if</span>(index.find(tmp1) == index.end()){</div><div class=\"line\">                index[tmp1] = count;</div><div class=\"line\">                count++;</div><div class=\"line\">            }</div><div class=\"line\">            <span class=\"keyword\">if</span>(index.find(tmp2) == index.end()){</div><div class=\"line\">                index[tmp2] = count;</div><div class=\"line\">                count++;</div><div class=\"line\">            }</div><div class=\"line\">        }</div><div class=\"line\"></div><div class=\"line\">        <span class=\"built_in\">vector</span>&lt; <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">double</span>&gt; &gt; graph(index.size());</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; index.size(); i++){</div><div class=\"line\">            graph[i].resize(index.size());</div><div class=\"line\">        }</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; equations.size(); i++){</div><div class=\"line\">            <span class=\"keyword\">int</span> tmp1 = index[equations[i].first] - <span class=\"number\">1</span>;</div><div class=\"line\">            <span class=\"keyword\">int</span> tmp2 = index[equations[i].second] - <span class=\"number\">1</span>;</div><div class=\"line\">            graph[tmp1][tmp2] = values[i];</div><div class=\"line\">            graph[tmp2][tmp1] = <span class=\"number\">1.0</span> / values[i];</div><div class=\"line\">        }</div><div class=\"line\"></div><div class=\"line\">        </div><div class=\"line\">            for(int j = 0; j &lt; graph[i].size(); j++){</div><div class=\"line\">                cout &lt;&lt; graph[i][j] &lt;&lt; \" \";</div><div class=\"line\">            }</div><div class=\"line\">            cout &lt;&lt; endl;</div><div class=\"line\">        }*/</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; queries.size(); i++){</div><div class=\"line\">            <span class=\"keyword\">int</span> start = index[queries[i].first] - <span class=\"number\">1</span>;</div><div class=\"line\">            <span class=\"keyword\">int</span> end = index[queries[i].second] - <span class=\"number\">1</span>;</div><div class=\"line\">            <span class=\"keyword\">if</span> (start &lt; <span class=\"number\">0</span> || end &lt; <span class=\"number\">0</span>){</div><div class=\"line\">                result.push_back(<span class=\"number\">-1.0</span>);</div><div class=\"line\">            }</div><div class=\"line\">            <span class=\"keyword\">else</span>{</div><div class=\"line\">                <span class=\"keyword\">if</span> (start == end) result.push_back(<span class=\"number\">1.0</span>);</div><div class=\"line\">                <span class=\"keyword\">else</span>{</div><div class=\"line\">                    <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; visited(index.size());</div><div class=\"line\">                    <span class=\"built_in\">queue</span>&lt;<span class=\"keyword\">int</span>&gt; q;</div><div class=\"line\">                    <span class=\"built_in\">queue</span>&lt;<span class=\"keyword\">double</span>&gt; ans;</div><div class=\"line\">                    q.push(start);</div><div class=\"line\">                    ans.push(<span class=\"number\">1</span>);</div><div class=\"line\">                    <span class=\"keyword\">bool</span> hasResult = <span class=\"literal\">false</span>;</div><div class=\"line\">                    <span class=\"keyword\">while</span>(!q.empty()){</div><div class=\"line\">                        <span class=\"keyword\">int</span> tmp = q.front();</div><div class=\"line\">                        <span class=\"keyword\">double</span> value = ans.front();</div><div class=\"line\">                        visited[tmp] = <span class=\"number\">1</span>;</div><div class=\"line\">                        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; graph.size(); j++){</div><div class=\"line\">                            <span class=\"keyword\">if</span>(visited[j] == <span class=\"number\">0</span> &amp;&amp; graph[tmp][j] &gt; <span class=\"number\">0</span>){</div><div class=\"line\">                                <span class=\"keyword\">if</span> (j != end) {</div><div class=\"line\">                                    q.push(j);</div><div class=\"line\">                                    ans.push(value * graph[tmp][j]);</div><div class=\"line\">                                }</div><div class=\"line\">                                <span class=\"keyword\">else</span>{</div><div class=\"line\">                                    result.push_back(value * graph[tmp][j]);</div><div class=\"line\">                                    hasResult = <span class=\"literal\">true</span>;</div><div class=\"line\">                                }</div><div class=\"line\">                            }</div><div class=\"line\">                        }</div><div class=\"line\">                        q.pop();</div><div class=\"line\">                        ans.pop();</div><div class=\"line\">                    }</div><div class=\"line\">                    <span class=\"keyword\">if</span> (!hasResult) result.push_back(<span class=\"number\">-1.0</span>);</div><div class=\"line\">                }</div><div class=\"line\">            }</div><div class=\"line\">        }</div><div class=\"line\">        <span class=\"keyword\">return</span> result;</div><div class=\"line\">    }</div><div class=\"line\">};</div></pre></td></tr></table></figure>\n<p>最后注意几个C++语言当中的小技巧。</p>\n<p>迭代器访问，注意用it-&gt;first访问pair的第一个元素，it是一个指向迭代器的指针。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> it = equations.begin(); it != equations.end(); ++it){</div><div class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; it-&gt;first &lt;&lt; <span class=\"string\">\" \"</span> &lt;&lt; it-&gt;second &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n<p>C++当中，STL标准库当中的set求交集的代码。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">string</span> a = queries[i].first;</div><div class=\"line\"><span class=\"built_in\">string</span> b = queries[i].second;</div><div class=\"line\"><span class=\"built_in\">set</span>&lt;<span class=\"built_in\">string</span>&gt; pick;</div><div class=\"line\">set_intersection(sets[a].begin(), sets[a].end(), sets[b].begin(), sets[b].end(), inserter(pick, pick.begin()));</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">string</span> element = *pick.begin();</div></pre></td></tr></table></figure>\n<p>有问题的一段代码，从图的观点来看，只做到了第一层DFS，并没有进一步往下走。所以失败了QAQ</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> Solution {</div><div class=\"line\"><span class=\"keyword\">public</span>:</div><div class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">double</span>&gt; calcEquation(<span class=\"built_in\">vector</span>&lt;pair&lt;<span class=\"built_in\">string</span>, <span class=\"built_in\">string</span>&gt;&gt; equations, <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">double</span>&gt;&amp; values, <span class=\"built_in\">vector</span>&lt;pair&lt;<span class=\"built_in\">string</span>, <span class=\"built_in\">string</span>&gt;&gt; queries) {</div><div class=\"line\">        <span class=\"built_in\">unordered_map</span>&lt;<span class=\"built_in\">string</span>, <span class=\"built_in\">unordered_map</span>&lt;<span class=\"built_in\">string</span>, <span class=\"keyword\">double</span>&gt; &gt; stats;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"built_in\">unordered_map</span>&lt;<span class=\"built_in\">string</span>, <span class=\"built_in\">set</span>&lt;<span class=\"built_in\">string</span>&gt; &gt; sets;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;values.size(); i++){</div><div class=\"line\"></div><div class=\"line\">            stats[equations[i].first][equations[i].first] = <span class=\"number\">1.0</span>;</div><div class=\"line\">            stats[equations[i].first][equations[i].second] = values[i];</div><div class=\"line\">            stats[equations[i].second][equations[i].second] = <span class=\"number\">1.0</span>;</div><div class=\"line\">            stats[equations[i].second][equations[i].first] = <span class=\"number\">1.0</span> / values[i];</div><div class=\"line\"></div><div class=\"line\">            sets[equations[i].first].emplace(equations[i].first);</div><div class=\"line\">            sets[equations[i].first].emplace(equations[i].second);</div><div class=\"line\">            sets[equations[i].second].emplace(equations[i].first);</div><div class=\"line\">            sets[equations[i].second].emplace(equations[i].second);</div><div class=\"line\"></div><div class=\"line\">        }</div><div class=\"line\"></div><div class=\"line\">        <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">double</span>&gt; result;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;queries.size(); i++){</div><div class=\"line\">            <span class=\"built_in\">string</span> a = queries[i].first;</div><div class=\"line\">            <span class=\"built_in\">string</span> b = queries[i].second;</div><div class=\"line\">            <span class=\"built_in\">set</span>&lt;<span class=\"built_in\">string</span>&gt; pick;</div><div class=\"line\">            set_intersection(sets[a].begin(), sets[a].end(), sets[b].begin(), sets[b].end(), inserter(pick, pick.begin()));</div><div class=\"line\">            <span class=\"keyword\">if</span> (pick.empty()){</div><div class=\"line\">                result.push_back(<span class=\"number\">-1.0</span>);</div><div class=\"line\">            }</div><div class=\"line\">            <span class=\"keyword\">else</span>{</div><div class=\"line\">                <span class=\"built_in\">string</span> element = *pick.begin();</div><div class=\"line\">                <span class=\"keyword\">double</span> ans = stats[a][element] / stats[b][element];</div><div class=\"line\">                result.push_back(ans);</div><div class=\"line\">            }</div><div class=\"line\">        }</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">return</span> result;</div><div class=\"line\">    }</div><div class=\"line\">};</div></pre></td></tr></table></figure>","text":"Equations are given in the format A / B = k, where A and B are variables represented as strings, and k is a real number (floating point numb...","link":"","photos":[],"count_time":{"symbolsCount":"6.3k","symbolsTime":"6 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%80%9D%E8%B7%AF\"><span class=\"toc-text\">思路</span></a></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"给 Tengine 加上 lua 拓展","uid":"6224a2d92b8e1402c742058a9d03bd16","slug":"zl/2016-01-01-265_给 Tengine 加上 lua 拓展","date":"2024-04-03T03:47:33.128Z","updated":"2024-04-03T03:47:33.129Z","comments":true,"path":"api/articles/zl/2016-01-01-265_给 Tengine 加上 lua 拓展.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":" &lt;p&gt;Tengine 能动态加载第三方模块，成为我们青睐的选择，我们可以编译动态链接文档，而不需要重新安装 Nginx, 这对在线增强 webservice 很有帮助.&lt;br&gt;感谢 agentzh, &lt;a href=&quot;https://gi...","link":"","photos":[],"count_time":{"symbolsCount":"1.2k","symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Lua学习笔记(四)","uid":"de07bd24165865034200079feb4e7e5f","slug":"zl/2016-01-01-261_Lua学习笔记(四)","date":"2024-04-03T03:47:33.123Z","updated":"2024-04-03T03:47:33.123Z","comments":true,"path":"api/articles/zl/2016-01-01-261_Lua学习笔记(四).json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":" 协同 协同与线程的区别 语法 生产者-消费者问题解决（协同） I/O文档 两种模式 打开文档操作 简单模式 安全模式 协同协同，即coroutine与线程比较类似：拥有独立的堆栈，独立的局部变量，独立的命令指针，以及与其它的协同进程共享全局变量等等。 协同与线程的区别一个具有多...","link":"","photos":[],"count_time":{"symbolsCount":"4.5k","symbolsTime":"4 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}