{"title":"Lua语法邮箱sina","uid":"950e37f9b2649a41b194c5a23656d522","slug":"zl/2016-01-01-577_Lua语法邮箱sina","date":"2024-04-03T03:47:35.827Z","updated":"2024-04-03T03:47:35.827Z","comments":true,"path":"api/articles/zl/2016-01-01-577_Lua语法邮箱sina.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<blockquote>\n  <p>Lua是一个以性能著称的轻量级的脚本语言。可以跨平台运行解析，而不需要编译的过程。Lua是一个区分大小写的编程语言。</p>\n</blockquote>\n<p><a href=\"http://www.runoob.com/lua/lua-tutorial.html\">Lua语法学习</a></p>\n<h4 id=\"变量\">变量</h4>\n<p>1、标识符<br/>\nLua中使用标识符定义一个变量，标识符由字母，数字，下划线组成。最好不要使用下划线加大写字母的标识符，因为Lua的保留字也是这样。一般约定，以下划线开头连接一串大写字母的名字（如_VERSION)被保留用于Lua内部全局变量。</p>\n<p>2、定义变量<br/>\nLua定义变量是没有类型的，根据存储什么数据来决定是什么类型。如num=10。</p>\n<p>3、变量类型<br/>\n   (1) nil表示空数据，等同于null。<br/>\n   (2) boolean布尔类型，Lua把false和nil看作是“假”。数字0与空字符串“ ”为真。<br/>\n   (3) string字符串，用“”或‘’来表示，用2个方括号[[]]来表示“一块”字符串。<br/>\n   (4) number小数类型，表示双精度类型的实浮点数。<br/>\n   (5) table，其实是一个“关联数组”，数组的索引可以是数字或字符串。Lua中的数组索引是从1\n   开始的。</p>\n<p>4、Lua变量<br/>\n有三种类型：全局变量、局部变量、表中的域。</p>\n<p>变量默认是全局的。全局变量不需要声明，给一个变量赋值后即创建了这个全局变量，如果想删除一个全局变量，只需要将变量赋值给nil。删除table表里的变量也是一样的。</p>\n<p>局部变量的作用域从声明位置开始到所在语句块结束。</p>\n<h4 id=\"运算符\">运算符</h4>\n<p>1、算术运算符。+、—、*、/、%、^(没有++，–)。<br/>\n2、关系运算符。&lt;、&gt;、&lt;=、&gt;=、==、~=(表！=)。<br/>\n3、逻辑运算符。and、or、not分别表示与、或、非。<br/>\n4、连接运算符。、、表连接两个字符串。<br/>\n5、一元运算符。#，返回字符串或表的长度。</p>\n<h4 id=\"if语句\">if语句</h4>\n<ul>\n  <li>代码如下：\n    <div class=\"language-lua highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>  <span class=\"mi\">1</span><span class=\"err\">、</span><span class=\"k\">if</span> <span class=\"err\">条件</span> <span class=\"k\">then</span>\n     <span class=\"k\">end</span>\n<p><span class=\"mi\">2</span><span class=\"err\">、</span><span class=\"k\">if</span> <span class=\"err\">条件</span> <span class=\"k\">then</span><br />\n<span class=\"k\">else</span><br />\n<span class=\"k\">end</span></p>\n<p><span class=\"mi\">3</span><span class=\"err\">、</span><span class=\"k\">if</span> <span class=\"err\">条件</span> <span class=\"k\">then</span><br />\n<span class=\"k\">elseif</span> <span class=\"err\">条件</span> <span class=\"k\">then</span><br />\n<span class=\"k\">else</span><br />\n<span class=\"k\">end</span><br />\n</code></pre></div>    </div></p>\n  </li>\n</ul>\n<h4 id=\"循环语句\">循环语句</h4>\n<p>1、while循环</p>\n<ul>\n  <li>代码如下：\n    <div class=\"language-lua highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>  <span class=\"k\">while</span> <span class=\"err\">条件</span> <span class=\"k\">do</span>\n  <span class=\"k\">end</span>\n</code></pre></div>    </div>\n  </li>\n</ul>\n<p>2、repeat循环</p>\n<ul>\n  <li>代码如下：\n    <div class=\"language-lua highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>  <span class=\"k\">repeat</span>\n  <span class=\"o\">...</span>\n  <span class=\"k\">until</span> <span class=\"err\">条件</span>\n</code></pre></div>    </div>\n  </li>\n</ul>\n<p>3、for循环</p>\n<ul>\n  <li>代码如下：\n    <div class=\"language-lua highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>  <span class=\"c1\">-- 以step递增循环</span>\n  <span class=\"k\">for</span> <span class=\"n\">index</span> <span class=\"o\">=</span> <span class=\"n\">start</span><span class=\"p\">,</span><span class=\"k\">end</span><span class=\"err\">，</span><span class=\"n\">step</span> <span class=\"k\">do</span>\n  <span class=\"o\">...</span>\n  <span class=\"k\">end</span>\n<p><span class=\"c1\">– 以step递减循环</span><br />\n<span class=\"k\">for</span> <span class=\"n\">index</span> <span class=\"o\">=</span> <span class=\"k\">end</span><span class=\"p\">,</span><span class=\"n\">start</span><span class=\"p\">,</span><span class=\"o\">-</span><span class=\"n\">step</span> <span class=\"k\">do</span><br />\n<span class=\"o\">…</span><br />\n<span class=\"k\">end</span><br />\n</code></pre></div>    </div><br />\n<p><em>注：break可以终止循环，没有continue语法。</em></p><br />\n<h4 id=\"函数\">函数</h4><br />\n<div class=\"language-lua highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>  <span class=\"k\">function</span> <span class=\"err\">方法名（参数1，参数2）</span><br />\n<span class=\"err\">…</span><br />\n<span class=\"nf\">end</span><br />\n</code></pre></div>    </div><br />\n<p>可变参数，Lua函数可以接受可变数目的参数，在函数参数列表中使用三点(…)表示函数有可变的参数。Lua将函数的参数放在一个叫arg的表中。</p></p>\n  </li>\n</ul>\n<h4 id=\"迭代器\">迭代器</h4>\n<p>在Lua中迭代器是一种支持指针类型的结构，它可以遍历集合中每一个元素。</p>\n<ul>\n  <li>代码如下：\n    <div class=\"language-lua highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>  <span class=\"k\">for</span> <span class=\"n\">k</span><span class=\"p\">,</span><span class=\"n\">v</span> <span class=\"k\">in</span> <span class=\"nb\">pairs</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">)</span> <span class=\"k\">do</span>\n  <span class=\"o\">...</span>\n  <span class=\"k\">end</span>\n</code></pre></div>    </div>\n  </li>\n</ul>\n<p>pairs和ipairs区别</p>\n<p>同：都能遍历集合（表、数组）</p>\n<p>异：</p>\n<ul>\n  <li>ipairs只遍历值，按照索引升序遍历，索引中断停止遍历，不能返回nil，只能返回数字0，如果遇到nil则退出，它只能遍历到集合中出现的第一个不是整数的key。</li>\n  <li>pairs能遍历集合中的所有元素。还可以返回nil。</li>\n</ul>\n<h4 id=\"table表\">table（表）</h4>\n<p>    table是Lua的一种数据结构用来创建不同的数据类型。如数组、字典等。通过table来解决模块(module)、包(package)和对象(Object)。</p>\n<p>1、table的创建</p>\n<ul>\n  <li>代码如下：\n    <div class=\"language-lua highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>  <span class=\"n\">myTable</span><span class=\"o\">=</span><span class=\"p\">&#123;&#125;</span>\n  <span class=\"n\">myTable</span><span class=\"o\">=</span><span class=\"p\">&#123;</span><span class=\"mi\">12</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">34</span><span class=\"p\">,</span><span class=\"mi\">55</span><span class=\"p\">,</span><span class=\"s2\">&#34;abc&#34;</span><span class=\"p\">&#125;</span>    \n  <span class=\"n\">myTable</span><span class=\"o\">=</span><span class=\"p\">&#123;</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&#34;wang&#34;</span><span class=\"p\">,</span><span class=\"n\">age</span><span class=\"o\">=</span><span class=\"mi\">18</span><span class=\"p\">,</span><span class=\"n\">isMan</span><span class=\"o\">=</span><span class=\"kc\">false</span><span class=\"p\">&#125;</span>\n</code></pre></div>    </div>\n    <p>2、table的赋值</p>\n  </li>\n  <li>代码如下：\n    <div class=\"language-lua highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>  <span class=\"n\">myTable</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]</span><span class=\"o\">=</span><span class=\"mi\">34</span>\t\t\t<span class=\"o\">//</span><span class=\"err\">当键是一个数字时的赋值方式</span>\n  <span class=\"n\">myTable</span><span class=\"p\">[</span><span class=\"s2\">&#34;name&#34;</span><span class=\"p\">]</span><span class=\"o\">=</span><span class=\"s2\">&#34;wang&#34;</span>\t<span class=\"o\">//</span><span class=\"err\">当键是一个字符串时的赋值方式</span>\n  <span class=\"n\">myTable</span><span class=\"p\">.</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&#34;wang&#34;</span>\t\t<span class=\"o\">//</span><span class=\"err\">当键是一个字符串时的赋值方式</span>\n</code></pre></div>    </div>\n    <p>3、table的遍历<br/>\n(1).如果是只有数字键，并且是连续的。</p>\n    <div class=\"language-lua highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>  <span class=\"k\">for</span> <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"n\">table</span><span class=\"p\">.</span><span class=\"n\">getn</span><span class=\"p\">(</span><span class=\"n\">myTable</span><span class=\"p\">)</span> <span class=\"k\">do</span>\n  <span class=\"o\">...</span>\n  <span class=\"k\">end</span>\n</code></pre></div>    </div>\n    <p>(2).所有的表都可以通过下面的方式遍历</p>\n    <div class=\"language-lua highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>  <span class=\"k\">for</span> <span class=\"n\">index</span><span class=\"p\">,</span><span class=\"n\">value</span> <span class=\"k\">in</span> <span class=\"nb\">pairs</span><span class=\"p\">(</span><span class=\"n\">myTable</span><span class=\"p\">)</span> <span class=\"k\">do</span>\n  <span class=\"o\">...</span>\n  <span class=\"k\">end</span>\n</code></pre></div>    </div>\n    <p>4、table元素的内存指向</p>\n    <div class=\"language-lua highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>  <span class=\"n\">mytable1</span><span class=\"o\">=</span><span class=\"p\">&#123;&#125;</span>\n  <span class=\"n\">mytable1</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">=</span><span class=\"s2\">&#34;lua&#34;</span>\n  <span class=\"n\">mytable1</span><span class=\"p\">[</span><span class=\"s2\">&#34;test&#34;</span><span class=\"p\">]</span><span class=\"o\">=</span><span class=\"s2\">&#34;修改前&#34;</span>\n<p><span class=\"c1\">–mytable2和mytable1指向同一个table</span><br />\n<span class=\"n\">mytable2</span><span class=\"o\">=</span><span class=\"n\">mytable1</span></p>\n<p><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">mytable2</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span>\t<span class=\"c1\">–打印结果为：lua</span><br />\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">mytable2</span><span class=\"p\">[</span><span class=\"s2\">&quot;test&quot;</span><span class=\"p\">])</span>\t\t<span class=\"c1\">–打印结果为：修改前</span></p>\n<p><span class=\"n\">mytable2</span><span class=\"p\">[</span><span class=\"s2\">&quot;test&quot;</span><span class=\"p\">]</span><span class=\"o\">=</span><span class=\"s2\">&quot;修改后&quot;</span><br />\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">mytable1</span><span class=\"p\">[</span><span class=\"s2\">&quot;test&quot;</span><span class=\"p\">])</span>\t\t<span class=\"c1\">–打印结果为：修改后</span></p>\n<p><span class=\"c1\">–释放变量</span><br />\n<span class=\"n\">mytable2</span><span class=\"o\">=</span><span class=\"kc\">nil</span><br />\n<span class=\"c1\">–mytable1仍能访问</span><br />\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">mytable1</span><span class=\"p\">[</span><span class=\"s2\">&quot;test&quot;</span><span class=\"p\">])</span>\t\t<span class=\"c1\">–打印结果为：修改后</span><br />\n</code></pre></div>    </div><br />\n<p>当把表A赋值给另一个表B，两个表指向的是同一个表，当对表B中某一索引重新赋值，表A访问该索引的值为修改的值。如果将表B置为nil，表A仍然能访问元素。</p></p>\n  </li>\n</ul>\n<h4 id=\"lua元表\">Lua元表</h4>\n<p>Lua提供了元表来改变table的行为，每个行为关联了对应的元方法。</p>\n<p>处理元表的函数:</p>\n<ul>\n  <li>setmetatable(table,metatable):对指定的table设置元表。</li>\n  <li>getmetatable(table):返回对象的元表。</li>\n</ul>\n<p>__index元方法：</p>\n<p>当通过键来访问table时，如果该键没有值，lua就会寻找该table的metatable中的__index键。如果__index包含一个表格，Lua就会在表格中查找相应的键；如果__index包含一个函数，Lua就会调用那个函数，table和键会作为参数传递给函数。__index元方法查看表中元素是否存在，如果不存在，返回nil；如果存在则由__index返回结果。</p>\n<p>Lua查找一个表元素的步骤：<br/>\n（1）在表中查找，如果找到，返回该元素，找不到则继续。<br/>\n（2）判断该表是否有元表，如果没有元表，返回nil，有元表则继续。<br/>\n（3）判断元表有没有__index方法，如果__index方法为nil，则返回nil；如果__index方法是一个表，则重复1、2、3；如果__index方法是一个函数，则返回该函数的返回值。</p>\n<p>__newindex元方法：</p>\n<p>__newindex元方法用来对表更新，__index则用来对表访问。<br/>\n当给表的一个缺少的所有赋值，解释器就会查找__newindex元方法；如果存在则调用这个函数而不赋值。</p>\n<h4 id=\"lua面向对象回溯查询\">Lua面向对象:(回溯查询)</h4>\n<p>对象由属性和方法组成，Lua中的类可以用table来描述对象的属性，function表示方法，来进行模拟。至于继承可以通过metatable进行模拟。</p>\n<p>一个简单的类继承：</p>\n<ul>\n  <li>代码如下：\n    <div class=\"language-lua highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>  <span class=\"n\">A</span><span class=\"o\">=</span><span class=\"p\">&#123;&#125;</span>\n  <span class=\"c1\">--模拟构造体</span>\n  <span class=\"k\">function</span> <span class=\"nf\">A</span><span class=\"p\">:</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">o</span><span class=\"p\">)</span>\t\t<span class=\"c1\">--这里相当于function A.new(A,o),self==A。这样写是方便后面继承。new可视为构造函数。</span>\n    <span class=\"n\">o</span><span class=\"o\">=</span><span class=\"n\">o</span> <span class=\"ow\">or</span> <span class=\"p\">&#123;&#125;</span>\t\t\t\t<span class=\"c1\">--定义或获取外部一个o表，这个才是模拟的所谓“对象”的实体。</span>\n    <span class=\"nb\">setmetatable</span><span class=\"p\">(</span><span class=\"n\">o</span><span class=\"p\">,</span><span class=\"n\">self</span><span class=\"p\">)</span>\t<span class=\"c1\">--让A成为o表的元表。这样o表里没有就找A表读取。</span>\n    <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">__index</span><span class=\"o\">=</span><span class=\"n\">self</span>\t\t<span class=\"c1\">--将__index指向自己，以便新对象在访问A的函数和字段时，可被直接重定向。</span>\n    <span class=\"k\">return</span> <span class=\"n\">o</span>\n  <span class=\"k\">end</span>\n<p><span class=\"k\">function</span> <span class=\"nf\">A</span><span class=\"p\">:</span><span class=\"n\">funName</span><span class=\"p\">()</span><br />\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'A'</span><span class=\"p\">)</span><br />\n<span class=\"k\">end</span><br />\n<span class=\"c1\">–从这个类派生出一个子类B，使其打印出类名。则先需要创建一个空的类，从基类继承所有的操作。</span><br />\n<span class=\"n\">B</span><span class=\"o\">=</span><span class=\"n\">A</span><span class=\"p\">:</span><span class=\"n\">new</span><span class=\"p\">()</span>\t\t<span class=\"c1\">–创建出一个A的对象，直到现在，B还只是A的一个实例</span><br />\n<span class=\"n\">S</span><span class=\"o\">=</span><span class=\"n\">B</span><span class=\"p\">:</span><span class=\"n\">new</span><span class=\"p\">()</span>\t\t<span class=\"c1\">–B从A中继承了new，不过这次new在执行时，它的self参数为B，因此，S的元表为B，B中的字段__index的值也是B。S继承自B，而B又继承自A。</span><br />\n<span class=\"c1\">–B重写funName()函数</span><br />\n<span class=\"k\">function</span> <span class=\"nf\">B</span><span class=\"p\">:</span><span class=\"n\">funName</span><span class=\"p\">()</span><br />\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'B'</span><span class=\"p\">)</span><br />\n<span class=\"k\">end</span><br />\n<span class=\"c1\">–现在调用</span><br />\n<span class=\"n\">S</span><span class=\"p\">:</span><span class=\"n\">funName</span><span class=\"p\">()</span><br />\n</code></pre></div>    </div></p>\n  </li>\n</ul>\n<p>实现封装：(使用Lua中的闭包函数)</p>\n<ul>\n  <li>代码如下：\n    <div class=\"language-lua highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>  <span class=\"c1\">--需要一个闭包函数作为类的创建工厂</span>\n  <span class=\"k\">function</span> <span class=\"nf\">newAccout</span><span class=\"p\">(</span><span class=\"n\">initialBalance</span><span class=\"p\">)</span>\n    <span class=\"kd\">local</span> <span class=\"n\">self</span><span class=\"o\">=</span><span class=\"p\">&#123;</span><span class=\"n\">balance</span><span class=\"o\">=</span><span class=\"n\">initialBalance</span><span class=\"p\">&#125;</span>\n    <span class=\"kd\">local</span> <span class=\"n\">withdraw</span><span class=\"o\">=</span><span class=\"k\">function</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span>\n  <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">balance</span><span class=\"o\">=</span><span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">balance</span><span class=\"o\">-</span><span class=\"n\">v</span>\n    <span class=\"k\">end</span>\n    <span class=\"kd\">local</span> <span class=\"n\">deposit</span><span class=\"o\">=</span><span class=\"k\">function</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span>\n  <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">balance</span><span class=\"o\">=</span><span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">balance</span><span class=\"o\">+</span><span class=\"n\">v</span>\n    <span class=\"k\">end</span>\n    <span class=\"kd\">local</span> <span class=\"n\">getBalance</span><span class=\"o\">=</span><span class=\"k\">function</span><span class=\"p\">()</span>\n  <span class=\"k\">return</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">balance</span>\n    <span class=\"k\">end</span>\n    <span class=\"k\">return</span> <span class=\"p\">&#123;</span><span class=\"n\">withdraw</span><span class=\"o\">=</span><span class=\"n\">withdraw</span><span class=\"p\">,</span><span class=\"n\">deposit</span><span class=\"o\">=</span><span class=\"n\">deposit</span><span class=\"p\">,</span><span class=\"n\">getBalance</span><span class=\"o\">=</span><span class=\"n\">getBalance</span><span class=\"p\">&#125;</span>\n  <span class=\"k\">end</span>\n<p><span class=\"n\">accl</span><span class=\"o\">=</span><span class=\"n\">newAccout</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">)</span><br />\n<span class=\"n\">accl</span><span class=\"p\">.</span><span class=\"n\">withdraw</span><span class=\"p\">(</span><span class=\"mi\">40</span><span class=\"p\">)</span><br />\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">accl</span><span class=\"p\">.</span><span class=\"n\">getBalance</span><span class=\"p\">())</span><br />\n</code></pre></div>    </div></p>\n  </li>\n</ul>\n<h4 id=\"模块\">模块</h4>\n<p>    模块类似于一个封装库，可以把一些公用的代码放在一个文件里，以API接口的形式在其他地方调用，有利于代码的重用和降低代码耦合度。Lua的模块是由变量、函数等已知元素组成的table。</p>\n<ul>\n  <li>代码如下：\n    <div class=\"language-lua highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>  <span class=\"c1\">--文件名为module.lua</span>\n<p><span class=\"n\">module</span><span class=\"o\">=</span><span class=\"p\">&#123;&#125;</span>\t\t<span class=\"c1\">–定义一个名为module的模块</span></p>\n<p><span class=\"n\">module</span><span class=\"p\">.</span><span class=\"n\">constant</span><span class=\"o\">=</span><span class=\"s2\">&quot;这是一个常量&quot;</span>\t<span class=\"c1\">–定义一个常量</span></p>\n<p><span class=\"k\">function</span> <span class=\"nc\">module</span><span class=\"p\">.</span><span class=\"nf\">func1</span><span class=\"p\">()</span><br />\n<span class=\"nb\">io.write</span><span class=\"p\">(</span><span class=\"s2\">&quot;公有函数&quot;</span><span class=\"p\">)</span><br />\n<span class=\"k\">end</span></p>\n<p><span class=\"kd\">local</span> <span class=\"k\">function</span> <span class=\"nf\">func2</span><span class=\"p\">()</span><br />\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;私有函数&quot;</span><span class=\"p\">)</span><br />\n<span class=\"k\">end</span></p>\n<p><span class=\"k\">function</span> <span class=\"nc\">module</span><span class=\"p\">.</span><span class=\"nf\">func3</span><span class=\"p\">()</span><br />\n<span class=\"n\">fun2</span><span class=\"p\">()</span><br />\n<span class=\"k\">end</span></p>\n<p><span class=\"k\">return</span> <span class=\"n\">module</span><br />\n</code></pre></div>    </div></p>\n  </li>\n</ul>\n<p>    func2声明为程序块的局部变量，即表示一个私有函数，不能从外部访问模块里的这个私有函数，必须通过模块里的公有函数来调用。</p>\n<h4 id=\"require函数\">require函数</h4>\n<p>Lua提供了require的函数用来加载模块。要加载一个模块，只需要调用即可。</p>\n<p>require(“&lt;模块名&gt;&#34;) 或 require &#34;&lt;模块名&gt;&#34;</p>\n<p>执行require后会返回一个由模块常量或函数组成的table，并且还会定义一个包含该table的全局变量。</p>\n<p>require返回的值将被缓存，即使多次调用require，被调用文件也只运行一次。</p>\n<ul>\n  <li>代码如下：\n    <div class=\"language-lua highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>  <span class=\"c1\">--mod.lua包含print(&#34;mod2&#34;)</span>\n<p><span class=\"kd\">local</span> <span class=\"n\">a</span><span class=\"o\">=</span><span class=\"nb\">require</span><span class=\"p\">(</span><span class=\"s2\">&quot;mod2&quot;</span><span class=\"p\">)</span>\t\t<span class=\"c1\">–输出&quot;mod2&quot;</span></p>\n<p><span class=\"kd\">local</span> <span class=\"n\">b</span><span class=\"o\">=</span><span class=\"nb\">require</span><span class=\"p\">(</span><span class=\"s2\">&quot;mod2&quot;</span><span class=\"p\">)</span>\t\t<span class=\"c1\">–不输出，实际为b=a</span></p>\n<p><span class=\"n\">Dofile</span><span class=\"err\">是不缓存的版本的</span><span class=\"nb\">require</span><span class=\"err\">。</span></p>\n<p><span class=\"n\">Dofile</span><span class=\"p\">(</span><span class=\"s2\">&quot;mod2&quot;</span><span class=\"p\">)</span>\t\t<span class=\"c1\">–输出&quot;mod2&quot;</span><br />\n<span class=\"n\">Dofile</span><span class=\"p\">(</span><span class=\"s2\">&quot;mod2&quot;</span><span class=\"p\">)</span>\t\t<span class=\"c1\">–输出&quot;mod2&quot;</span></p>\n<p><span class=\"nb\">loadfile</span><span class=\"err\">读取文件但不执行</span></p>\n<p><span class=\"n\">f</span><span class=\"o\">=</span><span class=\"nb\">loadfile</span><span class=\"p\">(</span><span class=\"s2\">&quot;mod2.lua&quot;</span><span class=\"p\">)</span></p>\n<p><span class=\"n\">f</span><span class=\"p\">()</span>\t\t<span class=\"c1\">–输出“mod2”</span></p>\n<p><span class=\"n\">loadstring</span><span class=\"err\">读取代码字符串</span></p>\n<p><span class=\"n\">f</span><span class=\"o\">=</span><span class=\"n\">loadstring</span><span class=\"p\">(</span><span class=\"s2\">&quot;print('Lua is cool')&quot;</span><span class=\"p\">)</span></p>\n<p><span class=\"n\">f</span><span class=\"p\">()</span>\t\t<span class=\"err\">输出“</span><span class=\"n\">Lua</span> <span class=\"n\">is</span> <span class=\"n\">cool</span><span class=\"err\">”</span><br />\n</code></pre></div>    </div></p>\n  </li>\n</ul>\n<p><em>参考文章:</em></p>\n<ul>\n  <li><a href=\"http://www.cnblogs.com/stephen-liu74/archive/2012/03/28/2421656.html\">Lua面向对象</a></li>\n  <li><a href=\"http://www.tuicool.com/articles/QVBBRvq\">Lua面向对象实现</a></li>\n</ul>\n<hr/>\n<p><em>注：以上内容来源于网上搜集整理</em></p>","text":" Lua是一个以性能著称的轻量级的脚本语言。可以跨平台运行解析，而不需要编译的过程。Lua是一个区分大小写的编程语言。 Lua语法学习 变量 1、标识符 Lua中使用标识符定义一个变量，标识符由字母，数字，下划线组成。最好不要使用下划线加大写字母的标识符，因为Lua的保留字也是这...","link":"","photos":[],"count_time":{"symbolsCount":"5.5k","symbolsTime":"5 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%8F%98%E9%87%8F\"><span class=\"toc-text\">变量</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%BF%90%E7%AE%97%E7%AC%A6\"><span class=\"toc-text\">运算符</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#if%E8%AF%AD%E5%8F%A5\"><span class=\"toc-text\">if语句</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5\"><span class=\"toc-text\">循环语句</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">函数</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%BF%AD%E4%BB%A3%E5%99%A8\"><span class=\"toc-text\">迭代器</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#table%E8%A1%A8\"><span class=\"toc-text\">table（表）</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#lua%E5%85%83%E8%A1%A8\"><span class=\"toc-text\">Lua元表</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#lua%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%9B%9E%E6%BA%AF%E6%9F%A5%E8%AF%A2\"><span class=\"toc-text\">Lua面向对象:(回溯查询)</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%A8%A1%E5%9D%97\"><span class=\"toc-text\">模块</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#require%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">require函数</span></a></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"3 Model Evaluation","uid":"d4560d3f1f9925741d7de629bfb8f0ef","slug":"zl/2016-01-01-57_3 Model Evaluation","date":"2024-04-03T03:47:35.828Z","updated":"2024-04-03T03:47:35.829Z","comments":true,"path":"api/articles/zl/2016-01-01-57_3 Model Evaluation.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"模型评估 经验误差与拟合问题 在分类问题中，将分类错误的样本占样本总数的比例称为错误率。如果在$m$个样本中有$a$个样本分类错误，则错误率为$E=frac{a}{m}$，与之相对的精度为$Accu=1-E$。或者，我们将学习算法的实际预测输出与样本的真实输出之间的差异称为误差。...","link":"","photos":[],"count_time":{"symbolsCount":"2.4k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"入职作业之 json 数据与 lua value 转换","uid":"c5cc8a80d7d560a392b5bef4717aaad8","slug":"zl/2016-01-01-575_入职作业之 json 数据与 lua value 转换","date":"2024-04-03T03:47:35.826Z","updated":"2024-04-03T03:47:35.826Z","comments":true,"path":"api/articles/zl/2016-01-01-575_入职作业之 json 数据与 lua value 转换.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"题目任务描述：封装json格式的数据与lua value间的互相转换功能 下载ECMA-404的描述文件，观察json的数据格式。 根据描述，一个json value可以是这些类型: object, array, number, string, true, false, or n...","link":"","photos":[],"count_time":{"symbolsCount":"8.7k","symbolsTime":"8 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}