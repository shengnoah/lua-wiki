{"title":"unity lua －1 最开始调用","uid":"e114d6fc302998111b5c100fb6afbfcb","slug":"zl/2016-01-01-193_unity lua －1 最开始调用","date":"2024-04-03T03:47:33.076Z","updated":"2024-04-03T03:47:33.077Z","comments":true,"path":"api/articles/zl/2016-01-01-193_unity lua －1 最开始调用.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<pre><code>    &lt;ul&gt;\n</code></pre>\n<li>lua脚本以txt的形式存储在Resources 下面</li>\n<li>用LuaSvr svr  svr.start调用到脚本 </li>\n<li>用 svr.luaState.getFunction(“foo”).call 来调用到里面的方法</li>\n</ul>\n<h1 id=\"lua\"><a href=\"https://czy123.github.io/#lua\" class=\"headerlink\" title=\"lua\"></a>lua</h1><ul>\n<li>Table – 是一个Key Value的数据结构</li>\n<li>Lua内建约定</li>\n</ul>\n<figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">__add(<span class=\"operator\">a</span>, b)                     对应表达式 <span class=\"operator\">a</span> + b</span><br><span class=\"line\">__sub(<span class=\"operator\">a</span>, b)                     对应表达式 <span class=\"operator\">a</span> - b</span><br><span class=\"line\">__mul(<span class=\"operator\">a</span>, b)                     对应表达式 <span class=\"operator\">a</span> * b</span><br><span class=\"line\">__div(<span class=\"operator\">a</span>, b)                     对应表达式 <span class=\"operator\">a</span> / b</span><br><span class=\"line\">__mod(<span class=\"operator\">a</span>, b)                     对应表达式 <span class=\"operator\">a</span> % b</span><br><span class=\"line\">__pow(<span class=\"operator\">a</span>, b)                     对应表达式 <span class=\"operator\">a</span> ^ b</span><br><span class=\"line\">__unm(<span class=\"operator\">a</span>)                        对应表达式 -<span class=\"operator\">a</span></span><br><span class=\"line\">__concat(<span class=\"operator\">a</span>, b)                  对应表达式 <span class=\"operator\">a</span> .. b</span><br><span class=\"line\">__len(<span class=\"operator\">a</span>)                        对应表达式 </span><br><span class=\"line\">__eq(<span class=\"operator\">a</span>, b)                      对应表达式 <span class=\"operator\">a</span> == b</span><br><span class=\"line\">__lt(<span class=\"operator\">a</span>, b)                      对应表达式 <span class=\"operator\">a</span> &lt; b</span><br><span class=\"line\">__le(<span class=\"operator\">a</span>, b)                      对应表达式 <span class=\"operator\">a</span> &lt;= b</span><br><span class=\"line\">__index(<span class=\"operator\">a</span>, b)                   对应表达式 <span class=\"operator\">a</span>.b</span><br><span class=\"line\">__newindex(<span class=\"operator\">a</span>, b, c)             对应表达式 <span class=\"operator\">a</span>.b = c</span><br><span class=\"line\">__call(<span class=\"operator\">a</span>, ...)                  对应表达式 <span class=\"operator\">a</span>(...)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>lua 面向对象</li>\n</ul>\n<figure class=\"highlight monkey\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Person={}</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> :</span><span class=\"keyword\">new</span>(p)</span><br><span class=\"line\">    <span class=\"keyword\">local</span> obj = p</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (obj == nil) <span class=\"keyword\">then</span></span><br><span class=\"line\">        obj = {name=<span class=\"string\">\"ChenHao\"</span>, age=<span class=\"number\">37</span>, handsome=<span class=\"literal\">true</span>}</span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\">    <span class=\"variable\">self</span>.__index = <span class=\"variable\">self</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> setmetatable(obj, <span class=\"variable\">self</span>)</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> :</span>toString()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable\">self</span>.name ..<span class=\"string\">\" : \"</span>.. <span class=\"variable\">self</span>.age ..<span class=\"string\">\" : \"</span>.. (<span class=\"variable\">self</span>.handsome <span class=\"literal\">and</span> <span class=\"string\">\"handsome\"</span> <span class=\"literal\">or</span> <span class=\"string\">\"ugly\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">上面我们可以看到有一个<span class=\"keyword\">new</span>方法和一个toString的方法。其中：</span><br><span class=\"line\"><span class=\"number\">1</span>）<span class=\"variable\">self</span> 就是 Person，Person:<span class=\"keyword\">new</span>(p)，相当于Person.<span class=\"keyword\">new</span>(<span class=\"variable\">self</span>, p)</span><br><span class=\"line\"><span class=\"number\">2</span>）<span class=\"keyword\">new</span>方法的<span class=\"variable\">self</span>.__index = <span class=\"variable\">self</span> 的意图是怕<span class=\"variable\">self</span>被扩展后改写，所以，让其保持原样</span><br><span class=\"line\"><span class=\"number\">3</span>）setmetatable这个函数返回的是第一个参数的值。</span><br><span class=\"line\">于是：我们可以这样调用：</span><br><span class=\"line\">复制代码 代码如下:</span><br><span class=\"line\"></span><br><span class=\"line\">me = Person:<span class=\"keyword\">new</span>()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(me:toString())</span><br><span class=\"line\"> </span><br><span class=\"line\">kf = Person:<span class=\"keyword\">new</span>{name=<span class=\"string\">\"King's fucking\"</span>, age=<span class=\"number\">70</span>, handsome=<span class=\"literal\">false</span>}</span><br><span class=\"line\"><span class=\"built_in\">print</span>(kf:toString())</span><br></pre></td></tr></table></figure>\n<ul>\n<li>使用外部lua文档</li>\n</ul>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">我们有一个hello.lua的文档：</span><br><span class=\"line\">复制代码 代码如下:</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">print</span><span class=\"params\">(<span class=\"string\">\"Hello, World!\"</span>)</span></span></span><br><span class=\"line\">如果我们：<span class=\"function\"><span class=\"title\">require</span><span class=\"params\">(“hello”)</span></span>，那么就直接输出Hello, World！了。</span><br><span class=\"line\">注意：</span><br><span class=\"line\"><span class=\"number\">1</span>）require函数，载入同样的lua文档时，只有第一次的时候会去执行，后面的相同的都不执行了。</span><br><span class=\"line\"><span class=\"number\">2</span>）如果你要让每一次文档都会执行的话，你可以使用<span class=\"function\"><span class=\"title\">dofile</span><span class=\"params\">(“hello”)</span></span>函数</span><br><span class=\"line\"><span class=\"number\">3</span>）如果你要玩载入后不执行，等你需要的时候执行时，你可以使用 <span class=\"function\"><span class=\"title\">loadfile</span><span class=\"params\">()</span></span>函数，如下所示：</span><br><span class=\"line\">复制代码 代码如下:</span><br><span class=\"line\"></span><br><span class=\"line\">local hello = <span class=\"function\"><span class=\"title\">loadfile</span><span class=\"params\">(<span class=\"string\">\"hello\"</span>)</span></span></span><br><span class=\"line\">... ...</span><br><span class=\"line\">... ...</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">hello</span><span class=\"params\">()</span></span></span><br></pre></td></tr></table></figure>","text":" &lt;ul&gt; lua脚本以txt的形式存储在Resources 下面 用LuaSvr svr svr.start调用到脚本 用 svr.luaState.getFunction(“foo”).call 来调用到里面的方法 lua Table – 是一个Key Value...","link":"","photos":[],"count_time":{"symbolsCount":"1.8k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#lua\"><span class=\"toc-text\">lua</span></a></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Lua编程7之metatable","uid":"4a86ff56596654fd5f385162dfeb6124","slug":"zl/2016-01-01-194_Lua编程7之metatable","date":"2024-04-03T03:47:33.077Z","updated":"2024-04-03T03:47:33.080Z","comments":true,"path":"api/articles/zl/2016-01-01-194_Lua编程7之metatable.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":" &lt;p&gt;思考并回答以下问题：&lt;br&gt;1.如何创建一个空表？&lt;/p&gt; 在 Lua table 中可以访问对应的key来得到value值，但是却无法对两个 table 进行操作。要实现两个table的操作就要使用Lua提供的元表(Metatable...","link":"","photos":[],"count_time":{"symbolsCount":"7.1k","symbolsTime":"6 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Lua 学习 chapter6","uid":"af33457a1ca8da53e4dd258f4137d455","slug":"zl/2016-01-01-191_Lua 学习 chapter6 ","date":"2024-04-03T03:47:33.075Z","updated":"2024-04-03T03:47:33.075Z","comments":true,"path":"api/articles/zl/2016-01-01-191_Lua 学习 chapter6 .json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":" &lt;h3 id=&quot;目录&quot;&gt;目录&lt;/h3&gt; 函数 多个返回值 可变长函数参数 函数 在lua中，函数是对语句和表达式抽象的主要方式。函数的调用需要一对空括号，里面放着参数。唯一的例外就是当参数只有一个且该参数是字符串或表构造器。 1 2 ...","link":"","photos":[],"count_time":{"symbolsCount":"1.8k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}