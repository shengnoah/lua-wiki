{"title":"LeetCode 399. Evaluate Division","uid":"c93abbebcc2158e4112e5ecf116ad7f6","slug":"zl/2016-01-01-760_LeetCode 399. Evaluate Division","date":"2024-04-03T03:47:36.005Z","updated":"2024-04-03T03:47:36.006Z","comments":true,"path":"api/articles/zl/2016-01-01-760_LeetCode 399. Evaluate Division.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>给出方程式 A / B = k, 其中 A 和 B 均为代表字符串的变量， k 是一个浮点型数字。根据已知方程式求解问题，并返回计算结果。如果结果不存在，则返回 -1.0。</p>\n<p>输入总是有效的。你可以假设除法运算中不会出现除数为0的情况，且不存在任何矛盾的结果。</p>\n<h3 id=\"tag\"><a href=\"#tag\" class=\"headerlink\" title=\"tag\"></a>tag</h3><p>DFS BFS 图 并查集</p>\n<h3 id=\"样例\"><a href=\"#样例\" class=\"headerlink\" title=\"样例\"></a>样例</h3><figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/><span class=\"line\">9</span><br/><span class=\"line\">10</span><br/><span class=\"line\">11</span><br/><span class=\"line\">12</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">示例 :</span><br/><span class=\"line\">给定 a / b = 2.0, b / c = 3.0</span><br/><span class=\"line\">问题: a / c = ?, b / a = ?, a / e = ?, a / a = ?, x / x = ? </span><br/><span class=\"line\">返回 [6.0, 0.5, -1.0, 1.0, -1.0 ]</span><br/><span class=\"line\"></span><br/><span class=\"line\">输入为: vector&lt;pair&lt;string, string&gt;&gt; equations, vector&lt;double&gt;&amp; values, vector&lt;pair&lt;string, string&gt;&gt; queries(方程式，方程式结果，问题方程式)， 其中 equations.size() == values.size()，即方程式的长度与方程式结果长度相等（程式与结果一一对应），并且结果值均为正数。以上为方程式的描述。 返回vector&lt;double&gt;类型。</span><br/><span class=\"line\"></span><br/><span class=\"line\">基于上述例子，输入如下：</span><br/><span class=\"line\"></span><br/><span class=\"line\">equations(方程式) = [ [&#34;a&#34;, &#34;b&#34;], [&#34;b&#34;, &#34;c&#34;] ],</span><br/><span class=\"line\">values(方程式结果) = [2.0, 3.0],</span><br/><span class=\"line\">queries(问题方程式) = [ [&#34;a&#34;, &#34;c&#34;], [&#34;b&#34;, &#34;a&#34;], [&#34;a&#34;, &#34;e&#34;], [&#34;a&#34;, &#34;a&#34;], [&#34;x&#34;, &#34;x&#34;] ].</span><br/></pre></td></tr></tbody></table></figure>\n<hr/>\n<h3 id=\"算法1\"><a href=\"#算法1\" class=\"headerlink\" title=\"算法1\"></a>算法1</h3><h5 id=\"DFS-O\"><a href=\"#DFS-O\" class=\"headerlink\" title=\"(DFS)  O()\"></a>(DFS)  O()</h5><h5 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h5><p>先构造图，使用dict实现，其天然的hash可以在in判断时做到O(1)复杂度。</p>\n<p>对每个equation如”a/b=v”构造a到b的带权v的有向边和b到a的带权1/v的有向边，</p>\n<p>之后对每个query，只需要进行dfs并将路径上的边权重叠乘就是结果了，如果路径不可达则结果为-1。</p>\n<h5 id=\"复杂度分析：\"><a href=\"#复杂度分析：\" class=\"headerlink\" title=\"复杂度分析：\"></a>复杂度分析：</h5><h5 id=\"python-代码\"><a href=\"#python-代码\" class=\"headerlink\" title=\"python 代码\"></a>python 代码</h5><figure class=\"highlight python\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/><span class=\"line\">9</span><br/><span class=\"line\">10</span><br/><span class=\"line\">11</span><br/><span class=\"line\">12</span><br/><span class=\"line\">13</span><br/><span class=\"line\">14</span><br/><span class=\"line\">15</span><br/><span class=\"line\">16</span><br/><span class=\"line\">17</span><br/><span class=\"line\">18</span><br/><span class=\"line\">19</span><br/><span class=\"line\">20</span><br/><span class=\"line\">21</span><br/><span class=\"line\">22</span><br/><span class=\"line\">23</span><br/><span class=\"line\">24</span><br/><span class=\"line\">25</span><br/><span class=\"line\">26</span><br/><span class=\"line\">27</span><br/><span class=\"line\">28</span><br/><span class=\"line\">29</span><br/><span class=\"line\">30</span><br/><span class=\"line\">31</span><br/><span class=\"line\">32</span><br/><span class=\"line\">33</span><br/><span class=\"line\">34</span><br/><span class=\"line\">35</span><br/><span class=\"line\">36</span><br/><span class=\"line\">37</span><br/><span class=\"line\">38</span><br/><span class=\"line\">39</span><br/><span class=\"line\">40</span><br/><span class=\"line\">41</span><br/><span class=\"line\">42</span><br/><span class=\"line\">43</span><br/><span class=\"line\">44</span><br/><span class=\"line\">45</span><br/><span class=\"line\">46</span><br/><span class=\"line\">47</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> :</span></span><br/><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">calcEquation</span><span class=\"params\">(self, equations: List[List[str]], values: List[float], queries: List[List[str]])</span> -&gt; List[float]:</span></span><br/><span class=\"line\">        </span><br/><span class=\"line\">        graph = {}</span><br/><span class=\"line\">        <span class=\"keyword\">for</span> (x, y), v <span class=\"keyword\">in</span> zip(equations, values):</span><br/><span class=\"line\">            <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> graph:</span><br/><span class=\"line\">                graph[x][y] = v</span><br/><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br/><span class=\"line\">                graph[x] = {y: v}</span><br/><span class=\"line\">                </span><br/><span class=\"line\">            <span class=\"keyword\">if</span> y <span class=\"keyword\">in</span> graph:</span><br/><span class=\"line\">                graph[y][x] = <span class=\"number\">1</span> / v</span><br/><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br/><span class=\"line\">                graph[y] = {x: <span class=\"number\">1</span> / v}</span><br/><span class=\"line\">        </span><br/><span class=\"line\">        </span><br/><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_dfs</span><span class=\"params\">(s, t)</span>:</span></span><br/><span class=\"line\">            <span class=\"keyword\">if</span> s <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> graph:</span><br/><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">-1</span></span><br/><span class=\"line\">            <span class=\"keyword\">if</span> t == s:</span><br/><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br/><span class=\"line\">            <span class=\"keyword\">for</span> node <span class=\"keyword\">in</span> graph[s].keys():</span><br/><span class=\"line\">                <span class=\"keyword\">if</span> node == t:</span><br/><span class=\"line\">                    <span class=\"keyword\">return</span> graph[s][node]</span><br/><span class=\"line\">                <span class=\"keyword\">elif</span> node <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> visited:</span><br/><span class=\"line\">                    visited.add(node) </span><br/><span class=\"line\">                    v = _dfs(node, t)</span><br/><span class=\"line\">                    <span class=\"keyword\">if</span> v != <span class=\"number\">-1</span>:</span><br/><span class=\"line\">                        <span class=\"keyword\">return</span> graph[s][node] * v</span><br/><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">-1</span></span><br/><span class=\"line\"></span><br/><span class=\"line\">        res = []</span><br/><span class=\"line\">        <span class=\"keyword\">for</span> qs, qt <span class=\"keyword\">in</span> queries:</span><br/><span class=\"line\">            visited = set()</span><br/><span class=\"line\">            res.append(_dfs(qs, qt))</span><br/><span class=\"line\">        <span class=\"keyword\">return</span> res</span><br/><span class=\"line\"></span><br/><span class=\"line\">先构造图，使用dict实现，其天然的hash可以在<span class=\"keyword\">in</span>判断时做到O(<span class=\"number\">1</span>)复杂度。</span><br/><span class=\"line\"></span><br/><span class=\"line\">对每个equation如<span class=\"string\">&#34;a/b=v&#34;</span>构造a到b的带权v的有向边和b到a的带权<span class=\"number\">1</span>/v的有向边，</span><br/><span class=\"line\"></span><br/><span class=\"line\">之后对每个query，只需要进行dfs并将路径上的边权重叠乘就是结果了，如果路径不可达则结果为<span class=\"number\">-1</span>。</span><br/><span class=\"line\"></span><br/><span class=\"line\">作者：mai-mai-mai-mai-zi</span><br/><span class=\"line\">链接：https://leetcode-cn.com/problems/two-sum/solution/xian-gou-zao-tu-zai-dfsde-pythonshi-xian-by-mai-ma/</span><br/><span class=\"line\">来源：力扣（LeetCode）</span><br/><span class=\"line\">著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</span><br/></pre></td></tr></tbody></table></figure>\n<hr/>\n<h3 id=\"算法2\"><a href=\"#算法2\" class=\"headerlink\" title=\"算法2\"></a>算法2</h3><h5 id=\"BFS-O\"><a href=\"#BFS-O\" class=\"headerlink\" title=\"(BFS)  O()\"></a>(BFS)  O()</h5><h5 id=\"思路-1\"><a href=\"#思路-1\" class=\"headerlink\" title=\"思路\"></a>思路</h5><p><a href=\"https://leetcode.com/problems/evaluate-division/discuss/88275/Python-fast-BFS-solution-with-detailed-explantion\" target=\"_blank\" rel=\"noopener noreferrer\">https://leetcode.com/problems/evaluate-division/discuss/88275/Python-fast-BFS-solution-with-detailed-explantion</a></p>\n<h5 id=\"复杂度分析：-1\"><a href=\"#复杂度分析：-1\" class=\"headerlink\" title=\"复杂度分析：\"></a>复杂度分析：</h5><h5 id=\"python-代码-1\"><a href=\"#python-代码-1\" class=\"headerlink\" title=\"python 代码\"></a>python 代码</h5><figure class=\"highlight python\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br/><span class=\"line\"></span><br/></pre></td></tr></tbody></table></figure>\n<hr/>\n<h3 id=\"算法3\"><a href=\"#算法3\" class=\"headerlink\" title=\"算法3\"></a>算法3</h3><h5 id=\"并查集-O\"><a href=\"#并查集-O\" class=\"headerlink\" title=\"(并查集)  O()\"></a>(并查集)  O()</h5><h5 id=\"思路-2\"><a href=\"#思路-2\" class=\"headerlink\" title=\"思路\"></a>思路</h5><p><a href=\"https://leetcode.com/problems/evaluate-division/discuss/162493/Python-Union-Find-Solution\" target=\"_blank\" rel=\"noopener noreferrer\">https://leetcode.com/problems/evaluate-division/discuss/162493/Python-Union-Find-Solution</a></p>\n<p><a href=\"https://leetcode.com/problems/evaluate-division/discuss/270993/Python-BFS-and-UF(detailed-explanation\" target=\"_blank\" rel=\"noopener noreferrer\">https://leetcode.com/problems/evaluate-division/discuss/270993/Python-BFS-and-UF(detailed-explanation)</a>)</p>\n<h5 id=\"复杂度分析：-2\"><a href=\"#复杂度分析：-2\" class=\"headerlink\" title=\"复杂度分析：\"></a>复杂度分析：</h5><h5 id=\"python-代码-2\"><a href=\"#python-代码-2\" class=\"headerlink\" title=\"python 代码\"></a>python 代码</h5><figure class=\"highlight python\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br/><span class=\"line\"></span><br/></pre></td></tr></tbody></table></figure>","text":"题目描述给出方程式 A / B = k, 其中 A 和 B 均为代表字符串的变量， k 是一个浮点型数字。根据已知方程式求解问题，并返回计算结果。如果结果不存在，则返回 -1.0。 输入总是有效的。你可以假设除法运算中不会出现除数为0的情况，且不存在任何矛盾的结果。 tagDFS...","link":"","photos":[],"count_time":{"symbolsCount":"2.8k","symbolsTime":"3 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%A2%98%E7%9B%AE%E6%8F%8F%E8%BF%B0\"><span class=\"toc-text\">题目描述</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#tag\"><span class=\"toc-text\">tag</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%A0%B7%E4%BE%8B\"><span class=\"toc-text\">样例</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%AE%97%E6%B3%951\"><span class=\"toc-text\">算法1</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#DFS-O\"><span class=\"toc-text\">(DFS)  O()</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E6%80%9D%E8%B7%AF\"><span class=\"toc-text\">思路</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90%EF%BC%9A\"><span class=\"toc-text\">复杂度分析：</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#python-%E4%BB%A3%E7%A0%81\"><span class=\"toc-text\">python 代码</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%AE%97%E6%B3%952\"><span class=\"toc-text\">算法2</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#BFS-O\"><span class=\"toc-text\">(BFS)  O()</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E6%80%9D%E8%B7%AF-1\"><span class=\"toc-text\">思路</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90%EF%BC%9A-1\"><span class=\"toc-text\">复杂度分析：</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#python-%E4%BB%A3%E7%A0%81-1\"><span class=\"toc-text\">python 代码</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%AE%97%E6%B3%953\"><span class=\"toc-text\">算法3</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%B9%B6%E6%9F%A5%E9%9B%86-O\"><span class=\"toc-text\">(并查集)  O()</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E6%80%9D%E8%B7%AF-2\"><span class=\"toc-text\">思路</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90%EF%BC%9A-2\"><span class=\"toc-text\">复杂度分析：</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#python-%E4%BB%A3%E7%A0%81-2\"><span class=\"toc-text\">python 代码</span></a></li></ol></li></ol></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"lua 从字符串获取指定第几位数到第几位数","uid":"bbca48466625c192c15bcdb37f0ea93d","slug":"zl/2016-01-01-763_[Lua] lua 从字符串获取指定第几位数到第几位数 ","date":"2024-04-03T03:47:36.006Z","updated":"2024-04-03T03:47:36.006Z","comments":true,"path":"api/articles/zl/2016-01-01-763_[Lua] lua 从字符串获取指定第几位数到第几位数 .json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"– 判断utf8字符byte长度 – 0xxxxxxx - 1 byte – 110yxxxx - 192, 2 byte – 1110yyyy - 225, 3 byte – 11110zzz - 240, 4 byte local function chsize(char) ...","link":"","photos":[],"count_time":{"symbolsCount":"2.6k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"lua学习之元表和元方法","uid":"488e07f634274a724256a88ffcf3108a","slug":"zl/2016-01-01-759_lua学习之元表和元方法","date":"2024-04-03T03:47:36.005Z","updated":"2024-04-03T03:47:36.005Z","comments":true,"path":"api/articles/zl/2016-01-01-759_lua学习之元表和元方法.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"学习lua也有大概一年了，对lua的一些基本的语法很熟练了，也做了一些简单的业务，但是对于lua的高级特性还是不是很熟，最近有时间得以系统的学习学习。本文主要讲述的是lua高级特性之一的元表和元方法。 文字简述 metatable(元表) 本质上来讲元表也是一个表，不过这个表是用...","link":"","photos":[],"count_time":{"symbolsCount":"6.3k","symbolsTime":"6 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}