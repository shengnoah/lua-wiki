{"title":"Lua笔记 迭代器","uid":"f6ae2766b323b6d77308e0bcd268c058","slug":"zl/2016-01-01-820_Lua笔记 迭代器","date":"2024-04-03T03:47:36.066Z","updated":"2024-04-03T03:47:36.067Z","comments":true,"path":"api/articles/zl/2016-01-01-820_Lua笔记 迭代器.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<p>Lua中的迭代器提供的是一种遍历表中所有元素的机制，它通常是函数的形式，每次调用函数，返回“下一个”值。Lua中的迭代器有两种实现方式，基于闭包（closure）或者基于协程（coroutine）。以下会通过一个实例来分别讨论两种迭代器的实现。</p>\n<p>为更好演示迭代器的功能并逐步实现一个迭代器函数，本文结合一个需求的场景，从一个字符串中拆出一个一个的UTF8字符，即每次调用迭代器函数会返回下一个UTF8字符，直到迭代完整个字符串。</p>\n<p>首先需要编写一个这样的函数，输入一个字符串和一个位置pos，得到从这个pos起的第一个UTF8字符，返回该UTF8字符占用的字节数（即Lua中用<code>#</code>取到的字符串长度）以及由对应的字节组成的字符串（其实就是其对应的UTF8字符）。函数的一种实现方式如下：</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/><span class=\"line\">9</span><br/><span class=\"line\">10</span><br/><span class=\"line\">11</span><br/><span class=\"line\">12</span><br/><span class=\"line\">13</span><br/><span class=\"line\">14</span><br/><span class=\"line\">15</span><br/><span class=\"line\">16</span><br/><span class=\"line\">17</span><br/><span class=\"line\">18</span><br/><span class=\"line\">19</span><br/><span class=\"line\">20</span><br/><span class=\"line\">21</span><br/><span class=\"line\">22</span><br/><span class=\"line\">23</span><br/><span class=\"line\">24</span><br/><span class=\"line\">25</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">local</span> getutf8char = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(str,pos)</span></span></span><br/><span class=\"line\">\t<span class=\"keyword\">local</span> <span class=\"built_in\">byte</span> = str:<span class=\"built_in\">byte</span>(pos);</span><br/><span class=\"line\">\t<span class=\"keyword\">local</span> <span class=\"built_in\">len</span>,uchar = <span class=\"number\">1</span>,<span class=\"string\">&#34;&#34;</span>;</span><br/><span class=\"line\">\t<span class=\"keyword\">if</span> <span class=\"built_in\">byte</span> &gt;= <span class=\"number\">0x00</span> <span class=\"keyword\">and</span> <span class=\"built_in\">byte</span> &lt;= <span class=\"number\">0x7F</span> <span class=\"keyword\">then</span></span><br/><span class=\"line\">\t\t<span class=\"built_in\">len</span> = <span class=\"number\">1</span></span><br/><span class=\"line\">\t<span class=\"keyword\">elseif</span> <span class=\"built_in\">byte</span> &gt;= <span class=\"number\">0xC2</span> <span class=\"keyword\">and</span> <span class=\"built_in\">byte</span> &lt;= <span class=\"number\">0xDF</span> <span class=\"keyword\">then</span></span><br/><span class=\"line\">\t\t<span class=\"built_in\">len</span> = <span class=\"number\">2</span></span><br/><span class=\"line\">\t<span class=\"keyword\">elseif</span> <span class=\"built_in\">byte</span> &gt;= <span class=\"number\">0xE0</span> <span class=\"keyword\">and</span> <span class=\"built_in\">byte</span> &lt;= <span class=\"number\">0xEF</span> <span class=\"keyword\">then</span></span><br/><span class=\"line\">\t\t<span class=\"built_in\">len</span> = <span class=\"number\">3</span></span><br/><span class=\"line\">\t<span class=\"keyword\">elseif</span> <span class=\"built_in\">byte</span> &gt;= <span class=\"number\">0xF0</span> <span class=\"keyword\">and</span> <span class=\"built_in\">byte</span> &lt;= <span class=\"number\">0xF4</span> <span class=\"keyword\">then</span></span><br/><span class=\"line\">\t\t<span class=\"built_in\">len</span> = <span class=\"number\">4</span></span><br/><span class=\"line\">\t<span class=\"keyword\">else</span></span><br/><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"built_in\">len</span>,uchar;</span><br/><span class=\"line\">\t<span class=\"keyword\">end</span></span><br/><span class=\"line\">\tuchar = str:<span class=\"built_in\">sub</span>(pos,pos + <span class=\"built_in\">len</span> - <span class=\"number\">1</span>);</span><br/><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"built_in\">len</span>,uchar;</span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"keyword\">local</span> s = <span class=\"string\">&#34;你好hello繁體字123こんにちは안녕하세요&lt;&gt;~!@#《》&#34;</span></span><br/><span class=\"line\"><span class=\"keyword\">local</span> pos = <span class=\"number\">1</span>;</span><br/><span class=\"line\"><span class=\"keyword\">while</span> pos &lt; #s <span class=\"keyword\">do</span></span><br/><span class=\"line\">\t<span class=\"keyword\">local</span> <span class=\"built_in\">len</span>,<span class=\"built_in\">char</span> = getutf8char(s,pos);</span><br/><span class=\"line\">\t<span class=\"built_in\">print</span>(<span class=\"string\">&#34;pos&#34;</span>,pos,<span class=\"string\">&#34;len&#34;</span>,<span class=\"built_in\">len</span>,<span class=\"string\">&#34;char&#34;</span>,<span class=\"built_in\">char</span>);</span><br/><span class=\"line\">\tpos = pos + <span class=\"built_in\">len</span>;</span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/></pre></td></tr></tbody></table></figure>\n<p>接下来借助此函数的功能来编写完整的迭代器函数。</p>\n<h2 id=\"基于闭包的迭代器\"><a href=\"#基于闭包的迭代器\" class=\"headerlink\" title=\"基于闭包的迭代器\"></a>基于闭包的迭代器</h2><p>在Lua中实现迭代器，一种比较简单的方法是使用闭包（closure）。</p>\n<h3 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h3><p>与常规的函数不同，迭代器函数需要在每次成功调用之后保存一些状态（如当前遍历到的位置等），以便于在下次调用时根据这些状态返回“下一个”值。</p>\n<p>借助闭包来实现迭代器时，需要提供一个闭包函数和一个用于创建闭包的工厂函数，在工厂函数中会使用非局部变量（non-local，或者称为upvalue）的形式来保存迭代器的状态，并在闭包函数中引用这些值。</p>\n<h3 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h3><figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/><span class=\"line\">9</span><br/><span class=\"line\">10</span><br/><span class=\"line\">11</span><br/><span class=\"line\">12</span><br/><span class=\"line\">13</span><br/><span class=\"line\">14</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">local</span> uchars_1 = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(str)</span></span></span><br/><span class=\"line\">   <span class=\"keyword\">local</span> pos = <span class=\"number\">1</span></span><br/><span class=\"line\">   <span class=\"keyword\">local</span> nextchar = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span></span><br/><span class=\"line\">      <span class=\"keyword\">if</span> pos &gt; #str <span class=\"keyword\">then</span> <span class=\"keyword\">return</span> <span class=\"literal\">nil</span> <span class=\"keyword\">end</span></span><br/><span class=\"line\">      <span class=\"keyword\">local</span> <span class=\"built_in\">len</span>,<span class=\"built_in\">char</span> = getutf8char(str,pos)</span><br/><span class=\"line\">      pos=pos + <span class=\"built_in\">len</span></span><br/><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"built_in\">char</span></span><br/><span class=\"line\">   <span class=\"keyword\">end</span></span><br/><span class=\"line\">   <span class=\"keyword\">return</span> nextchar,str,pos</span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"keyword\">for</span> c <span class=\"keyword\">in</span> uchars_1 (s) <span class=\"keyword\">do</span></span><br/><span class=\"line\">   <span class=\"built_in\">print</span>(c)</span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/></pre></td></tr></tbody></table></figure>\n<h2 id=\"基于协程的迭代器\"><a href=\"#基于协程的迭代器\" class=\"headerlink\" title=\"基于协程的迭代器\"></a>基于协程的迭代器</h2><p>另一种实现迭代器的方法是借助协程（coroutine）。</p>\n<h3 id=\"原理-1\"><a href=\"#原理-1\" class=\"headerlink\" title=\"原理\"></a>原理</h3><p>这里也会用到两个函数，内部的函数可以遍历所有的情况（所有结果），但是在返回结果时将协程挂起（yield），外部的是工厂函数，构建一个协程并将内部的函数放在协程中执行。</p>\n<h3 id=\"实现-1\"><a href=\"#实现-1\" class=\"headerlink\" title=\"实现\"></a>实现</h3><figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/><span class=\"line\">9</span><br/><span class=\"line\">10</span><br/><span class=\"line\">11</span><br/><span class=\"line\">12</span><br/><span class=\"line\">13</span><br/><span class=\"line\">14</span><br/><span class=\"line\">15</span><br/><span class=\"line\">16</span><br/><span class=\"line\">17</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">local</span> innerfunc = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(s)</span></span></span><br/><span class=\"line\">   <span class=\"keyword\">local</span> pos = <span class=\"number\">1</span></span><br/><span class=\"line\">   <span class=\"keyword\">while</span> pos &lt;= #s <span class=\"keyword\">do</span></span><br/><span class=\"line\">      <span class=\"keyword\">local</span> <span class=\"built_in\">len</span>,<span class=\"built_in\">char</span> = getutf8char(s,pos)</span><br/><span class=\"line\">      pos=pos + <span class=\"built_in\">len</span></span><br/><span class=\"line\">      coroutine.<span class=\"built_in\">yield</span>(<span class=\"built_in\">char</span>)</span><br/><span class=\"line\">   <span class=\"keyword\">end</span></span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"keyword\">local</span> uchars_2 = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(s)</span></span></span><br/><span class=\"line\">   <span class=\"keyword\">local</span> co = coroutine.<span class=\"built_in\">wrap</span>(<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span> innerfunc(s) <span class=\"keyword\">end</span>)</span><br/><span class=\"line\">   <span class=\"keyword\">return</span> co</span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"keyword\">for</span> c <span class=\"keyword\">in</span> uchars_2(s) <span class=\"keyword\">do</span></span><br/><span class=\"line\">   <span class=\"built_in\">print</span> (c)</span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/></pre></td></tr></tbody></table></figure>\n<h2 id=\"REFERENCE\"><a href=\"#REFERENCE\" class=\"headerlink\" title=\"REFERENCE\"></a>REFERENCE</h2><p><a href=\"https://book.douban.com/subject/3076942/\" target=\"_blank\" rel=\"noopener noreferrer\">Lua程序设计（第二版）</a></p>","text":"Lua中的迭代器提供的是一种遍历表中所有元素的机制，它通常是函数的形式，每次调用函数，返回“下一个”值。Lua中的迭代器有两种实现方式，基于闭包（closure）或者基于协程（coroutine）。以下会通过一个实例来分别讨论两种迭代器的实现。 为更好演示迭代器的功能并逐步实现一...","link":"","photos":[],"count_time":{"symbolsCount":"2k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E4%BA%8E%E9%97%AD%E5%8C%85%E7%9A%84%E8%BF%AD%E4%BB%A3%E5%99%A8\"><span class=\"toc-text\">基于闭包的迭代器</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">原理</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">实现</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E4%BA%8E%E5%8D%8F%E7%A8%8B%E7%9A%84%E8%BF%AD%E4%BB%A3%E5%99%A8\"><span class=\"toc-text\">基于协程的迭代器</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8E%9F%E7%90%86-1\"><span class=\"toc-text\">原理</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E7%8E%B0-1\"><span class=\"toc-text\">实现</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#REFERENCE\"><span class=\"toc-text\">REFERENCE</span></a></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"php+redis+lua","uid":"47b6c60d1f4ce31d7b8bf3e7b08c7ddf","slug":"zl/2016-01-01-81_php+redis+lua","date":"2024-04-03T03:47:36.066Z","updated":"2024-04-03T03:47:36.066Z","comments":true,"path":"api/articles/zl/2016-01-01-81_php+redis+lua.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"发两个php+redis+lua的例子。 一、直接在redis上运行命令demo1eval &#34;return {KEYS[1],KEYS[2],ARGV[1],ARGV[2]}&#34; 2 key1 key2 first second eval 命令代表后面接的是lua脚...","link":"","photos":[],"count_time":{"symbolsCount":982,"symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Lua 学习 chapter24","uid":"cf5937e763bc5a1dbfc0ffa5262e9048","slug":"zl/2016-01-01-818_Lua 学习 chapter24 ","date":"2024-04-03T03:47:36.065Z","updated":"2024-04-03T03:47:36.065Z","comments":true,"path":"api/articles/zl/2016-01-01-818_Lua 学习 chapter24 .json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"目录 协程 yield 人人真真的生活过，学习过，改变过，努力过，才能创造出一个满意的自己。 协程 协程是一系列的可执行语句，拥有自己的栈、局部变量和指令指针，同时协程又与其他协程共享了全局变量和其他几乎一切资源。线程和协程的主要区别在于，一个线程程序可以并行运行多个线程，而协程...","link":"","photos":[],"count_time":{"symbolsCount":"2.6k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}