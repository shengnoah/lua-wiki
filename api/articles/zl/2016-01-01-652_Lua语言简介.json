{"title":"Lua语言简介","uid":"862e24c321955460c3f363da814f3290","slug":"zl/2016-01-01-652_Lua语言简介","date":"2024-04-03T03:47:35.872Z","updated":"2024-04-03T03:47:35.872Z","comments":true,"path":"api/articles/zl/2016-01-01-652_Lua语言简介.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>Lua是一门小巧的脚本语言，由巴西里约热内卢天主教大学的Roberto Ierusalimschy等人于1993年开发，在现代企业开发中Lua通常被作为胶水语言，在游戏领域应用尤为频繁。</p>\n<h3 id=\"Lua中的数据类型\"><a href=\"#Lua中的数据类型\" class=\"headerlink\" title=\"Lua中的数据类型\"></a>Lua中的数据类型</h3><p>Lua中定义以下几种数据类型</p>\n<h5 id=\"1、Nil\"><a href=\"#1、Nil\" class=\"headerlink\" title=\"1、Nil\"></a>1、Nil</h5><p>nil是一个特殊的数据类型，它只有一个值，就是nil，他的作用就是为了区别其他的值</p>\n<h5 id=\"2、Boolean\"><a href=\"#2、Boolean\" class=\"headerlink\" title=\"2、Boolean\"></a>2、Boolean</h5><p>和其他语言一样，布尔值只用true和false两个值</p>\n<h5 id=\"3、Number\"><a href=\"#3、Number\" class=\"headerlink\" title=\"3、Number\"></a>3、Number</h5><p>用来表示实数的类型，包含整数和浮点数，Lua中number类型可以表示32位整数</p>\n<h5 id=\"4、String\"><a href=\"#4、String\" class=\"headerlink\" title=\"4、String\"></a>4、String</h5><p>string类型用来表示一个字符串，Lua中的字符串是不可变类型，此外Lua也存在数字和字符串之间的隐式转换<br/></p><figure class=\"highlight stylus\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br/><span class=\"line\"><span class=\"function\"><span class=\"params\">(<span class=\"string\">&#39;10&#39;</span>+<span class=\"number\">1</span>)</span></span>  </span><br/></pre></td></tr></tbody></table></figure><p></p>\n<h5 id=\"5、table\"><a href=\"#5、table\" class=\"headerlink\" title=\"5、table\"></a>5、table</h5><p>table类型实现了一种特殊的数组，特殊之处在于该数字的索引方式，传统的数组索引是通过数组下标来实现的，二table不仅能以整数来索引，还可以使用字符串和其他类型的值进行索引。<br/>table没有固定的大小，可以在里面放入任意数量的元素，下面的例子简单展示了table的用法</p>\n<figure class=\"highlight stylus\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">a</span> = {} <span class=\"comment\">//声明一个table</span></span><br/><span class=\"line\"><span class=\"selector-tag\">a</span>[<span class=\"number\">1</span>] = <span class=\"number\">10</span></span><br/><span class=\"line\"><span class=\"selector-tag\">a</span>[<span class=\"string\">&#34;name&#34;</span>] = <span class=\"string\">&#34;yinxs&#34;</span></span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"function\"><span class=\"params\">(a[<span class=\"number\">1</span>])</span></span><span class=\"comment\">//10</span></span><br/><span class=\"line\"><span class=\"function\"><span class=\"params\">(a[<span class=\"string\">&#34;name&#34;</span>])</span></span><span class=\"comment\">//yinxs</span></span><br/></pre></td></tr></tbody></table></figure>\n<h3 id=\"Lua定义一个函数\"><a href=\"#Lua定义一个函数\" class=\"headerlink\" title=\"Lua定义一个函数\"></a>Lua定义一个函数</h3><p>Lua没有使用大括号来规定函数的作用域，而是使用end关键字来作为结束的标记</p>\n<p>eg：</p>\n<figure class=\"highlight livecodeserver\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"title\">a</span>)</span></span><br/><span class=\"line\">    <span class=\"built_in\">local</span> sun = <span class=\"number\">0</span></span><br/><span class=\"line\">    <span class=\"keyword\">for</span> i,v <span class=\"keyword\">in</span> ipairs(<span class=\"keyword\">a</span>) <span class=\"built_in\">do</span></span><br/><span class=\"line\">        <span class=\"built_in\">sum</span> = <span class=\"built_in\">sum</span> + v</span><br/><span class=\"line\">    <span class=\"keyword\">end</span></span><br/><span class=\"line\">    <span class=\"literal\">return</span> <span class=\"built_in\">sum</span></span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/></pre></td></tr></tbody></table></figure>\n<p>es6中有关于函数的新特性和Lua中的函数有一些相似之处：</p>\n<ul>\n<li>多重返回值</li>\n<li>变长参数</li>\n</ul>\n<p>一个Lua函数可以返回多个值，值需要在return后面列出需要返回的值即可，用逗号隔开</p>\n<p>eg：</p>\n<figure class=\"highlight ada\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">funcion foo()</span><br/><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#34;a&#34;</span>,<span class=\"string\">&#34;b&#34;</span></span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/></pre></td></tr></tbody></table></figure>\n<p>尝试使用print语句来打印foo函数的执行结果，会输出“a”，“b”。<br/>如果使用表达书的形式来调用foo函数，会依照解构赋值额原则来赋值</p>\n<figure class=\"highlight nix\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">x</span> = foo() //<span class=\"attr\">x</span> = <span class=\"string\">&#34;a&#34;</span>,<span class=\"string\">&#34;b&#34;</span>被丢掉</span><br/><span class=\"line\">x,<span class=\"attr\">y</span> = foo() //<span class=\"attr\">x</span> = <span class=\"string\">&#34;a&#34;</span>,<span class=\"attr\">y</span> = <span class=\"string\">&#34;b&#34;</span></span><br/><span class=\"line\">x,y,<span class=\"attr\">z</span> = foo() //<span class=\"attr\">x</span> = <span class=\"string\">&#34;a&#34;</span>,<span class=\"attr\">y</span> = <span class=\"string\">&#34;b&#34;</span>,<span class=\"attr\">z</span> = nil</span><br/></pre></td></tr></tbody></table></figure>\n<p>可变参数，这个特性即为es6中的spread运算符，函数可以接收任意长度的参数。</p>\n<figure class=\"highlight nimrod\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/><span class=\"line\">9</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br/><span class=\"line\">function add(...)</span><br/><span class=\"line\">local s = <span class=\"number\">0</span></span><br/><span class=\"line\">    <span class=\"keyword\">for</span> i,v <span class=\"keyword\">in</span> ipirs  <span class=\"keyword\">do</span></span><br/><span class=\"line\">        s = s+v</span><br/><span class=\"line\">    <span class=\"keyword\">end</span></span><br/><span class=\"line\"><span class=\"keyword\">return</span> s</span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/><span class=\"line\">print(add(<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">10</span>,<span class=\"number\">25</span>,<span class=\"number\">12</span>) //<span class=\"number\">54</span></span><br/></pre></td></tr></tbody></table></figure>\n<h3 id=\"Lua中的协程\"><a href=\"#Lua中的协程\" class=\"headerlink\" title=\"Lua中的协程\"></a>Lua中的协程</h3><p>Lua设计之初就提供了对协程的支持，跟同时期的其他编程语言相比无疑是超前的，Lua将所有协程相关的函数放在一个名为coroutine的table中，一个协程其实就是一个特殊线程，它可以由用户控制状态的切换。</p>\n<h5 id=\"1、coroutine-create\"><a href=\"#1、coroutine-create\" class=\"headerlink\" title=\"1、coroutine.create()\"></a>1、coroutine.create()</h5><p>创建一个coroutine 并返回，参数是一个函数。<br/>eg:</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">log</span><span class=\"params\">(i)</span></span></span><br/><span class=\"line\">    <span class=\"built_in\">print</span>(i);</span><br/><span class=\"line\">    <span class=\"keyword\">end</span></span><br/><span class=\"line\">    </span><br/><span class=\"line\">co = coroutine.<span class=\"built_in\">create</span>(<span class=\"built_in\">log</span>)</span><br/></pre></td></tr></tbody></table></figure>\n<p>我们声明了一个log方法，并用其作为参数创建一个协程，这代表print方法的执行可以被用户终端或恢复。</p>\n<h5 id=\"2、coroutine-resume\"><a href=\"#2、coroutine-resume\" class=\"headerlink\" title=\"2、coroutine.resume()\"></a>2、coroutine.resume()</h5><p>重启coroutine，和create配合使用<br/>上面的diamante新建了一个协程之后并不会直接运行，而是要靠resume方法来启动。</p>\n<figure class=\"highlight llvm\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">coroutine.<span class=\"keyword\">resume</span>(<span class=\"keyword\">c</span><span class=\"number\">0</span>,<span class=\"number\">1</span>) -<span class=\"number\">-1</span></span><br/></pre></td></tr></tbody></table></figure>\n<h5 id=\"3、coroutine-yield\"><a href=\"#3、coroutine-yield\" class=\"headerlink\" title=\"3、coroutine.yield()\"></a>3、coroutine.yield()</h5><p>将coroutine设置为挂起状态，可以由resume来恢复执行</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/><span class=\"line\">9</span><br/><span class=\"line\">10</span><br/><span class=\"line\">11</span><br/><span class=\"line\">12</span><br/><span class=\"line\">13</span><br/><span class=\"line\">14</span><br/><span class=\"line\">15</span><br/><span class=\"line\">16</span><br/><span class=\"line\">17</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">log</span><span class=\"params\">(i)</span></span></span><br/><span class=\"line\"> <span class=\"keyword\">for</span> i=<span class=\"number\">1</span>,<span class=\"number\">10</span> <span class=\"keyword\">do</span></span><br/><span class=\"line\">    <span class=\"built_in\">print</span>(i)</span><br/><span class=\"line\">    coroutine.yielld()</span><br/><span class=\"line\"> <span class=\"keyword\">end</span></span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/><span class=\"line\">co = coroutine.<span class=\"built_in\">create</span>(<span class=\"built_in\">log</span>)</span><br/><span class=\"line\"></span><br/><span class=\"line\">coroutine.<span class=\"built_in\">resume</span>(co) //<span class=\"number\">1</span></span><br/><span class=\"line\"></span><br/><span class=\"line\">coroutine.<span class=\"built_in\">resume</span>(co) //<span class=\"number\">2</span></span><br/><span class=\"line\"></span><br/><span class=\"line\">coroutine.<span class=\"built_in\">resume</span>(co) //<span class=\"number\">3</span></span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"built_in\">print</span>(coroutine.<span class=\"built_in\">status</span>(co) //suspended</span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"built_in\">print</span>(coroutine.<span class=\"built_in\">running</span>()) // thread:<span class=\"number\">0x7fd637c02940</span> <span class=\"literal\">true</span></span><br/></pre></td></tr></tbody></table></figure>\n<p>coroutine.status()为查看coroutine的状态</p>\n<p>一个协程可以有三种不同的状态</p>\n<ul>\n<li>suspended</li>\n<li>running</li>\n<li>dead</li>\n</ul>\n<p>当创建一个协程后，协程默认处于suspended状态，使用yield挂起后状态同样转换为suspended。</p>\n<h5 id=\"4、coroutine-running\"><a href=\"#4、coroutine-running\" class=\"headerlink\" title=\"4、coroutine.running()\"></a>4、coroutine.running()</h5><p>返回当前协程的线程号</p>","text":"简介Lua是一门小巧的脚本语言，由巴西里约热内卢天主教大学的Roberto Ierusalimschy等人于1993年开发，在现代企业开发中Lua通常被作为胶水语言，在游戏领域应用尤为频繁。 Lua中的数据类型Lua中定义以下几种数据类型 1、Nilnil是一个特殊的数据类型，它...","link":"","photos":[],"count_time":{"symbolsCount":"2.2k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%AE%80%E4%BB%8B\"><span class=\"toc-text\">简介</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Lua%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">Lua中的数据类型</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1%E3%80%81Nil\"><span class=\"toc-text\">1、Nil</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#2%E3%80%81Boolean\"><span class=\"toc-text\">2、Boolean</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3%E3%80%81Number\"><span class=\"toc-text\">3、Number</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#4%E3%80%81String\"><span class=\"toc-text\">4、String</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#5%E3%80%81table\"><span class=\"toc-text\">5、table</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Lua%E5%AE%9A%E4%B9%89%E4%B8%80%E4%B8%AA%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">Lua定义一个函数</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Lua%E4%B8%AD%E7%9A%84%E5%8D%8F%E7%A8%8B\"><span class=\"toc-text\">Lua中的协程</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1%E3%80%81coroutine-create\"><span class=\"toc-text\">1、coroutine.create()</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#2%E3%80%81coroutine-resume\"><span class=\"toc-text\">2、coroutine.resume()</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3%E3%80%81coroutine-yield\"><span class=\"toc-text\">3、coroutine.yield()</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#4%E3%80%81coroutine-running\"><span class=\"toc-text\">4、coroutine.running()</span></a></li></ol></li></ol></li></ol></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"基于Nginx Lua 和Netflix Eureka的微服务网关","uid":"8e32dba5b3f21244d1fa5adf8939b7d6","slug":"zl/2016-01-01-653_基于Nginx Lua 和Netflix Eureka的微服务网关","date":"2024-04-03T03:47:35.873Z","updated":"2024-04-03T03:47:35.873Z","comments":true,"path":"api/articles/zl/2016-01-01-653_基于Nginx Lua 和Netflix Eureka的微服务网关.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"依赖：lua-resty-http 基于Nginx&amp;Lua 和Netflix Eureka的微服务网关。 重新架构了内部组件，采用插件模式。 服务发现 Eureka Discovery 抽象discovery，用来支持多种服务发现？规划中… 动态路由 负载均衡 加权轮询 ...","link":"","photos":[],"count_time":{"symbolsCount":"2.5k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Evaluate Reverse Polish Notation","uid":"bcdbc000a93c3724373ebc77548d116e","slug":"zl/2016-01-01-64_[LeetCode]Evaluate Reverse Polish Notation","date":"2024-04-03T03:47:35.871Z","updated":"2024-04-03T03:47:35.871Z","comments":true,"path":"api/articles/zl/2016-01-01-64_[LeetCode]Evaluate Reverse Polish Notation.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"题目描述Evaluate the value of an arithmetic expression in Reverse Polish Notation. Valid operators are +, -, *, /. Each operand may be an intege...","link":"","photos":[],"count_time":{"symbolsCount":"1.3k","symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}