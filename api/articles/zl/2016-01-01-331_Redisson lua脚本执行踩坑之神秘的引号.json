{"title":"Redisson lua脚本执行踩坑之神秘的引号","uid":"7c7d9abb8dae7e75ae4567ba056992f2","slug":"zl/2016-01-01-331_Redisson lua脚本执行踩坑之神秘的引号","date":"2024-04-03T03:47:35.609Z","updated":"2024-04-03T03:47:35.610Z","comments":true,"path":"api/articles/zl/2016-01-01-331_Redisson lua脚本执行踩坑之神秘的引号.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<p>最近项目需求，在redis中需要执行批量删除指定key，并且要支持原子操作，那么当然只有自己写lua脚本了。</p>\n<p>项目中使用的是redisson作为redis连接工具，首先先定义好lua脚本：</p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">private static final String BATCH_DEL_SCRIPT = &#34;for k,v in  pairs(ARGV) do n &#34; +</span><br/><span class=\"line\">         &#34;redis.call(&#39;del&#39;,v) n&#34; +</span><br/><span class=\"line\">         &#34;end n&#34; +</span><br/><span class=\"line\">         &#34;return #ARGV&#34;;</span><br/></pre></td></tr></tbody></table></figure>\n<p>脚本很简单，根据参数传入的key，进行循环删除，然后返回参数的数量，当然这里也可以改为返回删除的数量总和。<br/>redisson使用：</p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">redissonClient.getScript().evalAsync(RScript.Mode.READ_WRITE, BATCH_DEL_SCRIPT, RScript.ReturnType.INTEGER, keys, keys.toArray());</span><br/></pre></td></tr></tbody></table></figure>\n<p>然后开始执行以上代码，就是死活删除不了指定的key，比如redis中存在key：aaaa，执行命令后aaaa还在。各种调查和学习lua语法后还是不行。于是转换思路，不执行删除，而是将删除操作修改为赋值操作，只要将数据置为空也可以达到效果。于是脚本变为：</p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">private static final String BATCH_DEL_SCRIPT = &#34;for k,v in  pairs(ARGV) do n &#34; +</span><br/><span class=\"line\">         &#34;redis.call(&#39;set&#39;,v,&#39;&#39;) n&#34; +</span><br/><span class=\"line\">         &#34;end n&#34; +</span><br/><span class=\"line\">         &#34;return #ARGV&#34;;</span><br/></pre></td></tr></tbody></table></figure>\n<p>通过以上脚本执行后，还是不行，aaaa还存在，而且刷新后多了key：”aaaa”。什么鬼!!<br/>怎么多了个key值，而且是加了引号的。一脸闷逼中。</p>\n<p>知道了设置的规则后，那么解决办法就简单了，只需要在设置或删除key之前去除多余的引号就好了，于是脚本改为：</p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">private static final String BATCH_DEL_SCRIPT = &#34;for k,v in  pairs(ARGV) do n &#34; +</span><br/><span class=\"line\">         &#34;redis.call(&#39;del&#39;,string.gsub(v,&#39;&#34;&#39;,&#39;&#39;),&#39;&#39;) n&#34; +</span><br/><span class=\"line\">         &#34;end n&#34; +</span><br/><span class=\"line\">         &#34;return #ARGV&#34;;</span><br/></pre></td></tr></tbody></table></figure>\n<p>这样完美解决。</p>\n<p>至于为什么lua脚本执行后，字符串对象为什么会多了双引号，这个还在调查中，如果你知道，欢迎评论告知，不胜感激。</p>","text":"最近项目需求，在redis中需要执行批量删除指定key，并且要支持原子操作，那么当然只有自己写lua脚本了。 项目中使用的是redisson作为redis连接工具，首先先定义好lua脚本： 1234private static final String BATCH_DEL_SCR...","link":"","photos":[],"count_time":{"symbolsCount":"1.3k","symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Lua源码阅读：表操作的指令","uid":"49f00c825acf95092ff9c35fb1172205","slug":"zl/2016-01-01-333_Lua源码阅读：表操作的指令","date":"2024-04-03T03:47:35.610Z","updated":"2024-04-03T03:47:35.612Z","comments":true,"path":"api/articles/zl/2016-01-01-333_Lua源码阅读：表操作的指令.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"表操作的相关指令。 创建表：创建一个空表，代码： 1local p = {} 对应的OPCODE为OP_NEWTABLE，用于创建一个表，将结果存入寄存器。 1OP_NEWTABLE, simpleexp最终调用Constructor 函数，这个函数专门负责构造表。 解析表的信息...","link":"","photos":[],"count_time":{"symbolsCount":"9.9k","symbolsTime":"9 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"安卓cocos2d游戏Lua热更新的一次破解","uid":"5960413320ed22247dca54be380e8d4c","slug":"zl/2016-01-01-32_安卓cocos2d游戏Lua热更新的一次破解","date":"2024-04-03T03:47:35.608Z","updated":"2024-04-03T03:47:35.608Z","comments":true,"path":"api/articles/zl/2016-01-01-32_安卓cocos2d游戏Lua热更新的一次破解.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":" lua热更新 lua、luac、luaJIT三种文件的关系 逆向 1. 解压apk 2. 反编译工具 3.分析待破解文件 4.逆向分析 5.解密文件 1. 解密lua文件 2. 解密package包 小结 很多游戏和软件都是用了lua热更新技术，以前对lua热更新不太熟悉，前段...","link":"","photos":[],"count_time":{"symbolsCount":"5.5k","symbolsTime":"5 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}