{"title":"Lua Key","uid":"8e3fd918d82438081d514e30e03d32ba","slug":"zl/2016-01-01-633_Lua Key","date":"2024-04-03T03:47:35.860Z","updated":"2024-04-03T03:47:35.860Z","comments":true,"path":"api/articles/zl/2016-01-01-633_Lua Key.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\">-- 查询读取按键</div><div class=\"line\">KEY = 3</div><div class=\"line\">LEDB = 5 </div><div class=\"line\">LEDR = 6</div><div class=\"line\">LEDG = 7</div><div class=\"line\"></div><div class=\"line\">gpio.mode(KEY,gpio.INPUT)</div><div class=\"line\"></div><div class=\"line\">gpio.mode(LEDB,gpio.OUTPUT)</div><div class=\"line\">gpio.mode(LEDR,gpio.OUTPUT)</div><div class=\"line\">gpio.mode(LEDG,gpio.OUTPUT)</div><div class=\"line\"></div><div class=\"line\">gpio.write(LEDB,gpio.LOW)</div><div class=\"line\">gpio.write(LEDR,gpio.LOW)</div><div class=\"line\">gpio.write(LEDG,gpio.LOW)</div><div class=\"line\"></div><div class=\"line\">function checkKey()</div><div class=\"line\">\tif gpio.read(KEY) == 0 then</div><div class=\"line\">\t\tkeyCnt = keyCnt + 1</div><div class=\"line\">\t\tgpio.write(LEDR,gpio.HIGH)</div><div class=\"line\">\t\tprint(&#34;pressing&#34;)</div><div class=\"line\">\telse</div><div class=\"line\">\t\tif keyCnt &gt;= 50 then</div><div class=\"line\">\t\t\tprint(&#34;---long pressed(ms):&#34;..(keyCnt*100))</div><div class=\"line\">\t\tend</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tif keyCnt &gt;= 2 and keyCnt &lt; 50 then</div><div class=\"line\">\t\t\tprint(&#34;short pressed(ms):&#34;..(keyCnt*100))</div><div class=\"line\">\t\tend</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tkeyCnt = 0</div><div class=\"line\">\t\tgpio.write(LEDR,gpio.LOW)</div><div class=\"line\">\tend</div><div class=\"line\">end</div><div class=\"line\"></div><div class=\"line\">function gpioInit()</div><div class=\"line\">\tkeyCnt = 0</div><div class=\"line\">\ttmr.alarm(0,100,tmr.ALARM_AUTO,checkKey)</div><div class=\"line\">end</div><div class=\"line\">gpioInit()</div></pre></td></tr></tbody></table></figure>\n<p>按键为3 pin，所以设置KEY = 3。接着设置按键的gpio模式为输入模式，初始化三色LED的状态。<br/>按键 <strong>按下时为低电平，不按时为高电平</strong>。因此使用定时器创建一个任务定时查询KEY的状态，如果按键按下了那么就输出按下的信息，点亮LED并使计数器keyCnt自增。松开按键时，通过计数器数值的大小判断是长按还是短按。 最后将计数器置零，并关闭LED。</p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\">--中断方式</div><div class=\"line\">KEY = 3</div><div class=\"line\">LEDB = 5 </div><div class=\"line\">LEDR = 6</div><div class=\"line\">LEDG = 7</div><div class=\"line\"></div><div class=\"line\">gpio.mode(KEY,gpio.INT)</div><div class=\"line\">gpio.mode(LEDB,gpio.OUTPUT)</div><div class=\"line\">gpio.mode(LEDR,gpio.OUTPUT)</div><div class=\"line\">gpio.mode(LEDG,gpio.OUTPUT)</div><div class=\"line\"></div><div class=\"line\">gpio.write(LEDB,gpio.LOW)</div><div class=\"line\">gpio.write(LEDR,gpio.LOW)</div><div class=\"line\">gpio.write(LEDG,gpio.LOW)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">down = 0</div><div class=\"line\">up = 0 </div><div class=\"line\">press = 0</div><div class=\"line\">count = 0</div><div class=\"line\"></div><div class=\"line\">gpio.trig(KEY,&#34;down&#34;,</div><div class=\"line\">function()</div><div class=\"line\">\tcount=count+1</div><div class=\"line\">\tgpio.write(LEDG,gpio.HIGH)</div><div class=\"line\">\tif(count%2==1) then</div><div class=\"line\">\t\tdown = tmr.now()/1000000</div><div class=\"line\">\telse</div><div class=\"line\">\t\tup = tmr.now()/1000000</div><div class=\"line\">\t\tpress = up - down</div><div class=\"line\">\t\tprint(&#34;pressed time(s):&#34;..press)</div><div class=\"line\">\t\tgpio.write(LEDG,gpio.LOW)</div><div class=\"line\">\tend</div><div class=\"line\">end</div><div class=\"line\">)</div></pre></td></tr></tbody></table></figure>\n<p><a href=\"https://nodemcu.readthedocs.io/en/master/en/modules/gpio/\" target=\"_blank\" rel=\"external noopener noreferrer\">gpio.trig()</a><br/>原型： gpio.trig(pin, type, function())<br/>作用： 设置管脚中断模式的回调函数<br/>参数： </p>\n<ol>\n<li>管脚号</li>\n<li>取值方式，”up”, “down”, “both”, “low”, “high”, 分别代表上升沿、下降沿、双边沿、低电平、高电平触发方式</li>\n<li>中断时执行的函数</li>\n</ol>\n<p>tmr.now()<br/>原型： tmr.now()<br/>作用： 获取系统计数器的当前值，单位微秒us</p>\n<p>首先设置KEY管脚为中断模式，接着通过 <strong>gpio.trig( )</strong> 设置中断产生时要执行的动作。由于 <strong>按下时为低电平，不按时为高电平</strong> ，所以当按键按下时会产生一个下降沿，松开时会产生一个上升沿。这里设置有下降沿时运行回调函数，函数运行时让count自增，用于记录按下按钮的次数，然后点亮LED。当奇数次按下KEY时，通过 <strong>tmr.now()</strong> 获取一个时间，当偶数次按下KEY时输出两次的时间间隔并熄灭LED。<br/>这里采用了 <strong>down</strong> 下降沿触发，所以按下KEY后LED会一直常亮，如果想要第一个程序的效果，即按键按下时LED亮，松开时LED灭，可以采用 <strong>both</strong> 双边沿触发方式。</p>","text":"12345678910111213141516171819202122232425262728293031323334353637383940-- 查询读取按键KEY = 3LEDB = 5 LEDR = 6LEDG = 7gpio.mode(KEY,gpio.INPUT)gpi...","link":"","photos":[],"count_time":{"symbolsCount":"2k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Lua C API 教程","uid":"908a0f416a79b3abf4106994c55b122c","slug":"zl/2016-01-01-638_Lua C API 教程 ","date":"2024-04-03T03:47:35.861Z","updated":"2024-04-03T03:47:35.862Z","comments":true,"path":"api/articles/zl/2016-01-01-638_Lua C API 教程 .json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"前一篇文章介绍了怎么从 C 程序中调用 Lua 代码。但内容并没有深入，还有很多东西需要反复去尝试，并且需要通过 Lua 辅助来调用 C 程序。 本章将着重介绍如何继续扩展你的 Lua 程序 - 在Lua中调用C函数。 剖析一个 Lua 程序对 C 的调用从 Lua 的角度来看，...","link":"","photos":[],"count_time":{"symbolsCount":"2.8k","symbolsTime":"3 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Programming in Lua(Thrid Edition)笔记","uid":"a502732b8dc58224e972b6c53538b8c4","slug":"zl/2016-01-01-634_Programming in Lua(Thrid Edition)笔记","date":"2024-04-03T03:47:35.860Z","updated":"2024-04-03T03:47:35.861Z","comments":true,"path":"api/articles/zl/2016-01-01-634_Programming in Lua(Thrid Edition)笔记.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"1 Getting Started statements之间的分号可选 -i选项会让Lua在执行完指定chunk后进入交互模式 1 lua -i prog 在交互模式中可用dofile()函数运行一个外部文件chunk 退出交互模式：ctrl-D in UNIX，ctrl-Z i...","link":"","photos":[],"count_time":{"symbolsCount":687,"symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}