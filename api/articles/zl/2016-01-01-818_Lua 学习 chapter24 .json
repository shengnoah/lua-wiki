{"title":"Lua 学习 chapter24","uid":"cf5937e763bc5a1dbfc0ffa5262e9048","slug":"zl/2016-01-01-818_Lua 学习 chapter24 ","date":"2024-04-03T03:47:36.065Z","updated":"2024-04-03T03:47:36.065Z","comments":true,"path":"api/articles/zl/2016-01-01-818_Lua 学习 chapter24 .json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<h3 id=\"目录\">目录</h3>\n<ol>\n  <li>协程</li>\n  <li>yield</li>\n</ol>\n<blockquote>\n  <p>人人真真的生活过，学习过，改变过，努力过，才能创造出一个满意的自己。</p>\n</blockquote>\n<h2 id=\"协程\">协程</h2>\n<blockquote>\n  <p>协程是一系列的可执行语句，拥有自己的栈、局部变量和指令指针，同时协程又与其他协程共享了全局变量和其他几乎一切资源。线程和协程的主要区别在于，一个线程程序可以并行运行多个线程，而协程却需要彼此协作的运行，即任意指定时刻只能有一个协程运行。</p>\n</blockquote>\n<p>协程相关的函数都在coroutine表中，其中create为创建协程函数，参数为协程要执行的代码函数（协程体）。它会返回一个thread类型的协程。</p>\n<p>一个协程拥有四种状态：挂起，运行，正常和死亡。</p>\n<p>当一个协程被创建的时候，它处于挂起状态。函数resume用于启动或再次启动一个协程的运行，并将其状态由挂起改为运行。协程函数（协程体）执行完毕之后进入死亡状态。当使用协程A唤醒协程B的时候，协程A即不是挂起状态（因为不能唤醒协程A），也不是运行状态（因为B正在运行）。所以A此时的状态就被称为正常状态。</p>\n<p>lua语言一个非常有用的机制是通过一对resume-yield来交换数据，第一个resume函数（没有对应等待它的yield）会把所有额外参数传递给协程的主函数。</p>\n<p>在函数resume的返回之中，第一个返回值为true时表示没有错误，之后的返回值对应函数yield的参数。</p>\n<p>可以将唤醒协程的函数放在一个函数中，因为这种模式比较常见，所以lua语言专门提供了一个特殊的函数coroutine函数来完成这个功能。</p>\n<p>当执行wrap中的函数时候，就唤醒协程。</p>\n<div class=\"language-lua highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n</pre></td><td class=\"rouge-code\"><pre><span class=\"n\">co</span> <span class=\"o\">=</span> <span class=\"nb\">coroutine.create</span><span class=\"p\">(</span><span class=\"k\">function</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"n\">b</span> <span class=\"o\">+</span> <span class=\"n\">c</span>\n<span class=\"k\">end</span><span class=\"p\">)</span>\n<p><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"nb\">coroutine.resume</span><span class=\"p\">(</span><span class=\"n\">co</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">))</span> <span class=\"c1\">–&gt; true 6。执行状态和结果</span></p>\n<p><span class=\"n\">co</span> <span class=\"o\">=</span> <span class=\"nb\">coroutine.create</span><span class=\"p\">(</span><span class=\"k\">function</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">)</span><br />\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"nb\">coroutine.yield</span><span class=\"p\">(</span><span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">b</span> <span class=\"o\">+</span> <span class=\"n\">c</span><span class=\"p\">))</span> <span class=\"c1\">–2 4 6,返回值是唤醒这个yield的参数值</span><br />\n<span class=\"k\">return</span> <span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"n\">b</span> <span class=\"o\">+</span> <span class=\"n\">c</span><br />\n<span class=\"k\">end</span><span class=\"p\">)</span></p>\n<p><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"nb\">coroutine.resume</span><span class=\"p\">(</span><span class=\"n\">co</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">))</span> <span class=\"c1\">– true\t3\t5,返回yield的参数，是最开始传进来的参数</span><br />\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"nb\">coroutine.resume</span><span class=\"p\">(</span><span class=\"n\">co</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">))</span> <span class=\"c1\">– true\t6，返回结果，根据最开始传进来的参数</span><br />\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"nb\">coroutine.resume</span><span class=\"p\">(</span><span class=\"n\">co</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">))</span> <span class=\"c1\">–false\tcannot resume dead coroutine</span></p>\n<p><span class=\"k\">function</span> <span class=\"nf\">permutations</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span><br />\n<span class=\"k\">return</span> <span class=\"nb\">coroutine.wrap</span><span class=\"p\">(</span><span class=\"k\">function</span><span class=\"p\">()</span> <span class=\"n\">permgen</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span> <span class=\"k\">end</span><span class=\"p\">)</span><br />\n<span class=\"k\">end</span><br />\n</pre></td></tr></tbody></table></code></pre></div></div></p>\n<p>生产者与消费者的例子：</p>\n<div class=\"language-lua highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n</pre></td><td class=\"rouge-code\"><pre><span class=\"k\">function</span> <span class=\"nf\">receive</span><span class=\"p\">(</span><span class=\"n\">prod</span><span class=\"p\">)</span>\n    <span class=\"kd\">local</span> <span class=\"n\">status</span><span class=\"p\">,</span> <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"nb\">coroutine.resume</span><span class=\"p\">(</span><span class=\"n\">prod</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">value</span>\n<span class=\"k\">end</span>\n<p><span class=\"k\">function</span> <span class=\"nf\">send</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span><br />\n<span class=\"nb\">coroutine.yield</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span><br />\n<span class=\"k\">end</span></p>\n<p><span class=\"k\">function</span> <span class=\"nf\">producer</span><span class=\"p\">()</span><br />\n<span class=\"k\">return</span> <span class=\"nb\">coroutine.create</span><span class=\"p\">(</span><span class=\"k\">function</span><span class=\"p\">()</span><br />\n<span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">)</span> <span class=\"k\">do</span><br />\n<span class=\"kd\">local</span> <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"nb\">io.read</span><span class=\"p\">()</span><br />\n<span class=\"n\">send</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span><br />\n<span class=\"k\">end</span><br />\n<span class=\"k\">end</span><span class=\"p\">)</span><br />\n<span class=\"k\">end</span></p>\n<p><span class=\"k\">function</span> <span class=\"nf\">filter</span><span class=\"p\">(</span><span class=\"n\">prod</span><span class=\"p\">)</span><br />\n<span class=\"k\">return</span> <span class=\"nb\">coroutine.create</span><span class=\"p\">(</span><span class=\"k\">function</span><span class=\"p\">()</span><br />\n<span class=\"k\">for</span> <span class=\"n\">line</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"nb\">math.huge</span> <span class=\"k\">do</span><br />\n<span class=\"kd\">local</span> <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">receive</span><span class=\"p\">(</span><span class=\"n\">prod</span><span class=\"p\">)</span><br />\n<span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"nb\">string.format</span><span class=\"p\">(</span><span class=\"s2\">&quot;%5d %s&quot;</span><span class=\"p\">,</span> <span class=\"n\">line</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span><br />\n<span class=\"n\">send</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span><br />\n<span class=\"k\">end</span><br />\n<span class=\"k\">end</span><span class=\"p\">)</span><br />\n<span class=\"k\">end</span></p>\n<p><span class=\"k\">function</span> <span class=\"nf\">consumer</span><span class=\"p\">(</span><span class=\"n\">prod</span><span class=\"p\">)</span><br />\n<span class=\"k\">while</span> <span class=\"kc\">true</span> <span class=\"k\">do</span><br />\n<span class=\"kd\">local</span> <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">receive</span><span class=\"p\">(</span><span class=\"n\">prod</span><span class=\"p\">)</span><br />\n<span class=\"nb\">io.write</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"s2\">&quot;</span><span class=\"se\">n</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span><br />\n<span class=\"kd\">local</span> <span class=\"n\">exit</span> <span class=\"o\">=</span> <span class=\"nb\">string.match</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"s2\">&quot;%l+&quot;</span><span class=\"p\">)</span><br />\n<span class=\"k\">if</span> <span class=\"nb\">tostring</span><span class=\"p\">(</span><span class=\"n\">exit</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;q&quot;</span> <span class=\"k\">then</span><br />\n<span class=\"k\">break</span><br />\n<span class=\"k\">end</span><br />\n<span class=\"k\">end</span><br />\n<span class=\"k\">end</span></p>\n<p><span class=\"n\">consumer</span><span class=\"p\">(</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">producer</span><span class=\"p\">()))</span><br />\n</pre></td></tr></tbody></table></code></pre></div></div></p>\n<h2 id=\"yield\">yield</h2>\n<p>一般我们沉睡一个协程的时候都是使用yield，但是yield又没有参数，是怎么确定沉睡的那个协程的呢？</p>\n<p>在这里我首先测试了一下如下的代码，发现会报错，突然明白，原来协程的阻塞 必须写到参数的函数里面，才能阻塞这个协程，写到主线程里面，因为知不道要阻塞的协程会直接报错。</p>\n<p>所以下面的代码应该将 coroutine.yield()放到test函数里面去，就正确了。</p>\n<div class=\"language-lua highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">local</span> <span class=\"k\">function</span> <span class=\"nf\">test</span><span class=\"p\">()</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&#34;test&#34;</span><span class=\"p\">)</span>\n\t<span class=\"c1\">--coroutine.yield()</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&#34;test1&#34;</span><span class=\"p\">)</span>\n<span class=\"k\">end</span>\n<p><span class=\"kd\">local</span> <span class=\"n\">co</span> <span class=\"o\">=</span> <span class=\"nb\">coroutine.create</span><span class=\"p\">(</span><span class=\"n\">test</span><span class=\"p\">)</span><br />\n<span class=\"nb\">coroutine.yield</span><span class=\"p\">()</span><br />\n</pre></td></tr></tbody></table></code></pre></div></div></p>\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n</pre></td><td class=\"rouge-code\"><pre>lua.exe: attempt to yield from outside a coroutine\nstack traceback:\n[C]: in function &#39;coroutine.yield&#39;\n</pre></td></tr></tbody></table></code></pre></div></div>\n<pre><code>            &lt;hr style=&quot;visibility: hidden;&quot;/&gt;\n            \n            &lt;hr style=&quot;visibility: hidden;&quot;/&gt;\n</code></pre>\n","text":"目录 协程 yield 人人真真的生活过，学习过，改变过，努力过，才能创造出一个满意的自己。 协程 协程是一系列的可执行语句，拥有自己的栈、局部变量和指令指针，同时协程又与其他协程共享了全局变量和其他几乎一切资源。线程和协程的主要区别在于，一个线程程序可以并行运行多个线程，而协程...","link":"","photos":[],"count_time":{"symbolsCount":"2.6k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%9B%AE%E5%BD%95\"><span class=\"toc-text\">目录</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8D%8F%E7%A8%8B\"><span class=\"toc-text\">协程</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#yield\"><span class=\"toc-text\">yield</span></a>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Lua笔记 迭代器","uid":"f6ae2766b323b6d77308e0bcd268c058","slug":"zl/2016-01-01-820_Lua笔记 迭代器","date":"2024-04-03T03:47:36.066Z","updated":"2024-04-03T03:47:36.067Z","comments":true,"path":"api/articles/zl/2016-01-01-820_Lua笔记 迭代器.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"Lua中的迭代器提供的是一种遍历表中所有元素的机制，它通常是函数的形式，每次调用函数，返回“下一个”值。Lua中的迭代器有两种实现方式，基于闭包（closure）或者基于协程（coroutine）。以下会通过一个实例来分别讨论两种迭代器的实现。 为更好演示迭代器的功能并逐步实现一...","link":"","photos":[],"count_time":{"symbolsCount":"2k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Mac上搭建lua环境并连接mysql","uid":"80eaeb4f03e297865aa72cd0ce564033","slug":"zl/2016-01-01-819_Mac上搭建lua环境并连接mysql","date":"2024-04-03T03:47:36.065Z","updated":"2024-04-03T03:47:36.065Z","comments":true,"path":"api/articles/zl/2016-01-01-819_Mac上搭建lua环境并连接mysql.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"Lua 是一种轻量小巧的脚本语言，用标准C语言编写并以源代码形式开放， 其设计目的是为了嵌入应用程序中，从而为应用程序提供灵活的扩展和定制功能。(以上摘抄自菜鸟教程) 鉴于Lua的诸多优势，我想在接下来的开发中应用Lua去完成一些需要脚本实现的工作。本文将记录我在Mac上搭建Lu...","link":"","photos":[],"count_time":{"symbolsCount":"2.3k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}