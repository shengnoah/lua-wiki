{"title":"Lua值与类型 · 花生肉泥","uid":"ddc28b77a20693c53b25d2400833ae25","slug":"zl/2016-01-01-36_Lua值与类型 · 花生肉泥","date":"2024-04-03T03:47:35.653Z","updated":"2024-04-03T03:47:35.653Z","comments":true,"path":"api/articles/zl/2016-01-01-36_Lua值与类型 · 花生肉泥.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<h2 id=\"Lua基础语法之值与类型\"><a href=\"#Lua基础语法之值与类型\" class=\"headerlink\" title=\"Lua基础语法之值与类型\"></a>Lua基础语法之值与类型</h2><p>Lua是一种动态类型语言。这意味着变量没有类型，只有值才有类型，所有的值都可以被放在变量里，当做参数传递到另一个函数中，并被函数作为结果返回。<br/></p><figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(<span class=\"string\">&#34;hello world&#34;</span>))     </span><br/><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(<span class=\"number\">10.4</span>*<span class=\"number\">3</span>))                <span class=\"comment\">-- number</span></span><br/><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(<span class=\"built_in\">print</span>))                  <span class=\"comment\">-- function</span></span><br/><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(<span class=\"built_in\">type</span>))                  <span class=\"comment\">-- function</span></span><br/><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(<span class=\"literal\">true</span>))                   <span class=\"comment\">-- boolean</span></span><br/><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(<span class=\"literal\">nil</span>))                      <span class=\"comment\">-- nil</span></span><br/><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(<span class=\"built_in\">type</span>(X)))             </span><br/></pre></td></tr></tbody></table></figure><p></p>\n<p>Lua中有八种基本类型分别为：</p>\n<blockquote>\n<p>nil、boolean、number、string、function、userdata、thread和table</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"></th>\n<th style=\"text-align:center\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">nil</td>\n<td style=\"text-align:center\">只有值nil属于该类，表示一个无效值，在条件表达式中相当于false</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">boolean</td>\n<td style=\"text-align:center\">包含两个值：false和true</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">number</td>\n<td style=\"text-align:center\">表示双精度类型的实浮点数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">string</td>\n<td style=\"text-align:center\">字符串由一对双引号或单引号来表示</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">funciton</td>\n<td style=\"text-align:center\">由C或者Lua编写的函数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">userdata</td>\n<td style=\"text-align:center\">表示任意存储在变量中的C数据结构</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">thread</td>\n<td style=\"text-align:center\">表示执行的独立线程，用于执行协同程序</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">table</td>\n<td style=\"text-align:center\">lua中的表table其实是一个”关联数组”asociative arrays，数组的索引可以是数字或者字符串，在lua里，table的创建是通过”构造表达式”来完成，最简单构造表达式是{}、用来创建一个空格</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"nil类型\"><a href=\"#nil类型\" class=\"headerlink\" title=\"nil类型\"></a>nil类型</h3><p>nil类型只有一种值nil，它的主要用途，在于表识和别的任何值的差异；通常，当需要描述一个无意义的值得时候会用到它</p>\n<h3 id=\"boolean类型\"><a href=\"#boolean类型\" class=\"headerlink\" title=\"boolean类型\"></a>boolean类型</h3><p>boolean只有两种值：false和true，nil和false都能导致条件为假，而另外所有的值都被当做真，lua中认为0和空字符串都为真</p>\n<h3 id=\"number类型\"><a href=\"#number类型\" class=\"headerlink\" title=\"number类型\"></a>number类型</h3><p>number只表示实数，lua中没有整形<br/>编译lua时，可以使用长整数或者单精度浮点型代替数值类型，可以支持到小数点后15位</p>\n<h3 id=\"string类型\"><a href=\"#string类型\" class=\"headerlink\" title=\"string类型\"></a>string类型</h3><p>string指字符的序列。lua是8位字节，所以字符串可以包含任何数值字符，包括嵌入的0。</p>\n<p>这意味着你可以存储任意的二进制数据在一个字符串里，lua中字符串是不可以修改的，你可以创建一个新的变量存放你要的字符串</p>\n<p>string和其他对象一样，lua自动进行内存分配和释放，一个string可以只包含一个字母也可以包含一本书，lua可以高效的处理长字符串，1M的string在lua中很是常见。可以使用单引号或者双引号表示字符串</p>\n<p>自动换算：</p>\n<p>运行时，lua或自动在string和number之间自动进行类型转换，当一个字符串使用算术操作符时，string就会被转成数字。<br/></p><figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#34;100&#34;</span>+<span class=\"string\">&#34;200&#34;</span>)     <span class=\"comment\">-- 300</span></span><br/><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#34;100&#34;</span>+<span class=\"number\">1</span>)          <span class=\"comment\">-- 101</span></span><br/><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#34;100+200&#34;</span>)          <span class=\"comment\">-- 100+200</span></span><br/></pre></td></tr></tbody></table></figure><p></p>\n<p>反过来，当lua期望一个string而碰到数字时，会将数字转成string<br/></p><figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#34;hello&#34;</span>.. <span class=\"number\">1</span> ..<span class=\"string\">&#34;world&#34;</span>)     <span class=\"comment\">--hello 1 world</span></span><br/><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#34;hello&#34;</span>.. <span class=\"number\">1</span> ..<span class=\"string\">&#34;world&#34;</span>)     <span class=\"comment\">--hello 1 world</span></span><br/><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#34;hello&#34;</span>.. <span class=\"number\">1.</span>.<span class=\"string\">&#34;world&#34;</span>) <span class=\"comment\">-- 编译出错，当在一个数字后面写..时，必须加上空格以防止被解释错。</span></span><br/></pre></td></tr></tbody></table></figure><p></p>\n<p>尽管字符串和数字时可以自动转换，但两者是不同的，像10 == “10”这样的比较永远是错的。<br/>如果需要显示将string转成数字可以使用函数tonumber()，如果string不是正确的数字该函数将返回nil，反之，可以调用tostring()将数字转成字符串<br/></p><figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">tostring</span>(<span class=\"number\">10</span>) == <span class=\"string\">&#34;10&#34;</span>)     <span class=\"comment\">-- true</span></span><br/><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"number\">10</span> .. <span class=\"string\">&#34;&#34;</span> == <span class=\"string\">&#34;10&#34;</span>)      <span class=\"comment\">-- true</span></span><br/></pre></td></tr></tbody></table></figure><p></p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">local</span> n,s = <span class=\"number\">111</span>,<span class=\"string\">&#34;111&#34;</span></span><br/><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(n),<span class=\"built_in\">type</span>(s))     <span class=\"comment\">-- number string</span></span><br/><span class=\"line\">n,s = <span class=\"built_in\">tostring</span>(n),<span class=\"built_in\">tonumber</span>(s)</span><br/><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(n),<span class=\"built_in\">type</span>(s))     <span class=\"comment\">-- string number</span></span><br/></pre></td></tr></tbody></table></figure>\n<h3 id=\"funciton类型\"><a href=\"#funciton类型\" class=\"headerlink\" title=\"funciton类型\"></a>funciton类型</h3><p>lua可以调用lua或者C实现的函数，lua所有标准库都是用C实现的，标准库包括string库，table库，I/O库、OS库、math库、debug库</p>\n<p>函数是第一类型(和其他变量相同)，意味着函数可以存储在变量中，可以作为函数的参数，也可以作为函数的返回值(函数名和函数加括号的不同)<br/></p><figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">funciton f1()</span><br/><span class=\"line\">     <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"keyword\">local</span> a = f1</span><br/><span class=\"line\"><span class=\"keyword\">local</span> b = f1()</span><br/><span class=\"line\"><span class=\"built_in\">print</span>(a)     <span class=\"comment\">--function:006AB730</span></span><br/><span class=\"line\"><span class=\"built_in\">print</span>(b)     <span class=\"comment\">--true</span></span><br/></pre></td></tr></tbody></table></figure><p></p>\n<h3 id=\"userdata类型\"><a href=\"#userdata类型\" class=\"headerlink\" title=\"userdata类型\"></a>userdata类型</h3><p>userdata类型用来将任意C数据保存在lua变量中，userdata在lua中除了赋值和相等比较外没有预定义的操作。lua可以调用lua或者C是闲的函数，lua所有标准库都是用C实现的。</p>\n<h3 id=\"thread类型\"><a href=\"#thread类型\" class=\"headerlink\" title=\"thread类型\"></a>thread类型</h3><p>thread类型用来区别独立的执行现场</p>\n<h3 id=\"table类型\"><a href=\"#table类型\" class=\"headerlink\" title=\"table类型\"></a>table类型</h3><p>关联数组可以用任何东西(除了nil)做索引，而不限于数字。table可以以不同类型的值构成，它可以包含所有的类型的值（除nil外）。table是lua中唯一的一种数据结构</p>\n<p>支持以a.name的形式表示a[“name”]，跟索引一样，table每个域中的值也可以是任何类型（除nil以外）。特别的，因为函数本身也是值，所以table的域中也可以放函数</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/><span class=\"line\">9</span><br/><span class=\"line\">10</span><br/><span class=\"line\">11</span><br/><span class=\"line\">12</span><br/><span class=\"line\">13</span><br/><span class=\"line\">14</span><br/><span class=\"line\">15</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">local</span> t = {<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"string\">&#34;a&#34;</span>,<span class=\"string\">&#34;b&#34;</span>,<span class=\"literal\">true</span>,<span class=\"literal\">false</span>,{a}}</span><br/><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#34;表长&#34;</span>..#t)</span><br/><span class=\"line\"><span class=\"keyword\">for</span> k,v <span class=\"keyword\">in</span> <span class=\"built_in\">ipairs</span>(t) <span class=\"keyword\">do</span></span><br/><span class=\"line\">     <span class=\"built_in\">print</span> k,v</span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/><span class=\"line\"></span><br/><span class=\"line\">=====结果=====</span><br/><span class=\"line\">表长<span class=\"number\">7</span></span><br/><span class=\"line\"><span class=\"number\">1</span>     <span class=\"number\">1</span></span><br/><span class=\"line\"><span class=\"number\">2</span>     <span class=\"number\">2</span>    </span><br/><span class=\"line\"><span class=\"number\">3</span>     a</span><br/><span class=\"line\"><span class=\"number\">4</span>     b</span><br/><span class=\"line\"><span class=\"number\">5</span>     <span class=\"literal\">true</span></span><br/><span class=\"line\"><span class=\"number\">6</span>     <span class=\"literal\">false</span></span><br/><span class=\"line\"><span class=\"number\">7</span>     <span class=\"built_in\">table</span>:<span class=\"number\">001</span>EB048</span><br/></pre></td></tr></tbody></table></figure>\n<h3 id=\"获取变量类型的函数\"><a href=\"#获取变量类型的函数\" class=\"headerlink\" title=\"获取变量类型的函数\"></a>获取变量类型的函数</h3><p>type可以返回一个描述给定值的类型的字符串<br/></p><figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">local</span> t = {<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"string\">&#34;a&#34;</span>,<span class=\"string\">&#34;b&#34;</span>,<span class=\"literal\">true</span>,flase,{a}}</span><br/><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(t[<span class=\"number\">1</span>]))     <span class=\"comment\">-- number</span></span><br/><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(t[<span class=\"number\">3</span>]))     </span><br/><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(t[<span class=\"number\">5</span>]))     <span class=\"comment\">-- boolean</span></span><br/><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(t[<span class=\"number\">7</span>]))     <span class=\"comment\">-- tbale</span></span><br/></pre></td></tr></tbody></table></figure><p></p>","text":"Lua基础语法之值与类型Lua是一种动态类型语言。这意味着变量没有类型，只有值才有类型，所有的值都可以被放在变量里，当做参数传递到另一个函数中，并被函数作为结果返回。1234567print(type(&#34;hello world&#34;)) print(type(10.4...","link":"","photos":[],"count_time":{"symbolsCount":"3.1k","symbolsTime":"3 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Lua%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E4%B9%8B%E5%80%BC%E4%B8%8E%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">Lua基础语法之值与类型</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#nil%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">nil类型</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#boolean%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">boolean类型</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#number%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">number类型</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#string%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">string类型</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#funciton%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">funciton类型</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#userdata%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">userdata类型</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#thread%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">thread类型</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#table%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">table类型</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%8E%B7%E5%8F%96%E5%8F%98%E9%87%8F%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">获取变量类型的函数</span></a></li></ol></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"手动编译Lua代码","uid":"4e509981ccdc51e8e4dfb1f9bc0c5fcb","slug":"zl/2016-01-01-370_手动编译Lua代码","date":"2024-04-03T03:47:35.653Z","updated":"2024-04-03T03:47:35.654Z","comments":true,"path":"api/articles/zl/2016-01-01-370_手动编译Lua代码.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"如果将一段Lua代码直接翻译成C++代码，可能会存在一个问题：Lua有tail call，C++没有tail call。 例如下面这个函数(求二叉树所有结点的和)，第二次递归调用Visit是tail call，如果直接翻译成C++代码，会失去一部分优化效果。 function S...","link":"","photos":[],"count_time":{"symbolsCount":"25k","symbolsTime":"23 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"(2)静态资源服务器、缓存、HTTPS、Openresty+Lua","uid":"52fc705e276554f97391201482dfc777","slug":"zl/2016-01-01-369_(2)静态资源服务器、缓存、HTTPS、Openresty+Lua","date":"2024-04-03T03:47:35.652Z","updated":"2024-04-03T03:47:35.652Z","comments":true,"path":"api/articles/zl/2016-01-01-369_(2)静态资源服务器、缓存、HTTPS、Openresty+Lua.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"1.alias 与 root 访问固定目录的做法 Location / { alias dlib/;} root 的问题：会把url 的路径带到文件目录中来，所以通常使用alias 2.gzip gzip_min_length 1;表示小于1字节的就不再压缩了。因为有的文件小，一...","link":"","photos":[],"count_time":{"symbolsCount":"4.7k","symbolsTime":"4 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}