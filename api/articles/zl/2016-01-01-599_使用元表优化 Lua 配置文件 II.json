{"title":"使用元表优化 Lua 配置文件 II","uid":"9d4eb2ff3916a88a1e1cbccfb13f1376","slug":"zl/2016-01-01-599_使用元表优化 Lua 配置文件 II","date":"2024-04-03T03:47:35.835Z","updated":"2024-04-03T03:47:35.835Z","comments":true,"path":"api/articles/zl/2016-01-01-599_使用元表优化 Lua 配置文件 II.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<div class=\"main-content-wrap\">\n<p>上回提到<a href=\"https://www.orztu.com/post/lua-table-minify/\" target=\"_blank\" rel=\"noopener noreferrer\">元表优化 Lua 配置文件</a>，以减少重复字段，节省内存开销。</p>\n<p>除了这种直接地减少内存开销的方法，使用元表还能实现数据的延迟加载，从另一个角度节约内存。</p>\n<h2 id=\"延迟加载\">延迟加载</h2>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-Lua\" data-lang=\"Lua\"><span class=\"c1\">-- PropModel.lua</span>\n<span class=\"n\">PropModel</span> <span class=\"o\">=</span> <span class=\"p\">&#123;</span>\n    <span class=\"p\">[</span><span class=\"mi\">1001</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">&#123;</span>\n        <span class=\"n\">ID</span>   <span class=\"o\">=</span> <span class=\"mi\">1001</span><span class=\"p\">,</span>\n        <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s2\">&#34;道具1001&#34;</span><span class=\"p\">,</span>\n        <span class=\"n\">desc</span> <span class=\"o\">=</span> <span class=\"s2\">&#34;道具1001描述&#34;</span><span class=\"p\">,</span>\n        <span class=\"p\">...</span>\n    <span class=\"p\">&#125;,</span>\n    <span class=\"p\">[</span><span class=\"mi\">1002</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">&#123;</span>\n        <span class=\"n\">ID</span>   <span class=\"o\">=</span> <span class=\"mi\">1002</span><span class=\"p\">,</span>\n        <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s2\">&#34;道具1002&#34;</span><span class=\"p\">,</span>\n        <span class=\"n\">desc</span> <span class=\"o\">=</span> <span class=\"s2\">&#34;道具1002描述&#34;</span><span class=\"p\">,</span>\n        <span class=\"p\">...</span>\n    <span class=\"p\">&#125;,</span>\n    <span class=\"p\">...</span>\n<span class=\"p\">&#125;</span></code></pre></div>\n<p>上面依然是最常见的道具表，所有道具都配置在同一个表中，初始化时会全部加载进内存。\n然而大多数道具是玩家并不拥有的，在内存中长期停留浪费空间。</p>\n<p>通过使用元表，我们能做到每个道具按需（延迟）加载。</p>\n<ol>\n<li><p>首先清空表数据，使用元表的<code>__index</code>方法实现延迟加载：\n</p><div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-Lua\" data-lang=\"Lua\"><span class=\"c1\">-- PropModel.lua</span>\n<span class=\"n\">PropModel</span> <span class=\"o\">=</span> <span class=\"p\">&#123;&#125;</span> <span class=\"c1\">-- 道具表不再直接存放数据</span>\n<p><span class=\"c1\">– 使用元表延迟加载数据</span><br />\n<span class=\"n\">setmetatable</span><span class=\"p\">(</span><span class=\"n\">PropModel</span><span class=\"p\">,</span> <span class=\"p\">&#123;</span><br />\n<span class=\"n\">_<em>index</span> <span class=\"o\">=</span> <span class=\"kr\">function</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"p\">)</span><br />\n<span class=\"kd\">local</span> <span class=\"n\">item</span> <span class=\"o\">=</span> <span class=\"n\">require</span><span class=\"p\">(</span><span class=\"n\">string.format</span><span class=\"p\">(</span><span class=\"s2\">&quot;PropModel</em>%s&quot;</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"p\">))</span><br />\n<span class=\"n\">PropModel</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">item</span><br />\n<span class=\"kr\">return</span> <span class=\"n\">item</span><br />\n<span class=\"kr\">end</span><span class=\"p\">,</span><br />\n<span class=\"p\">&#125;)</span></code></pre></div><p></p></li></p>\n<li><p>将各道具数据另外存放——将<code>道具1001</code>单独存放：\n</p><div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-Lua\" data-lang=\"Lua\"><span class=\"c1\">-- PropModel_1001.lua</span>\n<span class=\"kd\">local</span> <span class=\"n\">PropModel_1001</span> <span class=\"o\">=</span> <span class=\"p\">&#123;</span>\n    <span class=\"n\">ID</span>   <span class=\"o\">=</span> <span class=\"mi\">1001</span><span class=\"p\">,</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s2\">&#34;道具1001&#34;</span><span class=\"p\">,</span>\n    <span class=\"n\">desc</span> <span class=\"o\">=</span> <span class=\"s2\">&#34;道具1002描述&#34;</span><span class=\"p\">,</span>\n    <span class=\"p\">...</span>\n<span class=\"p\">&#125;</span>\n<span class=\"kr\">return</span> <span class=\"n\">PropModel_1001</span></code></pre></div><p></p></li>\n</ol>\n<h2 id=\"最后\">最后</h2>\n<p>上面的代码是每个<code>item</code>单独拆分到一个文件中。\n如果有必要，也可以按照<code>ID</code>进行区间拆分，将多个<code>item</code>放在一个文件中。\n在<code>__index</code>方法中判断<code>ID</code>落在哪个区间，将该区间数据全部加载。</p>\n<p>同时，拆分后的数据依然可以结合<a href=\"https://www.orztu.com/post/lua-table-minify/\" target=\"_blank\" rel=\"noopener noreferrer\">上一篇</a>\n的“默认字段”的方法使用。</p>\n</div>","text":" 上回提到元表优化 Lua 配置文件，以减少重复字段，节省内存开销。 除了这种直接地减少内存开销的方法，使用元表还能实现数据的延迟加载，从另一个角度节约内存。 延迟加载 -- PropModel.lua PropModel = &#123; [1001] = &#123; ID ...","link":"","photos":[],"count_time":{"symbolsCount":"1.1k","symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%BB%B6%E8%BF%9F%E5%8A%A0%E8%BD%BD\"><span class=\"toc-text\">延迟加载</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%9C%80%E5%90%8E\"><span class=\"toc-text\">最后</span></a></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Ubuntu18.04 Nginx+Lua+GraphicsMagick图片缩放","uid":"a59cd69ee5dd570ef472b014ff61d6f1","slug":"zl/2016-01-01-602_Ubuntu18.04 Nginx+Lua+GraphicsMagick图片缩放","date":"2024-04-03T03:47:35.836Z","updated":"2024-04-03T03:47:35.837Z","comments":true,"path":"api/articles/zl/2016-01-01-602_Ubuntu18.04 Nginx+Lua+GraphicsMagick图片缩放.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"自己搭建的图片服务器，有图片缩放的需求，大致思路是可以使用nginx调用lua，使用GraphicMagick的命令来做图片缩放 说明文件夹规划lua.jaychang.cn(如/var/filebase) 12345678910111213jaychang@nginx:~$ t...","link":"","photos":[],"count_time":{"symbolsCount":"10k","symbolsTime":"9 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Lua代码规范","uid":"09b4344dce8fef33e99561ed8e674168","slug":"zl/2016-01-01-597_Lua代码规范","date":"2024-04-03T03:47:35.835Z","updated":"2024-04-03T03:47:35.835Z","comments":true,"path":"api/articles/zl/2016-01-01-597_Lua代码规范.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"在公司整理了一份Lua语言的代码规范，分享一下。 写代码如同写文章，每个人或多或少都有自己的风格。我们在进行产品开发的过程中，更多的是团队上的协作与交流而非单打独斗。所以，为了 提高开发效率，降低维护成本，促进团队合作，代码的审查，整理出这篇文章。 借助于《Python风格指南》...","link":"","photos":[],"count_time":{"symbolsCount":"6.5k","symbolsTime":"6 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}