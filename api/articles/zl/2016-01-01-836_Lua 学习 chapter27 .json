{"title":"Lua 学习 chapter27","uid":"6fa85b2c9d2fb1c7122f1bf9a96bb9e7","slug":"zl/2016-01-01-836_Lua 学习 chapter27 ","date":"2024-04-03T03:47:36.084Z","updated":"2024-04-03T03:47:36.088Z","comments":true,"path":"api/articles/zl/2016-01-01-836_Lua 学习 chapter27 .json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<h3 id=\"目录\">目录</h3>\n<ol>\n  <li>前言</li>\n  <li>第一个示例</li>\n  <li>lua堆栈操作</li>\n  <li>处理应用代码中的错误</li>\n  <li>内存分配</li>\n</ol>\n<blockquote>\n  <p>只有疯狂过，你才知道自己究竟能不能成功。</p>\n</blockquote>\n<h2 id=\"前言\">前言</h2>\n<p>lua是一种嵌入式语言，这就意味着lua并不是一个独立运行的应用，而是一个库，它可以链接到其它应用程序，将lua的功能融入到这些应用。</p>\n<p>由于lua存在解释器（可执行的lua），所以我们可以独立的使用它，这个解释器是由lua标准库实现的独立解释器，它负责与用户交互，将用户的文件和字符串传递给lua标准库，由标准库完成主要工作。</p>\n<p>因为能被当作ku来扩展某个应用程序，所以lua是一个嵌入式语言。同时，使用了lua语言的程序也可以在lua环境中注册新的函数，比如用c语言实现的函数，从而增加一些无法直接用lua语言编写的功能，因此lua也是一种可扩展的语言。</p>\n<p>上述的两种对lua语言的定位，分别对应c语言和lua语言之间的两种交互方式。在第一种形式中，c语言拥有控制权，而lua语言被用作库，这种交互形式中c代码被称为应用代码。在第二种中，lua语言拥有控制权，而c语言被用作库，因此c代码被称为库代码。应用代码和库代码都是用相同的API与lua语言通信，这些API被称为C API。</p>\n<p>C API是一个函数、常量和类型组成的集合，有了它，c语言代码就能与lua语言交互。C API包括读写lua全局变量的函数、调用lua函数的函数、运行lua代码段的函数以及注册c函数(以便于其后可被lua代码调用）的函数等。通过调用C API，C代码几乎可以做lua代码能够做的所有事情。</p>\n<p>C API遵循C语言的操作模式，与lua模式有很大的区别。所以在c的时候可能会抛弃易用性，但是在效率上，c代码可能会高一些。</p>\n<h2 id=\"第一个示例\">第一个示例</h2>\n<div class=\"language-c highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n</pre></td><td class=\"rouge-code\"><pre><span class=\"cp\">#include&lt;stdio.h&gt;\n#include&lt;string.h&gt;\n</span>\n<span class=\"k\">extern</span> <span class=\"s\">&#34;C&#34;</span> <span class=\"p\">&#123;</span>\n<span class=\"cp\">#include &lt;lua.h&gt;\n#include &lt;lauxlib.h&gt;\n#include &lt;lualib.h&gt;\n</span><span class=\"p\">&#125;</span>\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">(</span><span class=\"kt\">void</span><span class=\"p\">)</span>\n<span class=\"p\">&#123;</span>\n\t<span class=\"kt\">char</span> <span class=\"n\">buff</span><span class=\"p\">[</span><span class=\"mi\">256</span><span class=\"p\">];</span>\n\t<span class=\"kt\">int</span> <span class=\"n\">error</span><span class=\"p\">;</span>\n\t<span class=\"n\">lua_State</span><span class=\"o\">*</span> <span class=\"n\">L</span> <span class=\"o\">=</span> <span class=\"n\">luaL_newstate</span><span class=\"p\">();</span><span class=\"c1\">//打开lua</span>\n\t<span class=\"n\">luaL_openlibs</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">);</span><span class=\"c1\">//打开标准库</span>\n<pre><code>&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fgets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stdin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&#123;&lt;/span&gt;\n\t&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;luaL_loadstring&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lua_pcall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;\n\t&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;\n\t&lt;span class=&quot;p&quot;&gt;&#123;&lt;/span&gt;\n\t\t&lt;span class=&quot;n&quot;&gt;fprintf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stderr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#34;%s&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lua_tostring&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;\n\t\t&lt;span class=&quot;n&quot;&gt;lua_pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//从栈中弹出错误信息&lt;/span&gt;\n\t&lt;span class=&quot;p&quot;&gt;&#125;&lt;/span&gt;\n&lt;span class=&quot;p&quot;&gt;&#125;&lt;/span&gt;\n&lt;span class=&quot;n&quot;&gt;lua_close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;\n&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;\n</code></pre>\n<p><span class=\"p\">}</span></p>\n<p><span class=\"o\">–</span> <span class=\"err\">测试输入</span><br />\n<span class=\"n\">qewqr</span><br />\n<span class=\"p\">[</span><span class=\"n\">string</span> <span class=\"s\">&quot;qewqr…&quot;</span><span class=\"p\">]</span><span class=\"o\">:</span><span class=\"mi\">2</span><span class=\"o\">:</span> <span class=\"n\">syntax</span> <span class=\"n\">error</span> <span class=\"n\">near</span> <span class=\"o\">&lt;</span><span class=\"n\">eof</span><span class=\"o\">&gt;</span><br />\n<span class=\"n\">print</span><span class=\"p\">(</span><span class=\"s\">&quot;hello&quot;</span><span class=\"p\">)</span><br />\n<span class=\"n\">hello</span><br />\n<span class=\"n\">local</span> <span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"p\">{}</span><br />\n<span class=\"n\">t</span><span class=\"p\">.</span><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"mi\">5</span><br />\n<span class=\"p\">[</span><span class=\"n\">string</span> <span class=\"s\">&quot;t.a = 5…&quot;</span><span class=\"p\">]</span><span class=\"o\">:</span><span class=\"mi\">1</span><span class=\"o\">:</span> <span class=\"n\">attempt</span> <span class=\"n\">to</span> <span class=\"n\">index</span> <span class=\"n\">a</span> <span class=\"n\">nil</span> <span class=\"n\">value</span> <span class=\"p\">(</span><span class=\"n\">global</span> <span class=\"sc\">'t'</span><span class=\"p\">)</span><br />\n<span class=\"n\">t</span><span class=\"o\">=</span> <span class=\"p\">{}</span><br />\n<span class=\"n\">t</span><span class=\"p\">.</span><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"mi\">5</span><br />\n<span class=\"n\">print</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">.</span><span class=\"n\">a</span><span class=\"p\">)</span><br />\n<span class=\"mi\">5</span><br />\n</pre></td></tr></tbody></table></code></pre></div></div></p>\n<p>接下来我们来熟悉一下各种头文件的提供了那些函数，其中头文件lua.h声明了lua提供的基础函数，其中包括创建新的lua环境的函数，调用lua函数的函数、读写环境中的全局变量的函数，以及注册供lua语言调用的新函数的函数。lua.h中声明的所有的内容都有一个前缀lua_(eg:lua_pcall).</p>\n<p>头文件lauxlib.h声明了辅助库(auxiliary library, auxlib)所提供的的函数，其中所有的声明均以luaL_开头（eg:luaL_loadstring)。辅助库使用lua.h提供的基础API来提供更高层次的抽象，特别是对标准库用到的相关机制进行抽象。</p>\n<p>lua标准库没有定义任何c语言全局变量，它将所有的状态都保存在动态的结构体lua_State中，lua中的所有函数都接收一个纸箱该结构的指针作为参数。这种设计使得lua是可重入的，并且可以直接用于编写所线程代码。</p>\n<p>函数luaL_newstate用于创建一个新的lua状态。当它创建一个新的状态时，新的环境中没有包含预定一个的函数，甚至连print都没有。为了保持lua语言的精炼，所有的标准库都被组织成不同的包，这样我们在不需要使用某些包的时候可以忽略它们。头文件lualib.h中声明了用于打开这些库的函数。函数luaL_openlibs用于打开所有的标准库。</p>\n<p>当创建好一个状态并在其中加载了标准库之后，就可以处理用户的输入了。程序会首先调用函数luaL_loadstring来编译用户输入的每一行内容。如果没有错误，则返回零，并向栈中压入编译后得到的函数。然后，程序调用函数lua_pcall从栈中弹出编译后的函数，并以保护模式运行。如果没有发生错误，pcall一样返回零，如果发生错误，这两个函数都会像栈中压入一条错误信息。然后我们可以通过lua_tostring来获取错误信息。</p>\n<p>在其中有一个lua_pop函数，该函数表示从当前lua状态栈中弹出几个元素，如lua_pop( pLua, 2 )表示从栈顶弹出2个元素，当第二个参数填入-1时弹出所有元素即lua_pop( pLua, -1 ).</p>\n<h2 id=\"lua堆栈操作\">lua堆栈操作</h2>\n<p>lua和c之间的通信主要组件是无处不在的虚拟栈，几乎所有的API调用都是在操作这个栈中的值，lua与c之间的所有数据交换都是通过这个栈完成的。此外，还可以利用栈保存中的结果。</p>\n<p>在对lua栈操作的时候，当循环向栈中压入元素的时候，需要调用函数lua_checkstack来检查栈中是否有足够的空间。</p>\n<p>C API提供了一系列lua_is*的函数，其中*可以是任意一种lua数据类型。这些函数包括lua_isnil,lua_isnumber,lua_isstring和lua_istable.lua_type返回栈中元素的类型，包含：LUA_TSTRING，LUA_TBOOLEAN，LUA_TNUMBER，LUA_TSTRING等。</p>\n<p>针对于lua堆栈的操作。</p>\n<p>C API使用索引（index）来引用栈中的元素。。第一个被压如栈的元素索引为1，第二个被压入的元素索引为2，-1表示栈顶元素，-2表示在它之前被压入栈的元素。</p>\n<div class=\"language-c highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n</pre></td><td class=\"rouge-code\"><pre><span class=\"k\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">stackDump</span><span class=\"p\">(</span><span class=\"n\">lua_State</span><span class=\"o\">*</span> <span class=\"n\">L</span><span class=\"p\">)</span> <span class=\"p\">&#123;</span>\n\t<span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"p\">;</span>\n\t<span class=\"kt\">int</span> <span class=\"n\">top</span> <span class=\"o\">=</span> <span class=\"n\">lua_gettop</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">);</span> <span class=\"c1\">//栈深度</span>\n\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">top</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span>\n\t<span class=\"p\">&#123;</span>\n\t\t<span class=\"kt\">int</span> <span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"n\">lua_type</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">);</span>\n\t\t<span class=\"k\">switch</span> <span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">)</span>\n\t\t<span class=\"p\">&#123;</span>\n\t\t<span class=\"k\">case</span> <span class=\"n\">LUA_TSTRING</span><span class=\"p\">:</span> <span class=\"p\">&#123;</span>\n\t\t\t<span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;%s&#34;</span><span class=\"p\">,</span> <span class=\"n\">lua_tostring</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">));</span>\n\t\t\t<span class=\"k\">break</span><span class=\"p\">;</span>\n\t\t<span class=\"p\">&#125;</span>\n\t\t<span class=\"k\">case</span> <span class=\"n\">LUA_TBOOLEAN</span><span class=\"p\">:</span> <span class=\"p\">&#123;</span>\n\t\t\t<span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"n\">lua_toboolean</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"o\">?</span> <span class=\"s\">&#34;true&#34;</span> <span class=\"o\">:</span> <span class=\"s\">&#34;false&#34;</span><span class=\"p\">);</span>\n\t\t\t<span class=\"k\">break</span><span class=\"p\">;</span>\n\t\t<span class=\"p\">&#125;</span>\n\t\t<span class=\"k\">case</span> <span class=\"n\">LUA_TNUMBER</span><span class=\"p\">:</span> <span class=\"p\">&#123;</span>\n\t\t\t<span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;%g&#34;</span><span class=\"p\">,</span> <span class=\"n\">lua_tonumber</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">));</span>\n\t\t\t<span class=\"k\">break</span><span class=\"p\">;</span>\n\t\t<span class=\"p\">&#125;</span>\n\t\t<span class=\"nl\">default:</span>\n\t\t\t<span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;%s&#34;</span><span class=\"p\">,</span> <span class=\"n\">lua_typename</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"n\">t</span><span class=\"p\">));</span>\n\t\t\t<span class=\"k\">break</span><span class=\"p\">;</span>\n\t\t<span class=\"p\">&#125;</span>\n\t\t<span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34; &#34;</span><span class=\"p\">);</span>\n\t<span class=\"p\">&#125;</span>\n\t<span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;</span><span class=\"se\">n</span><span class=\"s\">&#34;</span><span class=\"p\">);</span>\n<span class=\"p\">&#125;</span>\n<p><span class=\"k\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">test</span><span class=\"p\">()</span> <span class=\"p\">&#123;</span><br />\n<span class=\"n\">lua_State</span><span class=\"o\">*</span> <span class=\"n\">L</span> <span class=\"o\">=</span> <span class=\"n\">luaL_newstate</span><span class=\"p\">();</span></p>\n<pre><code>&lt;span class=&quot;n&quot;&gt;lua_pushboolean&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;\n&lt;span class=&quot;n&quot;&gt;lua_pushnumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;\n&lt;span class=&quot;n&quot;&gt;lua_pushnil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;\n&lt;span class=&quot;n&quot;&gt;lua_pushstring&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#34;hello&amp;#34;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;\n&lt;span class=&quot;n&quot;&gt;stackDump&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//true 10 nil hello&lt;/span&gt;\n&lt;span class=&quot;n&quot;&gt;lua_pushvalue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//将指定索引的值压到栈顶&lt;/span&gt;\n&lt;span class=&quot;n&quot;&gt;stackDump&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//true 10 nil hello true&lt;/span&gt;\n&lt;span class=&quot;n&quot;&gt;lua_replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//pop栈顶元素，并将pop的值设置到指定索引&lt;/span&gt;\n&lt;span class=&quot;n&quot;&gt;stackDump&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// true 10 true hello&lt;/span&gt;\n&lt;span class=&quot;n&quot;&gt;lua_settop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//设置栈中元素个数,0的话清空栈，大于原来个数补nil&lt;/span&gt;\n&lt;span class=&quot;n&quot;&gt;stackDump&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//true 10 true hello nil nil&lt;/span&gt;\n&lt;span class=&quot;n&quot;&gt;lua_rotate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//将指定元素向栈顶转动n个位置，并把栈顶元素补充过来&lt;/span&gt;\n&lt;span class=&quot;n&quot;&gt;stackDump&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//true 10 nil true hello nil&lt;/span&gt;\n&lt;span class=&quot;n&quot;&gt;lua_remove&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//移除指定位置的值&lt;/span&gt;\n&lt;span class=&quot;n&quot;&gt;stackDump&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//true 10 nil hello nil&lt;/span&gt;\n&lt;span class=&quot;n&quot;&gt;lua_close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;\n</code></pre>\n<p><span class=\"p\">}</span><br />\n</pre></td></tr></tbody></table></code></pre></div></div></p>\n<h2 id=\"处理应用代码中的错误\">处理应用代码中的错误</h2>\n<div class=\"language-c highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kt\">int</span> <span class=\"nf\">secure_foo</span><span class=\"p\">(</span><span class=\"n\">lua_State</span> <span class=\"o\">*</span><span class=\"n\">L</span><span class=\"p\">)&#123;</span>\n\t<span class=\"n\">lua_pushcfucntion</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"n\">foo</span><span class=\"p\">);</span>\n\t<span class=\"k\">return</span><span class=\"p\">(</span><span class=\"n\">lua_pcall</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"p\">&#125;</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n<h2 id=\"内存分配\">内存分配</h2>\n<p>lua语言核心对内存不进行任何假设，它既不会调用malloc也不会调用realloc来分配内存。相反lua语言核心只会通过一个分配内存函数来分配和释放内存，当用户创建状态时必须提供函数。</p>\n<p>luaL_newstate是一个默认分配函数创建Lua状态的辅助函数。该默认分配函数使用了c语言标准库的标准函数malloc-realloc-freee，对于大多数程序来岁，这几个函数够用了。但是要完全控制lua的内存分配也很容易，使用原始的lua_newstate来创建我们自己的lua状态即可。</p>\n<div class=\"language-c highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n</pre></td><td class=\"rouge-code\"><pre><span class=\"n\">lua_State</span> <span class=\"o\">*</span><span class=\"nf\">lua_newstate</span><span class=\"p\">(</span><span class=\"n\">lua_Alloc</span> <span class=\"n\">f</span><span class=\"p\">,</span> <span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"n\">ud</span><span class=\"p\">);</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n<p>该函数有两个参数：一个是分配函数，另一个是用户数据。用这种方式创建的lua状态会通过调用f完成所有的内存分配和释放，甚至结构lua_State也是由f分配的。</p>\n<div class=\"language-c highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n</pre></td><td class=\"rouge-code\"><pre><span class=\"k\">typedef</span> <span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">lua_Alloc</span><span class=\"p\">)(</span><span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"n\">ud</span><span class=\"p\">,</span> <span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"n\">ptr</span><span class=\"p\">,</span> <span class=\"kt\">size_t</span> <span class=\"n\">osize</span><span class=\"p\">,</span><span class=\"kt\">size_t</span> <span class=\"n\">nsize</span><span class=\"p\">);</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n<p>第一个参数始终为lua_newstate所提供的的用户数据；第二个参数正是被(重)分配或者释放的块的地址；第三个参数是原始块的大小；最后一个参数请求块大小。如果ptr不是NULL，lua会保证其之前分配的大小就是osize(如果是NULL，那么这个块之前的大小肯定是零，所以lua使用osize来存放某些调试信息）。</p>\n<div class=\"language-c highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"nf\">l_alloc</span><span class=\"p\">(</span><span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"n\">ud</span><span class=\"p\">,</span><span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"n\">ptr</span><span class=\"p\">,</span><span class=\"kt\">size_t</span> <span class=\"n\">osize</span><span class=\"p\">,</span><span class=\"kt\">size_t</span> <span class=\"n\">nsize</span><span class=\"p\">)&#123;</span>\n\t<span class=\"p\">(</span><span class=\"kt\">void</span><span class=\"p\">)</span> <span class=\"n\">ud</span><span class=\"p\">;(</span><span class=\"kt\">void</span><span class=\"p\">)</span><span class=\"n\">osize</span><span class=\"p\">;</span>\n\t<span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">nsize</span> <span class=\"o\">==</span><span class=\"mi\">0</span><span class=\"p\">)&#123;</span>\n\t\t<span class=\"n\">free</span><span class=\"p\">(</span><span class=\"n\">ptr</span><span class=\"p\">);</span>\n\t\t<span class=\"k\">return</span> <span class=\"nb\">NULL</span><span class=\"p\">;</span>\n\t<span class=\"p\">&#125;</span>\n\t<span class=\"k\">else</span>\n\t\t<span class=\"k\">return</span> <span class=\"n\">realloc</span><span class=\"p\">(</span><span class=\"n\">ptr</span><span class=\"p\">,</span> <span class=\"n\">nsize</span><span class=\"p\">);</span>\n<span class=\"p\">&#125;</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n<pre><code>            &lt;hr style=&quot;visibility: hidden;&quot;/&gt;\n            \n            &lt;hr style=&quot;visibility: hidden;&quot;/&gt;\n</code></pre>\n","text":"目录 前言 第一个示例 lua堆栈操作 处理应用代码中的错误 内存分配 只有疯狂过，你才知道自己究竟能不能成功。 前言 lua是一种嵌入式语言，这就意味着lua并不是一个独立运行的应用，而是一个库，它可以链接到其它应用程序，将lua的功能融入到这些应用。 由于lua存在解释器（可...","link":"","photos":[],"count_time":{"symbolsCount":"13k","symbolsTime":"12 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%9B%AE%E5%BD%95\"><span class=\"toc-text\">目录</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%89%8D%E8%A8%80\"><span class=\"toc-text\">前言</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E4%B8%80%E4%B8%AA%E7%A4%BA%E4%BE%8B\"><span class=\"toc-text\">第一个示例</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#lua%E5%A0%86%E6%A0%88%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">lua堆栈操作</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%A4%84%E7%90%86%E5%BA%94%E7%94%A8%E4%BB%A3%E7%A0%81%E4%B8%AD%E7%9A%84%E9%94%99%E8%AF%AF\"><span class=\"toc-text\">处理应用代码中的错误</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D\"><span class=\"toc-text\">内存分配</span></a>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"lua","uid":"df60e476b394b1dd4755ec96c53302ff","slug":"zl/2016-01-01-835_lua","date":"2024-04-03T03:47:36.084Z","updated":"2024-04-03T03:47:36.084Z","comments":true,"path":"api/articles/zl/2016-01-01-835_lua.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"介绍 Lua 是一个小巧的脚本语言。openresty采用的是LuaJIT 2 ，而不是标准的lua。 解释下什么是jit LuaJIT 的运行时环境包括一个用手写汇编实现的 Lua 解释器和一个可以直接生成机器代码的 JIT 编译器。 Lua 代码在被执行之前总是会先被 lfn...","link":"","photos":[],"count_time":{"symbolsCount":"2.3k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"lua代码风格","uid":"6645762dc9ef363b033420ebea534803","slug":"zl/2016-01-01-834_lua代码风格","date":"2024-04-03T03:47:36.083Z","updated":"2024-04-03T03:47:36.084Z","comments":true,"path":"api/articles/zl/2016-01-01-834_lua代码风格.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":" &lt;/header&gt; &lt;div class=&quot;entry&quot;&gt; &lt;h1 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; tit...","link":"","photos":[],"count_time":{"symbolsCount":"7.4k","symbolsTime":"7 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}