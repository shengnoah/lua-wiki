{"title":"lua学习1","uid":"ccf00cc91e42a79529a94664e1522709","slug":"zl/2016-01-01-243_lua学习1","date":"2024-04-03T03:47:33.110Z","updated":"2024-04-03T03:47:33.110Z","comments":true,"path":"api/articles/zl/2016-01-01-243_lua学习1.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<h4 id=\"类型与值\"><a href=\"http://renchunxiao.com/#%E7%B1%BB%E5%9E%8B%E4%B8%8E%E5%80%BC\" class=\"headerlink\" title=\"类型与值\"></a>类型与值</h4><p>Lua是一种动态语言，没有定义类型的语法，每个值都携带了自身的类型信息。</p>\n<p>Lua中有8种基础类型：nil、boolean、number、string、userdata、function、thread、table。函数type可以返回值的类型。</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(<span class=\"string\">\"hello\"</span>))           </span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(<span class=\"number\">1</span>))                 </span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(<span class=\"built_in\">print</span>))             </span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(<span class=\"literal\">true</span>))              </span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(<span class=\"literal\">nil</span>))               <span class=\"comment\">--&gt; nil</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(<span class=\"built_in\">type</span>(X))            <span class=\"comment\">--&gt; string</span></span><br></pre></td></tr></table></figure>\n<p>注：最后一行永远返回string。因为type函数总是返回一个字符串。</p>\n<h4 id=\"nil\"><a href=\"http://renchunxiao.com/#nil\" class=\"headerlink\" title=\"nil\"></a>nil</h4><p>nil是一种类型，它只有一个值nil。</p>\n<h4 id=\"boolean\"><a href=\"http://renchunxiao.com/#boolean\" class=\"headerlink\" title=\"boolean\"></a>boolean</h4><p>boolean类型有两个可选值：false和true。在Lua中任何值都可以表示一个条件，只有当false和nil为假，其他情况都为真。</p>\n<h4 id=\"number\"><a href=\"http://renchunxiao.com/#number\" class=\"headerlink\" title=\"number\"></a>number</h4><p>Lua的数字类型是双精度的浮点数。</p>\n<h4 id=\"string\"><a href=\"http://renchunxiao.com/#string\" class=\"headerlink\" title=\"string\"></a>string</h4><p>Lua中的字符串是不可变的值。Lua中字符串和其他Lua对象一样，都是自动内存管理机制所管理的对象。字符串可以使用单引号或者双引号来界定。另外还可以使用[[]]来定义字符串，当中的字符不会被转义。</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">str = <span class=\"string\">[[</span></span><br><span class=\"line\"><span class=\"string\">&lt;html&gt;</span></span><br><span class=\"line\"><span class=\"string\">\t&lt;body&gt;</span></span><br><span class=\"line\"><span class=\"string\">    \thello \"world\"</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/body&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;/html&gt;</span></span><br><span class=\"line\"><span class=\"string\">]]</span></span><br></pre></td></tr></table></figure>\n<p>如果字符串中需要包含[[asd]]这样的字符，上面的定义就不好用了，所以可以在开始的[[之间加入任意数量的等号，就像<code>[===[</code>。这样修改之后只有遇到<code>]===]</code>算字符串结束。</p>\n<p>字符串的连接操作符是<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">#### table</span><br><span class=\"line\"></span><br><span class=\"line\">在Lua中，table是对象。可以看成是一种动态分配的对象。table的创建是通过“构造表达式”完成的，最简单的构造表达式就是{}。</span><br><span class=\"line\"></span><br><span class=\"line\">table永远是匿名的。虽然任何值都可以作为table的索引，也可以用任何数字作为数组索引的起始值。但在Lua的习惯是，数组通常以1作为索引的起始值。</span><br><span class=\"line\"></span><br><span class=\"line\">```lua</span><br><span class=\"line\">a = {}</span><br><span class=\"line\">a.a = \"aaa\"</span><br></pre></td></tr></table></figure></p>\n<p>对于未初始化的元素的索引结果都是nil。Lua将nil作为了界定数组结尾的标志。当一个数组中间含有nil的时候，长度操作符会认为这些 nil元素就的结尾标志。可以使用table.maxn，它将返回table的最大正索引数。</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = {}</span><br><span class=\"line\">a[<span class=\"number\">100</span>] = <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(#a)                <span class=\"comment\">--&gt; 0</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">table</span>.<span class=\"built_in\">maxn</span>(a))     <span class=\"comment\">--&gt; 100</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"算术操作符\"><a href=\"http://renchunxiao.com/#%E7%AE%97%E6%9C%AF%E6%93%8D%E4%BD%9C%E7%AC%A6\" class=\"headerlink\" title=\"算术操作符\"></a>算术操作符</h4><p>Lua支持的算术操作符有：二元的‘+’，‘-’，‘*’，‘/’，‘^’，‘%’,一元的’-‘。</p>\n<h4 id=\"关系操作符\"><a href=\"http://renchunxiao.com/#%E5%85%B3%E7%B3%BB%E6%93%8D%E4%BD%9C%E7%AC%A6\" class=\"headerlink\" title=\"关系操作符\"></a>关系操作符</h4><p>Lua支持的关系操作符：&gt;、&lt;、&gt;=、&lt;=、==、~=。</p>\n<p>操作符==用于相等比较，~=用于不等比较。如果比较的两个值的类型不相同则肯定不相等。nil只有跟nil比较相等。对于table、userdata、function比较的是两个值的引用。</p>\n<h4 id=\"逻辑运算符\"><a href=\"http://renchunxiao.com/#%E9%80%BB%E8%BE%91%E8%BF%90%E7%AE%97%E7%AC%A6\" class=\"headerlink\" title=\"逻辑运算符\"></a>逻辑运算符</h4><p>逻辑运算符有and、not、or。所有的逻辑运算符将false和nil视为假，其他的都视为真。<br>and和or都是短路求值，只有需要的时候才会求第二个操作数的值。</p>\n<p>操作符and，如果第一个操作数为假那么返回第一个值，否则返回第二个值。<br>操作符or，如果第一个操作符为真那么返回第一个值，否者返回第二个值。<br>操作符not，永远只返回true或false。</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"number\">4</span> <span class=\"keyword\">and</span> <span class=\"number\">5</span>)           <span class=\"comment\">--&gt; 5</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"literal\">nil</span> <span class=\"keyword\">and</span> <span class=\"number\">13</span>)        <span class=\"comment\">--&gt; nil</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"literal\">false</span> <span class=\"keyword\">and</span> <span class=\"number\">13</span>)      <span class=\"comment\">--&gt; false</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"number\">4</span> <span class=\"keyword\">or</span> <span class=\"number\">5</span>)            <span class=\"comment\">--&gt; 4</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"literal\">false</span> <span class=\"keyword\">or</span> <span class=\"number\">5</span>)        <span class=\"comment\">--&gt; 5</span></span><br></pre></td></tr></table></figure>\n<p>有一种常见的写法：x = x or v，这种写法等价于<figure class=\"highlight plain\"><figcaption><span>not x then x </span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">#### 字符串连接</span><br><span class=\"line\"></span><br><span class=\"line\">Lua中字符串连接使用```..```,Lua中的字符串是不可变的值，连接字符串操作只会创建新的字符串不会对原来字符串进行修改。</span><br><span class=\"line\"></span><br><span class=\"line\">```lua</span><br><span class=\"line\">print('a' .. 'b')  --&gt; ab</span><br><span class=\"line\">print(0 .. 1)      --&gt; 01</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"table构造式\"><a href=\"http://renchunxiao.com/#table%E6%9E%84%E9%80%A0%E5%BC%8F\" class=\"headerlink\" title=\"table构造式\"></a>table构造式</h4><p>构造式是用于创建和初始化table的表达式，最简单的构造式是{}。构造式还可以用于初始化数组。</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">strs = {<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>}  #会将strs[<span class=\"number\">1</span>]初始化为a，以此类推</span><br><span class=\"line\"></span><br><span class=\"line\">a = {x=<span class=\"number\">10</span>, y=<span class=\"number\">20</span>}</span><br></pre></td></tr></table></figure>","text":"类型与值Lua是一种动态语言，没有定义类型的语法，每个值都携带了自身的类型信息。 Lua中有8种基础类型：nil、boolean、number、string、userdata、function、thread、table。函数type可以返回值的类型。 123456print(ty...","link":"","photos":[],"count_time":{"symbolsCount":"2k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%B1%BB%E5%9E%8B%E4%B8%8E%E5%80%BC\"><span class=\"toc-text\">类型与值</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#nil\"><span class=\"toc-text\">nil</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#boolean\"><span class=\"toc-text\">boolean</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#number\"><span class=\"toc-text\">number</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#string\"><span class=\"toc-text\">string</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%AE%97%E6%9C%AF%E6%93%8D%E4%BD%9C%E7%AC%A6\"><span class=\"toc-text\">算术操作符</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%85%B3%E7%B3%BB%E6%93%8D%E4%BD%9C%E7%AC%A6\"><span class=\"toc-text\">关系操作符</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%80%BB%E8%BE%91%E8%BF%90%E7%AE%97%E7%AC%A6\"><span class=\"toc-text\">逻辑运算符</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#table%E6%9E%84%E9%80%A0%E5%BC%8F\"><span class=\"toc-text\">table构造式</span></a></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Mac下编写lua的C模块","uid":"21fd19bd506bc6ef05480df46c54d3fb","slug":"zl/2016-01-01-242_Mac下编写lua的C模块","date":"2024-04-03T03:47:33.110Z","updated":"2024-04-03T03:47:33.110Z","comments":true,"path":"api/articles/zl/2016-01-01-242_Mac下编写lua的C模块.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"&lt;p&gt;最近在研究lua下protobuf的使用，必然就会接触到了云风大侠的pbc，github上下了源码进行编译，发现想要把binding下面的测试代码运行起来，还是有一些坑点的。&lt;/p&gt; 在 /binding/lua53 目录下有 Makefile pb...","link":"","photos":[],"count_time":{"symbolsCount":"1.7k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Lua 学习 chapter3","uid":"fa3c6bbfb77d79f09c310bd5a3012575","slug":"zl/2016-01-01-244_Lua 学习 chapter3 ","date":"2024-04-03T03:47:33.110Z","updated":"2024-04-03T03:47:33.110Z","comments":true,"path":"api/articles/zl/2016-01-01-244_Lua 学习 chapter3 .json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":" &lt;h3 id=&quot;目录&quot;&gt;目录&lt;/h3&gt; 算术计算 关系运算 数学库 表示范围 运算符的优先级 练习 算术计算 在lua中，除法运算操作的永远是浮点数而且产生的结果也是浮点数。 在新的版本中针对于整数除法引入了一个floor除法的新运算...","link":"","photos":[],"count_time":{"symbolsCount":"1.7k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}