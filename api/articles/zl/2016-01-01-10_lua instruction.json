{"title":"lua instruction","uid":"4bae0c278fa978526a7eef43815b8a43","slug":"zl/2016-01-01-10_lua instruction","date":"2024-04-03T03:47:33.001Z","updated":"2024-04-03T03:47:33.001Z","comments":true,"path":"api/articles/zl/2016-01-01-10_lua instruction.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<pre><code>&lt;h2 id=&quot;introduction&quot;&gt;1. Introduction&lt;/h2&gt;\n</code></pre>\n<p>本文讲解lua 5.3.1虚拟机命令。lua的命令具有固定的大小，缺省使用一个32bit无符号整型数据类型。当前lua 5.3.1使用4个命令类型和47个操作码(编号从0到46)。命令类型枚举为：iABC, iABx, iAsBx, iAx。每个操作码占用最初的6bits。命令可以有以下的域：</p>\n<pre><code>'A' : 8 bits\n'B' : 9 bits\n'C' : 9 bits\n'Ax': 26 bits ('A', 'B', and 'C' together)\n'Bx': 18 bits ('B' and 'C' together)\n'sBx': signed Bx\n</code></pre>\n<p>字段 A、B 和 C 通常引用寄存器编码(我将使用术语“寄存器”，因为它与处理器的寄存器相似)。虽然算术操作中字段A是目标操作数，但这个规则并非也适用于其他命令。寄存器通常是指向当前栈帧中的索引，0号寄存器是栈底位置。与 Lua C API 不同的是负索引(从栈顶开始计数)是不支持的。某些命令需要指定栈顶，则索引被编码为特定的操作数(通常是0)。局部变量等价于当前栈中的某个寄存器，但是也有允许读/写全局变量和upvalue的操作码。对某些指定字段B和C的值可能为寄存器或常量池中已编码的编号。</p>\n<h2 id=\"section\">2. 命令集摘要</h2>\n<table>\n  <thead>\n    <tr>\n      <th>opcode</th>\n      <th>name</th>\n      <th>description</th>\n      <th> </th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>0</td>\n      <td>OP_MOVE</td>\n      <td>在寄存器间拷贝值</td>\n      <td> </td>\n    </tr>\n    <tr>\n      <td>1</td>\n      <td>OP_LOADK</td>\n      <td>把一个常量载入寄存器</td>\n      <td> </td>\n    </tr>\n    <tr>\n      <td>2</td>\n      <td>OP_LOADKX</td>\n      <td> </td>\n      <td> </td>\n    </tr>\n    <tr>\n      <td>3</td>\n      <td>OP_LOADBOOL</td>\n      <td>把一个布尔值载入寄存器</td>\n      <td> </td>\n    </tr>\n    <tr>\n      <td>4</td>\n      <td>OP_LOADNIL</td>\n      <td>把nil载入一系列寄存器</td>\n      <td> </td>\n    </tr>\n    <tr>\n      <td>5</td>\n      <td>OP_GETUPVAL</td>\n      <td>把一个upvalue读入寄存器</td>\n      <td> </td>\n    </tr>\n    <tr>\n      <td>6</td>\n      <td>OP_GETTABUP</td>\n      <td> </td>\n      <td> </td>\n    </tr>\n    <tr>\n      <td>7</td>\n      <td>OP_GETTABLE</td>\n      <td>把一个表元素读入寄存器</td>\n      <td> </td>\n    </tr>\n    <tr>\n      <td>8</td>\n      <td>OP_SETTABUP</td>\n      <td> </td>\n      <td> </td>\n    </tr>\n    <tr>\n      <td>9</td>\n      <td>OP_SETUPVAL</td>\n      <td> </td>\n      <td> </td>\n    </tr>\n    <tr>\n      <td>10</td>\n      <td>OP_SETTABLE</td>\n      <td> </td>\n      <td> </td>\n    </tr>\n    <tr>\n      <td>11</td>\n      <td>OP_NEWTABLE</td>\n      <td>R(A) = {} (size = B, C)</td>\n      <td> </td>\n    </tr>\n    <tr>\n      <td>12</td>\n      <td>OP_SELF</td>\n      <td> </td>\n      <td> </td>\n    </tr>\n    <tr>\n      <td>13</td>\n      <td>OP_ADD</td>\n      <td>+</td>\n      <td> </td>\n    </tr>\n    <tr>\n      <td>14</td>\n      <td>OP_SUB</td>\n      <td>-</td>\n      <td> </td>\n    </tr>\n    <tr>\n      <td>15</td>\n      <td>OP_MUL</td>\n      <td>*</td>\n      <td> </td>\n    </tr>\n    <tr>\n      <td>16</td>\n      <td>OP_MOD</td>\n      <td>%</td>\n      <td> </td>\n    </tr>\n    <tr>\n      <td>17</td>\n      <td>OP_POW</td>\n      <td>^</td>\n      <td> </td>\n    </tr>\n    <tr>\n      <td>18</td>\n      <td>OP_DIV</td>\n      <td>/</td>\n      <td> </td>\n    </tr>\n    <tr>\n      <td>19</td>\n      <td>OP_IDIV</td>\n      <td>//</td>\n      <td> </td>\n    </tr>\n    <tr>\n      <td>20</td>\n      <td>OP_BAND</td>\n      <td>&amp;</td>\n      <td> </td>\n    </tr>\n    <tr>\n      <td>21</td>\n      <td>OP_BOR</td>\n      <td> </td>\n      <td> </td>\n    </tr>\n    <tr>\n      <td>22</td>\n      <td>OP_BXOR</td>\n      <td>~</td>\n      <td> </td>\n    </tr>\n    <tr>\n      <td>23</td>\n      <td>OP_SHL</td>\n      <td>«</td>\n      <td> </td>\n    </tr>\n    <tr>\n      <td>24</td>\n      <td>OP_SHR</td>\n      <td>»</td>\n      <td> </td>\n    </tr>\n    <tr>\n      <td>25</td>\n      <td>OP_UNM</td>\n      <td>-</td>\n      <td> </td>\n    </tr>\n    <tr>\n      <td>26</td>\n      <td>OP_BNOT</td>\n      <td>~</td>\n      <td> </td>\n    </tr>\n    <tr>\n      <td>27</td>\n      <td>OP_NOT</td>\n      <td>not</td>\n      <td> </td>\n    </tr>\n    <tr>\n      <td>28</td>\n      <td>OP_LEN</td>\n      <td>length of R(B)</td>\n      <td> </td>\n    </tr>\n    <tr>\n      <td>29</td>\n      <td>OP_CONCAT</td>\n      <td>..</td>\n      <td> </td>\n    </tr>\n    <tr>\n      <td>30</td>\n      <td>OP_JMP</td>\n      <td>无条件跳转</td>\n      <td> </td>\n    </tr>\n    <tr>\n      <td>31</td>\n      <td>OP_EQ</td>\n      <td>相等测试</td>\n      <td> </td>\n    </tr>\n    <tr>\n      <td>32</td>\n      <td>OP_LT</td>\n      <td>小于测试</td>\n      <td> </td>\n    </tr>\n    <tr>\n      <td>33</td>\n      <td>OP_LE</td>\n      <td>小于或等于测试</td>\n      <td> </td>\n    </tr>\n    <tr>\n      <td>34</td>\n      <td>OP_TEST</td>\n      <td>布尔测试带条件跳转</td>\n      <td> </td>\n    </tr>\n    <tr>\n      <td>35</td>\n      <td>OP_TESTSET</td>\n      <td>布尔测试带条件跳转和赋值</td>\n      <td> </td>\n    </tr>\n    <tr>\n      <td>36</td>\n      <td>OP_CALL</td>\n      <td>调用闭包</td>\n      <td> </td>\n    </tr>\n    <tr>\n      <td>37</td>\n      <td>OP_TAILCALL</td>\n      <td>执行尾调用</td>\n      <td> </td>\n    </tr>\n    <tr>\n      <td>38</td>\n      <td>OP_RETURN</td>\n      <td>函数返回</td>\n      <td> </td>\n    </tr>\n    <tr>\n      <td>39</td>\n      <td>OP_FORLOOP</td>\n      <td>迭代 for 循环</td>\n      <td> </td>\n    </tr>\n    <tr>\n      <td>40</td>\n      <td>OP_FORPREP</td>\n      <td>初始化数字for循环</td>\n      <td> </td>\n    </tr>\n    <tr>\n      <td>41</td>\n      <td>OP_TFORCALL</td>\n      <td> </td>\n      <td> </td>\n    </tr>\n    <tr>\n      <td>42</td>\n      <td>OP_TFORLOOP</td>\n      <td>迭代泛型for循环</td>\n      <td> </td>\n    </tr>\n    <tr>\n      <td>43</td>\n      <td>OP_SETLIST</td>\n      <td>设置表的一系列元素</td>\n      <td> </td>\n    </tr>\n    <tr>\n      <td>44</td>\n      <td>OP_CLOSURE</td>\n      <td>创建一个函数原型的闭包</td>\n      <td> </td>\n    </tr>\n    <tr>\n      <td>45</td>\n      <td>OP_VARARG</td>\n      <td>把可变参数量赋给寄存器</td>\n      <td> </td>\n    </tr>\n    <tr>\n      <td>46</td>\n      <td>OP_EXTRAARG</td>\n      <td> </td>\n      <td> </td>\n    </tr>\n  </tbody>\n</table>\n<h2 id=\"section-1\">3. 详细说明：</h2>\n<p>OP_MOVE: A B \tR(A) := R(B) \n将寄存器B中的值拷贝到寄存器A中</p>\n<p>lua</p>\n<pre><code>local b\nlocal a = b\n</code></pre>\n<p>vm</p>\n<pre><code>1\t[1]\tLOADNIL  \t0 0\n2\t[2]\tMOVE     \t1 0\n3\t[2]\tRETURN   \t0 1\n</code></pre>\n<p>在编译过程中，Lua会把每个local变量都分配一个指定的寄存器。在运行期间，Lua使用local变量所对应的寄存器ID来操作local变量，而local变量名仅仅提供DEBUG信息。\n如上：b被分配到register 0,a被分配到register 1。MOVE表示将b(register 0)的值赋给a(register 1)。</p>\n<p>OP_LOADK: A Bx \tR(A) := Kst(Bx)\n将Bx表示的常量表中的常量值装载到寄存器A中。有些命令本身可以直接从常量表中索引操作数，比如数学操作命令，所以可以不依赖LOADK命令。</p>\n<p>lua</p>\n<pre><code>local a = 0x1111000\nlocal b = \"hello world!\"\n</code></pre>\n<p>vm</p>\n<pre><code>1\t[1]\tLOADK    \t0 -1\t; 17895424\n2\t[2]\tLOADK    \t1 -2\t; \"hello world!\"\n3\t[2]\tRETURN   \t0 1\n</code></pre>\n<p>OP_LOADKX: A \tR(A) := Kst(extra arg) LOADKX\n是lua5.2新加入的命令。当需要生成LOADK命令时，如果需要索引的常量id超出了Bx所能表示的有效范围，那么就生成一个LOADKX命令，取代LOADK命令，并且接下来立即生成一个EXTRAARG命令，并且用Ax来存放这个id。</p>\n<p>OP_LOADBOOL: A B C \tR(A) = (Bool)B; if (C) pc++</p>\n<p>lua</p>\n<pre><code>local a = true\n</code></pre>\n<p>vm</p>\n<pre><code>1\t[1]\tLOADBOOL \t0 1 0\n2\t[1]\tRETURN   \t0 1\n</code></pre>\n<p>LOADBOOL将B所表示的boolean值装载到寄存器A中。B使用0和1分别代表false和true。C也表示一个boolean值，如果C为1，就跳过下一个命令。\nC的作用比较特殊，下面通过lua中对逻辑和关系表达式处理来看一下C的具体作用：</p>\n<p>lua</p>\n<pre><code>local a = 1 &lt; 2\n</code></pre>\n<p>vm</p>\n<pre><code>1\t[1]\tLT       \t1 -1 -2\t; 1 2\n2\t[1]\tJMP      \t0 1\t; to 4\n3\t[1]\tLOADBOOL \t0 0 1\n4\t[1]\tLOADBOOL \t0 1 0\n5\t[1]\tRETURN   \t0 1\n</code></pre>\n<p>lua生成了LT和JMP命令，另外再加上两个LOADBOOL对于a赋予不同的boolean值。LT命令本身并不产生一个boolean结果值，而是配合紧跟后面的JMP实现的true和false的不同跳转。如果LT评估为true，就继续执行也就是执行到JMP，然后跳转到4，对a赋予true；否则就跳过下一条命令到达第三行，对a赋予false,并且跳过下一个命令。所以上面的代码实际意思可以转化为：</p>\n<p>lua</p>\n<pre><code>local a;\nif 1 &lt; 2 then\n\ta = true;\nelse\n\ta = false;\nend\n</code></pre>\n<p>逻辑或者关系表达式之所以被设计成这个样子，主要是为if语句和循环语句所做的优化。不用将整个表达式估值成一个boolean值后再决定跳转路径，而是评估过程中就可以直接跳转，节省了很多命令。C的作用就是配合这种使用逻辑或关系表达式进行赋值的操作，他节省了后面必须跟的一个JMP命令。</p>\n<p>OP_LOADNIL: A B \tR(A), R(A+1), … R(A+B) := nil</p>\n<p>lua</p>\n<pre><code>local a, b, c, d\n</code></pre>\n<p>vm</p>\n<pre><code>1\t[1]\tLOADNIL  \t0 3\n2\t[1]\tRETURN   \t0 1\n</code></pre>\n<p>LOADNIL将使用A到B所表示范围的寄存器赋值成nil。用范围表示寄存器主要为了对上述情况进行优化。对于连续的local变量声明，使用一条LOADNIL命令就可以完成，而不需要分别进行赋值。\n对于以下情况：</p>\n<p>lua</p>\n<pre><code>local a\nlocal b = 1\nlocal c\nlocal d = 1\n</code></pre>\n<p>vm</p>\n<pre><code>1\t[1]\tLOADNIL  \t0 0\n2\t[2]\tLOADK    \t1 -1\t; 1\n3\t[3]\tLOADNIL  \t2 0\n4\t[4]\tLOADK    \t3 -1\t; 1\n5\t[4]\tRETURN   \t0 1\n</code></pre>\n<p>在Lua5.3.1中，a和c不能被合并成一个LOADNIL命令。所以以上写法理论上会生成更多的命令，应该予以避免，而改写成</p>\n<p>lua</p>\n<pre><code>local a, c\nlocal b = 1\nlocal d = 1\n</code></pre>\n<p>vm</p>\n<pre><code>1\t[1]\tLOADNIL  \t0 1\n2\t[3]\tLOADK    \t2 -1\t; 1\n3\t[4]\tLOADK    \t3 -1\t; 1\n4\t[4]\tRETURN   \t0 1\n</code></pre>\n<p>编译期间访问变量a时，会按照以下的顺序决定变量a信息：</p>\n<p>local变量本身就存在于当前的register中，所有的命令都可以直接使用它的id来访问。而对于upvalue，lua则有专门的命令负责获取和设置。</p>\n<p>全局变量在lua5.1中也是使用专门的命令来操作，在lua5.2对这一点做了改变。lua5.2及以后版本没有对全局变量操作的命令，而是把全局表放在最外层函数的名字为“_ENV”的upvalue中。对于全局变量a，编译后为_ENV.a来进行访问。</p>\n<ul>\n  <li>\n    <p>OP_GETUPVAL: A B \t\tR(A) := UpValue[B] \tGETUPVAL将B为索引的upvalue的值装载到A寄存器中。</p>\n  </li>\n  <li>\n    <p>OP_SETUPVAL: A B \t\tUpValue[B] := R(A) \tSETUPVAL将A寄存器的值保存到B为索引的upvalue中。</p>\n  </li>\n  <li>\n    <p>OP_GETTABUP: A B C \tR(A) := UpValue[B][RK(C)] \tGETTABUP将B为索引的upvalue当作一个table，并将C做为索引的寄存器或者常量当作key获取的值放入寄存器A。</p>\n  </li>\n  <li>\n    <p>OP_SETTABUP: A B C \tUpValue[A][RK(B)] := RK(C) \tSETTABUP将A为索引的upvalue当作一个table，将C寄存器或者常量的值以B寄存器或常量为key，存入table</p>\n  </li>\n</ul>\n<p>lua</p>\n<pre><code>local u = 0\nfunction f()\n\tlocal l\n\tu = 1\n\tl = u\n\tg = 1\n\tl = g\nend\n</code></pre>\n<p>vm</p>\n<pre><code>main &lt;main.lua:0,0&gt; (4 instructions at 0x95c590)\n0+ params, 2 slots, 1 upvalue, 1 local, 2 constants, 1 function\n\t1\t[1]\tLOADK    \t0 -1\t; 0\n\t2\t[8]\tCLOSURE  \t1 0\t; 0x95c970\n\t3\t[2]\tSETTABUP \t0 -2 1\t; _ENV \"f\"\n\t4\t[8]\tRETURN   \t0 1\n\nfunction &lt;main.lua:2,8&gt; (7 instructions at 0x95c970)\n0 params, 2 slots, 2 upvalues, 1 local, 2 constants, 0 functions\n\t1\t[3]\tLOADNIL  \t0 0\n\t2\t[4]\tLOADK    \t1 -1\t; 1\n\t3\t[4]\tSETUPVAL \t1 0\t; u\n\t4\t[5]\tGETUPVAL \t0 0\t; u\n\t5\t[6]\tSETTABUP \t1 -2 -1\t; _ENV \"g\" 1\n\t6\t[7]\tGETTABUP \t0 1 -2\t; _ENV \"g\"\n\t7\t[8]\tRETURN   \t0 1\n</code></pre>\n<p>上述代码片断包括一个主函数和一个内嵌函数，根据变量规则，在内嵌函数中，l是local变量，u是upvalue，g既不是local，也不是upvalue，当作全局变量处理。\n在内嵌函数，首先LOADNIL为local变量赋值，然后用LOADK和SETUPVAL组合，完成 u = 1。1是一个常量，存在于常量表中，而lua没有常量与upvalue的直接操作命令，所以需要先把常量1装在到临时寄存器1种，然后将寄存器1的值赋给upvalue 0，也就是u。GETUPVAL将upvalue u赋给local变量l。SETTABUP和GETTABUP就是前面提到的对全局变量的处理了。g=1被转化为_ENV.g=1。_ENV是系统预先设置在主函数中的upvalue，所以对于全局变量g的访问被转化成对upvalue[_ENV][g]的访问。SETTABUP将upvalue 1(_ENV代表的upvalue)作为一个table，将常量表2（常量”g”）作为key的值设置为常量表1（常量1）；GETTABUP则是将upvalue 1作为table，将常量表2为key的值赋给寄存器0（local l）。</p>\n<p>OP_NEWTABLE: A B C R(A) := {} (size = B, C)</p>\n<p>lua</p>\n<pre><code>local t = &#123;&#125;\n</code></pre>\n<p>vm</p>\n<pre><code>1\t[1]\tNEWTABLE \t0 0 0\n2\t[1]\tRETURN   \t0 1\n</code></pre>\n<p>NEWTABLE在寄存器A处创建一个table对象。B和C分别用来存储这个table数组部分和hash部分的初始大小。初始大小是在编译期计算出来并生成到这个命令中的，目的是使接下来对table的初始化填充不会造成rehash而影响效率。B和C使用“floating point byte”的方法来表示成(eeeeexxx)的二进制形式，其实际值为(1xxx) * 2^(eeeee-1)。\n上面代码生成一个空的table，放入local变量t，B和C参数都为0。</p>\n<p>OP_SETLIST: A B C R(A)[(C-1)*FPF+i] := R(A+i), 1 &lt;= i &lt;= B\nSETLIST用来配合NEWTABLE，初始化表的数组部分使用的。A为保存待设置表的寄存器，SETLIST要将A下面紧接着的寄存器列表(1–B)中的值逐个设置给表的数组部分。</p>\n<p>lua</p>\n<pre><code>local t = &#123;1, 2, 3, 4, 5&#125;\n</code></pre>\n<p>vm</p>\n<pre><code>1\t[1]\tNEWTABLE \t0 5 0\n2\t[1]\tLOADK    \t1 -1\t; 1\n3\t[1]\tLOADK    \t2 -2\t; 2\n4\t[1]\tLOADK    \t3 -3\t; 3\n5\t[1]\tLOADK    \t4 -4\t; 4\n6\t[1]\tLOADK    \t5 -5\t; 5\n7\t[1]\tSETLIST  \t0 5 1\t; 1\n8\t[1]\tRETURN   \t0 1\n</code></pre>\n<p>第1行先用NEWTABLE构建一个具有5个数组元素的表，放到寄存器0中；然后使用5个LOADK向下面3个寄存器装入常量；最后使用SETLIST设置表的1~5为寄存器1~寄存器5。</p>\n<p>如果创建一个包含很多数组项元素的表，将数据放到寄存器时，就是会超出寄存器的范围。lua中的解决办法就是按照固定大小进行分批处理。每批的数量由在lopcodes.h中的LFIELDS_PER_FLUSH的宏控制，默认为50。因此，大量的数组元素就会按照50个一批，先将值设置到下面的寄存器，然后设置给对应的项。C代表的就是这一个调用SETLIST设置的是第几批。</p>\n<p>lua</p>\n<pre><code>local t = &#123;\n\t1, 2, 3, 4, 5, 6, 7, 8, 9, 0,\n\t1, 2, 3, 4, 5, 6, 7, 8, 9, 0,\n\t1, 2, 3, 4, 5, 6, 7, 8, 9, 0,\n\t1, 2, 3, 4, 5, 6, 7, 8, 9, 0,\n\t1, 2, 3, 4, 5, 6, 7, 8, 9, 0,\n\t1, 2, 3, 4, 5,\n&#125;\n</code></pre>\n<p>vm</p>\n<pre><code>main &lt;main.lua:0,0&gt; (59 instructions at 0x112b590)\n0+ params, 51 slots, 1 upvalue, 1 local, 10 constants, 0 functions\n\t1\t[1]\tNEWTABLE \t0 30 0\n\t2\t[2]\tLOADK    \t1 -1\t; 1\n\t3\t[2]\tLOADK    \t2 -2\t; 2\n\t4\t[2]\tLOADK    \t3 -3\t; 3\n\t5\t[2]\tLOADK    \t4 -4\t; 4\n\t... ...\n\t49\t[6]\tLOADK    \t48 -8\t; 8\n\t50\t[6]\tLOADK    \t49 -9\t; 9\n\t51\t[6]\tLOADK    \t50 -10\t; 0\n\t52\t[6]\tSETLIST  \t0 50 1\t; 1\n\t53\t[7]\tLOADK    \t1 -1\t; 1\n\t54\t[7]\tLOADK    \t2 -2\t; 2\n\t55\t[7]\tLOADK    \t3 -3\t; 3\n\t56\t[7]\tLOADK    \t4 -4\t; 4\n\t57\t[8]\tLOADK    \t5 -5\t; 5\n\t58\t[8]\tSETLIST  \t0 5 2\t; 2\n\t59\t[8]\tRETURN   \t0 1\n</code></pre>\n<p>如果数据量超出了C的表示范围，那么C会被设置为0，然后在SETLIST命令后面生成一个EXTRAARG命令，并用Ax来存储批次。与LOADKX的处理方法类似，来为处理超大数据服务的。</p>\n<p>OP_GETTABL A B C R(A) := R(B)[RK(C)]</p>\n<p>OP_SETTABL A B C R(A)[RK(B)] := RK(C)</p>\n<p>GETTABLE使用C表示的key，将寄存器B中的表项值获取到寄存器A中。SETTABLE设置寄存器A的表的B项为C代表的值。</p>\n<p>lua</p>\n<pre><code>local t = &#123;&#125;\nt.k = 1\nlocal v = t.k\n</code></pre>\n<p>vm</p>\n<pre><code>main &lt;main.lua:0,0&gt; (4 instructions at 0x24e3590)\n0+ params, 2 slots, 1 upvalue, 2 locals, 2 constants, 0 functions\n\t1\t[1]\tNEWTABLE \t0 0 0\n\t2\t[2]\tSETTABLE \t0 -1 -2\t; \"k\" 1\n\t3\t[3]\tGETTABLE \t1 0 -1\t; \"k\"\n\t4\t[3]\tRETURN   \t0 1\n</code></pre>\n<p>OP_ADD A B C R(A) := RK(B) + RK(C)</p>\n<p>OP_SUB A B C R(A) := RK(B) - RK(C)</p>\n<p>OP_MUL A B C R(A) := RK(B) * RK(C)</p>\n<p>OP_MOD A B C R(A) := RK(B) % RK(C)</p>\n<p>OP_POW A B C R(A) := RK(B) ^ RK(C)</p>\n<p>OP_DIV A B C R(A) := RK(B) / RK(C)</p>\n<p>OP_IDIV A B C R(A) := RK(B) // RK(C)</p>\n<p>lua</p>\n<pre><code>local v = 8\nv = v + 2\nv = v - 2\nv = v * 2\nv = v % 2\nv = v ^ 2\nv = v / 2\nv = v // 2\n</code></pre>\n<p>vm</p>\n<pre><code>main &lt;main.lua:0,0&gt; (9 instructions at 0x773590)\n0+ params, 2 slots, 1 upvalue, 1 local, 2 constants, 0 functions\n\t1\t[1]\tLOADK    \t0 -1\t; 8\n\t2\t[2]\tADD      \t0 0 -2\t; - 2\n\t3\t[3]\tSUB      \t0 0 -2\t; - 2\n\t4\t[4]\tMUL      \t0 0 -2\t; - 2\n\t5\t[5]\tMOD      \t0 0 -2\n\t6\t[6]\tPOW      \t0 0 -2\t; - 2\n\t7\t[7]\tDIV      \t0 0 -2\t; - 2\n\t8\t[8]\tIDIV     \t0 0 -2\t; - 2\n\t9\t[8]\tRETURN   \t0 1\n</code></pre>\n<p>OP_BAND A B C R(A) := RK(B) &amp; RK(C)</p>\n<table>\n  <tbody>\n    <tr>\n      <td>OP_BOR A B C R(A) := RK(B)</td>\n      <td>RK(C)</td>\n    </tr>\n  </tbody>\n</table>\n<p>OP_BXOR A B C R(A) := RK(B) ~ RK(C)</p>\n<p>OP_BNOT A B R(A) := ~R(B)</p>\n<p>lua</p>\n<pre><code>local v = 7\nv = v &amp; 8\nv = v | 8\nv = v ~ 8\nv = ~ v\n</code></pre>\n<p>vm</p>\n<pre><code>main &lt;main.lua:0,0&gt; (6 instructions at 0x1d54590)\n0+ params, 2 slots, 1 upvalue, 1 local, 2 constants, 0 functions\n\t1\t[1]\tLOADK    \t0 -1\t; 7\n\t2\t[2]\tBAND     \t0 0 -2\t; - 8\n\t3\t[3]\tBOR      \t0 0 -2\t; - 8\n\t4\t[4]\tBXOR     \t0 0 -2\t; - 8\n\t5\t[5]\tBNOT     \t0 0\n\t6\t[5]\tRETURN   \t0 1\n</code></pre>\n<p>OP_SHL A B C R(A) := RK(B) « RK(C)</p>\n<p>OP_SHR A B C R(A) := RK(B) » RK(C)</p>\n<p>lua</p>\n<pre><code>local v = 7\nv = v &lt;&lt; 4\nv = v &gt;&gt; 4\n</code></pre>\n<p>vm</p>\n<pre><code>main &lt;main.lua:0,0&gt; (4 instructions at 0x18e4590)\n0+ params, 2 slots, 1 upvalue, 1 local, 2 constants, 0 functions\n\t1\t[1]\tLOADK    \t0 -1\t; 7\n\t2\t[2]\tSHL      \t0 0 -2\t; - 4\n\t3\t[3]\tSHR      \t0 0 -2\t; - 4\n\t4\t[3]\tRETURN   \t0 1\n</code></pre>\n<p>OP_UNM A B R(A) := -R(B)</p>\n<p>OP_NOT A B R(A) := not R(B)</p>\n<p>lua</p>\n<pre><code>local v = 7\nv = -v\nv = not v\n</code></pre>\n<p>vm</p>\n<pre><code>1\t[1]\tLOADK    \t0 -1\t; 7\n2\t[2]\tUNM      \t0 0\n3\t[3]\tNOT      \t0 0\n4\t[3]\tRETURN   \t0 1\n</code></pre>\n<p>OP_LEN A B R(A) := length of R(B)</p>\n<p>LEN直接对应’#’操作符，返回B对象的长度，并保存到A中。</p>\n<p>lua</p>\n<pre><code>local v = #\"hello world\"\n</code></pre>\n<p>vm</p>\n<pre><code>1\t[1]\tLOADK    \t0 -1\t; \"hello world\"\n2\t[1]\tLEN      \t0 0\n3\t[1]\tRETURN   \t0 1\n</code></pre>\n<p>OP_CONCAT A B C R(A) := R(B).. … ..R(C)</p>\n<p>字符串连接</p>\n<p>lua</p>\n<pre><code>local greed = \"welcome to \"\nlocal name = \"applepurple\"\nlocal v = greed .. name\n</code></pre>\n<p>vm</p>\n<pre><code>1\t[1]\tLOADK    \t0 -1\t; \"welcome to \"\n2\t[2]\tLOADK    \t1 -2\t; \"applepurple\"\n3\t[3]\tMOVE     \t2 0\n4\t[3]\tMOVE     \t3 1\n5\t[3]\tCONCAT   \t2 2 3\n6\t[3]\tRETURN   \t0 1\n</code></pre>\n<p>OP_CALL A B C R(A), … , R(A+C-2) := R(A)(R(A+1), … ,R(A+B-1))</p>\n<p>OP_CALL执行一个函数调用。寄存器A中存放函数对象，所有的参数按顺序放置在A后面的寄存器中。B-1表示参数的个数。如果参数列表最后一个表达式是变长的，则B设置为0，表示使用A+1到当前栈顶作为参数。函数返回值会按照顺序放在从寄存器A开始的C-1个寄存器中。如果C为0，表示返回值个数由函数决定。</p>\n<p>lua</p>\n<pre><code>foo(1, 2)\n</code></pre>\n<p>vm</p>\n<pre><code>1\t[1]\tGETTABUP \t0 0 -1\t; _ENV \"foo\"\n2\t[1]\tLOADK    \t1 -2\t; 1\n3\t[1]\tLOADK    \t2 -3\t; 2\n4\t[1]\tCALL     \t0 3 1\n5\t[1]\tRETURN   \t0 1\n</code></pre>\n<p>lua</p>\n<pre><code>local t = &#123;foo(...)&#125;\n</code></pre>\n<p>vm</p>\n<pre><code>1\t[1]\tNEWTABLE \t0 0 0\n2\t[1]\tGETTABUP \t1 0 -1\t; _ENV \"foo\"\n3\t[1]\tVARARG   \t2 0\n4\t[1]\tCALL     \t1 0 0\n5\t[1]\tSETLIST  \t0 0 1\t; 1\n6\t[1]\tRETURN   \t0 1\n</code></pre>\n<p>第四行CALL 1 0 0中，B为0表示函数参数是变长的，C为0表示构造会接受函数所有的函数值。</p>\n<p>OP_TAILCALL A B C RETURN R(A)(R(A+1), … ,R(A+B-1))</p>\n<p>如果return statement只有一个函数调用表达式，这个函数调用命令CALL会被改为TAILCALL命令。TAILCALL不会为要调用的函数增加调用堆栈的深度，而是直接使用当前调用信息。ABC操作数与CALL的意思一样，不过C永远都是0。TAILCALL在执行过程中，只对lua closure进行tail call处理，对于c closure，其实与CALL没什么区别。</p>\n<p>lua</p>\n<pre><code>return foo(1, 2)\n</code></pre>\n<p>vm</p>\n<pre><code>1\t[1]\tGETTABUP \t0 0 -1\t; _ENV \"foo\"\n2\t[1]\tLOADK    \t1 -2\t; 1\n3\t[1]\tLOADK    \t2 -3\t; 2\n4\t[1]\tTAILCALL \t0 3 0\n5\t[1]\tRETURN   \t0 0\n6\t[1]\tRETURN   \t0 1\n</code></pre>\n<p>如果f是一个lua closure，那么执行到第四行后，此函数就会返回了，不会执行到后面第五行的RETURN。如果f是一个c closure，那就和CALL一样调用这个函数，然后依赖第五行的RETURN返回。这就是为什么TAILCALL后面还会己跟着生成一个RETURN的原因。</p>\n<p>OP_RETURN A B return R(A), … ,R(A+B-2)</p>\n<p>RETURE将返回结果存放到寄存器A到寄存器A＋B－2中。如果返回的为变长表达式，则B会被设置为0，表示将寄存器A到当前栈顶的所有值返回。</p>\n<p>lua</p>\n<pre><code>return 0\n</code></pre>\n<p>vm</p>\n<pre><code>1\t[1]\tLOADK    \t0 -1\t; 0\n2\t[1]\tRETURN   \t0 2\n3\t[1]\tRETURN   \t0 1\n</code></pre>\n<p>RETURN只能从寄存器返回数据，所以第一行LOADK先将常量1装载道寄存器0，然后返回。</p>\n<p>lua</p>\n<pre><code>return ...\n</code></pre>\n<p>vm</p>\n<pre><code>1\t[1]\tVARARG   \t0 0\n2\t[1]\tRETURN   \t0 0\n3\t[1]\tRETURN   \t0 1\n</code></pre>\n<p>变量表达式时，B为0。</p>\n<p>OP_CLOSURE A B R(A) := closure(KPROTO[Bx])</p>\n<p>CLOSURE为指定的函数prototype创建一个closure，并将这个closure保存到寄存器A中。Bx用来指定函数prototype的id。</p>\n<p>lua</p>\n<pre><code>local function foo()\nend\n</code></pre>\n<p>vm</p>\n<pre><code>main &lt;main.lua:0,0&gt; (2 instructions at 0x13f8590)\n0+ params, 2 slots, 1 upvalue, 1 local, 0 constants, 1 function\n\t1\t[2]\tCLOSURE  \t0 0\t; 0x13f87d0\n\t2\t[2]\tRETURN   \t0 1\n\nfunction &lt;main.lua:1,2&gt; (1 instruction at 0x13f87d0)\n0 params, 2 slots, 0 upvalues, 0 locals, 0 constants, 0 functions\n\t1\t[2]\tRETURN   \t0 1\n</code></pre>\n<p>上面生成了一个主函数和一个子函数，CLOSURE将为这个索引为0的子函数生成一个closure，并保存到寄存器0中。</p>\n<p>OP_VARARG A B R(A), R(A+1), …, R(A+B-2) = vararg</p>\n<p>VARARG直接对应’…‘运算符。VARARG拷贝B-1个参数到从A开始的寄存器中，如果不足，使用nil补充。如果B为0，表示拷贝实际的参数数量。</p>\n<p>lua</p>\n<pre><code>local v = ...\n</code></pre>\n<p>vm</p>\n<pre><code>1\t[1]\tVARARG   \t0 2\n2\t[1]\tRETURN   \t0 1\n</code></pre>\n<p>第一行表示拷贝B-1个，也就是1个变长参数到寄存器0,也就是local a中</p>\n<p>lua</p>\n<pre><code>foo(...)\n</code></pre>\n<p>vm</p>\n<pre><code>1\t[1]\tGETTABUP \t0 0 -1\t; _ENV \"foo\"\n2\t[1]\tVARARG   \t1 0\n3\t[1]\tCALL     \t0 0 1\n4\t[1]\tRETURN   \t0 1\n</code></pre>\n<p>由于函数调用最后一个参数可以接受不定数量的参数，所以第二行生成的VARARG的B参数为0。</p>\n<p>OP_SELF A B C R(A+1) := R(B); R(A) := R(B)[RK(C)]</p>\n<p>SELF是专门为“:”运算符准备的命令。从寄存器B表示的table中，获取出C作为key的closure，存入寄存器A中，然后将table本身存入到寄存器A＋1中，为接下来调用这个closure做准备。</p>\n<p>lua</p>\n<pre><code>t:foo()\n</code></pre>\n<p>vm</p>\n<pre><code>1\t[1]\tGETTABUP \t0 0 -1\t; _ENV \"t\"\n2\t[1]\tSELF     \t0 0 -2\t; \"foo\"\n3\t[1]\tCALL     \t0 2 1\n4\t[1]\tRETURN   \t0 1\n</code></pre>\n<p>下面是与之等价的语法：</p>\n<p>lua</p>\n<pre><code>t.foo(t)\n</code></pre>\n<p>vm</p>\n<pre><code>1\t[1]\tGETTABUP \t0 0 -1\t; _ENV \"t\"\n2\t[1]\tGETTABLE \t0 0 -2\t; \"foo\"\n3\t[1]\tGETTABUP \t1 0 -1\t; _ENV \"t\"\n4\t[1]\tCALL     \t0 2 1\n5\t[1]\tRETURN   \t0 1\n</code></pre>\n<p>比使用”:”操作符多使用了一个命令。所以，如果需要使用这种面向对象调用的语义时，应该尽量使用”:”。</p>\n<p>OP_JMP A sBx pc+=sBx; if (A) close all upvalues &gt;= R(A-1)</p>\n<p>JMP执行一个跳转，sBx表示跳转的偏移位置，被加到当前指向下一命令的命令指针上。如果sBx为0，表示没有任何跳转；1表示跳过下一个命令；-1表示重新执行当前命令。如果A&gt;0，表示需要关闭所有从寄存器A-1开始的所有local变量。实际执行的关闭操作只对upvalue有效。</p>\n<p>JMP最直接的使用就是对应lua5.2新加入的goto语句：</p>\n<p>lua</p>\n<pre><code>::lable::\ngoto lable\n</code></pre>\n<p>vm</p>\n<pre><code>1\t[1]\tJMP      \t0 -1\t; to 1\n2\t[2]\tRETURN   \t0 1\n</code></pre>\n<p>这是一个无限循环。第一行JMP的sBx为-1，表示重新执行JMP。</p>\n<p>lua</p>\n<pre><code>do\n\tlocal a\n\tfunction f() a = 1 end\nend\n</code></pre>\n<p>vm</p>\n<pre><code>main &lt;main.lua:0,0&gt; (5 instructions at 0x8fb590)\n0+ params, 2 slots, 1 upvalue, 1 local, 1 constant, 1 function\n\t1\t[2]\tLOADNIL  \t0 0\n\t2\t[3]\tCLOSURE  \t1 0\t; 0x8fb920\n\t3\t[3]\tSETTABUP \t0 -1 1\t; _ENV \"f\"\n\t4\t[3]\tJMP      \t1 0\t; to 5\n\t5\t[4]\tRETURN   \t0 1\n\nfunction &lt;main.lua:3,3&gt; (3 instructions at 0x8fb920)\n0 params, 2 slots, 1 upvalue, 0 locals, 1 constant, 0 functions\n\t1\t[3]\tLOADK    \t0 -1\t; 1\n\t2\t[3]\tSETUPVAL \t0 0\t; a\n\t3\t[3]\tRETURN   \t0 1\n</code></pre>\n<p>上面的代码在do block中创建了一个局部变量a，并且a作为upvalue在函数f中被引用到。到退出do block是，a会退出他的有效域，并且关闭他对应的upvalue。Lua5.2后续版本去除了以前专门处理关闭upvalue的命令CLOSE，而把这个功能加入到了JMP中。所以，生成的命令第四行的JMP在这里没有执行跳转，而只是为了关闭a的upvalue。</p>\n<p>JMP其他的功能就是配合逻辑和关系命令（统称为test命令），实现进程的条件跳转。每个test辑命令与JMP搭配，都会将接下来生成的命令分为两个集合，满足条件的为true集合，否则为false集合。当test条件满足时，命令指针回+1，跳过后面紧跟的JMP命令，然后继续执行。当test条件不满足时，则继续执行，也就到了JMP，然后跳转到分支代码。</p>\n<p>OP_EQ A B C if ((RK(B) == RK(C)) ~= A) then pc++</p>\n<p>OP_LT A B C if ((RK(B) &lt; RK(C)) ~= A) then pc++</p>\n<p>OP_LE A B C if ((RK(B) &lt;= RK(C)) ~= A) then pc++</p>\n<p>关系命令对RK(B)和RK(C)进行比较，然后将比较结果与A指定的boolean值进行比较，来决定最终的boolean值。A在这里为每个关系命令提供了两种比较目标，满足和不满足。比如OP_LT何以用来实现“&lt;”和“&gt;”。</p>\n<p>lua</p>\n<pre><code>local a, b, c\na = b &lt; c\n</code></pre>\n<p>vm</p>\n<pre><code>1\t[1]\tLOADNIL  \t0 2\n2\t[2]\tLT       \t1 1 2\n3\t[2]\tJMP      \t0 1\t; to 5\n4\t[2]\tLOADBOOL \t0 0 1\n5\t[2]\tLOADBOOL \t0 1 0\n6\t[2]\tRETURN   \t0 1\n</code></pre>\n<p>第二行的LT对寄存器1和2进行LT比较，如果结果为true，则继续执行后面的JMP，跳转到第五行的LOADBOOL，将寄存器0赋值为true；如果结果为false，则跳过后面的JMP，执行第四行的LOADBOOL，将寄存器0赋值为false。我们前面讲过关于LOADBOOL，第四行执行后会跳过第五行的赋值。</p>\n<p>OP_TEST A C if not (R(A) &lt;=&gt; C) then pc++</p>\n<p>OP_TESTSET A B C if (R(B) &lt;=&gt; C) then R(A) := R(B) else pc++</p>\n<p>逻辑命令用于实现and和or逻辑运算符，或者在条件语句中判断一个寄存器。TESTSET将寄存器B转化成一个boolean值，然后与C进行比较。如果不相等，跳过后面的JMP命令。否则将寄存器B的值赋给寄存器A，然后继续执行。TEST是TESTSET的简化版，不需要赋值操作。</p>\n<p>lua</p>\n<pre><code>local a, b, c\na = b and c\n</code></pre>\n<p>vm\n\t1\t[1]\tLOADNIL  \t0 2\n\t2\t[2]\tTESTSET  \t0 1 0\n\t3\t[2]\tJMP      \t0 1\t; to 5\n\t4\t[2]\tMOVE     \t0 2\n\t5\t[2]\tRETURN   \t0 1</p>\n<p>第二行的TESTSET将寄存器1的值与false比较。如果不成立，跳过JMP，执行第四行的MOVE，将寄存器2的值赋给寄存器0。否则，将寄存器1的值赋给寄存器0；然后执行后面的JMP。</p>\n<p>等价于下列代码：</p>\n<p>lua</p>\n<pre><code>if b then\n\ta = c\nelse\n\ta = b\nend\n</code></pre>\n<p>Lua5.3种除了for循环之外，其他的各种循环都使用关系和逻辑命令，配合JMP命令来完成。</p>\n<p>lua</p>\n<pre><code>local a = 0\nwhile (a &lt; 10) do\n\ta = a+1\nend\n</code></pre>\n<p>vm</p>\n<pre><code>1\t[1]\tLOADK    \t0 -1\t; 0\n2\t[2]\tLT       \t0 0 -2\t; - 10\n3\t[2]\tJMP      \t0 2\t; to 6\n4\t[3]\tADD      \t0 0 -3\t; - 1\n5\t[3]\tJMP      \t0 -4\t; to 2\n6\t[4]\tRETURN   \t0 1\n</code></pre>\n<p>第二行使用LT对寄存器0和常量10进行比较，如果小于成立，跳过第三行的JMP，运行第四行的ADD命令，将a加1，然后运行第五行的JMP，跳转回第二行，重新判断条件。如果小于不成立，则直接运行下一个JMP命令，跳转到第六行结束。</p>\n<p>对于for循环，Lua5.3使用了两套专门的命令，分别对应numeric for loop和generic for loop。</p>\n<p>OP_FORLOOP A sBx R(A)+=R(A+2) if R(A) &lt;= R(A+1) then {pc+=sBx; R(A+3)=R(A)}</p>\n<p>OP_FORPREP A sBx R(A)-=R(A+2) pc+=sBx</p>\n<p>lua</p>\n<pre><code>local a = 0\nfor i = 1, 10 do\n\ta = i\nend\n</code></pre>\n<p>vm</p>\n<pre><code>1\t[1]\tLOADK    \t0 -1\t; 0\n2\t[2]\tLOADK    \t1 -2\t; 1\n3\t[2]\tLOADK    \t2 -3\t; 10\n4\t[2]\tLOADK    \t3 -2\t; 1\n5\t[2]\tFORPREP  \t1 1\t; to 7\n6\t[3]\tMOVE     \t0 4\n7\t[2]\tFORLOOP  \t1 -2\t; to 6\n8\t[4]\tRETURN   \t0 1\n</code></pre>\n<p>Numeric for loop内部使用了3个局部变量来控制循环，他们分别是”for index”，“for limit”和“for step”。“for index”用作存放初始值和循环计数器，“for limit”用作存放循环上限，“for step”用作存放循环步长。对于上面的进程，三个值分别是1，10和1。这三个局部变量对于使用者是不可见得，我们可以在生成代码的locals表中看到这3个局部变量，他们的有效范围为第五行到第八行，也就是整个for循环。还有一个使用到的局部变量，就是使用者自己指定的计数器，上例中为”i”。我们可以看到，这个局部变量的有效范围为6~7行，也就是循环的内部。这个变量在每次循环时都被设置成”for index”变量来使用。</p>\n<p>上例中2~4行初始化循环使用的3个内部局部变量。第五行FORPREP用于准备这个循环，将for index减去一个for step，然后跳转到第七行。第七行的FORLOOP将for index加上一个for step，然后与for limit进行比较。如果小于等于for limit，则将i设置成for index，然后跳回第六行。否则就退出循环。我们可以看到，i并不用于真正的循环计数，而只是在每次循环时被赋予真正的计数器for index的值而已，所以在循环中修改i不会影响循环计数。</p>\n<p>OP_TFORCALL A C R(A+3), …, R(A+2+C) := R(A)(R(A+1), R(A+2))</p>\n<p>OP_TFORLOOP A sBx if R(A+1) ~= nil then { R(A) = R(A+1); pc+= sBx}</p>\n<p>lua</p>\n<pre><code>for i, v in 1, 2, 3 do\n\ta = 1\nend\n</code></pre>\n<p>vm</p>\n<pre><code>1\t[1]\tLOADK    \t0 -1\t; 1\n2\t[1]\tLOADK    \t1 -2\t; 2\n3\t[1]\tLOADK    \t2 -3\t; 3\n4\t[1]\tJMP      \t0 1\t; to 6\n5\t[2]\tSETTABUP \t0 -4 -1\t; _ENV \"a\" 1\n6\t[1]\tTFORCALL \t0 2\n7\t[1]\tTFORLOOP \t2 -3\t; to 5\n8\t[3]\tRETURN   \t0 1\n</code></pre>\n<p>Generic for loop内部也使用了3个局部变量来控制循环，分别是”for generator”，“for state”和“for control”。for generator用来存放迭代使用的closure，每次迭代都会调用这个closure。for state和for control用于存放传给for generator的两个参数。Generic for loop还使用自定义的局部变量i，v，用来存储for generator的返回值。</p>\n<p>上例中1~3行使用in后面的表达式列表(1,2,3)初始化3个内部使用的局部变量。第四行JMP调转到第六行。TFORCALL调用寄存器0(for generator)中的closure，传入for state和for control，并将结果返回给自定义局部变量列表i和v。第七行调用TFORLOOP进行循环条件判断，判断i是否为空。如果不为空，将i的值赋给for control，然后跳转到第五行，进行循环。</p>","text":"&lt;h2 id=&quot;introduction&quot;&gt;1. Introduction&lt;/h2&gt; 本文讲解lua 5.3.1虚拟机命令。lua的命令具有固定的大小，缺省使用一个32bit无符号整型数据类型。当前lua 5.3.1使用4个命令类型和4...","link":"","photos":[],"count_time":{"symbolsCount":"19k","symbolsTime":"17 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#section\"><span class=\"toc-text\">2. 命令集摘要</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#section-1\"><span class=\"toc-text\">3. 详细说明：</span></a></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"evaluación de interfaces","uid":"7ac08056af2688015c5ec13e91c066b9","slug":"zl/2016-01-01-1100_evaluación de interfaces","date":"2024-04-03T03:47:33.001Z","updated":"2024-04-03T03:47:33.002Z","comments":true,"path":"api/articles/zl/2016-01-01-1100_evaluación de interfaces.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":" Plannificación de una evaluación Procedimientos de evaluacion analítica Procedimientos de evaluación empírica IntroducciónLas interfaces de...","link":"","photos":[],"count_time":{"symbolsCount":"2.8k","symbolsTime":"3 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"lua打印表格","uid":"a51fd8082cae080deb6378806577afa6","slug":"zl/2016-01-01-1096_lua打印表格","date":"2024-04-03T03:47:33.000Z","updated":"2024-04-03T03:47:33.000Z","comments":true,"path":"api/articles/zl/2016-01-01-1096_lua打印表格.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"Lua打印表格function print_table(t) local cache = {} local function print_table_sub (t, indent) if (cache[tostring(t)]) then print(indent .. &#34...","link":"","photos":[],"count_time":{"symbolsCount":"1.4k","symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}