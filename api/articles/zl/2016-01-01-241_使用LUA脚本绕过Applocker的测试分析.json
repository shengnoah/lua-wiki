{"title":"使用LUA脚本绕过Applocker的测试分析","uid":"a29901bd86e6f7143bffe0619b53a12b","slug":"zl/2016-01-01-241_使用LUA脚本绕过Applocker的测试分析","date":"2024-04-03T03:47:33.109Z","updated":"2024-04-03T03:47:33.110Z","comments":true,"path":"api/articles/zl/2016-01-01-241_使用LUA脚本绕过Applocker的测试分析.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<pre><code>            &lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;https://wikis1.github.io/#0x00-%E5%89%8D%E8%A8%80&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h2&gt;\n</code></pre>\n<p>在之前的文章《Bypass Windows AppLocker》曾对绕过Applocker的方法进行过学习，而最近看到一篇文章介绍了使用LUA脚本绕过Applocker的方法，学习之后产生了以下疑问：绕过原理是什么呢？能绕过哪种AppLocker的规则呢？适用条件又是什么呢？</p>\n<p>文章地址：</p>\n<p><a href=\"https://homjxi0e.wordpress.com/2018/03/02/whitelisting-bypassing-using-lua-lanuage-wlua-com/\" target=\"_blank\" rel=\"noopener noreferrer\">https://homjxi0e.wordpress.com/2018/03/02/whitelisting-bypassing-using-lua-lanuage-wlua-com/</a></p>\n<h2 id=\"0x01-简介\"><a href=\"https://wikis1.github.io/#0x01-%E7%AE%80%E4%BB%8B\" class=\"headerlink\" title=\"0x01 简介\"></a>0x01 简介</h2><hr>\n<p>本文将要介绍以下内容：</p>\n<ul>\n<li>LUA脚本简介</li>\n<li>绕过测试</li>\n<li>绕过原理</li>\n<li>适用条件</li>\n<li>防御方法</li>\n</ul>\n<h2 id=\"0x02-LUA脚本简介\"><a href=\"https://wikis1.github.io/#0x02-LUA%E8%84%9A%E6%9C%AC%E7%AE%80%E4%BB%8B\" class=\"headerlink\" title=\"0x02 LUA脚本简介\"></a>0x02 LUA脚本简介</h2>\n<ul>\n<li>轻量小巧的脚本语言</li>\n<li>用标准C语言编写</li>\n<li>可以被C/C++ 代码调用</li>\n<li>可以调用C/C++的函数</li>\n<li>在目前所有脚本引擎中的速度最快</li>\n</ul>\n<h2 id=\"0x03-Windows系统下执行LUA脚本\"><a href=\"https://wikis1.github.io/#0x03-Windows%E7%B3%BB%E7%BB%9F%E4%B8%8B%E6%89%A7%E8%A1%8CLUA%E8%84%9A%E6%9C%AC\" class=\"headerlink\" title=\"0x03 Windows系统下执行LUA脚本\"></a>0x03 Windows系统下执行LUA脚本</h2><hr>\n<p>1、安装Lua for Windows，下载地址：</p>\n<p><a href=\"http://files.luaforge.net/releases/luaforwindows/luaforwindows\" target=\"_blank\" rel=\"noopener noreferrer\">http://files.luaforge.net/releases/luaforwindows/luaforwindows</a></p>\n<p>2、输出hello world</p>\n<p>脚本内容：</p>\n<pre><code>print\"Hello,world!\"\n</code></pre><p>cmd：</p>\n<pre><code>lua.exe 1.txt\n</code></pre><p>如下图</p>\n<p><img src=\"https://raw.githubusercontent.com/3gstudent/BlogPic/master/2018-3-6/2-1.png\" alt=\"Alt text\"></p>\n<p>3、调用Windows API</p>\n<p>脚本内容：</p>\n<pre><code>require \"alien\"\nMessageBox = alien.User32.MessageBoxA \nMessageBox:types&#123;ret ='long',abi ='stdcall','long','string','string','long'&#125;\nMessageBox(0, \"title for test\",\"LUA call windows api\",0)\n</code></pre><p>执行如下图</p>\n<p><img src=\"https://raw.githubusercontent.com/3gstudent/BlogPic/master/2018-3-6/2-2.png\" alt=\"Alt text\"></p>\n<p>4、c++执行LUA脚本</p>\n<p>参考代码如下：</p>\n<pre><code>extern \"C\" &#123;  \n#include \"lua.h\"    \n#include &lt;lauxlib.h&gt;     \n#include &lt;lualib.h&gt;     \n&#125; \nint main(int argc,char* argv[])\n&#123;\n    lua_State *L =  lua_open();\n    luaL_openlibs(L);\n    luaL_dofile(L, argv[1]);\n    lua_close(L);\n    return 0;\n&#125;\n</code></pre><p>工程需要做如下设置：</p>\n<p>(1)修改<code>VC++ 目录</code></p>\n<p><code>包含目录</code>，添加<code>C:Program FilesLua5.1include</code></p>\n<p><code>库目录</code>，添加<code>C:Program FilesLua5.1lib</code></p>\n<p>(2)<code>链接器</code> - <code>输入</code> - <code>附加依赖项</code>，添加</p>\n<pre><code>lua5.1.lib\nlua51.lib\n</code></pre><p>执行如下图</p>\n<p><img src=\"https://raw.githubusercontent.com/3gstudent/BlogPic/master/2018-3-6/3-1.png\" alt=\"Alt text\"></p>\n<p>c++执行LUA脚本来调用Windows API，需要在同级目录添加支持文档，执行如下图</p>\n<p><img src=\"https://raw.githubusercontent.com/3gstudent/BlogPic/master/2018-3-6/3-2.png\" alt=\"Alt text\"></p>\n<h2 id=\"0x04-测试使用LUA脚本绕过Applocker\"><a href=\"https://wikis1.github.io/#0x04-%E6%B5%8B%E8%AF%95%E4%BD%BF%E7%94%A8LUA%E8%84%9A%E6%9C%AC%E7%BB%95%E8%BF%87Applocker\" class=\"headerlink\" title=\"0x04 测试使用LUA脚本绕过Applocker\"></a>0x04 测试使用LUA脚本绕过Applocker</h2>\n<h3 id=\"测试一：\"><a href=\"https://wikis1.github.io/#%E6%B5%8B%E8%AF%95%E4%B8%80%EF%BC%9A\" class=\"headerlink\" title=\"测试一：\"></a>测试一：</h3><p>测试系统： Win7x86</p>\n<p>安装Lua for Windows</p>\n<p>开启Applocker，配置默认规则</p>\n<p>使用lua.exe执行脚本：</p>\n<p>成功绕过Applocker的拦截</p>\n<p>如下图</p>\n<p><img src=\"https://raw.githubusercontent.com/3gstudent/BlogPic/master/2018-3-6/2-3.png\" alt=\"Alt text\"></p>\n<h3 id=\"测试二：\"><a href=\"https://wikis1.github.io/#%E6%B5%8B%E8%AF%95%E4%BA%8C%EF%BC%9A\" class=\"headerlink\" title=\"测试二：\"></a>测试二：</h3><p>测试系统： Win7x86</p>\n<p>安装Lua for Windows</p>\n<p>开启Applocker，配置默认规则，添加规则： 拦截lua.exe</p>\n<p>未绕过Applocker的拦截</p>\n<p>如下图</p>\n<p><img src=\"https://raw.githubusercontent.com/3gstudent/BlogPic/master/2018-3-6/2-4.png\" alt=\"Alt text\"></p>\n<p><strong>注：</strong></p>\n<p>还可以使用wlua.exe执行lua脚本</p>\n<h3 id=\"测试三：\"><a href=\"https://wikis1.github.io/#%E6%B5%8B%E8%AF%95%E4%B8%89%EF%BC%9A\" class=\"headerlink\" title=\"测试三：\"></a>测试三：</h3><p>测试系统： Win7x64</p>\n<p>未安装Lua for Windows</p>\n<p>开启Applocker，配置默认规则，系统禁止执行脚本</p>\n<p>lua.exe同级目录放置lua5.1.dll(来自Lua for Windows安装路径)</p>\n<p>使用lua.exe执行脚本：</p>\n<p>未绕过Applocker的拦截</p>\n<p>如下图</p>\n<p><img src=\"https://raw.githubusercontent.com/3gstudent/BlogPic/master/2018-3-6/2-5.png\" alt=\"Alt text\"></p>\n<p><strong>补充：</strong></p>\n<p>将lua.exe换成wlua.exe，脚本内容修改为POC内容，地址如下：</p>\n<p><a href=\"https://gist.githubusercontent.com/homjxi0e/fd023113bf8b1b6789afa05c3913157c/raw/6bf41cbd76e9df6d6d3edcc9e289191f898451dc/AppLockerBypassing.wlua\" target=\"_blank\" rel=\"noopener noreferrer\">https://gist.githubusercontent.com/homjxi0e/fd023113bf8b1b6789afa05c3913157c/raw/6bf41cbd76e9df6d6d3edcc9e289191f898451dc/AppLockerBypassing.wlua</a></p>\n<p>测试结果均相同</p>\n<h2 id=\"0x05-最终结论\"><a href=\"https://wikis1.github.io/#0x05-%E6%9C%80%E7%BB%88%E7%BB%93%E8%AE%BA\" class=\"headerlink\" title=\"0x05 最终结论\"></a>0x05 最终结论</h2><hr>\n<p>经过以上测试，得出最终结论：</p>\n<p>使用LUA脚本，在一定进程上能绕过Applocker，但需要满足以下条件：</p>\n<ul>\n<li>当前系统已安装Lua for Windows</li>\n<li>Applocker的规则未禁止lua.exe和wlua.exe</li>\n</ul>\n<h2 id=\"0x06-小结\"><a href=\"https://wikis1.github.io/#0x06-%E5%B0%8F%E7%BB%93\" class=\"headerlink\" title=\"0x06 小结\"></a>0x06 小结</h2>\n<p>本文对LUA脚本的开发做了简要介绍，测试使用LUA脚本绕过Applocker的POC，得出最终结论</p>\n<hr>\n<p><a href=\"https://github.com/3gstudent/feedback/issues/new\" target=\"_blank\" rel=\"noopener noreferrer\">LEAVE A REPLY</a></p>\n<p class=\"red-link-context\">\n    <a href=\"https://wikis1.github.io/a99095d9.html\" rel=\"next\" title=\"利用Assembly Load &amp; LoadFile绕过Applocker的分析总结\">\n    上一篇：利用Assembly Load &amp; LoadFile绕过Applocker的分析总结\n  </a>\n</p>\n<p class=\"red-link-context\">\n</p>","text":" &lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;https://wikis1.github.io/#0x00-%E5%89%8D%E8%A8%80&quot; class=&quot;headerlink&quot; titl...","link":"","photos":[],"count_time":{"symbolsCount":"2.3k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#0x01-%E7%AE%80%E4%BB%8B\"><span class=\"toc-text\">0x01 简介</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#0x02-LUA%E8%84%9A%E6%9C%AC%E7%AE%80%E4%BB%8B\"><span class=\"toc-text\">0x02 LUA脚本简介</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#0x03-Windows%E7%B3%BB%E7%BB%9F%E4%B8%8B%E6%89%A7%E8%A1%8CLUA%E8%84%9A%E6%9C%AC\"><span class=\"toc-text\">0x03 Windows系统下执行LUA脚本</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#0x04-%E6%B5%8B%E8%AF%95%E4%BD%BF%E7%94%A8LUA%E8%84%9A%E6%9C%AC%E7%BB%95%E8%BF%87Applocker\"><span class=\"toc-text\">0x04 测试使用LUA脚本绕过Applocker</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B5%8B%E8%AF%95%E4%B8%80%EF%BC%9A\"><span class=\"toc-text\">测试一：</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B5%8B%E8%AF%95%E4%BA%8C%EF%BC%9A\"><span class=\"toc-text\">测试二：</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B5%8B%E8%AF%95%E4%B8%89%EF%BC%9A\"><span class=\"toc-text\">测试三：</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#0x05-%E6%9C%80%E7%BB%88%E7%BB%93%E8%AE%BA\"><span class=\"toc-text\">0x05 最终结论</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#0x06-%E5%B0%8F%E7%BB%93\"><span class=\"toc-text\">0x06 小结</span></a></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Lua笔记 迭代器","uid":"f6ae2766b323b6d77308e0bcd268c058","slug":"zl/2016-01-01-240_Lua笔记 迭代器","date":"2024-04-03T03:47:33.109Z","updated":"2024-04-03T03:47:33.109Z","comments":true,"path":"api/articles/zl/2016-01-01-240_Lua笔记 迭代器.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":" &lt;p&gt;Lua中的迭代器提供的是一种遍历表中所有元素的机制，它通常是函数的形式，每次调用函数，返回“下一个”值。Lua中的迭代器有两种实现方式，基于闭包（closure）或者基于协程（coroutine）。以下会通过一个实例来分别讨论两种迭代器的实现。&lt;/p&g...","link":"","photos":[],"count_time":{"symbolsCount":"2k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Nginx Lua","uid":"a70272e07b66a3a77abea4e3b88cdcb9","slug":"zl/2016-01-01-23_Nginx Lua","date":"2024-04-03T03:47:33.109Z","updated":"2024-04-03T03:47:33.109Z","comments":true,"path":"api/articles/zl/2016-01-01-23_Nginx Lua.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"1.1. 介绍ngx_lua – 把lua语言嵌入nginx中,使其支持lua来快速开发基于nginx下的业务逻辑该模块不在nginx源码包中，需自行下载编译安装。使用lua 5.1（目前不支持lua 5.2） 或 luajit 2.0 。添加lua支持后，开发复杂的模块，周期快...","link":"","photos":[],"count_time":{"symbolsCount":"6.8k","symbolsTime":"6 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}