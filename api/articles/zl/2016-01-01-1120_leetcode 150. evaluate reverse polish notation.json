{"title":"leetcode 150. evaluate reverse polish notation","uid":"b9432e082351f84ea61e4f03fba9e823","slug":"zl/2016-01-01-1120_leetcode 150. evaluate reverse polish notation","date":"2024-04-03T03:47:33.008Z","updated":"2024-04-03T03:47:33.008Z","comments":true,"path":"api/articles/zl/2016-01-01-1120_leetcode 150. evaluate reverse polish notation.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<h2 id=\"150-Evaluate-Reverse-Polish-Notation\"><a href=\"#150-Evaluate-Reverse-Polish-Notation\" class=\"headerlink\" title=\"150. Evaluate Reverse Polish Notation\"></a><a href=\"https://leetcode.com/problems/evaluate-reverse-polish-notation/\" target=\"_blank\" rel=\"noopener noreferrer\">150. Evaluate Reverse Polish Notation</a></h2><p>Difficulty: <strong>Medium</strong></p>\n<p>Evaluate the value of an arithmetic expression in .</p>\n<p>Valid operators are <code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>. Each operand may be an integer or another expression.</p>\n<p><strong>Note:</strong></p>\n<ul>\n<li>Division between two integers should truncate toward zero.</li>\n<li>The given RPN expression is always valid. That means the expression would always evaluate to a result and there won’t be any divide by zero operation.</li>\n</ul>\n<p><strong>Example 1:</strong></p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">Input: [&#34;2&#34;, &#34;1&#34;, &#34;+&#34;, &#34;3&#34;, &#34;*&#34;]</span><br/><span class=\"line\">Output: 9</span><br/><span class=\"line\">Explanation: ((2 + 1) * 3) = 9</span><br/></pre></td></tr></tbody></table></figure>\n<p><strong>Example 2:</strong></p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">Input: [&#34;4&#34;, &#34;13&#34;, &#34;5&#34;, &#34;/&#34;, &#34;+&#34;]</span><br/><span class=\"line\">Output: 6</span><br/><span class=\"line\">Explanation: (4 + (13 / 5)) = 6</span><br/></pre></td></tr></tbody></table></figure>\n<p><strong>Example 3:</strong></p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/><span class=\"line\">9</span><br/><span class=\"line\">10</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">Input: [&#34;10&#34;, &#34;6&#34;, &#34;9&#34;, &#34;3&#34;, &#34;+&#34;, &#34;-11&#34;, &#34;*&#34;, &#34;/&#34;, &#34;*&#34;, &#34;17&#34;, &#34;+&#34;, &#34;5&#34;, &#34;+&#34;]</span><br/><span class=\"line\">Output: 22</span><br/><span class=\"line\">Explanation: </span><br/><span class=\"line\">  ((10 * (6 / ((9 + 3) * -11))) + 17) + 5</span><br/><span class=\"line\">= ((10 * (6 / (12 * -11))) + 17) + 5</span><br/><span class=\"line\">= ((10 * (6 / -132)) + 17) + 5</span><br/><span class=\"line\">= ((10 * 0) + 17) + 5</span><br/><span class=\"line\">= (0 + 17) + 5</span><br/><span class=\"line\">= 17 + 5</span><br/><span class=\"line\">= 22</span><br/></pre></td></tr></tbody></table></figure>\n<h3 id=\"Solution\"><a href=\"#Solution\" class=\"headerlink\" title=\"Solution\"></a>Solution</h3><p>Language: <strong>Java</strong></p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/><span class=\"line\">9</span><br/><span class=\"line\">10</span><br/><span class=\"line\">11</span><br/><span class=\"line\">12</span><br/><span class=\"line\">13</span><br/><span class=\"line\">14</span><br/><span class=\"line\">15</span><br/><span class=\"line\">16</span><br/><span class=\"line\">17</span><br/><span class=\"line\">18</span><br/><span class=\"line\">19</span><br/><span class=\"line\">20</span><br/><span class=\"line\">21</span><br/><span class=\"line\">22</span><br/><span class=\"line\">23</span><br/><span class=\"line\">24</span><br/><span class=\"line\">25</span><br/><span class=\"line\">26</span><br/><span class=\"line\">27</span><br/><span class=\"line\">28</span><br/><span class=\"line\">29</span><br/><span class=\"line\">30</span><br/><span class=\"line\">31</span><br/><span class=\"line\">32</span><br/><span class=\"line\">33</span><br/><span class=\"line\">34</span><br/><span class=\"line\">35</span><br/><span class=\"line\">36</span><br/><span class=\"line\">37</span><br/><span class=\"line\">38</span><br/><span class=\"line\">39</span><br/><span class=\"line\">40</span><br/><span class=\"line\">41</span><br/><span class=\"line\">42</span><br/><span class=\"line\">43</span><br/><span class=\"line\">44</span><br/><span class=\"line\">45</span><br/><span class=\"line\">46</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span>  </span>{</span><br/><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">evalRPN</span><span class=\"params\">(String[] tokens)</span> </span>{</span><br/><span class=\"line\">        <span class=\"keyword\">if</span> (tokens == <span class=\"keyword\">null</span> || tokens.length == <span class=\"number\">0</span>) {</span><br/><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br/><span class=\"line\">        }</span><br/><span class=\"line\">        Deque&lt;Object&gt; s = <span class=\"keyword\">new</span> ArrayDeque&lt;&gt;();</span><br/><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = tokens.length - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) {</span><br/><span class=\"line\">            pushStack(s, tokens[i]);</span><br/><span class=\"line\">        }</span><br/><span class=\"line\">        <span class=\"keyword\">return</span> (Integer)s.pop();</span><br/><span class=\"line\">    }</span><br/><span class=\"line\">    </span><br/><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">pushStack</span><span class=\"params\">(Deque&lt;Object&gt; s, String token)</span> </span>{</span><br/><span class=\"line\">        <span class=\"keyword\">if</span> (token.equals(<span class=\"string\">&#34;+&#34;</span>) || token.equals(<span class=\"string\">&#34;-&#34;</span>) || token.equals(<span class=\"string\">&#34;*&#34;</span>) || token.equals(<span class=\"string\">&#34;/&#34;</span>)) {</span><br/><span class=\"line\">            s.push(token);</span><br/><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br/><span class=\"line\">        }</span><br/><span class=\"line\">        Integer val = Integer.parseInt(token);</span><br/><span class=\"line\">        <span class=\"keyword\">if</span> (s.peek() <span class=\"keyword\">instanceof</span> String) {</span><br/><span class=\"line\">            s.push(val);</span><br/><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br/><span class=\"line\">        }</span><br/><span class=\"line\">        <span class=\"keyword\">while</span>(!s.isEmpty() &amp;&amp; s.peek() <span class=\"keyword\">instanceof</span> Integer) {</span><br/><span class=\"line\">            Integer n = (Integer) s.pop();</span><br/><span class=\"line\">            String operator = (String) s.pop();</span><br/><span class=\"line\">            <span class=\"keyword\">int</span> res = <span class=\"number\">0</span>;</span><br/><span class=\"line\">            <span class=\"keyword\">switch</span> (operator) {</span><br/><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">&#34;+&#34;</span>:</span><br/><span class=\"line\">                    res = val + n;</span><br/><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br/><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">&#34;-&#34;</span>:</span><br/><span class=\"line\">                    res = val - n;</span><br/><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br/><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">&#34;*&#34;</span>:</span><br/><span class=\"line\">                    res = val * n;</span><br/><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br/><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">&#34;/&#34;</span>:</span><br/><span class=\"line\">                    res = val / n;</span><br/><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br/><span class=\"line\">            }</span><br/><span class=\"line\">            val = res;</span><br/><span class=\"line\">        }</span><br/><span class=\"line\">        s.push(val);</span><br/><span class=\"line\">    }</span><br/><span class=\"line\">    </span><br/><span class=\"line\">}</span><br/></pre></td></tr></tbody></table></figure>","text":"150. Evaluate Reverse Polish NotationDifficulty: Medium Evaluate the value of an arithmetic expression in . Valid operators are +, -, *, /. ...","link":"","photos":[],"count_time":{"symbolsCount":"2.5k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#150-Evaluate-Reverse-Polish-Notation\"><span class=\"toc-text\">150. Evaluate Reverse Polish Notation</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Solution\"><span class=\"toc-text\">Solution</span></a></li></ol></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Lua数据结构的实现","uid":"5670ddb0c3e7d5212a221b327730f4a2","slug":"zl/2016-01-01-111_Lua数据结构的实现","date":"2024-04-03T03:47:33.008Z","updated":"2024-04-03T03:47:33.008Z","comments":true,"path":"api/articles/zl/2016-01-01-111_Lua数据结构的实现.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":" 《Lua程序设计》笔记：高效地使用table来实现一些传统的数据结构 1 数组Lua库和长度操作符都遵循索引从1开始的约定。 2 多维数组123456789101112131415mt = {}for i=1, N do mt[i] = {} for j=1, M do mt[...","link":"","photos":[],"count_time":{"symbolsCount":"2.1k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"应(luan)有(qi)尽(ba)有(zao)","uid":"ec49aff2f9cb50a25e76b77eafe14686","slug":"zl/2016-01-01-1122_应(luan)有(qi)尽(ba)有(zao)","date":"2024-04-03T03:47:33.008Z","updated":"2024-04-03T03:47:33.009Z","comments":true,"path":"api/articles/zl/2016-01-01-1122_应(luan)有(qi)尽(ba)有(zao).json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"记录一些看到的有用的知识 金钱格式化用正则魔法实现：1234var test1 = &#39;1234567890&#39;var format = test1.replace(/B(?=(d{3})+(?!d))/g, &#39;,&#39;)console.log(forma...","link":"","photos":[],"count_time":{"symbolsCount":451,"symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}