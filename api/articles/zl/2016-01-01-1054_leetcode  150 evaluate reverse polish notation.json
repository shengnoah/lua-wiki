{"title":"leetcode  150 evaluate reverse polish notation","uid":"a1d172ae7fe51643d5335cfa4e1bd739","slug":"zl/2016-01-01-1054_leetcode  150 evaluate reverse polish notation","date":"2024-04-03T03:47:32.984Z","updated":"2024-04-03T03:47:32.984Z","comments":true,"path":"api/articles/zl/2016-01-01-1054_leetcode  150 evaluate reverse polish notation.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<p>Evaluate the value of an arithmetic expression in <a href=\"http://en.wikipedia.org/wiki/Reverse_Polish_notation\" target=\"_blank\" rel=\"noopener noreferrer\">Reverse Polish Notation</a>.</p>\n<p>Valid operators are <code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>. Each operand may be an integer or another expression.</p>\n<p><strong>Note:</strong></p>\n<ul>\n<li>Division between two integers should truncate toward zero.</li>\n<li>The given RPN expression is always valid. That means the expression would always evaluate to a result and there won’t be any divide by zero operation.</li>\n</ul>\n<p><strong>Example 1:</strong></p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">Input: [&#34;2&#34;, &#34;1&#34;, &#34;+&#34;, &#34;3&#34;, &#34;*&#34;]</span><br/><span class=\"line\">Output: 9</span><br/><span class=\"line\">Explanation: ((2 + 1) * 3) = 9</span><br/></pre></td></tr></tbody></table></figure>\n<p><strong>Example 2:</strong></p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">Input: [&#34;4&#34;, &#34;13&#34;, &#34;5&#34;, &#34;/&#34;, &#34;+&#34;]</span><br/><span class=\"line\">Output: 6</span><br/><span class=\"line\">Explanation: (4 + (13 / 5)) = 6</span><br/></pre></td></tr></tbody></table></figure>\n<p><strong>Example 3:</strong></p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/><span class=\"line\">9</span><br/><span class=\"line\">10</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">Input: [&#34;10&#34;, &#34;6&#34;, &#34;9&#34;, &#34;3&#34;, &#34;+&#34;, &#34;-11&#34;, &#34;*&#34;, &#34;/&#34;, &#34;*&#34;, &#34;17&#34;, &#34;+&#34;, &#34;5&#34;, &#34;+&#34;]</span><br/><span class=\"line\">Output: 22</span><br/><span class=\"line\">Explanation: </span><br/><span class=\"line\">  ((10 * (6 / ((9 + 3) * -11))) + 17) + 5</span><br/><span class=\"line\">= ((10 * (6 / (12 * -11))) + 17) + 5</span><br/><span class=\"line\">= ((10 * (6 / -132)) + 17) + 5</span><br/><span class=\"line\">= ((10 * 0) + 17) + 5</span><br/><span class=\"line\">= (0 + 17) + 5</span><br/><span class=\"line\">= 17 + 5</span><br/><span class=\"line\">= 22</span><br/></pre></td></tr></tbody></table></figure>\n<hr/>\n<ul>\n<li>使用栈能够简单的实现</li>\n</ul>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/><span class=\"line\">9</span><br/><span class=\"line\">10</span><br/><span class=\"line\">11</span><br/><span class=\"line\">12</span><br/><span class=\"line\">13</span><br/><span class=\"line\">14</span><br/><span class=\"line\">15</span><br/><span class=\"line\">16</span><br/><span class=\"line\">17</span><br/><span class=\"line\">18</span><br/><span class=\"line\">19</span><br/><span class=\"line\">20</span><br/><span class=\"line\">21</span><br/><span class=\"line\">22</span><br/><span class=\"line\">23</span><br/><span class=\"line\">24</span><br/><span class=\"line\">25</span><br/><span class=\"line\">26</span><br/><span class=\"line\">27</span><br/><span class=\"line\">28</span><br/><span class=\"line\">29</span><br/><span class=\"line\">30</span><br/><span class=\"line\">31</span><br/><span class=\"line\">32</span><br/><span class=\"line\">33</span><br/><span class=\"line\">34</span><br/><span class=\"line\">35</span><br/><span class=\"line\">36</span><br/><span class=\"line\">37</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span>  </span>{</span><br/><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">evalRPN</span><span class=\"params\">(String[] tokens)</span> </span>{</span><br/><span class=\"line\">        Stack&lt;Integer&gt; s = <span class=\"keyword\">new</span> Stack&lt;&gt;();</span><br/><span class=\"line\">        <span class=\"keyword\">for</span> (String t: tokens){</span><br/><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"string\">&#34;+&#34;</span>.equals(t)){</span><br/><span class=\"line\">                <span class=\"keyword\">int</span> b = s.pop();</span><br/><span class=\"line\">                <span class=\"keyword\">int</span> a = s.pop();</span><br/><span class=\"line\">                <span class=\"keyword\">int</span> ans = a + b;</span><br/><span class=\"line\">                s.push(ans);</span><br/><span class=\"line\">            }</span><br/><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"string\">&#34;-&#34;</span>.equals(t)){</span><br/><span class=\"line\">                <span class=\"keyword\">int</span> b = s.pop();</span><br/><span class=\"line\">                <span class=\"keyword\">int</span> a = s.pop();</span><br/><span class=\"line\">                <span class=\"keyword\">int</span> ans = a - b;</span><br/><span class=\"line\">                s.push(ans);</span><br/><span class=\"line\"></span><br/><span class=\"line\">            }</span><br/><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"string\">&#34;*&#34;</span>.equals(t)){</span><br/><span class=\"line\">                <span class=\"keyword\">int</span> b = s.pop();</span><br/><span class=\"line\">                <span class=\"keyword\">int</span> a = s.pop();</span><br/><span class=\"line\">                <span class=\"keyword\">int</span> ans = a * b;</span><br/><span class=\"line\">                s.push(ans);</span><br/><span class=\"line\">            }</span><br/><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"string\">&#34;/&#34;</span>.equals(t)){</span><br/><span class=\"line\">                <span class=\"keyword\">int</span> b = s.pop();</span><br/><span class=\"line\">                <span class=\"keyword\">int</span> a = s.pop();</span><br/><span class=\"line\">                <span class=\"keyword\">int</span> ans = a / b;</span><br/><span class=\"line\">                s.push(ans);</span><br/><span class=\"line\">            }</span><br/><span class=\"line\">            <span class=\"keyword\">else</span>{</span><br/><span class=\"line\">                <span class=\"keyword\">int</span> num = Integer.parseInt(t);</span><br/><span class=\"line\">                s.push(num);</span><br/><span class=\"line\">            }</span><br/><span class=\"line\">        }</span><br/><span class=\"line\">        <span class=\"keyword\">return</span> s.peek();</span><br/><span class=\"line\">    }</span><br/><span class=\"line\">}</span><br/></pre></td></tr></tbody></table></figure>\n<pre><code>            &lt;hr/&gt;\n            \n            \n\n            &lt;br/&gt;\n\n            \n            \n            \n\n            &lt;br/&gt;\n            \n            \n            \n            &lt;br/&gt;\n</code></pre>\n","text":"Evaluate the value of an arithmetic expression in Reverse Polish Notation. Valid operators are +, -, *, /. Each operand may be an integer or...","link":"","photos":[],"count_time":{"symbolsCount":"2.3k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"ngx_lua灵活定制fastcgi_cache缓存key","uid":"747d93479db646dd1c866e4270a4787d","slug":"zl/2016-01-01-105_ngx_lua灵活定制fastcgi_cache缓存key","date":"2024-04-03T03:47:32.985Z","updated":"2024-04-03T03:47:32.986Z","comments":true,"path":"api/articles/zl/2016-01-01-105_ngx_lua灵活定制fastcgi_cache缓存key.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"Web开发常见的几种缓存 常用缓存（memcached和redis） Nginx的缓存（标准模块缓存: proxy_cache和fastcgi_cache / 第三方模块做缓存: ngx_lua） CDN缓存 浏览器缓存（Cache-Control和LocalStorage） p...","link":"","photos":[],"count_time":{"symbolsCount":"3.6k","symbolsTime":"3 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"lua string hash 算法","uid":"372606f63bd95e5899d879add30ecf84","slug":"zl/2016-01-01-1057_lua string hash 算法","date":"2024-04-03T03:47:32.984Z","updated":"2024-04-03T03:47:32.985Z","comments":true,"path":"api/articles/zl/2016-01-01-1057_lua string hash 算法.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"我在前一篇文章介绍过下面这 3 个字符串拥有相同的 hash，会导致 Hash Dos 问题： &#34;0000000000000000000000000000000000&#34; &#34;f0l0l0w0m0e0n0t0w0i0t0t0e0r0?0:0)0&#34; &#...","link":"","photos":[],"count_time":{"symbolsCount":"4k","symbolsTime":"4 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}