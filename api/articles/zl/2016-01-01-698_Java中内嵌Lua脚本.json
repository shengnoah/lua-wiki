{"title":"Java中内嵌Lua脚本","uid":"f95a8e8d7211e7be31a7335f1e131d1a","slug":"zl/2016-01-01-698_Java中内嵌Lua脚本","date":"2024-04-03T03:47:35.933Z","updated":"2024-04-03T03:47:35.933Z","comments":true,"path":"api/articles/zl/2016-01-01-698_Java中内嵌Lua脚本.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<p><code>Lua</code>是一种小巧的脚本语言，如今常用于游戏开发，特别是客户端开发，基本上都是基于Lua来实现热更新，在Unity开发中更有<code>uLua</code>（最新版改名为<code>toLua</code>）这样成熟的热更框架。这里我设想用<code>Lua</code>+<code>Java</code>来实现服务器的热更，不成熟的想法，这里想尝试一下<code>Lua</code>和<code>Java</code>如何互相调用。</p>\n<h3 id=\"插件选择：\"><a href=\"#插件选择：\" class=\"headerlink\" title=\"插件选择：\"></a><strong>插件选择：</strong></h3><p>假如引入第三方库，可以找到比较常用的两个选择：<code>LuaJava</code>和<code>LuaJ</code>，简单做一下对比：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">第三方库</th>\n<th style=\"text-align:center\">实现</th>\n<th style=\"text-align:center\">特性</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">LuaJava</td>\n<td style=\"text-align:center\">非纯Java实现，需要通过native方法调用C库，依赖于Lua 5.1</td>\n<td style=\"text-align:center\">会导致JVM崩溃，不再更新，没人维护</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">LuaJ（LuaJavaBridge）</td>\n<td style=\"text-align:center\">纯Java实现的Lua解析器，无需使用native</td>\n<td style=\"text-align:center\">不会因错误导致JVM crash，支持JSR-223</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"LuaJava简介：\"><a href=\"#LuaJava简介：\" class=\"headerlink\" title=\"LuaJava简介：\"></a><strong>LuaJava简介：</strong></h4><p>Lua是支持内嵌在C程序中的，但是官方不支持Java，所以我们只能寻找第三方插件了，找到了一个<code>LuaJava</code>，这是一个开源项目，实现方式：LuaJava实际上就是按照Lua官方文档，把Lua的C接口通过<code>JNI</code>包装成Java的库。下载资源，里面是一个<code>.dll</code>和 一个<code>.jar</code>。把<code>.dll</code>放到<code>java.library.path</code>下，再把<code>.lib</code>放到<code>classpath</code>中。</p>\n<h4 id=\"LuaJ简介：\"><a href=\"#LuaJ简介：\" class=\"headerlink\" title=\"LuaJ简介：\"></a><strong>LuaJ简介：</strong></h4><p><strong>主要特征：</strong></p>\n<ul>\n<li>可以从 <code>Lua</code> 调用 <code>Java Class Static Method</code>（Java的静态方法）；</li>\n<li>调用 <code>Java</code> 方法时，支持 <code>int/float/boolean/String/Lua function</code> 五种参数类型；</li>\n<li>可以将 <code>Lua function</code> 作为参数传递给 <code>Java</code>，并让 <code>Java</code> 保存 <code>Lua function</code> 的引用；</li>\n<li>可以从 <code>Java</code> 调用 <code>Lua</code> 的全局函数，或者调用引用指向的 <code>Lua function</code>。</li>\n</ul>\n<h4 id=\"LuaJ核心原理：\"><a href=\"#LuaJ核心原理：\" class=\"headerlink\" title=\"LuaJ核心原理：\"></a><strong>LuaJ核心原理：</strong></h4><p><code>LuaJ</code>的核心其实就是：从<code>Lua</code>调用<code>Java</code>和从<code>Java</code>调用<code>Lua</code>。</p>\n<p>经过上述对比，最终我还是选择纯Java实现，且仍然有人维护更新的<code>LuaJ</code>解析器，而且它也支持<code>LuaJava API</code>。</p>\n<hr/>\n<h3 id=\"LuaJ的下载使用：\"><a href=\"#LuaJ的下载使用：\" class=\"headerlink\" title=\"LuaJ的下载使用：\"></a><strong>LuaJ的下载使用：</strong></h3><h4 id=\"下载：\"><a href=\"#下载：\" class=\"headerlink\" title=\"下载：\"></a><strong>下载：</strong></h4><ul>\n<li>方式一：直接到<a href=\"http://www.luaj.org/luaj/3.0/README.html\" target=\"_blank\" rel=\"external noopener noreferrer\">LuaJ官网</a>下载，选择相对较新的版本<a href=\"https://nchc.dl.sourceforge.net/project/luaj/luaj-3.0/3.0.1/luaj-3.0.1.zip\" target=\"_blank\" rel=\"external noopener noreferrer\">LuaJ 3.0.1</a>，将解压后的<code>lib</code>目录下的<code>luaj-jse-3.0.1.jar</code>导入项目中使用。</li>\n<li><p>方式二：当然加入是使用Maven来管理项目的就不用这么麻烦了，直接在<code>pom.xml</code>中添加库依赖内容：</p>\n<figure class=\"highlight xml\"><table><tbody><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.luaj<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>luaj-jse<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.0.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div></pre></td></tr></tbody></table></figure>\n</li>\n<li><p>方式三：直接下载<a href=\"https://sourceforge.net/projects/luaj/\" target=\"_blank\" rel=\"external noopener noreferrer\">LuaJ源码</a>，添加到项目中，这种方法可以进行Debug，将源码中<code>src</code>目录下的<code>core</code>和<code>jse</code>目录中的代码复制到项目中。</p>\n</li>\n</ul>\n<hr/>\n<h3 id=\"实战：\"><a href=\"#实战：\" class=\"headerlink\" title=\"实战：\"></a><strong>实战：</strong></h3><h4 id=\"在Java中调用Lua：\"><a href=\"#在Java中调用Lua：\" class=\"headerlink\" title=\"在Java中调用Lua：\"></a><strong>在Java中调用Lua：</strong></h4><ul>\n<li><p>直接把lua代码当做String字符串内嵌到Java代码中：</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">String luaStr = <span class=\"string\">&#34;print &#39;hello,world!&#39;&#34;</span>;</div><div class=\"line\">Globals globals = JsePlatform.standardGlobals();</div><div class=\"line\">LuaValue chunk = globals.load(luaStr);</div><div class=\"line\">chunk.call();</div></pre></td></tr></tbody></table></figure>\n<p>此处luaStr中只能放一个lua的方法，或者是一句lua语句，不可以出现多个function放在同一个String中使用此方法来调用。</p>\n</li>\n<li><p>将Lua代码都写在<code>.lua</code>脚本文件中，在Java中调用Lua脚本文件，指定要执行的<code>lua function</code>，可以直接如下：</p>\n<ul>\n<li><p>创建一个<code>login.lua</code>脚本，内容如下：</p>\n <figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">   <span class=\"comment\">--无参函数</span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span></span></div><div class=\"line\">      <span class=\"built_in\">print</span> <span class=\"string\">&#39;hello&#39;</span></div><div class=\"line\">   <span class=\"keyword\">end</span></div><div class=\"line\"><span class=\"comment\">--带参函数</span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span><span class=\"params\">(str)</span></span></div><div class=\"line\">      <span class=\"built_in\">print</span>(<span class=\"string\">&#39;data from java is:&#39;</span>..str)</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">&#39;haha&#39;</span></div><div class=\"line\">   <span class=\"keyword\">end</span></div></pre></td></tr></tbody></table></figure>\n</li>\n<li><p>Java先载入<code>login.lua</code>脚本并编译，然后再获取指定名称的函数，无参的直接使用<code>call()</code>方法调用，带参的需要通过<code>invoke(LuaValue[])</code>传入参数表：</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">   String luaPath = <span class=\"string\">&#34;res/lua/login.lua&#34;</span>;\t<span class=\"comment\">//lua脚本文件所在路径</span></div><div class=\"line\">   Globals globals = JsePlatform.standardGlobals();</div><div class=\"line\"><span class=\"comment\">//加载脚本文件login.lua，并编译</span></div><div class=\"line\">globals.loadfile(luaPath).call();</div><div class=\"line\"><span class=\"comment\">//获取无参函数hello</span></div><div class=\"line\">LuaValue func = globals.get(LuaValue.valueOf(<span class=\"string\">&#34;hello&#34;</span>));</div><div class=\"line\"><span class=\"comment\">//执行hello方法</span></div><div class=\"line\">func.call();</div><div class=\"line\"><span class=\"comment\">//获取带参函数test</span></div><div class=\"line\">LuaValue func1 = globals.get(LuaValue.valueOf(<span class=\"string\">&#34;test&#34;</span>));</div><div class=\"line\"><span class=\"comment\">//执行test方法,传入String类型的参数参数</span></div><div class=\"line\">String data = func1.call(LuaValue.valueOf(<span class=\"string\">&#34;I&#39;am from Java!&#34;</span>)).toString();</div><div class=\"line\">   <span class=\"comment\">//打印lua函数回传的数据</span></div><div class=\"line\">   Logger.info(<span class=\"string\">&#34;data return from lua is:&#34;</span>+data);</div></pre></td></tr></tbody></table></figure>\n</li>\n<li><p>运行结果如下：</p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">hello</div><div class=\"line\">data from java is:I&#39;am from Java!</div><div class=\"line\">四月 07, 2017 5:31:25 下午 com.tw.login.tools.Logger info</div><div class=\"line\">信息: lua return data：haha</div></pre></td></tr></tbody></table></figure>\n</li>\n</ul>\n</li>\n<li><p>这里需要理解<code>LuaValue</code>和<code>Globals</code>的含义：<br/><code>Globals</code>继承<code>LuaValue</code>对象，<code>LuaValue</code>对象用来表示在Lua语言的基本数据类型，比如:<code>Nil</code>,<code>Number</code>,<code>String</code>,<code>Table</code>,<code>userdata</code>,<code>Function</code>等。<strong>尤其要注意<code>LuaValue</code>也表示了Lua语言中的函数</strong>。所以,对于Lua语言中的函数操作都是通过<code>LuaValue</code>来实现的。</p>\n</li>\n</ul>\n<h4 id=\"在Lua中调用Java\"><a href=\"#在Lua中调用Java\" class=\"headerlink\" title=\"在Lua中调用Java:\"></a><strong>在Lua中调用Java:</strong></h4><ul>\n<li><p><strong>创建Java类：</strong><br/>假设在Java中有这样的一个日志类<code>Logger.java</code>：</p>\n  <figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.tw.login.tools;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.logging.Log;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.logging.LogFactory;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Logger</span> </span>{</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String TAG = <span class=\"string\">&#34;Logger&#34;</span>;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Log logger = LogFactory.getLog(Logger.class);;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Logger</span><span class=\"params\">()</span></span>{</div><div class=\"line\">        <span class=\"keyword\">if</span>(logger == <span class=\"keyword\">null</span>){</div><div class=\"line\">            logger = LogFactory.getLog(Logger.class);</div><div class=\"line\">        }</div><div class=\"line\">    }</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">TestLogger</span><span class=\"params\">(String str)</span> </span>{</div><div class=\"line\">        logger.info(str);</div><div class=\"line\">    }</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">info</span><span class=\"params\">(String content)</span></span>{</div><div class=\"line\">        logger.info(content);</div><div class=\"line\">    }</div><div class=\"line\">}</div></pre></td></tr></tbody></table></figure>\n</li>\n<li><p><strong>创建一个lua脚本：</strong><br/>命名为<code>test.lua</code>，存放在当前项目根目录下的<code>res/lua</code>目录下，详细代码如下：</p>\n<ul>\n<li><p>在Lua中直接创建Java类的实例的方法：</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">--使用luajava创建java类的实例（对象）</span></div><div class=\"line\"><span class=\"keyword\">local</span> logger = luajava.newInstance(<span class=\"string\">&#34;com.tw.login.tools.Logger&#34;</span>)</div><div class=\"line\"><span class=\"comment\">--调用对象方法</span></div><div class=\"line\">logger:TestLogger(<span class=\"string\">&#34;Test call java in lua0&#34;</span>)</div></pre></td></tr></tbody></table></figure>\n</li>\n<li><p>在Lua中绑定Java类：</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">--使用luajava绑定一个java类</span></div><div class=\"line\"><span class=\"keyword\">local</span> logger_method = luajava.bindClass(<span class=\"string\">&#34;com.tw.login.tools.Logger&#34;</span>);</div><div class=\"line\"><span class=\"comment\">--调用类的静态方法/变量</span></div><div class=\"line\">logger_method:info(<span class=\"string\">&#34;test call static java function in lua&#34;</span>)</div><div class=\"line\"><span class=\"built_in\">print</span>(logger_method.TAG)</div><div class=\"line\"><span class=\"comment\">-- 使用绑定类创建类的实例（对象）</span></div><div class=\"line\"><span class=\"keyword\">local</span> logger_instance = luajava.new(logger_method)</div><div class=\"line\"><span class=\"comment\">-- 调用对象方法</span></div><div class=\"line\">logger_instance:TestLogger(<span class=\"string\">&#34;Test call java in lua1&#34;</span>)</div></pre></td></tr></tbody></table></figure>\n</li>\n</ul>\n<p>当前我们只是实现了Lua中调用Java的逻辑，但是作为一种脚本语言，Lua没办法脱离高级语言而独立运行起来，所以要测试Lua是否能正常实现对Java的调用，还是需要在Java中运行此Lua脚本，参考之前在Java调用<code>.lua</code>脚本文件的方法，在Java中的main入口函数中添加一下内容：</p>\n  <figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Globals globals = JsePlatform.standardGlobals();</div><div class=\"line\">globals.loadfile(<span class=\"string\">&#34;res/lua/test.lua&#34;</span>).call();</div></pre></td></tr></tbody></table></figure>\n</li>\n<li><p><strong>结果输出日志：</strong></p>\n  <figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">四月 07, 2017 2:17:04 下午 com.tw.login.tools.Logger TestLogger</div><div class=\"line\">信息: Test call java in lua0</div><div class=\"line\">四月 07, 2017 2:17:04 下午 com.tw.login.tools.Logger info</div><div class=\"line\">信息: test call static java function in lua</div><div class=\"line\">Logger</div><div class=\"line\">四月 07, 2017 2:17:04 下午 com.tw.login.tools.Logger TestLogger</div><div class=\"line\">信息: Test call java in lua1</div></pre></td></tr></tbody></table></figure>\n</li>\n</ul>\n<hr/>\n<h3 id=\"其他：\"><a href=\"#其他：\" class=\"headerlink\" title=\"其他：\"></a><strong>其他：</strong></h3><ul>\n<li><code>LuaJ</code>直到代码运行结束前都会阻塞线程，这时候开启一个新的线程专门运行即可，但是<code>LuaJ</code>运行以后无法中断（即使你中断了它所在的线程），比如你的.lua中有一个<code>while true do end</code>循环，那么你将永远无法中断它，除非退出你的整个Java应用。</li>\n<li>在<code>LuaJava</code>上，发现调用了<code>L.close()</code>方法也是不能中断执行。</li>\n</ul>\n<hr/>\n<h3 id=\"参考：\"><a href=\"#参考：\" class=\"headerlink\" title=\"参考：\"></a><strong>参考：</strong></h3><ul>\n<li><a href=\"http://yangzb.iteye.com/blog/560299\" target=\"_blank\" rel=\"external noopener noreferrer\">在Java中使用Lua脚本语言</a></li>\n<li><a href=\"http://www.360doc.com/content/15/0117/17/9200790_441588770.shtml\" target=\"_blank\" rel=\"external noopener noreferrer\">关于在java上使用lua脚本</a></li>\n<li><a href=\"http://blog.csdn.net/mislead/article/details/51657477\" target=\"_blank\" rel=\"external noopener noreferrer\">luaj——java程序中运行lua</a></li>\n<li><a href=\"http://www.cnblogs.com/mingwuyun/p/5924911.html\" target=\"_blank\" rel=\"external noopener noreferrer\">LuaJ 调用java方法性能研究</a></li>\n<li><a href=\"http://www.cnblogs.com/mokey/p/4443561.html\" target=\"_blank\" rel=\"external noopener noreferrer\">lua调用java java调用lua</a></li>\n<li><a href=\"http://blog.csdn.net/mislead/article/details/51657493\" target=\"_blank\" rel=\"external noopener noreferrer\">luaj-lua中实例化JavaClass</a></li>\n</ul>\n<hr/>\n<ul>\n<li><a href=\"http://hovertree.com/h/bjaf/wcxci250.htm\" target=\"_blank\" rel=\"external noopener noreferrer\">在JAVA中使用LUA脚本记,javaj调用lua脚本的函数</a></li>\n<li><a href=\"http://blog.csdn.net/sunning9001/article/details/50471740\" target=\"_blank\" rel=\"external noopener noreferrer\">luaj:初探</a></li>\n</ul>","text":"Lua是一种小巧的脚本语言，如今常用于游戏开发，特别是客户端开发，基本上都是基于Lua来实现热更新，在Unity开发中更有uLua（最新版改名为toLua）这样成熟的热更框架。这里我设想用Lua+Java来实现服务器的热更，不成熟的想法，这里想尝试一下Lua和Java如何互相调用...","link":"","photos":[],"count_time":{"symbolsCount":"4.8k","symbolsTime":"4 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%8F%92%E4%BB%B6%E9%80%89%E6%8B%A9%EF%BC%9A\"><span class=\"toc-text\">插件选择：</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#LuaJava%E7%AE%80%E4%BB%8B%EF%BC%9A\"><span class=\"toc-text\">LuaJava简介：</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#LuaJ%E7%AE%80%E4%BB%8B%EF%BC%9A\"><span class=\"toc-text\">LuaJ简介：</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#LuaJ%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%EF%BC%9A\"><span class=\"toc-text\">LuaJ核心原理：</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#LuaJ%E7%9A%84%E4%B8%8B%E8%BD%BD%E4%BD%BF%E7%94%A8%EF%BC%9A\"><span class=\"toc-text\">LuaJ的下载使用：</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%B8%8B%E8%BD%BD%EF%BC%9A\"><span class=\"toc-text\">下载：</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E6%88%98%EF%BC%9A\"><span class=\"toc-text\">实战：</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%9C%A8Java%E4%B8%AD%E8%B0%83%E7%94%A8Lua%EF%BC%9A\"><span class=\"toc-text\">在Java中调用Lua：</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%9C%A8Lua%E4%B8%AD%E8%B0%83%E7%94%A8Java\"><span class=\"toc-text\">在Lua中调用Java:</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%85%B6%E4%BB%96%EF%BC%9A\"><span class=\"toc-text\">其他：</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8F%82%E8%80%83%EF%BC%9A\"><span class=\"toc-text\">参考：</span></a></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Lua基础设置","uid":"e69d7ef5e3af184740f414c62401bd19","slug":"zl/2016-01-01-701_Lua基础设置","date":"2024-04-03T03:47:35.934Z","updated":"2024-04-03T03:47:35.937Z","comments":true,"path":"api/articles/zl/2016-01-01-701_Lua基础设置.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"#Lua Lua 是一种轻量小巧的脚本语言，其设计目的是为了嵌入应用程序中，从而为应用程序提供灵活的扩展和定制功能。详情参阅Lua 教程 在LIMS系统中，无需进行lua环境的安装搭建，只需在编辑器(win系统推荐notepad++)中写好再粘贴到网页中即可，甚至可以直接在网页中...","link":"","photos":[],"count_time":{"symbolsCount":"1.8k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"redis学习5 lua脚本 · 老白开发","uid":"348337c0a12434a59d910b67816fcdda","slug":"zl/2016-01-01-69_redis学习5 lua脚本 · 老白开发","date":"2024-04-03T03:47:35.933Z","updated":"2024-04-03T03:47:35.933Z","comments":true,"path":"api/articles/zl/2016-01-01-69_redis学习5 lua脚本 · 老白开发.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"redis内置的 Lua 解释器，可以使用lua对redis进行操作。使用脚本有以下好处: 减少网络开销:批量执行redis命令。 原子性操作:Redis也保证脚本会以原子性的方式执行:当某个脚本正在运行的时候，不会有其他脚本或Redis 命令被执行。 复用：客户端发送的脚本会永...","link":"","photos":[],"count_time":{"symbolsCount":"1.1k","symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}