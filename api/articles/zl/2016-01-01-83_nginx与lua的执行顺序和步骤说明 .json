{"title":"nginx与lua的执行顺序和步骤说明","uid":"36864ebe1c02cd87187d51d88aaf35e2","slug":"zl/2016-01-01-83_nginx与lua的执行顺序和步骤说明 ","date":"2024-04-03T03:47:36.092Z","updated":"2024-04-03T03:47:36.092Z","comments":true,"path":"api/articles/zl/2016-01-01-83_nginx与lua的执行顺序和步骤说明 .json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<h2 id=\"一-nginx执行步骤\">一. nginx执行步骤</h2>\n<p>nginx在处理每一个用户请求时，都是按照若干个不同的阶段依次处理的，与配置文件上的顺序没有关系，详细内容可以阅读《深入理解nginx:模块开发与架构解析》这本书，这里只做简单介绍；</p>\n<h4 id=\"1-post-read\">1. post-read</h4>\n<p>读取请求内容阶段，nginx读取并解析完请求头之后就立即开始运行；</p>\n<h4 id=\"2-server-rewrite\">2. server-rewrite</h4>\n<p>server请求地址重写阶段；</p>\n<h4 id=\"3-find-config\">3. find-config</h4>\n<p>配置查找阶段，用来完成当前请求与location配重块之间的配对工作；</p>\n<h4 id=\"4-rewrite\">4. rewrite</h4>\n<p>location请求地址重写阶段，当ngx_rewrite指令用于location中，就是再这个阶段运行的；</p>\n<h4 id=\"5-post-rewrite\">5. post-rewrite</h4>\n<p>请求地址重写提交阶段，当nginx完成rewrite阶段所要求的内部跳转动作，如果rewrite阶段有这个要求的话；</p>\n<h4 id=\"6-preaccess\">6. preaccess</h4>\n<p>访问权限检查准备阶段，ngx_limit_req和ngx_limit_zone在这个阶段运行，ngx_limit_req可以控制请求的访问频率，ngx_limit_zone可以控制访问的并发度；</p>\n<h4 id=\"7-access\">7. access</h4>\n<p>权限检查阶段，ngx_access在这个阶段运行，配置指令多是执行访问控制相关的任务，如检查用户的访问权限，检查用户的来源IP是否合法；</p>\n<h4 id=\"8-post-access\">8. post-access</h4>\n<p>访问权限检查提交阶段；</p>\n<h4 id=\"9-try-files\">9. try-files</h4>\n<p>配置项try_files处理阶段；</p>\n<h4 id=\"10-content\">10. content</h4>\n<p>内容产生阶段，是所有请求处理阶段中最为重要的阶段，因为这个阶段的指令通常是用来生成HTTP响应内容的；</p>\n<h4 id=\"11-log\">11. log</h4>\n<p>日志模块处理阶段；</p>\n<h2 id=\"二-ngx_lua运行指令\">二. ngx_lua运行指令</h2>\n<p>ngx_lua属于nginx的一部分，它的执行指令都包含在nginx的11个步骤之中了，不过ngx_lua并不是所有阶段都会运行的；</p>\n<h4 id=\"1-init_by_luainit_by_lua_file\">1. <code class=\"highlighter-rouge\">init_by_lua</code>、<code class=\"highlighter-rouge\">init_by_lua_file</code></h4>\n<p>语法：init_by_lua <lua-script-str></lua-script-str></p>\n<p>语境：http</p>\n<p>阶段：loading-config</p>\n<p>当 nginx master 进程在加载 nginx 配置文件时运行指定的 lua 脚本，通常用来注册lua的全局变量或在服务器启动时预加载lua模块：</p>\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>init_by_lua &#39;cjson = require &#34;cjson&#34;&#39;;\n<p>server &#123;<br />\nlocation = /api &#123;<br />\ncontent_by_lua '<br />\nngx.say(cjson.encode(&#123;dog = 5, cat = 6&#125;))<br />\n'<br />\n&#125;<br />\n&#125;<br />\n</code></pre></div></div></p>\n<p>或者初始化 lua_shared_dict 共享数据：</p>\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>lua_shared_dict dogs 1m;\ninit_by_lua &#39;\n    local dogs = ngx.shared.dogs;\n    dogs:set(&#34;Tom&#34;, 50)\n&#39;\nserver &#123;\n    location = /api &#123;\n        content_by_lua &#39;\n            local dogs = ngx.shared.dogs;\n            ngx.say(dogs:get(&#34;Tom&#34;))\n        &#39;\n    &#125;\n&#125;\n</code></pre></div></div>\n<p>但是，lua_shared_dict 的内容不会在 nginx reload 时被清除。所以如果你不想在你的 init_by_lua 中重新初始化共享数据，那么你需要在你的共享内存中设置一个标志位并在 init_by_lua 中进行检查。</p>\n<p>因为这个阶段的lua代码是在nginx forks出任何worker进程之前运行，数据和代码的加载将享受由操作系统提供的copy-on-write的特性，从而节约了大量的内存。</p>\n<p>不要在这个阶段初始化你的私有lua全局变量，因为使用lua全局变量会照成性能损失，并且可能导致全局命名空间被污染。\n这个阶段只支持一些小的 LUA Nginx API 设置：ngx.log 和 print、ngx.shared.DICT；</p>\n<h4 id=\"2-init_worker_by_luainit_worker_by_lua_file\">2. <code class=\"highlighter-rouge\">init_worker_by_lua</code>、<code class=\"highlighter-rouge\">init_worker_by_lua_file</code></h4>\n<p>语法：init_worker_by_lua <lua-script-str></lua-script-str></p>\n<p>语境：http</p>\n<p>阶段：starting-worker</p>\n<p>在每个nginx worker进程启动时调用指定的lua代码。如果master 进程不允许，则只会在init_by_lua之后调用。</p>\n<p>这个hook通常用来创建每个工作进程的计时器(通过lua的ngx.timer API)，进行后端健康检查或者其它日常工作：</p>\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>init_worker_by_lua:\n    local delay = 3  -- in seconds\n    local new_timer = ngx.timer.at\n    local log = ngx.log\n    local ERR = ngx.ERR\n    local check\n    check = function(premature)\n        if not premature then\n            -- do the health check other routine work\n            local ok, err = new_timer(delay, check)\n            if not ok then\n                log(ERR, &#34;failed to create timer: &#34;, err)\n                return\n            end\n        end\n    end\n    local ok, err = new_timer(delay, check)\n    if not ok then\n        log(ERR, &#34;failed to create timer: &#34;, err)\n    end\n</code></pre></div></div>\n<h4 id=\"3-set_by_luaset_by_lua_file\">3. <code class=\"highlighter-rouge\">set_by_lua</code>、<code class=\"highlighter-rouge\">set_by_lua_file</code></h4>\n<p>语法：set_by_lua $res <lua-script-str> [$arg1 $arg2 …]</lua-script-str></p>\n<p>语境：server、server if、location、location if</p>\n<p>阶段：rewrite</p>\n<p>传入参数到指定的lua脚本代码中执行，并得到返回值到res中。<lua-script-str>中的代码可以使从ngx.arg表中取得输入参数(顺序索引从1开始)。</lua-script-str></p>\n<p>这个指令是为了执行短期、快速运行的代码因为运行过程中nginx的事件处理循环是处于阻塞状态的。耗费时间的代码应该被避免。</p>\n<p>禁止在这个阶段使用下面的API：</p>\n<ol>\n  <li>output api（ngx.say和ngx.send_headers）；</li>\n  <li>control api（ngx.exit）；</li>\n  <li>subrequest api（ngx.location.capture和ngx.location.capture_multi）；</li>\n  <li>cosocket api（ngx.socket.tcp和ngx.req.socket）；</li>\n  <li>sleep api（ngx.sleep）</li>\n</ol>\n<p>此外注意，这个指令只能一次写出一个nginx变量，但是使用ngx.var接口可以解决这个问题：</p>\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>location /foo &#123;\n    set $diff &#39;&#39;;\n    set_by_lua $num &#39;\n        local a = 32\n        local b = 56\n        ngx.var.diff = a - b; --写入$diff中\n        return a + b;  --返回到$sum中\n    &#39;\n    echo &#34;sum = $sum, diff = $diff&#34;;\n&#125;\n</code></pre></div></div>\n<p>这个指令可以自由的使用HttpRewriteModule、HttpSetMiscModule和HttpArrayVarModule所有的方法。所有的这些指令都将按他们出现在配置文件中的顺序进行执行。</p>\n<h4 id=\"4-rewrite_by_luarewrite_by_lua_file\">4. <code class=\"highlighter-rouge\">rewrite_by_lua</code>、<code class=\"highlighter-rouge\">rewrite_by_lua_file</code></h4>\n<p>语法：rewrite_by_lua <lua-script-str></lua-script-str></p>\n<p>语境：http、server、location、location if</p>\n<p>阶段：rewrite tail</p>\n<p>作为rewrite阶段的处理，为每个请求执行指定的lua代码。注意这个处理是在标准HtpRewriteModule之后进行的：</p>\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>location /foo &#123;\n    set $a 12;\n    set $b &#34;&#34;;\n    rewrite_by_lua &#39;ngx.var.b = tonumber(ngx.var.a) + 1&#39;;\n    echo &#34;res = $b&#34;;\n&#125;\n</code></pre></div></div>\n<p>如果这样的话将不会按预期进行工作：</p>\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>location /foo &#123;\n    set $a 12;\n    set $b &#39;&#39;;\n    rewrite_by_lua &#39;ngx.var.b = tonumber(ngx.var.a) + 1&#39;;\n    if($b = &#39;13&#39;) &#123;\n        rewrite ^ /bar redirect;\n        break;\n    &#125;\n    echo &#34;res = $b&#34;\n&#125;\n</code></pre></div></div>\n<p>因为if会在rewrite_by_lua之前运行，所以判断将不成立。正确的写法应该是这样：</p>\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>location /foo &#123;\n    set $a 12;\n    set $b &#39;&#39;;\n    rewrite_by_lua &#39;\n        ngx.var.b = tonumber(ngx.var.a) + 1\n        if tonumber(ngx.var.b) == 13 then\n            return ngx.redirect(&#34;/bar&#34;);\n        end\n    &#39;\n    echo &#34;res = $b&#34;;\n&#125;\n</code></pre></div></div>\n<p>注意ngx_eval模块可以近似于使用rewite_by_lua，例如：</p>\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>location / &#123;\n    eval $res &#123;\n        proxy_pass http://foo,com/check-spam;\n    &#125;\n    if($res = &#39;spam&#39;) &#123;\n        rewrite ^ /terms-of-use.html redirect;\n    &#125;\n    fastcgi_pass .......\n&#125;\n</code></pre></div></div>\n<p>可以被ngx_lua这样实现：</p>\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>location = /check-spam &#123;\n    internal;\n    proxy_pass http://foo.com/check-spam;\n&#125;\nlocation / &#123;\n    rewrite_by_lua &#39;\n        local res = ngx.location.capture(&#34;/check-spam&#34;)\n        if res.body == &#34;spam&#34; then\n            return ngx.redirect(&#34;terms-of-use.html&#34;)\n    &#39;\n    fastcgi_pass .......\n&#125;\n</code></pre></div></div>\n<p>和其它的rewrite阶段的处理程序一样，rewrite_by_lua 在 subrequests 中一样可以运行。</p>\n<p>请注意在 rewrite_by_lua 内调用 ngx.exit(ngx.OK)，nginx 的请求处理流程将继续进行content阶段的处理。从rewrite_by_lua终止当前的请求，要调用 ngx.exit 返回 status 大于 200 并小于 300 的成功状态或ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR) 的失败状态。</p>\n<p>如果 HttpRewriteModule 的重写指令被用来改写URI和重定向，那么任何 rewrite_by_lua 和 rewrite_by_lua_file 的代码将不会执行，例如：</p>\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>location /foo &#123;\n    rewrite ^ /bar;\n    rewrite_by_lua &#39;ngx.exit(503)&#39;\n&#125;\nlocation /bar &#123;\n    .......\n&#125;\n</code></pre></div></div>\n<p>在这个例子中 ngx.exit(503) 将永远不会被执行，因为 rewrite 修改了 location，请求已经跳入其它 location 中了。</p>\n<h4 id=\"5-access_by_luaaccess_by_lua_file\">5. <code class=\"highlighter-rouge\">access_by_lua</code>，<code class=\"highlighter-rouge\">access_by_lua_file</code></h4>\n<p>语法：access_by_lua <lua-script-str></lua-script-str></p>\n<p>语境：http,server,location,location if</p>\n<p>阶段：access tail</p>\n<p>为每个请求在访问阶段的调用lua脚本进行处理。主要用于访问控制，能收集到大部分的变量。</p>\n<p>注意 access_by_lua 和 rewrite_by_lua 类似是在标准 HttpAccessModule 之后才会运行，看一个例子：</p>\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>location / &#123;\n    deny 192.168.1.1;\n    allow 192.168.1.0/24;\n    allow 10.1.1.0/16;\n    deny all;\n    access_by_lua &#39;\n        local res = ngx.location.capture(&#34;/mysql&#34;, &#123;...&#125;)\n        ....\n    &#39;\n&#125;\n</code></pre></div></div>\n<p>如果 client ip 在黑名单之内，那么这次连接会在进入 access_by_lua 调用的 mysql 之前被丢弃掉。</p>\n<p>ngx_auth_request 模块和 access_by_lua 的用法类似：</p>\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>location / &#123;\n    auth_request /auth;\n&#125;\n</code></pre></div></div>\n<p>可以用ngx_lua这么实现：</p>\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>location / &#123;\n    access_by_lua &#39;\n        local res = ngx.location.capture(&#34;/auth&#34;)\n        if res.status == ngx.HTTP_OK then\n            return\n        end\n        if res.status == ngx.HTTP_FORBIDDEN then\n            ngx.exit(res.status)\n        end\n        ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)\n    &#39;\n&#125;\n</code></pre></div></div>\n<p>和其它 access 阶段的模块一样，access_by_lua 不会在 subrequest 中运行。</p>\n<p>请注意在 access_by_lua 内调用 ngx.exit(ngx.OK)，nginx 的请求处理流程将继续进行后面阶段的处理。从 rewrite_by_lua 终止当前的请求，要调用 ngx.exit 返回 status 大于 200 并小于 300 的成功状态或ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR) 的失败状态。</p>\n<h4 id=\"6-content_by_luacontent_by_lua_file\">6. <code class=\"highlighter-rouge\">content_by_lua</code>，<code class=\"highlighter-rouge\">content_by_lua_file</code></h4>\n<p>语法：content_by_lua <lua-script-str></lua-script-str></p>\n<p>语境：location，location if</p>\n<p>阶段：content</p>\n<p>作为 “content handler” 为每个请求执行lua代码，为请求者输出响应内容。</p>\n<p>不要将它和其它的内容处理指令在同一个 location 内使用如 proxy_pass。</p>\n<h4 id=\"7-header_filter_by_luaheader_filter_by_lua_file\">7. <code class=\"highlighter-rouge\">header_filter_by_lua</code>，<code class=\"highlighter-rouge\">header_filter_by_lua_file</code></h4>\n<p>语法：header_filter_by_lua <lua-script-str></lua-script-str></p>\n<p>语境：http，server，location，location if</p>\n<p>阶段：output-header-filter</p>\n<p>一般用来设置 cookie 和 headers，在该阶段不能使用如下几个API：</p>\n<ol>\n  <li>output API（ngx.say和ngx.send_headers）</li>\n  <li>control API（ngx.exit和ngx.exec）</li>\n  <li>subrequest API(ngx.location.capture和ngx.location.capture_multi)</li>\n  <li>cosocket API（ngx.socket.tcp和ngx.req.socket）</li>\n</ol>\n<p>有一个例子是 在你的 lua header filter 里添加一个响应头标头：</p>\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>location / &#123;\n    proxy_pass http://mybackend;\n    header_filter_by_lua &#39;ngx.header.Foo = &#34;blah&#34;&#39;;\n&#125;\n</code></pre></div></div>\n<h4 id=\"8-body_filter_by_luabody_filter_by_lua_file\">8. <code class=\"highlighter-rouge\">body_filter_by_lua</code>，<code class=\"highlighter-rouge\">body_filter_by_lua_file</code></h4>\n<p>语法：body_filter_by_lua <lua-script-str></lua-script-str></p>\n<p>语境：http，server，location，location if</p>\n<p>阶段：output-body-filter</p>\n<p>输入的数据时通过 ngx.arg[1] (作为lua的string值)，通过 ngx.arg[2] 这个 bool 类型表示响应数据流的结尾。</p>\n<p>基于这个原因，‘eof’ 只是 nginx 的链接缓冲区的 last_buf（对主requests）或 last_in_chain（对subrequests）的标记。</p>\n<p>运行以下命令可以立即终止运行接下来的lua代码：</p>\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>return ngx.ERROR\n</code></pre></div></div>\n<p>这会将响应体截断导致无效的响应。lua 代码可以通过修改 ngx.arg[1] 的内容将数据传输到下游的 nginx output body filter 阶段的其它模块中去。例如，将 response body 中的小写字母进行反转，我们可以这么写：</p>\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>location / &#123;\n    proxy_pass http://mybackend;\n    body_filter_by_lua &#39;ngx.arg[1] = string.upper(ngx.arg[1])&#39;\n&#125;\n</code></pre></div></div>\n<p>当将 ngx.arg[1] 设置为 nil 或者一个空的 lua string 时，下游的模块将不会收到数据了。</p>\n<p>同样可以通过修改 ngx.arg[2] 来设置新的”eof“标记，例如：</p>\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>location /t &#123;\n    echo hello world;\n    echo hiya globe;\n    body_filter_by_lua &#39;\n        local chunk = ngx.arg[1]\n        if string.match(chunk, &#34;hello&#34;) then\n            ngx.arg[2] = true --new eof\n            return\n        end\n        --just throw away any remaining chunk data\n        ngx.arg[1] = nil\n    &#39;\n&#125;\n</code></pre></div></div>\n<p>那么GET /t的请求只会回复：hello world</p>\n<p>这是因为，当 body filter 看到了一块包含 ”hello“ 的字符块后立即将 ”eof“ 标记设置为了 true，从而导致响应被截断了但仍然是有效的回复。</p>\n<p>当 lua 代码中改变了响应体的长度时，应该要清除 content-length 响应头部的值，例如：</p>\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>location /foo &#123;\n    header_filter_by_lua &#39;ngx.header.content_length = nil&#39;\n    body_filter_by_lua &#39;ngx.arg[1] = string.len(ngx.arg[1]) .. &#34;\\n&#34;&#39;\n&#125;\n</code></pre></div></div>\n<p>在该阶段不能使用如下几个API:</p>\n<ol>\n  <li>output API（ngx.say和ngx.send_headers）</li>\n  <li>control API（ngx.exit和ngx.exec）</li>\n  <li>subrequest API(ngx.location.capture和ngx.location.capture_multi)</li>\n  <li>cosocket API（ngx.socket.tcp和ngx.req.socket）</li>\n</ol>\n<p>nginx output filters 可能会在一次请求中被多次调用，因为响应体可能是以 chunks 方式传输的。因此这个指令一般会在一次请求中被调用多次。</p>\n<h4 id=\"9-log_by_lualog_by_lua_file\">9. <code class=\"highlighter-rouge\">log_by_lua</code>，<code class=\"highlighter-rouge\">log_by_lua_file</code></h4>\n<p>语法：log_by_lua <lua-script-str></lua-script-str></p>\n<p>语境：http，server，location，location if</p>\n<p>阶段：log</p>\n<p>在log阶段调用指定的lua脚本，并不会替换access log，而是在那之后进行调用。</p>\n<p>在该阶段不能使用如下几个API:</p>\n<ol>\n  <li>output API（ngx.say和ngx.send_headers）</li>\n  <li>control API（ngx.exit和ngx.exec）</li>\n  <li>subrequest API(ngx.location.capture和ngx.location.capture_multi)</li>\n  <li>cosocket API（ngx.socket.tcp和ngx.req.socket）</li>\n</ol>\n<p>一个收集upstream_response_time的平均数据的例子：</p>\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>lua_shared_dict log_dict 5M\n<p>server&#123;<br />\nlocation / &#123;<br />\nproxy_pass http;//mybackend<br />\nlog_by_lua '<br />\nlocal log_dict = ngx.shared.log_dict<br />\nlocal upstream_time = tonumber(ngx.var.upstream_response_time)<br />\nlocal sum = log_dict:get(&quot;upstream_time-sum&quot;) or 0<br />\nsum = sum + upstream_time<br />\nlog_dict:set(&quot;upsteam_time-sum&quot;, sum)<br />\nlocal newval, err = log_dict:incr(&quot;upstream_time-nb&quot;, 1)<br />\nif not newval and err == &quot;not found&quot; then<br />\nlog_dict:add(&quot;upstream_time-nb&quot;, 0)<br />\nlog_dict:incr(&quot;upstream_time-nb&quot;, 1)<br />\nend<br />\n'<br />\n&#125;<br />\nlocation = /status &#123;<br />\ncontent_by_lua '<br />\nlocal log_dict = ngx.shared.log_dict<br />\nlocal sum = log_dict:get(&quot;upstream_time-sum&quot;)<br />\nlocal nb = log_dict:get(&quot;upstream_time-nb&quot;)</p>\n<pre><code>        if nb and sum then\n            ngx.say(&amp;#34;average upstream response time:  &amp;#34;, sum/nb, &amp;#34; (&amp;#34;, nb, &amp;#34; reqs)&amp;#34;)\n        else\n            ngx.say(&amp;#34;no data yet&amp;#34;)\n        end\n    &amp;#39;\n&#125;\n</code></pre>\n<p>}<br />\n</code></pre></div></div></p>\n<pre><code>            &lt;hr style=&quot;visibility: hidden;&quot;/&gt;\n\n            \n\n\n            \n            \n            \n            &lt;link rel=&quot;stylesheet&quot; href=&quot;https://unpkg.com/gitalk/dist/gitalk.css&quot;/&gt;\n            &lt;script src=&quot;https://unpkg.com/gitalk@latest/dist/gitalk.min.js&quot;&gt;&lt;/script&gt;\n            &lt;div id=&quot;gitalk-container&quot;&gt;&lt;/div&gt;\n            \n            \n            &lt;script src=&quot;/js/md5.min.js&quot;&gt;&lt;/script&gt;\n            &lt;script type=&quot;text/javascript&quot;&gt;\n                var gitalk = new Gitalk(&#123;\n                clientID: '022af1e8215850c1b7fc',\n                clientSecret: '32ffe00cc1080af02bd2ebdce078ef81030b4d3f',\n                repo: 'longniao.github.io',\n                owner: 'longniao',\n                admin: ['longniao'],\n                distractionFreeMode: true,\n                id: md5(location.pathname),\n                &#125;);\n                gitalk.render('gitalk-container');\n            &lt;/script&gt;\n</code></pre>\n","text":"一. nginx执行步骤 nginx在处理每一个用户请求时，都是按照若干个不同的阶段依次处理的，与配置文件上的顺序没有关系，详细内容可以阅读《深入理解nginx:模块开发与架构解析》这本书，这里只做简单介绍； 1. post-read 读取请求内容阶段，nginx读取并解析完请求...","link":"","photos":[],"count_time":{"symbolsCount":"12k","symbolsTime":"11 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%80-nginx%E6%89%A7%E8%A1%8C%E6%AD%A5%E9%AA%A4\"><span class=\"toc-text\">一. nginx执行步骤</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-post-read\"><span class=\"toc-text\">1. post-read</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-server-rewrite\"><span class=\"toc-text\">2. server-rewrite</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-find-config\"><span class=\"toc-text\">3. find-config</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-rewrite\"><span class=\"toc-text\">4. rewrite</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#5-post-rewrite\"><span class=\"toc-text\">5. post-rewrite</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#6-preaccess\"><span class=\"toc-text\">6. preaccess</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#7-access\"><span class=\"toc-text\">7. access</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#8-post-access\"><span class=\"toc-text\">8. post-access</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#9-try-files\"><span class=\"toc-text\">9. try-files</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#10-content\"><span class=\"toc-text\">10. content</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#11-log\"><span class=\"toc-text\">11. log</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BA%8C-ngx_lua%E8%BF%90%E8%A1%8C%E6%8C%87%E4%BB%A4\"><span class=\"toc-text\">二. ngx_lua运行指令</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-init_by_luainit_by_lua_file\"><span class=\"toc-text\">1. init_by_lua、init_by_lua_file</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-init_worker_by_luainit_worker_by_lua_file\"><span class=\"toc-text\">2. init_worker_by_lua、init_worker_by_lua_file</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-set_by_luaset_by_lua_file\"><span class=\"toc-text\">3. set_by_lua、set_by_lua_file</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-rewrite_by_luarewrite_by_lua_file\"><span class=\"toc-text\">4. rewrite_by_lua、rewrite_by_lua_file</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#5-access_by_luaaccess_by_lua_file\"><span class=\"toc-text\">5. access_by_lua，access_by_lua_file</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#6-content_by_luacontent_by_lua_file\"><span class=\"toc-text\">6. content_by_lua，content_by_lua_file</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#7-header_filter_by_luaheader_filter_by_lua_file\"><span class=\"toc-text\">7. header_filter_by_lua，header_filter_by_lua_file</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#8-body_filter_by_luabody_filter_by_lua_file\"><span class=\"toc-text\">8. body_filter_by_lua，body_filter_by_lua_file</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#9-log_by_lualog_by_lua_file\"><span class=\"toc-text\">9. log_by_lua，log_by_lua_file</span></a></li></ol></li></ol></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"lua学习笔记（二）","uid":"e07778deeaf81d4e352e39b31a6e0149","slug":"zl/2016-01-01-841_lua学习笔记（二）","date":"2024-04-03T03:47:36.093Z","updated":"2024-04-03T03:47:36.094Z","comments":true,"path":"api/articles/zl/2016-01-01-841_lua学习笔记（二）.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"Lua变量12345678910111213141516171819202122232425Lua变量三种类型：全局变量（储存在名称为_G的table中）、局部变量、table中的域Lua中的变量全都是全局变量，即使在语句块或函数里，除非用local显式声明为局部变量局部变量作用...","link":"","photos":[],"count_time":{"symbolsCount":"1.5k","symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Lua源码笔记","uid":"89642c5c32e3c5c206257f92bd57a70c","slug":"zl/2016-01-01-840_Lua源码笔记","date":"2024-04-03T03:47:36.092Z","updated":"2024-04-03T03:47:36.093Z","comments":true,"path":"api/articles/zl/2016-01-01-840_Lua源码笔记.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"用Lua开发游戏已经有一段时间了，但是对Lua的理解还一直停留在浅层。最近想深入研究下，于是着手开始看Lua源码，并在本文记录知识点。 模块GC1.基本数据结构Lua的基本数据结构是一个类型union+type。相关的核心代码如下： 12345678910111213141516...","link":"","photos":[],"count_time":{"symbolsCount":"2.2k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}