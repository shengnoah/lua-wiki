{"title":"每周一个Github项目【第二期】govaluate · Zablog","uid":"885db73aeabd5ddc502d1fba79c0bba0","slug":"zl/2016-01-01-643_每周一个Github项目【第二期】govaluate · Zablog","date":"2024-04-03T03:47:35.864Z","updated":"2024-04-03T03:47:35.864Z","comments":true,"path":"api/articles/zl/2016-01-01-643_每周一个Github项目【第二期】govaluate · Zablog.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<p>golang环境下任意表达式的求值 // Arbitrary expression evaluation for golang</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>govaluate</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>地址</td>\n<td><a href=\"https://github.com/Knetic/govaluate\" target=\"_blank\" rel=\"noopener noreferrer\">Github</a></td>\n</tr>\n<tr>\n<td>作者</td>\n<td>Knetic等</td>\n</tr>\n<tr>\n<td>brief intro</td>\n<td>Arbitrary expression evaluation for golang</td>\n</tr>\n<tr>\n<td>简要介绍</td>\n<td>golang环境下任意表达式的求值</td>\n</tr>\n<tr>\n<td>LICENSE</td>\n<td>MIT</td>\n</tr>\n<tr>\n<td>Stars</td>\n<td>245</td>\n</tr>\n</tbody>\n</table>\n<p>govaluate提供了任意类似C语言的算术/字符串表达式的求值。</p>\n<h2 id=\"为什么你不应该直接在代码中书写表达式\"><a href=\"#为什么你不应该直接在代码中书写表达式\" class=\"headerlink\" title=\"为什么你不应该直接在代码中书写表达式\"></a>为什么你不应该直接在代码中书写表达式</h2><p>有些时候，你并没有办法提前得知表达式的样子，或者你希望表达式可设置。如果你有一堆运行在你的应用上的数据，或者你想要允许你的用户自定义一些内容，或者你写的是一个监控框架，可以获得很多metrics信息，然后进行一些公式计算，那么这个库就会非常有用。</p>\n<h2 id=\"如何使用\"><a href=\"#如何使用\" class=\"headerlink\" title=\"如何使用\"></a>如何使用</h2><p>可以创建一个新的EvaluableExpression，然后调用它的”Evaluate”方法。</p>\n<figure class=\"highlight go\"><table><tbody><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">   expression, err := govaluate.NewEvaluableExpression(<span class=\"string\">&#34;10 &gt; 0&#34;</span>);</div><div class=\"line\">result, err := expression.Evaluate(<span class=\"literal\">nil</span>);</div><div class=\"line\"></div></pre></td></tr></tbody></table></figure>\n<p>那么，如何使用参数？</p>\n<figure class=\"highlight go\"><table><tbody><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">expression, err := govaluate.NewEvaluableExpression(<span class=\"string\">&#34;foo &gt; 0&#34;</span>);</div><div class=\"line\"></div><div class=\"line\">parameters := <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">interface</span>{}, <span class=\"number\">8</span>)</div><div class=\"line\">parameters[<span class=\"string\">&#34;foo&#34;</span>] = <span class=\"number\">-1</span>;</div><div class=\"line\"></div><div class=\"line\">result, err := expression.Evaluate(parameters);</div><div class=\"line\"><span class=\"comment\">// result is now set to &#34;false&#34;, the bool value.</span></div></pre></td></tr></tbody></table></figure>\n<p>这很棒，但是这些基本上可以使用代码直接实现。那么如果计算中牵扯到一些数学计算呢？</p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">expression, err := govaluate.NewEvaluableExpression(&#34;(requests_made * requests_succeeded / 100) &gt;= 90&#34;);</div><div class=\"line\"></div><div class=\"line\">parameters := make(map[string]interface{}, 8)</div><div class=\"line\">parameters[&#34;requests_made&#34;] = 100;</div><div class=\"line\">parameters[&#34;requests_succeeded&#34;] = 80;</div><div class=\"line\"></div><div class=\"line\">result, err := expression.Evaluate(parameters);</div><div class=\"line\">// result is now set to &#34;false&#34;, the bool value.</div></pre></td></tr></tbody></table></figure>\n<p>上述例子返回的都是布尔值，事实上，它是可以返回数字的。</p>\n<figure class=\"highlight golang\"><table><tbody><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">expression, err := govaluate.NewEvaluableExpression(<span class=\"string\">&#34;(mem_used / total_mem) * 100&#34;</span>);</div><div class=\"line\"></div><div class=\"line\">parameters := <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">interface</span>{}, <span class=\"number\">8</span>)</div><div class=\"line\">parameters[<span class=\"string\">&#34;total_mem&#34;</span>] = <span class=\"number\">1024</span>;</div><div class=\"line\">parameters[<span class=\"string\">&#34;mem_used&#34;</span>] = <span class=\"number\">512</span>;</div><div class=\"line\"></div><div class=\"line\">result, err := expression.Evaluate(parameters);</div><div class=\"line\"><span class=\"comment\">// result is now set to &#34;50.0&#34;, the float64 value.</span></div></pre></td></tr></tbody></table></figure>\n<p>你也可以做一些日期的转化，只要符合RF3339,ISO8061,Unix Date，或者ruby日期格式标准即可。如果你还是不太确定，那么可以看一下支持的<a href=\"https://github.com/Knetic/govaluate/blob/0580e9b47a69125afa0e4ebd1cf93c49eb5a43ec/parsing.go#L258\" target=\"_blank\" rel=\"noopener noreferrer\">日期标准</a>。</p>\n<figure class=\"highlight go\"><table><tbody><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">   expression, err := govaluate.NewEvaluableExpression(<span class=\"string\">&#34;&#39;2014-01-02&#39; &gt; &#39;2014-01-01 23:59:59&#39;&#34;</span>);</div><div class=\"line\">result, err := expression.Evaluate(<span class=\"literal\">nil</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// result is now set to true</span></div></pre></td></tr></tbody></table></figure>\n<p>表达式只需要进行一次句法分析，就可以多次复用。</p>\n<figure class=\"highlight go\"><table><tbody><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">   expression, err := govaluate.NewEvaluableExpression(<span class=\"string\">&#34;response_time &lt;= 100&#34;</span>);</div><div class=\"line\">parameters := <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">interface</span>{}, <span class=\"number\">8</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span> {</div><div class=\"line\">\tparameters[<span class=\"string\">&#34;response_time&#34;</span>] = pingSomething();</div><div class=\"line\">\tresult, err := expression.Evaluate(parameters)</div><div class=\"line\">}</div></pre></td></tr></tbody></table></figure>\n<p>关于执行顺序，本库支持正常C标准的执行顺序。编写表达式时，请确保您正确地书写操作符，或使用括号来明确表达式的哪些部分应先运行。</p>\n<p>govaluate采用或者[]来完成转义。</p>\n<p>支持自定义函数</p>\n<p>支持简单的结构体（访问器）</p>\n<h2 id=\"运算符支持\"><a href=\"#运算符支持\" class=\"headerlink\" title=\"运算符支持\"></a>运算符支持</h2><p>ruleplatform的表达式引擎支持以下运算：<br/>二元计算符 : + - / <em> &amp; | ^ *</em> % &gt;&gt; &lt;&lt;<br/>二元比较符 : &gt; &gt;= &lt; &lt;= == != =~ !~<br/>逻辑操作符 : || &amp;&amp;<br/>括号 : ( )<br/>数组相关 : , IN (例子1 IN (1, 2, ‘foo’)，返回值true)<br/>一元计算符 : ! - ~<br/>三元运算符 : ? :<br/>空值聚合符: ??</p>\n<p>更多内容请查看<a href=\"https://github.com/Knetic/govaluate\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/Knetic/govaluate</a></p>","text":"golang环境下任意表达式的求值 // Arbitrary expression evaluation for golang 名称 govaluate 地址 Github 作者 Knetic等 brief intro Arbitrary expression evaluatio...","link":"","photos":[],"count_time":{"symbolsCount":"2.5k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BD%A0%E4%B8%8D%E5%BA%94%E8%AF%A5%E7%9B%B4%E6%8E%A5%E5%9C%A8%E4%BB%A3%E7%A0%81%E4%B8%AD%E4%B9%A6%E5%86%99%E8%A1%A8%E8%BE%BE%E5%BC%8F\"><span class=\"toc-text\">为什么你不应该直接在代码中书写表达式</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">如何使用</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%BF%90%E7%AE%97%E7%AC%A6%E6%94%AF%E6%8C%81\"><span class=\"toc-text\">运算符支持</span></a></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Lua学习笔记：对函数的深入理解","uid":"a4dc0fff7f26a0411253a4f7cb25eca6","slug":"zl/2016-01-01-646_Lua学习笔记：对函数的深入理解","date":"2024-04-03T03:47:35.865Z","updated":"2024-04-03T03:47:35.869Z","comments":true,"path":"api/articles/zl/2016-01-01-646_Lua学习笔记：对函数的深入理解.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":" 闭包 lua中的函数都可以认为是闭包，只不过为了便于理解还是用了函数的概念。 lua中函数的返回值可以是匿名函数，也就是闭包。以下面的代码为例，提出一个概念：非局部的变量。在下面的代码中，匿名函数访问了一个变量i，它对于newCount来说是局部变量，对于匿名函数来说是既不是局...","link":"","photos":[],"count_time":{"symbolsCount":"1.2k","symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"逆向分析Lua注入类型外挂","uid":"c82dde1f5a4311b882f0704493a4f2b5","slug":"zl/2016-01-01-644_逆向分析Lua注入类型外挂","date":"2024-04-03T03:47:35.864Z","updated":"2024-04-03T03:47:35.864Z","comments":true,"path":"api/articles/zl/2016-01-01-644_逆向分析Lua注入类型外挂.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":" &lt;h2 id=&quot;相关&quot;&gt;&lt;a href=&quot;#相关&quot; class=&quot;headerlink&quot; title=&quot;相关&quot;&gt;&lt;/a&gt;相关&lt;/h2&gt;&lt;p&gt...","link":"","photos":[],"count_time":{"symbolsCount":"20k","symbolsTime":"18 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}