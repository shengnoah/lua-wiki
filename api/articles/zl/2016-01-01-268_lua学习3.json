{"title":"lua学习3","uid":"f6e7f2f9c99790f61ee2eef6de3d10d2","slug":"zl/2016-01-01-268_lua学习3","date":"2024-04-03T03:47:33.129Z","updated":"2024-04-03T03:47:33.130Z","comments":true,"path":"api/articles/zl/2016-01-01-268_lua学习3.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<h4 id=\"变长参数\"><a href=\"http://renchunxiao.com/#%E5%8F%98%E9%95%BF%E5%8F%82%E6%95%B0\" class=\"headerlink\" title=\"变长参数\"></a>变长参数</h4><p>Lua中的函数可以接受不同数量的实参。例如：</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(...)</span></span></span><br><span class=\"line\">  <span class=\"keyword\">local</span> sum = <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> i,v <span class=\"keyword\">in</span> <span class=\"built_in\">ipairs</span>({...}) <span class=\"keyword\">do</span></span><br><span class=\"line\">    sum = sum + v</span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> sum</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(add(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>)) </span><br></pre></td></tr></table></figure>\n<p>参数表中的三个<code>...</code>表示变长参数，函数访问变成参数也需要使用<code>...</code>。变长参数只能放在最后一位。</p>\n<p>可以通过select函数来访问变长参数。</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(...)</span></span></span><br><span class=\"line\">  <span class=\"built_in\">print</span>(<span class=\"built_in\">select</span>(<span class=\"string\">'#'</span>, ...))</span><br><span class=\"line\">  <span class=\"keyword\">for</span> i=<span class=\"number\">1</span>, <span class=\"built_in\">select</span>(<span class=\"string\">'#'</span>, ...) <span class=\"keyword\">do</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"built_in\">select</span>(i, ...))</span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">test(<span class=\"string\">'a'</span>, <span class=\"literal\">nil</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"具名参数\"><a href=\"http://renchunxiao.com/#%E5%85%B7%E5%90%8D%E5%8F%82%E6%95%B0\" class=\"headerlink\" title=\"具名参数\"></a>具名参数</h4><p>Lua中调用函数的实参是通过形参的位置相互对应起来的，第一个传入的参数赋值给第一个形参，以此类推。通过名字来指定实参也是很有必要的。</p>\n<p>例如：os.rename()方法用于修改文档名称，但是很容易忘记第一个参数是原来的名字还是新的名字。所以需要以下的写法：<code>os.rename(old='a1',new='a2')</code>,但是lua并不支持这样的写法。需要将写法改成传入一个table：<code>os.renname&#123;old='a1', new='a2'&#125;</code>。可以对os.rename方法进行一次简单的封装。</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">rename</span><span class=\"params\">(args)</span></span></span><br><span class=\"line\">  <span class=\"built_in\">os</span>.<span class=\"built_in\">rename</span>(args.old, args.new)</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"深入函数\"><a href=\"http://renchunxiao.com/#%E6%B7%B1%E5%85%A5%E5%87%BD%E6%95%B0\" class=\"headerlink\" title=\"深入函数\"></a>深入函数</h4><p>Lua中函数是“第一类值”，它们具有特定的词法域。</p>\n<p>“第一类值”表示函数与其他基本类型具有相同的权利，可以赋值给变量、table可以作为函数的返回值，也可以作为函数实参。</p>\n<p>词法域，是函数中可以嵌套函数，内部函数可以访问外部函数的变量。</p>\n<p>在Lua中函数与其他值一样都是匿名的，即他们都没有名称。</p>\n<p>Lua中常见的函数写法如下：<code>function a() print('a') end</code>,同时也可以写成这样：<code>a = function () print('a') end</code></p>\n<p>例如：</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">names = {<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"c\"</span>}</span><br><span class=\"line\">ages = {a=<span class=\"number\">6</span>, b=<span class=\"number\">2</span>, c=<span class=\"number\">5</span>}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">table</span>.<span class=\"built_in\">sort</span>(names, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(c1,c2)</span></span> <span class=\"keyword\">return</span> ages[c1] &gt; ages[c2] <span class=\"keyword\">end</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i,v <span class=\"keyword\">in</span> <span class=\"built_in\">ipairs</span>(names) <span class=\"keyword\">do</span></span><br><span class=\"line\">  <span class=\"built_in\">print</span>(v)</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<p>上面的例子描述了对names进行排序，可以抽象出一个函数来实现：</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sortbyage</span><span class=\"params\">(names, ages)</span></span></span><br><span class=\"line\">  <span class=\"built_in\">table</span>.<span class=\"built_in\">sort</span>(names, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(c1,c2)</span></span> <span class=\"keyword\">return</span> ages[c1] &gt; ages[c2] <span class=\"keyword\">end</span>)</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<p>传递给sort的匿名函数可以访问参数ages，而ages是外部函数sortbyage的局部函数。在这个匿名函数内部，ages既不是全局变量也不是局部变量，称其为“非局部的变量”。</p>\n<p>下面是一个关于计数器的例子：</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">count</span><span class=\"params\">()</span></span></span><br><span class=\"line\">  <span class=\"keyword\">local</span> i = <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span> i = i + <span class=\"number\">1</span> <span class=\"keyword\">return</span> i <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">a = count()</span><br><span class=\"line\">b = count()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(a())     </span><br><span class=\"line\"><span class=\"built_in\">print</span>(a())     <span class=\"comment\">--&gt; 2</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(b())     <span class=\"comment\">--&gt; 1</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(b())     <span class=\"comment\">--&gt; 2</span></span><br></pre></td></tr></table></figure>\n<p>上面这段代码，匿名函数访问了一个“非局部的变量”i，该变量用于保存一个计数器。初看，由于创建变量i的函数已经返回，所以之后每次调用匿名函数时，i都应是超出了作用范围的。但其实不然，lua会以闭包的感念来正确的处理这种情况。简单的来讲，一个闭包就是一个函数加上该函数所需要访问的所有“非局部变量”。</p>\n<h4 id=\"非全局的函数\"><a href=\"http://renchunxiao.com/#%E9%9D%9E%E5%85%A8%E5%B1%80%E7%9A%84%E5%87%BD%E6%95%B0\" class=\"headerlink\" title=\"非全局的函数\"></a>非全局的函数</h4><p>由于函数是一种“第一类值”，因此函数也可以存储在table的字段当中和局部变量中。</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Lib = {}</span><br><span class=\"line\">Lib.foo = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(x,y)</span></span> <span class=\"keyword\">return</span> x + y <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">local</span> f = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(&lt;参数&gt;)</span></span></span><br><span class=\"line\">\t&lt;函数体&gt;</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<p>—EOF—</p>","text":"变长参数Lua中的函数可以接受不同数量的实参。例如： 12345678function (...) local sum = 0 for i,v in ipairs({...}) do sum = sum + v end return sumendprint(add(1,2,3,4...","link":"","photos":[],"count_time":{"symbolsCount":"1.8k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%8F%98%E9%95%BF%E5%8F%82%E6%95%B0\"><span class=\"toc-text\">变长参数</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%85%B7%E5%90%8D%E5%8F%82%E6%95%B0\"><span class=\"toc-text\">具名参数</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%B7%B1%E5%85%A5%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">深入函数</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%9D%9E%E5%85%A8%E5%B1%80%E7%9A%84%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">非全局的函数</span></a></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Lua 学习 chapter8","uid":"b020154404f2b064b17fafcacd3513a2","slug":"zl/2016-01-01-267_Lua 学习 chapter8 ","date":"2024-04-03T03:47:33.129Z","updated":"2024-04-03T03:47:33.129Z","comments":true,"path":"api/articles/zl/2016-01-01-267_Lua 学习 chapter8 .json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":" &lt;h3 id=&quot;目录&quot;&gt;目录&lt;/h3&gt; 局部变量和代码块 控制结构 break,return和goto 局部变量和代码块 Lua语言中的变量默认情况下是全局变量，所有的局部变量在使用前必须声明。一个代码块是一个控制结构的主体，或是函数...","link":"","photos":[],"count_time":{"symbolsCount":"1.4k","symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"浅析android手游lua脚本的加密与解密","uid":"1dd14efa2a89c5b5b29bd9942491d3c2","slug":"zl/2016-01-01-264_浅析android手游lua脚本的加密与解密","date":"2024-04-03T03:47:33.128Z","updated":"2024-04-03T03:47:33.128Z","comments":true,"path":"api/articles/zl/2016-01-01-264_浅析android手游lua脚本的加密与解密.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":" &lt;p&gt; 博客刚刚弄完善，把去年发在看雪的一篇精华帖转了过来，文章稍微修改了下，并且增加了后续&lt;a href=&quot;https://litna.top/2018/07/08/%E6%B5%85%E6%9E%90android%E6%89%8B%E6%B8%...","link":"","photos":[],"count_time":{"symbolsCount":"11k","symbolsTime":"10 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}