{"title":"Lua元方法 · 花生肉泥","uid":"5e23d82503a6cc3b4f3dcfe389b0d719","slug":"zl/2016-01-01-71_Lua元方法 · 花生肉泥","date":"2024-04-03T03:47:35.953Z","updated":"2024-04-03T03:47:35.953Z","comments":true,"path":"api/articles/zl/2016-01-01-71_Lua元方法 · 花生肉泥.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<p>lua在创建新的table时不会创建元表，比如<br/></p><figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">local</span> t = {}</span><br/><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">getmetatable</span>(t))     </span><br/></pre></td></tr></tbody></table></figure><p></p>\n<p>我们是使用getmetatable来获取一个table或者userdata类型变量的元表，当创建新的table变量时，使用getmetatable去获得元表，将返回nil，同理可以用setmetatable去设置一个table或userdata类型变量的元表，代码如下：<br/></p><figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">local</span> t = {}</span><br/><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">getmetatable</span>(t))     </span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"keyword\">local</span> t1 = {}</span><br/><span class=\"line\"><span class=\"built_in\">setmetatable</span>(t,t1)</span><br/><span class=\"line\"><span class=\"built_in\">assert</span>(<span class=\"built_in\">getmetatable</span>(t) == t1)</span><br/></pre></td></tr></tbody></table></figure><p></p>\n<p>任何table都可以作为任何值的元表，而一组相关的table有可以<strong>共享一个通用的元表</strong>，此元表描述了他们共同行为，<strong>一个table甚至可以作为它自己的元表</strong>，用于描述其特有的行为，总之，任何搭配形式都是合法的。</p>\n<p>在lua中，只能设置table元表，若要设置其他类型的元表，必须通过C代码完成，还存在一个特例，对于字符串，标准的字符串程序库为所有的字符串设置了一个元表，而其他类型在默认情况下都没有元表，例：<br/></p><figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">getmetatable</span>(<span class=\"string\">&#34;Hello World&#34;</span>))     <span class=\"comment\">--&gt;table:0062EA18</span></span><br/><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">getmetatable</span>(<span class=\"number\">10</span>))     </span><br/></pre></td></tr></tbody></table></figure><p></p>\n<p>在table中，可以重新定义的元方法有以下几个:<br/></p><figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/><span class=\"line\">9</span><br/><span class=\"line\">10</span><br/><span class=\"line\">11</span><br/><span class=\"line\">12</span><br/><span class=\"line\">13</span><br/><span class=\"line\">14</span><br/><span class=\"line\">15</span><br/><span class=\"line\">16</span><br/><span class=\"line\">17</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">__add</span>(a,b)     <span class=\"comment\">-- 加法</span></span><br/><span class=\"line\"><span class=\"built_in\">__sub</span>(a,b)     <span class=\"comment\">-- 减法</span></span><br/><span class=\"line\"><span class=\"built_in\">__mul</span>(a,b)     <span class=\"comment\">-- 乘法</span></span><br/><span class=\"line\"><span class=\"built_in\">__div</span>(a,b)     <span class=\"comment\">-- 除法</span></span><br/><span class=\"line\"><span class=\"built_in\">__mod</span>(a,b)     <span class=\"comment\">-- 取模</span></span><br/><span class=\"line\"><span class=\"built_in\">__pow</span>(a,b)     <span class=\"comment\">-- 乘幂</span></span><br/><span class=\"line\"><span class=\"built_in\">__unm</span>(a,b)     <span class=\"comment\">-- 相反数</span></span><br/><span class=\"line\"><span class=\"built_in\">__concat</span>(a,b)     <span class=\"comment\">-- 连接</span></span><br/><span class=\"line\"><span class=\"built_in\">__len</span>(a,b)     <span class=\"comment\">-- 长度</span></span><br/><span class=\"line\"><span class=\"built_in\">__eq</span>(a,b)     <span class=\"comment\">-- 相等</span></span><br/><span class=\"line\"><span class=\"built_in\">__lt</span>(a,b)     <span class=\"comment\">-- 小于</span></span><br/><span class=\"line\"><span class=\"built_in\">__le</span>(a,b)     <span class=\"comment\">-- 小于等于</span></span><br/><span class=\"line\"><span class=\"built_in\">__index</span>(a,b)     <span class=\"comment\">-- 索引查询</span></span><br/><span class=\"line\"><span class=\"built_in\">__newindex</span>(a,b,c)     <span class=\"comment\">-- 索引更新</span></span><br/><span class=\"line\"><span class=\"built_in\">__call</span>(a,...)     <span class=\"comment\">-- 执行方法调用</span></span><br/><span class=\"line\"><span class=\"built_in\">__tostring</span>(a)     <span class=\"comment\">-- 字符串输出</span></span><br/><span class=\"line\"><span class=\"built_in\">__metatable</span>     <span class=\"comment\">-- 保护元表</span></span><br/></pre></td></tr></tbody></table></figure><p></p>\n<p>算术类的元方法<br/></p><figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/><span class=\"line\">9</span><br/><span class=\"line\">10</span><br/><span class=\"line\">11</span><br/><span class=\"line\">12</span><br/><span class=\"line\">13</span><br/><span class=\"line\">14</span><br/><span class=\"line\">15</span><br/><span class=\"line\">16</span><br/><span class=\"line\">17</span><br/><span class=\"line\">18</span><br/><span class=\"line\">19</span><br/><span class=\"line\">20</span><br/><span class=\"line\">21</span><br/><span class=\"line\">22</span><br/><span class=\"line\">23</span><br/><span class=\"line\">24</span><br/><span class=\"line\">25</span><br/><span class=\"line\">26</span><br/><span class=\"line\">27</span><br/><span class=\"line\">28</span><br/><span class=\"line\">29</span><br/><span class=\"line\">30</span><br/><span class=\"line\">31</span><br/><span class=\"line\">32</span><br/><span class=\"line\">33</span><br/><span class=\"line\">34</span><br/><span class=\"line\">35</span><br/><span class=\"line\">36</span><br/><span class=\"line\">37</span><br/><span class=\"line\">38</span><br/><span class=\"line\">39</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">Set = {}</span><br/><span class=\"line\"><span class=\"keyword\">local</span> mt = {}     <span class=\"comment\">-- 集合的元素</span></span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"comment\">-- 根据参数列表中的值创建一个新集合</span></span><br/><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(l)</span></span></span><br/><span class=\"line\">     <span class=\"keyword\">local</span> set = {}</span><br/><span class=\"line\">     <span class=\"built_in\">setmetatable</span>(set,mt)</span><br/><span class=\"line\">     <span class=\"keyword\">for</span> _,v <span class=\"keyword\">in</span> <span class=\"built_in\">pairs</span>(l) <span class=\"keyword\">do</span></span><br/><span class=\"line\">          set[v] = <span class=\"literal\">true</span></span><br/><span class=\"line\">     <span class=\"keyword\">end</span></span><br/><span class=\"line\">     <span class=\"keyword\">return</span> set</span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/><span class=\"line\"><span class=\"comment\">-- 并集操作</span></span><br/><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Set.union</span><span class=\"params\">(a, b)</span></span></span><br/><span class=\"line\">    <span class=\"keyword\">local</span> retSet = Set.new{} <span class=\"comment\">-- 此处相当于Set.new({})</span></span><br/><span class=\"line\">    <span class=\"keyword\">for</span> v <span class=\"keyword\">in</span> <span class=\"built_in\">pairs</span>(a) <span class=\"keyword\">do</span> retSet[v] = <span class=\"literal\">true</span> <span class=\"keyword\">end</span></span><br/><span class=\"line\">    <span class=\"keyword\">for</span> v <span class=\"keyword\">in</span> <span class=\"built_in\">pairs</span>(b) <span class=\"keyword\">do</span> retSet[v] = <span class=\"literal\">true</span> <span class=\"keyword\">end</span></span><br/><span class=\"line\">    <span class=\"keyword\">return</span> retSet</span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"comment\">-- 交集操作</span></span><br/><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Set.intersection</span><span class=\"params\">(a, b)</span></span></span><br/><span class=\"line\">    <span class=\"keyword\">local</span> retSet = Set.new{}</span><br/><span class=\"line\">    <span class=\"keyword\">for</span> v <span class=\"keyword\">in</span> <span class=\"built_in\">pairs</span>(a) <span class=\"keyword\">do</span> retSet[v] = b[v] <span class=\"keyword\">end</span></span><br/><span class=\"line\">    <span class=\"keyword\">return</span> retSet</span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"comment\">-- 打印集合的操作</span></span><br/><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Set.toString</span><span class=\"params\">(set)</span></span></span><br/><span class=\"line\">     <span class=\"keyword\">local</span> tb = {}</span><br/><span class=\"line\">     <span class=\"keyword\">for</span> e <span class=\"keyword\">in</span> <span class=\"built_in\">pairs</span>(set) <span class=\"keyword\">do</span></span><br/><span class=\"line\">          tb[#tb + <span class=\"number\">1</span>] = e</span><br/><span class=\"line\">     <span class=\"keyword\">end</span></span><br/><span class=\"line\">     <span class=\"keyword\">return</span> <span class=\"string\">&#34;{&#34;</span> .. <span class=\"built_in\">table</span>.<span class=\"built_in\">concat</span>(tb, <span class=\"string\">&#34;, &#34;</span>) .. <span class=\"string\">&#34;}&#34;</span></span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Set.print</span><span class=\"params\">(s)</span></span></span><br/><span class=\"line\">     <span class=\"built_in\">print</span>(Set.toString(s))</span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/></pre></td></tr></tbody></table></figure><p></p>\n<p>现在，定义一个“+”来计算两个集合的并集，那么就需要让所有用于表示集合的table共享一个元表，并且在该元表中定义如何执行一个加法操作，首先创建一个常规的table</p>","text":"lua在创建新的table时不会创建元表，比如12local t = {}print(getmetatable(t)) 我们是使用getmetatable来获取一个table或者userdata类型变量的元表，当创建新的table变量时，使用getmetatable去获得元表，将...","link":"","photos":[],"count_time":{"symbolsCount":"1.9k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"openresty借助lua实现动态跳转https，动态获取证书内容响应","uid":"8d280b63e55a364c52ac256a622dbff1","slug":"zl/2016-01-01-720_openresty借助lua实现动态跳转https，动态获取证书内容响应","date":"2024-04-03T03:47:35.954Z","updated":"2024-04-03T03:47:35.959Z","comments":true,"path":"api/articles/zl/2016-01-01-720_openresty借助lua实现动态跳转https，动态获取证书内容响应.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":" 内容描述: 借助openresty通过lua代码实现动态跳转https，并动态获取证书 1234567891011121314151617181920server { listen 80; rewrite_by_lua &#39;rewrite_https(&#34;site&...","link":"","photos":[],"count_time":{"symbolsCount":"4.8k","symbolsTime":"4 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"lua之运算符","uid":"1e80f66d3215934d26ab06a86f32143c","slug":"zl/2016-01-01-719_lua之运算符","date":"2024-04-03T03:47:35.952Z","updated":"2024-04-03T03:47:35.953Z","comments":true,"path":"api/articles/zl/2016-01-01-719_lua之运算符.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"lua运算符 算术运算符 +，-，*（乘），/（除），%（取余），^(乘幂)，-（负号） 关系运算符 ==（等于），~=（不等于），&gt;，&lt;，&gt;=，&lt;= 逻辑运算符 and，or，not 其它运算符 ..（连接符），#（一元运算符，返回字符串或表的长度） 运...","link":"","photos":[],"count_time":{"symbolsCount":448,"symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}