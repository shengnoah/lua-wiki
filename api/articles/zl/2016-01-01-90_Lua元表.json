{"title":"Lua元表","uid":"0498ed7eca93166bac9cec9951eb31df","slug":"zl/2016-01-01-90_Lua元表","date":"2024-04-03T03:47:36.183Z","updated":"2024-04-03T03:47:36.183Z","comments":true,"path":"api/articles/zl/2016-01-01-90_Lua元表.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<p>在 Lua 5.1 语言中，元表 <em>(metatable)</em> 的表现行为类似于 C++ 语言中的操作符重载，例如我们可以重载 “<strong>add” 元方法 <em>(metamethod)</em>，来计算两个 Lua 数组的并集；或者重载 “</strong>index” 方法，来定义我们自己的 Hash 函数。</p>\n<h2 id=\"预定义操作集合\"><a href=\"#预定义操作集合\" class=\"headerlink\" title=\"预定义操作集合\"></a>预定义操作集合</h2><p>其实不仅仅是LUA, 在大多数编程语言中，每一种类型的值，都有 一套预定义的操作集合。例如，整形的数值可以进行加操作，减作等，字符串类型的数值可以进行加操作等，不同的类型预定义操作或者说预定义的行为略有不同， 在LUA语言中，table类型的值默认是不能进行加操作的。但是我们能不能让table可以进行加操作呢？答案是可以。</p>\n<h2 id=\"元表\"><a href=\"#元表\" class=\"headerlink\" title=\"元表\"></a>元表</h2><p>要想使table类型的值可以进行加操作，就要为table类型的值添加一个加操作的行为，我们姑且把它叫做是非预定义的操作。这时就要用到我们要讲的元表，称之为metatable,元表也是一种数据类型，在lua语言中，我们可以为table类型的值设置metatable,来为table类型的值添加一些非预定义的操作。</p>\n<p>在lua中为我们提供的两个方法：</p>\n<ul>\n<li>setmetatable(table, metatable) 来为table变量设置metatable对象。</li>\n<li>getmetable(table) 此方法用于获取table的metatable对象。</li>\n</ul>\n<p>注意，我们使用lua只能设置table类型值的metatable，如果想设置其他类型值的metatable, 则需要通过C代码来实现。</p>\n<p>当我们在创建一个table类型的值的时候，默认是没有metatable的，因此通过getmetatable方法返回nil。</p>\n<h4 id=\"元表的调用方式是怎样的？\"><a href=\"#元表的调用方式是怎样的？\" class=\"headerlink\" title=\"元表的调用方式是怎样的？\"></a>元表的调用方式是怎样的？</h4><p>比如想要实现两个表类型值的加操作，我们可以通过定义一个元表值：</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">local</span> set1 = {<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">30</span>}</div><div class=\"line\"><span class=\"keyword\">local</span> set2 = {<span class=\"number\">20</span>, <span class=\"number\">40</span>, <span class=\"number\">50</span>}</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">-- 将用于重载_dd的函数。注意第一个参数是self</span></div><div class=\"line\"><span class=\"keyword\">local</span> union = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(self, another)</span></span></div><div class=\"line\">    <span class=\"keyword\">local</span> set = {}</div><div class=\"line\">    <span class=\"keyword\">local</span> result = {}</div><div class=\"line\">    <span class=\"comment\">-- 利用数组来确保集合的互异性</span></div><div class=\"line\">  \t<span class=\"keyword\">for</span> i,j <span class=\"keyword\">in</span> <span class=\"built_in\">pairs</span>(self) <span class=\"keyword\">do</span> set[j] = <span class=\"literal\">true</span> <span class=\"keyword\">end</span></div><div class=\"line\">    <span class=\"keyword\">for</span> i,j <span class=\"keyword\">in</span> <span class=\"built_in\">pairs</span>(another) <span class=\"keyword\">do</span> set[j] = <span class=\"literal\">true</span> <span class=\"keyword\">end</span></div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">-- 加入结果集合</span></div><div class=\"line\">    <span class=\"keyword\">for</span> i,j <span class=\"keyword\">in</span> <span class=\"built_in\">pairs</span>(set) <span class=\"keyword\">do</span> <span class=\"built_in\">table</span>.<span class=\"built_in\">insert</span>(result, i) <span class=\"keyword\">end</span></div><div class=\"line\">    <span class=\"keyword\">return</span> result</div><div class=\"line\"><span class=\"keyword\">end</span></div><div class=\"line\"><span class=\"built_in\">setmetatable</span>(set1, {<span class=\"built_in\">__add</span> = union}) <span class=\"comment\">-- 重载set1表一的__add元方法</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">local</span> set3 = set1 + set2</div><div class=\"line\"><span class=\"keyword\">for</span> _,j <span class=\"keyword\">in</span> <span class=\"built_in\">pairs</span>(set3)</div><div class=\"line\">\t<span class=\"built_in\">io</span>.<span class=\"built_in\">write</span>(j .. <span class=\"string\">&#34; &#34;</span>) <span class=\"comment\">--&gt; output: 20 10 40 30 50</span></div><div class=\"line\"><span class=\"keyword\">end</span></div></pre></td></tr></tbody></table></figure>\n<p>计算表达式set1 + set2,具体的步骤是按照一些步骤进行的：</p>\n<ol>\n<li>先判断set1和set2两者之一是否元表</li>\n<li>检查该元表是否有一个叫__add的字段</li>\n<li>如果找到了该字段，就调用该字段的值，这个值对应的是一个元方法(metamethod);</li>\n<li>调用__add对应的metamethod字段set1和set2的和。</li>\n</ol>\n<h2 id=\"元方法\"><a href=\"#元方法\" class=\"headerlink\" title=\"元方法\"></a>元方法</h2><p>正如刚刚我们定义的<strong>add方法，具体定义某一种的操作行为的方法，叫元方法。除了</strong>add方法可以被重载之外，Lua提供的所有操作符都可以被重载：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">元方法</th>\n<th style=\"text-align:center\">含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">__add</td>\n<td style=\"text-align:center\">+ 操作</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">__sub</td>\n<td style=\"text-align:center\">- 操作 其行为类似于 “add” 操作</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">__mul</td>\n<td style=\"text-align:center\">* 操作 其行为类似于 “add” 操作</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">__div</td>\n<td style=\"text-align:center\">/ 操作 其行为类似于 “add” 操作</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">__mod</td>\n<td style=\"text-align:center\">% 操作 其行为类似于 “add” 操作</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">__pow</td>\n<td style=\"text-align:center\">^(幂) 操作 其行为类似于 “add” 操作</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">__unm</td>\n<td style=\"text-align:center\">一元 - 操作</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">__concat</td>\n<td style=\"text-align:center\">.. (字符串连接) 操作</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">__len</td>\n<td style=\"text-align:center\"># 操作</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">__eq</td>\n<td style=\"text-align:center\">== 操作 函数 getcomphandler 定义了 Lua 怎样选择一个处理器来作比较操作 仅在两个对象类型相同且有对应操作相同的元方法时才起效</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">__lt</td>\n<td style=\"text-align:center\">&lt; 操作</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">__le</td>\n<td style=\"text-align:center\">&lt;= 操作</td>\n</tr>\n</tbody>\n</table>\n<p>除了操作符之外，如下方法也可可以被重载，下面会一次解释使用方法</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">元方法</th>\n<th style=\"text-align:center\">含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">__index</td>\n<td style=\"text-align:center\">取下标操作用于访问 table[key]</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">__newindex</td>\n<td style=\"text-align:center\">赋值给指定下标 table[key] = value</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">__tostring</td>\n<td style=\"text-align:center\">转换成字符串</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">__call</td>\n<td style=\"text-align:center\">当Lua调用一个值时调用</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">__mode</td>\n<td style=\"text-align:center\">用于弱表(week  table)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">__metatable</td>\n<td style=\"text-align:center\">用于保护metatable不被访问</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"index-元方法\"><a href=\"#index-元方法\" class=\"headerlink\" title=\"__index 元方法\"></a>__index 元方法</h4><p>下面我么实现了在表中查找键不存在是转而在元表中查找该键的功能：</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">mytable = setmetatabe({key1 = <span class=\"string\">&#34;value1&#34;</span>}, <span class=\"comment\">-- 原始表</span></div><div class=\"line\">\t{<span class=\"built_in\">__index</span> = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(self, key)</span></span></div><div class=\"line\">    \t<span class=\"keyword\">if</span> key == <span class=\"string\">&#34;key2&#34;</span> <span class=\"keyword\">then</span></div><div class=\"line\">        \t<span class=\"keyword\">return</span> <span class=\"string\">&#34;metatable value&#34;</span></div><div class=\"line\">        <span class=\"keyword\">end</span></div><div class=\"line\">      <span class=\"keyword\">end</span></div><div class=\"line\">    })</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">print</span>(mytable.key1, mytable.key2) <span class=\"comment\">--&gt; output: value1 metatale value</span></div></pre></td></tr></tbody></table></figure>\n<p>关于__index元方法，有很多比较高阶的技巧，例如：__index 的元方法不需要非是一个函数，他也可以是一个表。</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">t = <span class=\"built_in\">setmetatable</span>({[<span class=\"number\">1</span>] = <span class=\"string\">&#34;hello&#34;</span>}, {<span class=\"built_in\">__index</span> = {[<span class=\"number\">2</span>] = <span class=\"string\">&#34;world&#34;</span>}})</div><div class=\"line\"><span class=\"built_in\">print</span>(t[<span class=\"number\">1</span>], t[<span class=\"number\">2</span>])   <span class=\"comment\">--&gt;hello world</span></div></pre></td></tr></tbody></table></figure>\n<p>第一句代码有点绕，解释一下：先是把 {__index = {}} 作为元表，但 __index 接受一个表，而不是函数，这个表中包含 [2] = “world” 这个键值对。 所以当 t[2] 去在自身的表中找不到时，在 __index 的表中去寻找，然后找到了 [2] = “world” 这个键值对。</p>\n<p>利用这个特性，我们可以利用__index来实现lua语言的面向对象</p>\n<h4 id=\"面向对象\"><a href=\"#面向对象\" class=\"headerlink\" title=\"面向对象\"></a>面向对象</h4><p>在 Lua 中，我们可以使用表和函数实现面向对象。将函数和相关的数据放置于同一个表中就形成了一个对象。</p>\n<p>下面是account.lua的源码：</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">-- 元表对象，我们在_M中放置我们要定义的类的函数和相关的数据</span></div><div class=\"line\"><span class=\"keyword\">local</span> _M = {}</div><div class=\"line\"><span class=\"comment\">-- 元表，将_M赋值给__index, 这样当访问类对象的函数或者数据时找不到，就会调用_M中的</span></div><div class=\"line\"><span class=\"keyword\">local</span> mt = { <span class=\"built_in\">__index</span> = _M }</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> _M.deposit <span class=\"params\">(self, v)</span></span></div><div class=\"line\">    self.balance = self.balance + v</div><div class=\"line\"><span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> _M.withdraw <span class=\"params\">(self, v)</span></span></div><div class=\"line\">    <span class=\"keyword\">if</span> self.balance &gt; v <span class=\"keyword\">then</span></div><div class=\"line\">        self.balance = self.balance - v</div><div class=\"line\">    <span class=\"keyword\">else</span></div><div class=\"line\">        <span class=\"built_in\">error</span>(<span class=\"string\">&#34;insufficient funds&#34;</span>)</div><div class=\"line\">    <span class=\"keyword\">end</span></div><div class=\"line\"><span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> _M.new <span class=\"params\">(self, balance)</span></span></div><div class=\"line\">    balance = balance <span class=\"keyword\">or</span> <span class=\"number\">0</span></div><div class=\"line\">  \t<span class=\"comment\">-- {balance = balance} new的对象，并设置元表mt</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">setmetatable</span>({balance = balance}, mt)</div><div class=\"line\"><span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">return</span> _M</div></pre></td></tr></tbody></table></figure>\n<blockquote>\n<p>引用代码示例:</p>\n</blockquote>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">local</span> account = <span class=\"built_in\">require</span>(<span class=\"string\">&#34;account&#34;</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">local</span> a = account:new()</div><div class=\"line\">a:deposit(<span class=\"number\">100</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">local</span> b = account:new()</div><div class=\"line\">b:deposit(<span class=\"number\">50</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">print</span>(a.balance)  <span class=\"comment\">--&gt; output: 100</span></div><div class=\"line\"><span class=\"built_in\">print</span>(b.balance)  <span class=\"comment\">--&gt; output: 50</span></div></pre></td></tr></tbody></table></figure>\n<p>上面这段代码 “setmetatable({balance = balance}, mt)”，其中 mt 代表 <code>&#123; __index = _M &#125;</code> ，这句话值得注意。根据我们上面学到的知识，我们明白，setmetatable 将 <code>_M</code> 作为新建表的原型，所以在自己的表内找不到 ‘deposit’、’withdraw’ 这些方法和变量的时候，便会到 __index 所指定的 _M 类型中去寻找。</p>\n<p>__index 元方法还可以实现给表中每一个值赋上默认值；和 __newindex 元方法联合监控对表的读取、修改等比较高阶的功能，待读者自己去开发吧。</p>\n<blockquote>\n<p>其他具体可以参考</p>\n<p><a href=\"http://www.jellythink.com/archives/511\" target=\"_blank\" rel=\"external noopener noreferrer\">Lua中的元表与元方法</a></p>\n<p><a href=\"https://moonbingbing.gitbooks.io/openresty-best-practices/content/lua/metatable.html\" target=\"_blank\" rel=\"external noopener noreferrer\">LUA元表</a></p>\n</blockquote>","text":"在 Lua 5.1 语言中，元表 (metatable) 的表现行为类似于 C++ 语言中的操作符重载，例如我们可以重载 “add” 元方法 (metamethod)，来计算两个 Lua 数组的并集；或者重载 “index” 方法，来定义我们自己的 Hash 函数。 预定义操作集...","link":"","photos":[],"count_time":{"symbolsCount":"3.9k","symbolsTime":"4 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%A2%84%E5%AE%9A%E4%B9%89%E6%93%8D%E4%BD%9C%E9%9B%86%E5%90%88\"><span class=\"toc-text\">预定义操作集合</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%85%83%E8%A1%A8\"><span class=\"toc-text\">元表</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%85%83%E8%A1%A8%E7%9A%84%E8%B0%83%E7%94%A8%E6%96%B9%E5%BC%8F%E6%98%AF%E6%80%8E%E6%A0%B7%E7%9A%84%EF%BC%9F\"><span class=\"toc-text\">元表的调用方式是怎样的？</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%85%83%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">元方法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#index-%E5%85%83%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">__index 元方法</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">面向对象</span></a></li></ol></li></ol></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Lua 学习 chapter29","uid":"a4c98ad06ca3599e0de5bb28fa27392c","slug":"zl/2016-01-01-914_Lua 学习 chapter29 ","date":"2024-04-03T03:47:36.184Z","updated":"2024-04-03T03:47:36.185Z","comments":true,"path":"api/articles/zl/2016-01-01-914_Lua 学习 chapter29 .json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"目录 前言 c函数 延续 c模块 生活总需要一点仪式感，然后慢慢的像那个趋向完美的自己靠近。 前言 Lua调用c函数时，我们必须注册该函数，即不需以一种恰当的方式为lua提供该c函数的地址。 lua调用c函数时，也使用了一个与c语言调用Lua函数时相同类型的栈，c函数从栈中获取参...","link":"","photos":[],"count_time":{"symbolsCount":"7.1k","symbolsTime":"6 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Programming in Lua摘录","uid":"cb778e9fbe266619575d7969eb9ee508","slug":"zl/2016-01-01-910_Programming in Lua摘录","date":"2024-04-03T03:47:36.183Z","updated":"2024-04-03T03:47:36.183Z","comments":true,"path":"api/articles/zl/2016-01-01-910_Programming in Lua摘录.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"“袁承志知道若再谦逊，那就是瞧人不起，展开五行拳，发拳当胸打去。荣彩和旁观三人本来都以为他武功有独到之秘，哪知使出来的竟是武林中最寻常不过的五行拳。 敌对三人登时意存轻视，温青脸上不自禁露出失望的神色。 “荣彩心中暗喜，双拳如风，连抢三下攻势，满拟自己的大力魔爪手江南独步，三四招...","link":"","photos":[],"count_time":{"symbolsCount":237,"symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}