{"title":"150.逆波兰表达式求值（evaluate reverse polish notation）","uid":"48d2fbd6ac9821bd900193767d3f6714","slug":"zl/2016-01-01-1183_150.逆波兰表达式求值（evaluate reverse polish notation）","date":"2024-04-03T03:47:33.027Z","updated":"2024-04-03T03:47:33.027Z","comments":true,"path":"api/articles/zl/2016-01-01-1183_150.逆波兰表达式求值（evaluate reverse polish notation）.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<p>根据逆波兰表示法，求表达式的值。</p>\n<p>有效的运算符包括 +, -, *, / 。每个运算对象可以是整数，也可以是另一个逆波兰表达式。</p>\n<p><strong>说明：</strong></p>\n<ul>\n<li>整数除法只保留整数部分。</li>\n<li>给定逆波兰表达式总是有效的。换句话说，表达式总会得出有效数值且不存在除数为 0 的情况。</li>\n</ul>\n<p>示例 1：</p>\n<pre><code>输入: [&#34;2&#34;, &#34;1&#34;, &#34;+&#34;, &#34;3&#34;, &#34;*&#34;]\n输出: 9\n解释: ((2 + 1) * 3) = 9</code></pre><p>示例 2：</p>\n<pre><code>输入: [&#34;4&#34;, &#34;13&#34;, &#34;5&#34;, &#34;/&#34;, &#34;+&#34;]\n输出: 6\n解释: (4 + (13 / 5)) = 6</code></pre><p>示例 3：</p>\n<pre><code>输入: [&#34;10&#34;, &#34;6&#34;, &#34;9&#34;, &#34;3&#34;, &#34;+&#34;, &#34;-11&#34;, &#34;*&#34;, &#34;/&#34;, &#34;*&#34;, &#34;17&#34;, &#34;+&#34;, &#34;5&#34;, &#34;+&#34;]\n输出: 22\n解释:\n  ((10 * (6 / ((9 + 3) * -11))) + 17) + 5\n= ((10 * (6 / (12 * -11))) + 17) + 5\n= ((10 * (6 / -132)) + 17) + 5\n= ((10 * 0) + 17) + 5\n= (0 + 17) + 5\n= 17 + 5\n= 22</code></pre><h1 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h1><h2 id=\"官方题解\"><a href=\"#官方题解\" class=\"headerlink\" title=\"官方题解\"></a>官方题解</h2><p>暂无</p>\n<h2 id=\"其他题解\"><a href=\"#其他题解\" class=\"headerlink\" title=\"其他题解\"></a>其他题解</h2><h3 id=\"1-数组\"><a href=\"#1-数组\" class=\"headerlink\" title=\"1.数组\"></a>1.数组</h3><p><strong>思路：</strong></p>\n<pre><code>class Solution &#123;\n    public int evalRPN(String[] tokens) &#123;\n        int[] stack = new int[tokens.length];\n        int k= -1;\n        for(String s : tokens) &#123;\n            switch(s) &#123;\n                case &#34;+&#34;:\n                    stack[k-1] += stack[k];\n                    k--;\n                    break;\n                case &#34;-&#34;:\n                    stack[k-1] -= stack[k];\n                    k--;\n                    break;\n                case &#34;*&#34;:\n                    stack[k-1] *= stack[k];\n                    k--;\n                    break;\n                case &#34;/&#34;:\n                    stack[k-1] /= stack[k];\n                    k--;\n                    break;\n                default:\n                    stack[++k] = Integer.parseInt(s);\n            &#125;\n        &#125;\n        return stack[0];\n    &#125;\n&#125;\n<p></code></pre><h3 id=\"2-栈\"><a href=\"#2-栈\" class=\"headerlink\" title=\"2.栈\"></a>2.栈</h3><p><strong>思路：</strong></p></p>\n<pre><code>class Solution &#123;\n    public int evalRPN(String[] tokens) &#123;\n        Stack&lt;Integer&gt; stack = new Stack&lt;&gt;();\n        for (String s : tokens) &#123;\n            if (s.equals(&#34;+&#34;)) &#123;\n                stack.push(stack.pop() + stack.pop());\n            &#125; else if (s.equals(&#34;-&#34;)) &#123;\n                stack.push(-stack.pop() + stack.pop());\n            &#125; else if (s.equals(&#34;*&#34;)) &#123;\n                stack.push(stack.pop() * stack.pop());\n            &#125; else if (s.equals(&#34;/&#34;)) &#123;\n                int num1 = stack.pop();\n                stack.push(stack.pop() / num1);\n            &#125; else &#123;\n                stack.push(Integer.parseInt(s));\n            &#125;\n        &#125;\n        return stack.pop();\n    &#125;\n\n&#125;\n</code></pre><hr/>\n<p><strong><em>参考：<br/><a href=\"https://leetcode-cn.com/problems/evaluate-reverse-polish-notation/submissions/\" target=\"_blank\" rel=\"noopener noreferrer\">LeetCode</a><br/><a href=\"https://leetcode-cn.com/problems/evaluate-reverse-polish-notation/solution/java-yi-dong-yi-jie-xiao-lu-gao-by-spirit-9-19/\" target=\"_blank\" rel=\"noopener noreferrer\">StackOverflow-</a></em></strong></p>\n<pre><code>   &lt;hr/&gt;&lt;span style=&quot;font-style: italic;color: gray;&quot;&gt; 转载请注明来源，欢迎对文章中的引用来源进行考证，欢迎指出任何有错误或不够清晰的表达。可以在下面评论区评论，也可以邮件至 1136075279@qq.com &lt;/span&gt;\n</code></pre>\n","text":"根据逆波兰表示法，求表达式的值。 有效的运算符包括 +, -, *, / 。每个运算对象可以是整数，也可以是另一个逆波兰表达式。 说明： 整数除法只保留整数部分。 给定逆波兰表达式总是有效的。换句话说，表达式总会得出有效数值且不存在除数为 0 的情况。 示例 1： 输入: [&#...","link":"","photos":[],"count_time":{"symbolsCount":"2.6k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E9%A2%98%E8%A7%A3\"><span class=\"toc-text\">题解</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AE%98%E6%96%B9%E9%A2%98%E8%A7%A3\"><span class=\"toc-text\">官方题解</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%85%B6%E4%BB%96%E9%A2%98%E8%A7%A3\"><span class=\"toc-text\">其他题解</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E6%95%B0%E7%BB%84\"><span class=\"toc-text\">1.数组</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E6%A0%88\"><span class=\"toc-text\">2.栈</span></a></li></ol></li></ol></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"开发笔记(2) 服务器Lua战斗","uid":"41fdac5ddcf197d3c03efe34a7a44c49","slug":"zl/2016-01-01-119_开发笔记(2) 服务器Lua战斗","date":"2024-04-03T03:47:33.028Z","updated":"2024-04-03T03:47:33.029Z","comments":true,"path":"api/articles/zl/2016-01-01-119_开发笔记(2) 服务器Lua战斗.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"服务器战斗系统是自动战斗的，没有玩家实际操作，因此实际上是一份客户端的Lua战斗代码，这里讨论如何在Erlang中植入Lua代码。 1. Port Driver最开始，出于简单考虑，我使用Port Driver的方式来挂接战斗模块，使用erlualib库，通过luam:one_c...","link":"","photos":[],"count_time":{"symbolsCount":"3.2k","symbolsTime":"3 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"lua table.sort方法","uid":"01c9d92af8932c90299e16dc08da6f69","slug":"zl/2016-01-01-1182_lua table.sort方法","date":"2024-04-03T03:47:33.027Z","updated":"2024-04-03T03:47:33.027Z","comments":true,"path":"api/articles/zl/2016-01-01-1182_lua table.sort方法.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":" 排序出现报错 排序顺序不正确的现象 报错1invalid order function for sorting出现了一次报错，但是在测试过程中没有复现，之后项目中出现了相同报错导致场景打不开。顺序不正确例子（功能：对一系列名称进行排序）：1234567891011121314l...","link":"","photos":[],"count_time":{"symbolsCount":"8.8k","symbolsTime":"8 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}