{"title":"Lua 元表和元方法","uid":"3578146204897b2ed88da7c36006379f","slug":"zl/2016-01-01-545_Lua 元表和元方法","date":"2024-04-03T03:47:35.812Z","updated":"2024-04-03T03:47:35.812Z","comments":true,"path":"api/articles/zl/2016-01-01-545_Lua 元表和元方法.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<p>table 作为 Lua 中唯一的数据结构，我们可以利用 table 实现面向对象编程中的类、继承、多重继承等等。在这就介绍一下和 table 密切相关的 Lua 元表和元方法。</p>\n<p>Lua 中的每个值都有一个元表。table 和 userdata 可以有各自独立的元表，而其他类型的值则共享其类型所属的单一元表。任何 table 都可以作为任何值的元表，而一组相关的 table 也可以共享一个通用的元表。一个 table 甚至可以作为它自己的元表。</p>\n<p>通过 <code>getmetatable</code> 方法可以获取一个值的元表，而 <code>setmetatable</code> 方法则可以设置一个值的元表。</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">t = {}</div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">getmetatable</span>(t)) </div><div class=\"line\">t1 = {}</div><div class=\"line\"><span class=\"built_in\">setmetatable</span>(t, t1)</div><div class=\"line\"><span class=\"built_in\">assert</span>(<span class=\"built_in\">getmetatable</span>(t) == t1)</div><div class=\"line\"></div><div class=\"line\">t2 = {}</div><div class=\"line\"><span class=\"built_in\">setmetatable</span>(t2, t2)</div><div class=\"line\"><span class=\"built_in\">assert</span>(<span class=\"built_in\">getmetatable</span>(t2) == t2)</div></pre></td></tr></tbody></table></figure>\n<p>在 Lua 代码中，只能设置 table 的元表。若要设置其他类型的值的元表，则必须通过 C 代码来完成。从下面的代码也可以看出 Lua 中的所有字符串值是共用一个元表的。</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">getmetatable</span>(<span class=\"string\">&#34;hi&#34;</span>)) <span class=\"comment\">--&gt; table: 0x7fd0b14074b0</span></div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">getmetatable</span>(<span class=\"string\">&#34;hello&#34;</span>)) <span class=\"comment\">--&gt; table: 0x7fd0b14074b0</span></div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">getmetatable</span>(<span class=\"number\">10</span>)) </div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">getmetatable</span>(<span class=\"keyword\">false</span>)) </div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">getmetatable</span>(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span></span> <span class=\"keyword\">end</span>)) </div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">setmetatable</span>(<span class=\"string\">&#34;hi&#34;</span>, {}) <span class=\"comment\">--&gt; error:bad argument #1 to &#39;setmetatable&#39; (table expected, got string)</span></div></pre></td></tr></tbody></table></figure>\n<p>关于 Lua 的元表和元方法，在云风翻译的 <a href=\"http://cloudwu.github.io/lua53doc/\" target=\"_blank\" rel=\"external noopener noreferrer\">Lua 5.3 参考手册</a> 中有以下描述：</p>\n<blockquote>\n<p>Lua 中的每个值都可以有一个<strong>元表</strong>。这个 <strong>元表</strong> 就是一个普通的 Lua 表，它用于定义原始值在特定操作下的行为。如果你想改变一个值在特定操作下的行为，你可以在它的元表中设置对应域。例如，当你对非数字值做加操作时，Lua 会检查该值的元表中的 “<code>__add</code>“ 域下的函数。如果能找到，Lua 则调用这个函数来完成加这个操作。</p>\n<p>元表中的键对应着不同的 <strong>事件</strong> 名；键关联的那些值被称为 <strong>元方法</strong>。在上面那个例子中引用的事件为 <code>&#34;add&#34;</code> ，完成加操作的那个函数就是元方法。</p>\n<p>你可以用 <a href=\"http://cloudwu.github.io/lua53doc/manual.html#pdf-getmetatable\" target=\"_blank\" rel=\"external noopener noreferrer\"><code>getmetatable</code></a> 函数来获取任何值的元表。</p>\n<p>使用 <a href=\"http://cloudwu.github.io/lua53doc/manual.html#pdf-setmetatable\" target=\"_blank\" rel=\"external noopener noreferrer\"><code>setmetatable</code></a> 来替换一张表的元表。在 Lua 中，你不可以改变表以外其它类型的值的元表（除非你使用调试库（参见<a href=\"http://cloudwu.github.io/lua53doc/manual.html#6.10\" target=\"_blank\" rel=\"external noopener noreferrer\">§6.10</a>））；若想改变这些非表类型的值的元表，请使用 C API。</p>\n<p>表和完全用户数据有独立的元表（当然，多个表和用户数据可以共享同一个元表）。其它类型的值按类型共享元表；也就是说所有的数字都共享同一个元表，所有的字符串共享另一个元表等等。默认情况下，值是没有元表的，但字符串库在初始化的时候为字符串类型设置了元表（参见 <a href=\"http://cloudwu.github.io/lua53doc/manual.html#6.4\" target=\"_blank\" rel=\"external noopener noreferrer\">§6.4</a>）。</p>\n<p>元表决定了一个对象在数学运算、位运算、比较、连接、取长度、调用、索引时的行为。元表还可以定义一个函数，当表对象或用户数据对象在垃圾回收（参见<a href=\"http://cloudwu.github.io/lua53doc/manual.html#2.5\" target=\"_blank\" rel=\"external noopener noreferrer\">§2.5</a>）时调用它。</p>\n<p>接下来会给出一张元表可以控制的事件的完整列表。每个操作都用对应的事件名来区分。每个事件的键名用加有 ‘<code>__</code>‘ 前缀的字符串来表示；例如 “add” 操作的键名为字符串 “<code>__add</code>“。注意、Lua 从元表中直接获取元方法；访问元表中的元方法永远不会触发另一次元方法。下面的代码模拟了 Lua 从一个对象 <code>obj</code> 中获取一个元方法的过程：<code>rawget(getmetatable(obj) or &#123;&#125;, &#34;__&#34; .. event_name)</code>。</p>\n<p>对于一元操作符（取负、求长度、位反），元方法调用的时候，第二个参数是个哑元，其值等于第一个参数。这样处理仅仅是为了简化 Lua 的内部实现（这样处理可以让所有的操作都和二元操作一致），这个行为有可能在将来的版本中移除。（使用这个额外参数的行为都是不确定的。）</p>\n<ul>\n<li><strong>“add”: </strong><code>+</code> 操作。如果任何不是数字的值（包括不能转换为数字的字符串）做加法，Lua 就会尝试调用元方法。首先、Lua 检查第一个操作数（即使它是合法的），如果这个操作数没有为 “<code>__add</code>“ 事件定义元方法，Lua 就会接着检查第二个操作数。一旦 Lua 找到了元方法，它将把两个操作数作为参数传入元方法，元方法的结果（调整为单个值）作为这个操作的结果。如果找不到元方法，将抛出一个错误。</li>\n<li><strong>“sub”: </strong><code>-</code> 操作。行为和 “add” 操作类似。</li>\n<li><strong>“mul”: </strong><code>*</code> 操作。行为和 “add” 操作类似。</li>\n<li><strong>“div”: </strong><code>/</code> 操作。行为和 “add” 操作类似。</li>\n<li><strong>“mod”: </strong><code>%</code> 操作。行为和 “add” 操作类似。</li>\n<li><strong>“pow”: </strong><code>^</code> （次方）操作。行为和 “add” 操作类似。</li>\n<li><strong>“unm”: </strong><code>-</code> （取负）操作。行为和 “add” 操作类似。</li>\n<li><strong>“idiv”: </strong><code>//</code> （向下取整除法）操作。行为和 “add” 操作类似。</li>\n<li><strong>“band”: </strong><code>&amp;</code> （按位与）操作。行为和 “add” 操作类似，不同的是 Lua 会在任何一个操作数无法转换为整数时（参见 <a href=\"http://cloudwu.github.io/lua53doc/manual.html#3.4.3\" target=\"_blank\" rel=\"external noopener noreferrer\">§3.4.3</a>）尝试取元方法。</li>\n<li><strong>“bor”: </strong><code>|</code> （按位或）操作。行为和 “band” 操作类似。</li>\n<li><strong>“bxor”: </strong><code>~</code> （按位异或）操作。行为和 “band” 操作类似。</li>\n<li><strong>“bnot”: </strong><code>~</code> （按位非）操作。行为和 “band” 操作类似。</li>\n<li><strong>“shl”: </strong><code>&lt;&lt;</code> （左移）操作。行为和 “band” 操作类似。</li>\n<li><strong>“shr”: </strong><code>&gt;&gt;</code> （右移）操作。行为和 “band” 操作类似。</li>\n<li><strong>“concat”: </strong><code>..</code> （连接）操作。行为和 “add” 操作类似，不同的是 Lua 在任何操作数即不是一个字符串也不是数字（数字总能转换为对应的字符串）的情况下尝试元方法。</li>\n<li><strong>“len”: </strong><code>#</code> （取长度）操作。如果对象不是字符串，Lua 会尝试它的元方法。如果有元方法，则调用它并将对象以参数形式传入，而返回值（被调整为单个）则作为结果。如果对象是一张表且没有元方法，Lua 使用表的取长度操作（参见 <a href=\"http://cloudwu.github.io/lua53doc/manual.html#3.4.7\" target=\"_blank\" rel=\"external noopener noreferrer\">§3.4.7</a>）。其它情况，均抛出错误。</li>\n<li><strong>“eq”: </strong><code>==</code> （等于）操作。和 “add” 操作行为类似，不同的是 Lua 仅在两个值都是表或都是完全用户数据且它们不是同一个对象时才尝试元方法。调用的结果总会被转换为布尔量。</li>\n<li><strong>“lt”: </strong><code>&lt;</code> （小于）操作。和 “add” 操作行为类似，不同的是 Lua 仅在两个值不全为整数也不全为字符串时才尝试元方法。调用的结果总会被转换为布尔量。</li>\n<li><strong>“le”: </strong><code>&lt;=</code> （小于等于）操作。和其它操作不同，小于等于操作可能用到两个不同的事件。首先，像 “lt” 操作的行为那样，Lua 在两个操作数中查找 “<code>__le</code>“ 元方法。如果一个元方法都找不到，就会再次查找 “<code>__lt</code>“ 事件，它会假设 <code>a &lt;= b</code> 等价于 <code>not (b &lt; a)</code>。而其它比较操作符类似，其结果会被转换为布尔量。</li>\n<li><strong>“index”: </strong>索引 <code>table[key]</code>。当 <code>table</code> 不是表或是表 <code>table</code> 中不存在<code>key</code> 这个键时，这个事件被触发。此时，会读出 <code>table</code> 相应的元方法。尽管名字取成这样，这个事件的元方法其实可以是一个函数也可以是一张表。如果它是一个函数，则以 <code>table</code> 和 <code>key</code> 作为参数调用它。如果它是一张表，最终的结果就是以 <code>key</code> 取索引这张表的结果。（这个索引过程是走常规的流程，而不是直接索引，所以这次索引有可能引发另一次元方法。）</li>\n<li><strong>“newindex”: </strong>索引赋值 <code>table[key] = value</code> 。和索引事件类似，它发生在<code>table</code> 不是表或是表 <code>table</code> 中不存在<code>key</code> 这个键的时候。此时，会读出 <code>table</code> 相应的元方法。同索引过程那样，这个事件的元方法即可以是函数，也可以是一张表。如果是一个函数，则以 <code>table</code>、 <code>key</code>、以及 <code>value</code> 为参数传入。如果是一张表，Lua 对这张表做索引赋值操作。（这个索引过程是走常规的流程，而不是直接索引赋值，所以这次索引赋值有可能引发另一次元方法。）一旦有了 “newindex” 元方法，Lua 就不再做最初的赋值操作。（如果有必要，在元方法内部可以调用 <a href=\"http://cloudwu.github.io/lua53doc/manual.html#pdf-rawset\" target=\"_blank\" rel=\"external noopener noreferrer\"><code>rawset</code></a>来做赋值。）</li>\n<li><strong>“call”: </strong>函数调用操作 <code>func(args)</code>。当 Lua 尝试调用一个非函数的值的时候会触发这个事件（即 <code>func</code> 不是一个函数）。查找 <code>func</code> 的元方法，如果找得到，就调用这个元方法，<code>func</code> 作为第一个参数传入，原来调用的参数（<code>args</code>）后依次排在后面。</li>\n</ul>\n</blockquote>\n<p>算术类的元方法：<code>__add</code>（加法）、<code>__mul</code>（乘法）、<code>__sub</code>（减法）、<code>__div</code>（除法）、<code>__unm</code>（相反数）、<code>__mod</code>（取模）、<code>__pow</code>（乘幂）。</p>\n<p>关系类的元方法：<code>__eq</code>（等于）、<code>__lt</code>（小于）、<code>__le</code>（小于等于）。其他的关系操作符则没有单独的元方法，Lua 会将 <code>a ~= b</code> 转换为 <code>not a == b</code> ，将 <code>a &gt; b</code> 转换为 <code>a &lt; b</code> ，将 <code>a &gt;= b</code> 转换为 <code>a &lt;= b</code> 。</p>\n<p>库定义的元方法：<code>__tostring</code>、<code>__metatable</code>。</p>\n<p>函数 print 总是调用 tostring 来格式化其输出。当格式化任意值时，tostring 会检查该值是否有一个 <code>__tostring</code> 的元方法。如果有这个元方法，tostring 就用该值作为参数来调用这个元方法，该元方法的返回值就是 tostring 的结果。</p>\n<p>函数 setmetatable 和 getmetatable 会触发 <code>__metatable</code> 元方法。当 Lua 中的值拥有该元方法时，getmetatable 就会返回这个字段的值，而 setmetatable 则会引发一个错误。因此我们可以使用 <code>__metatable</code> 元方法来保护任意值的元表，这样值的元表就不会被随意修改了。</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">t = {}</div><div class=\"line\">mt = {}</div><div class=\"line\">mt.__metatable = <span class=\"string\">&#34;not your business&#34;</span></div><div class=\"line\"><span class=\"built_in\">setmetatable</span>(t, mt)</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">getmetatable</span>(t)) <span class=\"comment\">--&gt; not your business</span></div><div class=\"line\"><span class=\"built_in\">setmetatable</span>(t, {}) <span class=\"comment\">--&gt; error:cannot change a protected metatable</span></div></pre></td></tr></tbody></table></figure>\n<p>table 访问的元方法：<code>__index</code>、<code>__newindex</code>。</p>\n<h1 id=\"算术类和关系类的元方法\"><a href=\"#算术类和关系类的元方法\" class=\"headerlink\" title=\"算术类和关系类的元方法\"></a>算术类和关系类的元方法</h1><p>算术类和关系类的元方法类似于其他编程语言中的操作符重载，我们可以利用元方法来实现任何不是数字的值（包括不能转换为数字的字符串）的算术和关系运算。</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">local</span> mt = {}</div><div class=\"line\">mt.__add = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(a, b)</span></span></div><div class=\"line\">\t<span class=\"built_in\">print</span>(<span class=\"string\">&#34;call mt.__add&#34;</span>)</div><div class=\"line\">\t<span class=\"keyword\">return</span> {x = a.x + b.x, y = a.y + b.y}</div><div class=\"line\"><span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\">mt.__eq = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(a, b)</span></span></div><div class=\"line\">\t<span class=\"built_in\">print</span>(<span class=\"string\">&#34;call mt.__eq&#34;</span>)</div><div class=\"line\">\t<span class=\"keyword\">return</span> a.x == b.x <span class=\"keyword\">and</span> a.y == b.y</div><div class=\"line\"><span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\">mt.__tostring = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(point)</span></span></div><div class=\"line\">\t<span class=\"built_in\">print</span>(<span class=\"string\">&#34;call mt.__tostring&#34;</span>)</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"built_in\">string</span>.format(<span class=\"string\">&#34;[x = %f, y = %f]&#34;</span>, point.x, point.y)</div><div class=\"line\"><span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\">Point = {}</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(x, y)</span></span></div><div class=\"line\">\t<span class=\"keyword\">local</span> point = {x = x, y = y}</div><div class=\"line\">\t<span class=\"built_in\">setmetatable</span>(point, mt)</div><div class=\"line\">\t<span class=\"keyword\">return</span> point</div><div class=\"line\"><span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">local</span> p1 = Point.new(<span class=\"number\">10</span>, <span class=\"number\">10</span>)</div><div class=\"line\"><span class=\"keyword\">local</span> p2 = Point.new(<span class=\"number\">20</span>, <span class=\"number\">20</span>)</div><div class=\"line\"><span class=\"built_in\">print</span>(p1)</div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">tostring</span>(p2))</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#34;----------&#34;</span>)</div><div class=\"line\"><span class=\"keyword\">local</span> p3 = p1 + p2</div><div class=\"line\"><span class=\"built_in\">print</span>(p3)</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#34;----------&#34;</span>)</div><div class=\"line\"><span class=\"built_in\">print</span>(p1 == p2)</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#34;----------&#34;</span>)</div><div class=\"line\"><span class=\"built_in\">print</span>(p1 ~= p2)</div></pre></td></tr></tbody></table></figure>\n<p>执行以上代码输出如下：</p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">call mt.__tostring</div><div class=\"line\">[x = 10.000000, y = 10.000000]</div><div class=\"line\">call mt.__tostring</div><div class=\"line\">[x = 20.000000, y = 20.000000]</div><div class=\"line\">----------</div><div class=\"line\">call mt.__add</div><div class=\"line\">table: 0x7fd462504e10</div><div class=\"line\">----------</div><div class=\"line\">call mt.__eq</div><div class=\"line\">false</div><div class=\"line\">----------</div><div class=\"line\">call mt.__eq</div><div class=\"line\">true</div></pre></td></tr></tbody></table></figure>\n<h1 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h1><p>在这只是简单介绍了 Lua 中的元表和元方法的概念，以及算术类和关系类的元方法的使用。但其实 table 访问的元方法 <code>__index</code> 和 <code>__newindex</code> 才是在 Lua 实现面向对象编程的关键，这个会在下一篇文章中介绍。</p>\n<hr/>\n<blockquote>\n<p>本文出自 <a href=\"http://eddy.wiki\" target=\"_blank\" rel=\"external noopener noreferrer\">Eddy Wiki</a> ，转载请注明出处：<a href=\"http://eddy.wiki/lua-metatable.html\" target=\"_blank\" rel=\"external noopener noreferrer\">http://eddy.wiki/lua-metatable.html</a></p>\n</blockquote>","text":"table 作为 Lua 中唯一的数据结构，我们可以利用 table 实现面向对象编程中的类、继承、多重继承等等。在这就介绍一下和 table 密切相关的 Lua 元表和元方法。 Lua 中的每个值都有一个元表。table 和 userdata 可以有各自独立的元表，而其他类型的...","link":"","photos":[],"count_time":{"symbolsCount":"5.8k","symbolsTime":"5 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%AE%97%E6%9C%AF%E7%B1%BB%E5%92%8C%E5%85%B3%E7%B3%BB%E7%B1%BB%E7%9A%84%E5%85%83%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">算术类和关系类的元方法</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%9C%80%E5%90%8E\"><span class=\"toc-text\">最后</span></a></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Lua入门教程：数值","uid":"6074a1e57b92e07ba1d7b02f99471460","slug":"zl/2016-01-01-546_Lua入门教程：数值","date":"2024-04-03T03:47:35.816Z","updated":"2024-04-03T03:47:35.817Z","comments":true,"path":"api/articles/zl/2016-01-01-546_Lua入门教程：数值.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"Lua 5.2 以及之前的版本，所有数值类型都是以双精度浮点数表示，并且所有浮点型数值最大都是 2^54，但是 Lua 5.3 版本引入了整形，最大可用 64 位表示。 数值表示方式Lua 数值默认是十进制表示，除了整形之外，其他小数或者指数都会当做浮点型数值。我们可以使用函数 ...","link":"","photos":[],"count_time":{"symbolsCount":"5k","symbolsTime":"5 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Lua 语言初识","uid":"d683e3e38173229529b67d9d3a36513c","slug":"zl/2016-01-01-544_Lua 语言初识","date":"2024-04-03T03:47:35.812Z","updated":"2024-04-03T03:47:35.812Z","comments":true,"path":"api/articles/zl/2016-01-01-544_Lua 语言初识.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"Lua 是一个小巧的脚本语言 Lua脚本可以很容易的被C/C++ 代码调用，也可以反过来调用C/C++的函数，这使得Lua在应用程序中可以被广泛应用。不仅仅作为扩展脚本，也可以作为普通的配置文件，代替XML,ini等文件格式，并且更容易理解和维护。[2] Lua由标准C编写而成，...","link":"","photos":[],"count_time":{"symbolsCount":687,"symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}