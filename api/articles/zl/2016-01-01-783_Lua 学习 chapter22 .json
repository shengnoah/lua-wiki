{"title":"Lua 学习 chapter22","uid":"4a87df76c39f3f8150fdb435e35555f2","slug":"zl/2016-01-01-783_Lua 学习 chapter22 ","date":"2024-04-03T03:47:36.019Z","updated":"2024-04-03T03:47:36.023Z","comments":true,"path":"api/articles/zl/2016-01-01-783_Lua 学习 chapter22 .json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<h3 id=\"目录\">目录</h3>\n<ol>\n  <li>具有动态名称的全局变量</li>\n  <li>非全局环境</li>\n  <li>环境和模块</li>\n  <li>_ENV和load</li>\n</ol>\n<blockquote>\n  <p>只有疯狂过，你才知道自己究竟能不能成功。</p>\n</blockquote>\n<h2 id=\"具有动态名称的全局变量\">具有动态名称的全局变量</h2>\n<p>在lua中，所有的全局变量都被存在_G中，通过_G[name]可以访问到任意一个全局变量。在lua中，全局变量不需要声明就可以直接使用，但是这个可能会造成非常难以查询的bug，所以我们可以对全局变量进行简单的封装。</p>\n<div class=\"language-lua highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n</pre></td><td class=\"rouge-code\"><pre><span class=\"nb\">setmetatable</span><span class=\"p\">(</span><span class=\"nb\">_G</span><span class=\"p\">,</span> <span class=\"p\">&#123;</span>\n    <span class=\"n\">__newindex</span> <span class=\"o\">=</span> <span class=\"k\">function</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">)</span>\n        <span class=\"nb\">error</span><span class=\"p\">(</span><span class=\"s2\">&#34;attempt to write to undeclared variable&#34;</span> <span class=\"o\">..</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n    <span class=\"k\">end</span><span class=\"p\">,</span>\n    <span class=\"n\">__index</span> <span class=\"o\">=</span> <span class=\"k\">function</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">)</span>\n        <span class=\"nb\">error</span><span class=\"p\">(</span><span class=\"s2\">&#34;attempt to read undeclared variable&#34;</span> <span class=\"o\">..</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n    <span class=\"k\">end</span>\n<span class=\"p\">&#125;)</span>\n<span class=\"c1\">--这样我们怎么对全局变量初始化呢？使用rawset方法。</span>\n<span class=\"k\">function</span> <span class=\"nf\">declare</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">initval</span><span class=\"p\">)</span>\n    <span class=\"nb\">rawset</span><span class=\"p\">(</span><span class=\"nb\">_G</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">initval</span> <span class=\"ow\">or</span> <span class=\"kc\">false</span><span class=\"p\">)</span>\n<span class=\"k\">end</span>\n<p><span class=\"c1\">–改版后的</span><br />\n<span class=\"kd\">local</span> <span class=\"n\">declaredNames</span> <span class=\"o\">=</span> <span class=\"p\">&#123;&#125;</span><br />\n<span class=\"nb\">setmetatable</span><span class=\"p\">(</span><span class=\"nb\"><em>G</span><span class=\"p\">,</span> <span class=\"p\">&#123;</span><br />\n<span class=\"n\">__newindex</span> <span class=\"o\">=</span> <span class=\"k\">function</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">)</span><br />\n<span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">declaredNames</span><span class=\"p\">[</span><span class=\"n\">n</span><span class=\"p\">]</span> <span class=\"k\">then</span><br />\n<span class=\"kd\">local</span> <span class=\"n\">w</span> <span class=\"o\">=</span> <span class=\"nb\">debug.getinfo</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s2\">&quot;S&quot;</span><span class=\"p\">).</span><span class=\"n\">what</span><br />\n<span class=\"k\">if</span> <span class=\"n\">w</span> <span class=\"o\">~=</span> <span class=\"s2\">&quot;main&quot;</span> <span class=\"ow\">and</span> <span class=\"n\">w</span> <span class=\"o\">~=</span> <span class=\"s2\">&quot;C&quot;</span> <span class=\"k\">then</span><br />\n<span class=\"nb\">error</span><span class=\"p\">(</span><span class=\"s2\">&quot;attempt to write to undeclared variable&quot;</span> <span class=\"o\">…</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span><br />\n<span class=\"k\">end</span><br />\n<span class=\"n\">declaredNames</span><span class=\"p\">[</span><span class=\"n\">n</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><br />\n<span class=\"k\">end</span><br />\n<span class=\"nb\">rawset</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">)</span><br />\n<span class=\"k\">end</span><span class=\"p\">,</span><br />\n<span class=\"n\">__index</span> <span class=\"o\">=</span> <span class=\"k\">function</span><span class=\"p\">(</span><span class=\"n\"></em></span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">)</span><br />\n<span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">declaredNames</span><span class=\"p\">[</span><span class=\"n\">n</span><span class=\"p\">]</span> <span class=\"k\">then</span><br />\n<span class=\"nb\">error</span><span class=\"p\">(</span><span class=\"s2\">&quot;attempt to read undeclared variable&quot;</span> <span class=\"o\">…</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span><br />\n<span class=\"k\">else</span><br />\n<span class=\"k\">return</span> <span class=\"kc\">nil</span><br />\n<span class=\"k\">end</span><br />\n<span class=\"k\">end</span><br />\n<span class=\"p\">&#125;)</span><br />\n</pre></td></tr></tbody></table></code></pre></div></div></p>\n<h2 id=\"非全局环境\">非全局环境</h2>\n<p>lua语言中处理全局变量的方式：</p>\n<ul>\n  <li>编译器在编译所有代码之前，在外层创建局部变量_ENV</li>\n  <li>编译器将所有自由名称变换为_ENV.var;</li>\n  <li>函数load(or loadfile)使用全局环境初始化代码段的第一个上值，即lua语言内部维护的一个普通表。</li>\n</ul>\n<p>_ENV只是一个普通的变量，将其赋值为nil会使得后续的代码不能直接访问全局变量。</p>\n<p>我们还可以使用_ENV来绕过局部声明的变量，直接访问全局变量。</p>\n<div class=\"language-lua highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">local</span> <span class=\"nb\">print</span><span class=\"p\">,</span> <span class=\"n\">sin</span> <span class=\"o\">=</span> <span class=\"nb\">print</span><span class=\"p\">,</span> <span class=\"nb\">math.sin</span>\n<span class=\"n\">_ENV</span> <span class=\"o\">=</span> <span class=\"kc\">nil</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"mi\">13</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">sin</span><span class=\"p\">(</span><span class=\"mi\">13</span><span class=\"p\">))</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">cos</span><span class=\"p\">(</span><span class=\"mi\">13</span><span class=\"p\">))</span> <span class=\"c1\">--error 访问不到全局</span>\n<p><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"mi\">13</span><br />\n<span class=\"kd\">local</span> <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"mi\">12</span><br />\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span><br />\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">_ENV</span><span class=\"p\">.</span><span class=\"n\">a</span><span class=\"p\">)</span> <span class=\"c1\">–访问全局的a，当然也可以使用_G来访问全局的a</span></p>\n<p><span class=\"n\">_ENV</span> <span class=\"o\">=</span> <span class=\"p\">&#123;&#125;</span><br />\n<span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><br />\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span> <span class=\"c1\">–print is a nil</span></p>\n<p><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"mi\">15</span><br />\n<span class=\"n\">_ENV</span> <span class=\"o\">=</span> <span class=\"p\">&#123;</span><span class=\"n\">g</span> <span class=\"o\">=</span> <span class=\"nb\">_G</span><span class=\"p\">&#125;</span><br />\n<span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><br />\n<span class=\"n\">g</span><span class=\"p\">.</span><span class=\"n\">print</span><span class=\"p\">(</span><span class=\"n\">_ENV</span><span class=\"p\">.</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">g</span><span class=\"p\">.</span><span class=\"n\">a</span><span class=\"p\">&#125;</span> <span class=\"c1\">– 1 , 15</span><br />\n</pre></td></tr></tbody></table></code></pre></div></div></p>\n<p>通常_G和_ENV指向的是同一个表。但是，尽管如此，他们是很不一样的实体。_ENV是一个局部变量，所以对“全局变量”的访问实际上访问的都是_ENV。_G则是一个在任何情况下都没有任何特殊状态的全局变量。_ENV永远指向的是当前的环境；而假设在可见且无人改变过其值的前提下，_G通常指向的是全局变量。</p>\n<p>_ENV的主要作用就是改变当前的环境。</p>\n<h2 id=\"环境和模块\">环境和模块</h2>\n<p>为了防止污染全局环境：</p>\n<div class=\"language-lua highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">local</span> <span class=\"n\">M</span> <span class=\"o\">=</span> <span class=\"p\">&#123;&#125;</span>\n<span class=\"n\">_ENV</span> <span class=\"o\">=</span> <span class=\"p\">&#123;&#125;</span>\n<p><span class=\"k\">function</span> <span class=\"nf\">hello</span><span class=\"p\">()</span><br />\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;hello&quot;</span><span class=\"p\">)</span><br />\n<span class=\"k\">end</span></p>\n<p><span class=\"k\">function</span> <span class=\"nf\">sayHello</span><span class=\"p\">()</span><br />\n<span class=\"n\">hello</span><span class=\"p\">()</span> <span class=\"c1\">–M.hello</span><br />\n<span class=\"k\">end</span></p>\n<p><span class=\"kd\">local</span> <span class=\"n\">M</span> <span class=\"o\">=</span> <span class=\"p\">&#123;&#125;</span><br />\n<span class=\"kd\">local</span> <span class=\"n\">sqrt</span> <span class=\"o\">=</span> <span class=\"nb\">math.sqrt</span><br />\n<span class=\"kd\">local</span> <span class=\"k\">in</span> <span class=\"o\">=</span> <span class=\"n\">io</span><br />\n<span class=\"n\">_ENV</span> <span class=\"o\">=</span> <span class=\"kc\">nil</span><br />\n<span class=\"c1\">–这样就不能进行外部访问了</span></p>\n<p></pre></td></tr></tbody></table></code></pre></div></div></p>\n<p>load函数通常被加载代码段的上值_ENV初始化为全局变量。</p>\n<h2 id=\"_env和load\">_ENV和load</h2>\n<p>函数load通常把加载代码段的上值_ENV初始化为全局变量。不过，函数load还有一个可选的第四个参数来让我们为_ENV指定一个不同的初始值。</p>\n<div class=\"language-lua highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n</pre></td><td class=\"rouge-code\"><pre><span class=\"c1\">--file &#34;config.lua&#34;</span>\n<span class=\"n\">width</span> <span class=\"o\">=</span> <span class=\"mi\">200</span>\n<span class=\"n\">height</span> <span class=\"o\">=</span> <span class=\"mi\">100</span>\n<p><span class=\"c1\">–加载文件</span><br />\n<span class=\"n\">env</span> <span class=\"o\">=</span> <span class=\"p\">&#123;&#125;</span><br />\n<span class=\"nb\">loadfile</span><span class=\"p\">(</span><span class=\"s2\">&quot;config&quot;</span><span class=\"p\">,</span><span class=\"s2\">&quot;t&quot;</span><span class=\"p\">,</span><span class=\"n\">env</span><span class=\"p\">)()</span><br />\n</pre></td></tr></tbody></table></code></pre></div></div></p>\n<p>配置文件中的代码会运行在空的环境env中，类似于某种沙盒。特别的，所有的定义都会进入这个环境中。即使出错，配置文件也无法影响任何别的东西。</p>\n<pre><code>            &lt;hr style=&quot;visibility: hidden;&quot;/&gt;\n            \n            &lt;hr style=&quot;visibility: hidden;&quot;/&gt;\n</code></pre>\n","text":"目录 具有动态名称的全局变量 非全局环境 环境和模块 _ENV和load 只有疯狂过，你才知道自己究竟能不能成功。 具有动态名称的全局变量 在lua中，所有的全局变量都被存在_G中，通过_G[name]可以访问到任意一个全局变量。在lua中，全局变量不需要声明就可以直接使用，但是...","link":"","photos":[],"count_time":{"symbolsCount":"2.6k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%9B%AE%E5%BD%95\"><span class=\"toc-text\">目录</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%85%B7%E6%9C%89%E5%8A%A8%E6%80%81%E5%90%8D%E7%A7%B0%E7%9A%84%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F\"><span class=\"toc-text\">具有动态名称的全局变量</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%9D%9E%E5%85%A8%E5%B1%80%E7%8E%AF%E5%A2%83\"><span class=\"toc-text\">非全局环境</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%8E%AF%E5%A2%83%E5%92%8C%E6%A8%A1%E5%9D%97\"><span class=\"toc-text\">环境和模块</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#_env%E5%92%8Cload\"><span class=\"toc-text\">_ENV和load</span></a>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Lua","uid":"15b0cdc6d03f6c3f6bf8d3a7ff197317","slug":"zl/2016-01-01-784_Lua","date":"2024-04-03T03:47:36.023Z","updated":"2024-04-03T03:47:36.024Z","comments":true,"path":"api/articles/zl/2016-01-01-784_Lua.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"table 操作 函数 解释 table.concat (table [, step [, start [, end]]]) 函数列出参数中指定table的数组部分从start位置到end位置的所有元素, 元素间以指定的分隔符(step)隔开 table.insert (tabl...","link":"","photos":[],"count_time":{"symbolsCount":"2.5k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Lua之Table个人总结","uid":"8e148f7d0ca183bc864d5f807e1a3198","slug":"zl/2016-01-01-782_Lua之Table个人总结","date":"2024-04-03T03:47:36.018Z","updated":"2024-04-03T03:47:36.018Z","comments":true,"path":"api/articles/zl/2016-01-01-782_Lua之Table个人总结.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":" 在lua中Table是数组和集合的混合物。作为数组时，可以使用除了nil以外的值作为索引。 Table的构造利用下标来标明元素123456local table = {}table[1]=&#39;hello&#39;table[5]=&#39;world&#39;for i,...","link":"","photos":[],"count_time":{"symbolsCount":"4.4k","symbolsTime":"4 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}