{"title":"基于Lua的State Pattern","uid":"5d95e81216fcb87d643bd992efc78ed7","slug":"zl/2016-01-01-844_基于Lua的State Pattern","date":"2024-04-03T03:47:36.098Z","updated":"2024-04-03T03:47:36.100Z","comments":true,"path":"api/articles/zl/2016-01-01-844_基于Lua的State Pattern.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<p>代码来自于最近写的Pacman，更多请查看 – <a href=\"https://github.com/bennychen/Moai-based-Pacman\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/bennychen/Moai-based-Pacman</a></p>\n<p>class.lua实现了在Lua中创建类的模拟，非常方便。class.lua参考自<a href=\"http://lua-users.org/wiki/SimpleLuaClasses\" target=\"_blank\" rel=\"noopener noreferrer\">http://lua-users.org/wiki/SimpleLuaClasses</a></p>\n<pre class=\"brush: lua; collapse: true; light: false; title: ; toolbar: true; notranslate\" title=\"\">-- class.lua\n-- Compatible with Lua 5.1 (not 5.0).\n\nfunction class(base, init)\n   local c = {}    -- a new class instance\n   if not init and type(base) == &#39;function&#39; then\n      init = base\n      base = nil\n   elseif type(base) == &#39;table&#39; then\n    -- our new class is a shallow copy of the base class!\n      for i,v in pairs(base) do\n         c[i] = v\n      end\n      c._base = base\n   end\n   -- the class will be the metatable for all its objects,\n   -- and they will look up their methods in it.\n   c.__index = c\n\n   -- expose a constructor which can be called by &lt;classname&gt;(&lt;args&gt;)\n   local mt = {}\n   mt.__call = function(class_tbl, ...)\n   local obj = {}\n   setmetatable(obj,c)\n\n-- below 2 lines are updated based on the Comments from &#39;http://lua-users.org/wiki/SimpleLuaClasses&#39;\n--   if init then\n--      init(obj,...)\n   if class_tbl.init then\n      class_tbl.init(obj,...)\n   else \n      -- make sure that any stuff from the base class is initialized!\n      if base and base.init then\n      base.init(obj, ...)\n      end\n   end\n   return obj\n   end\n   c.init = init\n   c.is_a = function(self, klass)\n      local m = getmetatable(self)\n      while m do \n         if m == klass then return true end\n         m = m._base\n      end\n      return false\n   end\n   setmetatable(c, mt)\n   return c\nend\n</pre>\n<p>State基类，包含三个stub函数，enter()和exit()分别在进入和退出state时被执行，onUpdate()函数将会在state被激活时的每帧被执行。</p>\n<pre class=\"brush: lua; title: ; notranslate\" title=\"\">require &#34;class&#34;\n\nState = class()\n\nfunction State:init( name )\n\tself.name = name\nend\n\nfunction State:enter()\nend\n\nfunction State:onUpdate()\nend\n\nfunction State:exit()\nend\n</pre>\n<p>StateMachine类，该类集成了<a href=\"http://getmoai.com\" target=\"_blank\" rel=\"noopener noreferrer\">Moai</a>的MOAIThread类。MOAIThread类似于Lua中的coroutine，但是在Moai中被yield的MOAIThread，会在game loop的每帧中被自动resume，见StateMachine:updateState函数，利用此特点，来实现每帧执行State:onUpdate函数。</p>\n<pre class=\"brush: lua; title: ; notranslate\" title=\"\">require &#34;State&#34;\n\nStateMachine = class()\n\nfunction StateMachine:init()\n\tself.currentState = nil\n\tself.lastState = nil\nend\n\nfunction StateMachine:run()\n\tif ( self.mainThread == nil )\n\tthen\n\t\tself.mainThread = MOAIThread.new()\n\t\tself.mainThread:run( self.updateState, self )\n\tend\nend\n\nfunction StateMachine:stop()\n\tif ( self.mainThread )\n\tthen\n\t\tself.mainThread:stop()\n\tend\nend\n\nfunction StateMachine:setCurrentState( state )\n\tif ( state and state:is_a( State ) )\n\tthen\n\t\tif ( state == self.currentState )\n\t\tthen\n\t\t\tprint( &#34;WARNING @ StateMachine::setCurrentState - &#34; ..\n\t\t\t\t   &#34;var state [&#34; .. state.name .. &#34;] is the same as current state&#34; )\n\t\t\treturn\n\t\tend\n\t\tself.lastState = self.currentState\n\t\tself.currentState = state\n\t\tif ( self.lastState )\n\t\tthen\n\t\t\tprint( &#34;exiting state [&#34; .. self.lastState.name .. &#34;]&#34; )\n\t\t\tself.lastState:exit()\n\t\tend\n\t\tprint( &#34;entering state [&#34; .. self.currentState.name .. &#34;]&#34; )\n\t\tself.currentState:enter()\n\telse\n\t\tprint( &#34;ERROR @ StateMachine::setCurrentState - &#34; ..\n\t\t\t   &#34;var [state] is not a class type of State&#34; )\n\tend\nend\n\nfunction StateMachine:updateState()\n\twhile ( true )\n\tdo\n\t\tif ( self.currentState ~= nil )\n\t\tthen\n\t\t\tself.currentState:onUpdate()\n\t\tend\n\t\tcoroutine.yield()\n\tend\nend\n</pre>\n<p>如何利用State和StateMachine类的示例，首先定义两个state。</p>\n<p>SampleState.lua</p>\n<pre class=\"brush: lua; title: ; notranslate\" title=\"\">require &#34;State&#34;\n\nState1 = class( State ) \n\nfunction State1:init()\n\tState.init( self, &#34;State1&#34; )\nend\n\nfunction State1:enter()\n\tself.i = 0\nend\n\nfunction State1:exit()\n\tself.i = 0\nend\n\nfunction State1:onUpdate()\n\tprint( self.name .. &#34; is updated&#34; )\n\tself.i = self.i + 1\n\tprint( &#34;self.i=&#34; .. self.i )\n\tif ( self.i == 10 )\n\tthen\n\t\tprint( state2 )\n\t\tSM:setCurrentState( state2 )\n\t\tself.i = 0\n\tend\nend\n\n-----------------------\n\nState2 = class( State ) \n\nfunction State2:init()\n\tState.init( self, &#34;State2&#34; )\nend\n\nfunction State2:onUpdate()\n\tprint( &#34;State2 is updated&#34; )\nend\n</pre>\n<p>test.lua</p>\n<pre class=\"brush: lua; title: ; notranslate\" title=\"\">require &#34;StateMachine&#34;\nrequire &#34;SampleState&#34;\n\nSM = StateMachine()\nSM:run()\nstate1 = State1()\nstate2 = State2()\nSM:setCurrentState( state1 )\n</pre>","text":"代码来自于最近写的Pacman，更多请查看 – https://github.com/bennychen/Moai-based-Pacman class.lua实现了在Lua中创建类的模拟，非常方便。class.lua参考自http://lua-users.org/wiki/Si...","link":"","photos":[],"count_time":{"symbolsCount":"4.1k","symbolsTime":"4 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Lua笔记","uid":"18e218b1ce63fa339b0d6998cc62c7f6","slug":"zl/2016-01-01-845_Lua笔记","date":"2024-04-03T03:47:36.101Z","updated":"2024-04-03T03:47:36.101Z","comments":true,"path":"api/articles/zl/2016-01-01-845_Lua笔记.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"最近使用Lua过程中的一些笔记记录，零零散散的，主要有以下这么些内容： 版本兼容性处理常接触到的Lua版本有5.1、5.2和5.3，在Lua中可以通过_VERSION获取版本： 1234567if _VERSION == &#34;Lua 5.3&#34; then print(...","link":"","photos":[],"count_time":{"symbolsCount":"6.1k","symbolsTime":"6 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"lua语法","uid":"6fd8143c3b34ef934d677c24fc2719a0","slug":"zl/2016-01-01-842_lua语法","date":"2024-04-03T03:47:36.094Z","updated":"2024-04-03T03:47:36.094Z","comments":true,"path":"api/articles/zl/2016-01-01-842_lua语法.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"lua特性开源，轻量级，c语言编写实现，实现面向对象有点绕，执行效率高 lua开发环境 linux 123456789101112131415-- 下载lua包、解压wget -c http://www.lua.org/ftp/lua-5.3.0.tar.gztar zxvf l...","link":"","photos":[],"count_time":{"symbolsCount":"4k","symbolsTime":"4 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}