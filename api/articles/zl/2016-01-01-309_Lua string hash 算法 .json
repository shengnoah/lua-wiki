{"title":"Lua string hash 算法","uid":"6adde4c0d4219f400e445d71ce124e5c","slug":"zl/2016-01-01-309_Lua string hash 算法 ","date":"2024-04-03T03:47:35.592Z","updated":"2024-04-03T03:47:35.593Z","comments":true,"path":"api/articles/zl/2016-01-01-309_Lua string hash 算法 .json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<p>我在前一篇文章介绍过下面这 3 个字符串拥有相同的 hash，会导致 Hash Dos 问题：</p>\n<div class=\"language-lua highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"s2\">&#34;0000000000000000000000000000000000&#34;</span>\n<span class=\"s2\">&#34;f0l0l0w0m0e0n0t0w0i0t0t0e0r0?0:0)0&#34;</span>\n<span class=\"s2\">&#34;x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0&#34;</span>\n</code></pre></div></div>\n<p>但是 Lua 并没有将自己的 string hash 算法暴露出来，那应该怎么验证呢？其实翻看 Lua 5.1.4 源码，<code class=\"highlighter-rouge\">lstring.c</code> 中关于 string hash 是这么定义的：</p>\n<div class=\"language-c highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">TString</span> <span class=\"o\">*</span><span class=\"nf\">luaS_newlstr</span> <span class=\"p\">(</span><span class=\"n\">lua_State</span> <span class=\"o\">*</span><span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"n\">str</span><span class=\"p\">,</span> <span class=\"kt\">size_t</span> <span class=\"n\">l</span><span class=\"p\">)</span> <span class=\"p\">&#123;</span>\n  <span class=\"n\">GCObject</span> <span class=\"o\">*</span><span class=\"n\">o</span><span class=\"p\">;</span>\n  <span class=\"kt\">unsigned</span> <span class=\"kt\">int</span> <span class=\"n\">h</span> <span class=\"o\">=</span> <span class=\"n\">cast</span><span class=\"p\">(</span><span class=\"kt\">unsigned</span> <span class=\"kt\">int</span><span class=\"p\">,</span> <span class=\"n\">l</span><span class=\"p\">);</span>  <span class=\"cm\">/* seed */</span>\n  <span class=\"kt\">size_t</span> <span class=\"n\">step</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">l</span><span class=\"o\">&gt;&gt;</span><span class=\"mi\">5</span><span class=\"p\">)</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">;</span>  <span class=\"cm\">/* if string is too long, don&#39;t hash all its chars */</span>\n  <span class=\"kt\">size_t</span> <span class=\"n\">l1</span><span class=\"p\">;</span>\n  <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">l1</span><span class=\"o\">=</span><span class=\"n\">l</span><span class=\"p\">;</span> <span class=\"n\">l1</span><span class=\"o\">&gt;=</span><span class=\"n\">step</span><span class=\"p\">;</span> <span class=\"n\">l1</span><span class=\"o\">-=</span><span class=\"n\">step</span><span class=\"p\">)</span>  <span class=\"cm\">/* compute hash */</span>\n    <span class=\"n\">h</span> <span class=\"o\">=</span> <span class=\"n\">h</span> <span class=\"o\">^</span> <span class=\"p\">((</span><span class=\"n\">h</span><span class=\"o\">&lt;&lt;</span><span class=\"mi\">5</span><span class=\"p\">)</span><span class=\"o\">+</span><span class=\"p\">(</span><span class=\"n\">h</span><span class=\"o\">&gt;&gt;</span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">+</span><span class=\"n\">cast</span><span class=\"p\">(</span><span class=\"kt\">unsigned</span> <span class=\"kt\">char</span><span class=\"p\">,</span> <span class=\"n\">str</span><span class=\"p\">[</span><span class=\"n\">l1</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]));</span>\n  <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">o</span> <span class=\"o\">=</span> <span class=\"n\">G</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">)</span><span class=\"o\">-&gt;</span><span class=\"n\">strt</span><span class=\"p\">.</span><span class=\"n\">hash</span><span class=\"p\">[</span><span class=\"n\">lmod</span><span class=\"p\">(</span><span class=\"n\">h</span><span class=\"p\">,</span> <span class=\"n\">G</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">)</span><span class=\"o\">-&gt;</span><span class=\"n\">strt</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">)];</span>\n       <span class=\"n\">o</span> <span class=\"o\">!=</span> <span class=\"nb\">NULL</span><span class=\"p\">;</span>\n       <span class=\"n\">o</span> <span class=\"o\">=</span> <span class=\"n\">o</span><span class=\"o\">-&gt;</span><span class=\"n\">gch</span><span class=\"p\">.</span><span class=\"n\">next</span><span class=\"p\">)</span> <span class=\"p\">&#123;</span>\n    <span class=\"n\">TString</span> <span class=\"o\">*</span><span class=\"n\">ts</span> <span class=\"o\">=</span> <span class=\"n\">rawgco2ts</span><span class=\"p\">(</span><span class=\"n\">o</span><span class=\"p\">);</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">ts</span><span class=\"o\">-&gt;</span><span class=\"n\">tsv</span><span class=\"p\">.</span><span class=\"n\">len</span> <span class=\"o\">==</span> <span class=\"n\">l</span> <span class=\"o\">&amp;&amp;</span> <span class=\"p\">(</span><span class=\"n\">memcmp</span><span class=\"p\">(</span><span class=\"n\">str</span><span class=\"p\">,</span> <span class=\"n\">getstr</span><span class=\"p\">(</span><span class=\"n\">ts</span><span class=\"p\">),</span> <span class=\"n\">l</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">))</span> <span class=\"p\">&#123;</span>\n      <span class=\"cm\">/* string may be dead */</span>\n      <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">isdead</span><span class=\"p\">(</span><span class=\"n\">G</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">),</span> <span class=\"n\">o</span><span class=\"p\">))</span> <span class=\"n\">changewhite</span><span class=\"p\">(</span><span class=\"n\">o</span><span class=\"p\">);</span>\n      <span class=\"k\">return</span> <span class=\"n\">ts</span><span class=\"p\">;</span>\n    <span class=\"p\">&#125;</span>\n  <span class=\"p\">&#125;</span>\n  <span class=\"k\">return</span> <span class=\"n\">newlstr</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"n\">str</span><span class=\"p\">,</span> <span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"n\">h</span><span class=\"p\">);</span>  <span class=\"cm\">/* not found */</span>\n<span class=\"p\">&#125;</span>\n</code></pre></div></div>\n<p>其实这个算法叫 JSHash，这里我用 LuaJIT 的 bit 来实现个：</p>\n<div class=\"language-lua highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">local</span> <span class=\"n\">bit</span> <span class=\"o\">=</span> <span class=\"nb\">require</span> <span class=\"s2\">&#34;bit&#34;</span>\n<p><span class=\"kd\">local</span> <span class=\"n\">lshift</span> <span class=\"o\">=</span> <span class=\"n\">bit</span><span class=\"p\">.</span><span class=\"n\">lshift</span><br />\n<span class=\"kd\">local</span> <span class=\"n\">rshift</span> <span class=\"o\">=</span> <span class=\"n\">bit</span><span class=\"p\">.</span><span class=\"n\">rshift</span><br />\n<span class=\"kd\">local</span> <span class=\"n\">bxor</span> <span class=\"o\">=</span> <span class=\"n\">bit</span><span class=\"p\">.</span><span class=\"n\">bxor</span></p>\n<p><span class=\"kd\">local</span> <span class=\"n\">byte</span> <span class=\"o\">=</span> <span class=\"nb\">string.byte</span><br />\n<span class=\"kd\">local</span> <span class=\"n\">sub</span> <span class=\"o\">=</span> <span class=\"nb\">string.sub</span><br />\n<span class=\"kd\">local</span> <span class=\"n\">len</span> <span class=\"o\">=</span> <span class=\"nb\">string.len</span></p>\n<p><span class=\"kd\">local</span> <span class=\"k\">function</span> <span class=\"nf\">JSHash</span><span class=\"p\">(</span><span class=\"n\">str</span><span class=\"p\">)</span><br />\n<span class=\"kd\">local</span> <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"n\">len</span><span class=\"p\">(</span><span class=\"n\">str</span><span class=\"p\">)</span><br />\n<span class=\"kd\">local</span> <span class=\"n\">h</span> <span class=\"o\">=</span> <span class=\"n\">l</span><br />\n<span class=\"kd\">local</span> <span class=\"n\">step</span> <span class=\"o\">=</span> <span class=\"n\">rshift</span><span class=\"p\">(</span><span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"mi\">1</span></p>\n<pre><code>&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;step&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;step&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;\n    &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bxor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lshift&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rshift&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;\n&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;\n\n&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;\n</code></pre>\n<p><span class=\"k\">end</span></p>\n<p><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">JSHash</span><span class=\"p\">(</span><span class=\"s2\">&quot;0000000000000000000000000000000000&quot;</span><span class=\"p\">))</span><br />\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">JSHash</span><span class=\"p\">(</span><span class=\"s2\">&quot;f0l0l0w0m0e0n0t0w0i0t0t0e0r0?0:0)0&quot;</span><span class=\"p\">))</span><br />\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">JSHash</span><span class=\"p\">(</span><span class=\"s2\">&quot;x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0&quot;</span><span class=\"p\">))</span></p>\n<p><span class=\"c1\">– output:</span><br />\n<span class=\"c1\">– 1777619995</span><br />\n<span class=\"c1\">– 1777619995</span><br />\n<span class=\"c1\">– 1777619995</span><br />\n</code></pre></div></div></p>\n<p>可以看到上面 3 个字符串的 hash 都是：1777619995，必然会触发 hash 冲突。</p>\n<p>另外需要注意的是 LuaJIT 的 hash 算法和 Lua 是不同的，其是一个 lookup3 的变种。</p>\n<blockquote>\n  <p>lookup3 也被暴雪公司使用于解析其各游戏的 MPQ 文件</p>\n</blockquote>\n<p>有关字符串 hash 算法的对比，可以参考下面这两篇文章，写的都比我好：</p>\n<ul>\n  <li><a href=\"https://www.byvoid.com/zhs/blog/string-hash-compare\">各种字符串Hash函数比较</a></li>\n  <li><a href=\"https://halfrost.com/go_map_chapter_one/\">如何设计并实现一个线程安全的 Map ？(上篇)</a></li>\n</ul>\n<pre><code>            &lt;hr style=&quot;visibility: hidden;&quot;/&gt;\n</code></pre>\n","text":"我在前一篇文章介绍过下面这 3 个字符串拥有相同的 hash，会导致 Hash Dos 问题： &#34;0000000000000000000000000000000000&#34; &#34;f0l0l0w0m0e0n0t0w0i0t0t0e0r0?0:0)0&#34; &#...","link":"","photos":[],"count_time":{"symbolsCount":"4k","symbolsTime":"4 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"lua_use_default_type","uid":"d5babd1271074c55086a601cc3ea9204","slug":"zl/2016-01-01-30_lua_use_default_type","date":"2024-04-03T03:47:35.593Z","updated":"2024-04-03T03:47:35.593Z","comments":true,"path":"api/articles/zl/2016-01-01-30_lua_use_default_type.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":" lua_use_default_type syntax: lua_use_default_type on | off default: lua_use_default_type on context: http, server, location, location if Sp...","link":"","photos":[],"count_time":{"symbolsCount":801,"symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"redis集群及ngx_lua接入方案","uid":"89ec4c26705d03b8fb9b9802b1dcecef","slug":"zl/2016-01-01-308_redis集群及ngx_lua接入方案","date":"2024-04-03T03:47:35.587Z","updated":"2024-04-03T03:47:35.588Z","comments":true,"path":"api/articles/zl/2016-01-01-308_redis集群及ngx_lua接入方案.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"背景介绍精细化分流和降级的项目依赖redis存放分流和降级规则，为了保证redis的高可用，需避免其单点故障和数据丢失。整个系统的架构图如下： 在管理端，通过多个管理实例来避免管理端的单点问题，将策略规则写入redis。在业务端，多个Nginx代理从redis中读出策略规则并缓存...","link":"","photos":[],"count_time":{"symbolsCount":"3.1k","symbolsTime":"3 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}