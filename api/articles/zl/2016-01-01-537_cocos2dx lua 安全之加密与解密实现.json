{"title":"cocos2dx lua 安全之加密与解密实现","uid":"0449c27d381d6b17b917926d1d3ef356","slug":"zl/2016-01-01-537_cocos2dx lua 安全之加密与解密实现","date":"2024-04-03T03:47:35.809Z","updated":"2024-04-03T03:47:35.809Z","comments":true,"path":"api/articles/zl/2016-01-01-537_cocos2dx lua 安全之加密与解密实现.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<pre><code>非常多使用cocos2dx+lua做游戏的同学。都会想到一个问题，我的游戏一旦公布，如何才干保证的我脚本代码不被破解。不泄露代码。尽管这和开源、共享的原则不合。可是代码也是coder的劳动成果，理应得到保护。\n</code></pre><p>特别是商业游戏更是如此，不希望被别人破解掉源代码而且进行改动。</p>\n<p>今天的话题就是怎样实现lua脚本文件的加密和解密。</p>\n<p>我在网络上查过，都没有成熟的解决方式。然后我经过考虑之后，总结出两种解决方式，供大家參考。</p>\n<ul>\n<li><p>1、轻量级的解决方式。APK打包之前，用工具把全部的lua文件加密，详细是将lua文件读到内存，然后使用zip等压缩加密库进行压缩加密，然后将压缩加密之后的数据保存为和源文件同名的文件。</p>\n<ul>\n<li>打包之后执行lua文件的时候。则先读出lua数据。然后进行解密。将解密后的流数据传给lua虚拟机。</li>\n</ul>\n</li>\n<li><p>2、重量级的解决方式，此方案是上一种方案的扩展。也是商用游戏的方案，实现一个游戏文件包，打包前将资源和脚本都使用工具打包到一个文件。能够在打包的时候加密压缩，也能够不加密压缩。</p>\n<ul>\n<li>然后在执行的时候直接从包内读出对应文件的数据。然后解密解压缩。然后提供给游戏引擎使用。这也是端游普遍使用的技术，手游眼下大部分也開始使用此技术。</li>\n</ul>\n</li>\n</ul>\n<p>本文主要简要解说第一种方案，另外一种方案则有时间再写一篇博客。好了。我们開始进入正题吧。</p>\n<p>首先是压缩lua文件。代码例如以下：     </p>\n<pre><code>int write_file_content(const char* folder)\n&#123;\n    //获得文件数据，并压缩文件\n    FILE* fpin = fopen(folder, &#34;wb+&#34;);\n    if (fpin == NULL)\n    &#123;\n        printf(&#34;无法读取文件: %sn&#34;, folder);\n        return 0;\n    &#125;\n<pre><code>//得到文件大小\nfseek(fpin, 0, SEEK_END);\nunsigned int size = ftell(fpin);\n\n//读出文件内容\nfseek(fpin, 0, SEEK_SET);\nvoid* con = malloc(size);\nint r = fread(con, size, 1, fpin);    \n\n//进行加密操作\nunsigned long zip_con_size = size * 2;\nvoid* zip_con = malloc(zip_con_size);\nif (Z_OK != compress((Bytef*)zip_con, &amp;amp;zip_con_size, (Bytef*)con, size)) \n&#123;\n    printf(&amp;#34;压缩 %s 时错误发生n&amp;#34;,folder);\n&#125;\nprintf(&amp;#34;%s 压缩前大小：%ld 压缩后大小：%ldn&amp;#34;, folder,  size,  zip_con_size);\n\n//写文件内容\nfseek(fpin, 0, SEEK_SET);\nint len = fwrite(zip_con, zip_con_size, 1, fpin);\n\n//释放资源\nfclose(fpin);\nfree(zip_con);\nfree(con);    \nreturn 0;\n</code></pre>\n<p>}<br />\n</code></pre><p>然后是解密操作。代码例如以下：</p></p>\n<pre><code>void* read_file_content(const char* folder, int&amp; bufflen)\n&#123;\n    FILE* file = fopen(folder, &#34;wb+&#34;);\n    if (file)\n    &#123;    \n    &#123;\n        printf(&#34;无法读取文件: %sn&#34;, folder);\n        return 0;\n    &#125;\n\n    //获取文件大小\n    fseek(file, 0, SEEK_END);\n    unsigned int size = ftell(file);\n\n    //读出文件内容\n    void* con = malloc(size);\n    fseek(file, 0, SEEK_SET);\n    int len = fread(con, size, 1, file);\n\n    //解压缩操作\n    unsigned long zip_size = size * 4;\n    void* zip_con = malloc(zip_size);\n    int code = uncompress((Bytef*)zip_con, &amp;zip_size, (Bytef*)con, size);\n    if (Z_OK != code)\n    &#123;\n        printf(&#34;解压 %s 时错误发生 :%dn&#34;, folder, code);\n        return 0;\n    &#125;\n\n    //释放资源\n    fclose(file);\n    free(con);\n\n    //zip_con由外部释放\n    bufflen = zip_size;\n    return zip_con。\n&#125;\n</code></pre><p>最后就把此流文件塞给lua的虚拟机就可以，即以流方式执行lua代码。</p>\n<blockquote>\n<p>当然更高级一点的方法是直接改写lua的文件载入策略</p>\n</blockquote>","text":"非常多使用cocos2dx+lua做游戏的同学。都会想到一个问题，我的游戏一旦公布，如何才干保证的我脚本代码不被破解。不泄露代码。尽管这和开源、共享的原则不合。可是代码也是coder的劳动成果，理应得到保护。 特别是商业游戏更是如此，不希望被别人破解掉源代码而且进行改动。 今天的...","link":"","photos":[],"count_time":{"symbolsCount":"2.4k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Lua参考手册上半部分","uid":"c3e6b0b841b77632475081af7971b980","slug":"zl/2016-01-01-538_Lua参考手册上半部分","date":"2024-04-03T03:47:35.809Z","updated":"2024-04-03T03:47:35.809Z","comments":true,"path":"api/articles/zl/2016-01-01-538_Lua参考手册上半部分.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"Lua 是一个扩展式程序设计语言，它被设计成支持通用的过程式编程，并有相关数据描述的设施。 Lua 也能对面向对象编程，函数式编程，数据驱动式编程提供很好的支持。 它可以作为一个强大、轻量的脚本语言，供任何需要的程序使用。 Lua 以一个用 clean C 写成的库形式提供。（所...","link":"","photos":[],"count_time":{"symbolsCount":"1.8k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"NGX_LUA","uid":"1cb1c66fc18ebaf0b80bde02a3d30c10","slug":"zl/2016-01-01-536_NGX_LUA","date":"2024-04-03T03:47:35.809Z","updated":"2024-04-03T03:47:35.809Z","comments":true,"path":"api/articles/zl/2016-01-01-536_NGX_LUA.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":" NGX_LUA | 0neday&#39;s Notes &lt;meta name=&quot;keywords&quot; content=&quot;Nginx,&quot;/&gt; &lt;meta name=“description” content=&quot;&...","link":"","photos":[],"count_time":{"symbolsCount":"6.3k","symbolsTime":"6 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}