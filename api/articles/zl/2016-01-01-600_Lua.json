{"title":"Lua","uid":"15b0cdc6d03f6c3f6bf8d3a7ff197317","slug":"zl/2016-01-01-600_Lua","date":"2024-04-03T03:47:35.836Z","updated":"2024-04-03T03:47:35.836Z","comments":true,"path":"api/articles/zl/2016-01-01-600_Lua.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<h2 id=\"名称\"><a href=\"#名称\" class=\"headerlink\" title=\"名称\"></a>名称</h2><p>ngx_http_lua_module - 将Lua的功能嵌入到Nginx HTTP服务器中。</p>\n<p>这个模块没有与Nginx源码一起发布。详见<a href=\"#\">安装介绍</a></p>\n<h2 id=\"内容列表\"><a href=\"#内容列表\" class=\"headerlink\" title=\"内容列表\"></a>内容列表</h2><ul>\n<li><a href=\"#名称\">名称</a></li>\n<li><a href=\"#状态\">状态</a></li>\n<li><a href=\"#版本\">版本</a></li>\n<li><a href=\"#概要\">概要</a></li>\n<li><a href=\"#描述\">描述</a></li>\n</ul>\n<h2 id=\"状态\"><a href=\"#状态\" class=\"headerlink\" title=\"状态\"></a>状态</h2><p>已经发布。</p>\n<h2 id=\"版本\"><a href=\"#版本\" class=\"headerlink\" title=\"版本\"></a>版本</h2><p>此文档基于2017年4月8日发布的ngx_lua <a href=\"https://github.com/openresty/lua-nginx-module/tags\" target=\"_blank\" rel=\"external noopener noreferrer\">v0.10.8</a>。</p>\n<h2 id=\"概要\"><a href=\"#概要\" class=\"headerlink\" title=\"概要\"></a>概要</h2><figure class=\"highlight\"><table><tbody><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div></pre></td><td class=\"code\"><pre><div class=\"line\"># 设置纯lua外部库的搜索路径 (&#39;;;&#39; 是默认路径):</div><div class=\"line\"> lua_package_path &#39;/foo/bar/?.lua;/blah/?.lua;;&#39;;</div><div class=\"line\"></div><div class=\"line\"> # 设置用C实现的Lua外部库的搜索路径 (也可以用 &#39;;;&#39;):</div><div class=\"line\"> lua_package_cpath &#39;/bar/baz/?.so;/blah/blah/?.so;;&#39;;</div><div class=\"line\"></div><div class=\"line\"> server {</div><div class=\"line\">     location /lua_content {</div><div class=\"line\">         # MIME type determined by default_type:</div><div class=\"line\">         default_type &#39;text/plain&#39;;</div><div class=\"line\"></div><div class=\"line\">         content_by_lua_block {</div><div class=\"line\">             ngx.say(&#39;Hello,world!&#39;)</div><div class=\"line\">         }</div><div class=\"line\">     }</div><div class=\"line\"></div><div class=\"line\">     location /nginx_var {</div><div class=\"line\">         # MIME type determined by default_type:</div><div class=\"line\">         default_type &#39;text/plain&#39;;</div><div class=\"line\"></div><div class=\"line\">         # try access /nginx_var?a=hello,world</div><div class=\"line\">         content_by_lua_block {</div><div class=\"line\">             ngx.say(ngx.var.arg_a)</div><div class=\"line\">         }</div><div class=\"line\">     }</div><div class=\"line\"></div><div class=\"line\">     location = /request_body {</div><div class=\"line\">         client_max_body_size 50k;</div><div class=\"line\">         client_body_buffer_size 50k;</div><div class=\"line\"></div><div class=\"line\">         content_by_lua_block {</div><div class=\"line\">             ngx.req.read_body()  -- explicitly read the req body</div><div class=\"line\">             local data = ngx.req.get_body_data()</div><div class=\"line\">             if data then</div><div class=\"line\">                 ngx.say(&#34;body data:&#34;)</div><div class=\"line\">                 ngx.print(data)</div><div class=\"line\">                 return</div><div class=\"line\">             end</div><div class=\"line\"></div><div class=\"line\">             -- body may get buffered in a temp file:</div><div class=\"line\">             local file = ngx.req.get_body_file()</div><div class=\"line\">             if file then</div><div class=\"line\">                 ngx.say(&#34;body is in file &#34;, file)</div><div class=\"line\">             else</div><div class=\"line\">                 ngx.say(&#34;no body found&#34;)</div><div class=\"line\">             end</div><div class=\"line\">         }</div><div class=\"line\">     }</div><div class=\"line\"></div><div class=\"line\">     # transparent non-blocking I/O in Lua via subrequests</div><div class=\"line\">     # (well, a better way is to use cosockets)</div><div class=\"line\">     location = /lua {</div><div class=\"line\">         # MIME type determined by default_type:</div><div class=\"line\">         default_type &#39;text/plain&#39;;</div><div class=\"line\"></div><div class=\"line\">         content_by_lua_block {</div><div class=\"line\">             local res = ngx.location.capture(&#34;/some_other_location&#34;)</div><div class=\"line\">             if res then</div><div class=\"line\">                 ngx.say(&#34;status: &#34;, res.status)</div><div class=\"line\">                 ngx.say(&#34;body:&#34;)</div><div class=\"line\">                 ngx.print(res.body)</div><div class=\"line\">             end</div><div class=\"line\">         }</div><div class=\"line\">     }</div><div class=\"line\"></div><div class=\"line\">     location = /foo {</div><div class=\"line\">         rewrite_by_lua_block {</div><div class=\"line\">             res = ngx.location.capture(&#34;/memc&#34;,</div><div class=\"line\">                 { args = { cmd = &#34;incr&#34;, key = ngx.var.uri } }</div><div class=\"line\">             )</div><div class=\"line\">         }</div><div class=\"line\"></div><div class=\"line\">         proxy_pass http://blah.blah.com;</div><div class=\"line\">     }</div><div class=\"line\"></div><div class=\"line\">     location = /mixed {</div><div class=\"line\">         rewrite_by_lua_file /path/to/rewrite.lua;</div><div class=\"line\">         access_by_lua_file /path/to/access.lua;</div><div class=\"line\">         content_by_lua_file /path/to/content.lua;</div><div class=\"line\">     }</div><div class=\"line\"></div><div class=\"line\">     # use nginx var in code path</div><div class=\"line\">     # CAUTION: contents in nginx var must be carefully filtered,</div><div class=\"line\">     # otherwise there&#39;ll be great security risk!</div><div class=\"line\">     location ~ ^/app/([-_a-zA-Z0-9/]+) {</div><div class=\"line\">         set $path $1;</div><div class=\"line\">         content_by_lua_file /path/to/lua/app/root/$path.lua;</div><div class=\"line\">     }</div><div class=\"line\"></div><div class=\"line\">     location / {</div><div class=\"line\">        client_max_body_size 100k;</div><div class=\"line\">        client_body_buffer_size 100k;</div><div class=\"line\"></div><div class=\"line\">        access_by_lua_block {</div><div class=\"line\">            -- check the client IP address is in our black list</div><div class=\"line\">            if ngx.var.remote_addr == &#34;132.5.72.3&#34; then</div><div class=\"line\">                ngx.exit(ngx.HTTP_FORBIDDEN)</div><div class=\"line\">            end</div><div class=\"line\"></div><div class=\"line\">            -- check if the URI contains bad words</div><div class=\"line\">            if ngx.var.uri and</div><div class=\"line\">                   string.match(ngx.var.request_body, &#34;evil&#34;)</div><div class=\"line\">            then</div><div class=\"line\">                return ngx.redirect(&#34;/terms_of_use.html&#34;)</div><div class=\"line\">            end</div><div class=\"line\"></div><div class=\"line\">            -- tests passed</div><div class=\"line\">        }</div><div class=\"line\"></div><div class=\"line\">        # proxy_pass/fastcgi_pass/etc settings</div><div class=\"line\">     }</div><div class=\"line\"> }</div></pre></td></tr></tbody></table></figure>\n<p><a href=\"#内容列表\">回到内容列表</a></p>\n<h2 id=\"描述\"><a href=\"#描述\" class=\"headerlink\" title=\"描述\"></a>描述</h2><p>通过标准的Lua5.1解释器或者<a href=\"http://luajit.org/luajit.html\" target=\"_blank\" rel=\"external noopener noreferrer\">LuaJIT2.0/2.1</a>以及借助Nginx的子请求，此模块将Lua嵌入到Nginx中，允许将强大的Lua线程集成到Nginx事件模块中。</p>\n<p>与<a href=\"https://httpd.apache.org/docs/trunk/mod/mod_lua.html\" target=\"_blank\" rel=\"external noopener noreferrer\">Apcache’s mod_lua</a>和<a href=\"http://redmine.lighttpd.net/wiki/1/Docs:ModMagnet\" target=\"_blank\" rel=\"external noopener noreferrer\">Lighttpd’s mod_magnet</a>不同的是，使用此模块执行Lua代码，在网络传输中完全是非阻塞的，只要使用此模块提供的<a href=\"https://github.com/openresty/lua-nginx-module#nginx-api-for-lua\" target=\"_blank\" rel=\"external noopener noreferrer\">Nginx API for Lua</a>来处理上游服务的请求，例如MySQL, PostgreSQL, Memcached,Redis 或上游Http web服务。</p>\n<p>至少以下Lua库和Nginx模块可以和ngx_lua模块一起使用:</p>\n<ul>\n<li><a href=\"https://github.com/openresty/lua-resty-memcached\" target=\"_blank\" rel=\"external noopener noreferrer\">lua-resty-memcached</a></li>\n<li><a href=\"https://github.com/openresty/lua-resty-mysql\" target=\"_blank\" rel=\"external noopener noreferrer\">lua-resty-mysql</a></li>\n<li><a href=\"https://github.com/openresty/lua-resty-redis\" target=\"_blank\" rel=\"external noopener noreferrer\">lua-resty-redis</a></li>\n<li><a href=\"https://github.com/openresty/lua-resty-dns\" target=\"_blank\" rel=\"external noopener noreferrer\">lua-resty-dns</a></li>\n<li><a href=\"https://github.com/openresty/lua-resty-upload\" target=\"_blank\" rel=\"external noopener noreferrer\">lua-resty-upload</a></li>\n<li><a href=\"https://github.com/openresty/lua-resty-websocket\" target=\"_blank\" rel=\"external noopener noreferrer\">lua-resty-websocket</a></li>\n<li><a href=\"https://github.com/openresty/lua-resty-lock\" target=\"_blank\" rel=\"external noopener noreferrer\">lua-resty-lock</a></li>\n<li><a href=\"https://github.com/cloudflare/lua-resty-logger-socket\" target=\"_blank\" rel=\"external noopener noreferrer\">lua-resty-logger-socket</a></li>\n<li><a href=\"https://github.com/openresty/lua-resty-lrucache\" target=\"_blank\" rel=\"external noopener noreferrer\">lua-resty-lrucache</a></li>\n<li><a href=\"https://github.com/openresty/lua-resty-string\" target=\"_blank\" rel=\"external noopener noreferrer\">lua-resty-string</a></li>\n<li><a href=\"http://github.com/openresty/memc-nginx-module\" target=\"_blank\" rel=\"external noopener noreferrer\">ngx_memc</a></li>\n<li><a href=\"https://github.com/FRiCKLE/ngx_postgres\" target=\"_blank\" rel=\"external noopener noreferrer\">ngx_postgres</a></li>\n<li><a href=\"http://github.com/openresty/redis2-nginx-module\" target=\"_blank\" rel=\"external noopener noreferrer\">ngx_redis2</a></li>\n<li><a href=\"http://wiki.nginx.org/HttpRedisModule\" target=\"_blank\" rel=\"external noopener noreferrer\">ngx_redis</a></li>\n<li><a href=\"http://nginx.org/en/docs/http/ngx_http_proxy_module.html\" target=\"_blank\" rel=\"external noopener noreferrer\">ngx_proxy</a></li>\n<li><a href=\"http://nginx.org/en/docs/http/ngx_http_fastcgi_module.html\" target=\"_blank\" rel=\"external noopener noreferrer\">ngx_fastcgi</a></li>\n</ul>\n<p>通过<a href=\"https://github.com/openresty/lua-nginx-module#ngxlocationcapture\" target=\"_blank\" rel=\"external noopener noreferrer\">ngx.location.capture</a>或者<a href=\"https://github.com/openresty/lua-nginx-module#ngxlocationcapture_multi\" target=\"_blank\" rel=\"external noopener noreferrer\">ngx.location.capture_multi</a>，几乎所有的Ngnix模块都可以与ngx_lua模块一起使用，但是我们建议使用lua-resty-*代替创建子请求去访问Nginx upstream模块，因为前者更加灵活且存储效率更高。</p>\n<p>在一个单独的nginx worker进程中，所有的请求共享一个Lua解释器或LuaJIT实例，但是请求上下文却是使用轻量级的Lua协程隔离。</p>\n<p>被加载的Lua模块保持在nginx worker级别使得只占用极小内存，即使在重负载下也是如此。</p>\n<p>这个模块被插入NGINX的“http”子系统，所以它仅仅支持Http家族中的晚期通信协议（例如HTTP0.9/1.0/1.1/2.0，WebSockets等等）。如果你想使用TCP协议与晚期版本客户端通信，你应该使用兼容Lua APi的<a href=\"https://github.com/openresty/stream-lua-nginx-module#readme\" target=\"_blank\" rel=\"external noopener noreferrer\">ngx_stream_lua</a>模块。</p>\n<p><a href=\"#内容列表\">回到TOC</a></p>\n<h2 id=\"典型应用\"><a href=\"#典型应用\" class=\"headerlink\" title=\"典型应用\"></a>典型应用</h2><p>仅仅列举一些:</p>\n<ul>\n<li>使用Lua处理各种nginx upstream输出(代理，dirzzle, postgres,redis, memcached,等等)</li>\n<li>在请求真正到达upstream后端之前，使用处理任意复杂的访问控制和安全检查</li>\n<li>使用随意方式操纵响应头</li>\n<li>从外部存储(例如redis, memcached,mysql,postgresql)获取后端信息,从而即时根据那些信息来选择访问哪个upstream后端</li>\n<li>在一个content handler中使用同步方式编写任意复杂的web应用，但是仍然使用非阻塞方式访问数据库后端和其他存储。</li>\n<li>使用Lua在重写阶段做非常复杂的URL调度</li>\n<li>使用Lua为Nginx的子请求和任意的location实现高级的缓存机制。</li>\n</ul>\n<p>作为模块，他允许将Nginx内的各种元素聚集在一起，并将Lua的优势暴露给用户，这种可能性是无限的。该模块提供了脚本的全部灵活性，同时在cpu时间以及内存占用方面，提供了与C语言同等级别的性能水平。当LusJIT2.x可用后尤其是如此。</p>\n<p>而其他的脚本语言通常难以实现此性能级别。</p>\n<p>Lua状态(Lua虚拟机实例)跨所有请求共享，通过一个单独的nginx worker进程处理以最小化内存占用。</p>\n<p><a href=\"#内容列表\">回到TOC</a></p>\n<h2 id=\"Nginx兼容性\"><a href=\"#Nginx兼容性\" class=\"headerlink\" title=\"Nginx兼容性\"></a>Nginx兼容性</h2><p>该模块最新的版本兼容一下Nginx版本：</p>\n<ul>\n<li>1.11.x (last tested: 1.11.2)</li>\n<li>1.10.x</li>\n<li>1.9.x (last tested: 1.9.15)</li>\n<li>1.8.x</li>\n<li>1.7.x (last tested: 1.7.10)</li>\n<li>1.6.x</li>\n</ul>\n<p>Nginx cores低于1.6.0(包含)版本不再支持。</p>\n<p><a href=\"#内容列表\">回到TOC</a></p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2>","text":"名称ngx_http_lua_module - 将Lua的功能嵌入到Nginx HTTP服务器中。 这个模块没有与Nginx源码一起发布。详见安装介绍 内容列表 名称 状态 版本 概要 描述 状态已经发布。 版本此文档基于2017年4月8日发布的ngx_lua v0.10.8。 ...","link":"","photos":[],"count_time":{"symbolsCount":"5.2k","symbolsTime":"5 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%90%8D%E7%A7%B0\"><span class=\"toc-text\">名称</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%86%85%E5%AE%B9%E5%88%97%E8%A1%A8\"><span class=\"toc-text\">内容列表</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%8A%B6%E6%80%81\"><span class=\"toc-text\">状态</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%89%88%E6%9C%AC\"><span class=\"toc-text\">版本</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%A6%82%E8%A6%81\"><span class=\"toc-text\">概要</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%8F%8F%E8%BF%B0\"><span class=\"toc-text\">描述</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%85%B8%E5%9E%8B%E5%BA%94%E7%94%A8\"><span class=\"toc-text\">典型应用</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Nginx%E5%85%BC%E5%AE%B9%E6%80%A7\"><span class=\"toc-text\">Nginx兼容性</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AE%89%E8%A3%85\"><span class=\"toc-text\">安装</span></a></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"SQL升级SQL Server Evaluation 版本成为正式版本","uid":"0e88f93143f04122dfd2aa4de3b9da60","slug":"zl/2016-01-01-5_[SQL]升级SQL Server Evaluation 版本成为正式版本","date":"2024-04-03T03:47:35.836Z","updated":"2024-04-03T03:47:35.836Z","comments":true,"path":"api/articles/zl/2016-01-01-5_[SQL]升级SQL Server Evaluation 版本成为正式版本.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":" &lt;p&gt;如果不小心安装错 SQL Server 为 Evaluation 的版本，要小心当超过 180 天之后，系统就会无法正常使用了&lt;/p&gt; &lt;br /&gt; &lt;p&gt;这几天遇到一个蛮特别的案例，原本收到的问题是 “维护计划” 忽然无法...","link":"","photos":[],"count_time":{"symbolsCount":"1.9k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Java并发：分布式应用限流 Redis + Lua 实践","uid":"003649475efb2adaa4694d5e1ecd21f9","slug":"zl/2016-01-01-601_Java并发：分布式应用限流 Redis + Lua 实践","date":"2024-04-03T03:47:35.836Z","updated":"2024-04-03T03:47:35.836Z","comments":true,"path":"api/articles/zl/2016-01-01-601_Java并发：分布式应用限流 Redis + Lua 实践.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"任何限流都不是漫无目的的，也不是一个开关就可以解决的问题，常用的限流算法有：令牌桶，漏桶。在之前的文章中，也讲到过，但是那是基于单机场景来写。 之前文章：接口限流算法：漏桶算法&amp;令牌桶算法 然而再牛逼的机器，再优化的设计，对于特殊场景我们也是要特殊处理的。就拿秒杀来说，可...","link":"","photos":[],"count_time":{"symbolsCount":"8k","symbolsTime":"7 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}