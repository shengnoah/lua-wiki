{"title":"最近关于Lua的学习篇总结（三）","uid":"d7b45f606117ca5a1be9c664ce73539a","slug":"zl/2016-01-01-667_最近关于Lua的学习篇总结（三）","date":"2024-04-03T03:47:35.892Z","updated":"2024-04-03T03:47:35.892Z","comments":true,"path":"api/articles/zl/2016-01-01-667_最近关于Lua的学习篇总结（三）.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<div id=\"toc\" class=\"toc-article\">\n\t\t\t<strong class=\"toc-title\">Contents</strong>\n<pre><code>\t&lt;/div&gt;\n\t\n\t&lt;h2 id=&quot;lua和-Net的相互调用&quot;&gt;&lt;a href=&quot;#lua和-Net的相互调用&quot; class=&quot;headerlink&quot; title=&quot;lua和.Net的相互调用&quot;&gt;&lt;/a&gt;lua和.Net的相互调用&lt;/h2&gt;&lt;p&gt;由于我们公司主要是用ulua进行热更新，所以不可避免的就是luainterface呢&lt;/p&gt;\n</code></pre>\n<h3 id=\"luainterface\"><a href=\"#luainterface\" class=\"headerlink\" title=\"luainterface\"></a>luainterface</h3><p>luainterface包括两个核心库，一个是luainterface.dll,一个是luanet.dll<br/>可以通过luainterface完成lua和C#的相互调用</p>\n<h3 id=\"在C-中执行访问lua代码\"><a href=\"#在C-中执行访问lua代码\" class=\"headerlink\" title=\"在C#中执行访问lua代码\"></a>在C#中执行访问lua代码</h3><p>Lua lua = new Lua();    //创建Lua解析器<br/>    lua[“num”]=2;   //定义一个num<br/>    lua[“str”]=”a string”;  //定义一个字符串<br/>    lua.newTable(“tab”);    //创建一个表  tab={}</p>\n<h3 id=\"取得lua环境中的变量\"><a href=\"#取得lua环境中的变量\" class=\"headerlink\" title=\"取得lua环境中的变量\"></a>取得lua环境中的变量</h3><p>double num = (double)lua[“num”];</p>\n<p>string str = (string)lua[“str”];</p>\n<h3 id=\"在C-中执行Lua脚本文件-或者脚本字符串\"><a href=\"#在C-中执行Lua脚本文件-或者脚本字符串\" class=\"headerlink\" title=\"在C#中执行Lua脚本文件,或者脚本字符串\"></a>在C#中执行Lua脚本文件,或者脚本字符串</h3><p>在C#中执行Lua脚本文件,或者脚本字符串<br/>lua.DoFile(“script.lua”);//执行script.lua脚本</p>\n<pre><code>lua.DoString(&#34;num=2&#34;);\n<p>lua.DoString(&quot;str='a string'&quot;);</p>\n<p>object[] retVals = lua.DoString(&quot;return num,str&quot;);<br />\n</code></pre><p>在热更新中，只需要写好解析lua脚本的代码，然后c#代码不需要变动，只需要修改lua脚本就好，通过lua脚本控制游戏逻辑。</p></p>\n<h1 id=\"lua和C-中类型的对应\"><a href=\"#lua和C-中类型的对应\" class=\"headerlink\" title=\"lua和C#中类型的对应\"></a>lua和C#中类型的对应</h1><p>lnil        null</p>\n<pre><code>string      System.String\n<p>number      System.Double</p>\n<p>boolean         System.Boolean</p>\n<p>table       LuaInterface.LuaTable</p>\n<p>function        LuaInterface.LuaFunction<br />\n</code></pre><h1 id=\"把一个C-方法注册进Lua的一个全局方法\"><a href=\"#把一个C-方法注册进Lua的一个全局方法\" class=\"headerlink\" title=\"把一个C#方法注册进Lua的一个全局方法\"></a>把一个C#方法注册进Lua的一个全局方法</h1><p>//把一个类中的普通方法注册进去<br/>lua.RegisterFunction(“NormalMethod”,obj,obj.GetType().GetMethod(“NormalMethod”))<br/>lua.DoString(“ NormalMethod()”);</p></p>\n<p>//把一个类的静态方法注册进去<br/>lua.RegisterFunction(“StaticMethod”,null,typeof(ClassName).GetMethod(“StaticMethod”))<br/>lua.DoString(“ StaticMethod()”)</p>\n<h1 id=\"在Lua中使用c-中的类\"><a href=\"#在Lua中使用c-中的类\" class=\"headerlink\" title=\"在Lua中使用c#中的类\"></a>在Lua中使用c#中的类</h1><p>require “luanet”<br/>–加载CLR的类型、实例化CLR对象<br/>luanet.load_assembly(“System.Windows.Forms”)<br/>luanet.load_assembly(“System.Drawing”)<br/>Form = luanet.import_type(“System.Windows.Forms.Form”)<br/>StartPosition = luanet.import_type(“System.Windows.Forms.FormStartPosition”)</p>\n<p>print(Form)<br/>print(StartPosition)<br/>在Lua中使用C#中的类创建对象的时候，会自动匹配最合适的构造方法</p>\n<h1 id=\"在Lua中访问C-中的属性和方法\"><a href=\"#在Lua中访问C-中的属性和方法\" class=\"headerlink\" title=\"在Lua中访问C#中的属性和方法\"></a>在Lua中访问C#中的属性和方法</h1><p>Lua代码中，访问C#对象的属性的方式和访问table的键索引一样，比如obj.name 或者 obj[“name”]</p>\n<p>Lua代码中，访问C#对象的普通函数的方式和调用table的函数一样，比如obj:method1()</p>\n<h1 id=\"在Lua中访问C-中的方法-特殊情况\"><a href=\"#在Lua中访问C-中的方法-特殊情况\" class=\"headerlink\" title=\"在Lua中访问C#中的方法-特殊情况\"></a>在Lua中访问C#中的方法-特殊情况</h1><p>当函数中有out或ref参数时，out参数和ref参数和函数的返回值一起返回，并且调用的时候，out参数不需要传入<br/>C#函数定义<br/>class Obj{<br/>int OutMethod1(int parameter1,out parameter2,out parameter3){<br/>    parameter2=34;parameter3=213;<br/>    return parameter1;<br/>}<br/>int OutMethod2(int parameter1,ref parameter2){<br/>    parameter2=parameter2+2;<br/>    return parameter1+parameter2;<br/>}<br/>}<br/>Lua中的调用和返回值<br/>obj:OutMethod1(34)<br/> –out参数不需要参数，这个返回一个table，里面的值为parameter1,parameter2,parameter3<br/>(34,34,213)</p>\n<p>obj:OutMethod2(10,10)<br/>–ref参数需要传入，返回一个table有两个值(value1,value2)</p>\n<h1 id=\"在Lua中访问C-中的方法-特殊情况-1\"><a href=\"#在Lua中访问C-中的方法-特殊情况-1\" class=\"headerlink\" title=\"在Lua中访问C#中的方法-特殊情况\"></a>在Lua中访问C#中的方法-特殊情况</h1><p>当有重载函数的时候，调用函数会自动匹配第一个能匹配的函数</p>\n<p>可以使用get_method_bysig函数得到C#中指定类的指定参数的函数用法<br/>luaMethod = get_method_bysig(Obj,”CSharpMethod”,”System.String”)<br/>                  luaMethod(“siki”)</p>\n<h1 id=\"在Lua中注册C-中的事件委托（event-delegate）\"><a href=\"#在Lua中注册C-中的事件委托（event-delegate）\" class=\"headerlink\" title=\"在Lua中注册C#中的事件委托（event delegate）\"></a>在Lua中注册C#中的事件委托（event delegate）</h1><p>在Lua中通过Add方法或者Remove方法把一个Lua的函数注册或者注销从C#中的事件委托中<br/>function method()<br/>end<br/>obj.SomeEvent:Add(methodname(不用带引号))<br/>私人学习笔记而已。</p>","text":" Contents &lt;/div&gt; &lt;h2 id=&quot;lua和-Net的相互调用&quot;&gt;&lt;a href=&quot;#lua和-Net的相互调用&quot; class=&quot;headerlink&quot; title=&quot...","link":"","photos":[],"count_time":{"symbolsCount":"2.6k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#luainterface\"><span class=\"toc-text\">luainterface</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%9C%A8C-%E4%B8%AD%E6%89%A7%E8%A1%8C%E8%AE%BF%E9%97%AElua%E4%BB%A3%E7%A0%81\"><span class=\"toc-text\">在C#中执行访问lua代码</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8F%96%E5%BE%97lua%E7%8E%AF%E5%A2%83%E4%B8%AD%E7%9A%84%E5%8F%98%E9%87%8F\"><span class=\"toc-text\">取得lua环境中的变量</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%9C%A8C-%E4%B8%AD%E6%89%A7%E8%A1%8CLua%E8%84%9A%E6%9C%AC%E6%96%87%E4%BB%B6-%E6%88%96%E8%80%85%E8%84%9A%E6%9C%AC%E5%AD%97%E7%AC%A6%E4%B8%B2\"><span class=\"toc-text\">在C#中执行Lua脚本文件,或者脚本字符串</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#lua%E5%92%8CC-%E4%B8%AD%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%AF%B9%E5%BA%94\"><span class=\"toc-text\">lua和C#中类型的对应</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%8A%8A%E4%B8%80%E4%B8%AAC-%E6%96%B9%E6%B3%95%E6%B3%A8%E5%86%8C%E8%BF%9BLua%E7%9A%84%E4%B8%80%E4%B8%AA%E5%85%A8%E5%B1%80%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">把一个C#方法注册进Lua的一个全局方法</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%9C%A8Lua%E4%B8%AD%E4%BD%BF%E7%94%A8c-%E4%B8%AD%E7%9A%84%E7%B1%BB\"><span class=\"toc-text\">在Lua中使用c#中的类</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%9C%A8Lua%E4%B8%AD%E8%AE%BF%E9%97%AEC-%E4%B8%AD%E7%9A%84%E5%B1%9E%E6%80%A7%E5%92%8C%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">在Lua中访问C#中的属性和方法</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%9C%A8Lua%E4%B8%AD%E8%AE%BF%E9%97%AEC-%E4%B8%AD%E7%9A%84%E6%96%B9%E6%B3%95-%E7%89%B9%E6%AE%8A%E6%83%85%E5%86%B5\"><span class=\"toc-text\">在Lua中访问C#中的方法-特殊情况</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%9C%A8Lua%E4%B8%AD%E8%AE%BF%E9%97%AEC-%E4%B8%AD%E7%9A%84%E6%96%B9%E6%B3%95-%E7%89%B9%E6%AE%8A%E6%83%85%E5%86%B5-1\"><span class=\"toc-text\">在Lua中访问C#中的方法-特殊情况</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%9C%A8Lua%E4%B8%AD%E6%B3%A8%E5%86%8CC-%E4%B8%AD%E7%9A%84%E4%BA%8B%E4%BB%B6%E5%A7%94%E6%89%98%EF%BC%88event-delegate%EF%BC%89\"><span class=\"toc-text\">在Lua中注册C#中的事件委托（event delegate）</span></a>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Lua oop","uid":"3d3912f23542b320334cb8de75667ab4","slug":"zl/2016-01-01-668_Lua oop","date":"2024-04-03T03:47:35.892Z","updated":"2024-04-03T03:47:35.892Z","comments":true,"path":"api/articles/zl/2016-01-01-668_Lua oop.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"Lua 是一门很简单的语言. 本身语言设计中没有原生的 oop 设计, 但是我们可以使用 setmetatable 来做一个伪装的 class. setmetatable setmetatable 类似于 python 中 __metaclass__， 是用来设置一个 table...","link":"","photos":[],"count_time":{"symbolsCount":"9.1k","symbolsTime":"8 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Ubuntu18.04 Tengine+Lua+GraphicsMagick图片缩放","uid":"5d9aaa75e6d7dac7b45183801c719dd3","slug":"zl/2016-01-01-665_Ubuntu18.04 Tengine+Lua+GraphicsMagick图片缩放","date":"2024-04-03T03:47:35.891Z","updated":"2024-04-03T03:47:35.891Z","comments":true,"path":"api/articles/zl/2016-01-01-665_Ubuntu18.04 Tengine+Lua+GraphicsMagick图片缩放.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"自己搭建的图片服务器，有图片缩放的需求，大致思路是可以使用nginx调用lua，使用GraphicMagick的命令来做图片缩放 说明文件夹规划lua.jaychang.cn(如/var/filebase) 12345678910111213jaychang@tengine:~$...","link":"","photos":[],"count_time":{"symbolsCount":"9.7k","symbolsTime":"9 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}