{"title":"用 lua 模拟面向对象 · dcf's blog","uid":"db8fad7d707e1ce56386304783e2f912","slug":"zl/2016-01-01-773_用 lua 模拟面向对象 · dcf's blog","date":"2024-04-03T03:47:36.011Z","updated":"2024-04-03T03:47:36.012Z","comments":true,"path":"api/articles/zl/2016-01-01-773_用 lua 模拟面向对象 · dcf's blog.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<div class=\"post\">\n  <div>\n    <span class=\"post-date\">\n      categories: \n<pre><code>  programming\n  \n  |\n  tags:\n  \n  lua\n  \n  oo\n  \n&lt;/span&gt;\n</code></pre>\n  </div>\n  <hr/>\n  <p>一些语言本身是没有面向对象这一说的，类似 lua, js。但是平时使用时，往往会利用语言上的特性来模拟 OO。 初学lua，也看了很多网上的资料、博客，一直不是很理解，只是照猫画虎。现在理解地差不多了，记录一下。</p>\n<p>lua 用的是其强大的 table，可以简单地理解为 hash + array。作为 OO，我们需要模仿的有类和对象，每个对象有属性和方法。</p>\n<p>首先我们用 table 模拟一个类，这个类有一个 new 的方法，可以生成一个对象，这个对象我们依然使用 table 进行模拟。这里的 new 并不像 c++ 中有特殊的含义，这是一个函数名，可以叫做任何名字，例如 create</p>\n<div class=\"language-lua highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">Student</span> <span class=\"o\">=</span> <span class=\"p\">&#123;&#125;</span>\n<span class=\"k\">function</span> <span class=\"nc\">Student</span><span class=\"p\">.</span><span class=\"nf\">new</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">age</span><span class=\"p\">)</span> \n  <span class=\"kd\">local</span> <span class=\"n\">obj</span> <span class=\"o\">=</span> <span class=\"p\">&#123;&#125;</span>                 <span class=\"c1\">-- 创建一个对象 (table)</span>\n  <span class=\"n\">obj</span><span class=\"p\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">name</span> <span class=\"ow\">or</span> <span class=\"s1\">&#39;&#39;</span>    <span class=\"c1\">-- 添加属性并赋值</span>\n  <span class=\"n\">obj</span><span class=\"p\">.</span><span class=\"n\">age</span>  <span class=\"o\">=</span> <span class=\"n\">age</span>  <span class=\"ow\">or</span> <span class=\"mi\">0</span>\n  <span class=\"k\">return</span> <span class=\"n\">obj</span>         \n<span class=\"k\">end</span>\n<p><span class=\"n\">stu</span> <span class=\"o\">=</span> <span class=\"n\">Student</span><span class=\"p\">.</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"s1\">'fcnaud'</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">)</span><br />\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">stu</span><span class=\"p\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>            <span class=\"c1\">– 使用属性</span><br />\n</code></pre></div></div></p>\n<p>除过属性，一个对象还应该拥有方法。</p>\n<div class=\"language-lua highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">Student</span> <span class=\"o\">=</span> <span class=\"p\">&#123;&#125;</span>\n<span class=\"k\">function</span> <span class=\"nc\">Student</span><span class=\"p\">.</span><span class=\"nf\">new</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">age</span><span class=\"p\">)</span> \n  <span class=\"kd\">local</span> <span class=\"n\">obj</span> <span class=\"o\">=</span> <span class=\"p\">&#123;&#125;</span>           <span class=\"c1\">-- 创建一个对象 (table)</span>\n<p><span class=\"n\">obj</span><span class=\"p\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">name</span> <span class=\"ow\">or</span> <span class=\"s1\">''</span>    <span class=\"c1\">– 添加属性并赋值</span><br />\n<span class=\"n\">obj</span><span class=\"p\">.</span><span class=\"n\">age</span>  <span class=\"o\">=</span> <span class=\"n\">age</span>  <span class=\"ow\">or</span> <span class=\"mi\">0</span></p>\n<p><span class=\"n\">obj</span><span class=\"p\">.</span><span class=\"n\">sayHi</span> <span class=\"o\">=</span> <span class=\"k\">function</span><span class=\"p\">()</span><br />\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'hi'</span><span class=\"p\">)</span><br />\n<span class=\"k\">end</span><br />\n<span class=\"n\">obj</span><span class=\"p\">.</span><span class=\"n\">showInfo</span> <span class=\"o\">=</span> <span class=\"k\">function</span><span class=\"p\">()</span><br />\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">obj</span><span class=\"p\">.</span><span class=\"n\">name</span><span class=\"p\">)</span><br />\n<span class=\"c1\">– 这里能够访问到正确的 obj，是由于闭包。你可以认为这个函数捕获到了上边那个局部变量。在 lua 里这种局部变量叫做 upvalue。</span><br />\n<span class=\"k\">end</span><br />\n<span class=\"k\">return</span> <span class=\"n\">obj</span><br />\n<span class=\"k\">end</span></p>\n<p><span class=\"n\">stu</span> <span class=\"o\">=</span> <span class=\"n\">Student</span><span class=\"p\">.</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"s1\">'fcnaud'</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">)</span><br />\n<span class=\"n\">stu</span><span class=\"p\">.</span><span class=\"n\">sayHi</span><span class=\"p\">()</span><br />\n<span class=\"n\">stu1</span> <span class=\"o\">=</span> <span class=\"n\">Student</span><span class=\"p\">.</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"s1\">'dcf'</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">)</span><br />\n<span class=\"n\">stu1</span><span class=\"p\">.</span><span class=\"n\">sayHi</span><span class=\"p\">()</span><br />\n</code></pre></div></div></p>\n<p>功能已经基本实现了，但是又出现了另一个问题，那就是所有的函数对每个对象来说都有一份，这实际上是很浪费的。学过 c++ 大家都知道，c++ 中的类函数实际上只有在类中有一份，所有的对象调用的都是这一个函数，然后通过一个隐式的 this 指针来进行数据的调用。</p>\n<p>在 lua 里，我们可以利用 metatable（元表）来进行模拟。不清楚 metatable 的可以先去看一下教程。这里，我们让‘类’作为所有‘对象’的 metatable，将函数定义在‘类’中，这样所有对象在调用函数时，都会前往‘类’中调用。</p>\n<div class=\"language-lua highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">Student</span> <span class=\"o\">=</span> <span class=\"p\">&#123;&#125;</span>\n<span class=\"k\">function</span> <span class=\"nc\">Student</span><span class=\"p\">.</span><span class=\"nf\">new</span><span class=\"p\">(</span><span class=\"n\">class</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">age</span><span class=\"p\">)</span>\n    <span class=\"n\">obj</span> <span class=\"o\">=</span> <span class=\"p\">&#123;&#125;</span>\n<pre><code>&lt;span class=&quot;nb&quot;&gt;setmetatable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- 设置元表&lt;/span&gt;\n&lt;span class=&quot;n&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;class&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;-- 这里让 __index 指向自己，一是方便操作，二是节省空间&lt;/span&gt;\n\n&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;\n&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;  &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;\n&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;\n</code></pre>\n<p><span class=\"k\">end</span></p>\n<p><span class=\"k\">function</span> <span class=\"nc\">Student</span><span class=\"p\">.</span><span class=\"nf\">sayHi</span><span class=\"p\">()</span><br />\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'hi'</span><span class=\"p\">)</span><br />\n<span class=\"k\">end</span><br />\n<span class=\"k\">function</span> <span class=\"nc\">Student</span><span class=\"p\">.</span><span class=\"nf\">show</span><span class=\"p\">(</span><span class=\"n\">this</span><span class=\"p\">)</span>   <span class=\"c1\">– 调用函数是也要知道是那个对象调用的</span><br />\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">this</span><span class=\"p\">.</span><span class=\"n\">name</span><span class=\"p\">)</span><br />\n<span class=\"k\">end</span></p>\n<p><span class=\"n\">stu</span> <span class=\"o\">=</span> <span class=\"n\">Student</span><span class=\"p\">.</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">Student</span><span class=\"p\">,</span> <span class=\"s1\">'fcnaud'</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">)</span>  <span class=\"c1\">– 生成对象时要制定class</span><br />\n<span class=\"n\">stu</span><span class=\"p\">.</span><span class=\"n\">sayHi</span><span class=\"p\">()</span><br />\n<span class=\"n\">stu</span><span class=\"p\">.</span><span class=\"n\">show</span><span class=\"p\">(</span><span class=\"n\">stu</span><span class=\"p\">)</span>  <span class=\"c1\">– 调用函数时要指定对象</span><br />\n</code></pre></div></div></p>\n<p>这里我们就基本地模拟了面向对象。不过每次都要显式指定十分麻烦，lua 中有一个语法糖可以提供我们使用。</p>\n<div class=\"language-lua highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">obj</span><span class=\"p\">.</span><span class=\"n\">func</span><span class=\"p\">(</span><span class=\"n\">obj</span><span class=\"p\">)</span> <span class=\"o\">&lt;=&gt;</span> <span class=\"n\">obj</span><span class=\"p\">:</span><span class=\"n\">func</span><span class=\"p\">()</span>\n</code></pre></div></div>\n<p>使用冒号时，会隐式地将调用者传递进去（体现为 self，类似于 c++ 中的 this)，我们修正一下</p>\n<div class=\"language-lua highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">Student</span> <span class=\"o\">=</span> <span class=\"p\">&#123;&#125;</span>\n<span class=\"k\">function</span> <span class=\"nf\">Student</span><span class=\"p\">:</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">age</span><span class=\"p\">)</span>   <span class=\"c1\">-- 使用冒号</span>\n    <span class=\"n\">obj</span> <span class=\"o\">=</span> <span class=\"p\">&#123;&#125;</span>\n<pre><code>&lt;span class=&quot;nb&quot;&gt;setmetatable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;       &lt;span class=&quot;c1&quot;&gt;-- 这里的 self 指的是 Student‘类’&lt;/span&gt;\n&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;\n\n&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;\n&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;  &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;\n&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;\n</code></pre>\n<p><span class=\"k\">end</span></p>\n<p><span class=\"k\">function</span> <span class=\"nf\">Student</span><span class=\"p\">:</span><span class=\"n\">sayHi</span><span class=\"p\">()</span>           <span class=\"c1\">– 虽然有的函数并不需要数据</span><br />\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'hi'</span><span class=\"p\">)</span><br />\n<span class=\"k\">end</span><br />\n<span class=\"k\">function</span> <span class=\"nf\">Student</span><span class=\"p\">:</span><span class=\"n\">show</span><span class=\"p\">()</span>            <span class=\"c1\">– 这个函数通常是 obj ‘对象’调用的，所以这个 self 指的是对象</span><br />\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">name</span><span class=\"p\">)</span><br />\n<span class=\"k\">end</span></p>\n<p><span class=\"n\">stu</span> <span class=\"o\">=</span> <span class=\"n\">Student</span><span class=\"p\">:</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"s1\">'fcnaud'</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">)</span>     <span class=\"c1\">– 函数调用时也要使用冒号</span><br />\n<span class=\"n\">stu</span><span class=\"p\">:</span><span class=\"n\">sayHi</span><span class=\"p\">()</span><br />\n<span class=\"n\">stu</span><span class=\"p\">:</span><span class=\"n\">show</span><span class=\"p\">()</span><br />\n</code></pre></div></div></p>\n<p>这里我以前最疑惑的就是上边那个 self 了，这个 self 在两个函数里边实际上是不同的。</p>\n<p>最后，这里是我的一个记录，如果可能的话，希望能帮到一些人。如果有人发现文章中的错误，还望指出。</p>\n<hr/>\n<p><strong>参考</strong>:</p>\n<ul>\n  <li><a href=\"http://www.jellythink.com/archives/529\" target=\"_blank\" rel=\"noopener noreferrer\">http://www.jellythink.com/archives/529 果冻想</a></li>\n</ul>\n</div>\n<div class=\"related\">\n  <h2>Related Posts</h2>\n</div>\n<div>\n    <a rel=\"license\" href=\"http://creativecommons.org/licenses/by/4.0/\">\n      <img alt=\"知识共享许可协议\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by/4.0/88x31.png\"/>\n    </a>\n    除非特别声明，作品均采用<a rel=\"license\" href=\"http://creativecommons.org/licenses/by/4.0/\">知识共享署名 4.0 国际许可协议</a>进行许可。\n</div>","text":" categories: programming | tags: lua oo &lt;/span&gt; 一些语言本身是没有面向对象这一说的，类似 lua, js。但是平时使用时，往往会利用语言上的特性来模拟 OO。 初学lua，也看了很多网上的资料、博客，一直不是很理解，只是...","link":"","photos":[],"count_time":{"symbolsCount":"5.2k","symbolsTime":"5 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">Related Posts</span></a></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"lua learning","uid":"a93951064ce695bee6f68c691297e02f","slug":"zl/2016-01-01-774_lua learning","date":"2024-04-03T03:47:36.012Z","updated":"2024-04-03T03:47:36.012Z","comments":true,"path":"api/articles/zl/2016-01-01-774_lua learning.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"https://www.runoob.com/lua/lua-miscellaneous-operator.html data struture: nil boolean number: 双精度的实浮点数 string funcion: 由C或lua编写的函数 userdata:...","link":"","photos":[],"count_time":{"symbolsCount":"1.5k","symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"The Evaluation of Sentence Similarity","uid":"78153e09a4f78ad785398cbaeffd1088","slug":"zl/2016-01-01-771_The Evaluation of Sentence Similarity","date":"2024-04-03T03:47:36.010Z","updated":"2024-04-03T03:47:36.010Z","comments":true,"path":"api/articles/zl/2016-01-01-771_The Evaluation of Sentence Similarity.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"I am trying to write my first english blog based on two reasons: First, the data set used in this blog is english; Second, I’d like to expan...","link":"","photos":[],"count_time":{"symbolsCount":"8.7k","symbolsTime":"8 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}