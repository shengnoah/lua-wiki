{"title":"Lua学习笔记","uid":"d112c00bf05f368c0020529ea6c8efaf","slug":"zl/2016-01-01-294_Lua学习笔记","date":"2024-04-03T03:47:33.152Z","updated":"2024-04-03T03:47:33.153Z","comments":true,"path":"api/articles/zl/2016-01-01-294_Lua学习笔记.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<p>Lua 是一种高性能, 解释型, 面向对象的语句, 广泛用于各种项目的内嵌语言, 如 redis, nginx, scrapy, 愤怒的小鸟, 魔兽世界等等.</p>\n<p>本文主要介绍 Lua 的语法.</p>\n<h2 id=\"1-数据类型\"><a href=\"#1-数据类型\" class=\"headerlink\" title=\"1. 数据类型\"></a>1. 数据类型</h2><p>lua 是一个动态类型语言,一个变量可以存储类型的值.<br/>Lua 常用数据类型:</p>\n<ul>\n<li>空(nil):    空类型只包含一个值,即nil . nil表示空, 没有赋值的变量或标的字段都是 nil.</li>\n<li>布尔(boolean):     布尔类型包含 True 和 False 两个值.</li>\n<li>数字(number):  整数合浮点数是都是使用数字类型存储.</li>\n<li>字符串(string):     字符串类型可以存储字符串,且与Redis的键值一样都是二进制安全的.字符串可以使用单引号或双引号表示,两个符号是相同的. 字符串可以包含转义字符,如 ‘n’,’r’ 等.</li>\n<li>表(table):        表类型是Lua 语言中唯一的数据结构,既可以当数组,又可以当字典,十分灵活.</li>\n<li>函数(function):    函数是Lua中的一等值(first-class value),可以存储在变量中,作为函数的参数或返回结果.</li>\n</ul>\n<h2 id=\"2-变量\"><a href=\"#2-变量\" class=\"headerlink\" title=\"2. 变量\"></a>2. 变量</h2><p>Lua 变量分为全局变量和局部变量. 全局变量无需声明就可以直接使用,默认值是 nil .</p>\n<pre><code>&gt; print(b)\n<p>a = 1　　 – 为全局变量a赋值<br />\na = nil   – 删除全局变量的方法是将其复制为 nil . 全局变量没有声明与未声明之分,只有非 nil 和 nil 的区别.<br />\nprint(b)　– 无需声明即可使用，默认值是nil<br />\n</code></pre><p>声明局部变量的方式为 “local 变量名” :</p></p>\n<pre><code>local c　　--声明一个局部变量c，默认值是nil\nlocal d = 1　--声明一个局部变量d并赋值为1\nlocal e, f　--可以同时声明多个局部变量           \n\n* 局部变量的作用域为从声明开始到所在层的语句块的结尾.\n</code></pre><p>声明一个存储函数的局部变量的方法为 :</p>\n<pre><code>local say_hi = function ()\n    print &#39;hi&#39;\nend     \n</code></pre><p>变量名必须是<strong>非数字开头</strong>,只能包含<strong>字母</strong>,<strong>数字</strong>和<strong>下划线</strong>,<strong>区分大小写</strong>. 变量名不能与Lua的保留关键字相同, 保留关键字如下:</p>\n<pre><code>and break do else elseif end false for function if in local nil not or repeat return then true until while \n</code></pre><h2 id=\"3-注释\"><a href=\"#3-注释\" class=\"headerlink\" title=\"3. 注释\"></a>3. 注释</h2><ul>\n<li>单行: <code>--</code> 开始, 到行尾结束.</li>\n<li>多行:  <code>--[[ ... ]]</code> .</li>\n</ul>\n<h2 id=\"4-赋值\"><a href=\"#4-赋值\" class=\"headerlink\" title=\"4. 赋值\"></a>4. 赋值</h2><p>多重赋值 : </p>\n<pre><code>local a, b = 1, 2　   -- a的值是1，b的值是2\nlocal c, d = 1, 2, 3　-- c的值是1，d的值是2，3被舍弃了\nlocal e, f = 1　　      -- e的值是1，f的值是nil\n</code></pre><p>在执行多重赋值时,Lua会先计算所有表达式的值,比如: </p>\n<pre><code>local a = &#123;1, 2, 3&#125;\nlocal i = 1\ni, a[i] = i + 1, 5      -- i = 2 ; a = &#123;5,2,3&#125; , lua 索引从 1 开始.\n</code></pre><p>lua 中的函数也可以返回多个值</p>\n<h2 id=\"5-操作符\"><a href=\"#5-操作符\" class=\"headerlink\" title=\"5. 操作符\"></a>5. 操作符</h2><h3 id=\"5-1-数学操作符\"><a href=\"#5-1-数学操作符\" class=\"headerlink\" title=\"5.1 数学操作符 :\"></a>5.1 数学操作符 :</h3><p>常见的+、-、*、/、%（取模）、-（一元操作符，取负）和幂运算符号^。</p>\n<p>数学操作符的操作数如果是字符串,则会自动转换为数字.</p>\n<pre><code>print(&#39;1&#39; + 1)　　-- 2\nprint(&#39;10&#39; * 2)　　-- 20          \n</code></pre><h3 id=\"5-2-比较操作符\"><a href=\"#5-2-比较操作符\" class=\"headerlink\" title=\"5.2 比较操作符 :\"></a>5.2 比较操作符 :</h3><ul>\n<li><code>==</code> : 比较两个操作数的类型和值是否相等</li>\n<li><code>~=</code> : 与 == 结果相反</li>\n<li><code>&lt;,&gt;,&lt;=,&gt;=</code> : 大于,小于,小于等于,大于等于.</li>\n</ul>\n<ol>\n<li>比较操作符的结果一定是<strong>布尔类型</strong> ;</li>\n<li>比较操作符,<strong>不会</strong>对两边的操作数进行<strong>自动类型转换</strong>.</li>\n</ol>\n<h3 id=\"5-3-逻辑操作符\"><a href=\"#5-3-逻辑操作符\" class=\"headerlink\" title=\"5.3 逻辑操作符 :\"></a>5.3 逻辑操作符 :</h3><ul>\n<li><code>not</code> : 根据操作数的真和假返回false 和 true</li>\n<li><code>and</code> : a and b, 如果a 是真,则返回 b , 否则返回 a .</li>\n<li><code>or</code>  : a or b , 如果a 是假,则返回 a , 否则返回 b .</li>\n</ul>\n<ol>\n<li><p>只要操作数不是 nil 或 false ,逻辑操作符都认为操作数是真. 特别<strong>注意 0 或 空字符串也被当做真</strong>.</p>\n</li>\n<li><p>Lua 逻辑操作符支持<strong>短路</strong>，也就是说对于 false and foo() ，lua 不会调用foo函数，or 类似。</p>\n</li>\n</ol>\n<h3 id=\"5-4-连接操作符\"><a href=\"#5-4-连接操作符\" class=\"headerlink\" title=\"5.4 连接操作符.\"></a>5.4 连接操作符.</h3><p><code>...</code> 用来连接两个字符串. <strong>连接操作符会自动把数字类型的抓换成字符串类型</strong>.</p>\n<h3 id=\"5-5-取长度操作符\"><a href=\"#5-5-取长度操作符\" class=\"headerlink\" title=\"5.5 取长度操作符.\"></a>5.5 取长度操作符.</h3><p>是lua5.1 新增的操作符, <code>#</code> ,用来获取字符串或表的长度.</p>\n<pre><code>&gt; print(#&#39;hello&#39;)  -- 5\n</code></pre><h3 id=\"5-6-运算符的优先级\"><a href=\"#5-6-运算符的优先级\" class=\"headerlink\" title=\"5.6 运算符的优先级:\"></a>5.6 运算符的优先级:</h3><pre><code>^\nnot # -(一元)\n* / %\n+ -\n..\n&lt; &gt; &lt;= &gt;= ~= ==\nand \nor\n</code></pre><h2 id=\"6-if-语句\"><a href=\"#6-if-语句\" class=\"headerlink\" title=\"6. if 语句\"></a>6. if 语句</h2><p>语法 :</p>\n<pre><code>if 条件表达式 then\n    语句块\nelseif 条件表达式 then\n    语句块\nelse\n    语句块\nend\n</code></pre><p><strong>注意</strong> : </p>\n<ol>\n<li><p><strong>Lua 中只有 nil 和 false 才是假, 其余值,包括0 和空字符串,都被认为是真值</strong>. </p>\n</li>\n<li><p>Lua 每个语句都可以 <code>;</code> 结尾 ,但是一般来说编写 Lua 是会省略 <code>;</code> ,</p>\n</li>\n<li><p>Lua 并不强制要求缩进,所有语句也可以写在一行中, 但为了增强可读性,建议在注意<strong>缩进</strong>.</p>\n<pre><code>&gt; a = 1 b = 2 if a then b = 3 else b = 4 end\n</code></pre></li>\n</ol>\n<h2 id=\"7-循环语句\"><a href=\"#7-循环语句\" class=\"headerlink\" title=\"7. 循环语句\"></a>7. 循环语句</h2><h3 id=\"7-1-while-循环\"><a href=\"#7-1-while-循环\" class=\"headerlink\" title=\"7.1 while 循环\"></a>7.1 while 循环</h3><pre><code>while 条件表达式 do\n    语句块\nend\n</code></pre><h3 id=\"7-2-repeat-循环\"><a href=\"#7-2-repeat-循环\" class=\"headerlink\" title=\"7.2 repeat 循环\"></a>7.2 repeat 循环</h3><pre><code>repeat \n语句块\nuntil 条件表达式\n</code></pre><h3 id=\"7-3-for-循环\"><a href=\"#7-3-for-循环\" class=\"headerlink\" title=\"7.3 for 循环\"></a>7.3 for 循环</h3><h4 id=\"形式一\"><a href=\"#形式一\" class=\"headerlink\" title=\"形式一 :\"></a>形式一 :</h4><p>for 循环中的 i 是<strong>局部变量</strong>, 作用域为 for 循环体内. 虽然没有使用 local 声明,但它<strong>不是全局变量</strong>.</p>\n<pre><code>for 变量=初值,终值,步长 do  -- 步长可省略,默认为 1\n    语句块\nend\n</code></pre><p>示例</p>\n<pre><code># 计算 1 ~ 100 之和\nlocal sum = 0\nfor i = 1 ,100 do\n    sum = sum + 1\nend\n</code></pre><h4 id=\"形式二\"><a href=\"#形式二\" class=\"headerlink\" title=\"形式二 :\"></a>形式二 :</h4><pre><code>for 变量1 ,变量2, ... , 变量N in 迭代器 do\n    语句块\nend\n</code></pre><h2 id=\"8-表类型\"><a href=\"#8-表类型\" class=\"headerlink\" title=\"8. 表类型\"></a>8. 表类型</h2><p>表是Lua中<strong>唯一的数据结构</strong>,可以理解为关联数组, <strong>任何类型的值(除了空类型)都可以作为表的索引</strong>.</p>\n<pre><code>a = &#123;&#125;　　　　        --将变量a赋值为一个空表\na[&#39;field&#39;] = &#39;value&#39;　--将field字段赋值value\nprint(a.field)　　    --打印内容为&#39;value&#39;，a.field是a[&#39;field&#39;]的语法糖。      \n<p>people = &#123;　　　--也可以这样定义<br />\nname = 'tom',<br />\nage = 29<br />\n&#125;<br />\n</code></pre><p>当索引为整数的时候表和传统的数组一样，例如：</p></p>\n<pre><code>a = &#123;&#125;\na[1] = &#39;Tom&#39;\na[2] = &#39;Jeff&#39;\n</code></pre><p>可以写成下面这样：</p>\n<pre><code>a = &#123;&#39;Tom&#39;, &#39;Jeff&#39;&#125;\nprint(a[1])　　　　--打印的内容为&#39;Tom&#39;        \n</code></pre><p>可以使用通用形式的<code>for语句</code>遍历数组,例如:</p>\n<pre><code>for index,value in ipairs(a) do     -- index 迭代数组a 的索引 ; value 迭代数组a 的值.\n    print(index)\n    print(value)\nend\n\n-- ipairs 是Lua 内置的函数,实现类似迭代器的功能.\n</code></pre><p>数字形式的for语句</p>\n<pre><code>for i=1,#a do\n    print(i)\n    print(a[i])\nend\n</code></pre><p><code>pair</code> : 迭代器,用来遍历非数组的表值.</p>\n<pre><code>person = &#123;\n    name = &#39;Tom&#39;,\n    age = 29\n&#125;\nfor index,value in pairs(person) do\n    print(index)\n    print(value)\nend\n</code></pre><p><code>pairs</code> 与 <code>ipairs</code> 的区别在于前者会遍历所有值不为 nil 的索引, 而后者只会从索引 1 开始递增遍历到最后一个值不为 nil 的整数索引.</p>\n<h2 id=\"9-函数\"><a href=\"#9-函数\" class=\"headerlink\" title=\"9. 函数\"></a>9. 函数</h2><p>一般形式:</p>\n<pre><code>function(参数列表)\n    函数体\nend\n</code></pre><p>可以将函数赋值给一个局部变量, 比如:</p>\n<pre><code>    local square = function(num)\n        return num*num\n    end\n<p>** 因为在赋值前声明了局部变量 square, 所以可以在函数内部引用自身(实现递归).<br />\n</code></pre><p>函数参数 :</p></p>\n<ol>\n<li>如果实参的个数<strong>小于</strong>形参的个数,则没有匹配到的形参的值为 <code>nil</code> . </li>\n<li>相对应的,如果实参的个数<strong>大于</strong>形参的个数,则多出的实参会<strong>被忽略</strong>. </li>\n<li><p>如果希望捕获多出的参数(即实现可变参数个数),可以让最后一个形参为 <code>...</code> . </p>\n<pre><code>local function square(...)\n    local argv = &#123;...&#125;\n    for i = 1,#argv do\n        argv[i] = argv[i] * argv[i]\n    end\n    return unpack(argv)   -- unpack 函数用来返回 表 中的元素. 相当于return argv[1], argv[2], argv[3]\nend\na,b,c = square(1,2,3)\nprint(a)    -- 1\nprint(b)    -- 4\nprint(c)    -- 9\n</code></pre></li>\n</ol>\n<p><strong>在 Lua 中, return 和 break (用于跳出循环) 语句必须是语句块中的最后一条语句, 简单的说在这两条语句之后只能是 end,else 或 until 三者之一</strong>. </p>\n<p><strong>如果希望在语句块中间使用这两条语句,可以认为的使用 do 和 end 将其包围</strong>.</p>\n<h2 id=\"10-标准库-http-www-lua-org-manual-5-1-manual-html-5\"><a href=\"#10-标准库-http-www-lua-org-manual-5-1-manual-html-5\" class=\"headerlink\" title=\"10. 标准库 http://www.lua.org/manual/5.1/manual.html#5\"></a>10. 标准库 <a href=\"http://www.lua.org/manual/5.1/manual.html#5\" target=\"_blank\" rel=\"noopener noreferrer\">http://www.lua.org/manual/5.1/manual.html#5</a></h2><p>Lua 的标准库中提供了很多使用的函数, 比如 ipairs,pairs,tonumber,tostring,unpack 都属于标准库中的Base库.</p>\n<p>Redis 支持大部分Lua标准库,如下所示:</p>\n<pre><code>库名      说明\nBase        一些基础函数\nString      用于字符串操作的函数\nTable       用于表操作的函数\nMath        数学计算函数\nDebug       调试函数\n</code></pre><h3 id=\"10-1-String库-可以通过字符串类型的变量以面向对象的形式访问-如-string-len-string-var-可以写成-string-var-len\"><a href=\"#10-1-String库-可以通过字符串类型的变量以面向对象的形式访问-如-string-len-string-var-可以写成-string-var-len\" class=\"headerlink\" title=\"10.1 String库 : 可以通过字符串类型的变量以面向对象的形式访问, 如 string.len(string_var) 可以写成 string_var:len()\"></a>10.1 String库 : 可以通过字符串类型的变量以面向对象的形式访问, 如 string.len(string_var) 可以写成 string_var:len()</h3><ol>\n<li><p>获取字符串长度 : string.len(string) 作用与操作符 “#” 类似</p>\n<pre><code>&gt; print(string.len(&#39;hello&#39;))  -- 5\n&gt; print(#&#39;hello&#39;)   -- 5\n</code></pre></li>\n<li><p>转换大小写 </p>\n<pre><code>string.upper(string)\nstring.lower(string)\n</code></pre></li>\n<li><p>获取子字符串</p>\n<p> string.sub() 可以获取一个字符串从索引 start 开始到 end 结束的子字符串,索引从1 开始. 索引也可以是负数, -1 代表最后一个元素 . </p>\n<pre><code>string.sub(string start[,end ])    -- end 默认为 -1.\n<p>&gt; print(string.sub('hello',1))  – hello<br />\n&gt; print(string.sub('hello',2))  – ello<br />\n&gt; print(string.sub('hello',2,-2))  – ell<br />\n</code></pre></li></p>\n</ol>\n<h3 id=\"10-2-Table库-其中大部分函数都需要表的形式是数组形式\"><a href=\"#10-2-Table库-其中大部分函数都需要表的形式是数组形式\" class=\"headerlink\" title=\"10.2 Table库 : 其中大部分函数都需要表的形式是数组形式.\"></a>10.2 Table库 : 其中大部分函数都需要表的形式是数组形式.</h3><ol>\n<li><p>将数组转换为字符串</p>\n<p> table.concat(table [,sep [,i [,j]]])</p>\n<pre><code># sep : 以 sep 指定的参数分割, 默认为空.\n# i , j : 用来限制要转换的表元素的索引范围. 默认分别为 1 和 表的长度. 不支持负索引.\n</code></pre><blockquote>\n<p>print(table.concat({1,2,3}))     –123<br/>print(table.concat({1,2,3},’,’,2))  –2,3<br/>print(table.concat({1,2,3},’,’,2,2)) –2</p>\n</blockquote>\n</li>\n<li><p>向数组中插入元素</p>\n<p> table.insert(table ,[pos,] value)   # 在指定索引位置 pos 插入元素 value, 并将后面的元素顺序后移. 默认 pos 值是数组长度加 1 , 即在数组尾部插入.</p>\n<pre><code>&gt; a = &#123;1,2,4&#125;\n&gt; table.insert(a,3,3)  # &#123;1,2,3,4&#125;\n&gt; table.insert(a,5)    # &#123;1,2,3,4,5&#125;\n&gt; print(table.concat(a,&#39;,&#39;))\n1,2,3,4,5\n</code></pre></li>\n<li><p>从数组中弹出一个元素</p>\n<p> table.remove(table,[,pos])  # 从指定的索引删除一个元素,并将后面的元素前移,返回删除元素值. 默认 pos 的值是数组的长度,即从数组尾部弹出一个元素.</p>\n<pre><code>&gt; table.remove(a)     --&#123;1,2,3,4&#125;\n&gt; table.remove(a,1)   --&#123;2,3,4&#125;\n&gt; print(table.caoncat(a,&#39;,&#39;))\n2,3,4\n</code></pre></li>\n</ol>\n<h3 id=\"10-3-Math库-提供常用的数学运算函数-如果参数是字符串会自动尝试转换成数字\"><a href=\"#10-3-Math库-提供常用的数学运算函数-如果参数是字符串会自动尝试转换成数字\" class=\"headerlink\" title=\"10.3 Math库 : 提供常用的数学运算函数, 如果参数是字符串会自动尝试转换成数字.\"></a>10.3 Math库 : 提供常用的数学运算函数, 如果参数是字符串会自动尝试转换成数字.</h3><pre><code>math.abs(x)         # 绝对值\nmath.sin(x)         # 三角函数sin\nmath.cos(x)         # 三角函数cos\nmath.tan(x)         # 三角函数tan\nmath.ceil(x)        # 进一取整, 1.2 取整后是 2\nmath.floor(x)       # 向下取整, 1.8 取整后是 1\nmath.max(x,...)     # 获得参数中的最大的值\nmath.min(x,...)     # 获取参数中的最小的值\nmath.pow(x,y)       # 获取 xy 的值\nmath.sqrt(x)        # 获取 x 的平方根\nmath.random([m,[,n]]) # 生成随机数,没有参数 返回 [0,1]的实数, 参数 m 返回范围在 [1,m] 的整数, 同时提供 m n 返回范围在 [m,n] 的整数.\nmath.randomseed(x)  # 设置随机数种子, 同一种子生成的随机数相同.\n</code></pre><h2 id=\"11-其他库\"><a href=\"#11-其他库\" class=\"headerlink\" title=\"11. 其他库\"></a>11. 其他库</h2><p>Redis 还通过 cjson库 和 cmsgpack库 提供了对 JSON 和 MessagePack的支持. Redis自动加载了这两个库,在脚本中可以分别通过 cjson 和 cmsgpack 两个全局变量来访问对应的库.</p>\n<pre><code>local people = &#123;\n    name = &#39;Tom&#39;,\n    age = 29\n&#125;\n<p>– 使用 cjson 序列化成字符串<br />\nlocal json_people_str = cjson.encode(people)</p>\n<p>– 使用 cmsgpack 序列化成字符串<br />\nlocal msgpack_people_str = cmsgpack.pack(people)</p>\n<p>– 使用 cjson 将序列化后的字符串还原成表<br />\nlocal json_people_obj = cjson.decode(people)<br />\nprint(json_people_obj.name)</p>\n<p>– 使用 cmshpack 将序列化后的字符串还原成表<br />\nlocal msgpack_people_obj = cmsgpack.unpack(people)<br />\nprint(msgpack_people_obj.name)<br />\n</code></pre></p>\n","text":"Lua 是一种高性能, 解释型, 面向对象的语句, 广泛用于各种项目的内嵌语言, 如 redis, nginx, scrapy, 愤怒的小鸟, 魔兽世界等等. 本文主要介绍 Lua 的语法. 1. 数据类型lua 是一个动态类型语言,一个变量可以存储类型的值.Lua 常用数据类型...","link":"","photos":[],"count_time":{"symbolsCount":"7.1k","symbolsTime":"6 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">1. 数据类型</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-%E5%8F%98%E9%87%8F\"><span class=\"toc-text\">2. 变量</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-%E6%B3%A8%E9%87%8A\"><span class=\"toc-text\">3. 注释</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-%E8%B5%8B%E5%80%BC\"><span class=\"toc-text\">4. 赋值</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-%E6%93%8D%E4%BD%9C%E7%AC%A6\"><span class=\"toc-text\">5. 操作符</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-1-%E6%95%B0%E5%AD%A6%E6%93%8D%E4%BD%9C%E7%AC%A6\"><span class=\"toc-text\">5.1 数学操作符 :</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-2-%E6%AF%94%E8%BE%83%E6%93%8D%E4%BD%9C%E7%AC%A6\"><span class=\"toc-text\">5.2 比较操作符 :</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-3-%E9%80%BB%E8%BE%91%E6%93%8D%E4%BD%9C%E7%AC%A6\"><span class=\"toc-text\">5.3 逻辑操作符 :</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-4-%E8%BF%9E%E6%8E%A5%E6%93%8D%E4%BD%9C%E7%AC%A6\"><span class=\"toc-text\">5.4 连接操作符.</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-5-%E5%8F%96%E9%95%BF%E5%BA%A6%E6%93%8D%E4%BD%9C%E7%AC%A6\"><span class=\"toc-text\">5.5 取长度操作符.</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-6-%E8%BF%90%E7%AE%97%E7%AC%A6%E7%9A%84%E4%BC%98%E5%85%88%E7%BA%A7\"><span class=\"toc-text\">5.6 运算符的优先级:</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#6-if-%E8%AF%AD%E5%8F%A5\"><span class=\"toc-text\">6. if 语句</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#7-%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5\"><span class=\"toc-text\">7. 循环语句</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#7-1-while-%E5%BE%AA%E7%8E%AF\"><span class=\"toc-text\">7.1 while 循环</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#7-2-repeat-%E5%BE%AA%E7%8E%AF\"><span class=\"toc-text\">7.2 repeat 循环</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#7-3-for-%E5%BE%AA%E7%8E%AF\"><span class=\"toc-text\">7.3 for 循环</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%BD%A2%E5%BC%8F%E4%B8%80\"><span class=\"toc-text\">形式一 :</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%BD%A2%E5%BC%8F%E4%BA%8C\"><span class=\"toc-text\">形式二 :</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#8-%E8%A1%A8%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">8. 表类型</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#9-%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">9. 函数</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#10-%E6%A0%87%E5%87%86%E5%BA%93-http-www-lua-org-manual-5-1-manual-html-5\"><span class=\"toc-text\">10. 标准库 http:&#x2F;&#x2F;www.lua.org&#x2F;manual&#x2F;5.1&#x2F;manual.html#5</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#10-1-String%E5%BA%93-%E5%8F%AF%E4%BB%A5%E9%80%9A%E8%BF%87%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%8F%98%E9%87%8F%E4%BB%A5%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%BD%A2%E5%BC%8F%E8%AE%BF%E9%97%AE-%E5%A6%82-string-len-string-var-%E5%8F%AF%E4%BB%A5%E5%86%99%E6%88%90-string-var-len\"><span class=\"toc-text\">10.1 String库 : 可以通过字符串类型的变量以面向对象的形式访问, 如 string.len(string_var) 可以写成 string_var:len()</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#10-2-Table%E5%BA%93-%E5%85%B6%E4%B8%AD%E5%A4%A7%E9%83%A8%E5%88%86%E5%87%BD%E6%95%B0%E9%83%BD%E9%9C%80%E8%A6%81%E8%A1%A8%E7%9A%84%E5%BD%A2%E5%BC%8F%E6%98%AF%E6%95%B0%E7%BB%84%E5%BD%A2%E5%BC%8F\"><span class=\"toc-text\">10.2 Table库 : 其中大部分函数都需要表的形式是数组形式.</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#10-3-Math%E5%BA%93-%E6%8F%90%E4%BE%9B%E5%B8%B8%E7%94%A8%E7%9A%84%E6%95%B0%E5%AD%A6%E8%BF%90%E7%AE%97%E5%87%BD%E6%95%B0-%E5%A6%82%E6%9E%9C%E5%8F%82%E6%95%B0%E6%98%AF%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%BC%9A%E8%87%AA%E5%8A%A8%E5%B0%9D%E8%AF%95%E8%BD%AC%E6%8D%A2%E6%88%90%E6%95%B0%E5%AD%97\"><span class=\"toc-text\">10.3 Math库 : 提供常用的数学运算函数, 如果参数是字符串会自动尝试转换成数字.</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#11-%E5%85%B6%E4%BB%96%E5%BA%93\"><span class=\"toc-text\">11. 其他库</span></a></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Lua 语言简述","uid":"426c0005f8df72772cb2ffb512e86868","slug":"zl/2016-01-01-293_Lua 语言简述","date":"2024-04-03T03:47:33.152Z","updated":"2024-04-03T03:47:33.152Z","comments":true,"path":"api/articles/zl/2016-01-01-293_Lua 语言简述.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"Lua 介绍Lua 是一种轻量小巧的脚本语言，用标准C语言编写并以源代码形式开放。其设计目的是为了嵌入应用程序中，从而为应用程序提供灵活的扩展和定制功能。 环境安装（mac）使用 homebrew ：[homebrew 安装 lua 环境]1$ brew install lua安...","link":"","photos":[],"count_time":{"symbolsCount":"4.7k","symbolsTime":"4 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Lua程序设计（3）","uid":"7d7dfab24d39d98cb67cd2da899e93f4","slug":"zl/2016-01-01-292_Lua程序设计（3）","date":"2024-04-03T03:47:33.151Z","updated":"2024-04-03T03:47:33.152Z","comments":true,"path":"api/articles/zl/2016-01-01-292_Lua程序设计（3）.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"Lua中的函数。 函数在Lua语言中，函数是对语句和表达式进行抽象的主要方式。函数调用时都需要使用一对圆括号把参数列表扩起来，无论函数需不需要参数。当函数只有一个参数，且该参数是字符串常量或表构造器的时候，括号是可选的。 一例： 1234567function (a) local...","link":"","photos":[],"count_time":{"symbolsCount":"1.9k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}