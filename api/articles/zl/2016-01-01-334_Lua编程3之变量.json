{"title":"Lua编程3之变量","uid":"3ba97d8d6694660cdfa321783f7ec9d9","slug":"zl/2016-01-01-334_Lua编程3之变量","date":"2024-04-03T03:47:35.612Z","updated":"2024-04-03T03:47:35.612Z","comments":true,"path":"api/articles/zl/2016-01-01-334_Lua编程3之变量.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<p>思考并回答以下问题：<br/>1.a, b, c = 0 a和b和c的值分别是多少？<br/>2.多值赋值的两种常用场景是什么？<br/>3.局部变量的作用域是什么？使用局部变量的两个好处是什么？<br/>4.全局变量_G是什么类型？有什么作用？<br/>5.全局环境存在什么问题？</p>\n<p>变量在使用前，必须在代码中进行声明，即创建该变量。</p>\n<p>编译程序执行代码之前编译器需要知道如何给语句变量开辟存储区，用于存储变量的值。</p>\n<p>Lua变量有三种类型：全局变量、局部变量、表中的域。</p>\n<p>Lua 中的变量<span style=\"color:red\">全是全局变量</span>，那怕是语句块或是函数里，除非用local显式声明为局部变量。</p>\n<p>局部变量的作用域为从声明位置开始到所在语句块结束。</p>\n<p>变量的默认值均为nil。</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/><span class=\"line\">9</span><br/><span class=\"line\">10</span><br/><span class=\"line\">11</span><br/><span class=\"line\">12</span><br/><span class=\"line\">13</span><br/><span class=\"line\">14</span><br/><span class=\"line\">15</span><br/><span class=\"line\">16</span><br/><span class=\"line\">17</span><br/><span class=\"line\">18</span><br/><span class=\"line\">19</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br/><span class=\"line\">a = <span class=\"number\">5</span>               <span class=\"comment\">-- 全局变量</span></span><br/><span class=\"line\"><span class=\"keyword\">local</span> b = <span class=\"number\">5</span>         <span class=\"comment\">-- 局部变量</span></span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span></span></span><br/><span class=\"line\">    c = <span class=\"number\">5</span>           <span class=\"comment\">-- 全局变量</span></span><br/><span class=\"line\">    <span class=\"keyword\">local</span> d = <span class=\"number\">6</span>     <span class=\"comment\">-- 局部变量</span></span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/><span class=\"line\"></span><br/><span class=\"line\">joke()</span><br/><span class=\"line\"><span class=\"built_in\">print</span>(c,d)          <span class=\"comment\">--&gt; 5 nil</span></span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"keyword\">do</span> </span><br/><span class=\"line\">    <span class=\"keyword\">local</span> a = <span class=\"number\">6</span>     <span class=\"comment\">-- 局部变量</span></span><br/><span class=\"line\">    b = <span class=\"number\">6</span>           <span class=\"comment\">-- 对局部变量重新赋值</span></span><br/><span class=\"line\">    <span class=\"built_in\">print</span>(a,b);     <span class=\"comment\">--&gt; 6 6</span></span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"built_in\">print</span>(a,b)      <span class=\"comment\">--&gt; 5 6</span></span><br/></pre></td></tr></tbody></table></figure>\n<p>执行以上实例输出结果为：</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">5</span>    <span class=\"literal\">nil</span></span><br/><span class=\"line\"><span class=\"number\">6</span>    <span class=\"number\">6</span></span><br/><span class=\"line\"><span class=\"number\">5</span>    <span class=\"number\">6</span></span><br/></pre></td></tr></tbody></table></figure>\n<h2 id=\"赋值语句\"><a href=\"#赋值语句\" class=\"headerlink\" title=\"赋值语句\"></a><span style=\"color:#EF7060;\">赋值语句</span></h2><p>赋值是改变一个变量的值和改变表域的最基本的方法。</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">a = <span class=\"string\">&#34;hello&#34;</span> .. <span class=\"string\">&#34;world&#34;</span></span><br/><span class=\"line\">t.n = t.n + <span class=\"number\">1</span></span><br/></pre></td></tr></tbody></table></figure>\n<p>Lua可以对多个变量同时赋值，变量列表和值列表的各个元素用逗号分开，赋值语句右边的值会依次赋给左边的变量。</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">a, b = <span class=\"number\">10</span>, <span class=\"number\">2</span>*x <span class=\"comment\">-- 等价于a=10; b=2*x</span></span><br/></pre></td></tr></tbody></table></figure>\n<p>遇到赋值语句Lua会<span style=\"color:red\">先计算右边所有的值</span>然后再执行赋值操作，所以我们可以这样进行交换变量的值：</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">x, y = y, x                     <span class=\"comment\">-- swap &#39;x&#39; for &#39;y&#39;</span></span><br/><span class=\"line\">a[i], a[j] = a[j], a[i]         <span class=\"comment\">-- swap &#39;a[i]&#39; for &#39;a[j]&#39;</span></span><br/></pre></td></tr></tbody></table></figure>\n<p>当变量个数和值的个数不一致时，Lua会一直以变量个数为基础采取以下策略：</p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">a. 变量个数 &gt; 值的个数             按变量个数补足nil</span><br/><span class=\"line\">b. 变量个数 &lt; 值的个数             多余的值会被忽略</span><br/></pre></td></tr></tbody></table></figure>\n<p>例如：</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">a, b, c = <span class=\"number\">0</span>, <span class=\"number\">1</span></span><br/><span class=\"line\"><span class=\"built_in\">print</span>(a,b,c)             <span class=\"comment\">--&gt; 0   1   nil</span></span><br/><span class=\"line\"></span><br/><span class=\"line\">a, b = a+<span class=\"number\">1</span>, b+<span class=\"number\">1</span>, b+<span class=\"number\">2</span>     <span class=\"comment\">-- value of b+2 is ignored</span></span><br/><span class=\"line\"><span class=\"built_in\">print</span>(a,b)               <span class=\"comment\">--&gt; 1   2</span></span><br/><span class=\"line\"></span><br/><span class=\"line\">a, b, c = <span class=\"number\">0</span></span><br/><span class=\"line\"><span class=\"built_in\">print</span>(a,b,c)             <span class=\"comment\">--&gt; 0   nil   nil</span></span><br/></pre></td></tr></tbody></table></figure>\n<p>上面最后一个例子是一个常见的错误情况，注意：如果要对多个变量赋值必须依次对每个变量赋值。</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">a, b, c = <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span></span><br/><span class=\"line\"><span class=\"built_in\">print</span>(a,b,c)             <span class=\"comment\">--&gt; 0   0   0</span></span><br/></pre></td></tr></tbody></table></figure>\n<p>多值赋值经常用来交换变量，或将函数调用返回给变量：</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">a, b = f()</span><br/></pre></td></tr></tbody></table></figure>\n<p>f()返回两个值，第一个赋给a，第二个赋给b。</p>\n<p>应该尽可能的使用局部变量，有两个好处：</p>\n<ul>\n<li>避免命名冲突。</li>\n<li>访问局部变量的速度比全局变量更快。</li>\n</ul>\n<h2 id=\"索引\"><a href=\"#索引\" class=\"headerlink\" title=\"索引\"></a><span style=\"color:#EF7060;\">索引</span></h2><p>对 table 的索引使用方括号 []。Lua 也提供了 . 操作。</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">t[i]</span><br/><span class=\"line\">t.i                 <span class=\"comment\">-- 当索引为字符串类型时的一种简化写法</span></span><br/><span class=\"line\">gettable_event(t,i) <span class=\"comment\">-- 采用索引访问本质上是一个类似这样的函数调用</span></span><br/></pre></td></tr></tbody></table></figure>\n<p>例如：</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">books = {}</span><br/><span class=\"line\">books[<span class=\"string\">&#34;key&#34;</span>] = <span class=\"string\">&#34;大话Unity&#34;</span></span><br/><span class=\"line\"><span class=\"built_in\">print</span>(books[<span class=\"string\">&#34;key&#34;</span>]) <span class=\"comment\">-- 大话Unity</span></span><br/><span class=\"line\"><span class=\"built_in\">print</span>(books.key) <span class=\"comment\">-- 大话Unity</span></span><br/></pre></td></tr></tbody></table></figure>\n<h2 id=\"全局变量\"><a href=\"#全局变量\" class=\"headerlink\" title=\"全局变量\"></a><span style=\"color:#EF7060;\">全局变量</span></h2><p>Lua将其所有的全局变量保存在一个普通的table中，这个table被称为“环境”。它被保存在全局变量_G中。</p>\n<p>Lua中的全局变量不需要声明就可以使用。尽管很方便，但是一旦出现笔误就会造成难以发现的错误。</p>\n<h2 id=\"非全局环境\"><a href=\"#非全局环境\" class=\"headerlink\" title=\"非全局环境\"></a><span style=\"color:#EF7060;\">非全局环境</span></h2><p>全局环境存在一个问题，即修改它将影响到程序的所有部分。Lua 5为此做了一些改进，新的特征可以支持每个函数拥有自己独立的全局环境，而由该函数创建的闭包函数将继承该函数的全局变量表。这里我们可以通过setfenv函数来改变一个函数的环境，该函数接受两个参数，一个是函数名，另一个是新的环境table。第一个参数除了函数名本身，还可以指定为一个数字，以表示当前函数调用栈中的层数。数字1表示当前函数，2表示它的调用函数，以此类推。</p>\n<p>见如下代码：</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/><span class=\"line\">9</span><br/><span class=\"line\">10</span><br/><span class=\"line\">11</span><br/><span class=\"line\">12</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">a = <span class=\"number\">1</span></span><br/><span class=\"line\"><span class=\"built_in\">setfenv</span>(<span class=\"number\">1</span>,{})</span><br/><span class=\"line\"><span class=\"built_in\">print</span>(a)</span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"comment\">--输出结果为：</span></span><br/><span class=\"line\"><span class=\"comment\">--[[</span></span><br/><span class=\"line\"><span class=\"comment\">LuaException: byfile.lua:3: attempt to call a nil value (global &#39;print&#39;)</span></span><br/><span class=\"line\"><span class=\"comment\">stack traceback:</span></span><br/><span class=\"line\"><span class=\"comment\">    byfile.lua:3: in main chunk</span></span><br/><span class=\"line\"><span class=\"comment\">    [C]: in function &#39;require&#39;</span></span><br/><span class=\"line\"><span class=\"comment\">    [string &#34;chunk&#34;]:1: in main chunk</span></span><br/><span class=\"line\"><span class=\"comment\">--]]</span></span><br/></pre></td></tr></tbody></table></figure>\n<p>为什么得到这样的结果呢？因为print和变量a一样，都是全局表中的字段，而新的全局表是空的，所以print调用将会报错。</p>\n<p>为了解决这个副作用，我们可以让原有的全局表_G作为新全局表的内部表，在访问已有全局变量时，可以直接转到_G中的字段，而对于新的全局字段，则保留在新的全局表中。这样即便是函数中的误修改，也不会影响到其他用到全局变量_G的地方。见如下代码：</p>\n<blockquote>\n<p>下面代码中用到了元表的概念，可以后面学过以后再回来看</p>\n</blockquote>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/><span class=\"line\">9</span><br/><span class=\"line\">10</span><br/><span class=\"line\">11</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">a = <span class=\"number\">1</span></span><br/><span class=\"line\"><span class=\"keyword\">local</span> newgt = {}  <span class=\"comment\">--新环境表</span></span><br/><span class=\"line\"><span class=\"built_in\">setmetatable</span>(newgt,{<span class=\"built_in\">__index</span> = <span class=\"built_in\">_G</span>})</span><br/><span class=\"line\"><span class=\"built_in\">setfenv</span>(<span class=\"number\">1</span>,newgt)</span><br/><span class=\"line\"><span class=\"built_in\">print</span>(a)  <span class=\"comment\">--输出1</span></span><br/><span class=\"line\"></span><br/><span class=\"line\">a = <span class=\"number\">10</span></span><br/><span class=\"line\"><span class=\"built_in\">print</span>(a)  <span class=\"comment\">--输出10</span></span><br/><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">_G</span>.a) <span class=\"comment\">--输出1</span></span><br/><span class=\"line\"><span class=\"built_in\">_G</span>.a = <span class=\"number\">20</span></span><br/><span class=\"line\"><span class=\"built_in\">print</span>(a)  <span class=\"comment\">--输出10</span></span><br/></pre></td></tr></tbody></table></figure>\n<p>最后给出的示例是函数环境变量的继承性。见如下代码：</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/><span class=\"line\">9</span><br/><span class=\"line\">10</span><br/><span class=\"line\">11</span><br/><span class=\"line\">12</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">factory</span><span class=\"params\">()</span></span></span><br/><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span> <span class=\"keyword\">return</span> a <span class=\"keyword\">end</span></span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/><span class=\"line\">a = <span class=\"number\">3</span></span><br/><span class=\"line\">f1 = factory()</span><br/><span class=\"line\">f2 = factory()</span><br/><span class=\"line\"><span class=\"built_in\">print</span>(f1())  <span class=\"comment\">--输出3</span></span><br/><span class=\"line\"><span class=\"built_in\">print</span>(f2())  <span class=\"comment\">--输出3</span></span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"built_in\">setfenv</span>(f1,{a = <span class=\"number\">10</span>})</span><br/><span class=\"line\"><span class=\"built_in\">print</span>(f1())  <span class=\"comment\">--输出10</span></span><br/><span class=\"line\"><span class=\"built_in\">print</span>(f2())  <span class=\"comment\">--输出3</span></span><br/></pre></td></tr></tbody></table></figure>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a><span style=\"color:#039BE5;\">总结</span></h1><p>在lua中要尽量少用全局变量，多使用局部变量，需要记住的是：** <span style=\"color:red\">变量默认都是全局变量，局部变量需要加local关键字。</span> **</p>","text":"思考并回答以下问题：1.a, b, c = 0 a和b和c的值分别是多少？2.多值赋值的两种常用场景是什么？3.局部变量的作用域是什么？使用局部变量的两个好处是什么？4.全局变量_G是什么类型？有什么作用？5.全局环境存在什么问题？ 变量在使用前，必须在代码中进行声明，即创建该变...","link":"","photos":[],"count_time":{"symbolsCount":"3.1k","symbolsTime":"3 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%B5%8B%E5%80%BC%E8%AF%AD%E5%8F%A5\"><span class=\"toc-text\">赋值语句</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%B4%A2%E5%BC%95\"><span class=\"toc-text\">索引</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F\"><span class=\"toc-text\">全局变量</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%9D%9E%E5%85%A8%E5%B1%80%E7%8E%AF%E5%A2%83\"><span class=\"toc-text\">非全局环境</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">总结</span></a>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Lua程序设计（4）","uid":"a38c8009ccfd4c73c756fcf8131930d3","slug":"zl/2016-01-01-336_Lua程序设计（4）","date":"2024-04-03T03:47:35.614Z","updated":"2024-04-03T03:47:35.614Z","comments":true,"path":"api/articles/zl/2016-01-01-336_Lua程序设计（4）.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"Lua的输入输出、补充知识 输入输出单就Lua语言而言，只提供了ISO C语言标准支持的功能，即基本的文件操作等。 简单I/O模型简单模型虚拟了一个当前输入流和一个当前输出流。函数io.input和函数io.output可以用于改变当前的输入输出流，调用io.input会以只读模...","link":"","photos":[],"count_time":{"symbolsCount":"1.1k","symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Lua","uid":"15b0cdc6d03f6c3f6bf8d3a7ff197317","slug":"zl/2016-01-01-335_Lua","date":"2024-04-03T03:47:35.612Z","updated":"2024-04-03T03:47:35.612Z","comments":true,"path":"api/articles/zl/2016-01-01-335_Lua.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":" Lua函数定义格式： optional_function_scope function function_name( argument1, argument2, argument3..., argumentn) function_body return result_param...","link":"","photos":[],"count_time":{"symbolsCount":"1.2k","symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}