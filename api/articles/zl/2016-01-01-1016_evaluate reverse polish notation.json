{"title":"evaluate reverse polish notation","uid":"c5597d0c0640986b1ed3cb3270e77eb0","slug":"zl/2016-01-01-1016_evaluate reverse polish notation","date":"2024-04-03T03:47:32.966Z","updated":"2024-04-03T03:47:32.967Z","comments":true,"path":"api/articles/zl/2016-01-01-1016_evaluate reverse polish notation.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<p>Evaluate the value of an arithmetic expression in Reverse Polish Notation.</p>\n<p>Valid operators are <code>+, -, *, /</code>. Each operand may be an integer or another expression.</p>\n<p>Note:</p>\n<ul>\n<li>Division between two integers should truncate toward zero.</li>\n<li>The given RPN expression is always valid. That means the expression would always evaluate to a result and there won’t be any divide by zero operation.</li>\n</ul>\n<p>Example 1:</p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">Input: [&#34;2&#34;, &#34;1&#34;, &#34;+&#34;, &#34;3&#34;, &#34;*&#34;]</span><br/><span class=\"line\">Output: 9</span><br/><span class=\"line\">Explanation: ((2 + 1) * 3) = 9</span><br/></pre></td></tr></tbody></table></figure>\n<p>Example 2:</p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">Input: [&#34;4&#34;, &#34;13&#34;, &#34;5&#34;, &#34;/&#34;, &#34;+&#34;]</span><br/><span class=\"line\">Output: 6</span><br/><span class=\"line\">Explanation: (4 + (13 / 5)) = 6</span><br/></pre></td></tr></tbody></table></figure>\n<p>Example 3:</p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/><span class=\"line\">9</span><br/><span class=\"line\">10</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">Input: [&#34;10&#34;, &#34;6&#34;, &#34;9&#34;, &#34;3&#34;, &#34;+&#34;, &#34;-11&#34;, &#34;*&#34;, &#34;/&#34;, &#34;*&#34;, &#34;17&#34;, &#34;+&#34;, &#34;5&#34;, &#34;+&#34;]</span><br/><span class=\"line\">Output: 22</span><br/><span class=\"line\">Explanation: </span><br/><span class=\"line\">  ((10 * (6 / ((9 + 3) * -11))) + 17) + 5</span><br/><span class=\"line\">= ((10 * (6 / (12 * -11))) + 17) + 5</span><br/><span class=\"line\">= ((10 * (6 / -132)) + 17) + 5</span><br/><span class=\"line\">= ((10 * 0) + 17) + 5</span><br/><span class=\"line\">= (0 + 17) + 5</span><br/><span class=\"line\">= 17 + 5</span><br/><span class=\"line\">= 22</span><br/></pre></td></tr></tbody></table></figure>\n<h1 id=\"analysis\"><a href=\"#analysis\" class=\"headerlink\" title=\"analysis\"></a>analysis</h1><p>逆波兰表达式最小的一个单元是例如<code>3 2 +</code>, 这就是所谓的 3+2. 但是不是所有情况都这样简单, 比如以下 <code>5 5 / 2 +</code>, 画成树如下图:</p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">     &#39;+&#39;</span><br/><span class=\"line\">    /   </span><br/><span class=\"line\">  &#39;/&#39;    2</span><br/><span class=\"line\"> /  </span><br/><span class=\"line\">5    5</span><br/></pre></td></tr></tbody></table></figure>\n<p>有没有觉得像是 pre-order recursion 可以解决的?</p>\n<p>pre-order recursion 可以解决, 但是用了 call stack, 本质上是一个 stack, 那么, 这道题也可以用两个 stack 来解决.</p>\n<p>time O(n)<br/>space 不好说</p>\n<h1 id=\"soluton2-050118\"><a href=\"#soluton2-050118\" class=\"headerlink\" title=\"soluton2 050118\"></a>soluton2 050118</h1><figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/><span class=\"line\">9</span><br/><span class=\"line\">10</span><br/><span class=\"line\">11</span><br/><span class=\"line\">12</span><br/><span class=\"line\">13</span><br/><span class=\"line\">14</span><br/><span class=\"line\">15</span><br/><span class=\"line\">16</span><br/><span class=\"line\">17</span><br/><span class=\"line\">18</span><br/><span class=\"line\">19</span><br/><span class=\"line\">20</span><br/><span class=\"line\">21</span><br/><span class=\"line\">22</span><br/><span class=\"line\">23</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span>  </span>{</span><br/><span class=\"line\">    </span><br/><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">evalRPN</span><span class=\"params\">(String[] tokens)</span> </span>{</span><br/><span class=\"line\">        Deque&lt;Integer&gt; stack = <span class=\"keyword\">new</span> LinkedList&lt;&gt;();</span><br/><span class=\"line\">        </span><br/><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i&lt;tokens.length; i++) {</span><br/><span class=\"line\">            <span class=\"keyword\">if</span> (tokens[i].equals(<span class=\"string\">&#34;+&#34;</span>)) {</span><br/><span class=\"line\">                stack.push(stack.pop()+stack.pop());</span><br/><span class=\"line\">            } <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (tokens[i].equals(<span class=\"string\">&#34;-&#34;</span>)) {</span><br/><span class=\"line\">                stack.push(-stack.pop()+stack.pop());</span><br/><span class=\"line\">            } <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (tokens[i].equals(<span class=\"string\">&#34;*&#34;</span>)) {</span><br/><span class=\"line\">                stack.push(stack.pop()*stack.pop());</span><br/><span class=\"line\">            } <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (tokens[i].equals(<span class=\"string\">&#34;/&#34;</span>)) {</span><br/><span class=\"line\">                <span class=\"keyword\">int</span> second = stack.pop();</span><br/><span class=\"line\">                <span class=\"keyword\">int</span> first = stack.pop();</span><br/><span class=\"line\">                stack.push(first/second);</span><br/><span class=\"line\">            } <span class=\"keyword\">else</span> {</span><br/><span class=\"line\">                stack.push(Integer.parseInt(tokens[i]));</span><br/><span class=\"line\">            }</span><br/><span class=\"line\">        }</span><br/><span class=\"line\">        <span class=\"keyword\">return</span> stack.pop();</span><br/><span class=\"line\">    }</span><br/><span class=\"line\">}</span><br/></pre></td></tr></tbody></table></figure>\n<h1 id=\"solution1-050118\"><a href=\"#solution1-050118\" class=\"headerlink\" title=\"solution1 050118\"></a>solution1 050118</h1><figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/><span class=\"line\">9</span><br/><span class=\"line\">10</span><br/><span class=\"line\">11</span><br/><span class=\"line\">12</span><br/><span class=\"line\">13</span><br/><span class=\"line\">14</span><br/><span class=\"line\">15</span><br/><span class=\"line\">16</span><br/><span class=\"line\">17</span><br/><span class=\"line\">18</span><br/><span class=\"line\">19</span><br/><span class=\"line\">20</span><br/><span class=\"line\">21</span><br/><span class=\"line\">22</span><br/><span class=\"line\">23</span><br/><span class=\"line\">24</span><br/><span class=\"line\">25</span><br/><span class=\"line\">26</span><br/><span class=\"line\">27</span><br/><span class=\"line\">28</span><br/><span class=\"line\">29</span><br/><span class=\"line\">30</span><br/><span class=\"line\">31</span><br/><span class=\"line\">32</span><br/><span class=\"line\">33</span><br/><span class=\"line\">34</span><br/><span class=\"line\">35</span><br/><span class=\"line\">36</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span>  </span>{</span><br/><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">evalRPN</span><span class=\"params\">(String[] tokens)</span> </span>{</span><br/><span class=\"line\">        Deque&lt;String&gt; stack = <span class=\"keyword\">new</span> LinkedList&lt;&gt;();</span><br/><span class=\"line\">        <span class=\"keyword\">for</span>(String token: tokens) {</span><br/><span class=\"line\">            stack.push(token);</span><br/><span class=\"line\">        }</span><br/><span class=\"line\">        <span class=\"keyword\">return</span> eval(stack);</span><br/><span class=\"line\">    }</span><br/><span class=\"line\">    </span><br/><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">eval</span><span class=\"params\">(Deque&lt;String&gt; stack)</span> </span>{</span><br/><span class=\"line\">        <span class=\"keyword\">if</span>(!isOperator(stack.peek())) {</span><br/><span class=\"line\">            <span class=\"keyword\">return</span> Integer.parseInt(stack.pop());</span><br/><span class=\"line\">        }</span><br/><span class=\"line\">        </span><br/><span class=\"line\">        String operator = stack.pop();</span><br/><span class=\"line\">        <span class=\"keyword\">int</span> firstOperand = eval(stack);</span><br/><span class=\"line\">        <span class=\"keyword\">int</span> secondOperand = eval(stack);</span><br/><span class=\"line\">        </span><br/><span class=\"line\">        <span class=\"keyword\">if</span>(operator.equals(<span class=\"string\">&#34;+&#34;</span>)) {</span><br/><span class=\"line\">            <span class=\"keyword\">return</span> firstOperand+secondOperand;</span><br/><span class=\"line\">        }<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(operator.equals(<span class=\"string\">&#34;-&#34;</span>)) {</span><br/><span class=\"line\">            <span class=\"keyword\">return</span> secondOperand-firstOperand;</span><br/><span class=\"line\">        }<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(operator.equals(<span class=\"string\">&#34;*&#34;</span>)) {</span><br/><span class=\"line\">            <span class=\"keyword\">return</span> firstOperand*secondOperand;</span><br/><span class=\"line\">        }<span class=\"keyword\">else</span>{</span><br/><span class=\"line\">            <span class=\"keyword\">return</span> secondOperand/firstOperand;</span><br/><span class=\"line\">        }</span><br/><span class=\"line\">    }</span><br/><span class=\"line\">    </span><br/><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isOperator</span><span class=\"params\">(String token)</span> </span>{</span><br/><span class=\"line\">        <span class=\"keyword\">return</span> token.equals(<span class=\"string\">&#34;+&#34;</span>) ||</span><br/><span class=\"line\">            token.equals(<span class=\"string\">&#34;-&#34;</span>) ||</span><br/><span class=\"line\">            token.equals(<span class=\"string\">&#34;*&#34;</span>) ||</span><br/><span class=\"line\">            token.equals(<span class=\"string\">&#34;/&#34;</span>);</span><br/><span class=\"line\">    }</span><br/><span class=\"line\">}</span><br/></pre></td></tr></tbody></table></figure>","text":"Evaluate the value of an arithmetic expression in Reverse Polish Notation. Valid operators are +, -, *, /. Each operand may be an integer or...","link":"","photos":[],"count_time":{"symbolsCount":"3.3k","symbolsTime":"3 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#analysis\"><span class=\"toc-text\">analysis</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#soluton2-050118\"><span class=\"toc-text\">soluton2 050118</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#solution1-050118\"><span class=\"toc-text\">solution1 050118</span></a></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"LuAndFang","uid":"399895f90cb3a2f5c8abf25751da1f87","slug":"zl/2016-01-01-1014_LuAndFang","date":"2024-04-03T03:47:32.966Z","updated":"2024-04-03T03:47:32.966Z","comments":true,"path":"api/articles/zl/2016-01-01-1014_LuAndFang.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"她可以褪色，可以枯萎，怎样都可以，但只要我看她一眼，万般柔情便涌上心头。","link":"","photos":[],"count_time":{"symbolsCount":36,"symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Leetcode 399. Evaluate Division","uid":"1300e83de63ca3d0070502fbe18c1926","slug":"zl/2016-01-01-1015_Leetcode 399. Evaluate Division","date":"2024-04-03T03:47:32.966Z","updated":"2024-04-03T03:47:32.966Z","comments":true,"path":"api/articles/zl/2016-01-01-1015_Leetcode 399. Evaluate Division.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"Equations are given in the format A / B = k, where A and B are variables represented as strings, and k is a real number (floating point numb...","link":"","photos":[],"count_time":{"symbolsCount":"4k","symbolsTime":"4 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}