{"title":"Lua编程5之函数","uid":"3de999cece84151e04fc2fbf7bda0ea9","slug":"zl/2016-01-01-315_Lua编程5之函数","date":"2024-04-03T03:47:35.596Z","updated":"2024-04-03T03:47:35.596Z","comments":true,"path":"api/articles/zl/2016-01-01-315_Lua编程5之函数.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<p>思考并回答以下问题：<br/>1.编程中最重要的是什么？<br/>2.描述一下函数的两种用途。<br/>3.如何指定为局部函数？<br/>4.函数可以返回多个值吗？如何返回？<br/>5.foo = function(x) return 2 * x end 如何调用？<br/>6.Lua中实参和形参的数量不一致如何处理？<br/>7.可变参数是什么意思？如何使用？动手实现print(“平均值为”,average(10,5,3,4,5,6))</p>\n<p>编程中最重要的就是如何提高<span style=\"color:red\">代码的复用</span>，最基础的方法就是提取函数。今天就来看看Lua中如何编写函数。</p>\n<p>在Lua中，函数是对语句和表达式进行抽象的主要方法。既可以用来处理一些特殊的工作，也可以用来计算一些值。</p>\n<p>Lua 提供了许多的内建函数，你可以很方便的在程序中调用它们，如print()函数可以将传入的参数打印在控制台上。</p>\n<p>Lua 函数主要有两种用途：</p>\n<ul>\n<li>完成指定的任务，这种情况下函数作为调用语句使用；（例如print）</li>\n<li>计算并返回值，这种情况下函数作为赋值语句的表达式使用。（例如add()）</li>\n</ul>\n<h2 id=\"函数定义\"><a href=\"#函数定义\" class=\"headerlink\" title=\"函数定义\"></a><span style=\"color:#EF7060;\">函数定义</span></h2><p>Lua 编程语言函数定义格式如下：</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">optional_function_scope <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">( argument1, argument2, argument3..., argumentn)</span></span></span><br/><span class=\"line\">    function_body</span><br/><span class=\"line\">    <span class=\"keyword\">return</span> result_params_comma_separated</span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/></pre></td></tr></tbody></table></figure>\n<p>解析：</p>\n<p><span style=\"color:blue\">optional_function_scope</span>: 该参数是可选的，指定函数是全局函数还是局部函数，未设置该参数默认为全局函数，如果你需要设置函数为局部函数需要使用关键字 local。</p>\n<p><span style=\"color:blue\">function_name</span>: 指定函数名称。</p>\n<p><span style=\"color:blue\">argument1, argument2, argument3…, argumentn</span>: 函数参数，多个参数以逗号隔开，函数也可以不带参数。</p>\n<p><span style=\"color:blue\">function_body</span>: 函数体，函数中需要执行的代码语句块。</p>\n<p><span style=\"color:blue\">result_params_comma_separated</span>: 函数返回值，Lua语言函数可以返回多个值，每个值以逗号隔开。类似C#中的元组。</p>\n<p>在声明Lua函数时，可以直接给出所谓的函数名，如：</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">(x)</span></span> <span class=\"keyword\">return</span> <span class=\"number\">2</span> * x <span class=\"keyword\">end</span></span><br/></pre></td></tr></tbody></table></figure>\n<p>我们同样可以使用下面这种更为简化的方式声明Lua中的函数，类似C#中的匿名方法，如：</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">foo = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(x)</span></span> <span class=\"keyword\">return</span> <span class=\"number\">2</span> * x <span class=\"keyword\">end</span></span><br/></pre></td></tr></tbody></table></figure>\n<p>** 实例 **<br/>以下实例定义了函数 max()，参数为 num1, num2，用于比较两值的大小，并返回最大值：</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/><span class=\"line\">9</span><br/><span class=\"line\">10</span><br/><span class=\"line\">11</span><br/><span class=\"line\">12</span><br/><span class=\"line\">13</span><br/><span class=\"line\">14</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br/><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">max</span><span class=\"params\">(num1, num2)</span></span></span><br/><span class=\"line\"></span><br/><span class=\"line\">   <span class=\"keyword\">if</span> (num1 &gt; num2) <span class=\"keyword\">then</span></span><br/><span class=\"line\">      result = num1;</span><br/><span class=\"line\">   <span class=\"keyword\">else</span></span><br/><span class=\"line\">      result = num2;</span><br/><span class=\"line\">   <span class=\"keyword\">end</span></span><br/><span class=\"line\"></span><br/><span class=\"line\">   <span class=\"keyword\">return</span> result; </span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/><span class=\"line\"><span class=\"comment\">-- 调用函数</span></span><br/><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#34;两值比较最大值为 &#34;</span>,<span class=\"built_in\">max</span>(<span class=\"number\">10</span>,<span class=\"number\">4</span>))</span><br/><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#34;两值比较最大值为 &#34;</span>,<span class=\"built_in\">max</span>(<span class=\"number\">5</span>,<span class=\"number\">6</span>))</span><br/></pre></td></tr></tbody></table></figure>\n<p>以上代码执行结果为：</p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">两值比较最大值为     10</span><br/><span class=\"line\">两值比较最大值为     6</span><br/></pre></td></tr></tbody></table></figure>\n<p>Lua 中我们可以将函数作为参数传递给函数，如下实例：</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/><span class=\"line\">9</span><br/><span class=\"line\">10</span><br/><span class=\"line\">11</span><br/><span class=\"line\">12</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">myprint = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(param)</span></span></span><br/><span class=\"line\">   <span class=\"built_in\">print</span>(<span class=\"string\">&#34;这是打印函数 -   ##&#34;</span>,param,<span class=\"string\">&#34;##&#34;</span>)</span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span><span class=\"params\">(num1,num2,functionPrint)</span></span></span><br/><span class=\"line\">   result = num1 + num2</span><br/><span class=\"line\">   <span class=\"comment\">-- 调用传递的函数参数</span></span><br/><span class=\"line\">   functionPrint(result)</span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/><span class=\"line\">myprint(<span class=\"number\">10</span>)</span><br/><span class=\"line\"><span class=\"comment\">-- myprint 函数作为参数传递</span></span><br/><span class=\"line\">add(<span class=\"number\">2</span>,<span class=\"number\">5</span>,myprint)</span><br/></pre></td></tr></tbody></table></figure>\n<p>以上代码执行结果为：</p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">这是打印函数 -   ##    10    ##</span><br/><span class=\"line\">这是打印函数 -   ##    7    ##</span><br/></pre></td></tr></tbody></table></figure>\n<h2 id=\"函数调用\"><a href=\"#函数调用\" class=\"headerlink\" title=\"函数调用\"></a><span style=\"color:#EF7060;\">函数调用</span></h2><p>在Lua中函数的调用方式和C#语言基本相同，如：print(“Hello World”)和a = add(x, y)。</p>\n<p>唯一的差别是，如果函数只有一个参数，并且该参数的类型为字符串常量或table的构造器，那么圆括号可以省略，如<span style=\"color:red\">print “Hello World”和f {x = 20, y = 20}</span>。</p>\n<p>Lua为面对对象式的调用也提供了一种特殊的语法–冒号操作符。表达式<span style=\"color:red\">o.foo(o,x)</span>的另一种写法是<span style=\"color:red\">o:foo(x)</span>。冒号操作符使调用o.foo时将o隐含的作为函数的第一个参数。</p>\n<p>需要说明的是，** <span style=\"color:red\">Lua中实参和形参的数量可以不一致</span> ** ，一旦出现这种情况，Lua的处理规则等同于多重赋值，即实参多于形参，多出的部分被忽略，如果相反，没有被初始化的形参的缺省值为nil。</p>\n<h2 id=\"多返回值\"><a href=\"#多返回值\" class=\"headerlink\" title=\"多返回值\"></a><span style=\"color:#EF7060;\">多返回值</span></h2><p>Lua函数可以返回多个结果值，比如string.find，其返回匹配串”开始和结束的下标”（如果不存在匹配串返回nil）。</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">s, e = <span class=\"built_in\">string</span>.<span class=\"built_in\">find</span>(<span class=\"string\">&#34;hello world&#34;</span>, <span class=\"string\">&#34;wo&#34;</span>) </span><br/><span class=\"line\"><span class=\"built_in\">print</span>(s, e) <span class=\"comment\">-- 7    8</span></span><br/></pre></td></tr></tbody></table></figure>\n<p>Lua函数中，在return后列出要返回的值的列表即可返回多值，如：</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/><span class=\"line\">9</span><br/><span class=\"line\">10</span><br/><span class=\"line\">11</span><br/><span class=\"line\">12</span><br/><span class=\"line\">13</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">maximum</span> <span class=\"params\">(a)</span></span></span><br/><span class=\"line\">    <span class=\"keyword\">local</span> mi = <span class=\"number\">1</span>             <span class=\"comment\">-- 最大值索引</span></span><br/><span class=\"line\">    <span class=\"keyword\">local</span> m = a[mi]          <span class=\"comment\">-- 最大值</span></span><br/><span class=\"line\">    <span class=\"keyword\">for</span> i,val <span class=\"keyword\">in</span> <span class=\"built_in\">ipairs</span>(a) <span class=\"keyword\">do</span></span><br/><span class=\"line\">       <span class=\"keyword\">if</span> val &gt; m <span class=\"keyword\">then</span></span><br/><span class=\"line\">           mi = i</span><br/><span class=\"line\">           m = val</span><br/><span class=\"line\">       <span class=\"keyword\">end</span></span><br/><span class=\"line\">    <span class=\"keyword\">end</span></span><br/><span class=\"line\">    <span class=\"keyword\">return</span> m, mi</span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"built_in\">print</span>(maximum({<span class=\"number\">8</span>,<span class=\"number\">10</span>,<span class=\"number\">23</span>,<span class=\"number\">12</span>,<span class=\"number\">5</span>}))</span><br/></pre></td></tr></tbody></table></figure>\n<p>以上代码执行结果为：</p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">23    3</span><br/></pre></td></tr></tbody></table></figure>\n<h2 id=\"可变参数\"><a href=\"#可变参数\" class=\"headerlink\" title=\"可变参数\"></a><span style=\"color:#EF7060;\">可变参数</span></h2><p>Lua 函数可以接受可变数目的参数，和 C 语言类似，在函数参数列表中使用三点 … 表示函数有可变的参数。</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span><span class=\"params\">(...)</span></span>  </span><br/><span class=\"line\"><span class=\"keyword\">local</span> s = <span class=\"number\">0</span>  </span><br/><span class=\"line\">  <span class=\"keyword\">for</span> i, v <span class=\"keyword\">in</span> <span class=\"built_in\">ipairs</span>{...} <span class=\"keyword\">do</span>   <span class=\"comment\">--&gt; {...} 表示一个由所有变长参数构成的数组  </span></span><br/><span class=\"line\">    s = s + v  </span><br/><span class=\"line\">  <span class=\"keyword\">end</span>  </span><br/><span class=\"line\">  <span class=\"keyword\">return</span> s  </span><br/><span class=\"line\"><span class=\"keyword\">end</span>  </span><br/><span class=\"line\"><span class=\"built_in\">print</span>(add(<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>))  <span class=\"comment\">---&gt;25</span></span><br/></pre></td></tr></tbody></table></figure>\n<p>我们可以将可变参数赋值给一个变量。</p>\n<p>例如，我们计算几个数的平均值：</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/><span class=\"line\">9</span><br/><span class=\"line\">10</span><br/><span class=\"line\">11</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">average</span><span class=\"params\">(...)</span></span></span><br/><span class=\"line\">   result = <span class=\"number\">0</span></span><br/><span class=\"line\">   <span class=\"keyword\">local</span> <span class=\"built_in\">arg</span>={...}    <span class=\"comment\">--&gt; arg 为一个表，局部变量</span></span><br/><span class=\"line\">   <span class=\"keyword\">for</span> i,v <span class=\"keyword\">in</span> <span class=\"built_in\">ipairs</span>(<span class=\"built_in\">arg</span>) <span class=\"keyword\">do</span></span><br/><span class=\"line\">      result = result + v</span><br/><span class=\"line\">   <span class=\"keyword\">end</span></span><br/><span class=\"line\">   <span class=\"built_in\">print</span>(<span class=\"string\">&#34;总共传入 &#34;</span> .. #<span class=\"built_in\">arg</span> .. <span class=\"string\">&#34; 个数&#34;</span>)</span><br/><span class=\"line\">   <span class=\"keyword\">return</span> result/#<span class=\"built_in\">arg</span></span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#34;平均值为&#34;</span>,average(<span class=\"number\">10</span>,<span class=\"number\">5</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>))</span><br/></pre></td></tr></tbody></table></figure>\n<p>以上代码执行结果为：</p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">总共传入 6 个数</span><br/><span class=\"line\">平均值为    5.5</span><br/></pre></td></tr></tbody></table></figure>\n<p>我们也可以通过 select(“#”,…) 来获取可变参数的数量:</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/><span class=\"line\">9</span><br/><span class=\"line\">10</span><br/><span class=\"line\">11</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">average</span><span class=\"params\">(...)</span></span></span><br/><span class=\"line\">   result = <span class=\"number\">0</span></span><br/><span class=\"line\">   <span class=\"keyword\">local</span> <span class=\"built_in\">arg</span>={...}</span><br/><span class=\"line\">   <span class=\"keyword\">for</span> i,v <span class=\"keyword\">in</span> <span class=\"built_in\">ipairs</span>(<span class=\"built_in\">arg</span>) <span class=\"keyword\">do</span></span><br/><span class=\"line\">      result = result + v</span><br/><span class=\"line\">   <span class=\"keyword\">end</span></span><br/><span class=\"line\">   <span class=\"built_in\">print</span>(<span class=\"string\">&#34;总共传入 &#34;</span> .. <span class=\"built_in\">select</span>(<span class=\"string\">&#34;#&#34;</span>,...) .. <span class=\"string\">&#34; 个数&#34;</span>)</span><br/><span class=\"line\">   <span class=\"keyword\">return</span> result/<span class=\"built_in\">select</span>(<span class=\"string\">&#34;#&#34;</span>,...)</span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#34;平均值为&#34;</span>,average(<span class=\"number\">10</span>,<span class=\"number\">5</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>))</span><br/></pre></td></tr></tbody></table></figure>\n<p>以上代码执行结果为：</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">总共传入 <span class=\"number\">6</span> 个数</span><br/><span class=\"line\">平均值为    <span class=\"number\">5.5</span></span><br/></pre></td></tr></tbody></table></figure>\n<p>有时候我们可能需要几个固定参数加上可变参数，固定参数必须放在变长参数之前:</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fwrite</span><span class=\"params\">(fmt, ...)</span></span>  <span class=\"comment\">---&gt; 固定的参数fmt</span></span><br/><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">io</span>.<span class=\"built_in\">write</span>(<span class=\"built_in\">string</span>.<span class=\"built_in\">format</span>(fmt, ...))     </span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/><span class=\"line\"></span><br/><span class=\"line\">fwrite(<span class=\"string\">&#34;hongiun&#34;</span>)       <span class=\"comment\">---&gt;fmt = &#34;hongiu&#34;, 没有变长参数。  </span></span><br/><span class=\"line\">fwrite(<span class=\"string\">&#34;%d%dn&#34;</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>)   <span class=\"comment\">---&gt;fmt = &#34;%d%d&#34;, 变长参数为 1 和 2</span></span><br/></pre></td></tr></tbody></table></figure>\n<p>输出结果为：</p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">hongiu</span><br/><span class=\"line\">12</span><br/></pre></td></tr></tbody></table></figure>\n<p>通常在遍历变长参数的时候只需要使用<span style=\"color:red\">{…}，然而变长参数可能会包含一些 nil，那么就可以用 select 函数来访问变长参数了：<span style=\"color:red\">select(‘#’, …) 或者<span style=\"color:red\">select(n, …)</span></span></span></p>\n<ul>\n<li><span style=\"color:red\">select(‘#’, …)</span> 返回可变参数的长度</li>\n<li><span style=\"color:red\">select(n, …)</span> 用于访问 n 到 select(‘#’,…) 的参数</li>\n</ul>\n<p>调用select时，必须传入一个固定实参selector(选择开关)和一系列变长参数。如果selector为数字n,那么select返回它的第n个可变实参，否则只能为字符串”#”,这样select会返回变长参数的总数。例子代码：</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/><span class=\"line\">9</span><br/><span class=\"line\">10</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">do</span>  </span><br/><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">(...)</span></span>  </span><br/><span class=\"line\">        <span class=\"keyword\">for</span> i = <span class=\"number\">1</span>, <span class=\"built_in\">select</span>(<span class=\"string\">&#39;#&#39;</span>, ...) <span class=\"keyword\">do</span>  <span class=\"comment\">--&gt;获取参数总数</span></span><br/><span class=\"line\">            <span class=\"keyword\">local</span> <span class=\"built_in\">arg</span> = <span class=\"built_in\">select</span>(i, ...); <span class=\"comment\">--&gt;读取参数</span></span><br/><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&#34;arg&#34;</span>, <span class=\"built_in\">arg</span>);  </span><br/><span class=\"line\">        <span class=\"keyword\">end</span>  </span><br/><span class=\"line\">    <span class=\"keyword\">end</span>  </span><br/><span class=\"line\"></span><br/><span class=\"line\">    foo(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>);  </span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/></pre></td></tr></tbody></table></figure>\n<p>输出结果为：</p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">arg    1</span><br/><span class=\"line\">arg    2</span><br/><span class=\"line\">arg    3</span><br/><span class=\"line\">arg    4</span><br/></pre></td></tr></tbody></table></figure>","text":"思考并回答以下问题：1.编程中最重要的是什么？2.描述一下函数的两种用途。3.如何指定为局部函数？4.函数可以返回多个值吗？如何返回？5.foo = function(x) return 2 * x end 如何调用？6.Lua中实参和形参的数量不一致如何处理？7.可变参数是什么...","link":"","photos":[],"count_time":{"symbolsCount":"4.3k","symbolsTime":"4 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%87%BD%E6%95%B0%E5%AE%9A%E4%B9%89\"><span class=\"toc-text\">函数定义</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8\"><span class=\"toc-text\">函数调用</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%A4%9A%E8%BF%94%E5%9B%9E%E5%80%BC\"><span class=\"toc-text\">多返回值</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8F%AF%E5%8F%98%E5%8F%82%E6%95%B0\"><span class=\"toc-text\">可变参数</span></a></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"OpenResty运行Lua示例","uid":"bec11e447246adaa267aa86f2f6057b4","slug":"zl/2016-01-01-317_OpenResty运行Lua示例","date":"2024-04-03T03:47:35.597Z","updated":"2024-04-03T03:47:35.598Z","comments":true,"path":"api/articles/zl/2016-01-01-317_OpenResty运行Lua示例.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"OpenResty 是一个基于 Nginx 与 Lua 的高性能 Web 平台。 更多信息，参考 OpenResty 官网。 安装过程跟 Nginx 基本相同，区别在于安装完成之后，默认安装了很多 Module。 安装完成后，执行 ./nginx -V 的结果 nginx ver...","link":"","photos":[],"count_time":{"symbolsCount":"2.2k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Valuable Web","uid":"ce66c467eae287e23f82124ccbf5b77a","slug":"zl/2016-01-01-316_Valuable Web","date":"2024-04-03T03:47:35.596Z","updated":"2024-04-03T03:47:35.596Z","comments":true,"path":"api/articles/zl/2016-01-01-316_Valuable Web.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"这篇文章整理一下曾经在Google Reader上订阅的有价值的Blog。这些Blog都曾经或多或少的改变了我对待工作和生活的态度，谢谢这些作者。 ##Google Reader中的好网站 这些网站曾经在黑暗中为我点亮一盏盏指路的灯，希望你也能从中受益。 Mind Hacks 刘...","link":"","photos":[],"count_time":{"symbolsCount":187,"symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}