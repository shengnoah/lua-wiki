{"title":"Lua 中的随机数","uid":"73feeba3e1d1ac59d590841c2286442d","slug":"zl/2016-01-01-106_Lua 中的随机数 ","date":"2024-04-03T03:47:32.989Z","updated":"2024-04-03T03:47:32.989Z","comments":true,"path":"api/articles/zl/2016-01-01-106_Lua 中的随机数 .json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<p>Lua 随机数算法用的是 libc 中的 <code class=\"highlighter-rouge\">rand</code>, 也就是 LCG。然而这个算法的随机性一般。尤其是在一些平台上，当随机种子变化非常小的时候，产生的随机数变化也非常小。这样再经过 Lua 的精度取舍之后，产生的随机序列仍然很相似（<u>伪随机的结果变成可预知性</u>）。</p>\n<p>lua-l 上也讨论过这个问题 <a href=\"http://lua-users.org/lists/lua-l/2007-03/msg00564.html\">msg00564</a>，lua 的作者之一 lhf 给出的解决方案是先弹出前面几个看起来「不怎么随机」的随机数。另外，作者也写过一个基于 MT 算法的 c lib: lrandim, 有兴趣的同学可以去看下。</p>\n<p>然而在 <a href=\"http://lua-users.org/wiki/MathLibraryTutorial\">lua-wiki</a> 上有一种更为巧妙的实现（<em>这个用例同样是有缺陷的，这里只是为了引出上面的问题。以后我会单独讨论这个问题</em>）：</p>\n<div class=\"language-lua highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">local</span> <span class=\"n\">seed</span> <span class=\"o\">=</span> <span class=\"mi\">123456</span>\n<span class=\"k\">for</span> <span class=\"n\">i</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span> <span class=\"k\">do</span>\n    <span class=\"nb\">math.randomseed</span><span class=\"p\">(</span><span class=\"n\">seed</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"n\">i</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">/</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n    <span class=\"kd\">local</span> <span class=\"n\">num</span> <span class=\"o\">=</span> <span class=\"p\">&#123;&#125;</span>\n    <span class=\"k\">for</span> <span class=\"n\">j</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">10</span> <span class=\"k\">do</span>\n        <span class=\"nb\">table.insert</span><span class=\"p\">(</span><span class=\"n\">num</span><span class=\"p\">,</span> <span class=\"nb\">math.random</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">))</span>\n    <span class=\"k\">end</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"nb\">table.concat</span><span class=\"p\">(</span><span class=\"n\">num</span><span class=\"p\">,</span> <span class=\"s2\">&#34;,&#34;</span><span class=\"p\">))</span>\n<span class=\"k\">end</span>\n<p><span class=\"nb\">math.randomseed</span><span class=\"p\">(</span><span class=\"nb\">tostring</span><span class=\"p\">(</span><span class=\"mi\">123456</span><span class=\"p\">.</span><span class=\"mi\">1</span><span class=\"p\">):</span><span class=\"n\">reverse</span><span class=\"p\">())</span><br />\n<span class=\"kd\">local</span> <span class=\"n\">num3</span> <span class=\"o\">=</span> <span class=\"p\">&#123;&#125;</span><br />\n<span class=\"k\">for</span> <span class=\"n\">i</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">10</span> <span class=\"k\">do</span><br />\n<span class=\"nb\">table.insert</span><span class=\"p\">(</span><span class=\"n\">num3</span><span class=\"p\">,</span> <span class=\"nb\">math.random</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">))</span><br />\n<span class=\"k\">end</span><br />\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"nb\">table.concat</span><span class=\"p\">(</span><span class=\"n\">num3</span><span class=\"p\">,</span> <span class=\"s2\">&quot;,&quot;</span><span class=\"p\">))</span><br />\n</code></pre></div></div></p>\n<p>运行结果:</p>\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>61,66,19,75,44,61,68,1,33,4\n61,66,19,75,44,61,68,1,33,4\n85,40,79,80,92,20,34,77,28,56\n</code></pre></div></div>\n<p>就是把变化较小的 seed 倒过来（低位变高位），再取高位6位。这样，即使 seed 变化很小，但是因为低位变了高位， 种子数值变化将会很大，就可以使伪随机序列生成的更好一些。</p>\n<p>这里我也来介绍一个方法，效果也还不错（利用匿名 table 的地址来生成变化较大的 seed）：</p>\n<div class=\"language-lua highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">math.randomseed</span><span class=\"p\">(</span><span class=\"nb\">os.time</span><span class=\"p\">()</span><span class=\"o\">+</span><span class=\"nb\">assert</span><span class=\"p\">(</span><span class=\"nb\">tonumber</span><span class=\"p\">(</span><span class=\"nb\">tostring</span><span class=\"p\">(&#123;&#125;):</span><span class=\"n\">sub</span><span class=\"p\">(</span><span class=\"mi\">7</span><span class=\"p\">))))</span>\n</code></pre></div></div>\n<p><strong>值得庆幸的是 LuaJIT 已经将随机算法替换为 Tausworthe，也就是 LFSR (亦或 TURN)，循环长度达到 2<sup>223</sup>，并且能产生出质量更高的随机数。</strong></p>\n<blockquote>\n  <p><strong>Enhanced PRNG for math.random()</strong>\n<br/><br/>\nLuaJIT uses a Tausworthe PRNG with period 2<sup>223</sup> to implement math.random() and math.randomseed(). The quality of the PRNG results is much superior compared to the standard Lua implementation which uses the platform-specific ANSI rand().</p>\n</blockquote>\n<p>在 LuaJIT 再次运行上面的用例：</p>\n<div class=\"language-lua highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">local</span> <span class=\"n\">seed</span> <span class=\"o\">=</span> <span class=\"mi\">123456</span>\n<span class=\"k\">for</span> <span class=\"n\">i</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span> <span class=\"k\">do</span>\n    <span class=\"nb\">math.randomseed</span><span class=\"p\">(</span><span class=\"n\">seed</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"n\">i</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">/</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n    <span class=\"kd\">local</span> <span class=\"n\">num</span> <span class=\"o\">=</span> <span class=\"p\">&#123;&#125;</span>\n    <span class=\"k\">for</span> <span class=\"n\">j</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">10</span> <span class=\"k\">do</span>\n        <span class=\"nb\">table.insert</span><span class=\"p\">(</span><span class=\"n\">num</span><span class=\"p\">,</span> <span class=\"nb\">math.random</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">))</span>\n    <span class=\"k\">end</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"nb\">table.concat</span><span class=\"p\">(</span><span class=\"n\">num</span><span class=\"p\">,</span> <span class=\"s2\">&#34;,&#34;</span><span class=\"p\">))</span>\n<span class=\"k\">end</span>\n</code></pre></div></div>\n<p>运行结果:</p>\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>96,80,47,13,41,27,81,31,29,13\n93,63,35,31,16,70,79,76,26,72\n</code></pre></div></div>\n<p>可以看到生成的随机数质量已经非常不错了。我们继续来缩小 seed 的差距，看下 LFSR 的表现如何：</p>\n<div class=\"language-lua highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">local</span> <span class=\"n\">seed</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">.</span><span class=\"mi\">5089477744541</span>\n<span class=\"k\">for</span> <span class=\"n\">i</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span> <span class=\"k\">do</span>\n    <span class=\"n\">seed</span> <span class=\"o\">=</span> <span class=\"n\">seed</span> <span class=\"o\">+</span> <span class=\"mi\">0</span><span class=\"p\">.</span><span class=\"mi\">0000000000001</span>\n    <span class=\"nb\">math.randomseed</span><span class=\"p\">(</span><span class=\"n\">seed</span><span class=\"p\">)</span>\n    <span class=\"kd\">local</span> <span class=\"n\">num</span> <span class=\"o\">=</span> <span class=\"p\">&#123;&#125;</span>\n    <span class=\"k\">for</span> <span class=\"n\">j</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">10</span> <span class=\"k\">do</span>\n        <span class=\"nb\">table.insert</span><span class=\"p\">(</span><span class=\"n\">num</span><span class=\"p\">,</span> <span class=\"nb\">math.random</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">))</span>\n    <span class=\"k\">end</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"nb\">table.concat</span><span class=\"p\">(</span><span class=\"n\">num</span><span class=\"p\">,</span> <span class=\"s2\">&#34;,&#34;</span><span class=\"p\">))</span>\n<span class=\"k\">end</span>\n</code></pre></div></div>\n<p>运行结果:</p>\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>13,8,8,25,15,36,23,84,79,44\n21,8,72,38,74,60,73,6,79,8\n</code></pre></div></div>\n<p>可以看到当 seed 变化非常小的时候 LFSR 同样会表现不俗。综合来说，LFSR 已经是一个很好的随机算法，可足够快速地产生健壮随机数。<u>但是其并不安全（包括 MT 算法，因为 MT 也是基于 LFSR 的），在安全因素比重很大的地方比如 csrf 或密码重置的 token 等等，应该尽量避免使用</u>。</p>\n<pre><code>            &lt;hr style=&quot;visibility: hidden;&quot;/&gt;\n</code></pre>\n","text":"Lua 随机数算法用的是 libc 中的 rand, 也就是 LCG。然而这个算法的随机性一般。尤其是在一些平台上，当随机种子变化非常小的时候，产生的随机数变化也非常小。这样再经过 Lua 的精度取舍之后，产生的随机序列仍然很相似（伪随机的结果变成可预知性）。 lua-l 上也讨...","link":"","photos":[],"count_time":{"symbolsCount":"2.2k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"lua中也能用上go语言的strings包","uid":"f7b1c3c6a0a1d1cc5338be7c68bd7365","slug":"zl/2016-01-01-1073_lua中也能用上go语言的strings包","date":"2024-04-03T03:47:32.990Z","updated":"2024-04-03T03:47:32.991Z","comments":true,"path":"api/articles/zl/2016-01-01-1073_lua中也能用上go语言的strings包.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"lua内置的库非常小，我们可以将Go语言的strings包引入到Lua环境。 下面是具体的例子。 hello.go: package main import ( &#34;github.com/yuin/gopher-lua&#34; strings &#34;github.co...","link":"","photos":[],"count_time":{"symbolsCount":597,"symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"lua编程","uid":"f9cc1ebf0d3d744cc5f780519b043e39","slug":"zl/2016-01-01-1070_lua编程","date":"2024-04-03T03:47:32.989Z","updated":"2024-04-03T03:47:32.990Z","comments":true,"path":"api/articles/zl/2016-01-01-1070_lua编程.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"Lua一共包含8个基本数据类型 nil: print(type(nil)) boolean: print(type(true)) number: print(type(2.0)) string: print(type(&#34;abc&#34;)) function: print...","link":"","photos":[],"count_time":{"symbolsCount":"1.3k","symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}