{"title":"Lua类的实现思路","uid":"4e4ebc3eda806dabbf19b5aaecfdc728","slug":"zl/2016-01-01-472_Lua类的实现思路","date":"2024-04-03T03:47:35.755Z","updated":"2024-04-03T03:47:35.755Z","comments":true,"path":"api/articles/zl/2016-01-01-472_Lua类的实现思路.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<p>复习下lua的元表元方法，浅尝辄止。</p>\n<p>目标是用lua实现以下C++例子的功能。<br/></p><figure class=\"highlight c++\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/><span class=\"line\">9</span><br/><span class=\"line\">10</span><br/><span class=\"line\">11</span><br/><span class=\"line\">12</span><br/><span class=\"line\">13</span><br/><span class=\"line\">14</span><br/><span class=\"line\">15</span><br/><span class=\"line\">16</span><br/><span class=\"line\">17</span><br/><span class=\"line\">18</span><br/><span class=\"line\">19</span><br/><span class=\"line\">20</span><br/><span class=\"line\">21</span><br/><span class=\"line\">22</span><br/><span class=\"line\">23</span><br/><span class=\"line\">24</span><br/><span class=\"line\">25</span><br/><span class=\"line\">26</span><br/><span class=\"line\">27</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> </span></span><br/><span class=\"line\"><span class=\"class\">{</span></span><br/><span class=\"line\"><span class=\"keyword\">public</span>:</span><br/><span class=\"line\">\t<span class=\"built_in\">std</span>::<span class=\"built_in\">string</span>\tmName;</span><br/><span class=\"line\"></span><br/><span class=\"line\">\tAnima(){}</span><br/><span class=\"line\">\tAnima(<span class=\"keyword\">const</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">string</span>&amp; str) : mName(str) {}</span><br/><span class=\"line\"></span><br/><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">SetName</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">string</span>&amp; str)</span></span>;</span><br/><span class=\"line\">\t<span class=\"built_in\">std</span>::<span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">GetName</span><span class=\"params\">()</span></span>;</span><br/><span class=\"line\">};</span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Dog</span> :</span> <span class=\"keyword\">public</span> Anima</span><br/><span class=\"line\">{</span><br/><span class=\"line\"><span class=\"keyword\">public</span>:</span><br/><span class=\"line\">\t<span class=\"built_in\">std</span>::<span class=\"built_in\">string</span> mOwnerName;</span><br/><span class=\"line\"></span><br/><span class=\"line\">\tDog(){}</span><br/><span class=\"line\">\tDog(<span class=\"keyword\">const</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">string</span>&amp; str) : Anima(str) {}</span><br/><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">SetOwnerName</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">string</span>&amp; str)</span></span>;</span><br/><span class=\"line\">\t<span class=\"built_in\">std</span>::<span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">GetOwnerName</span><span class=\"params\">()</span></span></span><br/><span class=\"line\"><span class=\"function\">\t<span class=\"keyword\">void</span> <span class=\"title\">PlayBall</span><span class=\"params\">()</span></span>;</span><br/><span class=\"line\">}</span><br/><span class=\"line\"></span><br/><span class=\"line\">Dog dog(std::string(&#34;旺财&#34;));</span><br/><span class=\"line\">dog.SetOwnerName(<span class=\"built_in\">std</span>::<span class=\"built_in\">string</span>(<span class=\"string\">&#34;李狗蛋&#34;</span>));</span><br/><span class=\"line\">dog:PlayBall();</span><br/></pre></td></tr></tbody></table></figure><p></p>\n<h2 id=\"一、-元表、元方法介绍\"><a href=\"#一、-元表、元方法介绍\" class=\"headerlink\" title=\"一、 元表、元方法介绍\"></a>一、 元表、元方法介绍</h2><p>lua中的变量是没有数据类型的，但是值具有类型：nil、number、boolean、string、function、thread、userdata和table。lua中的每个值都可以有元表（metatable）。元表定义了原始值在特性操作下的行为。可以在元表中设置特性的字段来改变作用域该值操作的某些行为。如对非数字类型做加法操作时，lua会检查该值的元表中的“<strong>add”函数，如果存在，那么则调用其完成加法操作，“</strong>add”函数就是元方法（metamethod）。<br/>通过元表和元方法能实现C++的面向对象思想。</p>\n<p>一个table默认不带元表，可以通过setmetatable设置元表。<br/></p><figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">local</span> t = {}</span><br/><span class=\"line\"><span class=\"built_in\">setmetatable</span>(t, t) </span><br/><span class=\"line\"><span class=\"built_in\">print</span>(t == <span class=\"built_in\">getmetatable</span>) <span class=\"comment\">-- true</span></span><br/></pre></td></tr></tbody></table></figure><p></p>\n<p>当我们想要通过继承的思想来访问基类的成员时，会这样写：<br/></p><figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">local</span> A = {}</span><br/><span class=\"line\"><span class=\"keyword\">local</span> B = {x = <span class=\"number\">10</span>}</span><br/><span class=\"line\"><span class=\"built_in\">setmetatable</span>(A, B)</span><br/><span class=\"line\"><span class=\"built_in\">print</span>(A.x) <span class=\"comment\">-- nil</span></span><br/></pre></td></tr></tbody></table></figure><p></p>\n<p>访问A.x时，A中没有x变量。便去A的元表B中查找，然而lua并不会直接在B中查找x，而是通过调用B的元方法<strong>index。如果没有</strong>index，那么返回nil。如果__index被赋值为一个表，那么就会去这个表中查询:<br/></p><figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">local</span> A = {}</span><br/><span class=\"line\"><span class=\"keyword\">local</span> B = {x = <span class=\"number\">10</span>}</span><br/><span class=\"line\">B.<span class=\"built_in\">__index</span> = B</span><br/><span class=\"line\"><span class=\"built_in\">setmetatable</span>(A, B)</span><br/><span class=\"line\"><span class=\"built_in\">print</span>(A.x) <span class=\"comment\">-- 10</span></span><br/></pre></td></tr></tbody></table></figure><p></p>\n<p>如果__index被赋值为一个函数，那么查找的时候就会返回函数的返回值。<br/></p><figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">local</span> A = {}</span><br/><span class=\"line\"><span class=\"keyword\">local</span> B = {x = <span class=\"number\">10</span>}</span><br/><span class=\"line\">B.<span class=\"built_in\">__index</span> = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(t, key)</span></span></span><br/><span class=\"line\">\t<span class=\"built_in\">print</span>(key .. <span class=\"string\">&#39; is not exist!&#39;</span>)</span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/><span class=\"line\"><span class=\"built_in\">setmetatable</span>(A, B)</span><br/><span class=\"line\"><span class=\"built_in\">print</span>(A.x) <span class=\"comment\">-- X is not exist nil</span></span><br/></pre></td></tr></tbody></table></figure><p></p>\n<h2 id=\"二、lua实现C-继承\"><a href=\"#二、lua实现C-继承\" class=\"headerlink\" title=\"二、lua实现C++继承\"></a>二、lua实现C++继承</h2><figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/><span class=\"line\">9</span><br/><span class=\"line\">10</span><br/><span class=\"line\">11</span><br/><span class=\"line\">12</span><br/><span class=\"line\">13</span><br/><span class=\"line\">14</span><br/><span class=\"line\">15</span><br/><span class=\"line\">16</span><br/><span class=\"line\">17</span><br/><span class=\"line\">18</span><br/><span class=\"line\">19</span><br/><span class=\"line\">20</span><br/><span class=\"line\">21</span><br/><span class=\"line\">22</span><br/><span class=\"line\">23</span><br/><span class=\"line\">24</span><br/><span class=\"line\">25</span><br/><span class=\"line\">26</span><br/><span class=\"line\">27</span><br/><span class=\"line\">28</span><br/><span class=\"line\">29</span><br/><span class=\"line\">30</span><br/><span class=\"line\">31</span><br/><span class=\"line\">32</span><br/><span class=\"line\">33</span><br/><span class=\"line\">34</span><br/><span class=\"line\">35</span><br/><span class=\"line\">36</span><br/><span class=\"line\">37</span><br/><span class=\"line\">38</span><br/><span class=\"line\">39</span><br/><span class=\"line\">40</span><br/><span class=\"line\">41</span><br/><span class=\"line\">42</span><br/><span class=\"line\">43</span><br/><span class=\"line\">44</span><br/><span class=\"line\">45</span><br/><span class=\"line\">46</span><br/><span class=\"line\">47</span><br/><span class=\"line\">48</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">local</span> Anima = {mName = <span class=\"string\">&#39;&#39;</span>}</span><br/><span class=\"line\">Anima.<span class=\"built_in\">__index</span> = Anima</span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Anima:new</span><span class=\"params\">(str)</span></span></span><br/><span class=\"line\">\t<span class=\"keyword\">local</span> t = {}</span><br/><span class=\"line\"></span><br/><span class=\"line\">\t<span class=\"built_in\">setmetatable</span>(t, self)</span><br/><span class=\"line\">\t<span class=\"keyword\">if</span> <span class=\"built_in\">tostring</span>(str) <span class=\"keyword\">then</span></span><br/><span class=\"line\">\t\tself.mName = str</span><br/><span class=\"line\">\t<span class=\"keyword\">end</span></span><br/><span class=\"line\"></span><br/><span class=\"line\">\t<span class=\"keyword\">return</span> t</span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Anima:SetName</span><span class=\"params\">(str)</span></span></span><br/><span class=\"line\">\tself.mName = str</span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Anima:GetName</span><span class=\"params\">()</span></span></span><br/><span class=\"line\">\t<span class=\"keyword\">return</span> self.mName</span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"keyword\">local</span> Dog = {mOwnerName = <span class=\"string\">&#39;&#39;</span>}</span><br/><span class=\"line\"><span class=\"built_in\">setmetatable</span>(Dog, Anima) <span class=\"comment\">--继承基类</span></span><br/><span class=\"line\">Dog.<span class=\"built_in\">__index</span> = Dog</span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Dog:new</span><span class=\"params\">(name)</span></span></span><br/><span class=\"line\">\t<span class=\"keyword\">local</span> t = Anima:new(name)</span><br/><span class=\"line\">\t<span class=\"built_in\">setmetatable</span>(t, self)</span><br/><span class=\"line\"></span><br/><span class=\"line\">\t<span class=\"keyword\">return</span> t</span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Dog:SetOwnerName</span><span class=\"params\">(name)</span></span></span><br/><span class=\"line\">\tself.mOwnerName = name</span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Dog:GetOwnerName</span><span class=\"params\">()</span></span></span><br/><span class=\"line\">\t<span class=\"keyword\">return</span> self.mOwnerName</span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Dog:PlayBall</span><span class=\"params\">()</span></span></span><br/><span class=\"line\">\t<span class=\"built_in\">print</span>(self.mName .. <span class=\"string\">&#39;is playing with &#39;</span> .. self.mOwnerName )</span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"keyword\">local</span> dog = Dog:new(<span class=\"string\">&#39;旺财&#39;</span>)</span><br/><span class=\"line\">dog:SetOwnerName(<span class=\"string\">&#39;李狗蛋&#39;</span>)</span><br/><span class=\"line\">dog:PlayBall() <span class=\"comment\">-- 旺财is playing with 李狗蛋</span></span><br/></pre></td></tr></tbody></table></figure>","text":"复习下lua的元表元方法，浅尝辄止。 目标是用lua实现以下C++例子的功能。123456789101112131415161718192021222324252627class {public: std::string mName; Anima(){} Anima(const ...","link":"","photos":[],"count_time":{"symbolsCount":"2.2k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%80%E3%80%81-%E5%85%83%E8%A1%A8%E3%80%81%E5%85%83%E6%96%B9%E6%B3%95%E4%BB%8B%E7%BB%8D\"><span class=\"toc-text\">一、 元表、元方法介绍</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E3%80%81lua%E5%AE%9E%E7%8E%B0C-%E7%BB%A7%E6%89%BF\"><span class=\"toc-text\">二、lua实现C++继承</span></a></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Lua基础","uid":"20b614bdbdbfb7a95408c75ff42d548f","slug":"zl/2016-01-01-474_Lua基础","date":"2024-04-03T03:47:35.756Z","updated":"2024-04-03T03:47:35.756Z","comments":true,"path":"api/articles/zl/2016-01-01-474_Lua基础.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"Lua是一种灵活小巧的脚本语言，可以被嵌入应用程序中，为应用程序提供灵活的扩展和定制功能。 注释单行注释12print(&#34;Hello World!&#34;) -- 另一个单行注释 多行注释1234--[[ 多行注释 另一个多行注释--]] 变量变量标识符Lua的变量标识...","link":"","photos":[],"count_time":{"symbolsCount":"6.6k","symbolsTime":"6 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"cocos2dx lua (伪)面向对象理解与实战应用","uid":"9031c35a0fe6df7d970064b52b48b4cb","slug":"zl/2016-01-01-473_cocos2dx lua (伪)面向对象理解与实战应用","date":"2024-04-03T03:47:35.755Z","updated":"2024-04-03T03:47:35.755Z","comments":true,"path":"api/articles/zl/2016-01-01-473_cocos2dx lua (伪)面向对象理解与实战应用.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":" 面向对象 &gt;&gt; 把一组数据结构和处理它们的方法组成对象（object），把相同行为的对象归纳为类（class） &gt;&gt; 通过类的封装（encapsulation）隐藏内部细节 &gt;&gt; 通过继承（inheritance）实现类的特化（special...","link":"","photos":[],"count_time":{"symbolsCount":"2.9k","symbolsTime":"3 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}