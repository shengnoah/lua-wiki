{"title":"evaluation and selection · ngc7293's blog","uid":"40bf5653b6a583c5046bd3b1a01456c8","slug":"zl/2016-01-01-996_evaluation and selection · ngc7293's blog","date":"2024-04-03T03:47:36.243Z","updated":"2024-04-03T03:47:36.243Z","comments":true,"path":"api/articles/zl/2016-01-01-996_evaluation and selection · ngc7293's blog.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<p>我们通过对一些方法比如错误率，召回率，ROC等来评价某个模型的优劣，并选择更好的ml算法</p>\n<p></p>\n<h2 id=\"模型的评估与选择\">模型的评估与选择</h2>\n<h2 id=\"关于模型的评估结果\">关于模型的评估结果</h2>\n<p>关于评估有两个基本的概念，一个是错误率(error rate)$$ E=a/m $$ ，另外一个是精度（accuracy) $$ A=1-a/m $$ ,我们将分类错误的样本数目称为错误率，把实际预测输出与真实输出称为训练误差(training error)或叫经验误差(empirical error),在新样本的误差叫泛化误差(generalization error).</p>\n<p>“过拟合(overfitting)“与”欠拟合(underfitting)”</p>\n<h2 id=\"产生测试集的几种方法\">产生测试集的几种方法</h2>\n<h3 id=\"留出法-hold-out\">留出法（hold-out）</h3>\n<p>直接将给定训练集的样本比例，直接将数据集划分为两个不同的数据集，在其中一个训练在另一个进行测试。</p>\n<h3 id=\"交叉验证法-cross-validation\">交叉验证法 （cross validation）</h3>\n<p>将数据集划分为k个大小相同的互斥子集，并将每个集合的k-1个子集的并集作为训练集，其他的作为测试集，通常称为k折交叉验证</p>\n<pre><code>sklearn中的cross validation模块，最主要的函数是如下函数： \nsklearn.cross_validation.cross_val_score:他的调用形式是scores = cross_validation.cross_val_score(clf, raw_data, raw_target, cv=5, score_func=None)\n\n参数解释：\n\nclf:表示的是不同的分类器，可以是任何的分类器。比如支持向量机分类器。clf = svm.SVC(kernel=’linear’, C=1)； \nraw_data：原始数据； \nraw_target:原始类别标号； \ncv：代表的就是不同的cross validation的方法了。引用scikit-learn上的一句话（When the cv argument is an integer, cross_val_score uses the KFold or StratifiedKFold strategies by default, the latter being used if the estimator derives from ClassifierMixin.）如果cv是一个int数字的话，那么默认使用的是KFold或者StratifiedKFold交叉，如果如果指定了类别标签则使用的是StratifiedKFold。 \ncross_val_score:这个函数的返回值就是对于每次不同的的划分raw_data时，在test_data上得到的分类的准确率。至于准确率的算法可以通过score_func参数指定，如果不指定的话，是用clf默认自带的准确率算法。\n</code></pre>\n<h3 id=\"自助法-bootstrapping\">自助法 (bootstrapping)</h3>\n<p>自助采样法为基础，重复取回采样，这样的话按照概率来分析，不被采到的概率大概是36.8% ，这种没在训练集中出现的样本用于测试的估计称为包外估计。</p>\n<p>每个样本不被采到的概率为（1-1/m)**m</p>\n<h3 id=\"性能度量\">性能度量</h3>\n<p>对学习算法泛型分析不仅需要对算法进行有效可行的实验估计，还需要对其进行算法的泛型能力的评价标准，即是性能度量</p>\n<p>回归任务最常见的性能度量集均方误差分析(mean squares error)，即</p>\n<p>分类任务的性能度量</p>\n<h4 id=\"错误率以及精度\">错误率以及精度</h4>\n<p>作为最常用的性能度量，对二分类以及多分类方法适用</p>\n<h4 id=\"查准率-precision-查全率-recall-以及f1\">查准率(precision)、查全率(recall)以及F1</h4>\n<p>对于分类问题，我们可以将真实类别与机器学习的预测类别进行比较，将其分为真正例(true positive)，假反例(false negetive)，假正例(false positive)，真反例(true negetive)</p>\n<p>则，查准率P与查全率R可以分别定义为以下：</p>\n<p>$$ P = TP/(TP+FP) $$\n$$ R = TP/(TP+FN) $$</p>\n<p>以查全率为横轴，以查准率为纵轴作图，得到一个查准率-查全率图 简称P-R图。</p>\n<p>若P-R图的面积比较大，他在一定程度上表征了学习器的查准率以及查准率的相对双赢的比例。</p>\n<p>BEP(break-even point),是“查准率=查全率”时的取值，在一定程度上体现了学习器的性能。</p>\n<p>但是BEP还是过于简化，于是定义一个F1参数：基于查准率与查全率的调和平均数：</p>\n<p>$$ 1/F_{1} = 0.5*(1/P+1/R) $$</p>\n<p>F_b 为加权调和平均数 即</p>\n<p>$$ 1/F_b = 1/(1+b^2)*((1/p)+(b^{2/R})) $$</p>\n<p>因为查准率与查全率是两个相冲突的概念，若我们将查重率看的较重（如安检等）则将分类阈值选择在排序中考前的位置，若重视查全率，则更加靠后。</p>\n<h4 id=\"roc与auc\">ROC与AUC</h4>\n<p>ROC(receiver operating characteristic)受试者工作特征用于检测真正例率与假正利率之间的关联。</p>\n<p>同P_R曲线一样，判断两个学习器之间的优劣，是看其图像的面积，即AUC（Area Under ROC Curve），形式化的看，AUC判断的是样本排序的排序质量，即与排序误差紧密连接</p>\n<h4 id=\"代价敏感错误以及代价曲线\">代价敏感错误以及代价曲线</h4>\n<p>不同错误造成不同的后果，所以可以对错误进行赋予“非等价代价”（unequal cost）</p>\n<h2 id=\"比较检验\">比较检验</h2>\n<p>性能度量并不能对学习器的泛化性质进行良好的度量，于是我们可以引入：统计假设检验（hypothesis test），以统计学的方法对假设学习器进行分析以及度量。</p>\n<h3 id=\"假设检验\">假设检验</h3>\n<p>假设检验是在只知道形势，不知道参数的情况下，为了推断一些总体的某些未知的特性，提出某些未知的假设，假设检验是作出这一假设的决策过程。</p>\n<p>在机器学习中，很多学习器通过性能度量求出的性质很大程度上接近或者是此学习器的泛型特征，所以我们可以根据错误率进而推断出泛化错误率的分布。</p>\n<p>很多时候，我们并不是根据留出法而是多次重复留出法或者是交叉验证法的方式进行评估/测试，这样得到很多的测试错误率。</p>\n<p>此时我们可以使用t检测。</p>\n<p>之后的大部分请参照《概率论与数理统计》</p>\n<h2 id=\"偏差与方差\">偏差与方差</h2>\n<p>泛化误差之和可以被分解为偏差，方差以及噪声之和。</p>\n<p>偏差（dias）度量了学习算法的期望预测与真实结果的偏离程度，即刻画了学习算法本身的拟合能力</p>\n<p>方差（variance）度量了训练集变化给训练结果带来的学习性能的变化，即数据扰动造成的影响</p>\n<p>噪声，表示当前学习算法所能达到的期望泛化误差的下界。</p>","text":"我们通过对一些方法比如错误率，召回率，ROC等来评价某个模型的优劣，并选择更好的ml算法 模型的评估与选择 关于模型的评估结果 关于评估有两个基本的概念，一个是错误率(error rate)$$ E=a/m $$ ，另外一个是精度（accuracy) $$ A=1-a/m $$ ...","link":"","photos":[],"count_time":{"symbolsCount":"2.7k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%A8%A1%E5%9E%8B%E7%9A%84%E8%AF%84%E4%BC%B0%E4%B8%8E%E9%80%89%E6%8B%A9\"><span class=\"toc-text\">模型的评估与选择</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%85%B3%E4%BA%8E%E6%A8%A1%E5%9E%8B%E7%9A%84%E8%AF%84%E4%BC%B0%E7%BB%93%E6%9E%9C\"><span class=\"toc-text\">关于模型的评估结果</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BA%A7%E7%94%9F%E6%B5%8B%E8%AF%95%E9%9B%86%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">产生测试集的几种方法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%95%99%E5%87%BA%E6%B3%95-hold-out\"><span class=\"toc-text\">留出法（hold-out）</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BA%A4%E5%8F%89%E9%AA%8C%E8%AF%81%E6%B3%95-cross-validation\"><span class=\"toc-text\">交叉验证法 （cross validation）</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%87%AA%E5%8A%A9%E6%B3%95-bootstrapping\"><span class=\"toc-text\">自助法 (bootstrapping)</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%80%A7%E8%83%BD%E5%BA%A6%E9%87%8F\"><span class=\"toc-text\">性能度量</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%94%99%E8%AF%AF%E7%8E%87%E4%BB%A5%E5%8F%8A%E7%B2%BE%E5%BA%A6\"><span class=\"toc-text\">错误率以及精度</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%9F%A5%E5%87%86%E7%8E%87-precision-%E6%9F%A5%E5%85%A8%E7%8E%87-recall-%E4%BB%A5%E5%8F%8Af1\"><span class=\"toc-text\">查准率(precision)、查全率(recall)以及F1</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#roc%E4%B8%8Eauc\"><span class=\"toc-text\">ROC与AUC</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%BB%A3%E4%BB%B7%E6%95%8F%E6%84%9F%E9%94%99%E8%AF%AF%E4%BB%A5%E5%8F%8A%E4%BB%A3%E4%BB%B7%E6%9B%B2%E7%BA%BF\"><span class=\"toc-text\">代价敏感错误以及代价曲线</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%AF%94%E8%BE%83%E6%A3%80%E9%AA%8C\"><span class=\"toc-text\">比较检验</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%81%87%E8%AE%BE%E6%A3%80%E9%AA%8C\"><span class=\"toc-text\">假设检验</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%81%8F%E5%B7%AE%E4%B8%8E%E6%96%B9%E5%B7%AE\"><span class=\"toc-text\">偏差与方差</span></a></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"深入Lua","uid":"b53ad1c28b606c3d0d932548066c6b45","slug":"zl/2016-01-01-999_深入Lua ","date":"2024-04-03T03:47:36.244Z","updated":"2024-04-03T03:47:36.244Z","comments":true,"path":"api/articles/zl/2016-01-01-999_深入Lua .json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"该篇文章将从Lua string的底层代码去分析字符串是如何创建、缓存、以及扩容的，深入分析了Lua字符串的整个工作原理。 Lua中字符串结构体定义: 1234567891011121314151617181920212223242526272829** Common Heade...","link":"","photos":[],"count_time":{"symbolsCount":"4.8k","symbolsTime":"4 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"lua 基础数据类型","uid":"d46a709916ea46c93b54ce8a7477a449","slug":"zl/2016-01-01-998_lua 基础数据类型","date":"2024-04-03T03:47:36.243Z","updated":"2024-04-03T03:47:36.244Z","comments":true,"path":"api/articles/zl/2016-01-01-998_lua 基础数据类型.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":" 函数type 可以返回一个值或一个变量所属的类型 这个和python 是一样的 nil（空） boolean（布尔） number（数字） string（字符串） table（表） 一种抽象的“关联数组”，具有特殊索引方式的数组，索引通常是字符串string或者number类型...","link":"","photos":[],"count_time":{"symbolsCount":225,"symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}