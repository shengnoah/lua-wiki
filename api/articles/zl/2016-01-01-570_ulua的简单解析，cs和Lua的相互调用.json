{"title":"ulua的简单解析，cs和Lua的相互调用","uid":"793661612b73172fb8f974a4ce18be1f","slug":"zl/2016-01-01-570_ulua的简单解析，cs和Lua的相互调用","date":"2024-04-03T03:47:35.824Z","updated":"2024-04-03T03:47:35.825Z","comments":true,"path":"api/articles/zl/2016-01-01-570_ulua的简单解析，cs和Lua的相互调用.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<p>热更新是unity一个长久的话题，热更新主要有两部分，一部分就是资源，这个靠u3d的assetbundle就可以做，另一部分就是逻辑了。游戏更新难免会遇到一些流程或者UI的逻辑变动。在PC和Android上可以使用C#的反射来动态的生成代码，而IOS的Full AOT（完全  预先编译/静态编译）的性质，因此这个办法在IOS上使用不了。为了解决这个问题，我们引入了Lua。使用Lua的主要原因是因为Lua在Unity是当作文本资源使用的，Lua在Unity中的执行是依赖于解释器(虚拟机)读取Lua代码进行解释执行。所以工程中比较常变化的逻辑代码都是写在Lua中，通过更新Lua（文本文件）来实现逻辑的热更，而常用的热更新方案有sLua,xLua,uLua等等。公司这里使用的是ulua，因此今天就来初步解析并使用下uLua。为了方便学习，本文章使用的是<a href=\"https://github.com/jarjin/SimpleFramework_NGUI/\">SimpleFramework_NGUI_v0.4.1</a>，这个集成了NGUI,uLua的框架。</p>\n<h2 id=\"1-简单认识ulua\">1.简单认识uLua</h2>\n<p>uLua具体怎么去调用Lua的，怎么让Lua调用C#这里先不做具体研究，先简单地使用起来，不去探究原理了。我们先认识下uLua中的几个类，让我们不至于使用得不明不白。当然如果想要直接使用，则可以跳过这个部分。</p>\n<h3 id=\"1-wrapfile-cs\">(1)WrapFile.cs</h3>\n<p>WrapFile类的内容很简单，就是保存了一个需要生成Wrap的数组(binds)。通过_GT()方法来获取类的信息并标记类的类型。如果我们用C#写了个类想要在Lua中使用，可以在binds中添加</p>\n<h3 id=\"2-bindlua-cs\">(2)BindLua.cs</h3>\n<p>BingLua.cs类里主要是uLua对Unity菜单栏的一些扩展。里面有一些批处理方法，比如Lua/Gen Lua Wrap Files实际上是调用了Binding()方法。这个方法用来遍历WrapFil里的binds数组，来生成相应的Wrap文件。而里面调用的GenLuaBinder()方法用来生成Wrap.lua和LuaBinder.cs。GenLuaDelegates()方法用来生成DelegateFactory.cs。\n<img src=\"https://llyyc.github.io//image/ulua1.png\" alt=\"Binding()\"/></p>\n<h3 id=\"3-wrap-lua\">(3)Wrap.lua</h3>\n<p>Wrap.lua使用了”import 类名”把类注册到lua中，import字段是在Lua.cs的LuaState()方法来绑定到lua的全局表中，并且用来调用LuaStatic.importWrap()方法。因为我们要调用Lua时一般会用用到LuaScriptMgr.cs。在New LuaScriptMgr()时，则会自动调用LuaState()方法来绑定一些全局的字段。</p>\n<h3 id=\"4-luabinder-cs\">(4)LuaBinder.cs</h3>\n<p>LuaBinder.Bind()方法则是用来把Wrap.lua里的类和相应的Wrap类，通过Wrap类的Register()方法来进行绑定。</p>\n<h3 id=\"5-delegatefactory-cs\">(5)DelegateFactory.cs</h3>\n<p>大致和LuaBinder类似，用来注册委托。</p>\n<hr/>\n<p>这样我们就知道通过Unity的菜单栏，uLua为我们做了什么事。我们该如何简单的使用uLua，下面我来演示一下。</p>\n<h2 id=\"2-简单使用ulua\">2.简单使用uLua</h2>\n<p>首先，把AppConst.cs中的DebugMode设置为true，这是框架的设置。意思是我们会在Unity编辑器下来运行程序，而不是打包到具体平台上使用。当DebugMode为true时会读取工程的Lua文件夹来获取Lua文件。\n以后如果需要导出具体平台上的包则需要通过Game/Build xxx Resource  他会根据不同平台把lua和资源生成到相应的文件夹下。</p>\n<p>我们先写一个cs用来注册到Lua中：</p>\n<div class=\"highlight\"><div class=\"chroma\">\n<table class=\"lntable\"><tbody><tr><td class=\"lntd\">\n<pre class=\"chroma\"><code class=\"language-cs\" data-lang=\"cs\"><span class=\"lnt\">1\n</span><span class=\"lnt\">2\n</span><span class=\"lnt\">3\n</span><span class=\"lnt\">4\n</span><span class=\"lnt\">5\n</span><span class=\"lnt\">6\n</span><span class=\"lnt\">7\n</span><span class=\"lnt\">8\n</span></code></pre></td>\n<td class=\"lntd\">\n<pre class=\"chroma\"><code class=\"language-cs\" data-lang=\"cs\"><span class=\"k\">public</span> <span class=\"k\">class</span> <span class=\"nc\">CsToLuaTest</span>\n<span class=\"p\">&#123;</span>\n    <span class=\"k\">public</span> <span class=\"n\">CsToLuaTest</span><span class=\"p\">()</span> <span class=\"p\">&#123;</span> <span class=\"p\">&#125;</span>\n\t<span class=\"k\">public</span> <span class=\"k\">void</span>  <span class=\"n\">testprint</span><span class=\"p\">()</span>\n    <span class=\"p\">&#123;</span>\n        <span class=\"n\">Debug</span><span class=\"p\">.</span><span class=\"n\">Log</span><span class=\"p\">(</span><span class=\"s\">&#34;success&#34;</span><span class=\"p\">);</span>\n    <span class=\"p\">&#125;</span>\n<span class=\"p\">&#125;</span></code></pre></td></tr></tbody></table>\n</div>\n</div>\n<p>这里有一个坑，我们写的这个类不能继承MonoBehaviour。因为继承了MonoBehaviour的类不能使用构造函数来创建对象，只能用AddComponent()来创建对象。而uLua是通过把注册到Lua中的类所有的构造方法绑定为New来创建对象的。如果从Unity中新建的脚本记得把MonoBehaviour删去。</p>\n<p>再写一个Lua文件LuaTest.lua，用来在Lua中调用我们写的testprint()方法：</p>\n<div class=\"highlight\"><div class=\"chroma\">\n<table class=\"lntable\"><tbody><tr><td class=\"lntd\">\n<pre class=\"chroma\"><code class=\"language-Lua\" data-lang=\"Lua\"><span class=\"lnt\">1\n</span><span class=\"lnt\">2\n</span><span class=\"lnt\">3\n</span><span class=\"lnt\">4\n</span></code></pre></td>\n<td class=\"lntd\">\n<pre class=\"chroma\"><code class=\"language-Lua\" data-lang=\"Lua\"><span class=\"kd\">local</span> <span class=\"n\">this</span> <span class=\"o\">=</span> <span class=\"n\">LuaTest</span><span class=\"p\">;</span>\n<span class=\"kr\">function</span> <span class=\"nc\">LuaTest</span><span class=\"p\">.</span><span class=\"nf\">Test</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n      <span class=\"n\">data</span><span class=\"p\">:</span><span class=\"n\">testprint</span><span class=\"p\">();</span>\n<span class=\"kr\">end</span></code></pre></td></tr></tbody></table>\n</div>\n</div>\n<p>写一个类用来运行调用这个lua文件 StartTest.cs:</p>\n<div class=\"highlight\"><div class=\"chroma\">\n<table class=\"lntable\"><tbody><tr><td class=\"lntd\">\n<pre class=\"chroma\"><code class=\"language-cs\" data-lang=\"cs\"><span class=\"lnt\"> 1\n</span><span class=\"lnt\"> 2\n</span><span class=\"lnt\"> 3\n</span><span class=\"lnt\"> 4\n</span><span class=\"lnt\"> 5\n</span><span class=\"lnt\"> 6\n</span><span class=\"lnt\"> 7\n</span><span class=\"lnt\"> 8\n</span><span class=\"lnt\"> 9\n</span><span class=\"lnt\">10\n</span><span class=\"lnt\">11\n</span><span class=\"lnt\">12\n</span><span class=\"lnt\">13\n</span><span class=\"lnt\">14\n</span><span class=\"lnt\">15\n</span><span class=\"lnt\">16\n</span><span class=\"lnt\">17\n</span><span class=\"lnt\">18\n</span><span class=\"lnt\">19\n</span><span class=\"lnt\">20\n</span></code></pre></td>\n<td class=\"lntd\">\n<pre class=\"chroma\"><code class=\"language-cs\" data-lang=\"cs\"><span class=\"k\">public</span> <span class=\"k\">class</span> <span class=\"nc\">StartTest</span> <span class=\"p\">:</span> <span class=\"n\">MonoBehaviour</span> <span class=\"p\">&#123;</span>\n<pre><code>&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Awake&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;\n&lt;span class=&quot;p&quot;&gt;&#123;&lt;/span&gt;\n\n&lt;span class=&quot;p&quot;&gt;&#125;&lt;/span&gt;\n&lt;span class=&quot;c1&quot;&gt;// Use this for initialization\n</code></pre>\n<p></span><span class=\"c1\"></span>\t<span class=\"k\">void</span> <span class=\"n\">Start</span> <span class=\"p\">()</span> <span class=\"p\">{</span><br />\n<span class=\"n\">CsToLuaTest</span> <span class=\"n\">test</span> <span class=\"p\">=</span> <span class=\"k\">new</span> <span class=\"n\">CsToLuaTest</span><span class=\"p\">();</span><br />\n<span class=\"n\">LuaScriptMgr</span> <span class=\"n\">mgr</span> <span class=\"p\">=</span> <span class=\"k\">new</span> <span class=\"n\">LuaScriptMgr</span><span class=\"p\">();</span><br />\n<span class=\"n\">mgr</span><span class=\"p\">.</span><span class=\"n\">Start</span><span class=\"p\">();</span><br />\n<span class=\"n\">mgr</span><span class=\"p\">.</span><span class=\"n\">DoFile</span><span class=\"p\">(</span><span class=\"s\">&quot;LuaTest.lua&quot;</span><span class=\"p\">);</span><span class=\"c1\">//这里放在工程中Lua文件夹下<br />\n</span><span class=\"c1\"></span>        <span class=\"n\">mgr</span><span class=\"p\">.</span><span class=\"n\">CallLuaFunction</span><span class=\"p\">(</span><span class=\"s\">&quot;LuaTest.Test&quot;</span><span class=\"p\">,</span> <span class=\"n\">test</span><span class=\"p\">);</span><span class=\"c1\">//传入一个CsToLuaTest对象<br />\n</span><span class=\"c1\"></span><br />\n<span class=\"p\">}</span><br />\n<span class=\"c1\">// Update is called once per frame<br />\n</span><span class=\"c1\"></span>\t<span class=\"k\">void</span> <span class=\"n\">Update</span> <span class=\"p\">()</span> <span class=\"p\">{</span></p>\n<pre><code>&lt;span class=&quot;p&quot;&gt;&#125;&lt;/span&gt;\n</code></pre>\n<p><span class=\"p\">}</span></code></pre></td></tr></tbody></table></p>\n</div>\n</div>\n<p>接下来打开WrapFile.cs，仿照着把CsToLuaTest写进binds中。在菜单栏中点击Lua/Clear LuaBinder + Wrap Files。这是清除之前已经生成的文件。然后再点击Lua/Gen Lua Wrap Files。这样就能生成Wrap文件并在Lua中进行注册了。\n把StartTest绑到场景中的物体上，运行游戏。就能看到我们在LuaTest.lua成功调用了CsToLuaTest.cs中的testprint()方法并打出了success的日志。\n<img src=\"https://llyyc.github.io//image/ulua2.png\" alt=\"ulua菜单栏\"/></p>","text":"热更新是unity一个长久的话题，热更新主要有两部分，一部分就是资源，这个靠u3d的assetbundle就可以做，另一部分就是逻辑了。游戏更新难免会遇到一些流程或者UI的逻辑变动。在PC和Android上可以使用C#的反射来动态的生成代码，而IOS的Full AOT（完全 预先...","link":"","photos":[],"count_time":{"symbolsCount":"3.1k","symbolsTime":"3 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-%E7%AE%80%E5%8D%95%E8%AE%A4%E8%AF%86ulua\"><span class=\"toc-text\">1.简单认识uLua</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-wrapfile-cs\"><span class=\"toc-text\">(1)WrapFile.cs</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-bindlua-cs\"><span class=\"toc-text\">(2)BindLua.cs</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-wrap-lua\"><span class=\"toc-text\">(3)Wrap.lua</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-luabinder-cs\"><span class=\"toc-text\">(4)LuaBinder.cs</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-delegatefactory-cs\"><span class=\"toc-text\">(5)DelegateFactory.cs</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8ulua\"><span class=\"toc-text\">2.简单使用uLua</span></a></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"cocos2dx lua 热更新原理与实战","uid":"f3d67063cbdd4d9c236062995f15586f","slug":"zl/2016-01-01-56_cocos2dx lua 热更新原理与实战","date":"2024-04-03T03:47:35.824Z","updated":"2024-04-03T03:47:35.824Z","comments":true,"path":"api/articles/zl/2016-01-01-56_cocos2dx lua 热更新原理与实战.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"首先，如果有过cocos2dx lua开发经验的朋友都知道，为什么使用Lua而不是C++,最重要的原因就是因为下面这三个原因 热更新(在线更新代码和资源) 比C++简单很多,入门和实战 轻量级，最小最轻的脚本语言 今天就从Lua热更新，捣鼓一下其中的原理，并具体实战一下！ 什么是...","link":"","photos":[],"count_time":{"symbolsCount":"7.1k","symbolsTime":"6 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"在openresty中是使用lua脚本实现新老路由平滑升级","uid":"151a961eee10fb762ab491ac88468502","slug":"zl/2016-01-01-567_在openresty中是使用lua脚本实现新老路由平滑升级","date":"2024-04-03T03:47:35.823Z","updated":"2024-04-03T03:47:35.823Z","comments":true,"path":"api/articles/zl/2016-01-01-567_在openresty中是使用lua脚本实现新老路由平滑升级.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"想升级PHP框架phalcon到3.x, 但是发现升级后与老版本基本不兼容, 也就意味着代码基本要重写了。考虑到不可能一下把所有的接口切换到新的框架上去（不能短时间内全部迁移所有的接口，新的框架提供的接口需要测试时间）。想到的方案是， 一方面提供新的接口使用新的框架编写，然后网关...","link":"","photos":[],"count_time":{"symbolsCount":"3.8k","symbolsTime":"3 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}