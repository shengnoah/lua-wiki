{"title":"Lua","uid":"15b0cdc6d03f6c3f6bf8d3a7ff197317","slug":"zl/2016-01-01-1010_[Lua","date":"2024-04-03T03:47:32.964Z","updated":"2024-04-03T03:47:32.964Z","comments":true,"path":"api/articles/zl/2016-01-01-1010_[Lua.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<p>读书笔记： Programming in Lua, 4th Edition.</p>\n<div class=\"language-lua highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">Account</span> <span class=\"o\">=</span> <span class=\"p\">&#123;</span>\n    <span class=\"n\">balance</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n    <span class=\"n\">withdraw</span> <span class=\"o\">=</span> <span class=\"k\">function</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">)</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">balance</span> <span class=\"o\">=</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">balance</span> <span class=\"o\">-</span> <span class=\"n\">v</span>\n    <span class=\"k\">end</span>\n<span class=\"p\">&#125;</span>\n<p><span class=\"k\">function</span> <span class=\"nf\">Account</span><span class=\"p\">:</span><span class=\"n\">deposit</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span><br />\n<span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">balance</span> <span class=\"o\">=</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">balance</span> <span class=\"o\">+</span> <span class=\"n\">v</span><br />\n<span class=\"k\">end</span></p>\n<p><span class=\"c1\">– 用.来调用函数的话，需要手动给self传值。</span><br />\n<span class=\"c1\">– 用冒号来调用函数的话，可以省略self。</span><br />\n<span class=\"n\">Account</span><span class=\"p\">.</span><span class=\"n\">deposit</span><span class=\"p\">(</span><span class=\"n\">Account</span><span class=\"p\">,</span> <span class=\"mi\">200</span><span class=\"p\">)</span><br />\n<span class=\"n\">Account</span><span class=\"p\">:</span><span class=\"n\">deposit</span><span class=\"p\">(</span><span class=\"mi\">200</span><span class=\"p\">)</span></p>\n<p><span class=\"n\">Account</span><span class=\"p\">.</span><span class=\"n\">withdraw</span><span class=\"p\">(</span><span class=\"n\">Account</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">)</span><br />\n<span class=\"n\">Account</span><span class=\"p\">:</span><span class=\"n\">withdraw</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">)</span><br />\n</code></pre></div></div></p>\n<p>在上面的例子中，Account只是一个对象实例。</p>\n<p>在C++中，一个类，可以生成多个对象实例。</p>\n<p>在Lua中，没有类的概念，Lua是用metatable来模拟实现类的。</p>\n<h2 id=\"classes\">Classes</h2>\n<p>if we have two objects A and B, all we have to do to make B a prototype for A is this:</p>\n<div class=\"language-lua highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">setmetatable</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"p\">&#123;</span><span class=\"n\">__index</span> <span class=\"o\">=</span> <span class=\"n\">B</span><span class=\"p\">&#125;)</span>\n</code></pre></div></div>\n<p>After that, A looks up in B for any operation that it does not have.</p>\n<p>Let us go back to our example of a bank account. To create other accounts with behavior similar to Account,\nwe arrange for these new objects to inherit their operations from Account, using the __index\nmetamethod.</p>\n<div class=\"language-lua highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">local</span> <span class=\"n\">mt</span> <span class=\"o\">=</span> <span class=\"p\">&#123;</span><span class=\"n\">__index</span> <span class=\"o\">=</span> <span class=\"n\">Account</span><span class=\"p\">&#125;</span>\n<span class=\"k\">function</span> <span class=\"nc\">Account</span><span class=\"p\">.</span><span class=\"nf\">new</span> <span class=\"p\">(</span><span class=\"n\">o</span><span class=\"p\">)</span>\n    <span class=\"n\">o</span> <span class=\"o\">=</span> <span class=\"n\">o</span> <span class=\"ow\">or</span> <span class=\"p\">&#123;&#125;</span> <span class=\"c1\">-- create table if user does not provide one</span>\n    <span class=\"nb\">setmetatable</span><span class=\"p\">(</span><span class=\"n\">o</span><span class=\"p\">,</span> <span class=\"n\">mt</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">o</span>\n<span class=\"k\">end</span>\n</code></pre></div></div>\n<p>After this code, what happens when we create a new account and call a method on it, like this?</p>\n<div class=\"language-lua highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">Account</span><span class=\"p\">.</span><span class=\"n\">new</span><span class=\"p\">&#123;</span><span class=\"n\">balance</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">&#125;</span>\n<span class=\"n\">a</span><span class=\"p\">:</span><span class=\"n\">deposit</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">.</span><span class=\"mi\">00</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>When we create the new account, a, it will have mt as its metatable. When we call\na:deposit(100.00), we are actually calling a.deposit(a, 100.00); the colon is only syntactic\nsugar. However, Lua cannot find a “deposit” entry in the table a; hence, Lua looks into the __index\nentry of the metatable. The situation now is more or less like this:</p>\n<div class=\"language-lua highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">getmetatable</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">).</span><span class=\"n\">__index</span><span class=\"p\">.</span><span class=\"n\">deposit</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">.</span><span class=\"mi\">00</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>The metatable of a is mt, and mt.__index is Account. Therefore, the previous expression evaluates\nto this one:</p>\n<div class=\"language-lua highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">Account</span><span class=\"p\">.</span><span class=\"n\">deposit</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">.</span><span class=\"mi\">00</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>That is, Lua calls the original deposit function, but passing a as the self parameter. So, the new account\na inherited the function deposit from Account. By the same mechanism, it inherits all fields from\nAccount.</p>\n<p>We can make two small improvements on this scheme. The first one is that we do not need to create a new\ntable for the metatable role; instead, we can use the Account table itself for that purpose. The second\none is that we can use the colon syntax for the new method, too. With these two changes, method new\nbecomes like this:</p>\n<div class=\"language-lua highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">function</span> <span class=\"nf\">Account</span><span class=\"p\">:</span><span class=\"n\">new</span> <span class=\"p\">(</span><span class=\"n\">o</span><span class=\"p\">)</span>\n    <span class=\"n\">o</span> <span class=\"o\">=</span> <span class=\"n\">o</span> <span class=\"ow\">or</span> <span class=\"p\">&#123;&#125;</span>\n    <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">__index</span> <span class=\"o\">=</span> <span class=\"n\">self</span>\n    <span class=\"nb\">setmetatable</span><span class=\"p\">(</span><span class=\"n\">o</span><span class=\"p\">,</span> <span class=\"n\">self</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">o</span>\n<span class=\"k\">end</span>\n</code></pre></div></div>\n<p>Now, when we call Account:new(), the hidden parameter self gets Account as its value, we make\nAccount.__index also equal to Account, and set Account as the metatable for the new object. It\nmay seem that we do not gained much with the second change (the colon syntax); the advantage of using\nself will become apparent when we introduce class inheritance, in the next section.</p>\n<h2 id=\"inheritance-继承\">Inheritance 继承</h2>\n<div class=\"language-lua highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">Account</span> <span class=\"o\">=</span> <span class=\"p\">&#123;</span><span class=\"n\">balance</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">&#125;</span>\n<p><span class=\"k\">function</span> <span class=\"nf\">Account</span><span class=\"p\">:</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">o</span><span class=\"p\">)</span><br />\n<span class=\"n\">o</span> <span class=\"o\">=</span> <span class=\"n\">o</span> <span class=\"ow\">or</span> <span class=\"p\">&#123;&#125;</span><br />\n<span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">__index</span> <span class=\"o\">=</span> <span class=\"n\">self</span><br />\n<span class=\"nb\">setmetatable</span><span class=\"p\">(</span><span class=\"n\">o</span><span class=\"p\">,</span> <span class=\"n\">self</span><span class=\"p\">)</span><br />\n<span class=\"k\">return</span> <span class=\"n\">o</span><br />\n<span class=\"k\">end</span></p>\n<p><span class=\"k\">function</span> <span class=\"nf\">Account</span><span class=\"p\">:</span><span class=\"n\">deposit</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span><br />\n<span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">balance</span> <span class=\"o\">=</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">balance</span> <span class=\"o\">+</span> <span class=\"n\">v</span><br />\n<span class=\"k\">end</span></p>\n<p><span class=\"k\">function</span> <span class=\"nf\">Account</span><span class=\"p\">:</span><span class=\"n\">withdraw</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span><br />\n<span class=\"k\">if</span> <span class=\"n\">v</span> <span class=\"o\">&gt;</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">balance</span> <span class=\"k\">then</span> <span class=\"nb\">error</span><span class=\"s2\">&quot;insufficient funds&quot;</span> <span class=\"k\">end</span><br />\n<span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">balance</span> <span class=\"o\">=</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">balance</span> <span class=\"o\">-</span> <span class=\"n\">v</span><br />\n<span class=\"k\">end</span></p>\n<p><span class=\"n\">SpecialAccount</span> <span class=\"o\">=</span> <span class=\"n\">Account</span><span class=\"p\">:</span><span class=\"n\">new</span><span class=\"p\">()</span><br />\n<span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">SpecialAccount</span><span class=\"p\">:</span><span class=\"n\">new</span><span class=\"p\">&#123;</span><span class=\"n\">limit</span> <span class=\"o\">=</span> <span class=\"mi\">1000</span><span class=\"p\">.</span><span class=\"mi\">00</span><span class=\"p\">&#125;</span></p>\n<p><span class=\"k\">function</span> <span class=\"nf\">SpecialAccount</span><span class=\"p\">:</span><span class=\"n\">withdraw</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span><br />\n<span class=\"k\">if</span> <span class=\"n\">v</span> <span class=\"o\">-</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">balance</span> <span class=\"o\">&gt;=</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">getLimit</span><span class=\"p\">()</span> <span class=\"k\">then</span><br />\n<span class=\"nb\">error</span><span class=\"s2\">&quot;insufficient funds&quot;</span><br />\n<span class=\"k\">end</span><br />\n<span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">balance</span> <span class=\"o\">=</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">balance</span> <span class=\"o\">-</span> <span class=\"n\">v</span><br />\n<span class=\"k\">end</span></p>\n<p><span class=\"k\">function</span> <span class=\"nf\">SpecialAccount</span><span class=\"p\">:</span><span class=\"n\">getLimit</span><span class=\"p\">()</span><br />\n<span class=\"k\">return</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">limit</span> <span class=\"ow\">or</span> <span class=\"mi\">0</span><br />\n<span class=\"k\">end</span><br />\n</code></pre></div></div></p>\n<p><img src=\"https://mdgsf.github.io/images/2017/07/29_01.jpg\" alt=\"29_01\"/></p>\n<p>就像一个链表一样，通过metatable一层一层向上找。</p>","text":"读书笔记： Programming in Lua, 4th Edition. Account = &#123; balance = 0, withdraw = function(self, v) self.balance = self.balance - v end &#125;...","link":"","photos":[],"count_time":{"symbolsCount":"3.5k","symbolsTime":"3 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#classes\"><span class=\"toc-text\">Classes</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#inheritance-%E7%BB%A7%E6%89%BF\"><span class=\"toc-text\">Inheritance 继承</span></a></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"下载LuaPerfect","uid":"b77d75c0d82f24b7c62a31671d26ce11","slug":"zl/2016-01-01-1013_下载LuaPerfect","date":"2024-04-03T03:47:32.965Z","updated":"2024-04-03T03:47:32.966Z","comments":true,"path":"api/articles/zl/2016-01-01-1013_下载LuaPerfect.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"官方QQ群下载 LuaPerfect官方群(932801740)下载(速度快，推荐) GitHub下载 LuaPerfect GitHub仓库(https://github.com/jiangzheng1986/LuaPerfect)下载 腾讯云下载 腾讯云下载(http://1...","link":"","photos":[],"count_time":{"symbolsCount":740,"symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"lua学习笔记","uid":"329726c67d21b0b62fc4af0c5b68cfed","slug":"zl/2016-01-01-1011_lua学习笔记","date":"2024-04-03T03:47:32.964Z","updated":"2024-04-03T03:47:32.965Z","comments":true,"path":"api/articles/zl/2016-01-01-1011_lua学习笔记.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":" &lt;p&gt;lua是一门轻量级的脚本语言…好像比较适合写游戏？在 &lt;a href=&quot;https://github.com/Mogara/QSanguosha&quot;&gt;太阳神三国杀&lt;/a&gt; 中见过很多lua脚本。 由于&lt;a hre...","link":"","photos":[],"count_time":{"symbolsCount":"14k","symbolsTime":"12 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}