{"title":"Lua 学习手记","uid":"ea602d69a91169b1a66e72dc3f4ebe31","slug":"zl/2016-01-01-163_Lua 学习手记","date":"2024-04-03T03:47:33.052Z","updated":"2024-04-03T03:47:33.053Z","comments":true,"path":"api/articles/zl/2016-01-01-163_Lua 学习手记.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<ul id=\"markdown-toc\">\n  <li><a href=\"#lua-语法说明\" id=\"markdown-toc-lua-语法说明\"><strong>Lua 语法说明</strong></a></li>\n  <li><a href=\"#lua-语法优化\" id=\"markdown-toc-lua-语法优化\">Lua 语法优化</a></li>\n  <li><a href=\"#其他语言调用-lua\" id=\"markdown-toc-其他语言调用-lua\">其他语言调用 Lua</a></li>\n</ul>\n<table>\n  <tbody>\n    <tr>\n      <td>导语 介绍 Lua 的语法和优化细节</td>\n    </tr>\n  </tbody>\n</table>\n<p>Lua 是一种轻量小巧的脚本语言，一个完整的 Lua 解释器不过200k，用标准 C 语言编写并以源代码形式开放。但麻雀虽小五脏俱全，Lua\n本身其设计目的就是为了嵌入应用程序中，从而为应用程序提供灵活的扩展和定制功能。在所有的脚本引擎中，Lua的速度是最快的。像《魔兽世界》的插件，手机游戏《大掌门》《神曲》《迷失之地》等都是用Lua来写的逻辑。</p>\n<h3 id=\"lua-语法说明\"><strong>Lua 语法说明</strong></h3>\n<hr/>\n<p>1、变量和赋值</p>\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>C++   \nint main() &#123;\n\tstring a = &#34;hello&#34;;\n\tint b = 2017;\n\tcout &lt;&lt; a &lt;&lt; b;\n\treturn 0;\n&#125;\n<p>Lua<br />\na = 'hello';<br />\nb = 2017;<br />\nprint(a … 2017);<br />\n</code></pre></p>\n</div>\n<p>上例输出：Hello2017</p>\n<p>可以看出 Lua 和 PHP 一样没有变量类型的概念，所以相对于那种生活在变量类型转换来转换去的 C++ 来说，Lua的确能提高很大的书写速度。而且 Lua\n里 number 就是表示双精度类型的实浮点数，不必像 C++ 那样要区分 int、unsigned、double\n等等。如果你要打印一个没有赋值的变量，会输出 nil（空类型），但不会出错。</p>\n<p>同时 Lua 的赋值可以多变量同时赋值，如下：</p>\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>a = 1;\nb = 2;\nc = 3;\nc,b,a = a,b,c;\nprint(a,b,c);  \nfunction a() \n    a = 1;\n    b = 2;\n    return a,b;\nend\nc,d = a();\nprint(c,d);\n</code></pre>\n</div>\n<p>上例输出：</p>\n<p>3 2 1<br/>\n1 2</p>\n<p>如果值的数量不匹配，则多出的值会被忽略，缺少的值会被赋 nil。同时从上例可以看出，Lua 中函数也可以同时返回多个变量。</p>\n<p>2、函数</p>\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>function a(b)\n    return b+1;\nend\n<p>c = function(d)<br />\nif(type(d) == 'function') then<br />\nreturn d(2);<br />\nelse<br />\nreturn d + 2;<br />\nend;<br />\nend</p>\n<p>print(c(a) + c(10));<br />\n</code></pre></p>\n</div>\n<p>上例输出：15</p>\n<p>从上例中我们首先可以看到 2 种函数的定义方法。其次，由于在 Lua 中 function 也是一种变量类型，故此函数 c 中我们可以把函数 a\n作为变量带入，也可以直接传一个固定数值进去。c(a) 实际调用了a(2) 返回 3，c(10) 返回 12。</p>\n<p>3、表 table 和模块</p>\n<p>table 是 Lua 的一种数据结构用来帮助我们创建不同的数据类型，在 Lua 中你可以把它当成数组 array，也可以把它当成对象\nobject，我们从下面的例子中进行讲解：</p>\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>t1 = &#123;3,1,14,6,12&#125;;\nprint(#t1);\ntable.sort(t1);\nfor k, v in pairs(t1) do\n\tprint(k,v);\nend\n<p>a = function(a)<br />\nprint('hello ' … a);<br />\nend</p>\n<p>t2 = &#123;3,4,['wow'] = '魔兽世界', ['lol'] = '英雄联盟',5, ['func'] = a&#125;;<br />\nprint(#t2);<br />\nfor k, v in pairs(t2) do<br />\nprint(k,v);<br />\nend<br />\nprint(t2.wow);<br />\nprint(t2['lol']);<br />\nt2.func('nemohou');<br />\nt2<a href=\"'nemohou'\">'func'</a>;<br />\n</code></pre></p>\n</div>\n<p>上例输出：<br/>\n5<br/>\n1 1<br/>\n2 3<br/>\n3 6<br/>\n4 12<br/>\n5 14<br/>\n3<br/>\n1 3<br/>\n2 4<br/>\n3 5<br/>\nfunc function: 02C3B8B8<br/>\nlol 英雄联盟<br/>\nwow 魔兽世界<br/>\n魔兽世界<br/>\n英雄联盟<br/>\nhello nemohou<br/>\nhello nemohou</p>\n<p>t1 为我们定义的第一个 table，为普通的数组类型，因此可以用 Lua 通用计算长度的方式“#”计算出长度 5；而后我们用 table.sort\n进行排序；“k, v in pairs(t1)”为迭代器，可遍历出 table 的每个元素；<br/>\nt2 中我们定义了一个复杂的 table，这个复杂 table 我们不仅自定义了索引，而且把函数 a 作为一个元素进行带入，这时通过 pairs\n进行遍历的时候只能打印出这个函数的内存地址。Lua 中对于 table 元素的引用可以用数组的方式也可以用“.”的方式，这时我们发现，t2\n实际上已经形成了类的概念。</p>\n<p>那么有了类的概念我们就可以封装一个模块了，我们可以定义一个这样的模块文件 module.lua</p>\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>module = &#123;&#125;\n<p>module.constant = &quot;常量&quot;</p>\n<p>function module.publicFunc()<br />\nend</p>\n<p>local function priviteFunc()<br />\nend</p>\n<p>return module<br />\n</code></pre></p>\n</div>\n<p> <code class=\"highlighter-rouge\">publicFunc为公有函数，priviteFunc为私有函数，然后通过require函数就可以调用这个模块文件进行使用</code></p>\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>require(&#34;module&#34;)\n<p>print(module.constant)<br />\n</code></pre></p>\n</div>\n<p>4、协同程序 coroutine</p>\n<p>Lua中的协同程序是非常强大的功能，但与线程有所不同，一个具有多个线程的程序可以同时运行几个线程，而协同程序却需要彼此协作的运行。在任一指定时刻只有一个协同程序在运行，并且这个正在运行的协同程序只有在明确的被要求挂起的时候才会被挂起。协同程序有点类似同步的多线程，在等待同一个线程锁的几个线程有点类似协同。</p>\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>co = coroutine.create(\n    function(type)\n\t\tprint(1)\n\t\tcoroutine.yield()\n\t\tprint(2)\n\t\tcoroutine.yield()\n\t\tprint(3)\n\t\tcoroutine.yield()\n<pre><code>end\n</code></pre>\n<p>)</p>\n<p>coroutine.resume(co) --1<br />\ncoroutine.resume(co) --2<br />\ncoroutine.resume(co) --3<br />\n</code></pre></p>\n</div>\n<p> coroutine.create() 方法为创建一个 coroutine，coroutine.yield()\n方法为挂起，coroutine.resume() 为重启或继续执行。因此上例中我们先创建了一个协同程序 co，这时它并没有开始执行，直到运行到\nresume，输出了 1 后 co 挂起，等待第二个 resume 后继续执行输出 2 然后继续挂起，等待执行到第三个 resume\n后再继续挂起，程序结束。</p>\n<p>我们再看一个互相通讯的例子：</p>\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>function send()\n     local i = 0\n     while true do\n          i = i + 1\n          coroutine.yield(i)\n     end\nend\n<p>function receive(tid)<br />\nwhile true do<br />\nlocal status, value = coroutine.resume(tid)<br />\nprint(value)<br />\nend<br />\nend</p>\n<p>tid = coroutine.create(send)<br />\nprint(tid);<br />\nreceive(tid)<br />\n</code></pre></p>\n</div>\n<p> 上例输出：<br/>\nthread: 001EC1E0<br/>\n1<br/>\n2<br/>\n3<br/>\n4<br/>\n5</p>\n<p>此例我们首先创建了一个死循环的函数 send，此函数会持续的把累加的变量 i 挂起后发送出去。然后 receive 函数负责接收指定 thread\n的挂起信号然后继续执行，同时会接收 send 发送过来的变量 i 进行输出。因此此程序会一直循环的输出累加的变量 i 的值，直到手动结束程序进程为止。</p>\n<h3 id=\"lua-语法优化\">Lua 语法优化</h3>\n<p>人人都说 Lua 是效率很高的一种语言，可为什么我的程序还是那么慢，下面说下基本的优化方法</p>\n<p>我们先看一个例子：</p>\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>for i = 1,100000000 do\n  local x = math.sin(i)\nend  \n</code></pre>\n</div>\n<p> 此程序运行结果为 10.886 左右，10秒。</p>\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>local sin = math.sin\nfor i = 1,100000000 do\n  local x = sin(i)\nend  \n</code></pre>\n</div>\n<p>但如果我们先一步把 math.sin 保存成局部变量 sin 后运行结果为 8.203 左右 8 秒。提升了25%左右。为啥会有这样的差异呢？因为 Lua\n会为每一个活动的函数都会其分配一个栈，每调用一次都会分配一次，而如果事先把函数分配好栈空间然后再去调用，自然省去不少时间，如果你的算法中有经常循环调用的地方可以用此方法优化。</p>\n<p>继续看下一个例子：</p>\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>for i = 1,10000000 do\n    local a = &#123;&#125;\n    a[1] = 1; a[2] = 2; a[3] = 3\nend  \n</code></pre>\n</div>\n<p> 运行时间 8.818 秒</p>\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>for i = 1,10000000 do\n    local a = &#123;1,1,1&#125;\n    a[1] = 1; a[2] = 2; a[3] = 3\nend  \n</code></pre>\n</div>\n<p> 运行时间 4.321 秒，快了将近一倍。差异在 table a 的初始化方式上，如果你创建了一个未知大小的 table\n的在遇到分配的空间已满的时候，会重新分配空间并将记录移到新的位置，这将耽误很多时间。所以如果你定义的 table 知道有多大，建议预先填充好 table\n的大小。也就是说 table 初始化时尽量固定好空间的大小，减少容量的变动。</p>\n<p>继续看下一个例子：</p>\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>local s = &#39;&#39;\nfor i = 1,500000 do\n    s = s .. &#39;a&#39;\nend  \n</code></pre>\n</div>\n<p> 运行时间 29.018 秒</p>\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>local s = &#39;&#39;\nlocal t = &#123;&#125;\nfor i = 1,500000 do\n    t[#t + 1] = &#39;a&#39;\nend\ns = table.concat( t, &#39;&#39;)\n</code></pre>\n</div>\n<p> 运行时间 0.07 秒，快的太多了，已然不是一个量级。原因是什么呢？Lua 在进行字符串创建的时候都会进行比较的操作，而每次累加 a\n时都要进行，故此很慢。而我们可以用 table 进行缓存的模拟后效率会很快</p>\n<h3 id=\"其他语言调用-lua\">其他语言调用 Lua</h3>\n<p>test.lua</p>\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>str = &#34;hello&#34;  \nfunction add(a,b)  \n    return a + b  \nend\n</code></pre>\n</div>\n<p>C++</p>\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>#include   \n#include   \nusing namespace std;  \n<p>extern &quot;C&quot;<br />\n&#123;<br />\n#include &quot;lua.h&quot;<br />\n#include &quot;lauxlib.h&quot;<br />\n#include &quot;lualib.h&quot;<br />\n&#125;<br />\nvoid main()<br />\n&#123;<br />\nlua_State *L = luaL_newstate();</p>\n<pre><code>//加载Lua文件  \nint bRet = luaL_loadfile(L,&amp;#34;test.lua&amp;#34;);  \n\n//运行Lua文件  \nbRet = lua_pcall(L,0,0,0);  \n\n//读取变量  \nlua_getglobal(L,&amp;#34;str&amp;#34;);  \nstring str = lua_tostring(L,-1);  \ncout&amp;lt;&amp;lt;&amp;#34;str = &amp;#34;&amp;lt;endl;        //str = I am so cool~  \n\n//读取函数  \nlua_getglobal(L, &amp;#34;add&amp;#34;);        // 获取函数，压入栈中  \nlua_pushnumber(L, 10);          // 压入第一个参数  \nlua_pushnumber(L, 20);          // 压入第二个参数  \nint iRet= lua_pcall(L, 2, 1, 0);// 调用函数，2=参数个数，1=返回结果  \n\ndouble fValue = lua_tonumber(L, -1);  \ncout &amp;lt;&amp;lt; &amp;#34;Result is &amp;#34; &amp;lt;&amp;lt; fValue &amp;lt;&amp;lt; endl;   \n\n//关闭state  \nlua_close(L);  \nreturn ;  \n</code></pre>\n<p>}<br />\n</code></pre></p>\n</div>\n<p> PHP</p>\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>$lua = new Lua();\n$lua-&gt;include(&#39;test.lua&#39;);\nvar_dump($lua-&gt;call(&#39;add&#39;, array(20, 10)));\n</code></pre>\n</div>","text":" Lua 语法说明 Lua 语法优化 其他语言调用 Lua 导语 介绍 Lua 的语法和优化细节 Lua 是一种轻量小巧的脚本语言，一个完整的 Lua 解释器不过200k，用标准 C 语言编写并以源代码形式开放。但麻雀虽小五脏俱全，Lua 本身其设计目的就是为了嵌入应用程序中，从...","link":"","photos":[],"count_time":{"symbolsCount":"5.6k","symbolsTime":"5 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#lua-%E8%AF%AD%E6%B3%95%E8%AF%B4%E6%98%8E\"><span class=\"toc-text\">Lua 语法说明</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#lua-%E8%AF%AD%E6%B3%95%E4%BC%98%E5%8C%96\"><span class=\"toc-text\">Lua 语法优化</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%85%B6%E4%BB%96%E8%AF%AD%E8%A8%80%E8%B0%83%E7%94%A8-lua\"><span class=\"toc-text\">其他语言调用 Lua</span></a></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Lua学习笔记(1) 元表","uid":"de2364008b06586313c5158e78472b93","slug":"zl/2016-01-01-162_Lua学习笔记(1) 元表","date":"2024-04-03T03:47:33.052Z","updated":"2024-04-03T03:47:33.052Z","comments":true,"path":"api/articles/zl/2016-01-01-162_Lua学习笔记(1) 元表.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"[TOC] 基本 1. 概念 定义：Lua 中的每个值都可以用一个 metatable。 这个 metatable 就是一个原始的 Lua table ， 它用来定义原始值在特定操作下的行为。 你可以通过在 metatable 中的特定域设一些值来改变拥有这个 metatable...","link":"","photos":[],"count_time":{"symbolsCount":"2.6k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Programming in Lua(Thrid Edition)笔记","uid":"a502732b8dc58224e972b6c53538b8c4","slug":"zl/2016-01-01-161_Programming in Lua(Thrid Edition)笔记","date":"2024-04-03T03:47:33.052Z","updated":"2024-04-03T03:47:33.052Z","comments":true,"path":"api/articles/zl/2016-01-01-161_Programming in Lua(Thrid Edition)笔记.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"3 Expressions a % b == a - math.floor(a / b) * b，可以用于浮点数，x % 1为x的小数部分，x - x % 1为x的整数部分，x-x%0.01可以保留x两位小数，也可以用于角度对360取模和弧度对2PI取模angle%(2*math...","link":"","photos":[],"count_time":{"symbolsCount":"1.3k","symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}