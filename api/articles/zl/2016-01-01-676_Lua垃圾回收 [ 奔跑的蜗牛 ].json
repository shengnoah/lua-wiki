{"title":"Lua垃圾回收","uid":"956cb1692bdff1d5b6d834ddef84f682","slug":"zl/2016-01-01-676_Lua垃圾回收 [ 奔跑的蜗牛 ]","date":"2024-04-03T03:47:35.907Z","updated":"2024-04-03T03:47:35.907Z","comments":true,"path":"api/articles/zl/2016-01-01-676_Lua垃圾回收 [ 奔跑的蜗牛 ].json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<p class=\"page-title-sub\">\n      <span id=\"post-title-date\">撰写于 2018-05-25</span>\n<pre><code>    &lt;span id=&quot;post-title-updated&quot;&gt;修改于 2018-05-25&lt;/span&gt;\n  \n  \n  &lt;span id=&quot;post-title-categories&quot;&gt;分类\n  \n  \n    \n    \n    &lt;a href=&quot;/categories/高级Lua/&quot;&gt;高级Lua&lt;/a&gt;\n  \n  &lt;/span&gt;\n  \n  \n  &lt;span id=&quot;post-title-tags&quot;&gt;\n  标签\n  \n  \n    \n    \n    &lt;a href=&quot;/tags/Lua/&quot;&gt;Lua&lt;/a&gt;\n  \n  &lt;/span&gt;\n  \n&lt;/p&gt;\n\n&lt;p&gt;本来不想写这篇的，往浅了说，没啥意思，就是api的使用方法，往深了说，就是lua自动GC的原理，涉及到底层源码的解读，暂时没精力看。那就折中一下，说一下api的使用方法和GC的基本原理，不涉及C源码部分。&lt;/p&gt;\n</code></pre>\n<h4 id=\"Lua-垃圾回收原理\"><a href=\"#Lua-垃圾回收原理\" class=\"headerlink\" title=\"Lua 垃圾回收原理\"></a>Lua 垃圾回收原理</h4><p>lua的垃圾回收算法称为“mark-and-sweep”，标记回收。算法本身不复杂。<br/>首先，系统管理着所有已经创建了的对象。每个对象都有其他对象的引用。root集合代表着已知的系统级别的对象引用。我们从root集合出发，就可以访问到系统引用的所有对象。而没有访问到的对象就死垃圾对象，需要被销毁。<br/>所有对象分成三个状态：</p>\n<ol>\n<li>White状态，也就是待访问的状态。表示对象还没有被GC的标记过程访问到。</li>\n<li>Gray状态，也就是待扫描的状态。表示对象已经被GC访问到，但是对象本身包含的对其他对象的引用还没有进行遍历访问。</li>\n<li>Black状态，也是已经扫描的状态。也就是该对象已经被GC访问到，并且也已经便利了对象本省包含的对其他对象的引用。<br/>基本思想课描述如下：<figure class=\"highlight cpp\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/><span class=\"line\">9</span><br/><span class=\"line\">10</span><br/><span class=\"line\">11</span><br/><span class=\"line\">12</span><br/><span class=\"line\">13</span><br/><span class=\"line\">14</span><br/><span class=\"line\">15</span><br/><span class=\"line\">16</span><br/><span class=\"line\">17</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">当前所有对象都是White状态;  </span><br/><span class=\"line\">将root集合引用到的对象从White设置成Gray，并放到Gray集合中;  </span><br/><span class=\"line\"><span class=\"keyword\">while</span>(Gray集合不为空)  </span><br/><span class=\"line\">{  </span><br/><span class=\"line\">    从Gray集合中移除一个对象O，并将O设置成Black状态;  </span><br/><span class=\"line\">    <span class=\"keyword\">for</span>(O中每一个引用到的对象O1) {  </span><br/><span class=\"line\">        <span class=\"keyword\">if</span>(O1在White状态) {  </span><br/><span class=\"line\">            将O1从White设置成Gray，并放到到Gray集合中；  </span><br/><span class=\"line\">        }  </span><br/><span class=\"line\">    }  </span><br/><span class=\"line\">}  </span><br/><span class=\"line\"><span class=\"keyword\">for</span>(任意一个对象O){  </span><br/><span class=\"line\">    <span class=\"keyword\">if</span>(O在White状态)  </span><br/><span class=\"line\">        销毁对象O;  </span><br/><span class=\"line\">    <span class=\"keyword\">else</span>  </span><br/><span class=\"line\">        将O设置成White状态;  </span><br/><span class=\"line\">}</span><br/></pre></td></tr></tbody></table></figure>\n</li>\n</ol>\n<p>但是运行GC需要消耗时间，并不是一直在执行，如果在对象很多的情况下，会影响程序的执行。解决的方法就是，将GC分步执行。<br/></p><figure class=\"highlight cpp\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/><span class=\"line\">9</span><br/><span class=\"line\">10</span><br/><span class=\"line\">11</span><br/><span class=\"line\">12</span><br/><span class=\"line\">13</span><br/><span class=\"line\">14</span><br/><span class=\"line\">15</span><br/><span class=\"line\">16</span><br/><span class=\"line\">17</span><br/><span class=\"line\">18</span><br/><span class=\"line\">19</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">当前所有对象都是White状态;  </span><br/><span class=\"line\">将root集合引用到的对象从White设置成Gray，并放到Gray集合中;</span><br/><span class=\"line\">遍历访问所有的gray对象。如果超出了本次计算量上限，退出等待下一次遍历:</span><br/><span class=\"line\"><span class=\"keyword\">while</span>(Gray集合不为空,并且没有超过本次计算量的上限)</span><br/><span class=\"line\">{ </span><br/><span class=\"line\">\t从Gray集合中移除一个对象O，并将O设置成Black状态; </span><br/><span class=\"line\">\t<span class=\"keyword\">for</span>(O中每一个引用到的对象O1) { </span><br/><span class=\"line\">\t\t<span class=\"keyword\">if</span>(O1在White状态) { </span><br/><span class=\"line\">\t\t\t将O1从White设置成Gray，并放到到Gray集合中； </span><br/><span class=\"line\">\t\t} </span><br/><span class=\"line\">\t} </span><br/><span class=\"line\">}</span><br/><span class=\"line\">销毁垃圾对象：</span><br/><span class=\"line\"><span class=\"keyword\">for</span>(任意一个对象O){  </span><br/><span class=\"line\">    <span class=\"keyword\">if</span>(O在White状态)  </span><br/><span class=\"line\">        销毁对象O;  </span><br/><span class=\"line\">    <span class=\"keyword\">else</span>  </span><br/><span class=\"line\">        将O设置成White状态;  </span><br/><span class=\"line\">}</span><br/></pre></td></tr></tbody></table></figure><p></p>\n<p>但是上面的执行会有一个问题，由于程序可以正常执行，所以会破坏当前对象之间的引用关系。比如说当程序的改变，使得一个标记为black的对象引用到了一个white对象，就会造成回收错误！解决这个问题的办法就是设置barrier。barrier在程序正常运行过程中，监控所有的引用改变。如果一个black对象需要引用一个white对象，存在两种处理办法：</p>\n<ol>\n<li>将white对象设置成gray，并添加到gray列表中等待扫描。这样等于帮助整个GC的标识过程向前推进了一步。</li>\n<li>将black对象该回成gray，并添加到gray列表中等待扫描。这样等于使整个GC的标识过程后退了一步。<br/>这种垃圾回收方式被称为”Incremental Garbage Collection”(简称为”IGC”，Lua所采用的就是这种方法。使用”IGC”并不是没有代价的。IGC所检测出来的垃圾对象集合比实际的集合要小，也就是说，有些在GC过程中变成垃圾的对象，有可能在本轮GC中检测不到。不过，这些残余的垃圾对象一定会在下一轮GC被检测出来，不会造成泄露。</li>\n</ol>\n<h4 id=\"Lua-垃圾回收函数\"><a href=\"#Lua-垃圾回收函数\" class=\"headerlink\" title=\"Lua 垃圾回收函数\"></a>Lua 垃圾回收函数</h4><p>Lua垃圾回收只有一个函数collectgarbage，可以根据传入的参数，实现不同的功能。</p>\n<ol>\n<li>collectgarbage(“collect”): 执行垃圾回收的一个完整周期。</li>\n<li>collectgarbage(“count”): 返回当前使用的千字节的程序内存量</li>\n<li>collectgarbage(“restart”): 如果垃圾收集器已经停止，将重新启动它。</li>\n<li>collectgarbage(“setpause”): 第二个参数/100代表在开始一个新的收集周期之前要等待多久。当这个值小于等于100的时候，就代表执行完一个周期之后不会等待，直接进入下一个周期。当这个值为200的时候，就代表当内存达到上一个周期结束时的两倍的时候，再进入下一个周期。</li>\n<li>collectgarbage(“setstepmul”): 第二参数/100代表单步的速度，默认值为200，代表是内存分配速度的两倍。</li>\n<li>collectgarbage(“step”): 运行垃圾回收的一步。第二个参数是越大step也会变大。在收集的垃圾将返回true，如果触发的步骤是一个垃圾收集周期的最后一步。</li>\n<li>collectgarbage(“stop”): 停止垃圾收集器，如果它的运行。</li>\n</ol>\n<p>总结：lua有自动垃圾回收的机制，如果不是特殊要求，无需手动设置和回收。</p>","text":" 撰写于 2018-05-25 &lt;span id=&quot;post-title-updated&quot;&gt;修改于 2018-05-25&lt;/span&gt; &lt;span id=&quot;post-title-categories&quot;&gt;分...","link":"","photos":[],"count_time":{"symbolsCount":"2.7k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Lua-%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">Lua 垃圾回收原理</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Lua-%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">Lua 垃圾回收函数</span></a></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Redis实现限流器Lua脚本","uid":"204555f630806600c0a1c51fc58d3e02","slug":"zl/2016-01-01-679_Redis实现限流器Lua脚本","date":"2024-04-03T03:47:35.911Z","updated":"2024-04-03T03:47:35.912Z","comments":true,"path":"api/articles/zl/2016-01-01-679_Redis实现限流器Lua脚本.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"算法原理系统以恒定的速率产生令牌，然后把令牌放到令牌桶中，令牌桶有一个容量，当令牌桶满了的时候，再向其中放入的令牌会被丢弃；当想要处理一个请求的时候，需要从令牌桶中取出一个令牌，如果此时令牌桶中没有令牌，则拒绝该请求。 数据结构采用Hash结构存储，字段定义如下： 名称 含义 c...","link":"","photos":[],"count_time":{"symbolsCount":"3k","symbolsTime":"3 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Unity中的Lua","uid":"c73577aa8658fb5334e391f72e90284c","slug":"zl/2016-01-01-677_Unity中的Lua","date":"2024-04-03T03:47:35.907Z","updated":"2024-04-03T03:47:35.910Z","comments":true,"path":"api/articles/zl/2016-01-01-677_Unity中的Lua.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":" 文章目錄 &lt;/div&gt; &lt;p&gt;结合以前的初步学习了解，这一次要对Lua进行进一步的深入学习。&lt;/p&gt; 首先我们要知道Lua是脚本语言，是有自己的虚拟机，是解析执行而非像C#,C++,Java这些编译执行。同时Lua是弱类型语言。 这里不更多的...","link":"","photos":[],"count_time":{"symbolsCount":"8.9k","symbolsTime":"8 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}