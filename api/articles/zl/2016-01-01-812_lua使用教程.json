{"title":"lua使用教程","uid":"bb366af0997ddf8c4e47511bb8d73383","slug":"zl/2016-01-01-812_lua使用教程","date":"2024-04-03T03:47:36.058Z","updated":"2024-04-03T03:47:36.059Z","comments":true,"path":"api/articles/zl/2016-01-01-812_lua使用教程.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<div id=\"toc\" class=\"toc-article\">\n\t\t\t<strong class=\"toc-title\">文章目录</strong>\n<pre><code>\t&lt;/div&gt;\n\t\n\t&lt;p&gt;闲来无趣，稍微看了一会lua…&lt;/p&gt;\n</code></pre>\n<h2 id=\"运行\">运行</h2><p>1.命令行运行<code>lua</code>命令，在<code>lua</code>的<code>shell</code>中执行语句<br/></p><figure class=\"highlight stylus\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">zhubenshuli@raspberrypi /var/www/lua_program $ lua</span><br/><span class=\"line\">Lua <span class=\"number\">5.3</span>.<span class=\"number\">1</span>  Copyright (C) <span class=\"number\">1994</span>-<span class=\"number\">2015</span> Lua<span class=\"class\">.org</span>, PUC-Rio</span><br/><span class=\"line\">&gt; <span class=\"function\"><span class=\"params\">(<span class=\"string\">&#34;hello world!&#34;</span>)</span></span></span><br/><span class=\"line\">hello world!</span><br/><span class=\"line\">&gt;</span><br/></pre></td></tr></tbody></table></figure><p></p>\n<p>2.使用<code>lua</code>命令直接执行脚本文件<br/></p><figure class=\"highlight coffeescript\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">zhubenshuli<span class=\"property\">@raspberrypi</span> /<span class=\"reserved\">var</span>/www/lua_program $ lua test.lua</span><br/><span class=\"line\">hello world!</span><br/></pre></td></tr></tbody></table></figure><p></p>\n<p>3.像<code>shell</code>一样运行<br/></p><figure class=\"highlight groovy\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">zhubenshuli<span class=\"annotation\">@raspberrypi</span> <span class=\"regexp\">/var/</span>www/lua_program $ cat hello.lua</span><br/><span class=\"line\">#!<span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/bin/</span>lua</span><br/><span class=\"line\">print(<span class=\"string\">&#34;hello world!&#34;</span>)</span><br/><span class=\"line\">zhubenshuli<span class=\"annotation\">@raspberrypi</span> <span class=\"regexp\">/var/</span>www/lua_program $ sudo chmod +x hello.lua</span><br/><span class=\"line\">zhubenshuli<span class=\"annotation\">@raspberrypi</span> <span class=\"regexp\">/var/</span>www<span class=\"regexp\">/lua_program $ ./</span>hello.lua</span><br/><span class=\"line\">hello world!</span><br/></pre></td></tr></tbody></table></figure><p></p>\n<h2 id=\"语法\">语法</h2><p>1.注释<br/></p><figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"comment\">--[[</span><br/><span class=\"line\">    这是神奇的块注释</span><br/><span class=\"line\">--]]</span></span><br/></pre></td></tr></tbody></table></figure><p></p>\n<p>2.变量<br/><code>lua</code>的变量没有特殊说明全是全局变量，变量前加<code>local</code>关键字的是局部变量。<br/>可以这样访问全局变量（假设变量名为globalVar)：<br/></p><figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">_G</span>.globalVar</span><br/><span class=\"line\"><span class=\"built_in\">_G</span>[<span class=\"string\">&#34;globalVar&#34;</span>]</span><br/></pre></td></tr></tbody></table></figure><p></p>\n<p>布尔类型是<code>false</code>的情况只有<code>nil</code>和<code>false</code><br/><code>lua</code>的数字只有double型，64bits</p>\n<h2 id=\"控制语句\">控制语句</h2><p><strong>while循环</strong><br/></p><figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">sum = <span class=\"number\">0</span>;</span><br/><span class=\"line\">num = <span class=\"number\">1</span>;</span><br/><span class=\"line\"><span class=\"keyword\">while</span> num &lt;= <span class=\"number\">100</span> <span class=\"keyword\">do</span></span><br/><span class=\"line\">    sum = sum + num</span><br/><span class=\"line\">    num = num + <span class=\"number\">1</span></span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#34;sum =&#34;</span>,sum)</span><br/></pre></td></tr></tbody></table></figure><p></p>\n<p><strong>if-else分支</strong><br/></p><figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/><span class=\"line\">9</span><br/><span class=\"line\">10</span><br/><span class=\"line\">11</span><br/><span class=\"line\">12</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">age = <span class=\"number\">50</span></span><br/><span class=\"line\">sex = <span class=\"string\">&#34;male&#34;</span></span><br/><span class=\"line\"><span class=\"keyword\">if</span> age == <span class=\"number\">40</span> <span class=\"keyword\">and</span> sex == <span class=\"string\">&#34;male&#34;</span> <span class=\"keyword\">then</span></span><br/><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#34;男人四十一枝花&#34;</span>)</span><br/><span class=\"line\"><span class=\"keyword\">elseif</span> age == <span class=\"number\">60</span> <span class=\"keyword\">and</span> sex ~= <span class=\"string\">&#34;female&#34;</span> <span class=\"keyword\">then</span></span><br/><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#34;old man without country!&#34;</span>)</span><br/><span class=\"line\"><span class=\"keyword\">elseif</span> age &lt; <span class=\"number\">20</span> <span class=\"keyword\">then</span></span><br/><span class=\"line\">    <span class=\"built_in\">io</span>.write(<span class=\"string\">&#34;too young too simple&#34;</span>)</span><br/><span class=\"line\"><span class=\"keyword\">else</span></span><br/><span class=\"line\">    <span class=\"keyword\">local</span> age = <span class=\"built_in\">io</span>.read()</span><br/><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#34;your age is &#34;</span>..age)</span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/></pre></td></tr></tbody></table></figure><p></p>\n<p><em>不等于是~=</em><br/><em>字符串的拼接操作符是..</em><br/><em>条件语句中的与或非是：and、or、not</em></p>\n<p><strong>for循环</strong></p>\n<ul>\n<li><p>从1加到100</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">sum = <span class=\"number\">0</span></span><br/><span class=\"line\"><span class=\"keyword\">for</span> i = <span class=\"number\">1</span>, <span class=\"number\">100</span> <span class=\"keyword\">do</span></span><br/><span class=\"line\">    sum = sum + i</span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/></pre></td></tr></tbody></table></figure>\n</li>\n<li><p>从1到100的奇数和</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">sum = <span class=\"number\">0</span></span><br/><span class=\"line\"><span class=\"keyword\">for</span> i = <span class=\"number\">1</span>, <span class=\"number\">100</span>, <span class=\"number\">2</span> <span class=\"keyword\">do</span></span><br/><span class=\"line\">    sum = sum + i</span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/></pre></td></tr></tbody></table></figure>\n</li>\n</ul>\n<p><strong>until循环</strong><br/></p><figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">sum = <span class=\"number\">2</span></span><br/><span class=\"line\"><span class=\"keyword\">repeat</span></span><br/><span class=\"line\">    sum = sum ^ <span class=\"number\">2</span> <span class=\"comment\">-- 幂操作</span></span><br/><span class=\"line\">    <span class=\"built_in\">print</span>(sum)</span><br/><span class=\"line\"><span class=\"keyword\">until</span> sum &gt; <span class=\"number\">1000</span></span><br/></pre></td></tr></tbody></table></figure><p></p>\n<h2 id=\"函数\">函数</h2><p><strong>递归</strong><br/></p><figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fib</span><span class=\"params\">(n)</span></span></span><br/><span class=\"line\">    <span class=\"keyword\">if</span> n &lt; <span class=\"number\">2</span> <span class=\"keyword\">then</span> <span class=\"keyword\">return</span> <span class=\"number\">1</span> <span class=\"keyword\">end</span></span><br/><span class=\"line\">    <span class=\"keyword\">return</span> fib(n-<span class=\"number\">2</span>) + fib(n-<span class=\"number\">1</span>)</span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/></pre></td></tr></tbody></table></figure><p></p>\n<p><strong>闭包</strong><br/></p><figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/><span class=\"line\">9</span><br/><span class=\"line\">10</span><br/><span class=\"line\">11</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">newCounter</span><span class=\"params\">()</span></span></span><br/><span class=\"line\">    <span class=\"keyword\">local</span> i = <span class=\"number\">0</span></span><br/><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span></span><br/><span class=\"line\">        i = i + <span class=\"number\">1</span></span><br/><span class=\"line\">        <span class=\"keyword\">return</span> i</span><br/><span class=\"line\">    <span class=\"keyword\">end</span></span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/><span class=\"line\"></span><br/><span class=\"line\">cl = newCounter()</span><br/><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#34;cl() = &#34;</span>..cl())  <span class=\"comment\">-- cl() = 1</span></span><br/><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#34;cl() = &#34;</span>..cl())  <span class=\"comment\">-- cl() = 2</span></span><br/></pre></td></tr></tbody></table></figure><p></p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/><span class=\"line\">9</span><br/><span class=\"line\">10</span><br/><span class=\"line\">11</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myPower</span><span class=\"params\">(x)</span></span></span><br/><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(y)</span></span></span><br/><span class=\"line\">        <span class=\"keyword\">return</span> y^x</span><br/><span class=\"line\">    <span class=\"keyword\">end</span></span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/><span class=\"line\"></span><br/><span class=\"line\">power2 = myPower(<span class=\"number\">2</span>)</span><br/><span class=\"line\">power3 = myPower(<span class=\"number\">3</span>)</span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#34;power2(4) = &#34;</span>..power2(<span class=\"number\">4</span>))    <span class=\"comment\">-- 4的2次方</span></span><br/><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#34;power3(5) = &#34;</span>..power3(<span class=\"number\">5</span>))    <span class=\"comment\">-- 5的3次方</span></span><br/></pre></td></tr></tbody></table></figure>\n<p><strong>函数的返回值</strong><br/>函数可以返回多个值<br/></p><figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getUserinfo</span><span class=\"params\">()</span></span></span><br/><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#34;xqd&#34;</span>, <span class=\"string\">&#34;25&#34;</span>, <span class=\"string\">&#34;php&#34;</span></span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/><span class=\"line\"></span><br/><span class=\"line\">name, age, profession = getUserinfo()</span><br/></pre></td></tr></tbody></table></figure><p></p>\n<h2 id=\"Table\">Table</h2><p><code>table</code>是一个<code>KEY VALUE</code>的数据结构：<br/><code>zhubenshuli = &#123;name=&#34;xqd&#34;, age=25, handsome=false&#125;</code><br/>遍历<code>table</code>：<br/></p><figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> k, v <span class=\"keyword\">in</span> <span class=\"built_in\">pairs</span>(zhubenshuli) <span class=\"keyword\">do</span></span><br/><span class=\"line\">    <span class=\"built_in\">print</span>(k, v)</span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/></pre></td></tr></tbody></table></figure><p></p>\n<p><code>table</code>的<code>CRUD</code>操作：<br/></p><figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">zhubenshuli.github = <span class=\"string\">&#34;https://github.com/zhubenshuli&#34;</span></span><br/><span class=\"line\">zhubenshuli.name = <span class=\"keyword\">nil</span></span><br/><span class=\"line\">zhubenshuli.handsome = <span class=\"keyword\">true</span></span><br/><span class=\"line\">age = zhubenshuli.age</span><br/></pre></td></tr></tbody></table></figure><p></p>\n<p>也可以这样定义<code>table</code>：<br/><code>t = &#123;[20]=100, [&#39;name&#39;]=&#34;xqd&#34;, [3.14]=&#34;PI&#34;&#125;</code><br/>可以这样访问：<code>t[20]</code>、<code>t[&#34;name&#34;]</code>、<code>t[3.14]</code></p>\n<p>数组：<code>arr = &#123;10, 20, 30, 40, 50&#125;</code><br/>等价于：<code>arr = &#123;[1]=10, [2]=20, [3]=30, [4]=50, [5]=50&#125;</code><br/>也可以定义成不同类型的数组：<code>arr = &#123;&#34;string&#34;, false, 34, function() print(&#34;xqd is me!&#34;) end&#125;</code><br/>数组中的函数可以这样调用：<code>arr[4]()</code><br/><em>数组中的下标是从1开始的</em><br/></p><figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> i=<span class=\"number\">1</span>, #arr <span class=\"keyword\">do</span></span><br/><span class=\"line\">    <span class=\"built_in\">print</span>(arr[i])</span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/></pre></td></tr></tbody></table></figure><p></p>\n<h2 id=\"MetaTable和MetaMethod\">MetaTable和MetaMethod</h2><p><code>MetaTable</code>主要用来做一些类似于C++重载操作符式的功能。<br/>比如，有两个分数：<br/></p><figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">fraction_a = {numeractor=<span class=\"number\">2</span>, denominator=<span class=\"number\">3</span>}</span><br/><span class=\"line\">fraction_b = {numeractor=<span class=\"number\">4</span>, denominator=<span class=\"number\">7</span>}</span><br/></pre></td></tr></tbody></table></figure><p></p>\n<p>要实现两个分数的相加：2/3+4/7，就要动用<code>MetaTable</code>：<br/></p><figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">fraction_op = {}</span><br/><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fraction_op.__add</span><span class=\"params\">(f1, f2)</span></span></span><br/><span class=\"line\">    ret = {}</span><br/><span class=\"line\">    ret.numeractor = f1.numeractor*f2.denominator+f1.denominator*f2.numeractor</span><br/><span class=\"line\">    ret.denominator = f1.denominator*f2.denominator</span><br/><span class=\"line\">    <span class=\"keyword\">return</span> ret</span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/></pre></td></tr></tbody></table></figure><p></p>\n<p>为之前定义的两个<code>table</code>设置<code>MetaTable</code>：<br/></p><figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">setmetatable</span>(fraction_a, fraction_op)</span><br/><span class=\"line\"><span class=\"built_in\">setmetatable</span>(fraction_b, fraction_op)</span><br/></pre></td></tr></tbody></table></figure><p></p>\n<p>最后就可以实现两个<code>table</code>相加了：<br/></p><figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">fraction_c = fraction_a + fraction_b</span><br/></pre></td></tr></tbody></table></figure><p></p>\n<p><code>__add</code>是<code>MetaMethod</code>，这是<code>lua</code>内建约定的，还有其它如下的<code>MetaMethod</code>：</p>\n<table>\n<thead>\n<tr>\n<th>MetaMethod</th>\n<th>对应表达式</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>__add(a,b)</td>\n<td>a+b</td>\n</tr>\n<tr>\n<td>__sub(a,b)</td>\n<td>a-b</td>\n</tr>\n<tr>\n<td>__mul(a,b)</td>\n<td>a*b</td>\n</tr>\n<tr>\n<td>__div(a,b)</td>\n<td>a/b</td>\n</tr>\n<tr>\n<td>__mod(a,b)</td>\n<td>a%b</td>\n</tr>\n<tr>\n<td>__pow(a,b)</td>\n<td>a^b</td>\n</tr>\n<tr>\n<td>__unm(a)</td>\n<td>-a</td>\n</tr>\n<tr>\n<td>__concat(a,b)</td>\n<td>a..b</td>\n</tr>\n<tr>\n<td>__len(a)</td>\n<td>#a</td>\n</tr>\n<tr>\n<td>__eq(a,b)</td>\n<td>a==b</td>\n</tr>\n<tr>\n<td>__lt(a,b)</td>\n<td>a &lt; b</td>\n</tr>\n<tr>\n<td>__le(a,b)</td>\n<td>a&lt;=b</td>\n</tr>\n<tr>\n<td>__index(a,b)</td>\n<td>a.b</td>\n</tr>\n<tr>\n<td>__newindex(a,b,c)</td>\n<td>a.b=c</td>\n</tr>\n<tr>\n<td>__call(a, …)</td>\n<td>a(…)</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"“面向对象”\">“面向对象”</h2><p><code>__index</code>这个重载，主要是重载了<code>find key</code>的操作。<br/>如果我们有两个对象<code>a</code>和<code>b</code>，想让<code>b</code>作为<code>a</code>的<code>prototype</code>只需要：<br/><code>setmetatable(a, &#123;__index = b&#125;)</code><br/>实例：用一个<code>Window_Prototype</code>的模板加上<code>__index</code>的<code>MetaMethod</code>来创建另一个实例：<br/></p><figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">Window_Prototype = {x=<span class=\"number\">0</span>, y=<span class=\"number\">0</span>, width=<span class=\"number\">100</span>, height=<span class=\"number\">100</span>}</span><br/><span class=\"line\">MyWin = {title=<span class=\"string\">&#34;hello&#34;</span>}</span><br/><span class=\"line\"><span class=\"built_in\">setmetatable</span>(MyWin, {__index = Window_Prototype})</span><br/></pre></td></tr></tbody></table></figure><p></p>\n<p>于是<code>MyWin</code>就可以访问<code>x</code>、<code>width</code>等等了。<br/>注：当表要索引一个值如<code>table[key]</code>,<code>lua</code>会先在<code>table</code>本身中查找<code>key</code>的值，如果没有并且这个<code>table</code>存在一个带<code>_index</code>属性的<code>MethTable</code>，则<code>lua</code>会按照<code>__index</code>所定义的函数逻辑去查找。</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/><span class=\"line\">9</span><br/><span class=\"line\">10</span><br/><span class=\"line\">11</span><br/><span class=\"line\">12</span><br/><span class=\"line\">13</span><br/><span class=\"line\">14</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">Person = {}</span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person:new</span><span class=\"params\">(p)</span></span></span><br/><span class=\"line\">    <span class=\"keyword\">local</span> obj = p</span><br/><span class=\"line\">    <span class=\"keyword\">if</span>(obj == <span class=\"keyword\">nil</span>) <span class=\"keyword\">then</span></span><br/><span class=\"line\">        obj = {name=<span class=\"string\">&#34;xqd&#34;</span>, age=<span class=\"number\">25</span>, handsome=<span class=\"keyword\">true</span>}</span><br/><span class=\"line\">    <span class=\"keyword\">end</span></span><br/><span class=\"line\">    self.__index = self</span><br/><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">setmetatable</span>(obj, self)</span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person:toString</span><span class=\"params\">()</span></span></span><br/><span class=\"line\">    <span class=\"keyword\">return</span> self.name..<span class=\"string\">&#34; : &#34;</span>..self.age..<span class=\"string\">&#34; : &#34;</span>..(self.handsome <span class=\"keyword\">and</span> <span class=\"string\">&#34;handsome&#34;</span> <span class=\"keyword\">or</span> <span class=\"string\">&#34;ugly&#34;</span>)</span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/></pre></td></tr></tbody></table></figure>\n<p>从上面我们可以看到一个<code>new</code>方法和<code>toString</code>方法，其中<br/>1.<code>self</code>就是<code>Person</code>，<code>Person:new(p)</code>相当于<code>Person.new(self,p)</code><br/>2.<code>new</code>方法的<code>self.__index=self</code>的意图是怕<code>self</code>被扩展后改写，让其保持原样<br/>3.<code>setmetatable</code>这个函数返回的是第一个参数的值<br/>可以这样调用：<br/></p><figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">me = Person:new()</span><br/><span class=\"line\"><span class=\"built_in\">print</span>(me:toString())</span><br/><span class=\"line\"></span><br/><span class=\"line\">kf = Person:new({name=<span class=\"string\">&#34;King&#39;s fucking&#34;</span>, age=<span class=\"number\">80</span>, handsome=<span class=\"keyword\">false</span>})</span><br/><span class=\"line\"><span class=\"built_in\">print</span>(kf:toString())</span><br/></pre></td></tr></tbody></table></figure><p></p>\n<p>继承如下：<br/></p><figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/><span class=\"line\">9</span><br/><span class=\"line\">10</span><br/><span class=\"line\">11</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">Student = Person:new()</span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Student:new</span><span class=\"params\">()</span></span></span><br/><span class=\"line\">    newObj = {year=<span class=\"number\">2015</span>}</span><br/><span class=\"line\">    self.__index = self</span><br/><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">setmetatable</span>(newObj, self)</span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Student:toString</span><span class=\"params\">()</span></span></span><br/><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#34;Student：&#34;</span>..self.name..<span class=\"string\">&#34;, &#34;</span>..self.year</span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/></pre></td></tr></tbody></table></figure><p></p>\n<h2 id=\"模块\">模块</h2><p>可以直接使用<code>requite(&#34;model_name&#34;)</code>来载入别的<code>lua</code>文件，文件的后缀名是<code>.lua</code>，载入的时候就直接执行那个文件了。<br/>注意：<br/>1.<code>require</code>函数，载入同样的<code>lua</code>文件时，只有第一次的时候去执行，后面相同的都不执行了。<br/>2.如果要让每一次文件载入都执行的话，可以使用<code>dofile(&#34;model_name.lua&#34;)</code>函数<br/>3.载入后在需要的时候执行，可以使用<code>loadfile</code>函数。如：<br/></p><figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">local</span> hello = <span class=\"built_in\">loadfile</span>(<span class=\"string\">&#34;model_name.lua&#34;</span>)</span><br/><span class=\"line\">...</span><br/><span class=\"line\">...</span><br/><span class=\"line\">hello()</span><br/></pre></td></tr></tbody></table></figure><p></p>\n<p>正常用法如下：<br/><code>mymod.lua</code>内容如下：<br/></p><figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/><span class=\"line\">9</span><br/><span class=\"line\">10</span><br/><span class=\"line\">11</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">local</span> xqdModel = {}</span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"keyword\">local</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getname</span><span class=\"params\">()</span></span></span><br/><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#34;xqd&#34;</span></span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">xqdModel.Greeting</span><span class=\"params\">()</span></span></span><br/><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#34;hello, my name is &#34;</span>..getname())</span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"keyword\">return</span> xqdModel</span><br/></pre></td></tr></tbody></table></figure><p></p>\n<p>然后就可以这样使用：<br/></p><figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">local</span> xqd_model = <span class=\"built_in\">require</span>(<span class=\"string\">&#34;mymod&#34;</span>)</span><br/><span class=\"line\">xqd_model.Greeting()</span><br/></pre></td></tr></tbody></table></figure><p></p>","text":" 文章目录 &lt;/div&gt; &lt;p&gt;闲来无趣，稍微看了一会lua…&lt;/p&gt; 运行1.命令行运行lua命令，在lua的shell中执行语句12345zhubenshuli@raspberrypi /var/www/lua_program $ luaL...","link":"","photos":[],"count_time":{"symbolsCount":"5.7k","symbolsTime":"5 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%BF%90%E8%A1%8C\"><span class=\"toc-text\">运行</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%AF%AD%E6%B3%95\"><span class=\"toc-text\">语法</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5\"><span class=\"toc-text\">控制语句</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">函数</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Table\"><span class=\"toc-text\">Table</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#MetaTable%E5%92%8CMetaMethod\"><span class=\"toc-text\">MetaTable和MetaMethod</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E2%80%9C%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E2%80%9D\"><span class=\"toc-text\">“面向对象”</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%A8%A1%E5%9D%97\"><span class=\"toc-text\">模块</span></a></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Lua中的协程","uid":"4d0a91799dda866fbb32a60943831f1f","slug":"zl/2016-01-01-814_Lua中的协程","date":"2024-04-03T03:47:36.059Z","updated":"2024-04-03T03:47:36.059Z","comments":true,"path":"api/articles/zl/2016-01-01-814_Lua中的协程.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"Lua中的协程和其他变量一样，都是第一类值（first-class alue），可以被保存在变量中，可以被作为参数传递，可以被函数返回。 协程有4种状态：挂起（suspended），运行（running），死亡（dead）和正常（normal）。 Lua为协程提供了3个基础接口：...","link":"","photos":[],"count_time":{"symbolsCount":"2.3k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Lua基本类型及Basic Functions","uid":"832209621f9ee266a7ca0e324979ce03","slug":"zl/2016-01-01-810_Lua基本类型及Basic Functions","date":"2024-04-03T03:47:36.057Z","updated":"2024-04-03T03:47:36.057Z","comments":true,"path":"api/articles/zl/2016-01-01-810_Lua基本类型及Basic Functions.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"Lua基本类型及Basic Functions &lt;/div&gt; &lt;div class=&quot;content&quot;&gt; 概述 Lua的基本类型 基本类型 e.g. function testType() print (string.format(&#...","link":"","photos":[],"count_time":{"symbolsCount":"5.2k","symbolsTime":"5 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}