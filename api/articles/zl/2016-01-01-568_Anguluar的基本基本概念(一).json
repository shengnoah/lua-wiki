{"title":"Anguluar的基本基本概念(一)","uid":"0bcef579901b5575dee4343fc86edd46","slug":"zl/2016-01-01-568_Anguluar的基本基本概念(一)","date":"2024-04-03T03:47:35.823Z","updated":"2024-04-03T03:47:35.823Z","comments":true,"path":"api/articles/zl/2016-01-01-568_Anguluar的基本基本概念(一).json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<p>带着问题学习，效果可能更好一些，本文基于 <strong>Angular 1.5.8</strong> 版本.</p>\n<h3 id=\"1-AnguluarJS是什么？\"><a href=\"#1-AnguluarJS是什么？\" class=\"headerlink\" title=\"1.AnguluarJS是什么？\"></a>1.AnguluarJS是什么？</h3><ul>\n<li>AngularJS是一款由Google公司开发维护的前端MVC框架.</li>\n<li>作用：克服了HTML在构建应用上的诸多不足，降低开发成本，提升开发效率。\n<h3 id=\"2-AnguluarJS与jQuery有什么区别？\"><a href=\"#2-AnguluarJS与jQuery有什么区别？\" class=\"headerlink\" title=\"2.AnguluarJS与jQuery有什么区别？\"></a>2.AnguluarJS与jQuery有什么区别？</h3></li>\n<li>jQuery准确地来说只是一个类库（类库指的是一系列函数的集合），以DOM元素做为驱动（核心）.</li>\n<li>AngularJS则一个框架（诸多类库的集合），以数据和逻辑做为驱动（核心），框架对开发的流程和模式做了约束，开发者遵照约束进行开发，更注重的实际的业务逻辑.</li>\n</ul>\n<h3 id=\"3-不得不提一嘴的MVC，MVVM\"><a href=\"#3-不得不提一嘴的MVC，MVVM\" class=\"headerlink\" title=\"3.不得不提一嘴的MVC，MVVM?\"></a>3.不得不提一嘴的MVC，MVVM?</h3><ul>\n<li>3.1 MVC是一种软件架构设计的思想，将软件按照模型、视图、控制器来划分。模型负责封装业务逻辑和数据；视图负责输入和输出，控制显示界面交互；控制器负责协调模型和视图。<ul>\n<li>Model(模型)：模型是应用程序的主体部分，通常用于处理应用程序的业务数据，或者业务逻辑部分. </li>\n<li>View(视图)：视图是应用程序中处理用户界面显示的部分，通常视图是依据模型数据创建的.</li>\n<li>controller(控制器)：应用程序中处理用户交互的部分，通常控制器负责从视图读取数据，控制用户输入，并向模型发送数据。</li>\n</ul>\n</li>\n<li>3.2 MVC的优点：<ul>\n<li>实现了功能模块和显示模块的分离</li>\n<li>可维护性</li>\n<li>可扩展性</li>\n<li>可移植性和组件的可复用性 </li>\n</ul>\n</li>\n<li>3.3 MVVM是什么梗？<ul>\n<li>MV:可以通过模型到视图传递数据</li>\n<li>VM:视图也可以传递数据到模型</li>\n<li>MVVM属于数据的双向绑定<blockquote>\n<p>AngularJS构建应用（App）时是以模块化（Module）的方式组织的，将整个应用划分成若干模块，每个模块都有各自的职责，最终组合成一个整体，采用模块化的组织方式，可以最大程度的实现代码的复用.<br/>OK，讲了一大堆虚头巴脑的理论，都看不下去了，那就废话不多说，直接上代码。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"4-Angular的基本使用？\"><a href=\"#4-Angular的基本使用？\" class=\"headerlink\" title=\"4.Angular的基本使用？\"></a>4.Angular的基本使用？</h4><p>简单粗暴的代码长这样(删减版)：<br/></p><figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!DOCTYPE html&gt;</div><div class=\"line\">&lt;html lang=&#34;en&#34;&gt;</div><div class=\"line\">&lt;head&gt;</div><div class=\"line\">    &lt;meta charset=&#34;UTF-8&#34;&gt;</div><div class=\"line\">    &lt;title&gt;Title&lt;/title&gt;</div><div class=\"line\">    &lt;script src=&#34;angular.js&#34;&gt;&lt;/script&gt;</div><div class=\"line\">    &lt;script&gt;</div><div class=\"line\">    var app =  angular.module(&#39;app&#39;,[]);</div><div class=\"line\">        app.controller(&#39;preController&#39;,[&#39;$scope&#39;,function ($scope) {</div><div class=\"line\">            $scope.box = [&#39;apple&#39;,&#39;banana&#39;,&#39;orange&#39;];</div><div class=\"line\">            $scope.msg = &#34;xmg&#34;;</div><div class=\"line\">            $scope.show = function () {</div><div class=\"line\">                alert(&#39;hello world&#39;);</div><div class=\"line\">            }</div><div class=\"line\">        }]);</div><div class=\"line\">    &lt;/script&gt;</div><div class=\"line\">&lt;/head&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;body ng-app=&#34;app&#34; ng-controller=&#34;preController&#34;&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;p ng-show=&#34;true&#34;&gt;&lt;/p&gt;</div><div class=\"line\">&lt;ul&gt;</div><div class=\"line\">    &lt;li ng-repeat=&#34;goods in box&#34;&gt;&lt;/li&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;/ul&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;/body&gt;</div><div class=\"line\">&lt;/html&gt;</div></pre></td></tr></tbody></table></figure><p></p>\n<p>如果上面简介的代码看得云里雾里，那就可以看看下面这份完整版的，然而文末并没有彩蛋..<br/></p><figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!DOCTYPE html&gt;</div><div class=\"line\">&lt;html lang=&#34;en&#34;&gt;</div><div class=\"line\">&lt;head&gt;</div><div class=\"line\">    &lt;meta charset=&#34;UTF-8&#34;&gt;</div><div class=\"line\">    &lt;title&gt;创建模块(MVC思想)&lt;/title&gt;</div><div class=\"line\">    &lt;!--0.导入angular--&gt;</div><div class=\"line\">    &lt;script src=&#34;angular.js&#34;&gt;&lt;/script&gt;</div><div class=\"line\">    &lt;script&gt;</div><div class=\"line\">        // MVC: Model(数据/模型)  View(视图)  Controller(控制器)</div><div class=\"line\">        // 1.创建模块，angularJS提供了一个全局对象angular，在此全局对象下存在着若干的方法</div><div class=\"line\">        // 其中angular.module()方法用来定义一个模块。</div><div class=\"line\">        // 第一个参数：模块的名称</div><div class=\"line\">        // 第二个参数：依赖模块的名称</div><div class=\"line\">        var app = angular.module(&#39;app&#39;, []);</div><div class=\"line\"></div><div class=\"line\">        // 2.创建控制器</div><div class=\"line\">        // 控制器(Controller)作为连接模型(Model)和视图(View)的桥梁存在，</div><div class=\"line\">        // 所以当我们定义好了控制器之后也就定义好了模型和视图</div><div class=\"line\">        // 参数一：控制器的名称</div><div class=\"line\">        // 参数二：依赖的服务 app.controller(&#39;名称&#39;, [&#39;$scope&#39;, function($scope){}]);</div><div class=\"line\">        app.controller(&#39;perController&#39;, [&#39;$scope&#39;, function ($scope) {</div><div class=\"line\">            $scope.msg = &#39;zxc&#39;;</div><div class=\"line\">            $scope.show = function () {</div><div class=\"line\">                alert(&#39;Hello world&#39;);</div><div class=\"line\">            };</div><div class=\"line\">            $scope.box = [&#39;apple&#39;, &#39;banana&#39;, &#39;orange&#39;];</div><div class=\"line\">        }]);</div><div class=\"line\">    &lt;/script&gt;</div><div class=\"line\">&lt;/head&gt;</div><div class=\"line\">&lt;!--指令：ng-app  定义应用程序的根元素。--&gt;</div><div class=\"line\">&lt;!--3.绑定模块--&gt;</div><div class=\"line\">&lt;body ng-app=&#34;app&#34; ng-controller=&#34;pergController&#34;&gt;</div><div class=\"line\">&lt;!--4.绑定控制器--&gt;</div><div class=\"line\">&lt;!-- 指令：给原生的html添加了一些新的属性。可以达到指定的功能 --&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;!-- 指令：ng-show\t显示或隐藏 HTML 元素 --&gt;</div><div class=\"line\">&lt;p ng-show=&#34;true&#34;&gt;&lt;/p&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;ul&gt;</div><div class=\"line\">    &lt;!--指令：ng-repeat\t遍历元素，定义集合中&#34;每项&#34;数据的模板--&gt;</div><div class=\"line\">    &lt;li ng-repeat=&#34;goods in box&#34;&gt;&lt;/li&gt;</div><div class=\"line\">&lt;/ul&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;/body&gt;</div><div class=\"line\">&lt;/html&gt;</div></pre></td></tr></tbody></table></figure><p></p>\n<p>呃，并不打算放一张运行结果图，自己撸完看结果呗，现在，简单梳理一下这个过程，这整个流程就好比一个人要开一家餐厅：</p>\n<ul>\n<li>第一步，导入Angular框架</li>\n<li>第二步，创建模块，让当前页面支持angular，这就相当于餐厅选址，要在哪里开餐厅.</li>\n<li>第三步，创建一个控制器，这就好比请了一个服务员，并且这个服务员还自带了一个厨房，包括厨师(这个服务员有木有很6).</li>\n<li>第四步，绑定模块，指定模块生效的区域，也就是要开多大的餐厅.</li>\n<li>第五步，绑定控制器，制定运营制度。<br/>最后，祝贺你，你的餐厅开张了，你已然是一位餐厅老板了，是不是发现开个餐厅太容易了，简直分分钟搞定，如果以后这行做不下去了，咱还可以创建个餐厅玩玩对吧。</li>\n</ul>","text":"带着问题学习，效果可能更好一些，本文基于 Angular 1.5.8 版本. 1.AnguluarJS是什么？ AngularJS是一款由Google公司开发维护的前端MVC框架. 作用：克服了HTML在构建应用上的诸多不足，降低开发成本，提升开发效率。 2.AnguluarJS...","link":"","photos":[],"count_time":{"symbolsCount":"3.6k","symbolsTime":"3 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-AnguluarJS%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F\"><span class=\"toc-text\">1.AnguluarJS是什么？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-AnguluarJS%E4%B8%8EjQuery%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB%EF%BC%9F\"><span class=\"toc-text\">2.AnguluarJS与jQuery有什么区别？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E4%B8%8D%E5%BE%97%E4%B8%8D%E6%8F%90%E4%B8%80%E5%98%B4%E7%9A%84MVC%EF%BC%8CMVVM\"><span class=\"toc-text\">3.不得不提一嘴的MVC，MVVM?</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-Angular%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%EF%BC%9F\"><span class=\"toc-text\">4.Angular的基本使用？</span></a></li></ol></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"在openresty中是使用lua脚本实现新老路由平滑升级","uid":"151a961eee10fb762ab491ac88468502","slug":"zl/2016-01-01-567_在openresty中是使用lua脚本实现新老路由平滑升级","date":"2024-04-03T03:47:35.823Z","updated":"2024-04-03T03:47:35.823Z","comments":true,"path":"api/articles/zl/2016-01-01-567_在openresty中是使用lua脚本实现新老路由平滑升级.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"想升级PHP框架phalcon到3.x, 但是发现升级后与老版本基本不兼容, 也就意味着代码基本要重写了。考虑到不可能一下把所有的接口切换到新的框架上去（不能短时间内全部迁移所有的接口，新的框架提供的接口需要测试时间）。想到的方案是， 一方面提供新的接口使用新的框架编写，然后网关...","link":"","photos":[],"count_time":{"symbolsCount":"3.8k","symbolsTime":"3 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Lua标准库阅读总结（官方文档）","uid":"f898ebac0592fd186e2fa96c1cc03552","slug":"zl/2016-01-01-569_Lua标准库阅读总结（官方文档）","date":"2024-04-03T03:47:35.823Z","updated":"2024-04-03T03:47:35.824Z","comments":true,"path":"api/articles/zl/2016-01-01-569_Lua标准库阅读总结（官方文档）.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":" Contents &lt;/div&gt; &lt;p&gt;Lua的标准库直接通过C语言的API进行实现的。有一些函数对于这个语言提供的功能是必不可少的（例如getmetatable和type又元表是lua的一个重要语言特性，还会总结哒）其他的提供了一些输出到外部的功能（例如...","link":"","photos":[],"count_time":{"symbolsCount":"15k","symbolsTime":"13 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}