{"title":"Lua 闭包 环境 包管理","uid":"f1e47e5792823d5eb8c2881f8040e912","slug":"zl/2016-01-01-114_Lua 闭包 环境 包管理","date":"2024-04-03T03:47:33.017Z","updated":"2024-04-03T03:47:33.017Z","comments":true,"path":"api/articles/zl/2016-01-01-114_Lua 闭包 环境 包管理.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<h2 id=\"Variables\"><a href=\"#Variables\" class=\"headerlink\" title=\"Variables\"></a>Variables</h2><ul>\n<li>访问一个不存在的全局变量得到nil</li>\n<li>释放一个全局变量只需将其赋值为nil，效果与未定义该变量一样</li>\n<li>Lua 中的变量全是全局变量，那怕是语句块或是函数里，除非用 local 显式声明为局部变量</li>\n<li>局部变量比全局变量访问更快</li>\n</ul>\n<h2 id=\"Functions\"><a href=\"#Functions\" class=\"headerlink\" title=\"Functions\"></a>Functions</h2><h3 id=\"1-基本特性\"><a href=\"#1-基本特性\" class=\"headerlink\" title=\"1. 基本特性\"></a>1. 基本特性</h3><ol>\n<li>多参数/返回值匹配：多余忽略，缺少用nil补足</li>\n<li>可变参数：arg，table.pack，table.unpack</li>\n<li>命名参数：参数的非顺序填充方式</li>\n<li>正确处理尾调用：Lua能够高效正确处理尾调用，而不会导致栈溢出</li>\n</ol>\n<h3 id=\"2-第一类函数\"><a href=\"#2-第一类函数\" class=\"headerlink\" title=\"2. 第一类函数\"></a>2. 第一类函数</h3><p>函数是第一类值，函数可以像其它值（string, number）样用于赋给变量，作为函数参数或返回值。函数定义实际上是一个赋值语句，将类型为function的变量赋给一个变量。</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>  <span class=\"params\">(x)</span></span> <span class=\"keyword\">return</span> <span class=\"number\">2</span>*x <span class=\"keyword\">end</span></span><br/><span class=\"line\"></span><br/><span class=\"line\">foo.bar = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(x)</span></span> <span class=\"keyword\">return</span> <span class=\"number\">2</span>*x <span class=\"keyword\">end</span></span><br/></pre></td></tr></tbody></table></figure>\n<p>从这个角度来看，自然，与变量一样，Lua有全局函数和局部函数之分。</p>\n<h3 id=\"3-词法闭包\"><a href=\"#3-词法闭包\" class=\"headerlink\" title=\"3. 词法闭包\"></a>3. 词法闭包</h3><p>词法闭包是指当在一个函数内部嵌套定义另一个函数时，内部函数体可以访问到外部函数的局部变量。</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/><span class=\"line\">9</span><br/><span class=\"line\">10</span><br/><span class=\"line\">11</span><br/><span class=\"line\">12</span><br/><span class=\"line\">13</span><br/><span class=\"line\">14</span><br/><span class=\"line\">15</span><br/><span class=\"line\">16</span><br/><span class=\"line\">17</span><br/><span class=\"line\">18</span><br/><span class=\"line\">19</span><br/><span class=\"line\">20</span><br/><span class=\"line\">21</span><br/><span class=\"line\">22</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">newCounter</span><span class=\"params\">()</span></span></span><br/><span class=\"line\">    <span class=\"keyword\">local</span> i = <span class=\"number\">0</span></span><br/><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span>     <span class=\"comment\">-- anonymous function</span></span><br/><span class=\"line\">        i = i + <span class=\"number\">1</span></span><br/><span class=\"line\">        <span class=\"keyword\">return</span> i</span><br/><span class=\"line\">    <span class=\"keyword\">end</span></span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/><span class=\"line\">c1 = newCounter()</span><br/><span class=\"line\"><span class=\"built_in\">print</span>(c1())  <span class=\"comment\">--&gt; 1</span></span><br/><span class=\"line\"><span class=\"built_in\">print</span>(c1())  <span class=\"comment\">--&gt; 2</span></span><br/><span class=\"line\">c2 = newCounter()</span><br/><span class=\"line\"><span class=\"built_in\">print</span>(c2())  <span class=\"comment\">--&gt; 1</span></span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"comment\">-- 打印c1所有的upvalue 输出: i</span></span><br/><span class=\"line\"><span class=\"keyword\">local</span> i=<span class=\"number\">1</span></span><br/><span class=\"line\"><span class=\"keyword\">local</span> up = <span class=\"built_in\">debug</span>.<span class=\"built_in\">getupvalue</span>(c1, i)</span><br/><span class=\"line\"><span class=\"keyword\">while</span>(up ~= <span class=\"literal\">nil</span>) <span class=\"keyword\">do</span></span><br/><span class=\"line\">    <span class=\"built_in\">print</span>(up, <span class=\"string\">&#34;  &#34;</span>)</span><br/><span class=\"line\">    i = i+<span class=\"number\">1</span></span><br/><span class=\"line\">    up = <span class=\"built_in\">debug</span>.<span class=\"built_in\">getupvalue</span>(c1, i)</span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/><span class=\"line\"><span class=\"built_in\">print</span>(c1, c2) <span class=\"comment\">-- function: 0x7f8df1d02100        function: 0x7f8df1d02160</span></span><br/></pre></td></tr></tbody></table></figure>\n<p>这种情况下，我们称i为匿名函数的外部局部变量(external local variable)或upvalue。在这里，newCounter函数返回了一个闭包(closure)。闭包是指一个函数和它的upvalues，闭包机制保证了即使upvalue已经超出了其作用域(newCounter返回)，仍然能正确被闭包函数引用而不会释放(由Lua GC管理)。在上例中，我们说c1和c2是建立在同一个函数上，但作用于同一个局部变量(i)不同实例的两个不同的闭包。</p>\n<p>通过打印的upvalues可以看到，只有被闭包函数引用的外部局部变量，才算作该闭包函数的upvalue，Lua会按照闭包函数引用的顺序为upvalue编号，该编号与upvalue定义顺序无关。</p>\n<p>最后一点是，闭包函数都是动态生成的，这和<a href=\"http://wudaijun.com/2016/09/go-basic/\">Go中的闭包</a>有所不同，Go的闭包函数是在编译时生成的，不同的闭包可以共享闭包函数(同一个函数地址)。Lua的闭包函数动态生成会一定程度地影响运行效率和内存占用。</p>\n<p>Lua闭包除了用于高级函数，回调函数，迭代器等上下文环境中以外，在完全不同的上下文环境，可用于重定义或预定义函数，通过这种方法，可以为代码创建一个安全的执行环境(也叫沙箱，sandbox)。</p>\n<p>Lua还提供了对C闭包的支持，每当你在Lua中创建一个新的C函数，你可以将这个函数与任意多个upvalues联系起来，每一个upvalue 可以持有一个单独的Lua值。当函数被调用的时候，可以通过假索引(<code>lua_upvalueindex</code>)自由的访问任何一个upvalues。</p>\n<figure class=\"highlight c\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/><span class=\"line\">9</span><br/><span class=\"line\">10</span><br/><span class=\"line\">11</span><br/><span class=\"line\">12</span><br/><span class=\"line\">13</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">counter</span> <span class=\"params\">(lua_State *L)</span> </span>{</span><br/><span class=\"line\">    <span class=\"keyword\">double</span> val = lua_tonumber(L, lua_upvalueindex(<span class=\"number\">1</span>));</span><br/><span class=\"line\">    lua_pushnumber(L, ++val);   <span class=\"comment\">/* new value */</span></span><br/><span class=\"line\">    lua_pushvalue(L, <span class=\"number\">-1</span>);       <span class=\"comment\">/* duplicate it */</span></span><br/><span class=\"line\">    lua_replace(L, lua_upvalueindex(<span class=\"number\">1</span>));  <span class=\"comment\">/* update upvalue */</span></span><br/><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;  <span class=\"comment\">/* return new value */</span></span><br/><span class=\"line\">}</span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">newCounter</span> <span class=\"params\">(lua_State *L)</span> </span>{</span><br/><span class=\"line\">    lua_pushnumber(L, <span class=\"number\">0</span>);</span><br/><span class=\"line\">    lua_pushcclosure(L, &amp;counter, <span class=\"number\">1</span>);</span><br/><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br/><span class=\"line\">}</span><br/></pre></td></tr></tbody></table></figure>\n<p>C闭包与Lua闭包在概念上很相似，但有两点不同：</p>\n<ol>\n<li>C函数的upvalues是显示push到栈中的，而Lua则可通过闭包函数引用确定哪些是upvalues</li>\n<li>C闭包不能共享upvalues，每个闭包在栈中都有独立的变量集，但你可以通过将upvalues指向同一个table来实现共享</li>\n</ol>\n<h2 id=\"Chunk\"><a href=\"#Chunk\" class=\"headerlink\" title=\"Chunk\"></a>Chunk</h2><p>Chunk是一系列语句，Lua执行的每一块语句，比如一个文件或者交互模式下的每一行都是一个Chunk。</p>\n<p>当我们执行loadfile(“test.lua”)时，便将test.lua的内容编译后的Chunk作为一个函数返回，如果出现编译错误，则返回nil和错误信息。而dofile相当于:</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dofile</span> <span class=\"params\">(filename)</span></span></span><br/><span class=\"line\">    <span class=\"keyword\">local</span> f = <span class=\"built_in\">assert</span>(<span class=\"built_in\">loadfile</span>(filename))</span><br/><span class=\"line\">    <span class=\"keyword\">return</span> f()</span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/></pre></td></tr></tbody></table></figure>\n<p>loadstring和dostring的关系类似，只是接收字符串而不是文件名为参数。</p>\n<p>再看require，require和dofile完成同样的功能，但主要有几点不同：</p>\n<ol>\n<li>require会搜索Lua环境目录来加载文件</li>\n<li>require会判断文件是否已经加载而避免重复加载统一文件</li>\n<li>require可以用于加载C .so库，功能类似loadlib，参考<a href=\"http://wudaijun.com/2014/12/lua-C/\">这里</a></li>\n</ol>\n<p>一个lua模块编译后的Chunk被作为匿名函数被执行，那么定义于模块中函数对模块局部变量的引用就形成了闭包，所以说Lua中的闭包真是无处不在。</p>\n<h2 id=\"Enviroment\"><a href=\"#Enviroment\" class=\"headerlink\" title=\"Enviroment\"></a>Enviroment</h2><p>Lua中的环境用table来表示，这简化了环境处理也带来了不少灵活性。</p>\n<p>在Lua5.1及之前，Lua将环境本身存储在一个全局变量_G中，其中包含了全局变量，内置函数，内置模块等。我们在使用任何符号x时，如果在当前函数的局部变量和upvalues无法找到符号定义(PS: Lua查找变量定义的规则为：局部变量 -&gt; 外部局部变量(upvalue) -&gt; 全局变量)，则会返回_G.x的值。由于_G是一个table，因此我们可以用它实现一些有意思的功能：</p>\n<ol>\n<li>通过动态名字访问全局变量： <code>_G[varname]</code></li>\n<li>通过_G的metatable改变对未定义全局变量的读(<code>__index</code>)和写(<code>__newindex</code>)行为</li>\n<li>通过setfenv改变指定函数的_G环境，制造函数执行的沙盒环境</li>\n</ol>\n<p>现在再回头来看闭包，实际上，Lua闭包除了函数和upvalues，还包括函数环境，这三者组成了一个完整的执行沙盒。</p>\n<p>在Lua5.2及之后，Lua取消了setfenv函数，用_ENV方案替代了_G方案：</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/><span class=\"line\">9</span><br/><span class=\"line\">10</span><br/><span class=\"line\">11</span><br/><span class=\"line\">12</span><br/><span class=\"line\">13</span><br/><span class=\"line\">14</span><br/><span class=\"line\">15</span><br/><span class=\"line\">16</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- before Lua 5.1</span></span><br/><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span><span class=\"params\">()</span></span></span><br/><span class=\"line\">  <span class=\"built_in\">setfenv</span>(<span class=\"number\">1</span>, {})</span><br/><span class=\"line\">  <span class=\"comment\">-- code here</span></span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"comment\">-- after Lua 5.2</span></span><br/><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span><span class=\"params\">()</span></span></span><br/><span class=\"line\">  <span class=\"keyword\">local</span> <span class=\"built_in\">_ENV</span> = {}</span><br/><span class=\"line\">  <span class=\"comment\">-- code here</span></span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/><span class=\"line\"><span class=\"keyword\">or</span></span><br/><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span><span class=\"params\">()</span></span></span><br/><span class=\"line\">    <span class=\"keyword\">local</span> <span class=\"built_in\">_ENV</span> = {}</span><br/><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span> ... <span class=\"keyword\">end</span></span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/></pre></td></tr></tbody></table></figure>\n<p>_ENV有三个特性：</p>\n<ol>\n<li>对全局变量x的引用，将转换为_ENV.x</li>\n<li>每个编译后的Chunk，都有一个_ENV upvalue(哪怕并未使用)，作为Chunk环境，并作用于其内定义的函数</li>\n<li>在初始化时，_ENV=_G</li>\n</ol>\n<p>除了以上三点外，_ENV和普通变量并无区别。因此我们可以直接通过<code>local _ENV = &#123;&#125;</code>来覆盖接下来的代码的环境。将环境(_ENV)作为一个普通的upvalue来处理，这样做的好处是简化了闭包的概念，闭包等于函数加upvalues(没有了全局变量_G)，为闭包优化(如合并相同upvalues的闭包)提供更好的支持，同时也减少了<code>setfenv(f, env)</code>带来的不确定性和不安全性(函数的_ENV upvalue在闭包返回时就已经确定了)。</p>\n<p>有_ENV还是一个table，因此对全局变量的访问控制等trick，仍然很容易实现。Lua目前仍然保留_G，但理解它们的别是比较重要的：</p>\n<p>我们都知道Lua有一个全局注册表(Registry)，其中包含整个Lua虚拟机的信息，在Registry的<code>LUA_RIDX_GLOBALS</code>索引中，保存了Globals(也就是_G)，在创建Globals时，会生成<code>_G._G=_G</code>的自引用。在引入_ENV后，初始时，<code>_ENV=_G</code>，一旦编译器将_ENV放入Chunk的upvalue后，_ENV将作为普通upvalue被看待，因此我们可以对其重新赋值：</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/><span class=\"line\">9</span><br/><span class=\"line\">10</span><br/><span class=\"line\">11</span><br/><span class=\"line\">12</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">i = <span class=\"number\">1</span> <span class=\"comment\">-- 此时 _ENV.i == _G.i == 1</span></span><br/><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span><span class=\"params\">()</span></span></span><br/><span class=\"line\">    <span class=\"keyword\">local</span> <span class=\"built_in\">_ENV</span>={i=<span class=\"number\">2</span>, <span class=\"built_in\">print</span>=<span class=\"built_in\">print</span>, <span class=\"built_in\">_G</span>=<span class=\"built_in\">_G</span>}</span><br/><span class=\"line\">    <span class=\"built_in\">print</span>(i, <span class=\"built_in\">_ENV</span>.i, <span class=\"built_in\">_G</span>.i)</span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">g</span><span class=\"params\">()</span></span></span><br/><span class=\"line\">    <span class=\"built_in\">print</span>(i, <span class=\"built_in\">_ENV</span>.i, <span class=\"built_in\">_G</span>.i)</span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/><span class=\"line\"></span><br/><span class=\"line\">f() <span class=\"comment\">-- 2 2 1</span></span><br/><span class=\"line\">g() <span class=\"comment\">-- 1 1 1</span></span><br/></pre></td></tr></tbody></table></figure>\n<p>因此，_ENV除了在创建时和_G都指向Registry[LUA_RIDX_GLOBALS]之外，和_G并没有直接联系(<code>_G=&#123;&#125;</code>不会影响函数环境，<code>_G.x=1</code>仍然会影响注册表中的Globals)，Lua5.2及之后的环境都由_ENV指定，_G出于历史原因保留，但实际上Lua并不在内部再使用：</p>\n<blockquote>\n<p>Lua keeps a distinguished environment called the global environment. This value is kept at a special index in the C registry (see §4.5). In Lua, the global variable _G is initialized with this same value. (_G is never used internally.)</p>\n</blockquote>\n<ul>\n<li>参考<a href=\"http://lua-users.org/lists/lua-l/2014-08/msg00345.html\" target=\"_blank\" rel=\"noopener noreferrer\">_ENV vs _G</a>，<a href=\"http://stackoverflow.com/questions/14290527/recreating-setfenv-in-lua-5-2\" target=\"_blank\" rel=\"noopener noreferrer\">setfenv in Lua5.2</a></li>\n</ul>\n<h2 id=\"Packages\"><a href=\"#Packages\" class=\"headerlink\" title=\"Packages\"></a>Packages</h2><p>在Lua中，有闭包，灵活的table和环境管理，想要实现包管理有非常多的方法：</p>\n<h3 id=\"1-基本方法\"><a href=\"#1-基本方法\" class=\"headerlink\" title=\"1. 基本方法\"></a>1. 基本方法</h3><p>最简单的方法就是直接使用table和第一类函数特性：</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">complex = {}</span><br/><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">complex.new</span><span class=\"params\">(r,i)</span></span> ... <span class=\"keyword\">end</span></span><br/><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">complex.add</span><span class=\"params\">(c1,c2)</span></span> ... <span class=\"keyword\">end</span></span><br/><span class=\"line\">...</span><br/><span class=\"line\"><span class=\"keyword\">return</span> complex</span><br/></pre></td></tr></tbody></table></figure>\n<p>执行这个Chunk后，便可以通过<code>complex.xxx()</code>使用complex中定义的API了。这种方案主要的缺点是包内包外的调用都必须加上前缀，并且不能很好地隐藏私有成员。</p>\n<h3 id=\"2-局部函数\"><a href=\"#2-局部函数\" class=\"headerlink\" title=\"2. 局部函数\"></a>2. 局部函数</h3><p>通过局部函数再导出的方式，我们可以解决包内调用前缀和隐藏私有成员(不导出即可)的问题。<br/></p><figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">local</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">new</span><span class=\"params\">(r,i)</span></span> ... <span class=\"keyword\">end</span></span><br/><span class=\"line\"><span class=\"keyword\">local</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span><span class=\"params\">(c1,c2)</span></span> ... <span class=\"keyword\">end</span></span><br/><span class=\"line\">...</span><br/><span class=\"line\">complex = {new = new, add = add}</span><br/><span class=\"line\"><span class=\"keyword\">return</span> complex</span><br/></pre></td></tr></tbody></table></figure><p></p>\n<p>但这样容易忘了local，造成全局命名空间污染。</p>\n<h3 id=\"3-独立环境\"><a href=\"#3-独立环境\" class=\"headerlink\" title=\"3. 独立环境\"></a>3. 独立环境</h3><figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">complex = {}</span><br/><span class=\"line\"><span class=\"comment\">-- before Lua5.1: setfenv(1, complex)</span></span><br/><span class=\"line\"><span class=\"keyword\">local</span> <span class=\"built_in\">_ENV</span> = complex</span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">new</span><span class=\"params\">(r,  i)</span></span> ... <span class=\"keyword\">end</span></span><br/><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">new</span><span class=\"params\">(c1, c2)</span></span> ... <span class=\"keyword\">end</span></span><br/><span class=\"line\"><span class=\"keyword\">return</span> complex</span><br/></pre></td></tr></tbody></table></figure>\n<p>现在，包内所有全局符号new, add都会被转换为complex.new, complex.add，并且我们为包创建了一个独立沙盒环境，如果要在包内访问全局符号，也有多种方法:</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 方案1: 保存老的全局环境 之后访问全局符号需要加上 _G.前缀</span></span><br/><span class=\"line\"><span class=\"keyword\">local</span> <span class=\"built_in\">_G</span> = <span class=\"built_in\">_G</span></span><br/><span class=\"line\"><span class=\"comment\">-- 方案2: 通过metatable 效率低一些，并且外部可通过complex.print访问_G.print</span></span><br/><span class=\"line\"><span class=\"built_in\">setmetatable</span>(complex, {<span class=\"built_in\">__index</span> = <span class=\"built_in\">_G</span>})</span><br/><span class=\"line\"><span class=\"comment\">-- 方案3: 只导出要使用的函数 这种方法隔离型更好，并且更快</span></span><br/><span class=\"line\"><span class=\"keyword\">local</span> <span class=\"built_in\">sqrt</span> = <span class=\"built_in\">math</span>.<span class=\"built_in\">sqrt</span></span><br/><span class=\"line\"><span class=\"keyword\">local</span> <span class=\"built_in\">print</span> = <span class=\"built_in\">print</span></span><br/></pre></td></tr></tbody></table></figure>","text":"Variables 访问一个不存在的全局变量得到nil 释放一个全局变量只需将其赋值为nil，效果与未定义该变量一样 Lua 中的变量全是全局变量，那怕是语句块或是函数里，除非用 local 显式声明为局部变量 局部变量比全局变量访问更快 Functions1. 基本特性 多参数...","link":"","photos":[],"count_time":{"symbolsCount":"5.5k","symbolsTime":"5 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Variables\"><span class=\"toc-text\">Variables</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Functions\"><span class=\"toc-text\">Functions</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E5%9F%BA%E6%9C%AC%E7%89%B9%E6%80%A7\"><span class=\"toc-text\">1. 基本特性</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E7%AC%AC%E4%B8%80%E7%B1%BB%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">2. 第一类函数</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E8%AF%8D%E6%B3%95%E9%97%AD%E5%8C%85\"><span class=\"toc-text\">3. 词法闭包</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Chunk\"><span class=\"toc-text\">Chunk</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Enviroment\"><span class=\"toc-text\">Enviroment</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Packages\"><span class=\"toc-text\">Packages</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E5%9F%BA%E6%9C%AC%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">1. 基本方法</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E5%B1%80%E9%83%A8%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">2. 局部函数</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E7%8B%AC%E7%AB%8B%E7%8E%AF%E5%A2%83\"><span class=\"toc-text\">3. 独立环境</span></a></li></ol></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"evaluate flux in real work and proposal for next step","uid":"949f0372caa038b30be5cc75c67bea29","slug":"zl/2016-01-01-1155_evaluate flux in real work and proposal for next s","date":"2024-04-03T03:47:33.018Z","updated":"2024-04-03T03:47:33.019Z","comments":true,"path":"api/articles/zl/2016-01-01-1155_evaluate flux in real work and proposal for next s.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"I used Flux in recent work and after some evaluation, we decide to use it for future development. 1. Intro1.1 React and FluxReact is a libra...","link":"","photos":[],"count_time":{"symbolsCount":"9k","symbolsTime":"8 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"luarocks quickstart","uid":"dfc3caea98525d39dcdcda6d20d95c55","slug":"zl/2016-01-01-1150_luarocks quickstart","date":"2024-04-03T03:47:33.017Z","updated":"2024-04-03T03:47:33.017Z","comments":true,"path":"api/articles/zl/2016-01-01-1150_luarocks quickstart.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":" &lt;p&gt;Here is the &lt;a href=&quot;https://luarocks.org/&quot; target=&quot;_blank&quot; rel=&quot;external noopener noreferrer&quot;&gt...","link":"","photos":[],"count_time":{"symbolsCount":"3.5k","symbolsTime":"3 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}