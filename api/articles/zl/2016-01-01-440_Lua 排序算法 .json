{"title":"Lua 排序算法","uid":"18c65ae79c1521b9ec150d64b8237a42","slug":"zl/2016-01-01-440_Lua 排序算法 ","date":"2024-04-03T03:47:35.726Z","updated":"2024-04-03T03:47:35.726Z","comments":true,"path":"api/articles/zl/2016-01-01-440_Lua 排序算法 .json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<p>快速排序使用分治法（Divide and conquer）策略来把一个序列（list）分为两个子序列（sub-lists）。</p>\n<p>分治法的基本思想是：将原问题分解为若干个规模更小但结构与原问题相似的子问题。递归地解这些子问题，然后将这些子问题的解组合为原问题的解。</p>\n<h5 id=\"算法步骤\">算法步骤</h5>\n<ol>\n  <li>从数列中挑出一个元素，称为 “基准”（pivot）</li>\n  <li>重新排序数列，所有元素比基准值小的摆放在基准前面，所有元素比基准值大的摆在基准的后面（相同的数可以到任一边）。在这个分区退出之后，该基准就处于数列的中间位置。这个称为分区（partition）操作</li>\n  <li>对 “基准” 左边和右边的两个子集，不断重复第一步和第二步，直到所有子集只剩下一个元素为止。</li>\n</ol>\n<h5 id=\"动画演示\">动画演示</h5>\n<p><img src=\"https://qmsheng.github.io//img/in-post/sort/Quicksort-example.gif\" alt=\"Alt text\"/></p>\n<h5 id=\"lua-实现\">Lua 实现</h5>\n<div class=\"language-lua highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">local</span> <span class=\"k\">function</span> <span class=\"nf\">partition</span><span class=\"p\">(</span><span class=\"n\">list</span><span class=\"p\">,</span> <span class=\"n\">low</span><span class=\"p\">,</span> <span class=\"n\">high</span><span class=\"p\">)</span>\n    <span class=\"kd\">local</span> <span class=\"n\">low</span> <span class=\"o\">=</span> <span class=\"n\">low</span>\n    <span class=\"kd\">local</span> <span class=\"n\">high</span> <span class=\"o\">=</span> <span class=\"n\">high</span>\n    <span class=\"kd\">local</span> <span class=\"n\">pivotKey</span> <span class=\"o\">=</span> <span class=\"n\">list</span><span class=\"p\">[</span><span class=\"n\">low</span><span class=\"p\">]</span> <span class=\"c1\">-- 定义一个中介值</span>\n<pre><code>&lt;span class=&quot;c1&quot;&gt;-- 下面将中介值移动到列表的“中间”&lt;/span&gt;\n&lt;span class=&quot;c1&quot;&gt;-- 当左索引与右索引相邻时停止循环&lt;/span&gt;\n&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;low&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;high&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;\n    &lt;span class=&quot;c1&quot;&gt;-- 假如当前右值大于等于中介值则右索引左移&lt;/span&gt;\n    &lt;span class=&quot;c1&quot;&gt;-- 否则交换中介值和右值位置&lt;/span&gt;\n    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;low&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;high&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;high&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pivotKey&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;\n        &lt;span class=&quot;n&quot;&gt;high&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;high&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;\n    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;\n    &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;low&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;high&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;high&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;low&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;\n\n    &lt;span class=&quot;c1&quot;&gt;-- 假如当前左值小于等于中介值则左索引右移&lt;/span&gt;\n    &lt;span class=&quot;c1&quot;&gt;-- 否则交换中介值和左值位置&lt;/span&gt;\n    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;low&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;high&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;low&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pivotKey&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;\n        &lt;span class=&quot;n&quot;&gt;low&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;low&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;\n    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;\n    &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;low&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;high&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;high&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;low&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;\n&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;\n&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;low&lt;/span&gt;\n</code></pre>\n<p><span class=\"k\">end</span></p>\n<p><span class=\"kd\">local</span> <span class=\"k\">function</span> <span class=\"nf\">quickSort</span><span class=\"p\">(</span><span class=\"n\">list</span><span class=\"p\">,</span> <span class=\"n\">low</span><span class=\"p\">,</span> <span class=\"n\">high</span><span class=\"p\">)</span><br />\n<span class=\"k\">if</span> <span class=\"n\">low</span> <span class=\"o\">&lt;</span> <span class=\"n\">high</span> <span class=\"k\">then</span><br />\n<span class=\"c1\">– 返回列表中中介值所在的位置，该位置左边的值都小于等于中介值，右边的值都大于等于中介值</span><br />\n<span class=\"kd\">local</span> <span class=\"n\">pivotKeyIndex</span> <span class=\"o\">=</span> <span class=\"n\">partition</span><span class=\"p\">(</span><span class=\"n\">list</span><span class=\"p\">,</span> <span class=\"n\">low</span><span class=\"p\">,</span> <span class=\"n\">high</span><span class=\"p\">)</span><br />\n<span class=\"c1\">– 分别将中介值左右两边的列表递归快排</span><br />\n<span class=\"n\">quickSort</span><span class=\"p\">(</span><span class=\"n\">list</span><span class=\"p\">,</span> <span class=\"n\">low</span><span class=\"p\">,</span> <span class=\"n\">pivotKeyIndex</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">)</span><br />\n<span class=\"n\">quickSort</span><span class=\"p\">(</span><span class=\"n\">list</span><span class=\"p\">,</span> <span class=\"n\">pivotKeyIndex</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">high</span><span class=\"p\">)</span><br />\n<span class=\"k\">end</span><br />\n<span class=\"k\">end</span></p>\n<p><span class=\"kd\">local</span> <span class=\"n\">list</span> <span class=\"o\">=</span> <span class=\"p\">{</span><br />\n<span class=\"o\">-</span><span class=\"mi\">81</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">93</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">36</span><span class=\"p\">.</span><span class=\"mi\">85</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">53</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">31</span><span class=\"p\">,</span> <span class=\"mi\">79</span><span class=\"p\">,</span> <span class=\"mi\">45</span><span class=\"p\">.</span><span class=\"mi\">94</span><span class=\"p\">,</span> <span class=\"mi\">36</span><span class=\"p\">,</span> <span class=\"mi\">94</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">95</span><span class=\"p\">.</span><span class=\"mi\">03</span><span class=\"p\">,</span> <span class=\"mi\">11</span><span class=\"p\">,</span> <span class=\"mi\">56</span><span class=\"p\">,</span> <span class=\"mi\">23</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">39</span><span class=\"p\">,</span><br />\n<span class=\"mi\">14</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">20</span><span class=\"p\">.</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">21</span><span class=\"p\">,</span> <span class=\"mi\">91</span><span class=\"p\">,</span> <span class=\"mi\">31</span><span class=\"p\">,</span> <span class=\"mi\">91</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">23</span><span class=\"p\">,</span> <span class=\"mi\">36</span><span class=\"p\">.</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">44</span><span class=\"p\">,</span> <span class=\"mi\">82</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"mi\">51</span><span class=\"p\">,</span> <span class=\"mi\">96</span><span class=\"p\">,</span> <span class=\"mi\">64</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">41</span><br />\n<span class=\"p\">}</span><br />\n<span class=\"n\">quickSort</span><span class=\"p\">(</span><span class=\"n\">list</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"o\">#</span><span class=\"n\">list</span><span class=\"p\">)</span><br />\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"nb\">table.concat</span><span class=\"p\">(</span><span class=\"n\">list</span><span class=\"p\">,</span> <span class=\"s2\">&quot;, &quot;</span><span class=\"p\">))</span><br />\n</code></pre></div></div></p>\n<p><strong>值得注意的是 Lua 自带的<code class=\"highlighter-rouge\">table.sort</code>就是使用的快排，性能肯定比这个纯 Lua 的版本要好</strong></p>\n<pre><code>            &lt;hr style=&quot;visibility: hidden;&quot;/&gt;\n</code></pre>\n","text":"快速排序使用分治法（Divide and conquer）策略来把一个序列（list）分为两个子序列（sub-lists）。 分治法的基本思想是：将原问题分解为若干个规模更小但结构与原问题相似的子问题。递归地解这些子问题，然后将这些子问题的解组合为原问题的解。 算法步骤 从数列中...","link":"","photos":[],"count_time":{"symbolsCount":"5.3k","symbolsTime":"5 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E7%AE%97%E6%B3%95%E6%AD%A5%E9%AA%A4\"><span class=\"toc-text\">算法步骤</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%8A%A8%E7%94%BB%E6%BC%94%E7%A4%BA\"><span class=\"toc-text\">动画演示</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#lua-%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">Lua 实现</span></a></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Evaluation Indicators","uid":"af49e7e1d9026cd0fabd98674e33c50c","slug":"zl/2016-01-01-445_Evaluation Indicators","date":"2024-04-03T03:47:35.727Z","updated":"2024-04-03T03:47:35.728Z","comments":true,"path":"api/articles/zl/2016-01-01-445_Evaluation Indicators.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"假设测试集中有类别为A、B、C的三种class。现在要对class A 的recall、precision和AP进行评估。 $quad$ class A class not A Test says “A” True positive False Positive Test say...","link":"","photos":[],"count_time":{"symbolsCount":"4.1k","symbolsTime":"4 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Lua作图教程之设计模式","uid":"f5fa6c4f2499c0d40f721be59caa4a29","slug":"zl/2016-01-01-441_Lua作图教程之设计模式","date":"2024-04-03T03:47:35.726Z","updated":"2024-04-03T03:47:35.726Z","comments":true,"path":"api/articles/zl/2016-01-01-441_Lua作图教程之设计模式.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"前言前段时间学校游戏开发课大作业，做了一个Roguelike的恐怖游戏。搜集整理了一些迷宫生成的算法。 当初也受了indienova上一些文章的启发。现在在此把学到的一些东西理一理分享出来。 第一次写这种东西，感觉有点啰嗦，还请大家不要介意，也可以直接看项目地址 代码写在Unit...","link":"","photos":[],"count_time":{"symbolsCount":"2.6k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}