{"title":"Lua程序设计（6）","uid":"694c342588e9704d5c0d93deb472fc37","slug":"zl/2016-01-01-82_Lua程序设计（6）","date":"2024-04-03T03:47:36.075Z","updated":"2024-04-03T03:47:36.076Z","comments":true,"path":"api/articles/zl/2016-01-01-82_Lua程序设计（6）.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<p>Lua中的数据结构：数组、链表、队列等</p>\n<h3 id=\"数组：\"><a href=\"#数组：\" class=\"headerlink\" title=\"数组：\"></a>数组：</h3><p>在Lua语言中使用整数来索引表就可以实现数组，因此数组的大小不用非得是固定的，而是可以按需增长的。</p>\n<p>在Lua语言中一般以1作为数组的起始索引。</p>\n<h3 id=\"矩阵及多维数组：\"><a href=\"#矩阵及多维数组：\" class=\"headerlink\" title=\"矩阵及多维数组：\"></a>矩阵及多维数组：</h3><h4 id=\"使用一个不规则数组：\"><a href=\"#使用一个不规则数组：\" class=\"headerlink\" title=\"使用一个不规则数组：\"></a>使用一个不规则数组：</h4><p>即数组的数组，一个所有元素均是另一个表的表。</p>\n<p>这种矩阵在创建时必须显式的创建每一行，一方面更加具体，另一方面增加了更多的灵活性。</p>\n<h4 id=\"将两个索引合并为一个：\"><a href=\"#将两个索引合并为一个：\" class=\"headerlink\" title=\"将两个索引合并为一个：\"></a>将两个索引合并为一个：</h4><p>我们通过将第一个索引乘以一个合适的常量再加上第二个索引来实现这种效果，在这种方式下，我们可以使用以下的代码来创建一个全0元素的N*M矩阵：</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">local</span> mt = {}</span><br/><span class=\"line\"><span class=\"keyword\">for</span> i = <span class=\"number\">1</span>,N <span class=\"keyword\">do</span></span><br/><span class=\"line\">\t<span class=\"keyword\">local</span> aux = (i - <span class=\"number\">1</span>) * M</span><br/><span class=\"line\">\t<span class=\"keyword\">for</span> j = <span class=\"number\">1</span>,M <span class=\"keyword\">do</span></span><br/><span class=\"line\">\t\tmt[aux + j] = <span class=\"number\">0</span></span><br/><span class=\"line\">\t<span class=\"keyword\">end</span></span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/></pre></td></tr></tbody></table></figure>\n<h3 id=\"链表：\"><a href=\"#链表：\" class=\"headerlink\" title=\"链表：\"></a>链表：</h3><p>我们可以把每个节点用一个表来表示，链接则为一个包含指向其他表的引用的简单表字段：</p>\n<p>根结点：<code>list = nil</code></p>\n<p>在表头插入一个值为v的元素：</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">list = {<span class=\"built_in\">next</span> = list,value = v}</span><br/></pre></td></tr></tbody></table></figure>\n<p>遍历链表：</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">local</span> l = list</span><br/><span class=\"line\"><span class=\"keyword\">while</span> l <span class=\"keyword\">do</span></span><br/><span class=\"line\">\tvisit l.value</span><br/><span class=\"line\">\tl = l.<span class=\"built_in\">next</span></span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/></pre></td></tr></tbody></table></figure>\n<h3 id=\"队列及双端队列：\"><a href=\"#队列及双端队列：\" class=\"headerlink\" title=\"队列及双端队列：\"></a>队列及双端队列：</h3><p>一种简单的方法是使用table标准库中的函数insert和remove，不过这种移动对于较大的结构来说开销很大。</p>\n<p>一种更高效的实现是使用两个索引，一个指向第一个元素，另一个指向最后一个元素，这样就可以以O(1)时间复杂度同时在首尾两端插入或删除元素了。</p>","text":"Lua中的数据结构：数组、链表、队列等 数组：在Lua语言中使用整数来索引表就可以实现数组，因此数组的大小不用非得是固定的，而是可以按需增长的。 在Lua语言中一般以1作为数组的起始索引。 矩阵及多维数组：使用一个不规则数组：即数组的数组，一个所有元素均是另一个表的表。 这种矩阵...","link":"","photos":[],"count_time":{"symbolsCount":661,"symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%95%B0%E7%BB%84%EF%BC%9A\"><span class=\"toc-text\">数组：</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%9F%A9%E9%98%B5%E5%8F%8A%E5%A4%9A%E7%BB%B4%E6%95%B0%E7%BB%84%EF%BC%9A\"><span class=\"toc-text\">矩阵及多维数组：</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8%E4%B8%80%E4%B8%AA%E4%B8%8D%E8%A7%84%E5%88%99%E6%95%B0%E7%BB%84%EF%BC%9A\"><span class=\"toc-text\">使用一个不规则数组：</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%B0%86%E4%B8%A4%E4%B8%AA%E7%B4%A2%E5%BC%95%E5%90%88%E5%B9%B6%E4%B8%BA%E4%B8%80%E4%B8%AA%EF%BC%9A\"><span class=\"toc-text\">将两个索引合并为一个：</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%93%BE%E8%A1%A8%EF%BC%9A\"><span class=\"toc-text\">链表：</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%98%9F%E5%88%97%E5%8F%8A%E5%8F%8C%E7%AB%AF%E9%98%9F%E5%88%97%EF%BC%9A\"><span class=\"toc-text\">队列及双端队列：</span></a></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"luasocket getaddrinfo nil 问题","uid":"f597dc45b4c99d9cbe30780591e468ce","slug":"zl/2016-01-01-831_luasocket getaddrinfo nil 问题 ","date":"2024-04-03T03:47:36.076Z","updated":"2024-04-03T03:47:36.082Z","comments":true,"path":"api/articles/zl/2016-01-01-831_luasocket getaddrinfo nil 问题 .json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"使用 luarocks 安装 luasocket，在调用 bind 时，报： socket.lua:29: attempt to call field ‘getaddrinfo’ (a nil value) 继续执行以下 lua 代码片段： Lua 5.1.4 Copyright...","link":"","photos":[],"count_time":{"symbolsCount":"2.2k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"lua","uid":"df60e476b394b1dd4755ec96c53302ff","slug":"zl/2016-01-01-829_lua","date":"2024-04-03T03:47:36.075Z","updated":"2024-04-03T03:47:36.075Z","comments":true,"path":"api/articles/zl/2016-01-01-829_lua.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"lua-resty-lrucache深入解析lua-resty-lrucache是openresty里常用的缓存，是一个worker级别的缓存，也是一个最近最少使用的缓存，下面我们来具体分析它的实现过程。 使用示例123456789101112131415161718192021...","link":"","photos":[],"count_time":{"symbolsCount":"7.3k","symbolsTime":"7 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}