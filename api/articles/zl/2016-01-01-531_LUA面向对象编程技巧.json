{"title":"LUA面向对象编程技巧","uid":"7b688055584efd19ee44e4529173196a","slug":"zl/2016-01-01-531_LUA面向对象编程技巧","date":"2024-04-03T03:47:35.804Z","updated":"2024-04-03T03:47:35.804Z","comments":true,"path":"api/articles/zl/2016-01-01-531_LUA面向对象编程技巧.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<h2 id=\"LUA中的对象\"><a href=\"#LUA中的对象\" class=\"headerlink\" title=\"LUA中的对象\"></a>LUA中的对象</h2><p>我们知道，对象由属性和方法组成。LUA中最基本的结构是table，So 必须用table描述对象的属性。lua中的function可以用来表示方法。那么LUA中的类<br/>可以通过table + function模拟出来。至于继承，可以通过metetable模拟出来（不推荐用，只模拟最基本的对象大部分时间够用了）。</p>\n<h2 id=\"Metatable\"><a href=\"#Metatable\" class=\"headerlink\" title=\"Metatable\"></a>Metatable</h2><p>Lua中的metatable 类似于C++中的虚函数，当索引table中的项不存在时，会进一步索引metetable（如果设置了的话）是否存在该项。这跟虚函数概念</p>\n<p>不是很吻合么？</p>\n<h2 id=\"示例class\"><a href=\"#示例class\" class=\"headerlink\" title=\"示例class\"></a>示例class</h2><figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">user_t = {}</span><br/><span class=\"line\">user_t.<span class=\"built_in\">__index</span> = user_t</span><br/></pre></td></tr></tbody></table></figure>\n<p>以上代码声明class user_t。为了方便，user_t声明为全局的table。__index 是跟设置metatable有关，详细信息参见lua manual <a href=\"http://www.lua.org/manual/5.1/\" target=\"_blank\" rel=\"noopener noreferrer\">http://www.lua.org/manual/5.1/</a></p>\n<p>实际上__index 应该赋值为function，这里是一个语法糖，等价于</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">user_t.<span class=\"built_in\">__index</span> = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(key)</span></span> <span class=\"keyword\">return</span> user_t[key] <span class=\"keyword\">end</span></span><br/></pre></td></tr></tbody></table></figure>\n<p>定义构造函数：</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/><span class=\"line\">9</span><br/><span class=\"line\">10</span><br/><span class=\"line\">11</span><br/><span class=\"line\">12</span><br/><span class=\"line\">13</span><br/><span class=\"line\">14</span><br/><span class=\"line\">15</span><br/><span class=\"line\">16</span><br/><span class=\"line\">17</span><br/><span class=\"line\">18</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(uid_)</span></span></span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"keyword\">local</span> obj = </span><br/><span class=\"line\"></span><br/><span class=\"line\">{</span><br/><span class=\"line\"></span><br/><span class=\"line\">[<span class=\"string\">&#34;uid&#34;</span>] = uid_,</span><br/><span class=\"line\"></span><br/><span class=\"line\">}</span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"built_in\">setmetatable</span>(obj, self)</span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"keyword\">return</span> obj</span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">user_t:dump</span><span class=\"params\">()</span></span></span><br/><span class=\"line\"> <span class=\"built_in\">print</span>(<span class=\"string\">&#34;self:&#34;</span>, self.uid)</span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/></pre></td></tr></tbody></table></figure>\n<p>定义一个user_t对象代码如下：</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">local</span> user = user_t:new(<span class=\"number\">1122334</span>)</span><br/><span class=\"line\"></span><br/><span class=\"line\">user:<span class=\"built_in\">dump</span>()</span><br/></pre></td></tr></tbody></table></figure>\n<p>new 函数返回一个table, 当索引dump时，obj中没有dump函数，尝试去metatable中索引，获得dump函数。</p>\n<p>注意：</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">user_t.dump</span><span class=\"params\">(self)</span></span> ：方式定义函数只是个语法糖而已，其等价于</span><br/><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">user_t.dump</span><span class=\"params\">(self)</span></span></span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#34;self:&#34;</span>, self.uid)</span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/></pre></td></tr></tbody></table></figure>\n<p>通常我都会对应定义一个析构函数（不好意思C++流）</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">user_t:delete</span><span class=\"params\">()</span></span></span><br/><span class=\"line\"></span><br/><span class=\"line\">self.uid = <span class=\"literal\">nil</span></span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/></pre></td></tr></tbody></table></figure>\n<ol start=\"4\">\n<li>实现继承<br/>原理就是利用metatable，__index 设置这样的function，当前类不存在某项时，尝试去基类中查出</li>\n</ol>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/><span class=\"line\">9</span><br/><span class=\"line\">10</span><br/><span class=\"line\">11</span><br/><span class=\"line\">12</span><br/><span class=\"line\">13</span><br/><span class=\"line\">14</span><br/><span class=\"line\">15</span><br/><span class=\"line\">16</span><br/><span class=\"line\">17</span><br/><span class=\"line\">18</span><br/><span class=\"line\">19</span><br/><span class=\"line\">20</span><br/><span class=\"line\">21</span><br/><span class=\"line\">22</span><br/><span class=\"line\">23</span><br/><span class=\"line\">24</span><br/><span class=\"line\">25</span><br/><span class=\"line\">26</span><br/><span class=\"line\">27</span><br/><span class=\"line\">28</span><br/><span class=\"line\">29</span><br/><span class=\"line\">30</span><br/><span class=\"line\">31</span><br/><span class=\"line\">32</span><br/><span class=\"line\">33</span><br/><span class=\"line\">34</span><br/><span class=\"line\">35</span><br/><span class=\"line\">36</span><br/><span class=\"line\">37</span><br/><span class=\"line\">38</span><br/><span class=\"line\">39</span><br/><span class=\"line\">40</span><br/><span class=\"line\">41</span><br/><span class=\"line\">42</span><br/><span class=\"line\">43</span><br/><span class=\"line\">44</span><br/><span class=\"line\">45</span><br/><span class=\"line\">46</span><br/><span class=\"line\">47</span><br/><span class=\"line\">48</span><br/><span class=\"line\">49</span><br/><span class=\"line\">50</span><br/><span class=\"line\">51</span><br/><span class=\"line\">52</span><br/><span class=\"line\">53</span><br/><span class=\"line\">54</span><br/><span class=\"line\">55</span><br/><span class=\"line\">56</span><br/><span class=\"line\">57</span><br/><span class=\"line\">58</span><br/><span class=\"line\">59</span><br/><span class=\"line\">60</span><br/><span class=\"line\">61</span><br/><span class=\"line\">62</span><br/><span class=\"line\">63</span><br/><span class=\"line\">64</span><br/><span class=\"line\">65</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">person_t = {}</span><br/><span class=\"line\"></span><br/><span class=\"line\">person_t.<span class=\"built_in\">__index</span> = person_t</span><br/><span class=\"line\"></span><br/><span class=\"line\"></span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">person_t:new</span><span class=\"params\">()</span></span></span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"keyword\">local</span> obj = </span><br/><span class=\"line\"></span><br/><span class=\"line\">{</span><br/><span class=\"line\"></span><br/><span class=\"line\">[<span class=\"string\">&#34;type&#34;</span>] = <span class=\"string\">&#34;person&#34;</span>,</span><br/><span class=\"line\"></span><br/><span class=\"line\">}</span><br/><span class=\"line\"></span><br/><span class=\"line\">setmetable(person_t, self)</span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"keyword\">return</span> obj</span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/><span class=\"line\"></span><br/><span class=\"line\"></span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">person_t:type</span><span class=\"params\">()</span></span></span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#34;type:&#34;</span>, self[<span class=\"string\">&#34;type&#34;</span>])</span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/><span class=\"line\"></span><br/><span class=\"line\"></span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(uid_)</span></span></span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"keyword\">local</span> obj = </span><br/><span class=\"line\"></span><br/><span class=\"line\">{</span><br/><span class=\"line\"></span><br/><span class=\"line\">[<span class=\"string\">&#34;uid&#34;</span>] = uid_,</span><br/><span class=\"line\"></span><br/><span class=\"line\">}</span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"keyword\">local</span> mt = </span><br/><span class=\"line\"></span><br/><span class=\"line\">{</span><br/><span class=\"line\"></span><br/><span class=\"line\">[<span class=\"string\">&#34;__index&#34;</span>] = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(key_)</span></span></span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"keyword\">local</span> ret = user_t[key_] <span class=\"keyword\">or</span> person_t[key_]</span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"keyword\">return</span> ret</span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/><span class=\"line\"></span><br/><span class=\"line\">}</span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"built_in\">setmetatable</span>(obj, mt)</span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"keyword\">return</span> obj</span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"keyword\">local</span> user = user_t:new(<span class=\"number\">1122334</span>)</span><br/><span class=\"line\"></span><br/><span class=\"line\">user:<span class=\"built_in\">type</span>()</span><br/></pre></td></tr></tbody></table></figure>\n<h2 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h2><ol>\n<li>尽量不要使用多重继承</li>\n<li>不要尝试使用重载</li>\n</ol>","text":"LUA中的对象我们知道，对象由属性和方法组成。LUA中最基本的结构是table，So 必须用table描述对象的属性。lua中的function可以用来表示方法。那么LUA中的类可以通过table + function模拟出来。至于继承，可以通过metetable模拟出来（不推荐...","link":"","photos":[],"count_time":{"symbolsCount":"1.7k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#LUA%E4%B8%AD%E7%9A%84%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">LUA中的对象</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Metatable\"><span class=\"toc-text\">Metatable</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8Bclass\"><span class=\"toc-text\">示例class</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%B3%A8%E6%84%8F\"><span class=\"toc-text\">注意</span></a></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"缓存数据库Redis结合Lua脚本解析","uid":"3374fc9e5690a7d583cf9d06cecfe571","slug":"zl/2016-01-01-533_缓存数据库Redis结合Lua脚本解析","date":"2024-04-03T03:47:35.807Z","updated":"2024-04-03T03:47:35.808Z","comments":true,"path":"api/articles/zl/2016-01-01-533_缓存数据库Redis结合Lua脚本解析.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"redis作为一款优秀的缓存数据库，已成为许多的公司项目开发的必备底层数据库之一了，在我们使用redis时，除了平常对五种基础数据结构进行单一操作，有时会需要依赖redis来处理一段相对复杂的逻辑，而这段逻辑可能需要通过redis client发送多条redis命令来达到我们的目...","link":"","photos":[],"count_time":{"symbolsCount":"4.6k","symbolsTime":"4 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"lua 原生api解读","uid":"295283d9501912df4611655107bb5066","slug":"zl/2016-01-01-532_lua 原生api解读","date":"2024-04-03T03:47:35.804Z","updated":"2024-04-03T03:47:35.807Z","comments":true,"path":"api/articles/zl/2016-01-01-532_lua 原生api解读.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":" 简介 LuaAPI 1.创建新表 2.取表中元素 3.表中的元素赋值 4.取表元素 4.表元素赋值 5.对table的一些操作[不引发原方法] 6.复制栈上元素并压入栈 参考资料 简介 研究lua也有一段时间了，对lua也算是小有了解，对于lua的api可能和其他脚本语言不是 ...","link":"","photos":[],"count_time":{"symbolsCount":"2.3k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}