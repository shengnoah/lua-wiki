{"title":"Lua初体验","uid":"a6fc4e9a872c7a40f571a0b909dcaa98","slug":"zl/2016-01-01-89_Lua初体验","date":"2024-04-03T03:47:36.170Z","updated":"2024-04-03T03:47:36.170Z","comments":true,"path":"api/articles/zl/2016-01-01-89_Lua初体验.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<h2 id=\"背景\">背景</h2>\n<p>项目中后期需要支持热更新，因此只能把之前基于UGUI的C#外围逻辑全部修改为Lua，修改过程中的方案是做一个兼容处理，新逻辑用Lua，并在项目推进过程中逐步把外围都改为Lua编码。</p>\n<h2 id=\"项目中的接入实践\">项目中的接入实践</h2>\n<h3 id=\"工程目录结构\">工程目录结构</h3>\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>XFramework/lua          -- C#端脚本根目录\n------------------------------------------------------\nluaScripts              -- Lua端脚本根目录\n├── api                 -- 用于写代码时只能提示Api信息\n├── cfg_sheet           -- 本地配置表对应的代码\n├── common              -- 核心常用代码\n├── libs                -- 第三方库 例如 protobuf,cjson...\n├── proto               -- 协议对应代码\n├── service             -- 数据层服务代码\n├── ui                  -- UI代码\n├── Global.lua          -- 集中管理和C#层交互的地方\n└── LuaDebug.lua        -- 调试器\n</code></pre></div></div>\n<h3 id=\"核心代码库\">核心代码库</h3>\n<h4 id=\"c端\">C#端</h4>\n<ol>\n  <li><code class=\"highlighter-rouge\">LuaHelper.cs</code> Lua的启动脚本并传递各种游戏状态事件。</li>\n  <li><code class=\"highlighter-rouge\">LuaStrHelper.cs</code> Lua有部分字符串实现暂时没有找到Lua版本的，还包括C#的字符串格式化逻辑的转接，用以兼容现有配置。</li>\n  <li><code class=\"highlighter-rouge\">LuaMsgHelper.cs</code> 既然是兼容方案，那么socket只能直接获取现有的C#端实例来中转。这里有一个待解决的问题，是Lua到C#的传参过程，并没有找到方便的传输<code class=\"highlighter-rouge\">byte[]</code>的方法。临时使用了tolua示例中的<code class=\"highlighter-rouge\">LuaByteBuffer</code>。</li>\n  <li><code class=\"highlighter-rouge\">LuaResHelper.cs</code> 资源的操作中转类，目前只加了<code class=\"highlighter-rouge\">PlayerPrefs</code>，用到再添加。</li>\n  <li><code class=\"highlighter-rouge\">LuaUIHelper.cs</code> UI中转类，打开关闭窗口等，因为之前的C#端用到了大量泛型，并不方便直接提供<code class=\"highlighter-rouge\">UIManager</code>，所以这里短期内是会一直使用的。</li>\n  <li><code class=\"highlighter-rouge\">LuaObsoleteHelper.cs</code> 这是一个终将会废弃的类，把一些暂时没有办法处理的中转逻辑都集中到这个类中，以后逐个修改到Lua端实现，最终完全删除该类。\n    <h4 id=\"lua端\">Lua端</h4>\n  </li>\n  <li><code class=\"highlighter-rouge\">Global.lua</code> Lua端的入口代码，与C#端直接交互（仅此一个）。</li>\n  <li><code class=\"highlighter-rouge\">Common/SandBox.lua</code> 利用子类沙盒模式，给<code class=\"highlighter-rouge\">Service.lua</code>和<code class=\"highlighter-rouge\">UIView.lua</code>提供一系列的基本操作，把代码中大量的全局变量调用集中到这个基类中，降低耦合度，同时方便维护。</li>\n  <li><code class=\"highlighter-rouge\">Common/Service.lua</code>, <code class=\"highlighter-rouge\">Common/ServiceManager.lua</code> 这两个类就是UI框架设计中提到的数据层的两个基础类了。</li>\n  <li><code class=\"highlighter-rouge\">Common/UIView.lua</code> 是所有UI窗口和视图的基类。封装一系列简化操作的窗口API,分为获取组件、设置组件事件、属性绑定与自动解绑、窗口事件，以及一些常用的UI层操作。</li>\n  <li><code class=\"highlighter-rouge\">Common/UIPath.lua</code> 这里是UI的资源路径字典，规范应该保证的是资源和代码同名，这样会减少后续维护的麻烦。</li>\n  <li><code class=\"highlighter-rouge\">Common/XPlayerPrefs.lua</code> 本地的一个数据缓存。</li>\n  <li><code class=\"highlighter-rouge\">Common/XProperty.lua</code>,<code class=\"highlighter-rouge\">Common/XListProperty.lua</code> mvp架构的核心思想，单项数据绑定。</li>\n  <li><code class=\"highlighter-rouge\">Common/ConfigReader.lua</code> 本地配置表的读取类，支持两种读取方式，数组和字典。</li>\n  <li><code class=\"highlighter-rouge\">Common/Collections/XList.lua</code> 一个基本的list实现，内部是一个数组，未采用链表的形式是处于性能考虑。</li>\n</ol>\n<h3 id=\"还未执行的工作\">还未执行的工作</h3>\n<ol>\n  <li>生成获取组件的代码</li>\n  <li>自动拦截替换现有的C#端实现</li>\n  <li>代码模板</li>\n</ol>\n<h3 id=\"待探讨的做法\">待探讨的做法</h3>\n<ol>\n  <li>class\n目前大众一点的面向对象思路一共有三种。一种是metatable直接来（项目中目前就是如此，缺点是如果继承层级过多会有额外的metatable开销）。二是copy父类方法到子类中。三是执行时copy（参考云风的blog）。</li>\n  <li>配置表\n目前参考了一些市面上的项目方案，直接将配置表导出成对应的代码。需要讨论的有两个点，一是解析配置表好还是直接就是代码好。二是代码中的重复关键词如何消除，目前考虑可以使用数组+metatable实现，还没有动手。</li>\n  <li>协议\n目前协议使用了<code class=\"highlighter-rouge\">tolua</code>自带的<code class=\"highlighter-rouge\">proto-gen-lua</code>，缺陷是不支持<code class=\"highlighter-rouge\">[packed=true]</code>字段，该字段可以减少列表长度n的字段 (n - 1) * 8bit的数据量。</li>\n  <li>全局变量\n全局变量是否有额外的开销，开销是多少目前我还不是很清楚。因此，<code class=\"highlighter-rouge\">UIView</code>等是否使用全局变量还需要进一步了解。</li>\n</ol>\n<h3 id=\"经验技巧\">经验技巧</h3>\n<ol>\n  <li>显示子视图时，需要判断该视图是一个全局的还是一个独立的实例\n    <div class=\"language-lua highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code> <span class=\"c1\">-- 显示顶部菜单中的货币视图 因为各个界面都有该类，那么其应该是一个单独的实例 所以需要调用 new() 方法</span>\n <span class=\"n\">self</span><span class=\"p\">:</span><span class=\"n\">showView</span><span class=\"p\">(</span><span class=\"n\">CommonTopView_Coins</span><span class=\"p\">:</span><span class=\"n\">new</span><span class=\"p\">(),</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">mContextCoin</span><span class=\"p\">)</span>\n<p><span class=\"c1\">– 邮件详情界面这里就只有一个全局的实例了 并不需要也不应该去 new()</span><br />\n<span class=\"kd\">local</span> <span class=\"n\">content</span> <span class=\"o\">=</span> <span class=\"nb\">require</span><span class=\"p\">(</span><span class=\"n\">UIPath</span><span class=\"p\">.</span><span class=\"n\">MailWindow_ContentView</span><span class=\"p\">)</span><br />\n<span class=\"n\">content</span><span class=\"p\">.</span><span class=\"n\">selectedMail</span> <span class=\"o\">=</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">selectedMail</span><br />\n<span class=\"n\">self</span><span class=\"p\">:</span><span class=\"n\">showView</span><span class=\"p\">(</span><span class=\"n\">content</span><span class=\"p\">,</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">mUIContext_mail_content_not_empty_6</span><span class=\"p\">)</span></p>\n<p><span class=\"c1\">– 列表的显示每个子视图都是独立的实例 这里需要注意的是传参的方式 列表会有一个特殊字段 prefab 需要赋值</span><br />\n<span class=\"kd\">local</span> <span class=\"n\">list</span> <span class=\"o\">=</span> <span class=\"n\">XList</span><span class=\"p\">:</span><span class=\"n\">new</span><span class=\"p\">()</span><br />\n<span class=\"k\">for</span> <span class=\"n\">_</span><span class=\"p\">,</span><span class=\"n\">item</span> <span class=\"k\">in</span> <span class=\"nb\">ipairs</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">items</span><span class=\"p\">)</span> <span class=\"k\">do</span><br />\n<span class=\"c1\">–@RefType [ui.Common.CommonItemView#CommonItemView]</span><br />\n<span class=\"kd\">local</span> <span class=\"n\">cell</span> <span class=\"o\">=</span> <span class=\"n\">CommonItemViewPrefab</span><span class=\"p\">:</span><span class=\"n\">new</span><span class=\"p\">()</span><br />\n<span class=\"n\">cell</span><span class=\"p\">.</span><span class=\"n\">item</span> <span class=\"o\">=</span> <span class=\"n\">item</span><br />\n<span class=\"n\">cell</span><span class=\"p\">.</span><span class=\"n\">couldClick</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><br />\n<span class=\"n\">cell</span><span class=\"p\">.</span><span class=\"n\">prefab</span> <span class=\"o\">=</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">lstCell</span><br />\n<span class=\"n\">list</span><span class=\"p\">:</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">cell</span><span class=\"p\">)</span><br />\n<span class=\"k\">end</span></p>\n<p><span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">lstContainer</span><span class=\"p\">:</span><span class=\"n\">setLuaDatas</span><span class=\"p\">(</span><span class=\"n\">list</span><span class=\"p\">)</span><br />\n<span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">lstContainer</span><span class=\"p\">:</span><span class=\"n\">display</span><span class=\"p\">()</span><br />\n</code></pre></div>    </div></p>\n  </li>\n  <li>代码提示的功能添加\n    <div class=\"language-lua highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code> <span class=\"c1\">-- 最常用的应该这个引用标签了，这里直接声明了cfg变量的类型是对应配置表，方便写代码</span>\n <span class=\"c1\">--@RefType [cfg_sheet.common_config.t_item_config#t_item_config]</span>\n <span class=\"n\">Item</span><span class=\"p\">.</span><span class=\"n\">cfg</span> <span class=\"o\">=</span> <span class=\"kc\">nil</span>\n<p><span class=\"c1\">– 这里同时指定了参数类型和返回值类型，方便调用</span><br />\n<span class=\"c1\">– 获取指定id的道具信息</span><br />\n<span class=\"c1\">–@itemId: 道具ID</span><br />\n<span class=\"c1\">–@return [api.Item#Item]</span><br />\n<span class=\"k\">function</span> <span class=\"nf\">BagService</span><span class=\"p\">:</span><span class=\"n\">getItem</span><span class=\"p\">(</span><span class=\"n\">itemId</span><span class=\"p\">)</span><br />\n<span class=\"kd\">local</span> <span class=\"n\">ret</span> <span class=\"o\">=</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">items</span><span class=\"p\">[</span><span class=\"n\">itemId</span><span class=\"p\">]</span><br />\n<span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">ret</span> <span class=\"o\">==</span> <span class=\"kc\">nil</span><span class=\"p\">)</span> <span class=\"k\">then</span><br />\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"nb\">string.format</span><span class=\"p\">(</span><span class=\"s2\">&quot;道具错误 %d =&gt; 找玥祺&amp;海哥&quot;</span><span class=\"p\">,</span> <span class=\"n\">itemId</span><span class=\"p\">))</span><br />\n<span class=\"k\">end</span><br />\n<span class=\"k\">return</span> <span class=\"n\">ret</span><br />\n<span class=\"k\">end</span><br />\n</code></pre></div>    </div></p>\n  </li>\n  <li>Public or Private 函数\n    <div class=\"language-lua highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code> <span class=\"kd\">local</span> <span class=\"n\">M</span> <span class=\"o\">=</span> <span class=\"n\">BagService</span>\n <span class=\"c1\">-- 外部会调用的逻辑直接用全局名称,这样写代码会有智能提示</span>\n <span class=\"c1\">-- 出售道具</span>\n <span class=\"k\">function</span> <span class=\"nf\">BagService</span><span class=\"p\">:</span><span class=\"n\">C2SSellItem</span><span class=\"p\">(</span><span class=\"n\">itemId</span><span class=\"p\">,</span> <span class=\"n\">itemNum</span><span class=\"p\">)</span>\n     <span class=\"kd\">local</span> <span class=\"n\">msg</span> <span class=\"o\">=</span> <span class=\"n\">MsgStruct</span><span class=\"p\">:</span><span class=\"n\">C2SSellItem</span><span class=\"p\">()</span>\n     <span class=\"n\">msg</span><span class=\"p\">.</span><span class=\"n\">itemID</span> <span class=\"o\">=</span> <span class=\"n\">itemId</span>\n     <span class=\"n\">msg</span><span class=\"p\">.</span><span class=\"n\">itemNum</span> <span class=\"o\">=</span> <span class=\"n\">itemNum</span>\n     <span class=\"n\">self</span><span class=\"p\">:</span><span class=\"n\">sendMain</span><span class=\"p\">(</span><span class=\"n\">NetMsgId</span><span class=\"p\">.</span><span class=\"n\">C2SSellItem</span><span class=\"p\">,</span> <span class=\"n\">msg</span><span class=\"p\">)</span>\n <span class=\"k\">end</span>\n<p><span class=\"c1\">– 内部函数就用M打头，外部没有提示</span><br />\n<span class=\"c1\">– 出售道具</span><br />\n<span class=\"k\">function</span> <span class=\"nf\">M</span><span class=\"p\">:</span><span class=\"n\">S2CSellItem</span><span class=\"p\">(</span><span class=\"n\">msg</span><span class=\"p\">)</span><br />\n<span class=\"n\">self</span><span class=\"p\">:</span><span class=\"n\">showErrorCode</span><span class=\"p\">(</span><span class=\"n\">msg</span><span class=\"p\">.</span><span class=\"n\">ret</span><span class=\"p\">)</span><br />\n<span class=\"k\">end</span><br />\n</code></pre></div>    </div></p>\n  </li>\n</ol>\n<h3 id=\"项目规范\">项目规范</h3>\n<ol>\n  <li>所有的变量，添加详细的注释，可以是英文</li>\n  <li>类型名称的每个单词首字母均大写</li>\n  <li>变量名和函数名均小写字母开头</li>\n  <li>常量名全大写或者k字母开头并在注释中声明</li>\n  <li>窗口代码和资源名称要匹配</li>\n  <li>窗口以<code class=\"highlighter-rouge\">Window</code>,视图以<code class=\"highlighter-rouge\">View</code>为后缀方便区分</li>\n  <li>一些公共的数据结构，到<code class=\"highlighter-rouge\">api</code>目录下创建对应的接口提示 like <code class=\"highlighter-rouge\">Item</code></li>\n  <li>一些常用的数据，和方法，要是用标签指定其对应参数和返回值类型，方便大家写代码</li>\n  <li>方法一定要注意<code class=\"highlighter-rouge\">:</code>和<code class=\"highlighter-rouge\">.</code>的区别，尽量少用<code class=\"highlighter-rouge\">.</code>减少全局变量的调用，并且保持一致的<code class=\"highlighter-rouge\">:</code>风格</li>\n</ol>","text":"背景 项目中后期需要支持热更新，因此只能把之前基于UGUI的C#外围逻辑全部修改为Lua，修改过程中的方案是做一个兼容处理，新逻辑用Lua，并在项目推进过程中逐步把外围都改为Lua编码。 项目中的接入实践 工程目录结构 XFramework/lua -- C#端脚本根目录 ---...","link":"","photos":[],"count_time":{"symbolsCount":"3.8k","symbolsTime":"3 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%83%8C%E6%99%AF\"><span class=\"toc-text\">背景</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%A1%B9%E7%9B%AE%E4%B8%AD%E7%9A%84%E6%8E%A5%E5%85%A5%E5%AE%9E%E8%B7%B5\"><span class=\"toc-text\">项目中的接入实践</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%B7%A5%E7%A8%8B%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">工程目录结构</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%A0%B8%E5%BF%83%E4%BB%A3%E7%A0%81%E5%BA%93\"><span class=\"toc-text\">核心代码库</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#c%E7%AB%AF\"><span class=\"toc-text\">C#端</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#lua%E7%AB%AF\"><span class=\"toc-text\">Lua端</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%BF%98%E6%9C%AA%E6%89%A7%E8%A1%8C%E7%9A%84%E5%B7%A5%E4%BD%9C\"><span class=\"toc-text\">还未执行的工作</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%BE%85%E6%8E%A2%E8%AE%A8%E7%9A%84%E5%81%9A%E6%B3%95\"><span class=\"toc-text\">待探讨的做法</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BB%8F%E9%AA%8C%E6%8A%80%E5%B7%A7\"><span class=\"toc-text\">经验技巧</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%A1%B9%E7%9B%AE%E8%A7%84%E8%8C%83\"><span class=\"toc-text\">项目规范</span></a></li></ol></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"centos下安装openresty+ngx_lua_waf防火墙部署","uid":"0bbecffdbf888a921316fd4ef393eaaa","slug":"zl/2016-01-01-898_centos下安装openresty+ngx_lua_waf防火墙部署","date":"2024-04-03T03:47:36.170Z","updated":"2024-04-03T03:47:36.170Z","comments":true,"path":"api/articles/zl/2016-01-01-898_centos下安装openresty+ngx_lua_waf防火墙部署.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"全文默认安装路径：/usr/local/src 1、安装Luagit:1234567# cd /usr/local/src# wget http://luajit.org/download/LuaJIT-2.1.0-beta3.tar.gz# tar -zxvf LuaJIT-2...","link":"","photos":[],"count_time":{"symbolsCount":"2.2k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"nginx+lua+ngx_lua_waf实现waf功能","uid":"779207ded987b9d8c01e24f7fd261fcb","slug":"zl/2016-01-01-896_nginx+lua+ngx_lua_waf实现waf功能","date":"2024-04-03T03:47:36.169Z","updated":"2024-04-03T03:47:36.169Z","comments":true,"path":"api/articles/zl/2016-01-01-896_nginx+lua+ngx_lua_waf实现waf功能.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"用途： 防止sql注入，本地包含，部分溢出，fuzzing测试，xss,SSRF等web攻击 防止svn/备份之类文件泄漏 防止ApacheBench之类压力测试工具的攻击 屏蔽常见的扫描黑客工具，扫描器 屏蔽异常的网络请求 屏蔽图片附件类目录php执行权限 防止webshell...","link":"","photos":[],"count_time":{"symbolsCount":"2.8k","symbolsTime":"3 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}