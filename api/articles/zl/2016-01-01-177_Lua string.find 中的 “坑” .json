{"title":"Lua string.find 中的 “坑”","uid":"f0b579433247a9da11a0809ef2f14994","slug":"zl/2016-01-01-177_Lua string.find 中的 “坑” ","date":"2024-04-03T03:47:33.063Z","updated":"2024-04-03T03:47:33.063Z","comments":true,"path":"api/articles/zl/2016-01-01-177_Lua string.find 中的 “坑” .json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<p>我们的线上环境，ngx_lua api 都是以模块形式加载到 lua 级别的 vm 中，已达到最大性能。而且我们并没有使用传统的 “包” 的形式来加载(也就是 <code class=\"highlighter-rouge\">require &#34;xx.xx.xx&#34;</code> )，而是直接以模块名为加载( <code class=\"highlighter-rouge\">require &#34;xx&#34;</code> )，这就意味着我们需要不断的来动态设置 <code class=\"highlighter-rouge\">package.path</code> 来配合 <code class=\"highlighter-rouge\">require</code> 的机制。于是我们写了下面这个方法，来实现我们的需求：</p>\n<div class=\"language-lua highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">function</span> <span class=\"nf\">tools</span><span class=\"p\">:</span><span class=\"n\">loadluapath</span><span class=\"p\">(</span><span class=\"n\">root_path</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">root_path</span> <span class=\"o\">==</span> <span class=\"kc\">nil</span> <span class=\"k\">then</span>\n        <span class=\"k\">return</span>\n    <span class=\"k\">end</span>\n<pre><code>&lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root_path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root_path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;#34;/?.lua;&amp;#34;&lt;/span&gt;\n&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;string.find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;package.path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;\n    &lt;span class=&quot;nb&quot;&gt;package.path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;package.path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root_path&lt;/span&gt;\n&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;\n</code></pre>\n<p><span class=\"k\">end</span><br />\n</code></pre></div></div></p>\n<p>但近期我却发现 <code class=\"highlighter-rouge\">package.path</code> 好像存在泄漏点，有将近 60K 的大小，而且还在一直持续增长。这并不符合我们的预期，其应该是在启动阶段过后，在一段时间内不断增长，之后应该是趋于稳定，到最后完全是一个常数级的大小。所以说，上面的 <code class=\"highlighter-rouge\">loadluapath</code> 方法一定是出了问题，那么肯定就是 <code class=\"highlighter-rouge\">string.find(package.path,root_path) == nil</code> 这条语句喽，继续测试：</p>\n<div class=\"language-lua highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">Lua</span> <span class=\"mi\">5</span><span class=\"p\">.</span><span class=\"mi\">1</span><span class=\"p\">.</span><span class=\"mi\">4</span>  <span class=\"n\">Copyright</span> <span class=\"p\">(</span><span class=\"n\">C</span><span class=\"p\">)</span> <span class=\"mi\">1994</span><span class=\"o\">-</span><span class=\"mi\">2008</span> <span class=\"n\">Lua</span><span class=\"p\">.</span><span class=\"n\">org</span><span class=\"p\">,</span> <span class=\"n\">PUC</span><span class=\"o\">-</span><span class=\"n\">Rio</span>\n<span class=\"o\">&gt;</span>\n<span class=\"o\">&gt;</span>\n<span class=\"o\">&gt;</span> <span class=\"k\">do</span>\n<span class=\"o\">&gt;&gt;</span>     <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"nb\">package.path</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;</span>     <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"nb\">string.rep</span><span class=\"p\">(</span><span class=\"s2\">&#34;=&#34;</span><span class=\"p\">,</span><span class=\"mi\">20</span><span class=\"p\">))</span>\n<span class=\"o\">&gt;&gt;</span>     <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"nb\">string.find</span><span class=\"p\">(</span><span class=\"nb\">package.path</span><span class=\"p\">,</span><span class=\"s2\">&#34;/test/yyyy-mm-dd/?.lua&#34;</span><span class=\"p\">))</span>\n<span class=\"o\">&gt;&gt;</span> <span class=\"k\">end</span>\n<span class=\"p\">.</span><span class=\"o\">/</span><span class=\"err\">?</span><span class=\"p\">.</span><span class=\"n\">lua</span><span class=\"p\">;</span>\n<span class=\"o\">/</span><span class=\"n\">usr</span><span class=\"o\">/</span><span class=\"kd\">local</span><span class=\"o\">/</span><span class=\"n\">lua</span><span class=\"o\">/</span><span class=\"n\">share</span><span class=\"o\">/</span><span class=\"n\">lua</span><span class=\"o\">/</span><span class=\"mi\">5</span><span class=\"p\">.</span><span class=\"mi\">1</span><span class=\"o\">/</span><span class=\"err\">?</span><span class=\"p\">.</span><span class=\"n\">lua</span><span class=\"p\">;</span><span class=\"o\">/</span><span class=\"n\">usr</span><span class=\"o\">/</span><span class=\"n\">share</span><span class=\"o\">/</span><span class=\"n\">lua</span><span class=\"o\">/</span><span class=\"mi\">5</span><span class=\"p\">.</span><span class=\"mi\">1</span><span class=\"o\">/</span><span class=\"err\">?</span><span class=\"p\">.</span><span class=\"n\">lua</span><span class=\"p\">;</span>\n<span class=\"o\">/</span><span class=\"n\">usr</span><span class=\"o\">/</span><span class=\"n\">share</span><span class=\"o\">/</span><span class=\"n\">lua</span><span class=\"o\">/</span><span class=\"mi\">5</span><span class=\"p\">.</span><span class=\"mi\">1</span><span class=\"o\">/</span><span class=\"err\">?</span><span class=\"o\">/</span><span class=\"n\">init</span><span class=\"p\">.</span><span class=\"n\">lua</span><span class=\"p\">;</span><span class=\"o\">/</span><span class=\"n\">usr</span><span class=\"o\">/</span><span class=\"n\">lib64</span><span class=\"o\">/</span><span class=\"n\">lua</span><span class=\"o\">/</span><span class=\"mi\">5</span><span class=\"p\">.</span><span class=\"mi\">1</span><span class=\"o\">/</span><span class=\"err\">?</span><span class=\"p\">.</span><span class=\"n\">lua</span><span class=\"p\">;</span>\n<span class=\"o\">/</span><span class=\"n\">usr</span><span class=\"o\">/</span><span class=\"n\">lib64</span><span class=\"o\">/</span><span class=\"n\">lua</span><span class=\"o\">/</span><span class=\"mi\">5</span><span class=\"p\">.</span><span class=\"mi\">1</span><span class=\"o\">/</span><span class=\"err\">?</span><span class=\"o\">/</span><span class=\"n\">init</span><span class=\"p\">.</span><span class=\"n\">lua</span><span class=\"p\">;</span>\n<span class=\"o\">/</span><span class=\"n\">test</span><span class=\"o\">/</span><span class=\"n\">yyyy</span><span class=\"o\">-</span><span class=\"n\">mm</span><span class=\"o\">-</span><span class=\"n\">dd</span><span class=\"o\">/</span><span class=\"err\">?</span><span class=\"p\">.</span><span class=\"n\">lua</span>\n<span class=\"o\">====================</span>\n<span class=\"kc\">nil</span>\n<span class=\"o\">&gt;</span>\n<span class=\"o\">&gt;</span>\n</code></pre></div></div>\n<p>貌似不对，为什么 <code class=\"highlighter-rouge\">string.find</code> 返回 <code class=\"highlighter-rouge\">nil</code>，又是万能的 SO 上找到了解释：</p>\n<blockquote>\n  <p>string.find(), by default, does not find strings in strings, it finds patterns in strings. str:find(pattern, init, plain) which allows you to pass in true as a last argument and search for plain strings.</p>\n</blockquote>\n<p>原来 <code class=\"highlighter-rouge\">string.find</code> 是当做 pattern 来查找的。修改一下，继续测试：</p>\n<div class=\"language-lua highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"o\">&gt;</span>\n<span class=\"o\">&gt;</span> <span class=\"k\">do</span>\n<span class=\"o\">&gt;&gt;</span>     <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"nb\">package.path</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;</span>     <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"nb\">string.rep</span><span class=\"p\">(</span><span class=\"s2\">&#34;=&#34;</span><span class=\"p\">,</span><span class=\"mi\">20</span><span class=\"p\">))</span>\n<span class=\"o\">&gt;&gt;</span>     <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"nb\">string.find</span><span class=\"p\">(</span><span class=\"nb\">package.path</span><span class=\"p\">,</span><span class=\"s2\">&#34;/test/yyyy-mm-dd/?.lua&#34;</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"kc\">true</span><span class=\"p\">))</span>\n<span class=\"o\">&gt;&gt;</span> <span class=\"k\">end</span>\n<span class=\"p\">.</span><span class=\"o\">/</span><span class=\"err\">?</span><span class=\"p\">.</span><span class=\"n\">lua</span><span class=\"p\">;</span>\n<span class=\"o\">/</span><span class=\"n\">usr</span><span class=\"o\">/</span><span class=\"kd\">local</span><span class=\"o\">/</span><span class=\"n\">lua</span><span class=\"o\">/</span><span class=\"n\">share</span><span class=\"o\">/</span><span class=\"n\">lua</span><span class=\"o\">/</span><span class=\"mi\">5</span><span class=\"p\">.</span><span class=\"mi\">1</span><span class=\"o\">/</span><span class=\"err\">?</span><span class=\"p\">.</span><span class=\"n\">lua</span><span class=\"p\">;</span><span class=\"o\">/</span><span class=\"n\">usr</span><span class=\"o\">/</span><span class=\"n\">share</span><span class=\"o\">/</span><span class=\"n\">lua</span><span class=\"o\">/</span><span class=\"mi\">5</span><span class=\"p\">.</span><span class=\"mi\">1</span><span class=\"o\">/</span><span class=\"err\">?</span><span class=\"p\">.</span><span class=\"n\">lua</span><span class=\"p\">;</span>\n<span class=\"o\">/</span><span class=\"n\">usr</span><span class=\"o\">/</span><span class=\"n\">share</span><span class=\"o\">/</span><span class=\"n\">lua</span><span class=\"o\">/</span><span class=\"mi\">5</span><span class=\"p\">.</span><span class=\"mi\">1</span><span class=\"o\">/</span><span class=\"err\">?</span><span class=\"o\">/</span><span class=\"n\">init</span><span class=\"p\">.</span><span class=\"n\">lua</span><span class=\"p\">;</span><span class=\"o\">/</span><span class=\"n\">usr</span><span class=\"o\">/</span><span class=\"n\">lib64</span><span class=\"o\">/</span><span class=\"n\">lua</span><span class=\"o\">/</span><span class=\"mi\">5</span><span class=\"p\">.</span><span class=\"mi\">1</span><span class=\"o\">/</span><span class=\"err\">?</span><span class=\"p\">.</span><span class=\"n\">lua</span><span class=\"p\">;</span>\n<span class=\"o\">/</span><span class=\"n\">usr</span><span class=\"o\">/</span><span class=\"n\">lib64</span><span class=\"o\">/</span><span class=\"n\">lua</span><span class=\"o\">/</span><span class=\"mi\">5</span><span class=\"p\">.</span><span class=\"mi\">1</span><span class=\"o\">/</span><span class=\"err\">?</span><span class=\"o\">/</span><span class=\"n\">init</span><span class=\"p\">.</span><span class=\"n\">lua</span><span class=\"p\">;</span>\n<span class=\"o\">/</span><span class=\"n\">test</span><span class=\"o\">/</span><span class=\"n\">yyyy</span><span class=\"o\">-</span><span class=\"n\">mm</span><span class=\"o\">-</span><span class=\"n\">dd</span><span class=\"o\">/</span><span class=\"err\">?</span><span class=\"p\">.</span><span class=\"n\">lua</span>\n<span class=\"o\">====================</span>\n<span class=\"mi\">162</span> <span class=\"mi\">183</span>\n</code></pre></div></div>\n<p>Bingo ! 这下看到预期效果了。</p>\n<p>如果你也不确定 <code class=\"highlighter-rouge\">find</code> 的字符串会不会包含元字符，靠谱的方式，还是加个 <code class=\"highlighter-rouge\">true</code> 参数比较好！</p>\n<pre><code>            &lt;hr style=&quot;visibility: hidden;&quot;/&gt;\n</code></pre>\n","text":"我们的线上环境，ngx_lua api 都是以模块形式加载到 lua 级别的 vm 中，已达到最大性能。而且我们并没有使用传统的 “包” 的形式来加载(也就是 require &#34;xx.xx.xx&#34; )，而是直接以模块名为加载( require &#34;xx&#3...","link":"","photos":[],"count_time":{"symbolsCount":"3k","symbolsTime":"3 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Unity常见lua解决方案性能比较","uid":"e97d1fc46b73c2427533dd2e3e12edf2","slug":"zl/2016-01-01-175_Unity常见lua解决方案性能比较","date":"2024-04-03T03:47:33.063Z","updated":"2024-04-03T03:47:33.063Z","comments":true,"path":"api/articles/zl/2016-01-01-175_Unity常见lua解决方案性能比较.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"之前由于项目需要，我比较了下Unity常见的几个lua解决方案；最近应鑫哥约稿，整理了一下。Unity不支持热更新这事情一直是一个谜一样的痛点，特别是在我第一个项目上线之后，发现每次更新代价太大了…可惜官方Roadmap上迟迟没有出现这个功能。昨天在群里还看到琨少说天下直接热更新...","link":"","photos":[],"count_time":{"symbolsCount":"1.3k","symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"基于OpenResty安装配置Nginx+LUA并实现请求分发的双层Nginx架构策略","uid":"ba17cf45fbc8e4f389116ffd1e13da5f","slug":"zl/2016-01-01-176_基于OpenResty安装配置Nginx+LUA并实现请求分发的双层Nginx架构策略","date":"2024-04-03T03:47:33.063Z","updated":"2024-04-03T03:47:33.063Z","comments":true,"path":"api/articles/zl/2016-01-01-176_基于OpenResty安装配置Nginx+LUA并实现请求分发的双层Nginx架构策略.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"台CentOS6.x192.168.1.210192.168.1.211192.168.1.212网络拓扑210和211作为应用层web服务器212作为网络请求分发代理服务器 Step1:安装Linux依赖1yum install -y readline-devel pcre-d...","link":"","photos":[],"count_time":{"symbolsCount":"5.5k","symbolsTime":"5 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}