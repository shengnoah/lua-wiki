{"title":"Lua学习笔记","uid":"d112c00bf05f368c0020529ea6c8efaf","slug":"zl/2016-01-01-733_Lua学习笔记","date":"2024-04-03T03:47:35.982Z","updated":"2024-04-03T03:47:35.983Z","comments":true,"path":"api/articles/zl/2016-01-01-733_Lua学习笔记.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<blockquote>\n<p>Lua在设计上，从一开始就把简洁、高效、可移植性、可嵌入型、可扩展性等作为自己的目标。</p>\n</blockquote>\n<h3 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h3><blockquote>\n<p>表、函数、线程、以及完全用户数据在 Lua 中被称为对象：变量并不真的持有它们的值，而仅保存了对这些对象的引用。 赋值、参数传递、函数返回，都是针对引用而不是针对值的操作， 这些操作均不会做任何形式的隐式拷贝。</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>基本类型</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>数值(number)</td>\n<td>内部以double表示</td>\n</tr>\n<tr>\n<td>字符串(string)</td>\n<td><strong>总是以零结尾</strong>,但可以包含任意字符(包括零),因此并不等价于C字符串, 而是其超集</td>\n<td></td>\n</tr>\n<tr>\n<td>布尔(boolean)</td>\n<td>只有“true”或者“false”两个值。<strong>nil → false，others → true</strong></td>\n</tr>\n<tr>\n<td>函数(function)</td>\n<td>Lua的关键概念之一。不简单等同于C的函数或函数指针。</td>\n</tr>\n<tr>\n<td>表(table)</td>\n<td>异构的Hash表。Lua的关键概念之一。</td>\n</tr>\n<tr>\n<td>userdata</td>\n<td>用户(非脚本用户)定义的C数据结构。脚本用户只能使用它,不能定义。</td>\n</tr>\n<tr>\n<td>线程(thread)</td>\n<td>Lua协作线程(coroutine),与一般操作系统的抢占式线程不一样。</td>\n</tr>\n<tr>\n<td>nil</td>\n<td>为初始化的值，逻辑值为false。</td>\n</tr>\n</tbody>\n</table>\n<p>and 且&amp;&amp;<br/>or 或||<br/>not  取反！</p>\n<h3 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h3><ul>\n<li><strong>函数</strong>用关键字function定义函数，以关键字end结束</li>\n<li><strong>局部变量</strong>用关键字local定义。如果没有用local定义，即使在函数内部定义的变量也是全局变量!</li>\n<li>函数可以返回多个值:</li>\n</ul>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(a,b,c,...)</span></span>    </span><br/><span class=\"line\">    <span class=\"keyword\">local</span> sum = a+b  </span><br/><span class=\"line\">    <span class=\"keyword\">return</span> sum,c  </span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/></pre></td></tr></tbody></table></figure>\n<h3 id=\"表\"><a href=\"#表\" class=\"headerlink\" title=\"表\"></a>表</h3><p>定义表(Table)的方式</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">local</span> b = { x = <span class=\"number\">1</span>, [<span class=\"string\">&#34;hello&#34;</span>] = <span class=\"string\">&#34;world!&#34;</span> }</span><br/></pre></td></tr></tbody></table></figure>\n<p>访问表的成员<br/>通过“.”或者“[]”运算符来访问表的成员。<br/><b> 1. 注意：表达式a.b等价于a[“b”]，但不等价于a[b]</b></p>\n<ol start=\"2\">\n<li>除了nil，都可以作为表项的键和值</li>\n<li>给一个表项的值赋nil意味着从表中删除这一项，比如令<code>b.x = nil</code>,则把表b中键为“x”的项删除。</li>\n<li>如果访问一个不存在的表项,其值也是nil，比如有c = a.b,但表a中没有键为“b”的项，则c等于nil。 </li>\n<li>键值对之间使用等号。<br/> </li>\n</ol>\n<h3 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h3><p>字符串的链接<code>..</code></p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">local</span> str = <span class=\"string\">&#34;Hi &#34;</span> .. <span class=\"string\">&#34;Lua&#34;</span>  <span class=\"comment\">-- Hi Lua</span></span><br/></pre></td></tr></tbody></table></figure>\n<p>字符串的截取，索引从1开始</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">string</span>.<span class=\"built_in\">sub</span>(str, fromIndex [, endIndex])</span><br/></pre></td></tr></tbody></table></figure>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">string.sub(&#34;Hello Lua user&#34;, 7) --  Lua user</span><br/><span class=\"line\">string.sub(&#34;Hello Lua user&#34;, 7, 9) -- Lua</span><br/><span class=\"line\">string.sub(&#34;Hello Lua user&#34;, -8) -- Lua user</span><br/><span class=\"line\">string.sub(&#34;Hello Lua user&#34;, -8, 9) -- Lua</span><br/><span class=\"line\">string.sub(&#34;Hello Lua user&#34;, -8, -6) -- Lua</span><br/></pre></td></tr></tbody></table></figure>\n<p>常用方法</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">string</span>.<span class=\"built_in\">len</span>(<span class=\"string\">&#34;Alma&#34;</span>) <span class=\"comment\">-- &#34;4&#34;</span></span><br/><span class=\"line\"><span class=\"built_in\">string</span>.<span class=\"built_in\">format</span>(<span class=\"string\">&#34;%d %s&#34;</span>, <span class=\"number\">2</span>, <span class=\"string\">&#34;alma&#34;</span>) <span class=\"comment\">-- &#34;2 alma&#34;</span></span><br/><span class=\"line\"><span class=\"built_in\">string</span>.<span class=\"built_in\">upper</span>(<span class=\"string\">&#34;Alma&#34;</span>) <span class=\"comment\">-- &#34;ALMA&#34;</span></span><br/><span class=\"line\"><span class=\"built_in\">string</span>.<span class=\"built_in\">lower</span>(<span class=\"string\">&#34;Alma&#34;</span>) <span class=\"comment\">-- &#34;alma&#34;&#34;</span></span><br/><span class=\"line\"><span class=\"built_in\">string</span>.<span class=\"built_in\">reverse</span>(<span class=\"string\">&#34;Alma&#34;</span>) <span class=\"comment\">-- &#34; amlA&#34;</span></span><br/></pre></td></tr></tbody></table></figure>\n<p>简写格式</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">mystring = <span class=\"string\">&#34;alma&#34;</span></span><br/><span class=\"line\"><span class=\"built_in\">print</span>(#mystring==mystring:<span class=\"built_in\">len</span>()) <span class=\"comment\">-- true</span></span><br/><span class=\"line\"><span class=\"built_in\">print</span>(mystring:<span class=\"built_in\">reverse</span>()) <span class=\"comment\">-- &#34;amla&#34;</span></span><br/></pre></td></tr></tbody></table></figure>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">math</span>.<span class=\"built_in\">pow</span>(x,y) <span class=\"comment\">-- x的y次方</span></span><br/><span class=\"line\"><span class=\"built_in\">math</span>.<span class=\"built_in\">sqrt</span>(x)  <span class=\"comment\">--  平方根</span></span><br/><span class=\"line\"><span class=\"built_in\">math</span>.<span class=\"built_in\">max</span>(...)</span><br/><span class=\"line\"><span class=\"built_in\">math</span>.<span class=\"built_in\">min</span>(...)</span><br/></pre></td></tr></tbody></table></figure>\n<h3 id=\"表-1\"><a href=\"#表-1\" class=\"headerlink\" title=\"表\"></a>表</h3><p>键值为变量或者数字必须用<code>[]</code>括起来<br/>可以用逗号和分号分割<br/>字符串引号可以被省略</p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">empty = {}</span><br/><span class=\"line\">myint = 42;</span><br/><span class=\"line\">mystring = &#34;China&#34;;</span><br/><span class=\"line\">table = { [&#39;hi&#39;] = &#34;lua&#34;, from = mystring; [empty] = &#34;empty&#34;, [myint] = 100 }</span><br/><span class=\"line\">for k, v in pairs(table) do</span><br/><span class=\"line\">    print(k,v)</span><br/><span class=\"line\">end</span><br/></pre></td></tr></tbody></table></figure>\n<blockquote>\n<p>表是 Lua 中唯一的数据结构， 它可被用于表示普通数组、序列、符号表、集合、记录、图、树等等。 对于记录，Lua 使用域名作为索引。 语言提供了 a.name 这样的语法糖来替代 a[“name”] 这种写法以方便记录这种结构的使用。</p>\n</blockquote>\n<p>table[“k”]==table.k<br/>print(table.from)<br/>print(table[‘from’])</p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">array = {&#39;a&#39;, &#39;b&#39;, &#39;c&#39;}</span><br/><span class=\"line\">print (#array) -- 3 #计算长度</span><br/><span class=\"line\">for k,v in ipairs(array) do</span><br/><span class=\"line\">    print(k,v)</span><br/><span class=\"line\">end</span><br/><span class=\"line\">--1\ta</span><br/><span class=\"line\">--2\tb</span><br/><span class=\"line\">--3\tc</span><br/></pre></td></tr></tbody></table></figure>\n<p>ipairs 隐式索引，从一开始，索引都为正整数</p>\n<h3 id=\"函数-1\"><a href=\"#函数-1\" class=\"headerlink\" title=\"函数\"></a>函数</h3><figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/><span class=\"line\">9</span><br/><span class=\"line\">10</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span><span class=\"params\">(...)</span></span> <span class=\"comment\">-- any number of parameters</span></span><br/><span class=\"line\">  a,b = ...</span><br/><span class=\"line\">  <span class=\"built_in\">print</span>(a,b,...)</span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/><span class=\"line\">f(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>) <span class=\"comment\">-- 1 2 1 2 3</span></span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(args)</span></span></span><br/><span class=\"line\">    <span class=\"built_in\">print</span> (args.first .. args.last)</span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/><span class=\"line\">foo{first=<span class=\"string\">&#34;hello&#34;</span>, last=<span class=\"string\">&#34;world&#34;</span>}</span><br/></pre></td></tr></tbody></table></figure>\n<h3 id=\"元表及元方法\"><a href=\"#元表及元方法\" class=\"headerlink\" title=\"元表及元方法\"></a>元表及元方法</h3><blockquote>\n<p>Lua 中的每个值都可以有一个元表。 这个元表就是一个普通的 Lua 表， 它用于定义原始值在特定操作下的行为。 如果你想改变一个值在特定操作下的行为，你可以在它的元表中设置对应域。 例如，当你对非数字值做加操作时， Lua 会检查该值的元表中的 “__add” 域下的函数。 如果能找到，Lua 则调用这个函数来完成加这个操作。</p>\n</blockquote>","text":" Lua在设计上，从一开始就把简洁、高效、可移植性、可嵌入型、可扩展性等作为自己的目标。 数据类型 表、函数、线程、以及完全用户数据在 Lua 中被称为对象：变量并不真的持有它们的值，而仅保存了对这些对象的引用。 赋值、参数传递、函数返回，都是针对引用而不是针对值的操作， 这些操...","link":"","photos":[],"count_time":{"symbolsCount":"2.8k","symbolsTime":"3 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">数据类型</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">函数</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%A1%A8\"><span class=\"toc-text\">表</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AD%97%E7%AC%A6%E4%B8%B2\"><span class=\"toc-text\">字符串</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%A1%A8-1\"><span class=\"toc-text\">表</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%87%BD%E6%95%B0-1\"><span class=\"toc-text\">函数</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%85%83%E8%A1%A8%E5%8F%8A%E5%85%83%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">元表及元方法</span></a></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"python和lua数据类型的比较","uid":"ccf67b3289618f0a2dc00d8aa2b25e73","slug":"zl/2016-01-01-734_python和lua数据类型的比较","date":"2024-04-03T03:47:35.983Z","updated":"2024-04-03T03:47:35.984Z","comments":true,"path":"api/articles/zl/2016-01-01-734_python和lua数据类型的比较.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":" &lt;a href=&quot;/2015/07/11/redis_hiredis_install_tutorial/&quot; rel=&quot;next&quot; title=&quot;redis和hiredis安装教程&quot;&gt; &lt;i class...","link":"","photos":[],"count_time":{"symbolsCount":"4.1k","symbolsTime":"4 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Luajit反编译之探索记","uid":"22062178d617aba31a34cf58f7508d61","slug":"zl/2016-01-01-732_Luajit反编译之探索记","date":"2024-04-03T03:47:35.977Z","updated":"2024-04-03T03:47:35.982Z","comments":true,"path":"api/articles/zl/2016-01-01-732_Luajit反编译之探索记.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":" 由于工作需求，要反编译一个luajit编译过的文件。百度反编译luajit，得到的信息是目前没有此类成熟的反编译器。所以，如果你用luajit编译了代码，基本上不用担心被别人破解（2015.12）。 虽然没有luaj反编译器，但是不代表反编译不可能。至少，人肉反编译是可以的，哈...","link":"","photos":[],"count_time":{"symbolsCount":"2.3k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}