{"title":"lua c api","uid":"a088e52eeedd5a2e08a78395ae73ef54","slug":"zl/2016-01-01-968_lua c api ","date":"2024-04-03T03:47:36.231Z","updated":"2024-04-03T03:47:36.231Z","comments":true,"path":"api/articles/zl/2016-01-01-968_lua c api .json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<h2 id=\"一-概述\">一 概述</h2> <p>很多情况下有这种需求：在特定的框架中针对不同的业务做少量修改。使用 <code class=\"highlighter-rouge\">C/C++</code> 开发稳定的框架，调用针对不同业务开发的 <code class=\"highlighter-rouge\">Lua</code> 函数可以实现需求。其实从 <code class=\"highlighter-rouge\">C/C++</code> 调用 <code class=\"highlighter-rouge\">Lua</code> 函数非常简单，<strong>调用时将 <code class=\"highlighter-rouge\">Lua</code> 函数压入栈、将函数参数压入栈，调用 <code class=\"highlighter-rouge\">lua_pcall</code> 完成调用；调用后从栈获得调用函数返回结果</strong>。</p> <h2 id=\"二-示例\">二 示例</h2> <h3 id=\"1-程序示例\">1. 程序示例</h3> <div class=\"language-c highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"cp\">#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;unistd.h&gt;\n#include &lt;string.h&gt;\n</span>\n<span class=\"cp\">#include &#34;lua.h&#34;\n#include &#34;lauxlib.h&#34;\n#include &#34;lualib.h&#34;\n</span>\n<span class=\"cm\">/******************************************************************************\n * 函数结构体定义\n ******************************************************************************/</span>\n<span class=\"k\">typedef</span> <span class=\"k\">struct</span> <span class=\"n\">function_buf_s</span> <span class=\"p\">&#123;</span>\n    <span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"n\">name</span><span class=\"p\">;</span>  <span class=\"c1\">// 函数名\n</span>    <span class=\"kt\">int</span> <span class=\"n\">nargs</span><span class=\"p\">;</span>   <span class=\"c1\">// 参数数量\n</span>    <span class=\"kt\">int</span> <span class=\"n\">nret</span><span class=\"p\">;</span>    <span class=\"c1\">// 返回值数量\n</span>    <span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"n\">chunk</span><span class=\"p\">;</span> <span class=\"c1\">// 函数体\n</span><span class=\"p\">&#125;</span> <span class=\"n\">function_buf</span><span class=\"p\">;</span>\n<p><span class=\"c1\">// 此处 function 不应该使用 function f() … end 方式编写，写出的函数其实不会被执行<br />\n</span><span class=\"k\">static</span> <span class=\"n\">function_buf</span><br />\n<span class=\"n\">lua_function</span><span class=\"p\">[]</span> <span class=\"o\">=</span> <span class=\"p\">&#123;</span><br />\n<span class=\"p\">&#123;</span><span class=\"s\">&quot;sayhi&quot;</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span><br />\n<span class=\"s\">&quot;local name = …</span><span class=\"se\">n</span><span class=\"s\">&quot;</span><br />\n<span class=\"s\">&quot;return string.format('hi %s!', name)</span><span class=\"se\">n</span><span class=\"s\">&quot;</span><br />\n<span class=\"p\">&#125;,</span><br />\n<span class=\"p\">&#123;</span><span class=\"s\">&quot;echo&quot;</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span><br />\n<span class=\"s\">&quot;function echo(msg)</span><span class=\"se\">n</span><span class=\"s\">&quot;</span><br />\n<span class=\"s\">&quot;    return msg</span><span class=\"se\">n</span><span class=\"s\">&quot;</span><br />\n<span class=\"s\">&quot;end</span><span class=\"se\">n</span><span class=\"s\">&quot;</span><br />\n<span class=\"s\">&quot;local msg = …</span><span class=\"se\">n</span><span class=\"s\">&quot;</span><br />\n<span class=\"s\">&quot;return echo(msg)</span><span class=\"se\">n</span><span class=\"s\">&quot;</span><br />\n<span class=\"p\">&#125;,</span><br />\n<span class=\"p\">&#123;</span><span class=\"nb\">NULL</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"nb\">NULL</span><span class=\"p\">&#125;</span><br />\n<span class=\"p\">&#125;;</span></p>\n<p><span class=\"k\">static</span> <span class=\"kt\">int</span><br />\n<span class=\"nf\">sayHi</span><span class=\"p\">(</span><span class=\"n\">lua_State</span> <span class=\"o\">*</span><span class=\"n\">L</span><span class=\"p\">)</span> <span class=\"p\">&#123;</span></p>\n<pre><code>&lt;span class=&quot;n&quot;&gt;function_buf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lua_function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;\n\n&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;luaL_loadbuffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chunk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strlen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chunk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; \n                          &lt;span class=&quot;n&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;\n\n&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&#123;&lt;/span&gt;\n    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;luaL_error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#34;call loadbuffer fail ret:%d, code:%s&amp;#34;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; \n                      &lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chunk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;\n&lt;span class=&quot;p&quot;&gt;&#125;&lt;/span&gt;\n\n&lt;span class=&quot;n&quot;&gt;lua_pushstring&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#34;lua&amp;#34;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;\n&lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lua_pcall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;\n&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&#123;&lt;/span&gt;\n    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;luaL_error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#34;lua_pcall fail ret:%d %s&amp;#34;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; \n                      &lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lua_tostring&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;\n&lt;span class=&quot;p&quot;&gt;&#125;&lt;/span&gt;\n\n&lt;span class=&quot;c1&quot;&gt;// 输出类型\n</code></pre>\n<p></span>    <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&quot;typename %s</span><span class=\"se\">n</span><span class=\"s\">&quot;</span><span class=\"p\">,</span> <span class=\"n\">luaL_typename</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">));</span></p>\n<pre><code>&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lua_isstring&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&#123;&lt;/span&gt;\n    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;luaL_error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#34;lua_pcall ret not string&amp;#34;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;\n&lt;span class=&quot;p&quot;&gt;&#125;&lt;/span&gt;\n\n&lt;span class=&quot;c1&quot;&gt;// 函数执行结果在栈中，取出来再放入栈\n</code></pre>\n<p></span>    <span class=\"k\">const</span> <span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"n\">msg</span> <span class=\"o\">=</span> <span class=\"n\">lua_tostring</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">);</span><br />\n<span class=\"n\">lua_pop</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">);</span><br />\n<span class=\"n\">lua_pushfstring</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"s\">&quot;sayhi say:%s&quot;</span><span class=\"p\">,</span> <span class=\"n\">msg</span><span class=\"p\">);</span><br />\n<span class=\"k\">return</span> <span class=\"mi\">1</span><span class=\"p\">;</span><br />\n<span class=\"p\">}</span></p>\n<p><span class=\"cm\">/******************************************************************************</p>\n<ul class=\"lvl-0\">\n<li class=\"lvl-3\">\n<p>通用入口函数</p>\n</li>\n<li class=\"lvl-3\">\n<p>调用时首先将函数名压入栈，之后是其他参数<br />\n****************************************************************************<em><em>/</span><br />\n<span class=\"k\">static</span> <span class=\"kt\">int</span><br />\n<span class=\"nf\">common_entry</span><span class=\"p\">(</span><span class=\"n\">lua_State</span> <span class=\"o\"></em></span><span class=\"n\">L</span><span class=\"p\">)</span> <span class=\"p\">{</span><br />\n<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">lua_isstring</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">))</span> <span class=\"p\">{</span><br />\n<span class=\"k\">return</span> <span class=\"n\">luaL_error</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"s\">&quot;first arg should be function name, string type&quot;</span><span class=\"p\">);</span><br />\n<span class=\"p\">}</span><br />\n<span class=\"k\">const</span> <span class=\"kt\">char</span> <span class=\"o\"></em></span> <span class=\"n\">function_name</span> <span class=\"o\">=</span> <span class=\"n\">lua_tostring</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">);</span></p>\n<p><span class=\"n\">function_buf</span> <span class=\"o\">*</span><span class=\"n\">function</span> <span class=\"o\">=</span> <span class=\"n\">lua_function</span><span class=\"p\">;</span></p>\n<p><span class=\"k\">for</span> <span class=\"p\">(;</span><span class=\"n\">function</span><span class=\"o\">-&gt;</span><span class=\"n\">name</span><span class=\"p\">;</span> <span class=\"n\">function</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span><br />\n<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">strcmp</span><span class=\"p\">(</span><span class=\"n\">function</span><span class=\"o\">-&gt;</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">function_name</span><span class=\"p\">))</span> <span class=\"k\">break</span><span class=\"p\">;</span><br />\n<span class=\"p\">}</span><br />\n<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">function</span><span class=\"o\">-&gt;</span><span class=\"n\">name</span><span class=\"p\">)</span> <span class=\"p\">{</span><br />\n<span class=\"k\">return</span> <span class=\"n\">luaL_error</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"s\">&quot;not found:%s function in array&quot;</span><span class=\"p\">,</span> <span class=\"n\">function_name</span><span class=\"p\">);</span><br />\n<span class=\"p\">}</span></p>\n<p><span class=\"kt\">int</span> <span class=\"n\">ret</span> <span class=\"o\">=</span> <span class=\"n\">luaL_loadbuffer</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"n\">function</span><span class=\"o\">-&gt;</span><span class=\"n\">chunk</span><span class=\"p\">,</span> <span class=\"n\">strlen</span><span class=\"p\">(</span><span class=\"n\">function</span><span class=\"o\">-&gt;</span><span class=\"n\">chunk</span><span class=\"p\">),</span><br />\n<span class=\"n\">function</span><span class=\"o\">-&gt;</span><span class=\"n\">name</span><span class=\"p\">);</span></p>\n<p><span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">ret</span><span class=\"p\">)</span> <span class=\"p\">{</span><br />\n<span class=\"k\">return</span> <span class=\"n\">luaL_error</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"s\">&quot;call loadbuffer fail ret:%d, code:%s&quot;</span><span class=\"p\">,</span><br />\n<span class=\"n\">ret</span><span class=\"p\">,</span> <span class=\"n\">function</span><span class=\"o\">-&gt;</span><span class=\"n\">chunk</span><span class=\"p\">);</span><br />\n<span class=\"p\">}</span></p>\n<p><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"p\">;</span><br />\n<span class=\"k\">for</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">function</span><span class=\"o\">-&gt;</span><span class=\"n\">nargs</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span><br />\n<span class=\"n\">lua_pushstring</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"n\">lua_tostring</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">));</span><br />\n<span class=\"p\">}</span></p>\n<p><span class=\"n\">ret</span> <span class=\"o\">=</span> <span class=\"n\">lua_pcall</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"n\">function</span><span class=\"o\">-&gt;</span><span class=\"n\">nargs</span><span class=\"p\">,</span> <span class=\"n\">function</span><span class=\"o\">-&gt;</span><span class=\"n\">nret</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">);</span><br />\n<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">ret</span> <span class=\"o\">!=</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span><br />\n<span class=\"k\">return</span> <span class=\"n\">luaL_error</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"s\">&quot;lua_pcall fail ret:%d %s&quot;</span><span class=\"p\">,</span><br />\n<span class=\"n\">ret</span><span class=\"p\">,</span> <span class=\"n\">lua_tostring</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">));</span><br />\n<span class=\"p\">}</span></p>\n<p><span class=\"kt\">int</span> <span class=\"n\">nret</span> <span class=\"o\">=</span> <span class=\"n\">function</span><span class=\"o\">-&gt;</span><span class=\"n\">nret</span><span class=\"p\">;</span></p>\n<p><span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">i</span><span class=\"o\">=-</span><span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&gt;=</span> <span class=\"o\">-</span><span class=\"n\">nret</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">–</span><span class=\"p\">){</span><br />\n<span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&quot;ret:%d is:%s</span><span class=\"se\">n</span><span class=\"s\">&quot;</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">lua_tostring</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">));</span><br />\n<span class=\"p\">}</span></p>\n<p><span class=\"k\">return</span> <span class=\"n\">nret</span><span class=\"p\">;</span><br />\n<span class=\"p\">}</span></p>\n</li>\n</ul>\n<p><span class=\"k\">static</span> <span class=\"k\">const</span><br />\n<span class=\"k\">struct</span> <span class=\"n\">luaL_reg</span> <span class=\"n\">call_function_lib</span><span class=\"p\">[]</span> <span class=\"o\">=</span> <span class=\"p\">{</span><br />\n<span class=\"p\">{</span><span class=\"s\">&quot;sayHi&quot;</span><span class=\"p\">,</span> <span class=\"n\">sayHi</span><span class=\"p\">},</span><br />\n<span class=\"p\">{</span><span class=\"s\">&quot;common_entry&quot;</span><span class=\"p\">,</span> <span class=\"n\">common_entry</span><span class=\"p\">},</span><br />\n<span class=\"p\">{</span><span class=\"nb\">NULL</span><span class=\"p\">,</span> <span class=\"nb\">NULL</span><span class=\"p\">}</span><br />\n<span class=\"p\">};</span></p>\n<p><span class=\"cm\">/******************************************************************************</p>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>注册函数<br />\n*****************************************************************************<em>/</span><br />\n<span class=\"kt\">int</span><br />\n<span class=\"nf\">luaopen_call_function</span><span class=\"p\">(</span><span class=\"n\">lua_State</span> <span class=\"o\"></em></span><span class=\"n\">l</span><span class=\"p\">)</span> <span class=\"p\">{</span><br />\n<span class=\"n\">luaL_openlib</span><span class=\"p\">(</span><span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"s\">&quot;call_function&quot;</span><span class=\"p\">,</span> <span class=\"n\">call_function_lib</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">);</span><br />\n<span class=\"k\">return</span> <span class=\"mi\">1</span><span class=\"p\">;</span><br />\n<span class=\"p\">}</span><br />\n</code></pre></div></div> <p>程序中有两个示例，<code class=\"highlighter-rouge\">sayHi</code> 函数接收一个 <code class=\"highlighter-rouge\">string</code> 参数并返回一个 <code class=\"highlighter-rouge\">string</code> 参数；<code class=\"highlighter-rouge\">common_entry</code> 函数可以根据函数名选择相应的函数体进行执行，更加灵活。</p> <p><strong>在函数定义中需要注意，<code class=\"highlighter-rouge\">luaL_loadbuffer</code> 系列函数会将字符串当做程序段载入并放在栈顶，但是并未执行函数。如果载入的代码段是 <code class=\"highlighter-rouge\">function f()…end</code> 格式，使用 <code class=\"highlighter-rouge\">lua_pcall</code> 调用代码段时函数 <code class=\"highlighter-rouge\">f</code> 仅做了定义，未执行函数体。</strong></p> <h3 id=\"2-调用示例\">2. 调用示例</h3> <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$ </span>/usr/local/lua5.1.5/bin/lua <span class=\"nt\">-e</span> <span class=\"s2\">&quot;require 'call_function'; ret = call_function.sayHi('lua'); print(ret)&quot;</span><br />\ntypename string<br />\nsayhi say:hi lua!</p>\n</li>\n</ul>\n<p><span class=\"nv\">$ </span>/usr/local/lua5.1.5/bin/lua <span class=\"nt\">-e</span> <span class=\"s2\">&quot;require 'call_function'; ret = call_function.common_entry('echo','lua is cool'); print(ret)&quot;</span><br />\nret:1 is:lua is cool<br />\nlua is cool<br />\n</code></pre></div></div> <h2 id=\"三-函数说明\">三 函数说明</h2> <h3 id=\"1-lual_error\">1. <code class=\"highlighter-rouge\">luaL_error</code></h3> <div class=\"language-c highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">int</span> <span class=\"n\">luaL_error</span> <span class=\"p\">(</span><span class=\"n\">lua_State</span> <span class=\"o\"><em></span><span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">char</span> <span class=\"o\"></em></span><span class=\"n\">fmt</span><span class=\"p\">,</span> <span class=\"p\">…);</span><br />\n</code></pre></div></div> <p>触发错误，并使用 <code class=\"highlighter-rouge\">fmt</code> 与后续参数格式化输出错误消息字符串。<code class=\"highlighter-rouge\">luaL_error</code> 函数并不会退出，通常的是否用法为：</p> <div class=\"language-c highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">return</span> <span class=\"n\">luaL_error</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"p\">);</span><br />\n</code></pre></div></div> <h2 id=\"四-参考资料\">四 参考资料</h2> <p>-<a href=\"https://www.lua.org/pil/25.2.html\">programming in lua</a></p> <p>-<a href=\"https://www.lua.org/manual/5.1/manual.html#luaL_loadbuffer\">lua 5.1 手册</a></p></p>\n","text":"一 概述 很多情况下有这种需求：在特定的框架中针对不同的业务做少量修改。使用 C/C++ 开发稳定的框架，调用针对不同业务开发的 Lua 函数可以实现需求。其实从 C/C++ 调用 Lua 函数非常简单，调用时将 Lua 函数压入栈、将函数参数压入栈，调用 lua_pcall 完...","link":"","photos":[],"count_time":{"symbolsCount":"9.5k","symbolsTime":"9 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%80-%E6%A6%82%E8%BF%B0\"><span class=\"toc-text\">一 概述</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BA%8C-%E7%A4%BA%E4%BE%8B\"><span class=\"toc-text\">二 示例</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E7%A8%8B%E5%BA%8F%E7%A4%BA%E4%BE%8B\"><span class=\"toc-text\">1. 程序示例</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E8%B0%83%E7%94%A8%E7%A4%BA%E4%BE%8B\"><span class=\"toc-text\">2. 调用示例</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%89-%E5%87%BD%E6%95%B0%E8%AF%B4%E6%98%8E\"><span class=\"toc-text\">三 函数说明</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-lual_error\"><span class=\"toc-text\">1. luaL_error</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%9B%9B-%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99\"><span class=\"toc-text\">四 参考资料</span></a></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"nginx lua环境搭建","uid":"c26a259f6a63eaa978c3d360c8db4e6c","slug":"zl/2016-01-01-966_nginx lua环境搭建","date":"2024-04-03T03:47:36.231Z","updated":"2024-04-03T03:47:36.231Z","comments":true,"path":"api/articles/zl/2016-01-01-966_nginx lua环境搭建.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"安装nginx及搭建本地测试环境下载最新版的nginx $ cd /usr/local/src $ wget http://nginx.org/download/nginx-1.11.3.tar.gz $ tar -zxvf nginx-1.11.3.tar.gz 安装Luaji...","link":"","photos":[],"count_time":{"symbolsCount":"2k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"lua三种字符串拼接性能分析","uid":"64d3ce23772c06fa9d2f5cc9cddb7b13","slug":"zl/2016-01-01-969_lua三种字符串拼接性能分析","date":"2024-04-03T03:47:36.231Z","updated":"2024-04-03T03:47:36.232Z","comments":true,"path":"api/articles/zl/2016-01-01-969_lua三种字符串拼接性能分析.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"说明lua中提供了3中字符串拼接函数，测试在日常使用情况下，各种拼接字符串的性能对比。 测试环境操作系统：Debian GNU/Linux 8CPU：Intel(R) Xeon(R) CPU E5-2640 v2 @ 2.00GHz内存：64Glua环境：LuaJIT-2.1.0...","link":"","photos":[],"count_time":{"symbolsCount":"7.1k","symbolsTime":"6 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}