{"title":"LUA 与 C","uid":"d2fdb69df2548aac5f06fae8b66d3deb","slug":"zl/2016-01-01-658_LUA 与 C","date":"2024-04-03T03:47:35.879Z","updated":"2024-04-03T03:47:35.879Z","comments":true,"path":"api/articles/zl/2016-01-01-658_LUA 与 C.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<h3 id=\"栈\"><a href=\"#栈\" class=\"headerlink\" title=\"栈\"></a>栈</h3><ul>\n<li>使用栈进行lua和C数据交换</li>\n<li>要将一个值传给lua，需要先将该值压入栈，然后调用lua api函数，lua会从栈中获取该值并从栈中弹出</li>\n<li><p>入栈API</p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">void lua_pushnil(lua_State *);</span><br/><span class=\"line\">void lua_pushboolean(lua_State *, int bool);</span><br/><span class=\"line\">void lua_pushstring(lua_State *, const char *s);</span><br/><span class=\"line\">void lua_pushlstring(lua_State *, const char *s, size_t len);</span><br/><span class=\"line\">void lua_pushnumber(lua_State *, lua_Number n);// 双精度浮点</span><br/><span class=\"line\">void lua_pushinteger(lua_State *, lua_Integer n);// 整型，足以存储大型字符串长度，定义为ptrdiff_t类型</span><br/></pre></td></tr></tbody></table></figure>\n</li>\n<li><p>栈大小：默认20(LUA_MINSTACK定义），通过如下代码检查栈大小</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">int lua_checkstack(lua_State *, int sz)</span><br/></pre></td></tr></tbody></table></figure>\n</li>\n</ul>\n<h3 id=\"查询\"><a href=\"#查询\" class=\"headerlink\" title=\"查询\"></a>查询</h3><ul>\n<li><p>通过索引查找栈中元素：1栈底，2次栈底，-1表示栈顶，-2次栈顶</p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">lua_tostring(L, -1);// 将栈顶元素弹出转换为string</span><br/></pre></td></tr></tbody></table></figure>\n</li>\n<li><p>检查栈元素类型</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">int lua_isstring(lua_State *L, int index);</span><br/><span class=\"line\">int lua_isnumber(lua_State *L, int index);</span><br/></pre></td></tr></tbody></table></figure>\n</li>\n<li><p>栈元素转换</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">int lua_toboolean(lua_State *L, int index);</span><br/></pre></td></tr></tbody></table></figure>\n</li>\n<li><p>不要在C函数之外调用在C函数内获取的指向字符串的指针（函数退出清理栈）</p>\n</li>\n</ul>\n<h3 id=\"C操作栈函数列表\"><a href=\"#C操作栈函数列表\" class=\"headerlink\" title=\"C操作栈函数列表\"></a>C操作栈函数列表</h3><figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">int lua_getglobal(L, const <span class=\"built_in\">char</span> *name);//全局变量name值压栈,并返回该值类型</span><br/><span class=\"line\">int <span class=\"built_in\">pcall</span>(L, int paramcount, int resultcount, int err_handler_stackindex);//先删除函数和参数，然后压入结果或者错误</span><br/></pre></td></tr></tbody></table></figure>\n<ul>\n<li><a href=\"https://cloudwu.github.io/lua53doc/manual.html\" target=\"_blank\" rel=\"noopener noreferrer\">云风翻译的lua5.3手册</a></li>\n</ul>\n<h3 id=\"C调用lua函数\"><a href=\"#C调用lua函数\" class=\"headerlink\" title=\"C调用lua函数\"></a>C调用lua函数</h3><ul>\n<li>待调用函数入栈，并压入参数，然后使用pcall调用，最后将结果从栈中弹出。<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(x, y)</span></span></span><br/><span class=\"line\">    reutrn x + y</span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/></pre></td></tr></tbody></table></figure>\n</li>\n</ul>\n<ul>\n<li>调用代码示例(前提需要打开库，并运行了以上lua代码）:<figure class=\"highlight c\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/><span class=\"line\">9</span><br/><span class=\"line\">10</span><br/><span class=\"line\">11</span><br/><span class=\"line\">12</span><br/><span class=\"line\">13</span><br/><span class=\"line\">14</span><br/><span class=\"line\">15</span><br/><span class=\"line\">16</span><br/><span class=\"line\">17</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">callluaFunc</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span>  y)</span></span></span><br/><span class=\"line\"><span class=\"function\"></span>{</span><br/><span class=\"line\">    <span class=\"keyword\">int</span> ret = <span class=\"number\">0</span>;</span><br/><span class=\"line\">    lua_getglobal(L, <span class=\"string\">&#34;luaf&#34;</span>);</span><br/><span class=\"line\">    lua_pushnumber(L, x);</span><br/><span class=\"line\">    lua_pushnumber(L, y);</span><br/><span class=\"line\">    <span class=\"comment\">// 执行调用，2个参数1个结果</span></span><br/><span class=\"line\">    <span class=\"keyword\">if</span> (lua_pcall(L, <span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>))</span><br/><span class=\"line\">        error(L, <span class=\"string\">&#34;error running function:%s&#34;</span>, lua_tostring(L, <span class=\"number\">-1</span>));</span><br/><span class=\"line\">    <span class=\"comment\">// 检查结果</span></span><br/><span class=\"line\">    <span class=\"keyword\">if</span> (!lua_isnumber(L, <span class=\"number\">-1</span>))</span><br/><span class=\"line\">        error(L, <span class=\"string\">&#34;result need to be number&#34;</span>);</span><br/><span class=\"line\">    </span><br/><span class=\"line\">    ret = lua_tonumber(L, <span class=\"number\">-1</span>));</span><br/><span class=\"line\">    lua_pop(L, <span class=\"number\">1</span>);</span><br/><span class=\"line\">    <span class=\"keyword\">return</span> ret;</span><br/><span class=\"line\">}</span><br/></pre></td></tr></tbody></table></figure>\n</li>\n</ul>\n<h3 id=\"LUA调用C\"><a href=\"#LUA调用C\" class=\"headerlink\" title=\"LUA调用C\"></a>LUA调用C</h3><ul>\n<li><p>typedef int (<em>lua_CFunction)(lua_State </em>L);// 返回压入栈中结果数量，方便与栈中其余值区分</p>\n</li>\n<li><p>调用前需要提前注册c函数</p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">void lua_pushfunction(L, lua_CFuntion);</span><br/></pre></td></tr></tbody></table></figure>\n</li>\n<li><p>示例：</p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">lua_pushfunction(L, c_function);// 压入函数</span><br/><span class=\"line\">lua_setglobal(L, &#34;cfunctionname&#34;);//出栈，将函数赋予全局变量cfuntionname中</span><br/></pre></td></tr></tbody></table></figure>\n</li>\n<li><p>require “myclib” 过程:链接动态库到lua，并寻找luaopen_myclib函数，将其注册为一个lua函数，然后调用它以打开模块</p>\n</li>\n</ul>\n<h3 id=\"userdata\"><a href=\"#userdata\" class=\"headerlink\" title=\"userdata\"></a>userdata</h3><ul>\n<li>lua_newuserdata<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">void lua_newuserdata(lua_State *L, size_t sz);</span><br/><span class=\"line\">这个函数分配一块指定大小的内存块， 把内存块地址作为一个完全用户数据压栈， 并返回这个地址。 宿主程序可以随意使用这块内存</span><br/></pre></td></tr></tbody></table></figure>\n</li>\n</ul>","text":"栈 使用栈进行lua和C数据交换 要将一个值传给lua，需要先将该值压入栈，然后调用lua api函数，lua会从栈中获取该值并从栈中弹出 入栈API 123456void lua_pushnil(lua_State *);void lua_pushboolean(lua_Sta...","link":"","photos":[],"count_time":{"symbolsCount":"1.9k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%A0%88\"><span class=\"toc-text\">栈</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%9F%A5%E8%AF%A2\"><span class=\"toc-text\">查询</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#C%E6%93%8D%E4%BD%9C%E6%A0%88%E5%87%BD%E6%95%B0%E5%88%97%E8%A1%A8\"><span class=\"toc-text\">C操作栈函数列表</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#C%E8%B0%83%E7%94%A8lua%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">C调用lua函数</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#LUA%E8%B0%83%E7%94%A8C\"><span class=\"toc-text\">LUA调用C</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#userdata\"><span class=\"toc-text\">userdata</span></a></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Programming in Lua(Thrid Edition)笔记","uid":"a502732b8dc58224e972b6c53538b8c4","slug":"zl/2016-01-01-65_Programming in Lua(Thrid Edition)笔记","date":"2024-04-03T03:47:35.884Z","updated":"2024-04-03T03:47:35.884Z","comments":true,"path":"api/articles/zl/2016-01-01-65_Programming in Lua(Thrid Edition)笔记.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"4 Statements 多重赋值：先求出所有值，再赋值 交换两值 1x, y = y, x 多余的变量赋nil，多余的值丢弃 用局部变量保护全局变量 1local foo = foo if-then-elseif-else-end充当switch 1234567891011if...","link":"","photos":[],"count_time":{"symbolsCount":"1.3k","symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"高并发抢红包方案－－基于Redis lua方案","uid":"f7b1183de71bcce803607b6784e42ffe","slug":"zl/2016-01-01-659_高并发抢红包方案－－基于Redis lua方案","date":"2024-04-03T03:47:35.879Z","updated":"2024-04-03T03:47:35.883Z","comments":true,"path":"api/articles/zl/2016-01-01-659_高并发抢红包方案－－基于Redis lua方案.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":" Redis 2.6 内置Lua解释器 Lua由标准C编写而成，代码简洁优美，完整的Lua解释器不过200k，极易嵌入到其他程序。 Lua和C/C++代码交互容易， 性能和灵活性大大提高。 可作为扩展脚本，也可以作为普通的配置文件，实现复杂的配置逻辑，并且容易理解和维护. Red...","link":"","photos":[],"count_time":{"symbolsCount":"1.2k","symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}