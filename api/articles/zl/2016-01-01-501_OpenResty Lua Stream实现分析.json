{"title":"OpenResty Lua Stream实现分析","uid":"a59ecef36dd992daa5cb5fac1da10766","slug":"zl/2016-01-01-501_OpenResty Lua Stream实现分析","date":"2024-04-03T03:47:35.781Z","updated":"2024-04-03T03:47:35.782Z","comments":true,"path":"api/articles/zl/2016-01-01-501_OpenResty Lua Stream实现分析.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<p>OpenResty（以下简称OR）是Lua应用的典范，其最大的亮点在于，使用Lua协程搭配上异步非阻塞的IO，这样开发者可以使用同步方式来编写代码，而底层IO调度、唤醒等操作留给C编写的引擎层。</p>\n<p>实际上，使用类协程的技术，让异步操作同步化，已经有很多相关的技术了，比如腾讯的libco、百度的brpc都是自己在C层面实现了类协程的机制，不过这一类技术用的最广泛的还是OR。市面上分析OR内部实现的文章并不算很多，所以这段时间研究了一下OR的实现。</p>\n<p>OR内部，其实是分7层HTTP的ngx_lua模块，以及四层TCP的lua_stream实现，两者在很多部分都很相近，以下分析以4层的lua_stream来解释，对应的版本是openresty-1.13.6.1和ngx_stream_lua-0.0.3的实现。</p>\n<p>既然OR在这里选择了使用协程来将用户的异步操作同步化，那么实际上内部其实实现了一个简易版本的操作系统内核的“CPU调度”，其中一个一个的协程就是CPU调度单位，因此在这里分为几部分来分析：</p>\n<ul>\n<li>维护协程的数据结构。</li>\n<li>创建新协程的时候如何进行初始化？</li>\n<li>协程调度算法？</li>\n<li>如何将异步操作同步化？</li>\n</ul>\n<p>在这里，先列举出来OR中与“调度”相关的核心数据结构和函数：</p>\n<table>\n<thead>\n<tr>\n<th>调度相关核心组件</th>\n<th>数据结构或函数</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>调度单元</td>\n<td>Lua协程（lua_State）</td>\n</tr>\n<tr>\n<td>保存协程信息</td>\n<td>ngx_stream_lua_co_ctx_t</td>\n</tr>\n<tr>\n<td>当前调度协程信息</td>\n<td>ngx_stream_lua_ctx_t.cur_co_ctx成员，指向一个ngx_stream_lua_co_ctx_t类型指针</td>\n</tr>\n<tr>\n<td>调度函数</td>\n<td>ngx_stream_lua_run_thread</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"协程的维护\">协程的维护</h1>\n<p>OR中有以下两种场景能够创建出来一个协程：</p>\n<ul>\n<li>一个tcp请求自动对应一个协程。这种场景用户不能控制，即默认就是这么实现的，当收到一个TCP请求默认创建出来一个协程与之绑定。</li>\n<li>Lua代码内部显示调用thread.spawn函数创建一个用户线程时。与前者不同，这种场景就是用户可以自己控制的。</li>\n</ul>\n<p>lua stream内部，协程相关的数据结构存储在ngx_stream_lua_co_ctx_t中，既然OR里面使用协程来模拟用户线程，不难想象这个数据结构内部应该有以下的成员：</p>\n<ul>\n<li>维护协程内部栈关系的数据。由于OR采用了Lua协程，这部分当然就是留给Lua协程来处理了。</li>\n<li>保存协程状态的数据。</li>\n<li>维护协程之间关系的数据，比如父子协程、僵尸子协程，等等。</li>\n</ul>\n<p>下面简单的看一下其成员：</p>\n<ul>\n<li>void *data：存储用户相关数据。</li>\n<li>lua_State *co：存储Lua协程指针。</li>\n<li>ngx_stream_lua_co_ctx_t *parent_co_ctx：存储父协程指针。</li>\n<li>ngx_stream_lua_posted_thread_t *zombie_child_threads：将该协程管理的僵尸子进程放在这个队列中。</li>\n<li>int co_ref：在Lua的registry表中对应该协程指针的引用值。</li>\n<li>unsigned waited_by_parent：为1的情况下表示该协程的父协程在等待该协程的退出。</li>\n<li>unsigned co_status：当前协程状态。</li>\n<li>unsigned is_uthread：为1的情况下表示该协程是用户线程，即上面提到的场景2创建出来的协程。</li>\n<li>unsigned thread_spawn_yielded：为1的情况下表示当前协程是由于创建了用户线程（前面的场景2）才让出的执行权。</li>\n</ul>\n<p><img src=\"https://www.codedump.info//media/imgs/20190501-lua-stream/ngx_stream_lua_co_ctx_t.png\" alt=\"ngx_stream_lua_co_ctx_t\" title=\"ngx_stream_lua_co_ctx_t\"/></p>\n<p>另外，还有一个全局变量ngx_stream_lua_ctx_t，其中的cur_co_ctx指针指向当前被调度执行的ngx_stream_lua_co_ctx_t指针。</p>\n<h1 id=\"协程的初始化\">协程的初始化</h1>\n<p>上一部分提到了创建协程的两种场景，这里就来分析这两种场景下面协程的初始化。</p>\n<h2 id=\"新建立连接的协程\">新建立连接的协程</h2>\n<p>OR通过在nginx配置文件中填写”content_by_lua_block”等，来配置新建一个连接时对应的Lua脚本，这种场景下OR会默认创建出来一个Lua协程来执行这段脚本代码。</p>\n<p>对应创建Lua协程的代码在函数ngx_stream_lua_new_thread中，下面来分析这个函数的流程。</p>\n<p>OR中需要在Registry表中存储每个创建出来的Lua协程的reference，这个存储协程的表在Registry表中对应的key是全局变量ngx_stream_lua_coroutines_key的指针，因此下面这段代码就是从Registry表中查询这个表返回到栈顶：</p>\n<pre><code class=\"language-C\">lua_pushlightuserdata(L, &amp;ngx_stream_lua_coroutines_key);\nlua_rawget(L, LUA_REGISTRYINDEX);\n</code></pre>\n<p>接着下来就是创建了一个新的协程，同时初始化其全局表：</p>\n<pre><code class=\"language-C\">// 创建Lua协程\nco = lua_newthread(L);\n// 创建该协程的全局表\nngx_stream_lua_create_new_globals_table(co, 0, 0);\n// 再创建一个新表\nlua_createtable(co, 0, 1);\n// 拿到全局表\nngx_stream_lua_get_globals_table(co);\n// 全局表的__index指向新创建的表\nlua_setfield(co, -2, &#34;__index&#34;);\n// 全局表的meta table指向新创建的表\nlua_setmetatable(co, -2);\n// set 全局表回去\nngx_stream_lua_set_globals_table(co);\n</code></pre>\n<p>从上面的代码可以看出，新创建的协程，其全局表目前是一个空表。</p>\n<p>此时的Lua虚拟机栈顶情况如下图所示：</p>\n<p><img src=\"https://www.codedump.info//media/imgs/20190501-lua-stream/ngx_stream_lua_new_thread.png\" alt=\"ngx_stream_lua_new_thread\" title=\"ngx_stream_lua_new_thread\"/></p>\n<p>由于上面的第一步已经将Registry表中存储Lua协程的表压入了Lua栈顶，而此时新创建的协程也在栈上了，于是下面一步就是在Lua虚拟机中创建一个reference保存这个新创建的协程：</p>\n<pre><code class=\"language-C\">*ref = luaL_ref(L, -2);\n\nif (*ref == LUA_NOREF) &#123;\n    lua_settop(L, base);  /* restore main thread stack */\n    return NULL;\n&#125;\n</code></pre>\n<p>最后恢复堆栈：</p>\n<pre><code class=\"language-C\">lua_settop(L, base);\n</code></pre>\n<p>以上这些步骤，还只是创建一个什么都不能做的Lua协程，返回这个协程之后，还需要把入口函数放入到协程中，来看函数ngx_stream_lua_content_by_chunk接下来的工作。</p>\n<pre><code class=\"language-C\">// 将lua虚拟机VM的入口closure move到新创建的协程上面，这样协程就有了虚拟机已经解析完毕的代码了\nlua_xmove(L, co, 1);\n// 拿到全局表\nngx_stream_lua_get_globals_table(co);\n// 入口函数的环境表为全局表\nlua_setfenv(co, -2);\n</code></pre>\n<p>以上工作将在配置中的Lua脚本解析之后的入口函数移动到新创建的Lua协程中，同时还配置了该入口函数的环境表为Lua协程的环境表。</p>\n<p>到了这里，协程已经创建出来并且有入口函数了，下面需要做的就是让它能运行起来，让调度器能够调度它运行：</p>\n<pre><code class=\"language-C\">// 保存当协程执行环境中\nctx-&gt;cur_co_ctx = &amp;ctx-&gt;entry_co_ctx;\nctx-&gt;cur_co_ctx-&gt;co = co;\nctx-&gt;cur_co_ctx-&gt;co_ref = co_ref;\n</code></pre>\n<h2 id=\"ngx-thread-spawn创建的协程\">ngx.thread.spawn创建的协程</h2>\n<p>OR中还有另一种场景也可以创建协程，在OR中这种情况被称为用户线程（user thread），对应的API是ngx.thread.spawn，其调用形式是这样的：</p>\n<pre><code>ngx.thread.spawn(入口函数，[函数参数])\n</code></pre>\n<p>即第一个参数就是新创建的用户线程的入口函数，接下来如果还有参数的话就是传入到这个线程入口函数中的函数参数。</p>\n<p>ngx.thread.spawn对应的实现是函数ngx_stream_lua_uthread_spawn，接下来看这个函数的实现。</p>\n<h3 id=\"ngx-stream-lua-coroutine-create-helper\">ngx_stream_lua_coroutine_create_helper</h3>\n<p>函数首先会调用ngx_stream_lua_coroutine_create_helper函数创建一个新的Lua协程，所以这里先看看这个函数。</p>\n<p>这里需要首先说明一点，前面在接收连接创建协程的场景中，新创建协程的父协程是Lua虚拟机（也就是Lua主线程），而在创建用户线程这个场景中，因为是在Lua代码中调用spawn创建用户线程的，所以在这里新创建的协程其父协程也是一个协程而不是Lua虚拟机。</p>\n<p>因此在ngx_stream_lua_coroutine_create_helper函数中，首先要做的就是拿到Lua虚拟机：</p>\n<pre><code class=\"language-C\">// 拿到进程的Lua虚拟机\nvm = ngx_stream_lua_get_lua_vm(r, ctx);\n</code></pre>\n<p>需要注意的是，在本函数中的以下三个lua_State*变量分别是：</p>\n<ul>\n<li>vm：进程级别的Lua虚拟机。</li>\n<li>L：父协程指针。</li>\n<li>co：新创建出来的协程指针。</li>\n</ul>\n<p>而同样是因为这个用户线程是有父协程的，所以与前面新创建连接场景还有一点不同的是，它的出生环境并不是完全干净的，而是已经有了父协程的环境，因此紧跟着下来就是要把父协程的环境保存到新创建的协程中：</p>\n<pre><code class=\"language-C\">/* make new coroutine share globals of the parent coroutine.\n * NOTE: globals don&#39;t have to be separated! */\n// 拿到父协程的全局表\nngx_stream_lua_get_globals_table(L);\n// 移动到新创建的协程co中\nlua_xmove(L, co, 1);\n// 写入新协程的全局表\nngx_stream_lua_set_globals_table(co);\n</code></pre>\n<p>由于创建新协程是在Lua虚拟机完成的，此时需要把它移动到父协程中：</p>\n<pre><code class=\"language-C\">// 将新创建的协程从进程虚拟机，移动到父协程中\nlua_xmove(vm, L, 1);    /* move coroutine from main thread to L */\n</code></pre>\n<p>紧跟着就是将父协程的入口函数移动到新创建的协程了：</p>\n<pre><code class=\"language-C\">// 将父协程L的入口函数压入栈中\nlua_pushvalue(L, 1);    /* copy entry function to top of L*/\n// 移动到新创建的协程中\nlua_xmove(L, co, 1);    /* move entry function from L to co */\n</code></pre>\n<h3 id=\"初始化uthread\">初始化uthread</h3>\n<p>以上已经分析了ngx_stream_lua_coroutine_create_helper函数的实现了， 可以看到，ngx_stream_lua_coroutine_create_helper调用返回之后，父协程L是这样的：</p>\n<ul>\n<li>L栈顶是新创建的协程指针。</li>\n<li>协程的入口函数从父协程L中拷贝。</li>\n</ul>\n<p>接着继续分析ngx_stream_lua_uthread_spawn的实现了。</p>\n<p>以上只是创建了协程，同时协程入口函数还是父协程的，而不是ngx.thread.spawn函数传入的，因此接下来就是将真正的用户线程入口函数以及参数传递给协程。</p>\n<p>不过在此之前，仍然是在registry表中保存一个该协程的reference：</p>\n<pre><code class=\"language-C\">/* anchor the newly created coroutine into the Lua registry */\n// 把新创建的协程写入Lua registry表中\n// 将ngx_stream_lua_coroutines_key的地址压入栈中\nlua_pushlightuserdata(L, &amp;ngx_stream_lua_coroutines_key);\n// 从registry表中查询该地址，registry表中该地址对应的一个数组，用于存储coroutine的\n\nlua_rawget(L, LUA_REGISTRYINDEX);\n\n// 此时栈顶是查询返回的值，即ngx_stream_lua_coroutines_key对应的数组\n// 栈顶-1位置是新协程\n\n// 压入协程的值\nlua_pushvalue(L, -2);\n// -2位置目前是前面那个表了，于是这里得到了这个coroutine在表中的索引值\ncoctx-&gt;co_ref = luaL_ref(L, -2);\n\n// 栈顶位置：存储协程的表\n// 栈顶位置 - 1：协程值\n// 因此下面的操作弹出这个表\nlua_pop(L, 1);\n</code></pre>\n<p>紧跟着就是初始化运行环境了：</p>\n<p>下面这一段代码，首先调用lua_replace函数将入口函数移动到栈顶，然后将传入ngx.thread.spawn函数的参数中，除去第一个线程入口函数之外的其他参数移动到新创建协程中。</p>\n<p><img src=\"https://www.codedump.info//media/imgs/20190501-lua-stream/ngx.thread.spawn.png\" alt=\"ngx.thread.spawn\" title=\"ngx.thread.spawn\"/></p>\n<pre><code class=\"language-C\">if (n &gt; 1) &#123;\n    // 由于lua函数压栈顺序是从左到右\n    // 因此base位置的就是压入的第一个参数，而spawn的第一个参数就是入口函数\n    // 所以这里的工作，就是把线程入口函数移动到栈顶\n    lua_replace(L, 1);\n    // 将L栈顶的元素移动到协程中，这一步就是把除去线程入口函数的其他参数移动到新创建的协程\n    lua_xmove(L, coctx-&gt;co, n - 1);\n&#125;\n</code></pre>\n<p>接下来设置协程上下文之间的父子关系，同时将新创建的协程变成下一步被调度执行的协程：</p>\n<pre><code class=\"language-C\">// 保存用户线程的父协程上下文为当前协程\ncoctx-&gt;parent_co_ctx = ctx-&gt;cur_co_ctx;\n// 切换当前协程为新创建的协程\nctx-&gt;cur_co_ctx = coctx;\n</code></pre>\n<p>最后，由于ngx.thread.spawn函数返回的参数是创建好的协程，因此最后返回创建好的协程:</p>\n<pre><code class=\"language-C\">// 将原协程的执行权切换出去，这里的参数1是新创建的协程\n// 也就是说，这里返回新创建的协程\nreturn lua_yield(L, 1);\n</code></pre>\n<h1 id=\"协程的调度\">协程的调度</h1>\n<p>以上讲解了两种创建协程的场景，现在来分析协程的调度，调度集中在函数ngx_stream_lua_run_thread，下面来分析这个函数的实现。</p>\n<p>协程的调度主要依赖于ngx_stream_lua_ctx_t的cur_co_ctx指针，调度时就是从这个指针中拿到待调度的Lua协程，然后执行lua_resume函数来调度协程运行。</p>\n<p><img src=\"https://www.codedump.info//media/imgs/20190501-lua-stream/ngx_stream_lua_run_thread-main.png\" alt=\"ngx_stream_lua_run_thread-main\" title=\"ngx_stream_lua_run_thread-main\"/></p>\n<h2 id=\"异常保护\">异常保护</h2>\n<p>对于一个“内核”而言，哪怕是再简陋，其也应该做到：无论被调度的程序出现了什么错误，都应该影响整个系统的继续运行，而应该在出错的时候将出错信息打印出来。</p>\n<p>所以在ngx_stream_lua_run_thread内部，就做了这样的异常保护，用一个宏封装的setjmp、longjmp包住了协程的调度执行：</p>\n<pre><code class=\"language-C\">// 注册vm panic回调函数\nlua_atpanic(L, ngx_stream_lua_atpanic);\n\nNGX_LUA_EXCEPTION_TRY /* setjmp保存环境 */ &#123;\n  // 调度执行协程代码\n&#125; NGX_LUA_EXCEPTION_CATCH &#123;\n  dd(&#34;nginx execution restored&#34;);\n&#125;\n</code></pre>\n<p>vm panic的回调函数ngx_stream_lua_atpanic如下：</p>\n<pre><code class=\"language-C\">int\nngx_stream_lua_atpanic(lua_State *L)\n&#123;\n#ifdef NGX_LUA_ABORT_AT_PANIC\n  abort();\n#else\n  u_char                  *s = NULL;\n  size_t                   len = 0;\n\n  if (lua_type(L, -1) == LUA_TSTRING) &#123;\n    s = (u_char *) lua_tolstring(L, -1, &amp;len);\n  &#125;\n\n  if (s == NULL) &#123;\n    s = (u_char *) &#34;unknown reason&#34;;\n    len = sizeof(&#34;unknown reason&#34;) - 1;\n  &#125;\n\n  ngx_log_stderr(0, &#34;lua atpanic: Lua VM crashed, reason: %*s&#34;, len, s);\n  ngx_quit = 1;\n\n  /*  restore nginx execution */\n  NGX_LUA_EXCEPTION_THROW(1);\n\n  /* impossible to reach here */\n#endif\n&#125;\n</code></pre>\n<p>可以看到，vm panic的回调函数做的事情无非就是两件：</p>\n<ul>\n<li>打印出错信息。</li>\n<li>调用NGX_LUA_EXCEPTION_THROW恢复异常堆栈。</li>\n</ul>\n<p>其中，这几个宏的定义如下：</p>\n<pre><code class=\"language-C\">#define NGX_LUA_EXCEPTION_TRY                                               \n    if (setjmp(ngx_stream_lua_exception) == 0)\n\n#define NGX_LUA_EXCEPTION_CATCH                                             \n    else\n\n#define NGX_LUA_EXCEPTION_THROW(x)                                          \n    longjmp(ngx_stream_lua_exception, (x))\n</code></pre>\n<h2 id=\"调度核心\">调度核心</h2>\n<p>接下来看协程调度的核心代码，也就是前面异常保护包住的那部分代码。</p>\n<p>主要分为如图的几种情况:</p>\n<p><img src=\"https://www.codedump.info//media/imgs/20190501-lua-stream/ngx_stream_lua_run_thread.png\" alt=\"ngx_stream_lua_run_thread\" title=\"ngx_stream_lua_run_thread\"/></p>\n<h3 id=\"lua-yield\">LUA_YIELD</h3>\n<p>lua通过lua_resume函数来执行一个协程的代码，大部分时候这个函数的返回值是LUA_YIELD，即协程让出了执行权。而让出执行权，又有以下几种可能的场景：</p>\n<ul>\n<li>等待IO，比如要读4字节的数据，而现在并没有这么多数据可读，于是这个协程只能让出执行权，等满足条件之后再被触发调用。</li>\n<li>协程内部调用了ngx.thread.spawn函数，这时候做为父协程也会让出执行权给新创建的子协程执行。</li>\n<li>Lua代码调用了coroutine.resume。</li>\n<li>Lua代码调用了coroutine.yield。</li>\n</ul>\n<p>以下就这几种情况逐一进行分析。</p>\n<h4 id=\"等待io场景\">等待IO场景</h4>\n<p>OR中等待IO的场景很多，不可能逐一分析完毕，但是背后的原理其实差不多：</p>\n<ul>\n<li>记录下来IO被触发的条件，等待被唤醒IO之时判断是否满足条件。</li>\n<li>如果满足条件，将该协程上下文对象保存到ngx_stream_lua_ctx_t-&gt;cur_co_ctx中，等待下一次调用ngx_stream_lua_run_thread时被调度执行。</li>\n</ul>\n<p>下面以ngx.socker.tcp.receive函数为例，这个函数的实现是ngx_stream_lua_socket_tcp_receive函数。</p>\n<p>由于这个API是创建出一个向后端upstream的连接，所以有一个对应的ngx_stream_lua_socket_tcp_upstream_t与之对应。因此这里的做法就是在这个upstream中记录下来下次被触发时的一些状态参数：</p>\n<pre><code class=\"language-C\">u-&gt;input_filter = ngx_stream_lua_socket_read_chunk;\nu-&gt;length = (size_t) bytes;\nu-&gt;rest = u-&gt;length;\n</code></pre>\n<p>这里的u就是ngx_stream_lua_socket_tcp_upstream_t指针，在这里设置了input_filter回调函数，在下一次IO被触发回调时自然会走到这个函数，另外rest成员中保存了这次调用receive函数传入的长度，而在ngx_stream_lua_socket_read_chunk函数中：</p>\n<pre><code class=\"language-C\">if (bytes &gt;= (ssize_t) u-&gt;rest) &#123;\n\n    u-&gt;buf_in-&gt;buf-&gt;last += u-&gt;rest;\n    b-&gt;pos += u-&gt;rest;\n    u-&gt;rest = 0;\n\n    return NGX_OK;\n&#125;\n</code></pre>\n<p>即只要当前读入缓冲区的数据比上一次保存的rest大，说明满足唤醒这个协程的条件，返回NGX_OK。</p>\n<p>在函数ngx_stream_lua_socket_tcp_read中，当input_filter返回NGX_OK时，会调用ngx_stream_lua_socket_handle_read_success，这里将协程上下文的ngx_stream_lua_co_ctx_t指针保存到ngx_stream_lua_ctx_t-&gt;cur_co_ctx中，这样下一次调用ngx_stream_lua_run_thread就会以这个协程来进行调度。</p>\n<h4 id=\"父协程出让执行权场景\">父协程出让执行权场景</h4>\n<p>父协程在调用ngx.thread.spawn创建出子协程之后，就让出了执行权，这一点在前面分析ngx.thread.spawn函数已经提到过了。</p>\n<p>由于ngx.thread.spawn函数的返回值是新创建的协程，因此此时拿到父协程传递进来的线程参数，继续下一次lua_resume执行：</p>\n<pre><code class=\"language-C\">case NGX_STREAM_LUA_USER_THREAD_RESUME: // lua代码中创建了用户线程\n\n  ngx_log_debug0(NGX_LOG_DEBUG_STREAM, r-&gt;connection-&gt;log, 0,\n    &#34;lua user thread resume&#34;);\n\n  // 设置为NGX_STREAM_LUA_USER_CORO_NOP\n  ctx-&gt;co_op = NGX_STREAM_LUA_USER_CORO_NOP;\n  // 此时的ctx-&gt;cur_co_ctx-&gt;co是由thread.spawn创建的用户线程\n  // 以下这里得到传入这个用户线程的函数参数数量\n  // -1是因为传入thread.spawn的第一个参数是线程入口函数，因此要略过这个参数\n  nrets = lua_gettop(ctx-&gt;cur_co_ctx-&gt;co) - 1;\n  dd(&#34;nrets = %d&#34;, nrets);\n\n  // break意味着下一次循环继续执行resume操作\n  break;\n</code></pre>\n<h4 id=\"hook系统协程库\">hook系统协程库</h4>\n<p>OR中为了对协程切换的完全掌控，也将系统的coroutine.resume以及coroutine.yield两个函数进行了hook，换成了自己的实现。</p>\n<h5 id=\"lua-resume\">lua.resume</h5>\n<p>其中resume函数的实现对应的是函数ngx_stream_lua_coroutine_resume，该函数的核心工作有以下几个：</p>\n<ul>\n<li>拿到协程切换时当前的协程上下文指针p_coctx。</li>\n<li>拿到待切换执行权的协程上下文指针coctx。</li>\n<li>设置两者的父子关系：coctx-&gt;parent_co_ctx = p_coctx;</li>\n<li>修改当前的协程上下文指针为coctx，这样在下一次调度时就会执行该协程。</li>\n<li>让出执行权给主线程，在那里做resume coroutine的操作，注意此时调用lua_yield函数时传入的参数是lua_gettop(L) - 1，是为了跳过栈顶的协程参数。</li>\n</ul>\n<pre><code class=\"language-C\">// 拿到当前协程上下文的指针做为父指针\np_coctx = ctx-&gt;cur_co_ctx;\n\n// 拿到待resume协程的ngx_stream_lua_co_ctx_t指针\ncoctx = ngx_stream_lua_get_co_ctx(co, ctx);\n\n// 待resume协程的父协程上下文修改为当前协程\ncoctx-&gt;parent_co_ctx = p_coctx;\n\n// 待resume协程状态修改为running\ncoctx-&gt;co_status = NGX_STREAM_LUA_CO_RUNNING;\n\n// 修改op操作为NGX_STREAM_LUA_USER_CORO_RESUME\nctx-&gt;co_op = NGX_STREAM_LUA_USER_CORO_RESUME;\n// 修改当前协程上下文指针\nctx-&gt;cur_co_ctx = coctx;\n\n/* yield and pass args to main thread, and resume target coroutine from\n * there */\n// 让出执行权给主线程，在那里做resume coroutine的操作\nreturn lua_yield(L, lua_gettop(L) - 1);\n</code></pre>\n<p><img src=\"https://www.codedump.info//media/imgs/20190501-lua-stream/lua_resume.png\" alt=\"lua_resume\" title=\"lua_resume\"/></p>\n<p>而这种由于Lua脚本中调用了lua_resume函数让出执行权的情况，对应的co_op就是NGX_STREAM_LUA_USER_CORO_RESUME，此时在ngx_stream_lua_run_thread函数中的处理就是将父协程的参数移动到子协程中，即将函数参数从上面的p_coctx移动到coctx管理的协程中：</p>\n<pre><code class=\"language-C\">nrets = lua_gettop(old_co);\nif (nrets) &#123;\n  dd(&#34;moving %d return values to parent&#34;, nrets);\n  // 移动协程resume函数的参数\n  lua_xmove(old_co, ctx-&gt;cur_co_ctx-&gt;co, nrets);\n&#125;\n</code></pre>\n<h5 id=\"lua-yield-1\">lua.yield</h5>\n<p>lua.yield函数对应的实现是函数ngx_stream_lua_coroutine_yield，该函数的实现相对就简单很多：</p>\n<pre><code class=\"language-C\">// 拿到当前运行的协程上下文指针\ncoctx = ctx-&gt;cur_co_ctx;\n// 修改co_op\nctx-&gt;co_op = NGX_STREAM_LUA_USER_CORO_YIELD;\n// 让出执行权给主线程，在那里做yield coroutine操作\nreturn lua_yield(L, lua_gettop(L));\n</code></pre>\n<p>这种情况对应的co_op值为NGX_STREAM_LUA_USER_CORO_YIELD，来看ngx_stream_lua_run_thread函数针对这种情况的处理。</p>\n<p>首先判断调用lua.yield让出执行权的是不是用户线程：</p>\n<pre><code class=\"language-C\">if (ngx_stream_lua_is_thread(ctx)) &#123;    // 如果ctx是用户线程\n    /* discard any return values from user\n     * coroutine.yield()&#39;s arguments */\n    // 这里将yield的参数全都抛弃掉\n    lua_settop(ctx-&gt;cur_co_ctx-&gt;co, 0);\n\n    ngx_stream_lua_probe_info(&#34;set co running&#34;);\n    ctx-&gt;cur_co_ctx-&gt;co_status = NGX_STREAM_LUA_CO_RUNNING;\n\n    if (ctx-&gt;posted_threads) &#123;  // 如果有post线程队列，说明有pending的线程\n        // 加入到posted_threads中\n        ngx_stream_lua_post_thread(r, ctx, ctx-&gt;cur_co_ctx);\n        // 置当前协程上下文指针为NULL\n        ctx-&gt;cur_co_ctx = NULL;\n        // 返回等待下一次被唤醒调度\n        return NGX_AGAIN;\n    &#125;\n\n    /* no pending threads, so resume the thread\n     * immediately */\n    // 到了这里说明没有pending的线程，继续下一次调用\n    nrets = 0;\n    continue;\n&#125;\n</code></pre>\n<p>接下来处理当前协程不是用户线程的场景：</p>\n<pre><code class=\"language-C\">// 到了这里意味着当前协程不是用户线程\n/* being a user coroutine that has a parent */\n\n// 拿到栈顶数据数量\nnrets = lua_gettop(ctx-&gt;cur_co_ctx-&gt;co);\n\n// 拿到父协程上下文\nnext_coctx = ctx-&gt;cur_co_ctx-&gt;parent_co_ctx;\nnext_co = next_coctx-&gt;co;\n\n/*\n * prepare return values for coroutine.resume\n * (true plus any retvals)\n */\n// push到父协程中一个bool数据\nlua_pushboolean(next_co, 1);\n\nif (nrets) &#123;\n    dd(&#34;moving %d return values to next co&#34;, nrets);\n    // 将返回值move到父协程中\n    lua_xmove(ctx-&gt;cur_co_ctx-&gt;co, next_co, nrets);\n&#125;\n\n// +1是为了多加上bool值\nnrets++;  /* add the true boolean value */\n                      // 下一次调度切换到父协程\nctx-&gt;cur_co_ctx = next_coctx;\n\nbreak;\n</code></pre>\n<p><img src=\"https://www.codedump.info//media/imgs/20190501-lua-stream/lua_yield.png\" alt=\"lua_yield\" title=\"lua_yield\"/></p>\n<h3 id=\"协程执行完毕的情况\">协程执行完毕的情况</h3>\n<p>以上分析了协程执行lua_resume之后返回值为LUA_YIELD的几种情况，如果此时返回值不是LUA_YIELD而是0，这意味着协程已经执行完毕了，下面看这种情况的处理。</p>\n<p>如果当前协程是入口线程，那么将做如下处理：</p>\n<ul>\n<li>恢复Lua栈。</li>\n<li>如果还有待执行的用户线程，那么置当前协程上下文指针cur_co_ctx为NULL，返回NGX_AGAIN，等待下一次被唤醒。</li>\n<li>否则意味着没有可执行的线程了，返回NGX_OK。</li>\n</ul>\n<p>而如果当前协程是用户线程，那么做如下处理：</p>\n<ul>\n<li>恢复Lua栈。</li>\n<li>拿到当前协程的父协程，如果父协程还存活的情况下：\n<ul>\n<li>如果父协程在等待该协程的退出，那么向父协程返回true。</li>\n<li>否则说明该协程变成了僵尸，返回NGX_AGAIN。</li>\n</ul></li>\n<li>否则就是父协程已经不存活的情况：\n<ul>\n<li>用户线程数量减一。</li>\n<li>如果用户线程数量在减一之后变成了0，意味着当前已经没有可执行的用户线程了，如果当前入口线程还存活，那么置当前协程上下文指针cur_co_ctx为NULL，返回NGX_AGAIN，等待下一次被唤醒。否则返回NGX_OK。</li>\n</ul></li>\n</ul>\n<p>最后一种情况就是该协程既不是入口线程也不是用户线程的场景了：</p>\n<ul>\n<li>拿到父协程指针，如果父协程指针为空则报错返回。</li>\n<li>移动参数到父协程中，切换当前协程上下文指针cur_co_ctx指向父协程，继续下一次循环的执行。</li>\n</ul>\n<h3 id=\"执行出错的情况\">执行出错的情况</h3>\n<p>除了以上几种情况，最后剩下的就是协程代码执行出错的场景了，此时的处理：</p>\n<ul>\n<li>恢复cur_co_ctx。</li>\n<li>从Lua栈中拿到出错信息。</li>\n<li>拿到协程栈信息。</li>\n<li>如果是用户线程：\n<ul>\n<li>恢复Lua栈。</li>\n<li>拿到父协程指针，如果父协程还存活，做以下处理：</li>\n<li>如果父协程在等待该协程的退出，那么向父协程返回false。</li>\n<li>否则将当前协程加入到父协程的僵尸线程链表中。</li>\n<li>置空当前协程上下文指针，返回NGX_AGAIN。</li>\n<li>如果用户线程数量为0，且入口线程还存活，那么置当前协程上下文指针cur_co_ctx为NULL，返回NGX_AGAIN。否则返回NGX_OK。</li>\n<li>如果是入口线程，则打印出错信息，恢复Lua栈，返回服务器出错。</li>\n</ul></li>\n</ul>","text":"OpenResty（以下简称OR）是Lua应用的典范，其最大的亮点在于，使用Lua协程搭配上异步非阻塞的IO，这样开发者可以使用同步方式来编写代码，而底层IO调度、唤醒等操作留给C编写的引擎层。 实际上，使用类协程的技术，让异步操作同步化，已经有很多相关的技术了，比如腾讯的lib...","link":"","photos":[],"count_time":{"symbolsCount":"14k","symbolsTime":"12 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%8D%8F%E7%A8%8B%E7%9A%84%E7%BB%B4%E6%8A%A4\"><span class=\"toc-text\">协程的维护</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%8D%8F%E7%A8%8B%E7%9A%84%E5%88%9D%E5%A7%8B%E5%8C%96\"><span class=\"toc-text\">协程的初始化</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%96%B0%E5%BB%BA%E7%AB%8B%E8%BF%9E%E6%8E%A5%E7%9A%84%E5%8D%8F%E7%A8%8B\"><span class=\"toc-text\">新建立连接的协程</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#ngx-thread-spawn%E5%88%9B%E5%BB%BA%E7%9A%84%E5%8D%8F%E7%A8%8B\"><span class=\"toc-text\">ngx.thread.spawn创建的协程</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#ngx-stream-lua-coroutine-create-helper\"><span class=\"toc-text\">ngx_stream_lua_coroutine_create_helper</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%9D%E5%A7%8B%E5%8C%96uthread\"><span class=\"toc-text\">初始化uthread</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%8D%8F%E7%A8%8B%E7%9A%84%E8%B0%83%E5%BA%A6\"><span class=\"toc-text\">协程的调度</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%BC%82%E5%B8%B8%E4%BF%9D%E6%8A%A4\"><span class=\"toc-text\">异常保护</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%B0%83%E5%BA%A6%E6%A0%B8%E5%BF%83\"><span class=\"toc-text\">调度核心</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#lua-yield\"><span class=\"toc-text\">LUA_YIELD</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%AD%89%E5%BE%85io%E5%9C%BA%E6%99%AF\"><span class=\"toc-text\">等待IO场景</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%88%B6%E5%8D%8F%E7%A8%8B%E5%87%BA%E8%AE%A9%E6%89%A7%E8%A1%8C%E6%9D%83%E5%9C%BA%E6%99%AF\"><span class=\"toc-text\">父协程出让执行权场景</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#hook%E7%B3%BB%E7%BB%9F%E5%8D%8F%E7%A8%8B%E5%BA%93\"><span class=\"toc-text\">hook系统协程库</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#lua-resume\"><span class=\"toc-text\">lua.resume</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#lua-yield-1\"><span class=\"toc-text\">lua.yield</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8D%8F%E7%A8%8B%E6%89%A7%E8%A1%8C%E5%AE%8C%E6%AF%95%E7%9A%84%E6%83%85%E5%86%B5\"><span class=\"toc-text\">协程执行完毕的情况</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%89%A7%E8%A1%8C%E5%87%BA%E9%94%99%E7%9A%84%E6%83%85%E5%86%B5\"><span class=\"toc-text\">执行出错的情况</span></a></li></ol></li></ol></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Lua脚本语言入门代码","uid":"90d92774683b8f165091d74536e8dc1d","slug":"zl/2016-01-01-500_Lua脚本语言入门代码","date":"2024-04-03T03:47:35.781Z","updated":"2024-04-03T03:47:35.781Z","comments":true,"path":"api/articles/zl/2016-01-01-500_Lua脚本语言入门代码.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":" 近来游戏基本做的差不多了,大约5月底左右可以内测?现在正在快马加鞭增强其脚本功能.考虑到效率和库大小,功能等原因,暂决定使用&lt;魔兽世界&gt;采用的Lua语言进行嵌入支持.5555,我可爱的Python和Ruby没被采用,怨念啊…下面是学习的一些代码,均在LuaEdit5...","link":"","photos":[],"count_time":{"symbolsCount":811,"symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Lua_Trace 1. Lua数据结构","uid":"2255485e32f4f4f9bb0be992fedc2297","slug":"zl/2016-01-01-4_[Lua_Trace] 1. Lua数据结构 ","date":"2024-04-03T03:47:35.779Z","updated":"2024-04-03T03:47:35.779Z","comments":true,"path":"api/articles/zl/2016-01-01-4_[Lua_Trace] 1. Lua数据结构 .json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":" &lt;p&gt;摘要:[Lua_Trace] 1. Lua数据结构 - TValue&lt;/p&gt; &lt;br /&gt; &lt;p&gt; 欲深入了解Lua，我认为先从数据结构开始是必要的，&lt;/p&gt; 本文将由Lua基础数据结构(TValue)讲起, 进...","link":"","photos":[],"count_time":{"symbolsCount":"2.7k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}