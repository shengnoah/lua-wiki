{"title":"Lua特别之处笔记","uid":"1a1cf82db3f5dba4b69966eabcf53cea","slug":"zl/2016-01-01-839_Lua特别之处笔记","date":"2024-04-03T03:47:36.091Z","updated":"2024-04-03T03:47:36.092Z","comments":true,"path":"api/articles/zl/2016-01-01-839_Lua特别之处笔记.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<div class=\"post-nav\">\n          <div class=\"post-nav-next post-nav-item\">\n<pre><code>          &lt;a href=&quot;/2015/02/02/gdb_tutorial/&quot; rel=&quot;next&quot; title=&quot;GDB基础教程&quot;&gt;\n            &lt;i class=&quot;fa fa-chevron-left&quot;&gt;&lt;/i&gt; \n            &lt;p class=&quot;post-nav-pre-next-title&quot;&gt;\n              GDB基础教程\n            &lt;/p&gt; \n          &lt;/a&gt;\n        \n      &lt;/div&gt;\n\n      &lt;span class=&quot;post-nav-divider&quot;&gt;&lt;/span&gt;\n\n      &lt;div class=&quot;post-nav-prev post-nav-item&quot;&gt;\n        \n          &lt;a href=&quot;/2015/02/09/条件编译指令之if和ifdef和ifdefined之间的区别/&quot; rel=&quot;prev&quot; title=&quot;条件编译指令之#if和#ifdef和#if defined之间的区别&quot;&gt;\n          &lt;p class=&quot;post-nav-pre-next-title&quot;&gt;\n              条件编译指令之#if和#ifdef和#if defined之间的区别\n          &lt;/p&gt; \n          &lt;i class=&quot;fa fa-chevron-right&quot;&gt;&lt;/i&gt;\n          &lt;/a&gt;\n        \n      &lt;/div&gt;\n    &lt;/div&gt;\n  \n\n  \n  \n\n  \n  \n\n  \n    &lt;p&gt;两个取值 false 和 true。但要注意 Lua 中所有的值都可以作为条件。在控制结构的条&lt;br/&gt;件中除了 false 和 nil 为假，其他值都为真。所以 Lua 认为 0 和空串都是真。&lt;/p&gt;\n</code></pre>\n<h1 id=\"2-5-table\"><a href=\"#2-5-table\" class=\"headerlink\" title=\"2.5 table\"></a>2.5 table</h1><p>我们用一个疑问来引入table的介绍</p>\n<h2 id=\"传的是值还是引用\"><a href=\"#传的是值还是引用\" class=\"headerlink\" title=\"传的是值还是引用?\"></a>传的是值还是引用?</h2><p>lua的函数调用传的是值还是引用?</p>\n<p><strong>. . .</strong></p>\n<h3 id=\"测试代码\"><a href=\"#测试代码\" class=\"headerlink\" title=\"测试代码\"></a>测试代码</h3><figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/><span class=\"line\">9</span><br/><span class=\"line\">10</span><br/><span class=\"line\">11</span><br/><span class=\"line\">12</span><br/><span class=\"line\">13</span><br/><span class=\"line\">14</span><br/><span class=\"line\">15</span><br/><span class=\"line\">16</span><br/><span class=\"line\">17</span><br/><span class=\"line\">18</span><br/><span class=\"line\">19</span><br/><span class=\"line\">20</span><br/><span class=\"line\">21</span><br/><span class=\"line\">22</span><br/><span class=\"line\">23</span><br/><span class=\"line\">24</span><br/><span class=\"line\">25</span><br/><span class=\"line\">26</span><br/><span class=\"line\">27</span><br/><span class=\"line\">28</span><br/><span class=\"line\">29</span><br/><span class=\"line\">30</span><br/><span class=\"line\">31</span><br/><span class=\"line\">32</span><br/><span class=\"line\">33</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">tTableForTest = {}</span><br/><span class=\"line\"></span><br/><span class=\"line\">tTableForTest[<span class=\"number\">1</span>] = <span class=\"number\">9</span></span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(tTable)</span></span></span><br/><span class=\"line\">    tTable[<span class=\"number\">1</span>] = <span class=\"number\">11</span></span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#34;tTableForTest[1]&#34;</span>..<span class=\"string\">&#34; : &#34;</span>..tTableForTest[<span class=\"number\">1</span>])</span><br/><span class=\"line\">testTable(tTableForTest)</span><br/><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#34;tTableForTest[1]&#34;</span>..<span class=\"string\">&#34; : &#34;</span>..tTableForTest[<span class=\"number\">1</span>])</span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#34;n==================n&#34;</span>)</span><br/><span class=\"line\"></span><br/><span class=\"line\">nNumberForTest = <span class=\"number\">1</span></span><br/><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">TestNumber</span><span class=\"params\">( nNumber )</span></span></span><br/><span class=\"line\">    nNumber = <span class=\"number\">99</span></span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#34;nNumberForTest&#34;</span>..<span class=\"string\">&#34; : &#34;</span>..nNumberForTest)</span><br/><span class=\"line\">TestNumber(nNumberForTest)</span><br/><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#34;nNumberForTest&#34;</span>..<span class=\"string\">&#34; : &#34;</span>..nNumberForTest)</span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#34;n==================n&#34;</span>)</span><br/><span class=\"line\"></span><br/><span class=\"line\">nStringForTest = <span class=\"string\">&#34;hi&#34;</span></span><br/><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">TestNumber</span><span class=\"params\">( nString )</span></span></span><br/><span class=\"line\">    nString = <span class=\"string\">&#34;hello&#34;</span></span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#34;nStringForTest&#34;</span>..<span class=\"string\">&#34; : &#34;</span>..nStringForTest)</span><br/><span class=\"line\">TestNumber(nStringForTest)</span><br/><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#34;nStringForTest&#34;</span>..<span class=\"string\">&#34; : &#34;</span>..nStringForTest)</span><br/></pre></td></tr></tbody></table></figure>\n<h3 id=\"打印结果\"><a href=\"#打印结果\" class=\"headerlink\" title=\"打印结果\"></a>打印结果</h3><pre><code>tTableForTest[1] : 9\ntTableForTest[1] : 11\n<p>==================</p>\n<p>nNumberForTest : 1<br />\nnNumberForTest : 1</p>\n<p>==================</p>\n<p>nStringForTest : hi<br />\nnStringForTest : hi</code></pre><h3 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h3><ul></p>\n<li>table传引用</li>\n<li>number传值</li>\n<li>string传值</li>\n</ul>\n<h2 id=\"为什么lua中table会不一样\"><a href=\"#为什么lua中table会不一样\" class=\"headerlink\" title=\"为什么lua中table会不一样\"></a>为什么lua中table会不一样</h2><p>在Lua中, table 既不是值也不是变量而是对象.</p>\n<p>程序仅持有一个对他们的引用, Lua不会暗中产生table的副本或创建新的table.</p>\n<p>事实上, table的创建是通过构造表达式完成的, 最简单的构造表达式就是{}</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/><span class=\"line\">9</span><br/><span class=\"line\">10</span><br/><span class=\"line\">11</span><br/><span class=\"line\">12</span><br/><span class=\"line\">13</span><br/><span class=\"line\">14</span><br/><span class=\"line\">15</span><br/><span class=\"line\">16</span><br/><span class=\"line\">17</span><br/><span class=\"line\">18</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">a = {}</span><br/><span class=\"line\">k = <span class=\"string\">&#34;x&#34;</span></span><br/><span class=\"line\">a[k] = <span class=\"number\">10</span></span><br/><span class=\"line\">a[<span class=\"number\">20</span>] = <span class=\"string\">&#34;great&#34;</span></span><br/><span class=\"line\"><span class=\"built_in\">print</span>(a[<span class=\"string\">&#34;x&#34;</span>])   </span><br/><span class=\"line\"></span><br/><span class=\"line\">k = <span class=\"number\">20</span></span><br/><span class=\"line\"><span class=\"built_in\">print</span>(a[k])     <span class=\"comment\">--&gt; &#34;great&#34;</span></span><br/><span class=\"line\">a[<span class=\"string\">&#34;x&#34;</span>] = a[<span class=\"string\">&#34;x&#34;</span>] + <span class=\"number\">1</span></span><br/><span class=\"line\"><span class=\"built_in\">print</span>(a[<span class=\"string\">&#34;x&#34;</span>])   <span class=\"comment\">--&gt; 11</span></span><br/><span class=\"line\"></span><br/><span class=\"line\">b = a           <span class=\"comment\">-- b与a引用了同一个table</span></span><br/><span class=\"line\"><span class=\"built_in\">print</span>(b[<span class=\"string\">&#34;x&#34;</span>])   </span><br/><span class=\"line\">b[<span class=\"string\">&#34;x&#34;</span>] = <span class=\"number\">20</span></span><br/><span class=\"line\"><span class=\"built_in\">print</span>(a[<span class=\"string\">&#34;x&#34;</span>])   <span class=\"comment\">--&gt; 20</span></span><br/><span class=\"line\"></span><br/><span class=\"line\">a = <span class=\"literal\">nil</span>         <span class=\"comment\">-- 现在只有b还在引用table</span></span><br/><span class=\"line\">b = <span class=\"literal\">nil</span>         <span class=\"comment\">-- 再也没有对table的引用了</span></span><br/></pre></td></tr></tbody></table></figure>\n<p>当一个程序再也没有对一个table的引用时, Lua的垃圾收集器最终会删除该table, 并<br/>复用它的内存.</p>\n<h2 id=\"a-x-和a-x是不同的\"><a href=\"#a-x-和a-x是不同的\" class=\"headerlink\" title=\"a[x]和a.x是不同的\"></a>a[x]和a.x是不同的</h2><p><code>a.x</code>表示<code>a[&#34;x&#34;]</code> , 表示以字符串<code>&#34;x&#34;</code>来索引table</p>\n<p><code>a[x]</code> 是以变量x的值来索引table</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">a = {}</span><br/><span class=\"line\">x = <span class=\"string\">&#34;y&#34;</span></span><br/><span class=\"line\">a[x] = <span class=\"number\">10</span></span><br/><span class=\"line\"><span class=\"built_in\">print</span>(a[x])     <span class=\"comment\">--&gt; 表示a[&#34;y&#34;], 即 10</span></span><br/><span class=\"line\"><span class=\"built_in\">print</span>(a.x)      <span class=\"comment\">--&gt; 表示a[&#34;x&#34;], 没有定义这个, 所以是 nil</span></span><br/><span class=\"line\"><span class=\"built_in\">print</span>(a.y)      <span class=\"comment\">--&gt; 表示a[&#34;y&#34;], 即 10</span></span><br/></pre></td></tr></tbody></table></figure>\n<h2 id=\"用table作为数组时\"><a href=\"#用table作为数组时\" class=\"headerlink\" title=\"用table作为数组时\"></a>用table作为数组时</h2><p>就Lua的习惯而言, 数组通常以1作为索引的起始值, 并且还有不少lua机制依赖于这个惯例, 大多数lua内置的函数都假设数组起始于索引1, 这跟c语言以0为起始是不同的.</p>\n<p>Lua5.1以上, 可以使用 <code>#</code> 来返回一个数组或者线性表的最后一个索引值或者其大小.</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 打印所有的行</span></span><br/><span class=\"line\"><span class=\"keyword\">for</span> i=<span class=\"number\">1</span>, #a <span class=\"keyword\">do</span></span><br/><span class=\"line\">    <span class=\"built_in\">print</span>(a[i])</span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/></pre></td></tr></tbody></table></figure>","text":" &lt;a href=&quot;/2015/02/02/gdb_tutorial/&quot; rel=&quot;next&quot; title=&quot;GDB基础教程&quot;&gt; &lt;i class=&quot;fa fa-chevron-left&qu...","link":"","photos":[],"count_time":{"symbolsCount":"3.2k","symbolsTime":"3 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#2-5-table\"><span class=\"toc-text\">2.5 table</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BC%A0%E7%9A%84%E6%98%AF%E5%80%BC%E8%BF%98%E6%98%AF%E5%BC%95%E7%94%A8\"><span class=\"toc-text\">传的是值还是引用?</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B5%8B%E8%AF%95%E4%BB%A3%E7%A0%81\"><span class=\"toc-text\">测试代码</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%89%93%E5%8D%B0%E7%BB%93%E6%9E%9C\"><span class=\"toc-text\">打印结果</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BB%93%E8%AE%BA\"><span class=\"toc-text\">结论</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%BA%E4%BB%80%E4%B9%88lua%E4%B8%ADtable%E4%BC%9A%E4%B8%8D%E4%B8%80%E6%A0%B7\"><span class=\"toc-text\">为什么lua中table会不一样</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#a-x-%E5%92%8Ca-x%E6%98%AF%E4%B8%8D%E5%90%8C%E7%9A%84\"><span class=\"toc-text\">a[x]和a.x是不同的</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%94%A8table%E4%BD%9C%E4%B8%BA%E6%95%B0%E7%BB%84%E6%97%B6\"><span class=\"toc-text\">用table作为数组时</span></a></li></ol></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Lua源码笔记","uid":"89642c5c32e3c5c206257f92bd57a70c","slug":"zl/2016-01-01-840_Lua源码笔记","date":"2024-04-03T03:47:36.092Z","updated":"2024-04-03T03:47:36.093Z","comments":true,"path":"api/articles/zl/2016-01-01-840_Lua源码笔记.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"用Lua开发游戏已经有一段时间了，但是对Lua的理解还一直停留在浅层。最近想深入研究下，于是着手开始看Lua源码，并在本文记录知识点。 模块GC1.基本数据结构Lua的基本数据结构是一个类型union+type。相关的核心代码如下： 12345678910111213141516...","link":"","photos":[],"count_time":{"symbolsCount":"2.2k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"论文阅读：Ranking vs. Regression in Machine Translation Evaluation","uid":"24cd5f26a743fc46054875d5ddfb17b2","slug":"zl/2016-01-01-838_论文阅读：Ranking vs. Regression in Machine Translation","date":"2024-04-03T03:47:36.090Z","updated":"2024-04-03T03:47:36.091Z","comments":true,"path":"api/articles/zl/2016-01-01-838_论文阅读：Ranking vs. Regression in Machine Translation.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":" &lt;script type=&quot;text/x-mathjax-config&quot;&gt; MathJax.Hub.Config(&#123; tex2jax: &#123; skipTags: ['script', 'noscript', 'style', '...","link":"","photos":[],"count_time":{"symbolsCount":"2.4k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}