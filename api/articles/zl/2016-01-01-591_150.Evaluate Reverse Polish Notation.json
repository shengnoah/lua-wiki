{"title":"150.Evaluate Reverse Polish Notation","uid":"822f2b75bb566ca0a24d71cff86dfdda","slug":"zl/2016-01-01-591_150.Evaluate Reverse Polish Notation","date":"2024-04-03T03:47:35.833Z","updated":"2024-04-03T03:47:35.833Z","comments":true,"path":"api/articles/zl/2016-01-01-591_150.Evaluate Reverse Polish Notation.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<blockquote>\n<p>Evaluate the value of an arithmetic expression in Reverse Polish Notation.<br/>Valid operators are +, -, *, /. Each operand may be an integer or another expression.</p>\n</blockquote>\n<h2 id=\"思路分析\">思路分析</h2>\n<p>  逆波兰表示法，又称为后缀表示法，是一种不需要括号的一种四则运算表示法。比如：9 3 1 - 3 * + 10 2 / + ，就是一种后缀表示法。计算方法就使用栈，遇到数字就入栈，遇到符号就弹出栈顶的两个数字并将这两个数字的计算结果压入栈中。</p>\n<h2 id=\"实现细节\">实现细节</h2>\n<ol type=\"1\">\n<li>字符串转整型函数<code>stoi()</code></li>\n<li>整型函数转字符串<code>to_string()</code></li>\n</ol>\n<h2 id=\"代码实现\">代码实现</h2>\n<figure class=\"highlight cpp\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/><span class=\"line\">9</span><br/><span class=\"line\">10</span><br/><span class=\"line\">11</span><br/><span class=\"line\">12</span><br/><span class=\"line\">13</span><br/><span class=\"line\">14</span><br/><span class=\"line\">15</span><br/><span class=\"line\">16</span><br/><span class=\"line\">17</span><br/><span class=\"line\">18</span><br/><span class=\"line\">19</span><br/><span class=\"line\">20</span><br/><span class=\"line\">21</span><br/><span class=\"line\">22</span><br/><span class=\"line\">23</span><br/><span class=\"line\">24</span><br/><span class=\"line\">25</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span>  {</span></span><br/><span class=\"line\"><span class=\"keyword\">public</span>:</span><br/><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">evalRPN</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">string</span>&gt;&amp; tokens)</span> </span>{</span><br/><span class=\"line\">        <span class=\"built_in\">stack</span>&lt;<span class=\"keyword\">int</span>&gt; stk;</span><br/><span class=\"line\">        <span class=\"keyword\">int</span> number;</span><br/><span class=\"line\">        <span class=\"built_in\">string</span> symbols = <span class=\"string\">&#34;+-*/&#34;</span>;</span><br/><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> token: tokens){</span><br/><span class=\"line\">            <span class=\"keyword\">if</span>(symbols.find(token) != <span class=\"built_in\">string</span>::npos){</span><br/><span class=\"line\">                <span class=\"keyword\">int</span> num2 = stk.top();</span><br/><span class=\"line\">                stk.pop();</span><br/><span class=\"line\">                <span class=\"keyword\">int</span> num1 = stk.top();</span><br/><span class=\"line\">                stk.pop();</span><br/><span class=\"line\">                <span class=\"keyword\">if</span>(token == <span class=\"string\">&#34;+&#34;</span>) stk.push(num1+num2);</span><br/><span class=\"line\">                <span class=\"keyword\">if</span>(token == <span class=\"string\">&#34;-&#34;</span>) stk.push(num1-num2);</span><br/><span class=\"line\">                <span class=\"keyword\">if</span>(token == <span class=\"string\">&#34;*&#34;</span>) stk.push(num1*num2);</span><br/><span class=\"line\">                <span class=\"keyword\">if</span>(token == <span class=\"string\">&#34;/&#34;</span>) stk.push(num1/num2);</span><br/><span class=\"line\">            }</span><br/><span class=\"line\">            <span class=\"keyword\">else</span>{</span><br/><span class=\"line\">                number = stoi(token);</span><br/><span class=\"line\">                stk.push(number);</span><br/><span class=\"line\">            }</span><br/><span class=\"line\">        }</span><br/><span class=\"line\">        <span class=\"keyword\">return</span> stk.top();</span><br/><span class=\"line\">    }</span><br/><span class=\"line\">};</span><br/></pre></td></tr></tbody></table></figure>","text":" Evaluate the value of an arithmetic expression in Reverse Polish Notation.Valid operators are +, -, *, /. Each operand may be an integer or...","link":"","photos":[],"count_time":{"symbolsCount":"1.1k","symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%80%9D%E8%B7%AF%E5%88%86%E6%9E%90\"><span class=\"toc-text\">思路分析</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E7%8E%B0%E7%BB%86%E8%8A%82\"><span class=\"toc-text\">实现细节</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">代码实现</span></a></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"linux常用库的lua移植：libmcrypt的lua插件","uid":"9e32926600738e59d526b5fa520f6d70","slug":"zl/2016-01-01-596_linux常用库的lua移植：libmcrypt的lua插件","date":"2024-04-03T03:47:35.834Z","updated":"2024-04-03T03:47:35.835Z","comments":true,"path":"api/articles/zl/2016-01-01-596_linux常用库的lua移植：libmcrypt的lua插件.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"openresty的lua方案效率不错，缺点是库不全，php现成的接口应用改成lua并不容易，比如libmcrypt，这个php常用的加密库（其实nginx的lua模块加密还有个不错的原生方案，openssl，在openrestylualibresty目录下，特定的加密方式需要自...","link":"","photos":[],"count_time":{"symbolsCount":"2.6k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"在redis中使用Lua脚本","uid":"da54462c562851f416c243978002e41a","slug":"zl/2016-01-01-593_在redis中使用Lua脚本","date":"2024-04-03T03:47:35.833Z","updated":"2024-04-03T03:47:35.833Z","comments":true,"path":"api/articles/zl/2016-01-01-593_在redis中使用Lua脚本.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"脚本介绍Redis在2.6版本中推出了脚本功能,使用Lua语言(一种“卫星语言”,能够方便地嵌入到其他语言中使用)编写脚本传到Redis中执行。在Lua脚本中可以调用大部分的Redis命令,使用脚本的好处如下: 减少网络开销: 多个redis请求可以在一个脚本中一次发送一个请求,...","link":"","photos":[],"count_time":{"symbolsCount":"1.4k","symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}