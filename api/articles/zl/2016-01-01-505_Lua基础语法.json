{"title":"Lua基础语法","uid":"c59024b7ad8473bfafcd44738ec72a9e","slug":"zl/2016-01-01-505_Lua基础语法","date":"2024-04-03T03:47:35.782Z","updated":"2024-04-03T03:47:35.782Z","comments":true,"path":"api/articles/zl/2016-01-01-505_Lua基础语法.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<h2 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h2><ul>\n<li>单行注释<br/>两个减号，<code>--</code></li>\n<li>多行注释<br/><code>--[[\n内容\n--]]</code>\n<h2 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h2></li>\n<li>Lua是动态类型语言，变量不需要类型定义，只需为变量赋值</li>\n</ul>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>数据类型</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>nil</td>\n<td>只有值”nil”属于该类，表示一个无效值(在条件表达式里相当于false)</td>\n</tr>\n<tr>\n<td>boolean</td>\n<td>false 和 true</td>\n</tr>\n<tr>\n<td>number</td>\n<td>双精度类型的实浮点数</td>\n</tr>\n<tr>\n<td>string</td>\n<td>由一对双引号<code>&#34; &#34;</code>或单引号<code>&#39; &#39;</code>表示</td>\n</tr>\n<tr>\n<td>function</td>\n<td>由C或Lua编写的函数</td>\n</tr>\n<tr>\n<td>userdata</td>\n<td>表示任意存储在变量中的C数据结构</td>\n</tr>\n<tr>\n<td>thread</td>\n<td>表示执行的独立线路</td>\n</tr>\n<tr>\n<td>table</td>\n<td>Lua 中的表（table）其实是一个”关联数组”（associative arrays），数组的索引可以是数字或者是字符串。在 Lua 里，table 的创建是通过”构造表达式”来完成，最简单构造表达式是{}，用来创建一个空表。</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"nil\"><a href=\"#nil\" class=\"headerlink\" title=\"nil\"></a>nil</h3><ul>\n<li>nil类型表示一种没有任何有效值,它只有一个值”nil”</li>\n<li>对于全局变量和table,nil的另外一个作用为删除，给全局变量或table表里的变量赋值nil,等于把它们删掉<h3 id=\"boolean\"><a href=\"#boolean\" class=\"headerlink\" title=\"boolean\"></a>boolean</h3></li>\n<li>Lua把false和nil看作“假”，其余为“真”<h3 id=\"number\"><a href=\"#number\" class=\"headerlink\" title=\"number\"></a>number</h3></li>\n<li>Lua默认只有一种number类型，即double(双精度)类型，默认类型可以修改luaconf.h里的定义。以下几种写法都是number类型<figure class=\"highlight lua\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">&gt;<span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(<span class=\"number\">2</span>))</span><br/><span class=\"line\">&gt;<span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(<span class=\"number\">2.2</span>))</span><br/><span class=\"line\">&gt;<span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(<span class=\"number\">0.2</span>))</span><br/><span class=\"line\">&gt;<span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(<span class=\"number\">2e+1</span>))</span><br/><span class=\"line\">&gt;<span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(<span class=\"number\">0.2e-1</span>))</span><br/><span class=\"line\">&gt;<span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(<span class=\"number\">7.8263692594256e-06</span>))</span><br/><span class=\"line\"></span><br/><span class=\"line\">number</span><br/><span class=\"line\">number</span><br/><span class=\"line\">number</span><br/><span class=\"line\">number</span><br/><span class=\"line\">number</span><br/><span class=\"line\">number</span><br/></pre></td></tr></tbody></table></figure>\n</li>\n</ul>\n<h3 id=\"string\"><a href=\"#string\" class=\"headerlink\" title=\"string\"></a>string</h3><ul>\n<li>由一对双引号<code>&#34; &#34;</code>或单引号<code>&#39; &#39;</code>表示</li>\n<li><p>两个方括号<code>[[   ]]</code>表示一块字符串</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">&gt;html = <span class=\"string\">[[</span></span><br/><span class=\"line\"><span class=\"string\">&lt;html&gt;</span></span><br/><span class=\"line\"><span class=\"string\">&lt;head&gt;&lt;/head&gt;</span></span><br/><span class=\"line\"><span class=\"string\">&lt;body&gt;</span></span><br/><span class=\"line\"><span class=\"string\">    &lt;a href=&#34;http://www.w3cschool.cc/&#34;&gt;w3cschool菜鸟教程&lt;/a&gt;</span></span><br/><span class=\"line\"><span class=\"string\">&lt;/body&gt;</span></span><br/><span class=\"line\"><span class=\"string\">&lt;/html&gt;</span></span><br/><span class=\"line\"><span class=\"string\">]]</span></span><br/><span class=\"line\"><span class=\"built_in\">print</span>(html)</span><br/><span class=\"line\"></span><br/><span class=\"line\">&lt;html&gt;</span><br/><span class=\"line\">&lt;head&gt;&lt;/head&gt;</span><br/><span class=\"line\">&lt;body&gt;</span><br/><span class=\"line\">    &lt;a href=<span class=\"string\">&#34;http://www.w3cschool.cc/&#34;</span>&gt;w3cschool菜鸟教程&lt;/a&gt;</span><br/><span class=\"line\">&lt;/body&gt;</span><br/><span class=\"line\">&lt;/html&gt;</span><br/></pre></td></tr></tbody></table></figure>\n</li>\n<li><p>在对一个数字字符串上进行算术操作时，Lua会将数字字符串转成一个数字</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">&gt; <span class=\"built_in\">print</span>(<span class=\"string\">&#34;2&#34;</span> + <span class=\"number\">6</span>)</span><br/><span class=\"line\"><span class=\"number\">8.0</span></span><br/><span class=\"line\">&gt; <span class=\"built_in\">print</span>(<span class=\"string\">&#34;2&#34;</span> + <span class=\"string\">&#34;6&#34;</span>)</span><br/><span class=\"line\"><span class=\"number\">8.0</span></span><br/><span class=\"line\">&gt; <span class=\"built_in\">print</span>(<span class=\"string\">&#34;2 + 6&#34;</span>)</span><br/><span class=\"line\"><span class=\"number\">2</span> + <span class=\"number\">6</span></span><br/><span class=\"line\">&gt; <span class=\"built_in\">print</span>(<span class=\"string\">&#34;-2e2&#34;</span> * <span class=\"string\">&#34;6&#34;</span>)</span><br/><span class=\"line\"><span class=\"number\">-1200.0</span></span><br/><span class=\"line\">&gt; <span class=\"built_in\">print</span>(<span class=\"string\">&#34;error&#34;</span> + <span class=\"number\">1</span>)</span><br/><span class=\"line\"><span class=\"built_in\">stdin</span>:<span class=\"number\">1</span>: attempt to perform arithmetic on a <span class=\"built_in\">string</span> value</span><br/><span class=\"line\">stack <span class=\"built_in\">traceback</span>:</span><br/><span class=\"line\">\t<span class=\"built_in\">stdin</span>:<span class=\"number\">1</span>: <span class=\"keyword\">in</span> main chunk</span><br/><span class=\"line\">\t[C]: <span class=\"keyword\">in</span> ?</span><br/><span class=\"line\">&gt;</span><br/></pre></td></tr></tbody></table></figure>\n</li>\n<li><p>字符串连接需要用<code>..</code>,需加上空格</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">&gt;<span class=\"built_in\">print</span>(<span class=\"string\">&#39;a&#39;</span> .. <span class=\"string\">&#39;b&#39;</span>)</span><br/><span class=\"line\">ab</span><br/><span class=\"line\"></span><br/><span class=\"line\">&gt;<span class=\"built_in\">print</span>(<span class=\"number\">157</span> .. <span class=\"number\">333</span>)</span><br/><span class=\"line\"><span class=\"number\">157333</span></span><br/></pre></td></tr></tbody></table></figure>\n</li>\n<li><p>使用<code>#</code>计算字符串的长度，放在字符串前面</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">&gt;<span class=\"built_in\">len</span>=<span class=\"string\">&#39;www.w3cshool.cc&#39;</span></span><br/><span class=\"line\">&gt;<span class=\"built_in\">print</span>(#<span class=\"built_in\">len</span>)</span><br/><span class=\"line\"><span class=\"number\">16</span></span><br/><span class=\"line\">&gt;<span class=\"built_in\">print</span>(#<span class=\"string\">&#39;www.w3cschool.cc&#39;</span>)</span><br/><span class=\"line\"><span class=\"number\">16</span></span><br/></pre></td></tr></tbody></table></figure>\n</li>\n</ul>\n<h3 id=\"table\"><a href=\"#table\" class=\"headerlink\" title=\"table\"></a>table</h3><figure class=\"highlight lua\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"></span><br/><span class=\"line\"><span class=\"keyword\">local</span> table1={}</span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"comment\">--初始表</span></span><br/><span class=\"line\"><span class=\"keyword\">local</span> table2={<span class=\"string\">&#39;apple&#39;</span>,<span class=\"string\">&#39;pear&#39;</span>,<span class=\"string\">&#39;orange&#39;</span>,<span class=\"string\">&#39;grape&#39;</span>}</span><br/></pre></td></tr></tbody></table></figure>\n<ul>\n<li>Lua中的table是一个”关联数组”,数组的索引可以数字或字符串<br/><strong>【注】</strong>Lua中table 默认初始索引从1开始<figure class=\"highlight lua\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">a={}</span><br/><span class=\"line\">a[<span class=\"string\">&#39;key&#39;</span>]=<span class=\"string\">&#39;value&#39;</span></span><br/><span class=\"line\">key=<span class=\"number\">10</span></span><br/><span class=\"line\">a[key]=<span class=\"number\">22</span></span><br/><span class=\"line\">a[key]=a[key]+<span class=\"number\">11</span></span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"keyword\">for</span> k,v <span class=\"keyword\">in</span> <span class=\"built_in\">ipairs</span>(a) <span class=\"keyword\">do</span></span><br/><span class=\"line\">\t<span class=\"built_in\">print</span>(k .. <span class=\"string\">&#39;:&#39;</span> .. v)</span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/><span class=\"line\"></span><br/><span class=\"line\">结果</span><br/><span class=\"line\">key:value</span><br/><span class=\"line\"><span class=\"number\">10</span>:<span class=\"number\">33</span></span><br/></pre></td></tr></tbody></table></figure>\n</li>\n</ul>\n<h3 id=\"function\"><a href=\"#function\" class=\"headerlink\" title=\"function\"></a>function</h3><ul>\n<li>在Lua中，function被看作是”第一类值(First-Class Value)”,函数可以存在变量里</li>\n</ul>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(n)</span></span></span><br/><span class=\"line\">\t<span class=\"keyword\">if</span> n==<span class=\"number\">0</span> <span class=\"keyword\">then</span></span><br/><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br/><span class=\"line\">\t<span class=\"keyword\">else</span></span><br/><span class=\"line\">\t\t<span class=\"keyword\">return</span> n*factorial1(n<span class=\"number\">-1</span>)</span><br/><span class=\"line\">\t<span class=\"keyword\">end</span></span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"built_in\">print</span>(factorial1(<span class=\"number\">5</span>))</span><br/><span class=\"line\"></span><br/><span class=\"line\">factorial2=factorial1</span><br/><span class=\"line\"><span class=\"built_in\">print</span>(fatorial2(<span class=\"number\">5</span>))</span><br/><span class=\"line\"></span><br/><span class=\"line\">结果</span><br/><span class=\"line\"><span class=\"number\">120</span></span><br/><span class=\"line\"><span class=\"number\">120</span></span><br/></pre></td></tr></tbody></table></figure>\n<h3 id=\"userdata\"><a href=\"#userdata\" class=\"headerlink\" title=\"userdata\"></a>userdata</h3><p>userdata 是一种用户自定义数据，用于表示一种由应用程序或 C/C++ 语言库所创建的类型，可以将任意 C/C++ 的任意数据类型的数据（通常是 struct 和 指针）存储到 Lua 变量中调用。</p>\n<h2 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h2><ul>\n<li>变量在使用前，必须在代码中进行声明，即创建该变量。</li>\n<li>Lua 变量有三种类型：全局变量、局部变量、表中的域</li>\n<li>变量的默认值均为 nil。</li>\n</ul>\n<h3 id=\"标识符\"><a href=\"#标识符\" class=\"headerlink\" title=\"标识符\"></a>标识符</h3><ul>\n<li>一般用下划线加大写字母的标识符，为Lua的保留字。如：_VERSION 为保留用于Lua内部全局变量</li>\n<li>区分大小写<h3 id=\"全局变量\"><a href=\"#全局变量\" class=\"headerlink\" title=\"全局变量\"></a>全局变量</h3></li>\n<li>默认是全局变量</li>\n<li><p>全局变量无需声明，给一个变量赋值后即创建了这个全局变量，访问一个没有初始化的全局变量也不会出错，得到的结果为：nil</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(b)</span><br/><span class=\"line\">&gt;<span class=\"literal\">nil</span></span><br/><span class=\"line\">b=<span class=\"number\">10</span></span><br/><span class=\"line\"><span class=\"built_in\">print</span>(b)</span><br/><span class=\"line\">&gt;<span class=\"number\">10</span></span><br/></pre></td></tr></tbody></table></figure>\n</li>\n<li><p>删除一个全局变量，将变量赋值为nil即可</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">b=<span class=\"literal\">nil</span></span><br/><span class=\"line\"><span class=\"built_in\">print</span>(b)</span><br/><span class=\"line\">&gt;<span class=\"literal\">nil</span></span><br/></pre></td></tr></tbody></table></figure>\n</li>\n</ul>\n<h3 id=\"局部变量\"><a href=\"#局部变量\" class=\"headerlink\" title=\"局部变量\"></a>局部变量</h3><p>使用<code>local</code>声明<br/>应该尽可能的使用局部变量，有两个好处：</p>\n<ol>\n<li>避免命名冲突。</li>\n<li>访问局部变量的速度比全局变量更快。<h3 id=\"赋值语句\"><a href=\"#赋值语句\" class=\"headerlink\" title=\"赋值语句\"></a>赋值语句</h3></li>\n</ol>\n<ul>\n<li><p>Lua可以对多个变量同时赋值，变量列表和值列表的各个元素用逗号分开，赋值语句右边的值会依次赋给左边的变量。</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">a, b = <span class=\"number\">10</span>, <span class=\"number\">2</span>*x       &lt;<span class=\"comment\">--&gt;       a=10; b=2*x</span></span><br/></pre></td></tr></tbody></table></figure>\n</li>\n<li><p>遇到赋值语句Lua会先计算右边所有的值然后再执行赋值操作，所以我们可以这样进行交换变量的值：</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">x, y = y, x                     <span class=\"comment\">-- swap &#39;x&#39; for &#39;y&#39;</span></span><br/><span class=\"line\">a[i], a[j] = a[j], a[i]         <span class=\"comment\">-- swap &#39;a[i]&#39; for &#39;a[j]&#39;</span></span><br/></pre></td></tr></tbody></table></figure>\n</li>\n<li><p>当变量个数和值的个数不一致时，Lua会一直以变量个数为基础采取以下策略：</p>\n</li>\n</ul>\n<ol>\n<li>变量个数 &gt; 值的个数             按变量个数补足nil</li>\n<li>变量个数 &lt; 值的个数             多余的值会被忽略</li>\n</ol>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">&gt;a, b, c = <span class=\"number\">0</span>, <span class=\"number\">1</span></span><br/><span class=\"line\">&gt;<span class=\"built_in\">print</span>(a,b,c)             </span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"number\">0</span>   <span class=\"number\">1</span>   <span class=\"literal\">nil</span></span><br/><span class=\"line\"> </span><br/><span class=\"line\">&gt;a, b = a+<span class=\"number\">1</span>, b+<span class=\"number\">1</span>, b+<span class=\"number\">2</span>     <span class=\"comment\">-- value of b+2 is ignored</span></span><br/><span class=\"line\">&gt;<span class=\"built_in\">print</span>(a,b)               </span><br/><span class=\"line\">&gt;<span class=\"number\">1</span>   <span class=\"number\">2</span></span><br/><span class=\"line\"> </span><br/><span class=\"line\">&gt;a, b, c = <span class=\"number\">0</span></span><br/><span class=\"line\">&gt;<span class=\"built_in\">print</span>(a,b,c)             </span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"number\">0</span>   <span class=\"literal\">nil</span>   <span class=\"literal\">nil</span></span><br/></pre></td></tr></tbody></table></figure>\n<ul>\n<li>多值赋值经常用来交换变量，或将函数调用返回给变量：<figure class=\"highlight lua\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">a,b=fun()</span><br/></pre></td></tr></tbody></table></figure>\n</li>\n</ul>\n<p>f()返回两个值，第一个赋给a，第二个赋给b。</p>\n<h2 id=\"循环\"><a href=\"#循环\" class=\"headerlink\" title=\"循环\"></a>循环</h2><h3 id=\"while\"><a href=\"#while\" class=\"headerlink\" title=\"while\"></a>while</h3><figure class=\"highlight lua\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span>(condition)</span><br/><span class=\"line\"><span class=\"keyword\">do</span></span><br/><span class=\"line\">\tstatements</span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/></pre></td></tr></tbody></table></figure>\n<h3 id=\"for\"><a href=\"#for\" class=\"headerlink\" title=\"for\"></a>for</h3><p>Lua中for语句有两大类:</p>\n<ul>\n<li>数值for循环</li>\n<li>泛型for循环</li>\n</ul>\n<h4 id=\"数值for循环\"><a href=\"#数值for循环\" class=\"headerlink\" title=\"数值for循环\"></a>数值for循环</h4><figure class=\"highlight lua\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> var=exp1,exp2,exp3 <span class=\"keyword\">do</span></span><br/><span class=\"line\">\tstatements</span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/></pre></td></tr></tbody></table></figure>\n<ul>\n<li>var从exp1变化到exp2，每次变化以exp3为步长递增var，并执行一次”执行体”。exp3是可选的，如果不指定，默认为1</li>\n<li>for的三个表达式在循环开始前一次性求值，以后不再进行求值。<h4 id=\"泛型for循环\"><a href=\"#泛型for循环\" class=\"headerlink\" title=\"泛型for循环\"></a>泛型for循环</h4>用过一个迭代器遍历所有值<figure class=\"highlight lua\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--打印数组a 的所有值</span></span><br/><span class=\"line\"><span class=\"keyword\">for</span> i,v <span class=\"keyword\">in</span> <span class=\"built_in\">ipairs</span>(a)</span><br/><span class=\"line\">\t<span class=\"keyword\">do</span> <span class=\"built_in\">print</span>(v)</span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/></pre></td></tr></tbody></table></figure>\n</li>\n</ul>\n<p>i是数组索引值，v是对应索引的数组元素值。ipairs是Lua提供的一个迭代器函数，用来迭代数组。</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">days={<span class=\"string\">&#34;Suanday&#34;</span>,<span class=\"string\">&#34;Monday&#34;</span>,<span class=\"string\">&#34;Tuesday&#34;</span>,<span class=\"string\">&#34;Wednesday&#34;</span>,<span class=\"string\">&#34;Thursday&#34;</span>,<span class=\"string\">&#34;Friday&#34;</span>,<span class=\"string\">&#34;Saturday&#34;</span>}</span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"keyword\">for</span> i,v <span class=\"keyword\">in</span> <span class=\"built_in\">ipairs</span>(days) <span class=\"keyword\">do</span></span><br/><span class=\"line\">\t<span class=\"built_in\">print</span>(v)</span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/><span class=\"line\"></span><br/><span class=\"line\"></span><br/><span class=\"line\">结果</span><br/><span class=\"line\">Suanday</span><br/><span class=\"line\">Monday</span><br/><span class=\"line\">Tuesday</span><br/><span class=\"line\">Wednesday</span><br/><span class=\"line\">Thursday</span><br/><span class=\"line\">Friday</span><br/><span class=\"line\">Saturday</span><br/></pre></td></tr></tbody></table></figure>\n<h4 id=\"repeat…until\"><a href=\"#repeat…until\" class=\"headerlink\" title=\"repeat…until\"></a>repeat…until</h4><p>Lua 编程语言中 repeat…until 循环语句不同于 for 和 while循环，for 和 while 循环的条件语句在当前循环执行开始时判断，而 repeat…until 循环的条件语句在当前循环结束后判断。</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">repeat</span></span><br/><span class=\"line\">\tstatements</span><br/><span class=\"line\"><span class=\"keyword\">until</span>(contidion)</span><br/></pre></td></tr></tbody></table></figure>\n<p>我们注意到循环条件判断语句（condition）在循环体末尾部分，所以在条件进行判断前循环体都会执行一次。</p>\n<h2 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h2><h3 id=\"函数作为参数\"><a href=\"#函数作为参数\" class=\"headerlink\" title=\"函数作为参数\"></a>函数作为参数</h3><p> Lua 中我们可以将函数作为参数传递给函数<br/></p><figure class=\"highlight lua\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">myprint = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(param)</span></span></span><br/><span class=\"line\">   <span class=\"built_in\">print</span>(<span class=\"string\">&#34;这是打印函数 -   ##&#34;</span>,param,<span class=\"string\">&#34;##&#34;</span>)</span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span><span class=\"params\">(num1,num2,functionPrint)</span></span></span><br/><span class=\"line\">   result = num1 + num2</span><br/><span class=\"line\">   <span class=\"comment\">-- 调用传递的函数参数</span></span><br/><span class=\"line\">   functionPrint(result)</span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/><span class=\"line\">myprint(<span class=\"number\">10</span>)</span><br/><span class=\"line\"><span class=\"comment\">-- myprint 函数作为参数传递</span></span><br/><span class=\"line\">add(<span class=\"number\">2</span>,<span class=\"number\">5</span>,myprint)</span><br/><span class=\"line\"></span><br/><span class=\"line\">结果</span><br/><span class=\"line\">这是打印函数 -   ##\t<span class=\"number\">10</span>\t##</span><br/><span class=\"line\">这是打印函数 -   ##\t<span class=\"number\">7</span>\t##</span><br/></pre></td></tr></tbody></table></figure><p></p>\n<h3 id=\"多返回值\"><a href=\"#多返回值\" class=\"headerlink\" title=\"多返回值\"></a>多返回值</h3><ul>\n<li><p>Lua可以返回多个结果值，如string.find，返回匹配串“开始和结束的下标”（如果不存在匹配串返回nil）</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">&gt;s,e=<span class=\"built_in\">string</span>.<span class=\"built_in\">find</span>(<span class=\"string\">&#39;www.runoob.com&#39;</span>,<span class=\"string\">&#39;runoob&#39;</span>)</span><br/><span class=\"line\">&gt;<span class=\"built_in\">print</span>(s,e)</span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"number\">5</span>   <span class=\"number\">10</span></span><br/></pre></td></tr></tbody></table></figure>\n</li>\n<li><p>Lua函数中，在return后列出要返回的值得列表即可返回多值</p>\n</li>\n</ul>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">maximum</span><span class=\"params\">(a)</span></span></span><br/><span class=\"line\">\t<span class=\"keyword\">local</span> mi=<span class=\"number\">1</span>    <span class=\"comment\">--最大值索引</span></span><br/><span class=\"line\">\t<span class=\"keyword\">local</span> m=a[mi] <span class=\"comment\">--最大值</span></span><br/><span class=\"line\">\t</span><br/><span class=\"line\">\t<span class=\"keyword\">for</span> i,val <span class=\"keyword\">in</span> <span class=\"built_in\">ipairs</span>(a) <span class=\"keyword\">do</span></span><br/><span class=\"line\">\t\t<span class=\"keyword\">if</span> val &gt; m <span class=\"keyword\">then</span> </span><br/><span class=\"line\">\t\t\tmi=i</span><br/><span class=\"line\">\t\t\tm=val</span><br/><span class=\"line\">\t\t<span class=\"keyword\">end</span></span><br/><span class=\"line\">\t<span class=\"keyword\">end</span></span><br/><span class=\"line\">\t<span class=\"keyword\">return</span> m,mi</span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"built_in\">print</span>(maximum({<span class=\"number\">8</span>,<span class=\"number\">10</span>,<span class=\"number\">23</span>,<span class=\"number\">12</span>,<span class=\"number\">5</span>}))</span><br/><span class=\"line\"></span><br/><span class=\"line\"></span><br/><span class=\"line\">结果</span><br/><span class=\"line\"><span class=\"number\">23</span>    <span class=\"number\">3</span></span><br/></pre></td></tr></tbody></table></figure>\n<ul>\n<li><p>return f()这种形式，则返回“f()的返回值”：</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo0</span><span class=\"params\">()</span></span> <span class=\"keyword\">end</span></span><br/><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo1</span><span class=\"params\">()</span></span> <span class=\"keyword\">return</span> <span class=\"string\">&#39;a&#39;</span> <span class=\"keyword\">end</span></span><br/><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo2</span><span class=\"params\">()</span></span> <span class=\"keyword\">return</span> <span class=\"string\">&#39;a&#39;</span>,<span class=\"string\">&#39;b&#39;</span> <span class=\"keyword\">end</span></span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">(i)</span></span></span><br/><span class=\"line\">\t<span class=\"keyword\">if</span> i==<span class=\"number\">0</span> <span class=\"keyword\">then</span> <span class=\"keyword\">return</span> foo0()</span><br/><span class=\"line\">\t<span class=\"keyword\">elseif</span> i==<span class=\"number\">1</span> <span class=\"keyword\">then</span> <span class=\"keyword\">return</span> foo1()</span><br/><span class=\"line\">\t<span class=\"keyword\">elseif</span> i==<span class=\"number\">2</span> <span class=\"keyword\">then</span> <span class=\"keyword\">return</span> foo2()</span><br/><span class=\"line\">\t<span class=\"keyword\">end</span></span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/><span class=\"line\"></span><br/><span class=\"line\">&gt;<span class=\"built_in\">print</span>(foo(<span class=\"number\">1</span>))</span><br/><span class=\"line\">a</span><br/><span class=\"line\">&gt;<span class=\"built_in\">print</span>(foo(<span class=\"number\">2</span>))</span><br/><span class=\"line\">a b</span><br/><span class=\"line\">&gt;<span class=\"built_in\">print</span>(foo(<span class=\"number\">0</span>))</span><br/><span class=\"line\">     <span class=\"comment\">--(no result)</span></span><br/><span class=\"line\">&gt;<span class=\"built_in\">print</span>(foo(<span class=\"number\">3</span>))</span><br/><span class=\"line\">\t <span class=\"comment\">--(no result)</span></span><br/></pre></td></tr></tbody></table></figure>\n</li>\n<li><p>可以使用圆括号<code>( )</code>强制使调用返回一个值</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">&gt;<span class=\"built_in\">print</span>((foo0()))</span><br/><span class=\"line\"><span class=\"literal\">nil</span></span><br/><span class=\"line\">&gt;<span class=\"built_in\">print</span>((foo1()))</span><br/><span class=\"line\">a</span><br/><span class=\"line\">&gt;<span class=\"built_in\">print</span>((foo2()))</span><br/><span class=\"line\">a</span><br/></pre></td></tr></tbody></table></figure>\n</li>\n<li><p>函数多值返回的特殊函数unpack，接受一个数组作为输入参数，返回数组的所有元素。unpack被用来实现范型调用机制，在C语言中可以使用函数指针调用可变的函数，可以声明参数可变的函数，但不能两者同时可变。在Lua中如果你想调用可变参数的可变函数只需要这样：<br/><code>f(unpack(a))</code><br/>unpack返回a所有的元素作为f()的参数</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">f=<span class=\"built_in\">string</span>.<span class=\"built_in\">find</span></span><br/><span class=\"line\">a={<span class=\"string\">&#39;hello&#39;</span>,<span class=\"string\">&#39;ll&#39;</span>}</span><br/><span class=\"line\"><span class=\"built_in\">print</span>(f(<span class=\"built_in\">unpack</span>(a)))</span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"comment\">--&gt;3 4</span></span><br/></pre></td></tr></tbody></table></figure>\n</li>\n</ul>\n<p>预定义的unpack函数是用C语言实现的，也可以用Lua实现<br/></p><figure class=\"highlight lua\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">unpack</span><span class=\"params\">(t,i)</span></span></span><br/><span class=\"line\">\ti= i <span class=\"keyword\">or</span> <span class=\"number\">1</span></span><br/><span class=\"line\">\t<span class=\"keyword\">if</span> t[i] <span class=\"keyword\">then</span></span><br/><span class=\"line\">\t\t<span class=\"keyword\">return</span> t[i],<span class=\"built_in\">unpack</span>(t,i+<span class=\"number\">1</span>)</span><br/><span class=\"line\">\t<span class=\"keyword\">end</span></span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/></pre></td></tr></tbody></table></figure><p></p>\n<h3 id=\"可变参数\"><a href=\"#可变参数\" class=\"headerlink\" title=\"可变参数\"></a>可变参数</h3><ul>\n<li>Lua函数可以接受可变数目的参数，和C语言类似在函数参数列表中使用三点（…) 表示函数有可变的参数。</li>\n<li>Lua将函数的参数放在一个叫arg的表中，#arg 表示传入参数的个数。<figure class=\"highlight lua\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">average</span><span class=\"params\">(...)</span></span></span><br/><span class=\"line\">\tresult = <span class=\"number\">0</span></span><br/><span class=\"line\">\t<span class=\"keyword\">local</span> <span class=\"built_in\">arg</span>={...}</span><br/><span class=\"line\">\t<span class=\"keyword\">for</span> i,v <span class=\"keyword\">in</span> <span class=\"built_in\">ipairs</span>(<span class=\"built_in\">arg</span>) <span class=\"keyword\">do</span> </span><br/><span class=\"line\">\t\tresult = result + v</span><br/><span class=\"line\">\t<span class=\"keyword\">end</span></span><br/><span class=\"line\">\t<span class=\"built_in\">print</span>(<span class=\"string\">&#39;总共传入&#39;</span> .. #<span class=\"built_in\">arg</span> .. <span class=\"string\">&#39;个数&#39;</span>)</span><br/><span class=\"line\">\t<span class=\"keyword\">return</span> result/#<span class=\"built_in\">arg</span></span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#39;平均值为&#39;</span>,average(<span class=\"number\">10</span>,<span class=\"number\">5</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>))</span><br/><span class=\"line\"></span><br/><span class=\"line\">结果</span><br/><span class=\"line\">总共传入 <span class=\"number\">6</span> 个数</span><br/><span class=\"line\">平均值为\t<span class=\"number\">5.5</span></span><br/></pre></td></tr></tbody></table></figure>\n</li>\n</ul>\n<h3 id=\"再论函数\"><a href=\"#再论函数\" class=\"headerlink\" title=\"再论函数\"></a>再论函数</h3><p>Lua中的函数是带有词法定界(lexical scoping)的第一类值(first-class value)</p>\n<h4 id=\"第一类值\"><a href=\"#第一类值\" class=\"headerlink\" title=\"第一类值\"></a>第一类值</h4><p>在Lua中函数和其他值（数值、字符串）一样，函数可以被存放在变量中，也可以存放在table中，可以作为函数的参数，还可以作为函数的返回值</p>\n<h4 id=\"词法定界\"><a href=\"#词法定界\" class=\"headerlink\" title=\"词法定界\"></a>词法定界</h4><p>嵌套的函数可以访问它外部函数中的变量</p>\n<ul>\n<li>Lua中关于函数难以理解的地方时函数也可以是匿名的。<br/>函数名（如print）实际上是一个指向函数的变量，像具有其他类型值的变量一样<figure class=\"highlight lua\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">a={p=<span class=\"built_in\">print</span>}</span><br/><span class=\"line\">a.p(<span class=\"string\">&#39;hello world&#39;</span>)   <span class=\"comment\">--&gt;hello world</span></span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"built_in\">print</span>=<span class=\"built_in\">math</span>.<span class=\"built_in\">sin</span>      <span class=\"comment\">-- print now refers to the sin function</span></span><br/><span class=\"line\"></span><br/><span class=\"line\">a.p(<span class=\"built_in\">print</span>(<span class=\"number\">1</span>))  \t\t<span class=\"comment\">--&gt;0.841470</span></span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"built_in\">sin</span>=a.p\t\t\t\t<span class=\"comment\">--sin now refers to the print function</span></span><br/><span class=\"line\"><span class=\"built_in\">sin</span>(<span class=\"number\">10</span>,<span class=\"number\">20</span>)\t\t\t<span class=\"comment\">--&gt;10 20</span></span><br/></pre></td></tr></tbody></table></figure>\n</li>\n</ul>\n<h3 id=\"闭包\"><a href=\"#闭包\" class=\"headerlink\" title=\"闭包\"></a>闭包</h3><p>当一个函数内部嵌套另一个函数定义时，内部的函数体可以访问外部的函数的局部变量，这种特征我们称作词法定界。虽然这看起来很清楚，事实并非如此，词法定界加上第一类函数在编程语言里是一个功能强大的概念，很少语言提供这种支持。<br/>下面看一个简单的例子，假定有一个学生姓名的列表和一个学生名和成绩对应的表；现在想根据学生的成绩从高到低对学生进行排序，可以这样做：<br/></p><figure class=\"highlight lua\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">names={<span class=\"string\">&#39;Peter&#39;</span>,<span class=\"string\">&#39;Paul&#39;</span>,<span class=\"string\">&#39;Mary&#39;</span>}</span><br/><span class=\"line\">grades={Mary=<span class=\"number\">10</span>,Paul=<span class=\"number\">7</span>,Peter=<span class=\"number\">8</span>}</span><br/><span class=\"line\"><span class=\"built_in\">table</span>.<span class=\"built_in\">sort</span>(names,<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(n1,n2)</span></span></span><br/><span class=\"line\">\t<span class=\"keyword\">return</span> grades[n1]&gt;grades[n2]</span><br/><span class=\"line\"><span class=\"keyword\">end</span>)</span><br/></pre></td></tr></tbody></table></figure><p></p>\n<p>假定创建一个函数实现此功能<br/></p><figure class=\"highlight lua\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sortByGrade</span><span class=\"params\">(names,grades)</span></span></span><br/><span class=\"line\">\t<span class=\"built_in\">table</span>.<span class=\"built_in\">sort</span>(names,<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(n1,n2)</span></span></span><br/><span class=\"line\">\t\t<span class=\"keyword\">return</span> grades[n1]&gt;grades[n2]</span><br/><span class=\"line\">\t<span class=\"keyword\">end</span>)</span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/></pre></td></tr></tbody></table></figure><p></p>\n<p>例子中包含在sortbygrade函数内部的sort中的匿名函数可以访问sortbygrade的参数grades，在匿名函数内部grades不是全局变量也不是局部变量，我们称作外部的局部变量（external local variable）或者upvalue。（upvalue意思有些误导，然而在Lua中他的存在有历史的根源，还有他比起external local variable简短）。</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">newCounter</span><span class=\"params\">()</span></span></span><br/><span class=\"line\">    <span class=\"keyword\">local</span> i = <span class=\"number\">0</span></span><br/><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span>     <span class=\"comment\">-- anonymous function</span></span><br/><span class=\"line\">       i = i + <span class=\"number\">1</span></span><br/><span class=\"line\">        <span class=\"keyword\">return</span> i</span><br/><span class=\"line\">    <span class=\"keyword\">end</span></span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/><spa","text":"注释 单行注释两个减号，-- 多行注释--[[ 内容 --]] 数据类型 Lua是动态类型语言，变量不需要类型定义，只需为变量赋值 数据类型 描述 nil 只有值”nil”属于该类，表示一个无效值(在条件表达式里相当于false) boolean false 和 true num...","link":"","photos":[],"count_time":{"symbolsCount":"7.1k","symbolsTime":"6 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%B3%A8%E9%87%8A\"><span class=\"toc-text\">注释</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">数据类型</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#nil\"><span class=\"toc-text\">nil</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#boolean\"><span class=\"toc-text\">boolean</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#number\"><span class=\"toc-text\">number</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#string\"><span class=\"toc-text\">string</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#table\"><span class=\"toc-text\">table</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#function\"><span class=\"toc-text\">function</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#userdata\"><span class=\"toc-text\">userdata</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8F%98%E9%87%8F\"><span class=\"toc-text\">变量</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%A0%87%E8%AF%86%E7%AC%A6\"><span class=\"toc-text\">标识符</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F\"><span class=\"toc-text\">全局变量</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F\"><span class=\"toc-text\">局部变量</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%B5%8B%E5%80%BC%E8%AF%AD%E5%8F%A5\"><span class=\"toc-text\">赋值语句</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%BE%AA%E7%8E%AF\"><span class=\"toc-text\">循环</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#while\"><span class=\"toc-text\">while</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#for\"><span class=\"toc-text\">for</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%95%B0%E5%80%BCfor%E5%BE%AA%E7%8E%AF\"><span class=\"toc-text\">数值for循环</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%B3%9B%E5%9E%8Bfor%E5%BE%AA%E7%8E%AF\"><span class=\"toc-text\">泛型for循环</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#repeat%E2%80%A6until\"><span class=\"toc-text\">repeat…until</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">函数</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%87%BD%E6%95%B0%E4%BD%9C%E4%B8%BA%E5%8F%82%E6%95%B0\"><span class=\"toc-text\">函数作为参数</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%A4%9A%E8%BF%94%E5%9B%9E%E5%80%BC\"><span class=\"toc-text\">多返回值</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8F%AF%E5%8F%98%E5%8F%82%E6%95%B0\"><span class=\"toc-text\">可变参数</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%86%8D%E8%AE%BA%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">再论函数</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E4%B8%80%E7%B1%BB%E5%80%BC\"><span class=\"toc-text\">第一类值</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%AF%8D%E6%B3%95%E5%AE%9A%E7%95%8C\"><span class=\"toc-text\">词法定界</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%97%AD%E5%8C%85\"><span class=\"toc-text\">闭包</span></a></li></ol></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"AIX下编译64位Lua","uid":"d6e06b163ebcafde670a0c815ff3a8e3","slug":"zl/2016-01-01-503_AIX下编译64位Lua","date":"2024-04-03T03:47:35.782Z","updated":"2024-04-03T03:47:35.782Z","comments":true,"path":"api/articles/zl/2016-01-01-503_AIX下编译64位Lua.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":" &lt;/div&gt; &lt;div class=&quot;pt-article-main&quot;&gt; &lt;div class=&quot;panel panel-default&quot;&gt; &lt;div class=&quot;panel-body...","link":"","photos":[],"count_time":{"symbolsCount":"18k","symbolsTime":"16 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Lua脚本语言入门代码","uid":"90d92774683b8f165091d74536e8dc1d","slug":"zl/2016-01-01-500_Lua脚本语言入门代码","date":"2024-04-03T03:47:35.781Z","updated":"2024-04-03T03:47:35.781Z","comments":true,"path":"api/articles/zl/2016-01-01-500_Lua脚本语言入门代码.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":" 近来游戏基本做的差不多了,大约5月底左右可以内测?现在正在快马加鞭增强其脚本功能.考虑到效率和库大小,功能等原因,暂决定使用&lt;魔兽世界&gt;采用的Lua语言进行嵌入支持.5555,我可爱的Python和Ruby没被采用,怨念啊…下面是学习的一些代码,均在LuaEdit5...","link":"","photos":[],"count_time":{"symbolsCount":811,"symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}