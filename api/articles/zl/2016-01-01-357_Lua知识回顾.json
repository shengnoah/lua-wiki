{"title":"Lua知识回顾","uid":"99b82723dc824681436b2f3b42032285","slug":"zl/2016-01-01-357_Lua知识回顾","date":"2024-04-03T03:47:35.638Z","updated":"2024-04-03T03:47:35.638Z","comments":true,"path":"api/articles/zl/2016-01-01-357_Lua知识回顾.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<p>学习 Lua 编程语言的比较</p>\n<p>无聊之余，想要找个东西来打发时间和排解心中的百无聊赖，于是乎，想要重新玩一下 corona 这个游戏开发引擎。当然，第一步就是重温下以前学过的 lua 编程语言，这次我打算在 Windows 操作系统上摆弄下这玩意。</p>\n<p>首先进入<a href=\"http://www.lua.org/\" target=\"_blank\" rel=\"noopener noreferrer\">lua 官网</a>找到二进制文件的下载地址，下载好了之后，解压后先把文件夹里的<code>luax.ext</code>(x 代表版本号)文件修改为<code>lua.exe</code>，然后将该目录添加到 Path 系统变量中，在终端输入<code>lua -v</code>检查是否配置完成。</p>\n<h4 id=\"注意点\"><a href=\"#注意点\" class=\"headerlink\" title=\"注意点\"></a>注意点</h4><ul>\n<li>调用函数时，被调用的函数一定要在调用者之前定义</li>\n</ul>\n<h4 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h4><p>变量的作用域：</p>\n<ul>\n<li>全局变量：除非显式声明为 local，其它所有变量都是全局变量；</li>\n<li>本地变量：使用 local 来声明变量</li>\n<li>表(table)变量:特殊类型的变量，值不可以为 nil</li>\n</ul>\n<p>容易混淆的例子：</p>\n<pre><code>local a, b = 1, 2 --该写法正确\nlocal a = 1, b = 2 --该写法错误\n</code></pre><h4 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h4><p>Lua 是动态类型语言，变量没有类型，只有值有类型，下面是数据类型：</p>\n<ul>\n<li>nil</li>\n<li>boolean</li>\n<li>number</li>\n<li>string</li>\n<li>function</li>\n<li>userData</li>\n<li>thread</li>\n<li>table</li>\n</ul>\n<p><code>type</code>函数用来计算变量的数据类型。所有的变量除非赋值，不然都是指向<code>nil</code>。</p>\n<h4 id=\"操作符\"><a href=\"#操作符\" class=\"headerlink\" title=\"操作符\"></a>操作符</h4><ul>\n<li><code>A^n</code>表示 A 的 n 次方</li>\n<li><code>~=</code>表示不等于的操作符</li>\n<li><code>A and B</code>：A 为真，返回 B；A 为假，返回 A</li>\n<li><code>A or B</code>：A 为真，返回 A；A 为假，返回 B</li>\n<li><code>!A</code>：A 为真，返回假；A 为假，返回真</li>\n<li><code>..</code>：连接字符串</li>\n<li><code>#</code>：返回字符串或表的长度</li>\n</ul>\n<h4 id=\"循环\"><a href=\"#循环\" class=\"headerlink\" title=\"循环\"></a>循环</h4><p>while 循环：</p>\n<pre><code>local i = 20\nwhile(i &gt; 0)\ndo\n    print(i)\n    i = i - 1\nend\n</code></pre><p>for 循环：</p>\n<pre><code>for i = 10, 1, -1\ndo\n    print(i)\nend\n-- for 初始值,最大/小值,步长\n</code></pre><p>repeat…until 循环</p>\n<pre><code>local a = 10\nrepeat\n    print(a)\n    a = a - 1\nuntil(a &lt; 1)\n</code></pre><h4 id=\"条件控制语句\"><a href=\"#条件控制语句\" class=\"headerlink\" title=\"条件控制语句\"></a>条件控制语句</h4><p>条件为 false 的情况只有值为 false 或 nil 时成立，0 被认为是 true。</p>\n<pre><code>if nil then\n    print(&#34; nil is true&#34;)\nelse\n    print(&#34;nil is false&#34;)\nend\n</code></pre><h4 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h4><p>在 Lua 中，可以将函数赋值给变量，也可以将函数作为其它函数的参数传递。</p>\n<p>使用<code>...</code>作为参数可以创建参数数量可变的函数：</p>\n<pre><code>function average(...)\n    result = 0\n    local arg = &#123;...&#125;\n    for i, v in ipairs(arg) do\n        result = result + v\n    end\n    return result / #arg\nend\n</code></pre><h4 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h4><p>字符串创建的方法：</p>\n<ul>\n<li><code>&#39;&#39;</code>：单引号</li>\n<li><code>&#34; &#34;</code>：双引号</li>\n<li><code>[[ ]]</code></li>\n</ul>\n<p>字符串方法的调用形式：<code>string.methodName(params)</code></p>\n<h4 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h4><p>数组是用索引为数字的表来实现的，索引从 1 开始，如果索引不存在，则返回 nil。</p>\n<pre><code>arr = &#123;&#34;A&#34;, &#34;B&#34;, &#34;C&#34;&#125;\n<p>for i = 0, 3 do<br />\nprint(arr[i])<br />\nend</p>\n<p>– nil A B C<br />\n</code></pre><h4 id=\"迭代器\"><a href=\"#迭代器\" class=\"headerlink\" title=\"迭代器\"></a>迭代器</h4><p>迭代器(Iterator)可以遍历集合或容器中的元素，而在 Lua 中，集合一般指的是表。</p></p>\n<pre><code>arr = &#123;&#34;A&#34;, &#34;B&#34;&#125;\nfor key, value in ipairs(arr)\ndo\n    print(key, &#34; = &#34;, value)\nend\n</code></pre><p>在 Lua 中，使用函数来实现迭代器，有两种类型的迭代器：</p>\n<ul>\n<li>无状态</li>\n<li>有状态</li>\n</ul>\n<h4 id=\"表\"><a href=\"#表\" class=\"headerlink\" title=\"表\"></a>表</h4><p>表使用<code>&#123;&#125;</code>来表示</p>\n<h4 id=\"模块\"><a href=\"#模块\" class=\"headerlink\" title=\"模块\"></a>模块</h4><p>模块可以使用 require 来加载，模块由一系列函数和变量组成，所有这些函数和变量包含在表中。</p>\n<p>模块名和文件名要相同。</p>\n<pre><code>-- mymath.lua定义了模块\nlocal mymath = &#123;&#125;\nfunction mymath.add(a, b)\n    print(a + b)\nend\nreturn mymath\n<p>– app.lua<br />\nmymathmodule = require(&quot;mymyth&quot;)<br />\nmymathmodule.add(1, 2)<br />\n</code></pre><h4 id=\"元表\"><a href=\"#元表\" class=\"headerlink\" title=\"元表\"></a>元表</h4><p>附着在表上的元表(metatable)会修改表的行为。</p></p>\n<ul>\n<li><code>setmetatable(table, metatable)</code>：设置表的元表</li>\n<li><code>getmetatable(table)</code>:获取表的元表</li>\n</ul>\n<h4 id=\"协程\"><a href=\"#协程\" class=\"headerlink\" title=\"协程\"></a>协程</h4><ul>\n<li><code>coroutine.create(f)</code>：创建新的协程</li>\n<li><code>coroutine.resume(co [, val1, ...])</code>：继续执行协程，可以传递参数。该调用会返回操作的状态，和一些可选的返回值</li>\n<li><code>coroutine.yield(...)</code>：停止协程的执行，传递给该方法的参数会作为 resume 方法的返回值。</li>\n</ul>\n<h4 id=\"错误处理\"><a href=\"#错误处理\" class=\"headerlink\" title=\"错误处理\"></a>错误处理</h4>","text":"学习 Lua 编程语言的比较 无聊之余，想要找个东西来打发时间和排解心中的百无聊赖，于是乎，想要重新玩一下 corona 这个游戏开发引擎。当然，第一步就是重温下以前学过的 lua 编程语言，这次我打算在 Windows 操作系统上摆弄下这玩意。 首先进入lua 官网找到二进制文...","link":"","photos":[],"count_time":{"symbolsCount":"2.2k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%B3%A8%E6%84%8F%E7%82%B9\"><span class=\"toc-text\">注意点</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%8F%98%E9%87%8F\"><span class=\"toc-text\">变量</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">数据类型</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%93%8D%E4%BD%9C%E7%AC%A6\"><span class=\"toc-text\">操作符</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%BE%AA%E7%8E%AF\"><span class=\"toc-text\">循环</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%9D%A1%E4%BB%B6%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5\"><span class=\"toc-text\">条件控制语句</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">函数</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%AD%97%E7%AC%A6%E4%B8%B2\"><span class=\"toc-text\">字符串</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%95%B0%E7%BB%84\"><span class=\"toc-text\">数组</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%BF%AD%E4%BB%A3%E5%99%A8\"><span class=\"toc-text\">迭代器</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%A1%A8\"><span class=\"toc-text\">表</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%A8%A1%E5%9D%97\"><span class=\"toc-text\">模块</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%85%83%E8%A1%A8\"><span class=\"toc-text\">元表</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%8D%8F%E7%A8%8B\"><span class=\"toc-text\">协程</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86\"><span class=\"toc-text\">错误处理</span></a></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"2.6luabreak与return","uid":"cb415ba273e2ff343737fa238bb01992","slug":"zl/2016-01-01-35_2.6 lua break 与 return","date":"2024-04-03T03:47:35.639Z","updated":"2024-04-03T03:47:35.640Z","comments":true,"path":"api/articles/zl/2016-01-01-35_2.6 lua break 与 return.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"和其他语言一样lua也提供对应的跳出关键字，不过lua不提供continue关键字。 break语句break用于跳出循环，终止for、repeat、while 三种循环的执行，并跳出当前循环体，继续执行当前循环之后的语句,在循环外部不可用。 returnreturn 只能写在语...","link":"","photos":[],"count_time":{"symbolsCount":962,"symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"lua读取redis数据的null判断","uid":"f3a7845e6db0af3e539b51ace62eadf8","slug":"zl/2016-01-01-358_lua读取redis数据的null判断","date":"2024-04-03T03:47:35.638Z","updated":"2024-04-03T03:47:35.638Z","comments":true,"path":"api/articles/zl/2016-01-01-358_lua读取redis数据的null判断.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"最近在配合移动端调试的时候，被抓去debug一个在清除redis缓存之后才会出现的网关错误。于是打开服务器上的log定位到类似错误:1[error] 7#7: *12030 lua entry thread aborted: runtime error: /data/share/...","link":"","photos":[],"count_time":{"symbolsCount":953,"symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}