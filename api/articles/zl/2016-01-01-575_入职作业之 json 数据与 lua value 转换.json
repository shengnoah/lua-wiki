{"title":"入职作业之 json 数据与 lua value 转换","uid":"c5cc8a80d7d560a392b5bef4717aaad8","slug":"zl/2016-01-01-575_入职作业之 json 数据与 lua value 转换","date":"2024-04-03T03:47:35.826Z","updated":"2024-04-03T03:47:35.826Z","comments":true,"path":"api/articles/zl/2016-01-01-575_入职作业之 json 数据与 lua value 转换.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<p>题目任务描述：封装json格式的数据与lua value间的互相转换功能</p>\n<p>下载ECMA-404的描述文件，观察json的数据格式。</p>\n<p>根据描述，一个json value可以是这些类型: object, array, number, string, true, false, or null。</p>\n<p><img src=\"https://wo1fsea.github.io//images/value.png\" alt=\"value\"/></p>\n<p></p>\n<p>下面是描述几种数据类型的图。</p>\n<p><img src=\"https://wo1fsea.github.io//images/object.png\" alt=\"object\"/></p>\n<p><img src=\"https://wo1fsea.github.io//images/array.png\" alt=\"array\"/></p>\n<p><img src=\"https://wo1fsea.github.io//images/number.png\" alt=\"number\"/></p>\n<p><img src=\"https://wo1fsea.github.io//images/string.png\" alt=\"string\"/></p>\n<p>这些图的描述能力应该等同BNF，所以需要处理的操作大概有：</p>\n<ol>\n  <li>串联\t\t\t\t\t如，C等于A串联B(C＝AB)，即匹配一个C等同于匹配一个A接着匹配一个B</li>\n  <li>\n    <table>\n      <tbody>\n        <tr>\n          <td>并联\t\t\t\t\t如，C等于A并联A(C=A</td>\n          <td>B)，即匹配一个C等同于匹配一个A或者匹配一个B</td>\n        </tr>\n      </tbody>\n    </table>\n  </li>\n  <li>\n    <table>\n      <tbody>\n        <tr>\n          <td>匹配0或1次\t\t\t如，C等于匹配A0或1次(C=A?)，即匹配一个C等同于匹配一个A0或多次，该操作可以由 C=A</td>\n          <td>”” 代替，其中”“表示空串。</td>\n        </tr>\n      </tbody>\n    </table>\n  </li>\n  <li>匹配0或任意次\t\t如，C等于匹配A0或任意次(C=A*)，即匹配一个C等同于匹配一个A0或任意次</li>\n</ol>\n<p>则最简单的，上述的value可以描述成</p>\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>value ＝ object | array | number | string | true | false | null\n</code></pre>\n</div>\n<p>object可以描述成，(引号内表示终结符，括号指示结合顺序)</p>\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>object ＝ &#34;&#123;&#34; ((string &#34;:&#34; value) (&#34;,&#34; string &#34;:&#34; value)*)? &#34;&#125;&#34;\n</code></pre>\n</div>\n<p>其他就依次类推…</p>\n<hr/>\n<p>回来开始写代码：</p>\n<p>先定义最简单的匹配函数的格式：</p>\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code> -- the matcher function\n function matcher(json_str, start)\n \t...\n \treturn result, value, new_start\n end\n</code></pre>\n</div>\n<table>\n  <tbody>\n    <tr>\n      <td>最简单的匹配函数，接受一个待匹配的字符串和一个起始下标，返回匹配结果（true</td>\n      <td>false），匹配成功后的返回数据，一个新的起始下标。</td>\n    </tr>\n  </tbody>\n</table>\n<p>定义两个最简单的结果处理函数，一个不处理输入直接返回，另一个直接返回nil，后面会常用到</p>\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>-- result handler\nlocal no_h = function(v) return v end\nlocal nil_h = function() return nil end\n</code></pre>\n</div>\n<p>定义一个生成基本匹配函数的生成函数，接受一个lua find的匹配表达式和一个结果处理函数，返回一个匹配函数。</p>\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>-- matcher function generator\nlocal generator = function(pattern, handler)\n<p>– the matcher function<br />\nfunction matcher(json_str, start)<br />\nlocal _, e = string.find(json_str, &quot;^&quot;…pattern, start)</p>\n<pre><code>if e then\n  return true, handler(string.sub(json_str, start, e)), e+1\nelse\n  return false, nil, start\nend\n</code></pre>\n<p>end</p>\n<p>return matcher<br />\nend<br />\n</code></pre></p>\n</div>\n<p>根据最开始的描述，需要的操作至少还有：并联、串联、匹配0或一次、匹配0或任意次。</p>\n<p>下面是并联多个匹配函数的并联操作，输入一个匹配函数列表和一个结果处理函数，返回一个并联后的匹配函数。</p>\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>-- parallelize matchers\nparallelize = function(matchers,handler)\n  if handler == nil then\n    handler = no_h\n  end\n<p>– the paralleized matcher function<br />\nfunction p_matcher(json_str, start)<br />\nlocal r,v,s</p>\n<pre><code>for i=1,#matchers do\n  r,v,s = matchers[i](json_str, start)\n  if r then\n    if handler == nil_h then return true, nil, s end\n    if handler == no_h then return true, v, s end\n    return r,handler(v),s\n  end\nend\n\nreturn false,nil,start\n</code></pre>\n<p>end</p>\n<p>return p_matcher<br />\nend<br />\n</code></pre></p>\n</div>\n<p>下面是串联多个匹配函数的串联操作，输入一个匹配函数列表和一个结果处理函数，返回一个串联后的匹配函数。</p>\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>-- serialize matchers\nserialize = function(matchers,handler)\n  if handler == nil then\n    handler = no_h\n  end\n<p>– the serialized matcher function<br />\nfunction s_matcher(json_str, start)<br />\nlocal r,v,s = false,nil,start<br />\nlocal results = &#123;&#125;</p>\n<pre><code>for i=1,#matchers do\n  r,v,s = matchers[i](json_str, s)\n  if r == false then\n    return false,nil,start\n  end\n  table.insert(results,v)\nend\n\nif handler == nil_h then return true, nil, s end\nif handler == no_h then return true, results, s end\nreturn true,handler(results),s\n</code></pre>\n<p>end</p>\n<p>return s_matcher<br />\nend<br />\n</code></pre></p>\n</div>\n<p>匹配0或任意次和匹配1或任意次之间存在转换关系，实现中选了1或任意次匹配作为原子操作，0或任意次可以描述为:(““表示空串)</p>\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>0_or_more = one_or_more | &#34;&#34;\n</code></pre>\n</div>\n<p>下面是1或任意次匹配操作，接受一个匹配函数和一个结果处理函数，返回一个匹配1次或任意次的匹配函数。</p>\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>-- make a matcher match one or more\none_or_more = function(matcher, handler)\n  if handler == nil then\n    handler = function(v) return v end\n  end\n<p>– the one or more matcher function<br />\nfunction oom_matcher(json_str, start)<br />\nlocal r,v,s = false,nil,start<br />\nlocal results = &#123;&#125;</p>\n<pre><code>r,v,s = matcher(json_str, s)\nif r == false then\n  return false,nil,s\nend\ntable.insert(results,v)\n\nwhile true do\n  r,v,s = matcher(json_str, s)\n  if r == false then\n    break\n  end\n  table.insert(results,v)\nend\n\nif handler == nil_h then return true, nil, s end\nif handler == no_h then return true, results, s end\nreturn true,handler(results),s\n</code></pre>\n<p>end</p>\n<p>return oom_matcher<br />\nend<br />\n</code></pre></p>\n</div>\n<p>下面定义了一个空串匹配函数，和定义一个0或1次匹配操作函数。</p>\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>-- empty\nlocal empty_m = generator(&#34;&#34;,nil_h)\n<p>– or empty helper<br />\nlocal or_empty = function(matcher)<br />\nreturn parallelize&#123;matcher,empty_m&#125;<br />\nend<br />\n</code></pre></p>\n</div>\n<p>定义完这些，就可以开始描述我们的匹配函数了。</p>\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>-- main matchers\nlocal null_m, boolean_m, number_m, string_m, object_m, array_m, value_m, value_a\n</code></pre>\n</div>\n<p>value匹配函数的描述，value为number_m,string_m,boolean_m,null_m,object_m,array_m并联。</p>\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>-- value\nvalue_m = function(json_str,s)\n  -- use value_a to bootup\n  if value_a==nil then\n    value_a = parallelize&#123;number_m,string_m,boolean_m,null_m,object_m,array_m&#125;\n  end\n  return value_a(json_str,s)\nend\n</code></pre>\n</div>\n<p>这里的value需要使用value_a来协助描述，因为代码最终会出现循环引用，此时number_m,string_m,boolean_m,null_m,object_m,array_m都还没定义，需要在定义好后，才能生成value的匹配函数。</p>\n<p>匹配null的函数，使用生成函数生成。</p>\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>-- null\nnull_m = generator(&#34;null&#34;,function() return nil end)\n</code></pre>\n</div>\n<p>匹配boolean的函数，true和false使用生成函数生成，然后并联true和false匹配函数，生成boolean匹配函数。</p>\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>-- boolean\nlocal true_m = generator(&#34;true&#34;, function() return true end)\nlocal false_m = generator(&#34;false&#34;, function() return false end)\nboolean_m = parallelize&#123;true_m,false_m&#125;\n</code></pre>\n</div>\n<p>匹配number的函数，根据最上面的图，描述为如下：</p>\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>-- number\nlocal sign_m = generator(&#34;[+-]?&#34;,no_h)\nlocal minus_or_no_m = generator(&#34;[-]?&#34;,no_h)\nlocal number_no_0_m = generator(&#34;[1-9]%d*&#34;,no_h)\nlocal number_0_m = generator(&#34;0&#34;,no_h)\nlocal dot_number_m = generator(&#34;%.%d+&#34;,no_h)\nlocal e_number_m = generator(&#34;[eE][+-]?%d+&#34;,no_h)\n<p>number_m = serialize(<br />\n&#123;<br />\nminus_or_no_m,<br />\nparallelize&#123;number_0_m,number_no_0_m&#125;,<br />\nor_empty(dot_number_m),<br />\nor_empty(e_number_m)<br />\n&#125;,<br />\nfunction(t) return tonumber(table.concat(t)) end<br />\n)<br />\n</code></pre></p>\n</div>\n<p>string需要处理unicode2utf8编码转换及转义符号。</p>\n<p>unicode到utf8转换函数：</p>\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>-- string\nlocal function hex2utf8(hex)\n  local v, utf8str = 0, &#34;&#34;  \n  v = tonumber(hex,16)\n  if v &gt;= 0x0800 then\n    utf8str = string.char(v%0x40+0x80)\n    v = math.modf(v/0x40)\n    vv = v % 0x40\n    utf8str = string.char(vv+0x80) .. utf8str\n    v = math.modf(v/0x40)\n    utf8str = string.char(v+0xe0) .. utf8str\n  elseif v &gt;= 0x0080 then\n    utf8str = string.char(v%0x40+0x80)\n    v = math.modf(v/0x40)\n    utf8str = string.char(v+0xc0) .. utf8str\n  else\n    utf8str = string.char(v)\n  end\n  return utf8str\nend\n</code></pre>\n</div>\n<p>匹配引号的函数，使用生成函数生成。</p>\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>-- string\nlocal quotation_m = generator(&#34;&#34;&#34;,nil_h)\n</code></pre>\n</div>\n<p>匹配非”&#34;字符的函数，生成函数生成。</p>\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>local char_m = generator(&#34;[^&#34;\\]+&#34;, no_h)\n</code></pre>\n</div>\n<p>转义表</p>\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>local escape_char = &#123;\n    [&#34;&#34;&#34;] = &#34;&#34;&#34;,\n    [&#34;\\&#34;] = &#34;\\&#34;,\n    [&#34;/&#34;]  = &#34;/&#34;,\n    [&#34;b&#34;]  = &#34;b&#34;,\n    [&#34;f&#34;]  = &#34;f&#34;,\n    [&#34;n&#34;]  = &#34;n&#34;,\n    [&#34;r&#34;]  = &#34;r&#34;,\n    [&#34;t&#34;]  = &#34;t&#34;,\n  &#125;\n</code></pre>\n</div>\n<p>匹配”&#34;字符函数。</p>\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>local backslash_m = generator(&#34;\\&#34;, nil_h)\n</code></pre>\n</div>\n<p>转义符号匹配和处理函数，注意传入的结果处理函数。</p>\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>local escape_char_m = generator(&#34;[&#34;\\/bfnrt]&#34;,function(c) return escape_char[c] end)\n</code></pre>\n</div>\n<p>unicode匹配和处理函数，注意传入的结果处理函数。</p>\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>local unicode_char_m = generator(&#34;u[0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F]&#34;, function(v) return hex2utf8(string.sub(v,2)) end)\n</code></pre>\n</div>\n<p>string的描述</p>\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>string_m = serialize(\n  &#123;\n    quotation_m,\n    or_empty(\n        one_or_more(\n          parallelize&#123;\n            char_m,\n            serialize(\n              &#123;\n                backslash_m,\n                parallelize&#123;escape_char_m,unicode_char_m&#125;\n              &#125;,\n              table.concat\n              ),\n            &#125;,\n          table.concat\n          )\n      ),\n    quotation_m\n  &#125;,\n  table.concat\n)\n</code></pre>\n</div>\n<p>object的描述，各层结果处理函数比较复杂。</p>\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>-- object\n-- brace_l\nlocal brace_l_m = generator(&#34;%s*&#34; .. &#34;&#123;&#34; .. &#34;%s*&#34;,nil_h)\nlocal brace_r_m = generator(&#34;%s*&#34; .. &#34;&#125;&#34; .. &#34;%s*&#34;,nil_h)\nlocal colon_m = generator(&#34;%s*:%s*&#34;,nil_h)\nlocal comma_m = generator(&#34;%s*,%s*&#34;,nil_h)\n<p>local object_item_m = serialize&#123;string_m,colon_m,value_m&#125;</p>\n<p>object_m = serialize(<br />\n&#123;<br />\nbrace_l_m,<br />\nor_empty(<br />\nserialize(<br />\n&#123;<br />\nobject_item_m,<br />\nor_empty(<br />\none_or_more(<br />\nserialize(<br />\n&#123;comma_m,object_item_m&#125;,<br />\nfunction(t) return t[1] end<br />\n)<br />\n)<br />\n)<br />\n&#125;,<br />\nfunction(t)<br />\nif t[2] then<br />\ntable.insert(t[2],t[1])<br />\nreturn t[2]<br />\nelse<br />\nreturn &#123;t[1]&#125;<br />\nend<br />\nend<br />\n)<br />\n),<br />\nbrace_r_m<br />\n&#125;,<br />\nfunction(t)<br />\nlocal o = &#123;&#125;</p>\n<pre><code>if t[1] then\n  for k,v in pairs(t[1]) do\n    o[v[1]] = v[2]\n  end\nend\n\nreturn o\n</code></pre>\n<p>end<br />\n)<br />\n</code></pre></p>\n</div>\n<p>array的描述，array需要保持一个状态index，如果直接用基本操作描述，传入的结果处理函数会比较蛋疼，所以用函数实现了。</p>\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>-- arrary\nlocal bracket_l_m = generator(&#34;%s*%[%s*&#34;,nil_h)\nlocal bracket_r_m = generator(&#34;%s*%]%s*&#34;,nil_h)\n<p>array_m = function(json_str, start)</p>\n<p>local array,index = &#123;&#125;, 1<br />\nlocal add_item = function(v) array[index] = v[1]; index=index+1 end<br />\nlocal array_item_m = serialize(&#123;value_m&#125;,add_item)</p>\n<p>local array_a = serialize&#123;<br />\nbracket_l_m,<br />\nor_empty(<br />\nserialize&#123;<br />\narray_item_m,<br />\nor_empty(<br />\none_or_more(serialize&#123;comma_m,array_item_m&#125;)<br />\n)<br />\n&#125;<br />\n),<br />\nbracket_r_m<br />\n&#125;</p>\n<p>local r,v,s = array_a(json_str,start)<br />\nreturn r,array,s<br />\nend<br />\n</code></pre></p>\n</div>\n<p>最后，匹配函数</p>\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>local function Marshal(json_str)\n  local result,value,start = value_m(json_str,1)\n  if result and start == #json_str+1 then\n    return value\n  else\n    return nil, &#34;error_type&#34;\n  end\nend\n</code></pre>\n</div>\n<p>lua table 反解析成 json string 的比较直观，对每一种lua value类型写一个转换函数即可，此处不冗述。</p>","text":"题目任务描述：封装json格式的数据与lua value间的互相转换功能 下载ECMA-404的描述文件，观察json的数据格式。 根据描述，一个json value可以是这些类型: object, array, number, string, true, false, or n...","link":"","photos":[],"count_time":{"symbolsCount":"8.7k","symbolsTime":"8 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Lua语法邮箱sina","uid":"950e37f9b2649a41b194c5a23656d522","slug":"zl/2016-01-01-577_Lua语法邮箱sina","date":"2024-04-03T03:47:35.827Z","updated":"2024-04-03T03:47:35.827Z","comments":true,"path":"api/articles/zl/2016-01-01-577_Lua语法邮箱sina.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":" Lua是一个以性能著称的轻量级的脚本语言。可以跨平台运行解析，而不需要编译的过程。Lua是一个区分大小写的编程语言。 Lua语法学习 变量 1、标识符 Lua中使用标识符定义一个变量，标识符由字母，数字，下划线组成。最好不要使用下划线加大写字母的标识符，因为Lua的保留字也是这...","link":"","photos":[],"count_time":{"symbolsCount":"5.5k","symbolsTime":"5 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"LUA_API","uid":"c13ee86f07c7d8f39c72e20f21e7cd30","slug":"zl/2016-01-01-574_LUA_API","date":"2024-04-03T03:47:35.826Z","updated":"2024-04-03T03:47:35.826Z","comments":true,"path":"api/articles/zl/2016-01-01-574_LUA_API.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":" 编译使用 lua api 的 c 语言程序 gcc temp.c -o temp -llua -lm -ldl 生成动态链接库供 lua 程序调用 gcc temp.c -o temp.so -fPIV -shared LUA_API 定义 /* @@ LUA_API is a...","link":"","photos":[],"count_time":{"symbolsCount":"2k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}