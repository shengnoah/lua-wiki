{"title":"Lua","uid":"15b0cdc6d03f6c3f6bf8d3a7ff197317","slug":"zl/2016-01-01-381_Lua ","date":"2024-04-03T03:47:35.669Z","updated":"2024-04-03T03:47:35.669Z","comments":true,"path":"api/articles/zl/2016-01-01-381_Lua .json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<blockquote>\n  <p>前段时间在腾讯课堂上看到一个视频，是关于一个将C#项目转换成lua项目的一篇介绍。他们描述的方案是反编译C#输出的Dll文件，反编译得出的数据会作C#翻译lua的源数据。一时起了敬畏之心，借助这个机会恰好梳理一下自己的lua知识。</p>\n</blockquote>\n<blockquote>\n  <p>我是在c的基础之上进行lua学习的，期间发现有很多lua的特性是与C语言不相同的，个人认为如果不注意这些区别很容易在未来的工作中出现难以排查的bug，程序开发还是需要一定的严谨性。</p>\n</blockquote>\n<h2 id=\"缘起\">缘起</h2>\n<p>正值待业充电期，在腾讯课堂上看到一篇<a href=\"https://ke.qq.com/course/346256\">高效热更新，Lua翻译工具详解</a>，它采用的方案是反编译C#的dll文件，根据反编译的内容再将其翻译成Lua语言，继而实现项目的代码更新部分。为了能够熟知这种方案的可行性以及其效率和稳定性，决定先从lua这门语言着手研究。</p>\n<h2 id=\"关于lua的开发环境的配置\">关于lua的开发环境的配置</h2>\n<p>我使用的是<a href=\"http://www.luastudio.net/\">LuaStudio</a>，很便捷的一个IDE,安装完毕之后就可以直接使用。\nlua官方网站也有免费提供<a href=\"http://www.luastudio.net/\">在线解释器</a>\n当然如果想自己体验搭建解释器的话，可以参考<a href=\"https://www.cnblogs.com/AkazaAkari/p/6278228.html\">从零开始的Lua宅[1]：编译Lua解释器</a>这篇博文。</p>\n<h4 id=\"lua中声明的对象不具有c语言中引用类型的那种数据传递的特性\">lua中声明的对象不具有C语言中引用类型的那种数据传递的特性。</h4>\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>table1 = &#123;&#125;\ntable2 = &#123;&#125;\ntable1[1] = &#34;testTable1_key1&#34;\ntable1[2] = &#34;testTable1_key2&#34;\ntable2[1] = &#34;testTable2_key1&#34;\ntable2[2] = &#34;testTable2_key2&#34;\n<p>table3 = &#123;&#125;<br />\ntemp = table1<br />\ntable3[&quot;temp&quot;] = table1<br />\nprint(table3[&quot;temp&quot;][1])<br />\ntemp = table2<br />\nprint(table3[&quot;temp&quot;][1])<br />\ntemp = table3[&quot;temp&quot;]<br />\ntemp  = table2<br />\nprint(table3[&quot;temp&quot;][1])<br />\n</code></pre></div></div></p>\n<p>这是结果\n<img src=\"https://raw.githubusercontent.com/RoneBlog/RoneBlog.github.io/master/img/2018-11-22-Lua/20190228luaTest1.png\" alt=\"\"/>\n即使temp对象被修改成table2，那table中的数值依旧是table1的数据。</p>\n<h4 id=\"当table中的索引不存在时解释器并不会抛出异常\">当table中的索引不存在时，解释器并不会抛出异常。</h4>\n<p>lua中所有未声明和未赋值的对象的初始值，在被调用时都会被当作nil处理。</p>\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>a = &#123;&#125;\nfor i = 1,1000 do \na[i] = i * 2\nend\na[&#34;x&#34;] = 10\nprint(a[&#34;x&#34;])\nprint(a[&#34;y&#34;])\n</code></pre></div></div>\n<p>结果为：\n<img src=\"https://raw.githubusercontent.com/RoneBlog/RoneBlog.github.io/master/img/2018-11-22-Lua/20190228luaTest2.png\" alt=\"\"/></p>\n<h4 id=\"语法棒棒糖实现table进行一个更简便的输入\">【语法棒棒糖】实现table进行一个更简便的输入</h4>\n<p>刚开始接触到这类写法的时候，第一反应就是觉得好神奇。不管有没有声明与赋值都可以这样使用，当然结果也是在意料之中。</p>\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>a = &#123;&#125;\na.y = 999\nprint(a.y)\nprint(a.x)\n</code></pre></div></div>\n<p>结果为：\n<img src=\"https://raw.githubusercontent.com/RoneBlog/RoneBlog.github.io/master/img/2018-11-22-Lua/20190228luaTest3.png\" alt=\"\"/></p>\n<h4 id=\"关于获取一个数据对象的长度问题有些需要注意的地方\">关于获取一个数据对象的长度问题，有些需要注意的地方。</h4>\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>testTable = &#123;&#125;\nfor i = 1,1000 do \ntestTable[i] = i * 2\nend\ntestValue = &#34;this is Test&#34;\nprint(&#34;table length = &#34; .. #testTable)\nprint(&#34;testValue length = &#34; .. #testValue)\ntestValue = &#123;&#125; -- 重置一下\ntestValue[1000] = &#34;Test 1000&#34;\nprint(&#34;testValue 1000 = &#34; .. #testValue)\n</code></pre></div></div>\n<p>结果为：\n<img src=\"https://raw.githubusercontent.com/RoneBlog/RoneBlog.github.io/master/img/2018-11-22-Lua/20190228luaTest4.png\" alt=\"\"/>\n最后一条的输出结果有些让人意外，原因是所有未初始化的元索引结果都是nil，lua将nil作为界定数组结尾的标志，当一个数组中间存在nil时，长度操作符会认为这些nil元素就是结尾标记。\n另外在lua中table[0]和table[“0”]是两种索引，并不指向一个数据。\n如果对这两点不加以注意，那很可能会给未来的程序开发带来一些难以解决的bug。\n一般情况下的table表中一般不会存在那种中间nil。如果真的需要处理这种情况函数table.maxn(目标对象)，会返回table的最大正索引。</p>\n<h4 id=\"关于lua的数学运算符\">关于lua的数学运算符</h4>\n<p>+（加法） -（减法） *（乘法） /（除法） ^（指数） % (求模)\n取模的公式实现 a % b == a - floor(a/b) * b</p>\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>x = 9.123456\nprint(x - x % 0.01) -- 保留小数点后两位的写法\nprint(x % 1) -- 小数部分部分\nprint(x - x % 1) --整数部分\n</code></pre></div></div>\n<p>结果为\n<img src=\"https://raw.githubusercontent.com/RoneBlog/RoneBlog.github.io/master/img/2018-11-22-Lua/20190228luaTest5.png\" alt=\"\"/></p>\n<h4 id=\"关于table索引的一些注意事项\">关于Table索引的一些注意事项</h4>\n<ul>\n  <li>table中 默认起始索引是1 （不同于C的0），按照从左到右的方法按照顺序依次索引，期间会跳过已经声明的显示索引，即a[1000] = 1</li>\n  <li>当table中存在显示索引与隐式索引存在相同值时，lua会优先隐式索引</li>\n  <li>当table中存在两个相同值的显式索引时，会优先索引大的那个方向的值</li>\n</ul>\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>opnames = \n&#123; \n\t[&#34;+&#34;] = &#34;add&#34;,\n\t[&#34;-&#34;] = &#34;sub&#34;,\n\t[&#34;*&#34;] = &#34;mul&#34;,\n\t[&#34;/&#34;] = &#34;div&#34;,\n&#125;\n--table 测试1\ni = 2;s = &#34;-&#34;\na = &#123;[i+0]=s,[i+1]= s..s,[i+2] = s..s..s,&#34;Sunday&#34;,&#34;Monday&#34;,&#34;Tuesday&#34;,&#34;WednesDay&#34;,&#34;ThursDay&#34;,&#34;Friday&#34;,&#34;Saturday&#34;&#125;\nprint(&#34;测试1&#34; .. opnames[s])\nprint(&#34;测试1&#34; .. a[2])\nprint(&#34;测试1&#34; .. a[1])\nprint(&#34;测试1&#34; .. a[2])\na = &#123;[i+1]= s..s,[i+2] = s..s..s,&#34;Sunday&#34;,&#34;Monday&#34;,[i+0]=s,&#34;Tuesday&#34;,&#34;WednesDay&#34;,&#34;ThursDay&#34;,&#34;Friday&#34;,&#34;Saturday&#34;&#125;\n--table 测试2\nprint(&#34;测试2&#34; .. opnames[s])\nprint(&#34;测试2&#34; .. a[2])--当table中存在显示索引与隐式索引存在相同值时，lua会优先隐式索引\nprint(&#34;测试2&#34; .. a[3])\n--table 测试3\ns = &#34;-&#34;\na = &#123;[22]=s,[22] = s..s,&#34;Sunday&#34;,&#34;Monday&#34;&#125;\nprint(&#34;测试3&#34; .. a[22])--当table中存在两个相同值的显式索引时，会优先索引大的那个方向的值\n</code></pre></div></div>\n<p>结果为</p>\n<p><img src=\"https://raw.githubusercontent.com/RoneBlog/RoneBlog.github.io/master/img/2018-11-22-Lua/20190228luaTest6.png\" alt=\"\"/></p>\n<h4 id=\"lua中有趣的赋值-多重赋值\">Lua中有趣的赋值-多重赋值</h4>\n<p>多重赋值——用作数据的两两交换\n左侧变量的数量，与右侧数值的变量要相等。不匹配的数据会被设置成nil或者被丢弃\n看到这一特性时，第一时间想到的时c语言中的冒泡排序核心语法可以从三行缩略成一行 list[a],list[b] = list[b],list[a]</p>\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>x = &#34;test string&#34;\ny = 50\nx,y = y,x\nprint(&#34;output: X = &#34; .. x .. &#34; Y = &#34; .. y)\na,b,c = 0\nprint(&#34;output: a = &#34; .. a .. &#34; b = &#34; .. tostring(b) .. &#34; c = &#34; .. tostring(c))\n</code></pre></div></div>\n<p>结果为\n<img src=\"https://raw.githubusercontent.com/RoneBlog/RoneBlog.github.io/master/img/2018-11-22-Lua/20190228luaTest7.png\" alt=\"\"/></p>\n<h4 id=\"有关于程序块与local的注意事项\">有关于程序块与local的注意事项</h4>\n<p>如果这些语句没有被包裹在程序块（do end）中，一般情况下会很好的运行下去。但是在交互模式中可能就会出现一些问题了。\n在交互模式下，lua的每一行一句都可能被视为一个代码块，比如local x = 10是一个代码块，local i = 1是另外的一个代码块。稍微熟悉lua的人都知道，不同的块内是无法访问块内的loacl字段的。</p>\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>local x = 10\nlocal i = 1\n<p>while i &lt;= x do<br />\nlocal x = i* 2<br />\nprint(&quot;x = &quot; … x)<br />\ni = i+1<br />\nend</p>\n<p>if i &gt; 20 then<br />\nlocal x<br />\nx = 20<br />\nprint(x +2 )<br />\nelse<br />\nprint(x)<br />\nend</p>\n<p>print(x)<br />\nprint(i)<br />\n</code></pre></div></div></p>\n<h4 id=\"lua中的for\">lua中的for</h4>\n<p>for语句有两种形式：数字型for（Numeric for）和泛型for（generic for）\n在C语言中，有一种写法是遍历删除列表的形式</p>\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>\t\tList&lt;int&gt; testList = new List&lt;int&gt;()&#123;1,2,3,4,5&#125;;\n\t\tfor(int i = 0;i &lt; testList.Count;i++)\n\t\t&#123;\n\t\t\ttestList.Remove(i);\n\t\t\ti--;\n\t\t&#125;\n</code></pre></div></div>\n<p>有一点需要提醒的时，lua一般不建议在for语法体里去修改var的值</p>\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>--Numeric for\n\t--for\tvar = exp1,exp2,exp3 do\n\t--&lt;执行体&gt;\n\t--endexp1和exp2表示var从exp1变化至exp2，exp3表示不长，省略时默认为1\n\tfor var = 10,1,-1 do\n\tprint(var)\n\tend\n--Generic for\n\t--他的作用相当于C语言中的foreach\n\tday = &#123; &#34;Sunday&#34;,&#34;Monday&#34;,&#34;Tuesday&#34;,&#34;Wednesday&#34;,&#34;Thursday&#34;,&#34;Friday&#34;,&#34;Saturday&#34; &#125;\n\trevDays = &#123;&#125;\n\tfor k,v in ipairs(day) do\n\t\trevDays[k] = v\n\t\tprint(&#34;K == &#34; .. k .. &#34; V == &#34; .. v)\n\tend\n</code></pre></div></div>\n<h4 id=\"语法棒棒糖一个函数若只有一个参数并且该参数是一个string或者table构造式那么圆括号便是可有可无的\">【语法棒棒糖】一个函数若只有一个参数，并且该参数是一个string或者table构造式，那么圆括号便是可有可无的。</h4>\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>\tfunction test(value)\n\tprint(value)\n\tend\n\tprint(&#34;Hello World&#34;)\n\tprint &#34;Hello World&#34;\n\tprint [[Hello World]]\n\ttest(&#34;Hello World&#34;,&#34;Hey World&#34;)\n\t--测试2\n\tfunction testToString(value)\n\tprint(&#34;toString = &#34; .. tostring(value))\n\tend\n\tdo\n\tlocal testInt = 1314520\n\ttestToString(testInt)\n\t--testToString testInt -- 这里会出现编译错误\n\tend\n</code></pre></div></div>\n<p>结果为</p>\n<p><img src=\"https://raw.githubusercontent.com/RoneBlog/RoneBlog.github.io/master/img/2018-11-22-Lua/20190228luaTest8.png\" alt=\"\"/></p>\n<h4 id=\"关于函数传参的问题\">关于函数传参的问题</h4>\n<p>多重返回值,在这个特性的测试上。我犯了一个错误，自以为返回的是多个返回值返回的是一个table，实际上不是，确实是返回了多个参数的数值，在返回赋值这一操作中恰好是应用了前面的赋值中的一个特性\n”a ,b = c,d“</p>\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>function maximum(a)\n\tlocal mi = 1\n\tlocal m = a[mi]\n\t\tfor i,v in ipairs(a) do\n\t\t\tif #a &lt; 10 then\n\t\t\treturn 999\n\t\t\telseif v &gt; m then\n\t\t\tmi = i;m = v\n\t\t\tend\n\t\tend\nreturn m,mi\nend\n<p>function foo() end<br />\nfunction foo1() return &quot;foo1&quot;  end<br />\nfunction foo2() return &quot;foo2_1&quot;,&quot;foo2_2&quot; end</p>\n<p>testTable = &#123;0,1,2,3,4,5,6,7,8&#125;<br />\nresult1,result2 = maximum(testTable)–测试单个返回值<br />\nprint(&quot;测试1 = &quot; … tostring(result1))  print(&quot;测试1 = &quot; … tostring(result2))<br />\ntestTable[#testTable + 1] = 9<br />\ntestTable[#testTable + 1] = 10<br />\nresult1,result2 = maximum(testTable)–测试两个个返回值<br />\nprint(&quot;测试2 = &quot; … tostring(result1))  print(&quot;测试2 = &quot; … tostring(result2))<br />\n–测试3<br />\n–如果函数调用”foo2()“不是一系列表达式的最后一个元素，那么将只产生一个值<br />\nx,y = foo2() print(&quot;测试3:x = &quot; … tostring(x) …&quot; y = &quot; …tostring(y))<br />\nx = foo2() print(&quot;测试3:x = &quot; … tostring(x))<br />\nx,y,z = 10,foo2();print(&quot;测试3:x = &quot; … tostring(x) …&quot; y = &quot; …tostring(y)…&quot; z = &quot; …tostring(z))<br />\nx,y = foo2(),20; print(&quot;测试3:x = &quot; … tostring(x) …&quot; y = &quot; …tostring(y))<br />\nprint(foo2(),2)–函数穿参数的测试<br />\nprint(2,foo2())–函数穿参数的测试<br />\n</code></pre></div></div></p>\n<p>有一点需要注意的是，如果函数调用”foo2()“不是一系列表达式的最后一个元素，那么将只产生一个值。</p>\n<h4 id=\"最后来了解一下关于递归函数的一点注意事项\">最后来了解一下关于递归函数的一点注意事项</h4>\n<p>先来了解闭合函数closure个人觉它得类悉于C语言中的匿名函数 (a,b) =&gt;{方法体内容}，在lua所有的函数都可视为是某种意义上闭合函数。</p>\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>names = &#123; &#34;Peter&#34;,&#34;Paul&#34;,&#34;Mary&#34;&#125;\ngrades = &#123; Mary = 10, Paul = 7,Peter = 8&#125;\nfunction SortByGrades(names,grades)\n\tlocal closure = function(n1,n2) return grades[n1] &gt; grades[n2]end\n\ttable.sort(names,closure)\n</code></pre></div></div>\n<p>接下来说一下注意事项，我们先看代码。</p>\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>local fact = function (n)\n\tif n == 0 then return 1\n\telse return n * fact(n - 1)--这种情况下会出错\n\tend\nend\n</code></pre></div></div>\n<p>运行中第三行会出现fact为nil的错误，不细细研究的话还真不清楚是什么情况。\n它的原因是当lua编译到函数体中调用fact(n-1)的地方时，由于局部的fact尚未定义完毕，因此这句表达式实际上是指向了了一个全局的fact，那此时的fact没有显示声明即 fact = nil，而非此函数本身。\n为了解决这个问题，可以先定义一个局部变量，然后再定义函数本身。</p>\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>local fact\nfact = function (n)\n\tif n == 0 then return 1\n\telse return n * fact(n - 1)\n\tend\nend\n--当然也可以通过这种方式来定义\nlocal function fact(n)\n\tif n == 0 then return 1\n\telse return n * fact(n - 1)\n\tend\nend\n</code></pre></div></div>\n<p>另外一点关于间接递归需要了解的注意事项</p>\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>local f,g \t--前向声明\nfunction g()\n\tf()\nend\n--local function f()\nfunction f()\t\n\tg()\t\t\t\nend\n</code></pre></div></div>\n<p>这种情况下不能在使用 local function这种定义，如果这样的话lua会创建一个全新的局部变量f,而将原来声明的f(函数g中所引用的那个)至于未定义的状态</p>\n<pre><code>            &lt;hr style=&quot;visibility: hidden;&quot;/&gt;\n\n            \n\n\n            \n            \n            \n            &lt;link rel=&quot;stylesheet&quot; href=&quot;https://unpkg.com/gitalk/dist/gitalk.css&quot;/&gt;\n            &lt;script src=&quot;https://unpkg.com/gitalk@latest/dist/gitalk.min.js&quot;&gt;&lt;/script&gt;\n            &lt;div id=&quot;gitalk-container&quot;&gt;&lt;/div&gt;\n            \n            \n            &lt;script src=&quot;/js/md5.min.js&quot;&gt;&lt;/script&gt;\n            &lt;script type=&quot;text/javascript&quot;&gt;\n                var gitalk = new Gitalk(&#123;\n                clientID: '87bb43eae82eeff997e1',\n                clientSecret: '0827a8562d4b23c7094ec1ccac67be270ca354df',\n                repo: 'RoneBlog.github.io',\n                owner: 'RoneBlog',\n                admin: ['RoneBlog'],\n                distractionFreeMode: true,\n                id: md5(location.pathname),\n                &#125;);\n                gitalk.render('gitalk-container');\n            &lt;/script&gt;\n</code></pre>\n","text":" 前段时间在腾讯课堂上看到一个视频，是关于一个将C#项目转换成lua项目的一篇介绍。他们描述的方案是反编译C#输出的Dll文件，反编译得出的数据会作C#翻译lua的源数据。一时起了敬畏之心，借助这个机会恰好梳理一下自己的lua知识。 我是在c的基础之上进行lua学习的，期间发现有...","link":"","photos":[],"count_time":{"symbolsCount":"8.5k","symbolsTime":"8 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%BC%98%E8%B5%B7\"><span class=\"toc-text\">缘起</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%85%B3%E4%BA%8Elua%E7%9A%84%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%9A%84%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">关于lua的开发环境的配置</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#lua%E4%B8%AD%E5%A3%B0%E6%98%8E%E7%9A%84%E5%AF%B9%E8%B1%A1%E4%B8%8D%E5%85%B7%E6%9C%89c%E8%AF%AD%E8%A8%80%E4%B8%AD%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B%E7%9A%84%E9%82%A3%E7%A7%8D%E6%95%B0%E6%8D%AE%E4%BC%A0%E9%80%92%E7%9A%84%E7%89%B9%E6%80%A7\"><span class=\"toc-text\">lua中声明的对象不具有C语言中引用类型的那种数据传递的特性。</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%BD%93table%E4%B8%AD%E7%9A%84%E7%B4%A2%E5%BC%95%E4%B8%8D%E5%AD%98%E5%9C%A8%E6%97%B6%E8%A7%A3%E9%87%8A%E5%99%A8%E5%B9%B6%E4%B8%8D%E4%BC%9A%E6%8A%9B%E5%87%BA%E5%BC%82%E5%B8%B8\"><span class=\"toc-text\">当table中的索引不存在时，解释器并不会抛出异常。</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%AF%AD%E6%B3%95%E6%A3%92%E6%A3%92%E7%B3%96%E5%AE%9E%E7%8E%B0table%E8%BF%9B%E8%A1%8C%E4%B8%80%E4%B8%AA%E6%9B%B4%E7%AE%80%E4%BE%BF%E7%9A%84%E8%BE%93%E5%85%A5\"><span class=\"toc-text\">【语法棒棒糖】实现table进行一个更简便的输入</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%85%B3%E4%BA%8E%E8%8E%B7%E5%8F%96%E4%B8%80%E4%B8%AA%E6%95%B0%E6%8D%AE%E5%AF%B9%E8%B1%A1%E7%9A%84%E9%95%BF%E5%BA%A6%E9%97%AE%E9%A2%98%E6%9C%89%E4%BA%9B%E9%9C%80%E8%A6%81%E6%B3%A8%E6%84%8F%E7%9A%84%E5%9C%B0%E6%96%B9\"><span class=\"toc-text\">关于获取一个数据对象的长度问题，有些需要注意的地方。</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%85%B3%E4%BA%8Elua%E7%9A%84%E6%95%B0%E5%AD%A6%E8%BF%90%E7%AE%97%E7%AC%A6\"><span class=\"toc-text\">关于lua的数学运算符</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%85%B3%E4%BA%8Etable%E7%B4%A2%E5%BC%95%E7%9A%84%E4%B8%80%E4%BA%9B%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9\"><span class=\"toc-text\">关于Table索引的一些注意事项</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#lua%E4%B8%AD%E6%9C%89%E8%B6%A3%E7%9A%84%E8%B5%8B%E5%80%BC-%E5%A4%9A%E9%87%8D%E8%B5%8B%E5%80%BC\"><span class=\"toc-text\">Lua中有趣的赋值-多重赋值</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%9C%89%E5%85%B3%E4%BA%8E%E7%A8%8B%E5%BA%8F%E5%9D%97%E4%B8%8Elocal%E7%9A%84%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9\"><span class=\"toc-text\">有关于程序块与local的注意事项</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#lua%E4%B8%AD%E7%9A%84for\"><span class=\"toc-text\">lua中的for</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%AF%AD%E6%B3%95%E6%A3%92%E6%A3%92%E7%B3%96%E4%B8%80%E4%B8%AA%E5%87%BD%E6%95%B0%E8%8B%A5%E5%8F%AA%E6%9C%89%E4%B8%80%E4%B8%AA%E5%8F%82%E6%95%B0%E5%B9%B6%E4%B8%94%E8%AF%A5%E5%8F%82%E6%95%B0%E6%98%AF%E4%B8%80%E4%B8%AAstring%E6%88%96%E8%80%85table%E6%9E%84%E9%80%A0%E5%BC%8F%E9%82%A3%E4%B9%88%E5%9C%86%E6%8B%AC%E5%8F%B7%E4%BE%BF%E6%98%AF%E5%8F%AF%E6%9C%89%E5%8F%AF%E6%97%A0%E7%9A%84\"><span class=\"toc-text\">【语法棒棒糖】一个函数若只有一个参数，并且该参数是一个string或者table构造式，那么圆括号便是可有可无的。</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%85%B3%E4%BA%8E%E5%87%BD%E6%95%B0%E4%BC%A0%E5%8F%82%E7%9A%84%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">关于函数传参的问题</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%9C%80%E5%90%8E%E6%9D%A5%E4%BA%86%E8%A7%A3%E4%B8%80%E4%B8%8B%E5%85%B3%E4%BA%8E%E9%80%92%E5%BD%92%E5%87%BD%E6%95%B0%E7%9A%84%E4%B8%80%E7%82%B9%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9\"><span class=\"toc-text\">最后来了解一下关于递归函数的一点注意事项</span></a></li></ol></li></ol></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"lua字符串学习","uid":"83451e5211a848f2af1d1a74fb6a5171","slug":"zl/2016-01-01-384_lua字符串学习","date":"2024-04-03T03:47:35.670Z","updated":"2024-04-03T03:47:35.671Z","comments":true,"path":"api/articles/zl/2016-01-01-384_lua字符串学习.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"基础字符串函数 函数 含义 string.lower(s) 字符串转换成小写 string.upper(s) 字符串转换成大写 string.len(s) 字符串长度 string.rep(s,2) 将字符串 s 重复 2 次 string.sub(s, j, j) 截取字符串 ...","link":"","photos":[],"count_time":{"symbolsCount":"2.1k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"nginx+lua+ngx_lua_waf实现waf功能","uid":"779207ded987b9d8c01e24f7fd261fcb","slug":"zl/2016-01-01-382_nginx+lua+ngx_lua_waf实现waf功能","date":"2024-04-03T03:47:35.669Z","updated":"2024-04-03T03:47:35.670Z","comments":true,"path":"api/articles/zl/2016-01-01-382_nginx+lua+ngx_lua_waf实现waf功能.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"用途： 防止sql注入，本地包含，部分溢出，fuzzing测试，xss,SSRF等web攻击 防止svn/备份之类文件泄漏 防止ApacheBench之类压力测试工具的攻击 屏蔽常见的扫描黑客工具，扫描器 屏蔽异常的网络请求 屏蔽图片附件类目录php执行权限 防止webshell...","link":"","photos":[],"count_time":{"symbolsCount":"2.8k","symbolsTime":"3 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}