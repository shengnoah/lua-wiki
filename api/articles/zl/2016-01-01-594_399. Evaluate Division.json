{"title":"399. Evaluate Division","uid":"5031930731b6e4a4cb5f9737c634e239","slug":"zl/2016-01-01-594_399. Evaluate Division","date":"2024-04-03T03:47:35.834Z","updated":"2024-04-03T03:47:35.834Z","comments":true,"path":"api/articles/zl/2016-01-01-594_399. Evaluate Division.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<p><a href=\"https://github.com/techlarry/note/edit/master/wiki/docs/Leetcode/399. Evaluate Division.md\" title=\"编辑此页\" class=\"md-icon md-content__icon\"></a></p>\n<pre><code>&lt;a href=&quot;https://techlarry.github.io/tags/Leetcode/&quot; style=&quot;color:white&quot; class=&quot;tag&quot;&gt; Leetcode &lt;/a&gt;\n\n\n\n&lt;a href=&quot;https://techlarry.github.io/tags/Graph/&quot; style=&quot;color:white&quot; class=&quot;tag&quot;&gt; Graph &lt;/a&gt;\n\n\n\n            &lt;p&gt;Equations are given in the format &lt;code class=&quot;codehilite&quot;&gt;A / B = k&lt;/code&gt;, where &lt;code class=&quot;codehilite&quot;&gt;A&lt;/code&gt; and &lt;code class=&quot;codehilite&quot;&gt;B&lt;/code&gt; are variables represented as strings, and &lt;code class=&quot;codehilite&quot;&gt;k&lt;/code&gt; is a real number (floating point number). Given some queries, return the answers. If the answer does not exist, return &lt;code class=&quot;codehilite&quot;&gt;-1.0&lt;/code&gt;.&lt;/p&gt;\n</code></pre>\n<p>Example:\n</p><div class=\"codehilite\"><pre><span></span>Given a / b = 2.0, b / c = 3.0. \nqueries are: a / c = ?, b / a = ?, a / e = ?, a / a = ?, x / x = ? . \nreturn [6.0, 0.5, -1.0, 1.0, -1.0 ].\n</pre></div><p></p>\n<p>The input is: <code class=\"codehilite\">String[][] equations, double[] values, String[][] queries</code> , where <code class=\"codehilite\">equations.size() == values.size()</code>, and the values are positive. This represents the equations. Return <code class=\"codehilite\">double[]</code>.</p>\n<p>According to the example above:</p>\n<div class=\"codehilite\"><pre><span></span>equations = [ [&#34;a&#34;, &#34;b&#34;], [&#34;b&#34;, &#34;c&#34;] ],\nvalues = [2.0, 3.0],\nqueries = [ [&#34;a&#34;, &#34;c&#34;], [&#34;b&#34;, &#34;a&#34;], [&#34;a&#34;, &#34;e&#34;], [&#34;a&#34;, &#34;a&#34;], [&#34;x&#34;, &#34;x&#34;] ]. \n</pre></div>\n<p>The input is always valid. You may assume that evaluating the queries will result in no division by zero and there is no contradiction.</p>\n<h4 id=\"_1\">分析<a class=\"headerlink\" href=\"#_1\" title=\"Permanent link\">¶</a></h4>\n<p>这道题目的难点在于发现可以用图论解决。对于方程<code class=\"codehilite\">A/B = C</code>，可以把A、B视为图的节点，AB构成图的一条边，C为边的权重。以这种方式构建有向图，那么对于任意方程<code class=\"codehilite\">x/y</code>的问题可以转化为<em>在有向图中，是否存在一条路径<span><span class=\"MathJax_Preview\">x-y</span><script type=\"math/tex\">x-y</script></span>，如果存在则返回路径的权重</em>。可以用DFS解决，时间复杂度为<span><span class=\"MathJax_Preview\">O(Qtimes(E+V))</span><script type=\"math/tex\">O(Qtimes(E+V))</script></span>，其中<span><span class=\"MathJax_Preview\">Q</span><script type=\"math/tex\">Q</script></span>为查询的数量，<span><span class=\"MathJax_Preview\">E</span><script type=\"math/tex\">E</script></span>为方程数量，<span><span class=\"MathJax_Preview\">V</span><script type=\"math/tex\">V</script></span>为方程中字母的数量。</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kt\">double</span><span class=\"o\">[]</span> <span class=\"nf\">calcEquation</span><span class=\"o\">(</span><span class=\"n\">String</span><span class=\"o\">[][]</span> <span class=\"n\">equations</span><span class=\"o\">,</span> <span class=\"kt\">double</span><span class=\"o\">[]</span> <span class=\"n\">values</span><span class=\"o\">,</span> <span class=\"n\">String</span><span class=\"o\">[][]</span> <span class=\"n\">queries</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">equations</span> <span class=\"o\">==</span> <span class=\"kc\">null</span> <span class=\"o\">||</span> <span class=\"n\">values</span> <span class=\"o\">==</span> <span class=\"kc\">null</span> <span class=\"o\">||</span> <span class=\"n\">queries</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"k\">return</span> <span class=\"k\">new</span> <span class=\"kt\">double</span><span class=\"o\">[]{};</span>\n    <span class=\"c1\">// construct graph</span>\n    <span class=\"n\">Map</span><span class=\"o\">&lt;</span><span class=\"n\">String</span><span class=\"o\">,</span> <span class=\"n\">Map</span><span class=\"o\">&lt;</span><span class=\"n\">String</span><span class=\"o\">,</span> <span class=\"n\">Double</span><span class=\"o\">&gt;&gt;</span> <span class=\"n\">graph</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">HashMap</span><span class=\"o\">&lt;&gt;();</span> <span class=\"c1\">// graph</span>\n    <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">equations</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n        <span class=\"n\">String</span> <span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"n\">equations</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">][</span><span class=\"mi\">0</span><span class=\"o\">],</span> <span class=\"n\">w</span> <span class=\"o\">=</span> <span class=\"n\">equations</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">][</span><span class=\"mi\">1</span><span class=\"o\">];</span>\n        <span class=\"k\">if</span> <span class=\"o\">(!</span><span class=\"n\">graph</span><span class=\"o\">.</span><span class=\"na\">containsKey</span><span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">))</span> <span class=\"n\">graph</span><span class=\"o\">.</span><span class=\"na\">put</span><span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"k\">new</span> <span class=\"n\">HashMap</span><span class=\"o\">&lt;&gt;());</span>\n        <span class=\"k\">if</span> <span class=\"o\">(!</span><span class=\"n\">graph</span><span class=\"o\">.</span><span class=\"na\">containsKey</span><span class=\"o\">(</span><span class=\"n\">w</span><span class=\"o\">))</span> <span class=\"n\">graph</span><span class=\"o\">.</span><span class=\"na\">put</span><span class=\"o\">(</span><span class=\"n\">w</span><span class=\"o\">,</span> <span class=\"k\">new</span> <span class=\"n\">HashMap</span><span class=\"o\">&lt;&gt;());</span>\n        <span class=\"n\">graph</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">).</span><span class=\"na\">put</span><span class=\"o\">(</span><span class=\"n\">w</span><span class=\"o\">,</span> <span class=\"n\">values</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]);</span>\n        <span class=\"n\">graph</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"n\">w</span><span class=\"o\">).</span><span class=\"na\">put</span><span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"mf\">1.0</span><span class=\"o\">/</span><span class=\"n\">values</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]);</span>\n    <span class=\"o\">}</span>\n    <span class=\"n\">Set</span><span class=\"o\">&lt;</span><span class=\"n\">String</span><span class=\"o\">&gt;</span> <span class=\"n\">mark</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">HashSet</span><span class=\"o\">&lt;&gt;();;</span>\n    <span class=\"n\">Map</span><span class=\"o\">&lt;</span><span class=\"n\">String</span><span class=\"o\">,</span> <span class=\"n\">Double</span><span class=\"o\">&gt;</span> <span class=\"n\">distTo</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">HashMap</span><span class=\"o\">&lt;&gt;();;</span>\n    <span class=\"kt\">double</span><span class=\"o\">[]</span> <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">double</span><span class=\"o\">[</span><span class=\"n\">queries</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">];</span>\n    <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">queries</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n        <span class=\"n\">String</span> <span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"n\">queries</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">][</span><span class=\"mi\">0</span><span class=\"o\">],</span> <span class=\"n\">w</span> <span class=\"o\">=</span> <span class=\"n\">queries</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">][</span><span class=\"mi\">1</span><span class=\"o\">];</span>\n        <span class=\"c1\">// invalid query</span>\n        <span class=\"k\">if</span> <span class=\"o\">(!</span><span class=\"n\">graph</span><span class=\"o\">.</span><span class=\"na\">containsKey</span><span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">||</span> <span class=\"o\">!</span><span class=\"n\">graph</span><span class=\"o\">.</span><span class=\"na\">containsKey</span><span class=\"o\">(</span><span class=\"n\">w</span><span class=\"o\">))</span> <span class=\"o\">{</span>\n            <span class=\"n\">res</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mf\">1.0</span><span class=\"o\">;</span>  <span class=\"k\">continue</span><span class=\"o\">;</span> <span class=\"o\">}</span>\n        <span class=\"c1\">// clear dfs result</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">{</span> <span class=\"n\">distTo</span><span class=\"o\">.</span><span class=\"na\">clear</span><span class=\"o\">();</span> <span class=\"n\">mark</span><span class=\"o\">.</span><span class=\"na\">clear</span><span class=\"o\">();}</span>\n<pre><code>    &lt;span class=&quot;c1&quot;&gt;// start dfs&lt;/span&gt;\n    &lt;span class=&quot;n&quot;&gt;distTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;\n    &lt;span class=&quot;n&quot;&gt;dfs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;graph&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mark&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;distTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;\n\n    &lt;span class=&quot;c1&quot;&gt;// check result&lt;/span&gt;\n    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mark&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;\n    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;distTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;\n&lt;span class=&quot;o&quot;&gt;&#125;&lt;/span&gt;\n&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;\n</code></pre>\n<p><span class=\"o\">}</span></p>\n<p><span class=\"kd\">private</span> <span class=\"kt\">void</span> <span class=\"nf\">dfs</span><span class=\"o\">(</span><span class=\"n\">Map</span><span class=\"o\">&lt;</span><span class=\"n\">String</span><span class=\"o\">,</span> <span class=\"n\">Map</span><span class=\"o\">&lt;</span><span class=\"n\">String</span><span class=\"o\">,</span> <span class=\"n\">Double</span><span class=\"o\">&gt;&gt;</span> <span class=\"n\">graph</span><span class=\"o\">,</span> <span class=\"n\">Set</span><span class=\"o\">&lt;</span><span class=\"n\">String</span><span class=\"o\">&gt;</span> <span class=\"n\">mark</span><span class=\"o\">,</span><br />\n<span class=\"n\">Map</span><span class=\"o\">&lt;</span><span class=\"n\">String</span><span class=\"o\">,</span> <span class=\"n\">Double</span><span class=\"o\">&gt;</span> <span class=\"n\">distTo</span><span class=\"o\">,</span> <span class=\"n\">String</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">{</span><br />\n<span class=\"n\">mark</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">);</span><br />\n<span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">w</span><span class=\"o\">:</span> <span class=\"n\">graph</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">).</span><span class=\"na\">keySet</span><span class=\"o\">())</span> <span class=\"o\">{</span><br />\n<span class=\"k\">if</span> <span class=\"o\">(!</span><span class=\"n\">mark</span><span class=\"o\">.</span><span class=\"na\">contains</span><span class=\"o\">(</span><span class=\"n\">w</span><span class=\"o\">))</span> <span class=\"o\">{</span><br />\n<span class=\"n\">distTo</span><span class=\"o\">.</span><span class=\"na\">put</span><span class=\"o\">(</span><span class=\"n\">w</span><span class=\"o\">,</span> <span class=\"n\">distTo</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">)*</span><span class=\"n\">graph</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">).</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"n\">w</span><span class=\"o\">));</span><br />\n<span class=\"n\">dfs</span><span class=\"o\">(</span><span class=\"n\">graph</span><span class=\"o\">,</span> <span class=\"n\">mark</span><span class=\"o\">,</span> <span class=\"n\">distTo</span><span class=\"o\">,</span> <span class=\"n\">w</span><span class=\"o\">);</span><br />\n<span class=\"o\">}</span><br />\n<span class=\"o\">}</span><br />\n<span class=\"o\">}</span><br />\n</pre></div></p>\n","text":" &lt;a href=&quot;https://techlarry.github.io/tags/Leetcode/&quot; style=&quot;color:white&quot; class=&quot;tag&quot;&gt; Leetcode &lt;/a&...","link":"","photos":[],"count_time":{"symbolsCount":"5.7k","symbolsTime":"5 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#_1\"><span class=\"toc-text\">分析</span></a></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Lua学习笔记(6)table.sort","uid":"eb78728ef779840fb67945d3eafe8a63","slug":"zl/2016-01-01-59_Lua学习笔记(6)table.sort","date":"2024-04-03T03:47:35.835Z","updated":"2024-04-03T03:47:35.835Z","comments":true,"path":"api/articles/zl/2016-01-01-59_Lua学习笔记(6)table.sort.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"[TOC] 简单来说就是table.sort的第二个参数支持自定义比较函数，这类似于c++的容器支持自定义比较函数一样，代码如下： local tbTest = &#123; &#123;1, 3&#125;, &#123;3, 5&#125;, &#123;5, 4&#125;...","link":"","photos":[],"count_time":{"symbolsCount":"2.6k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Programming in Lua(Thrid Edition)笔记","uid":"a502732b8dc58224e972b6c53538b8c4","slug":"zl/2016-01-01-595_Programming in Lua(Thrid Edition)笔记","date":"2024-04-03T03:47:35.834Z","updated":"2024-04-03T03:47:35.834Z","comments":true,"path":"api/articles/zl/2016-01-01-595_Programming in Lua(Thrid Edition)笔记.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"7 Iterators and the Generic for 用闭包编写迭代器可以存储状态，先写一个迭代器生成器，然后生成新的迭代器1234function (t) local i = 0 return function () i = i + 1； return t[i] en...","link":"","photos":[],"count_time":{"symbolsCount":"3.3k","symbolsTime":"3 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}