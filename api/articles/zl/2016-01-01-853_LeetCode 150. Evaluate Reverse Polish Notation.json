{"title":"LeetCode 150. Evaluate Reverse Polish Notation","uid":"9f85f1e7fd699a9f48cac697ebdd7c0c","slug":"zl/2016-01-01-853_LeetCode 150. Evaluate Reverse Polish Notation","date":"2024-04-03T03:47:36.117Z","updated":"2024-04-03T03:47:36.118Z","comments":true,"path":"api/articles/zl/2016-01-01-853_LeetCode 150. Evaluate Reverse Polish Notation.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>根据逆波兰表示法（后缀表达式），求表达式的值。</p>\n<p>有效的运算符包括 +, -, *, / 。每个运算对象可以是整数，也可以是另一个逆波兰表达式。</p>\n<p>说明：</p>\n<p>整数除法只保留整数部分。<br/>给定逆波兰表达式总是有效的。换句话说，表达式总会得出有效数值且不存在除数为 0 的情况。</p>\n<h3 id=\"tag\"><a href=\"#tag\" class=\"headerlink\" title=\"tag\"></a>tag</h3><p>基本计算器题 栈</p>\n<h3 id=\"样例\"><a href=\"#样例\" class=\"headerlink\" title=\"样例\"></a>样例</h3><figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/><span class=\"line\">9</span><br/><span class=\"line\">10</span><br/><span class=\"line\">11</span><br/><span class=\"line\">12</span><br/><span class=\"line\">13</span><br/><span class=\"line\">14</span><br/><span class=\"line\">15</span><br/><span class=\"line\">16</span><br/><span class=\"line\">17</span><br/><span class=\"line\">18</span><br/><span class=\"line\">19</span><br/><span class=\"line\">20</span><br/><span class=\"line\">21</span><br/><span class=\"line\">22</span><br/><span class=\"line\">23</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">输入: [&#34;10&#34;, &#34;6&#34;, &#34;9&#34;, &#34;3&#34;, &#34;+&#34;, &#34;-11&#34;, &#34;*&#34;, &#34;/&#34;, &#34;*&#34;, &#34;17&#34;, &#34;+&#34;, &#34;5&#34;, &#34;+&#34;]</span><br/><span class=\"line\">输出: 22</span><br/><span class=\"line\">解释: </span><br/><span class=\"line\">  ((10 * (6 / ((9 + 3) * -11))) + 17) + 5</span><br/><span class=\"line\">= ((10 * (6 / (12 * -11))) + 17) + 5</span><br/><span class=\"line\">= ((10 * (6 / -132)) + 17) + 5</span><br/><span class=\"line\">= ((10 * 0) + 17) + 5</span><br/><span class=\"line\">= (0 + 17) + 5</span><br/><span class=\"line\">= 17 + 5</span><br/><span class=\"line\">= 22</span><br/><span class=\"line\"></span><br/><span class=\"line\">来源：力扣（LeetCode）</span><br/><span class=\"line\">链接：https://leetcode-cn.com/problems/evaluate-reverse-polish-notation</span><br/><span class=\"line\">著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。输入: [&#34;10&#34;, &#34;6&#34;, &#34;9&#34;, &#34;3&#34;, &#34;+&#34;, &#34;-11&#34;, &#34;*&#34;, &#34;/&#34;, &#34;*&#34;, &#34;17&#34;, &#34;+&#34;, &#34;5&#34;, &#34;+&#34;]</span><br/><span class=\"line\">输出: 22</span><br/><span class=\"line\">解释: </span><br/><span class=\"line\">  ((10 * (6 / ((9 + 3) * -11))) + 17) + 5</span><br/><span class=\"line\">= ((10 * (6 / (12 * -11))) + 17) + 5</span><br/><span class=\"line\">= ((10 * (6 / -132)) + 17) + 5</span><br/><span class=\"line\">= ((10 * 0) + 17) + 5</span><br/><span class=\"line\">= (0 + 17) + 5</span><br/><span class=\"line\">= 17 + 5</span><br/><span class=\"line\">= 22</span><br/></pre></td></tr></tbody></table></figure>\n<hr/>\n<h3 id=\"算法1\"><a href=\"#算法1\" class=\"headerlink\" title=\"算法1\"></a>算法1</h3><h5 id=\"栈-O-n\"><a href=\"#栈-O-n\" class=\"headerlink\" title=\"(栈)  O(n)\"></a>(栈)  O(n)</h5><h5 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h5><p>一正一负取整时，先转换成都是正或都是负的情况，再加上符号。</p>\n<h5 id=\"复杂度分析：\"><a href=\"#复杂度分析：\" class=\"headerlink\" title=\"复杂度分析：\"></a>复杂度分析：</h5><h5 id=\"python-代码\"><a href=\"#python-代码\" class=\"headerlink\" title=\"python 代码\"></a>python 代码</h5><figure class=\"highlight python\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/><span class=\"line\">9</span><br/><span class=\"line\">10</span><br/><span class=\"line\">11</span><br/><span class=\"line\">12</span><br/><span class=\"line\">13</span><br/><span class=\"line\">14</span><br/><span class=\"line\">15</span><br/><span class=\"line\">16</span><br/><span class=\"line\">17</span><br/><span class=\"line\">18</span><br/><span class=\"line\">19</span><br/><span class=\"line\">20</span><br/><span class=\"line\">21</span><br/><span class=\"line\">22</span><br/><span class=\"line\">23</span><br/><span class=\"line\">24</span><br/><span class=\"line\">25</span><br/><span class=\"line\">26</span><br/><span class=\"line\">27</span><br/><span class=\"line\">28</span><br/><span class=\"line\">29</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> :</span></span><br/><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">evalRPN</span><span class=\"params\">(self, tokens: List[str])</span> -&gt; int:</span></span><br/><span class=\"line\">        stack = []</span><br/><span class=\"line\">        operations = {<span class=\"string\">&#39;+&#39;</span>, <span class=\"string\">&#39;-&#39;</span>, <span class=\"string\">&#39;*&#39;</span>, <span class=\"string\">&#39;/&#39;</span>}</span><br/><span class=\"line\">        </span><br/><span class=\"line\">        <span class=\"keyword\">for</span> token <span class=\"keyword\">in</span> tokens:</span><br/><span class=\"line\">            </span><br/><span class=\"line\">            <span class=\"keyword\">if</span> token <span class=\"keyword\">in</span> operations:</span><br/><span class=\"line\">                right = stack.pop()</span><br/><span class=\"line\">                left = stack.pop()</span><br/><span class=\"line\">                </span><br/><span class=\"line\">                <span class=\"keyword\">if</span> token == <span class=\"string\">&#39;+&#39;</span>:</span><br/><span class=\"line\">                    temp = left + right</span><br/><span class=\"line\">                <span class=\"keyword\">elif</span> token == <span class=\"string\">&#39;-&#39;</span>:</span><br/><span class=\"line\">                    temp = left - right</span><br/><span class=\"line\">                <span class=\"keyword\">elif</span> token == <span class=\"string\">&#39;*&#39;</span>:</span><br/><span class=\"line\">                    temp = left * right</span><br/><span class=\"line\">                <span class=\"keyword\">else</span>:</span><br/><span class=\"line\">                    <span class=\"keyword\">if</span> left * right &gt;= <span class=\"number\">0</span>:</span><br/><span class=\"line\">                        temp = left // right</span><br/><span class=\"line\">                    <span class=\"keyword\">else</span>:</span><br/><span class=\"line\">                        temp = -(-left // right)</span><br/><span class=\"line\">                    </span><br/><span class=\"line\">                stack.append(temp)</span><br/><span class=\"line\">                </span><br/><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br/><span class=\"line\">                stack.append(int(token))</span><br/><span class=\"line\">        </span><br/><span class=\"line\">        <span class=\"keyword\">return</span> stack[<span class=\"number\">0</span>]</span><br/></pre></td></tr></tbody></table></figure>","text":"题目描述根据逆波兰表示法（后缀表达式），求表达式的值。 有效的运算符包括 +, -, *, / 。每个运算对象可以是整数，也可以是另一个逆波兰表达式。 说明： 整数除法只保留整数部分。给定逆波兰表达式总是有效的。换句话说，表达式总会得出有效数值且不存在除数为 0 的情况。 tag...","link":"","photos":[],"count_time":{"symbolsCount":"2k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%A2%98%E7%9B%AE%E6%8F%8F%E8%BF%B0\"><span class=\"toc-text\">题目描述</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#tag\"><span class=\"toc-text\">tag</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%A0%B7%E4%BE%8B\"><span class=\"toc-text\">样例</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%AE%97%E6%B3%951\"><span class=\"toc-text\">算法1</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E6%A0%88-O-n\"><span class=\"toc-text\">(栈)  O(n)</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E6%80%9D%E8%B7%AF\"><span class=\"toc-text\">思路</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90%EF%BC%9A\"><span class=\"toc-text\">复杂度分析：</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#python-%E4%BB%A3%E7%A0%81\"><span class=\"toc-text\">python 代码</span></a></li></ol></li></ol></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"lua","uid":"df60e476b394b1dd4755ec96c53302ff","slug":"zl/2016-01-01-854_lua","date":"2024-04-03T03:47:36.118Z","updated":"2024-04-03T03:47:36.121Z","comments":true,"path":"api/articles/zl/2016-01-01-854_lua.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":" 之前项目中用到 openresty 作为 Web Api 的开发平台, 用 openresty 很适合开发以 http 接口形式 提供的服务. openresty 可以使用 lua 进行逻辑控制,加上完备的组件driver(redis, mysql, rabbitmq 等), ...","link":"","photos":[],"count_time":{"symbolsCount":"6.7k","symbolsTime":"6 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"lua","uid":"df60e476b394b1dd4755ec96c53302ff","slug":"zl/2016-01-01-852_lua","date":"2024-04-03T03:47:36.114Z","updated":"2024-04-03T03:47:36.117Z","comments":true,"path":"api/articles/zl/2016-01-01-852_lua.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"设计目的其设计目的是为了嵌入应用程序中，从而为应用程序提供灵活的扩展和定制功能。 Lua 特性 轻量级: 它用标准C语言编写并以源代码形式开放，编译后仅仅一百余K，可以很方便的嵌入别的程序里。 可扩展: Lua提供了非常易于使用的扩展接口和机制：由宿主语言(通常是C或C++)提供...","link":"","photos":[],"count_time":{"symbolsCount":"1.1k","symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}