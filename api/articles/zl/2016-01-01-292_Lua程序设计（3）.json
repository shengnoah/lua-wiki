{"title":"Lua程序设计（3）","uid":"7d7dfab24d39d98cb67cd2da899e93f4","slug":"zl/2016-01-01-292_Lua程序设计（3）","date":"2024-04-03T03:47:33.151Z","updated":"2024-04-03T03:47:33.152Z","comments":true,"path":"api/articles/zl/2016-01-01-292_Lua程序设计（3）.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<p>Lua中的函数。</p>\n<h3 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h3><p>在Lua语言中，函数是对语句和表达式进行抽象的主要方式。函数调用时都需要使用一对圆括号把参数列表扩起来，无论函数需不需要参数。<strong>当函数只有一个参数，且该参数是字符串常量或表构造器的时候，括号是可选的。</strong></p>\n<p>一例：</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>  <span class=\"params\">(a)</span></span></span><br/><span class=\"line\">\t<span class=\"keyword\">local</span> sum = <span class=\"number\">0</span></span><br/><span class=\"line\">\t<span class=\"keyword\">for</span> i = <span class=\"number\">1</span>,#a <span class=\"keyword\">do</span></span><br/><span class=\"line\">\t\tsum = sum + a[i]</span><br/><span class=\"line\">\t<span class=\"keyword\">end</span></span><br/><span class=\"line\">\t<span class=\"keyword\">return</span> sum</span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/></pre></td></tr></tbody></table></figure>\n<p>调用函数时使用的参数个数可以与定义函数时使用的参数个数不一致。Lua语言会通过抛弃多余参数和将不足的参数设为nil的方式来调整参数的个数。</p>\n<h3 id=\"多返回值\"><a href=\"#多返回值\" class=\"headerlink\" title=\"多返回值\"></a>多返回值</h3><p>Lua编写的函数可以返回多个结果，只需要在return关键字后列出所有要返回的值即可。</p>\n<ul>\n<li>当函数被作为一条单独语句调用时，其所有返回值都会被丢弃</li>\n<li>当函数被作为表达式调用时，将只保留函数的第一个返回值</li>\n<li>当函数调用是一系列表达式中的最后一个表达式（或者是唯一一个表达式）时，其所有的返回值才能被获取到</li>\n<li>如果一个函数没有返回值或者返回值不够多，那么Lua语言会用nil来补充缺失的值</li>\n</ul>\n<h3 id=\"可变长参数函数\"><a href=\"#可变长参数函数\" class=\"headerlink\" title=\"可变长参数函数\"></a>可变长参数函数</h3><p>Lua语言中的函数可以是可变长参数函数，即可以支持数量可变的参数。</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>  <span class=\"params\">(...)</span></span></span><br/><span class=\"line\">\t<span class=\"keyword\">local</span> s = <span class=\"number\">0</span></span><br/><span class=\"line\">\t<span class=\"keyword\">for</span> _, v <span class=\"keyword\">in</span> <span class=\"built_in\">ipairs</span>{...} <span class=\"keyword\">do</span></span><br/><span class=\"line\">\t\ts = s + v</span><br/><span class=\"line\">\t<span class=\"keyword\">end</span></span><br/><span class=\"line\">\t<span class=\"keyword\">return</span> s</span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/></pre></td></tr></tbody></table></figure>\n<p>参数列表中的三个点(…)表示该函数的参数是可变长的。当这个函数被调用时，Lua内部会把它的所有参数收集起来，我们把这些被收集起来的参数称为函数的额外参数。当函数要访问这些参数时仍需用到三个点，但不同的是此时这三个点时作为一个表达式来使用的。在上例中，表达式<code>&#123;…&#125;</code>的结果是一个由所有可变长参数组成的列表，该函数会遍历该列表来累加其中的元素。</p>\n<p>我们将三个点组成的表达式称为<strong>可变长参数表达式</strong>，其行为类似于一个具有多个返回值的函数，返回的是当前函数的所有可变长参数。</p>\n<h4 id=\"遍历可变长参数\"><a href=\"#遍历可变长参数\" class=\"headerlink\" title=\"遍历可变长参数\"></a>遍历可变长参数</h4><p>要遍历可变长参数，函数可以使用表达式<code>&#123;...&#125;</code>将可变长参数放在一个表中，就像add示例中所做的那样。不过在某些情况下，如果可变长参数重包含无效的nil，那么<code>&#123;...&#125;</code>获得的表可能不再是一个有效的序列，此时可以使用<code>table.pack</code>将表达式中的所有参数放在一个表中返回，这个表还有一个保存了参数个数的额外字段”n”。</p>\n<p>另一种遍历函数的可变长参数的方法是使用函数select，函数select总是具有一个固定的参数selector，以及数量可变的参数，如果selector是数值n，那么函数select返回第n个参数后的所有参数（包括第n个）；否则，selector应该是字符串<code>#</code>，以便函数select返回额外参数的<strong>总数</strong>。</p>\n<h3 id=\"函数table-unpack\"><a href=\"#函数table-unpack\" class=\"headerlink\" title=\"函数table.unpack\"></a>函数table.unpack</h3><p>多重返回值还涉及一个特殊的函数table.unpack，该函数的参数是一个数组，返回值为数组内的所有元素。</p>\n<p>unpack函数的重要用途之一体现在<strong>泛型调用</strong>机制中，泛型调用机制允许我们动态的调用具有任意参数的任意函数。如果我们想通过数组a传入可变的参数来调用函数f：</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">f(<span class=\"built_in\">table</span>.<span class=\"built_in\">unpack</span>(a))</span><br/></pre></td></tr></tbody></table></figure>\n<p>unpack会返回a中所有的元素，而这些元素又被用作f的参数：</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">string</span>.<span class=\"built_in\">find</span>(<span class=\"string\">&#34;hello&#34;</span>,<span class=\"string\">&#34;ll&#34;</span>))</span><br/></pre></td></tr></tbody></table></figure>\n<p>可以使用以下的代码动态地构造一个等价的调用：</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">f = <span class=\"built_in\">string</span>.<span class=\"built_in\">find</span></span><br/><span class=\"line\">a = {<span class=\"string\">&#34;hello&#34;</span>,<span class=\"string\">&#34;ll&#34;</span>}</span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"built_in\">print</span>(f(<span class=\"built_in\">table</span>.<span class=\"built_in\">unpack</span>(a)))</span><br/></pre></td></tr></tbody></table></figure>\n<p>unpack可以显式的限制返回元素的范围：</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">table</span>.<span class=\"built_in\">unpack</span>({<span class=\"string\">&#34;Sun&#34;</span>,<span class=\"string\">&#34;Mon&#34;</span>,<span class=\"string\">&#34;Tue&#34;</span>,<span class=\"string\">&#34;Wed&#34;</span>},<span class=\"number\">2</span>,<span class=\"number\">3</span>))</span><br/><span class=\"line\">&gt; Mon Tue</span><br/></pre></td></tr></tbody></table></figure>\n<h3 id=\"正确的尾调用\"><a href=\"#正确的尾调用\" class=\"headerlink\" title=\"正确的尾调用\"></a>正确的尾调用</h3><p>为调用是被当作函数调用使用的跳转。<strong>当一个函数的最后一个动作是调用另一个函数而没有再进行其他工作时，就形成了尾调用</strong>。</p>\n<p>当被调用的函数执行结束后，程序就不再需要返回最初的调用者，因此，在尾调用之后，程序也就不需要在调用栈中保存有关调用函数的任何信息，当g返回时，程序的执行路径会直接返回到调用f的位置。由于尾调用不会使用栈空间，所以一个程序中能够嵌套的尾调用的数量是无限的。</p>\n<p><strong>在Lua语言中，只有形如return func(args)的调用才是尾调用。</strong></p>","text":"Lua中的函数。 函数在Lua语言中，函数是对语句和表达式进行抽象的主要方式。函数调用时都需要使用一对圆括号把参数列表扩起来，无论函数需不需要参数。当函数只有一个参数，且该参数是字符串常量或表构造器的时候，括号是可选的。 一例： 1234567function (a) local...","link":"","photos":[],"count_time":{"symbolsCount":"1.9k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">函数</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%A4%9A%E8%BF%94%E5%9B%9E%E5%80%BC\"><span class=\"toc-text\">多返回值</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8F%AF%E5%8F%98%E9%95%BF%E5%8F%82%E6%95%B0%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">可变长参数函数</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%81%8D%E5%8E%86%E5%8F%AF%E5%8F%98%E9%95%BF%E5%8F%82%E6%95%B0\"><span class=\"toc-text\">遍历可变长参数</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%87%BD%E6%95%B0table-unpack\"><span class=\"toc-text\">函数table.unpack</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%AD%A3%E7%A1%AE%E7%9A%84%E5%B0%BE%E8%B0%83%E7%94%A8\"><span class=\"toc-text\">正确的尾调用</span></a></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Lua学习笔记","uid":"d112c00bf05f368c0020529ea6c8efaf","slug":"zl/2016-01-01-294_Lua学习笔记","date":"2024-04-03T03:47:33.152Z","updated":"2024-04-03T03:47:33.153Z","comments":true,"path":"api/articles/zl/2016-01-01-294_Lua学习笔记.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"Lua 是一种高性能, 解释型, 面向对象的语句, 广泛用于各种项目的内嵌语言, 如 redis, nginx, scrapy, 愤怒的小鸟, 魔兽世界等等. 本文主要介绍 Lua 的语法. 1. 数据类型lua 是一个动态类型语言,一个变量可以存储类型的值.Lua 常用数据类型...","link":"","photos":[],"count_time":{"symbolsCount":"7.1k","symbolsTime":"6 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"莱迪思产品ICEstick Evaluation Kit 简介","uid":"86e113b74b321367e61547765e3afce3","slug":"zl/2016-01-01-291_莱迪思产品ICEstick Evaluation Kit 简介","date":"2024-04-03T03:47:33.147Z","updated":"2024-04-03T03:47:33.151Z","comments":true,"path":"api/articles/zl/2016-01-01-291_莱迪思产品ICEstick Evaluation Kit 简介.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"本文在CSDN的地址：点这里 USB驱动、拇指大小的评估板 —— iCEstick评估套件是一款易于使用、小体积的评估板，通过使用板上莱迪思半导体公司的iCE40 FPGA系列，您可以以极低的成本快速实现系统功能的开发。 ##摘自官网## IrDA和Digilent PMOD™ ...","link":"","photos":[],"count_time":{"symbolsCount":"1.7k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}