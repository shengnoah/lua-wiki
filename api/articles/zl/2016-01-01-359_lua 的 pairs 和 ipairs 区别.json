{"title":"lua 的 pairs 和 ipairs 区别","uid":"aa119daf9920f5ecd73cc9aafa882ab8","slug":"zl/2016-01-01-359_lua 的 pairs 和 ipairs 区别","date":"2024-04-03T03:47:35.639Z","updated":"2024-04-03T03:47:35.639Z","comments":true,"path":"api/articles/zl/2016-01-01-359_lua 的 pairs 和 ipairs 区别.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<p>看下文档上对 pairs 和 ipairs 的描述：</p>\n<h3 id=\"pairs\"><a href=\"#pairs\" class=\"headerlink\" title=\"pairs\"></a>pairs</h3><blockquote>\n<p>If t has a metamethod __pairs, calls it with t as argument and returns the first three results from the call.</p>\n<p>Otherwise, returns three values: the next function, the table t, and nil, so that the construction</p>\n<pre><code>for k,v in pairs(t) do body end\n</code></pre><p>will iterate over all key–value pairs of table t.</p>\n<p>See function next for the caveats of modifying the table during its traversal.</p>\n</blockquote>\n<h3 id=\"ipairs\"><a href=\"#ipairs\" class=\"headerlink\" title=\"ipairs\"></a>ipairs</h3><blockquote>\n<p>Returns three values (an iterator function, the table t, and 0) so that the construction</p>\n<pre><code>for i,v in ipairs(t) do body end\n</code></pre><p>will iterate over the key–value pairs (1,t[1]), (2,t[2]), …, up to the first nil value.</p>\n</blockquote>\n<h3 id=\"区别\"><a href=\"#区别\" class=\"headerlink\" title=\"区别\"></a>区别</h3><p>主要看这两段描述：</p>\n<p>pairs 是 <code>will iterate over all key–value pairs of table t.</code> 可以遍历所有的 key - value。</p>\n<p>ipairs 是 <code>will iterate over the key–value pairs (1,t[1]), (2,t[2]), …, up to the first nil value.</code> 只会遍历从 1 开始的 key-value。</p>\n<p>所以通过下面几个例子来深入的理解下：</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/><span class=\"line\">9</span><br/><span class=\"line\">10</span><br/><span class=\"line\">11</span><br/><span class=\"line\">12</span><br/><span class=\"line\">13</span><br/><span class=\"line\">14</span><br/><span class=\"line\">15</span><br/><span class=\"line\">16</span><br/><span class=\"line\">17</span><br/><span class=\"line\">18</span><br/><span class=\"line\">19</span><br/><span class=\"line\">20</span><br/><span class=\"line\">21</span><br/><span class=\"line\">22</span><br/><span class=\"line\">23</span><br/><span class=\"line\">24</span><br/><span class=\"line\">25</span><br/><span class=\"line\">26</span><br/><span class=\"line\">27</span><br/><span class=\"line\">28</span><br/><span class=\"line\">29</span><br/><span class=\"line\">30</span><br/><span class=\"line\">31</span><br/><span class=\"line\">32</span><br/><span class=\"line\">33</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">t1 = {</span><br/><span class=\"line\">  name = <span class=\"string\">&#34;rcx&#34;</span>,</span><br/><span class=\"line\">  age = <span class=\"number\">18</span></span><br/><span class=\"line\">}</span><br/><span class=\"line\"></span><br/><span class=\"line\">t2 = {</span><br/><span class=\"line\">  [<span class=\"number\">1</span>] = <span class=\"string\">&#34;a&#34;</span>,</span><br/><span class=\"line\">  [<span class=\"number\">2</span>] = <span class=\"string\">&#34;b&#34;</span>,</span><br/><span class=\"line\">   x = <span class=\"string\">&#34;3&#34;</span></span><br/><span class=\"line\">}</span><br/><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#34;ipairs(t1)  begin&#34;</span>)</span><br/><span class=\"line\"><span class=\"keyword\">for</span> k,v <span class=\"keyword\">in</span> <span class=\"built_in\">ipairs</span>(t1) <span class=\"keyword\">do</span></span><br/><span class=\"line\">  <span class=\"built_in\">print</span>(k,v)</span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#34;ipairs(t1)  end&#34;</span>)</span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#34;ipairs(t2)  begin&#34;</span>)</span><br/><span class=\"line\"><span class=\"keyword\">for</span> k,v <span class=\"keyword\">in</span> <span class=\"built_in\">ipairs</span>(t2) <span class=\"keyword\">do</span></span><br/><span class=\"line\"><span class=\"built_in\">print</span>(k,v)</span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#34;ipairs(t2)  end&#34;</span>)</span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#34;pairs(t1)  begin&#34;</span>)</span><br/><span class=\"line\"><span class=\"keyword\">for</span> k,v <span class=\"keyword\">in</span> <span class=\"built_in\">pairs</span>(t1) <span class=\"keyword\">do</span></span><br/><span class=\"line\">  <span class=\"built_in\">print</span>(k,v)</span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#34;pairs(t1)  end&#34;</span>)</span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#34;pairs(t2)  begin&#34;</span>)</span><br/><span class=\"line\"><span class=\"keyword\">for</span> k,v <span class=\"keyword\">in</span> <span class=\"built_in\">pairs</span>(t2) <span class=\"keyword\">do</span></span><br/><span class=\"line\">  <span class=\"built_in\">print</span>(k,v)</span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#34;pairs(t2)  end&#34;</span>)</span><br/></pre></td></tr></tbody></table></figure>\n<p>输出结果是：</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/><span class=\"line\">9</span><br/><span class=\"line\">10</span><br/><span class=\"line\">11</span><br/><span class=\"line\">12</span><br/><span class=\"line\">13</span><br/><span class=\"line\">14</span><br/><span class=\"line\">15</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">ipairs(t1)  begin</span><br/><span class=\"line\">ipairs(t1)  end</span><br/><span class=\"line\">ipairs(t2)  begin</span><br/><span class=\"line\"><span class=\"number\">1</span>\ta</span><br/><span class=\"line\"><span class=\"number\">2</span>\tb</span><br/><span class=\"line\">ipairs(t2)  end</span><br/><span class=\"line\">pairs(t1)  begin</span><br/><span class=\"line\">name\trcx</span><br/><span class=\"line\">age\t<span class=\"number\">18</span></span><br/><span class=\"line\">pairs(t1)  end</span><br/><span class=\"line\">pairs(t2)  begin</span><br/><span class=\"line\"><span class=\"number\">1</span>\ta</span><br/><span class=\"line\"><span class=\"number\">2</span>\tb</span><br/><span class=\"line\">x\t<span class=\"number\">3</span></span><br/><span class=\"line\">pairs(t2)  end</span><br/></pre></td></tr></tbody></table></figure>\n<p>从结果上可以看出来 ipairs 遍历 t1 的时候没有任何输出，是因为 ipairs 只会遍历下标从 1 开始的。</p>\n<p>第二个 ipairs 遍历 t2 没输出 x 3 ，是因为当根据前一个下标加 1，在 key 中找不到就结束了。</p>\n<p>总结，iparis 适合遍历类似数组的，pairs 适合遍历类似 map 的。</p>\n<p>—EOF—</p>","text":"看下文档上对 pairs 和 ipairs 的描述： pairs If t has a metamethod __pairs, calls it with t as argument and returns the first three results from the cal...","link":"","photos":[],"count_time":{"symbolsCount":"1.8k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#pairs\"><span class=\"toc-text\">pairs</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#ipairs\"><span class=\"toc-text\">ipairs</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">区别</span></a></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"lua表类型","uid":"610817d58d4023959fa5d341799b5d22","slug":"zl/2016-01-01-362_lua表类型","date":"2024-04-03T03:47:35.640Z","updated":"2024-04-03T03:47:35.644Z","comments":true,"path":"api/articles/zl/2016-01-01-362_lua表类型.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"Lua的表的定义:typedef struct Table &#123; CommonHeader; lu_byte flags; lu_byte lsizenode; /* log2 of size of `node&#39; array */ struct Table *me...","link":"","photos":[],"count_time":{"symbolsCount":"3.5k","symbolsTime":"3 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"2.6luabreak与return","uid":"cb415ba273e2ff343737fa238bb01992","slug":"zl/2016-01-01-35_2.6 lua break 与 return","date":"2024-04-03T03:47:35.639Z","updated":"2024-04-03T03:47:35.640Z","comments":true,"path":"api/articles/zl/2016-01-01-35_2.6 lua break 与 return.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"和其他语言一样lua也提供对应的跳出关键字，不过lua不提供continue关键字。 break语句break用于跳出循环，终止for、repeat、while 三种循环的执行，并跳出当前循环体，继续执行当前循环之后的语句,在循环外部不可用。 returnreturn 只能写在语...","link":"","photos":[],"count_time":{"symbolsCount":962,"symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}