{"title":"Lua 学习 chapter8","uid":"b020154404f2b064b17fafcacd3513a2","slug":"zl/2016-01-01-267_Lua 学习 chapter8 ","date":"2024-04-03T03:47:33.129Z","updated":"2024-04-03T03:47:33.129Z","comments":true,"path":"api/articles/zl/2016-01-01-267_Lua 学习 chapter8 .json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<pre><code>\t\t\t&lt;h3 id=&quot;目录&quot;&gt;目录&lt;/h3&gt;\n</code></pre>\n<ol>\n  <li>局部变量和代码块</li>\n  <li>控制结构</li>\n  <li>break,return和goto</li>\n</ol>\n<h2 id=\"局部变量和代码块\">局部变量和代码块</h2>\n<p>Lua语言中的变量默认情况下是全局变量，所有的局部变量在使用前必须声明。一个代码块是一个控制结构的主体，或是函数的主体，或是一个代码段(即变量被声明时所在的文档或字符串）。\n在乱终可以显示的声明代码块，使用do  end</p>\n<div class=\"language-lua highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n</pre></td><td class=\"rouge-code\"><pre><span class=\"k\">do</span>\n\t<span class=\"c1\">--代码块</span>\n<span class=\"k\">end</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n<p>在lua中，尽可能的使用局部变量时是一种良好的变成风格。局部变量便于回收，不会造成命名冲突和混乱。\n在lua中，又一个检查全局变量的模块strict.lua,如果视图在一个函数中对不存在的全局变量赋值或者使用，将会抛出异常。</p>\n<h2 id=\"控制结构\">控制结构</h2>\n<ol>\n  <li>if  end终结</li>\n  <li>while end终结</li>\n  <li>repeat  使用untile终结</li>\n  <li>for end终结</li>\n</ol>\n<h3 id=\"if\">if</h3>\n<div class=\"language-lua highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">local</span> <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"mi\">100</span>\n<span class=\"k\">if</span> <span class=\"n\">a</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span> <span class=\"k\">then</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span>\n<span class=\"k\">elseif</span> <span class=\"n\">a</span> <span class=\"o\">&gt;</span> <span class=\"mi\">5</span> <span class=\"k\">then</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span>\n<span class=\"k\">else</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span>\n<span class=\"k\">end</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n<h3 id=\"while\">while</h3>\n<div class=\"language-lua highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n</pre></td><td class=\"rouge-code\"><pre><span class=\"c1\">--如果不对a进行+1的操作很容易陷入死循环</span>\n<span class=\"k\">while</span> <span class=\"n\">a</span> <span class=\"o\">&gt;</span> <span class=\"mi\">10</span> <span class=\"k\">do</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span>\n    <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"mi\">1</span>\n<span class=\"k\">end</span> \n</pre></td></tr></tbody></table></code></pre></div></div>\n<h3 id=\"repeat\">repeat</h3>\n<p>和其它语言do  while的用法很像</p>\n<div class=\"language-lua highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n</pre></td><td class=\"rouge-code\"><pre><span class=\"k\">repeat</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span>\n    <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">a</span> <span class=\"o\">-</span> <span class=\"mi\">1</span>\n<span class=\"k\">until</span> <span class=\"n\">a</span> <span class=\"o\">&gt;</span> <span class=\"mi\">20</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n<h3 id=\"for\">for</h3>\n<div class=\"language-lua highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n</pre></td><td class=\"rouge-code\"><pre><span class=\"k\">for</span> <span class=\"n\">var</span> <span class=\"o\">=</span> <span class=\"n\">exp1</span><span class=\"p\">,</span><span class=\"n\">exp2</span><span class=\"p\">,</span><span class=\"n\">exp3</span> <span class=\"k\">do</span>\n\t<span class=\"n\">someting</span>\n<span class=\"k\">end</span>\n<span class=\"c1\">--- 从exp1变成exp2 exp3是步长 默认是1，所以这个参数是可选参数</span>\n<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">10</span> <span class=\"k\">do</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span>\n<span class=\"k\">end</span>\n<p><span class=\"k\">for</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">v</span> <span class=\"k\">in</span> <span class=\"nb\">ipairs</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"k\">do</span><br />\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span><br />\n<span class=\"k\">end</span></p>\n<p><span class=\"k\">for</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">v</span> <span class=\"k\">in</span> <span class=\"nb\">pairs</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"k\">do</span><br />\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span><br />\n<span class=\"k\">end</span><br />\n</pre></td></tr></tbody></table></code></pre></div></div></p>\n<h2 id=\"breakreturn和goto\">break,return和goto</h2>\n<p>break和return语句用于从当前的循环结构中跳出，goto语句则能够跳转到函数中的任何位置。\nbreak只能在循环中使用，跳出当前层次的循环。</p>\n<p>return用来返回函数的执行结果或者结束函数的执行，在每个函数的结尾都存在一个隐形的return。</p>\n<p>goto 的使用，跳转到标签的位置。\n标签的定义：</p>\n<div class=\"language-lua highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n</pre></td><td class=\"rouge-code\"><pre><span class=\"n\">goto</span> <span class=\"n\">isMe</span>\n<span class=\"k\">while</span> <span class=\"n\">a</span> <span class=\"o\">&lt;</span> <span class=\"mi\">200</span> <span class=\"k\">do</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span>\n    <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"mi\">1</span>\n<span class=\"k\">end</span>\n<span class=\"p\">::</span><span class=\"n\">isMe</span><span class=\"p\">::</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n<p>goto的使用在lua中存在限制条件，标签遵循可见性原则，因此不能直接跳转到一个代码块中的标签（因为代码快中的标签对外不可见）。\n其次goto不能跳转到函数外，最后goto不能跳转到局部变量的作用域。</p>\n<pre><code>            &lt;hr style=&quot;visibility: hidden;&quot;&gt;\n</code></pre>\n","text":" &lt;h3 id=&quot;目录&quot;&gt;目录&lt;/h3&gt; 局部变量和代码块 控制结构 break,return和goto 局部变量和代码块 Lua语言中的变量默认情况下是全局变量，所有的局部变量在使用前必须声明。一个代码块是一个控制结构的主体，或是函数...","link":"","photos":[],"count_time":{"symbolsCount":"1.4k","symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F%E5%92%8C%E4%BB%A3%E7%A0%81%E5%9D%97\"><span class=\"toc-text\">局部变量和代码块</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%8E%A7%E5%88%B6%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">控制结构</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#if\"><span class=\"toc-text\">if</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#while\"><span class=\"toc-text\">while</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#repeat\"><span class=\"toc-text\">repeat</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#for\"><span class=\"toc-text\">for</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#breakreturn%E5%92%8Cgoto\"><span class=\"toc-text\">break,return和goto</span></a></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Lua进程设计（5）","uid":"d0b187144aba9fb0a587a12b0c875dec","slug":"zl/2016-01-01-266_Lua进程设计（5）","date":"2024-04-03T03:47:33.129Z","updated":"2024-04-03T03:47:33.129Z","comments":true,"path":"api/articles/zl/2016-01-01-266_Lua进程设计（5）.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":" &lt;p&gt;Lua中的闭包。&lt;/p&gt; 闭包在Lua语言中，函数是严格遵循词法定界的第一类值。 “第一类值”意味着Lua语言中的函数与与其他常见类型的值具有同等权限（函数也是值）： 一个进程可以将某个函数保存到变量中或表中 可以将某个函数作为参数传递给其他函数 ...","link":"","photos":[],"count_time":{"symbolsCount":"1.2k","symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"lua学习3","uid":"f6e7f2f9c99790f61ee2eef6de3d10d2","slug":"zl/2016-01-01-268_lua学习3","date":"2024-04-03T03:47:33.129Z","updated":"2024-04-03T03:47:33.130Z","comments":true,"path":"api/articles/zl/2016-01-01-268_lua学习3.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"变长参数Lua中的函数可以接受不同数量的实参。例如： 12345678function (...) local sum = 0 for i,v in ipairs({...}) do sum = sum + v end return sumendprint(add(1,2,3,4...","link":"","photos":[],"count_time":{"symbolsCount":"1.8k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}