{"title":"lua字符串学习","uid":"83451e5211a848f2af1d1a74fb6a5171","slug":"zl/2016-01-01-384_lua字符串学习","date":"2024-04-03T03:47:35.670Z","updated":"2024-04-03T03:47:35.671Z","comments":true,"path":"api/articles/zl/2016-01-01-384_lua字符串学习.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<h3 id=\"基础字符串函数\"><a href=\"#基础字符串函数\" class=\"headerlink\" title=\"基础字符串函数\"></a>基础字符串函数</h3><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">函数</th>\n<th style=\"text-align:left\">含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">string.lower(s)</td>\n<td style=\"text-align:left\">字符串转换成小写</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">string.upper(s)</td>\n<td style=\"text-align:left\">字符串转换成大写</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">string.len(s)</td>\n<td style=\"text-align:left\">字符串长度</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">string.rep(s,2)</td>\n<td style=\"text-align:left\">将字符串 s 重复 2 次</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">string.sub(s, j, j)</td>\n<td style=\"text-align:left\">截取字符串</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"模式匹配\"><a href=\"#模式匹配\" class=\"headerlink\" title=\"模式匹配\"></a>模式匹配</h3><h4 id=\"string-find-函数\"><a href=\"#string-find-函数\" class=\"headerlink\" title=\"string.find 函数\"></a>string.find 函数</h4><p>string.find 函数用于在给定的目标字符串当中搜索一个模式。例如：</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">s = <span class=\"string\">&#34;hello world&#34;</span></span><br/><span class=\"line\">i, j = <span class=\"built_in\">string</span>.<span class=\"built_in\">find</span>(s, <span class=\"string\">&#34;hello&#34;</span>)</span><br/><span class=\"line\"><span class=\"built_in\">print</span>(i, j) </span><br/></pre></td></tr></tbody></table></figure>\n<p>find 函数会返回匹配到的起始所以和结尾索引。如果没匹配到任何就返回 nil。</p>\n<h4 id=\"string-match-函数\"><a href=\"#string-match-函数\" class=\"headerlink\" title=\"string.match 函数\"></a>string.match 函数</h4><p>string.match 返回的是目标字符串中与模式相匹配的那部分子串。</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">string</span>.<span class=\"built_in\">match</span>(<span class=\"string\">&#34;hello world&#34;</span>, <span class=\"string\">&#34;hello&#34;</span>)) <span class=\"comment\">---&gt; hello</span></span><br/></pre></td></tr></tbody></table></figure>\n<h4 id=\"string-gsub-函数\"><a href=\"#string-gsub-函数\" class=\"headerlink\" title=\"string.gsub 函数\"></a>string.gsub 函数</h4><p>string.gsub 函数有三个参数，目标字符串、模式、和替换字符串。它基本的用法是将目标字符串中所有出现模式的地方替换为替换字符串。</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">s = <span class=\"built_in\">string</span>.<span class=\"built_in\">gsub</span>(<span class=\"string\">&#34;lua is good&#34;</span>, <span class=\"string\">&#34;good&#34;</span>, <span class=\"string\">&#34;nice&#34;</span>)</span><br/><span class=\"line\"><span class=\"built_in\">print</span>(s) <span class=\"comment\">---&gt; lua is nice</span></span><br/></pre></td></tr></tbody></table></figure>\n<p>另外还有第四个参数，可以限制替换的次数。</p>\n<h4 id=\"string-gmatch-函数\"><a href=\"#string-gmatch-函数\" class=\"headerlink\" title=\"string.gmatch 函数\"></a>string.gmatch 函数</h4><p>string.gmatch 函数会返回一个函数。通过这个函数可以遍历到一个字符串当中所有出现指定模式的地方。</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">words = {}</span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"keyword\">for</span> w <span class=\"keyword\">in</span> <span class=\"built_in\">string</span>.<span class=\"built_in\">gmatch</span>(s, <span class=\"string\">&#34;%a+&#34;</span>) <span class=\"keyword\">do</span></span><br/><span class=\"line\">\twords[#words + <span class=\"number\">1</span>] = w</span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/></pre></td></tr></tbody></table></figure>\n<h3 id=\"模式\"><a href=\"#模式\" class=\"headerlink\" title=\"模式\"></a>模式</h3><p>具体看下表：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">字符</th>\n<th style=\"text-align:left\">含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">.</td>\n<td style=\"text-align:left\">所有字符</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">%a</td>\n<td style=\"text-align:left\">字母</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">%c</td>\n<td style=\"text-align:left\">控制字符</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">%d</td>\n<td style=\"text-align:left\">数字</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">%l</td>\n<td style=\"text-align:left\">小写字母</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">%p</td>\n<td style=\"text-align:left\">标点符号</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">%s</td>\n<td style=\"text-align:left\">空白字符</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">%u</td>\n<td style=\"text-align:left\">大写字母</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">%w</td>\n<td style=\"text-align:left\">字母和数字</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">%x</td>\n<td style=\"text-align:left\">十六进制数字</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">%z</td>\n<td style=\"text-align:left\">内部表示为0的字符</td>\n</tr>\n</tbody>\n</table>\n<p>这些分类的大写形式表示他们的补集，例如，”%A”表示所有非字母字符。</p>\n<p>在模式当中有如下元字符，需要进行转义。</p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">( ) . % + - * ? [ ] ^ $</span><br/></pre></td></tr></tbody></table></figure>\n<p>Lua 提供的修饰符：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">字符</th>\n<th style=\"text-align:left\">含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">+</td>\n<td style=\"text-align:left\">重复一次或多次</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">*</td>\n<td style=\"text-align:left\">重复零次或多次（尽可能多匹配）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-</td>\n<td style=\"text-align:left\">重复零次或多次（尽可能少匹配)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">?</td>\n<td style=\"text-align:left\">出现零次或一次</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"捕获\"><a href=\"#捕获\" class=\"headerlink\" title=\"捕获\"></a>捕获</h3><p>捕获功能可以根据一个模式从目标字符串中抽取匹配该模式的内容，在指定捕获时，应该将模式中需要捕获的部分写到一对圆括号当中。</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">pair = <span class=\"string\">&#34;name=rcx&#34;</span></span><br/><span class=\"line\">key, value = <span class=\"built_in\">string</span>.<span class=\"built_in\">match</span>(pair, <span class=\"string\">&#34;(%a+)%s*=%s*(%a+)&#34;</span>)</span><br/><span class=\"line\"><span class=\"built_in\">print</span>(key, value) <span class=\"comment\">---&gt; name rcx</span></span><br/></pre></td></tr></tbody></table></figure>\n<p>还可以对模式使用捕获。有一个例子，如果我们想再一个字符串当中找到由单引号或者双引号括起来的字符串。那么我们可以使用如下的模式：</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#34;[&#34;</span><span class=\"string\">&#39;](.-)[&#34;&#39;</span>]<span class=\"string\">&#34;</span></span><br/></pre></td></tr></tbody></table></figure>\n<p>但是当字符串当中是 “it’s all right” 这样的字符串就会出现问题。当然我们可以使用捕获第一个引号，然后用它来指定第二个引号：</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">s = <span class=\"string\">[[then he said: &#34;it&#39;s all right&#34;]]</span></span><br/><span class=\"line\">q, v = <span class=\"built_in\">string</span>.<span class=\"built_in\">match</span>(s, <span class=\"string\">&#34;([&#34;&#39;])(.-)%1&#34;</span>)</span><br/><span class=\"line\"><span class=\"built_in\">print</span>(q)</span><br/><span class=\"line\"><span class=\"built_in\">print</span>(v)</span><br/></pre></td></tr></tbody></table></figure>\n<p>对于捕获到的值，还可以使用 gsub 函数的字符串替换。和模式一样，用于替换的字符串中可以包含 %d 这样的项。当进行替换的时候，这些项就对应于捕获到的内容。%0 表示整个匹配，并且替换字符串中的 % 必须进行转义到 %% 。</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">string</span>.<span class=\"built_in\">gsub</span>(<span class=\"string\">&#34;hello&#34;</span>, <span class=\"string\">&#34;%a&#34;</span>, <span class=\"string\">&#34;%0-%0&#34;</span>))</span><br/><span class=\"line\">=&gt; h-he-el-ll-lo-o\t<span class=\"number\">5</span></span><br/></pre></td></tr></tbody></table></figure>\n<p>string.gsub 会返回两个值，第二个返回值表示被替换的次数</p>\n<h3 id=\"替换\"><a href=\"#替换\" class=\"headerlink\" title=\"替换\"></a>替换</h3><p>string.gsub 函数的第三个参数不仅是一个字符串，也可以是一个函数或者 table。当传入的是函数的时候，string.gsub 会再每次找到匹配时候调用该函数，传入函数的值就是捕获到的内容，返回值作为替换的字符串。当传入的参数是 table 的时候，string.gsub 会每次捕获到内容作为 key 在 table 当中进行查找，并且将 value 作为要替换的字符串，如果 table 当中找不到值则不进行替换。</p>\n<p>【参考资料】</p>\n<ol>\n<li><a href=\"http://book.douban.com/subject/3076942/\" target=\"_blank\" rel=\"noopener noreferrer\">Lua程序设计</a></li>\n</ol>\n<p>—EOF—</p>","text":"基础字符串函数 函数 含义 string.lower(s) 字符串转换成小写 string.upper(s) 字符串转换成大写 string.len(s) 字符串长度 string.rep(s,2) 将字符串 s 重复 2 次 string.sub(s, j, j) 截取字符串 ...","link":"","photos":[],"count_time":{"symbolsCount":"2.1k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E7%A1%80%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">基础字符串函数</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%A8%A1%E5%BC%8F%E5%8C%B9%E9%85%8D\"><span class=\"toc-text\">模式匹配</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#string-find-%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">string.find 函数</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#string-match-%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">string.match 函数</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#string-gsub-%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">string.gsub 函数</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#string-gmatch-%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">string.gmatch 函数</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%A8%A1%E5%BC%8F\"><span class=\"toc-text\">模式</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%8D%95%E8%8E%B7\"><span class=\"toc-text\">捕获</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%9B%BF%E6%8D%A2\"><span class=\"toc-text\">替换</span></a></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"PIL.33Lua的线程和状态机","uid":"dbee1f249827f70178987b233d7a45a0","slug":"zl/2016-01-01-383_PIL.33Lua的线程和状态机","date":"2024-04-03T03:47:35.670Z","updated":"2024-04-03T03:47:35.670Z","comments":true,"path":"api/articles/zl/2016-01-01-383_PIL.33Lua的线程和状态机.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"Lua并不支持真正的多线程，也就是说，抢先的线程间共享内存。缺乏这个支持有两个原因。一是ISO C不提供，所以没有可移植的方式来实现。第二个原因就是我们不认为多线程对Lua是一件好事。 多线程被开发来针对底层的编程。像信号量和监视器这样的同步算法在操作系统的上下文中被提出。找出并...","link":"","photos":[],"count_time":{"symbolsCount":"12k","symbolsTime":"11 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Lua","uid":"15b0cdc6d03f6c3f6bf8d3a7ff197317","slug":"zl/2016-01-01-381_Lua ","date":"2024-04-03T03:47:35.669Z","updated":"2024-04-03T03:47:35.669Z","comments":true,"path":"api/articles/zl/2016-01-01-381_Lua .json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":" 前段时间在腾讯课堂上看到一个视频，是关于一个将C#项目转换成lua项目的一篇介绍。他们描述的方案是反编译C#输出的Dll文件，反编译得出的数据会作C#翻译lua的源数据。一时起了敬畏之心，借助这个机会恰好梳理一下自己的lua知识。 我是在c的基础之上进行lua学习的，期间发现有...","link":"","photos":[],"count_time":{"symbolsCount":"8.5k","symbolsTime":"8 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}