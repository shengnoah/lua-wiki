{"title":"Lua入门","uid":"09cde711228cba9ba4505d40c71d393c","slug":"zl/2016-01-01-323_Lua入门","date":"2024-04-03T03:47:35.605Z","updated":"2024-04-03T03:47:35.605Z","comments":true,"path":"api/articles/zl/2016-01-01-323_Lua入门.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<blockquote>\n<p>遇到个问题，有个亿级别的网站，实现访问黑名单白名单控制，搜了下解决方案，基本都是<code>nginx+lua</code>实现，特此记录！</p>\n</blockquote>\n<ol>\n<li>定义</li>\n</ol>\n<p>        <code>Lua</code>是一种轻量小巧的脚本语言，用标准C语言编写并以源代码形式开放，几乎在所有操作系统和平台上都可以编译运行。其设计目的是为了嵌入应用程序中，从而为应用程序提供灵活的扩展和定制功能。Lua并没有提供强大的库，这是由它的定位决定的，所以Lua不适合作为开发独立应用程序的语言。Lua 有一个同时进行的JIT项目，提供在特定平台上的即时编译功能。</p>\n<ol start=\"2\">\n<li><p>安装(centos7)</p>\n<ul>\n<li>安装依赖 yum install libtermcap-devel ncurses-devel libevent-devel readline-devel</li>\n<li>下载源码 curl -R -O <a href=\"http://www.lua.org/ftp/lua-5.3.5.tar.gz\" target=\"_blank\" rel=\"noopener noreferrer\">http://www.lua.org/ftp/lua-5.3.5.tar.gz</a></li>\n<li>安装</li>\n</ul>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">tar zxf lua-5.3.5.tar.gz</span><br/><span class=\"line\">cd lua-5.3.5</span><br/><span class=\"line\">make linux test</span><br/></pre></td></tr></tbody></table></figure>\n<ul>\n<li>查看安装是否完成 lua -v</li>\n</ul>\n</li>\n<li><p>数据类型</p>\n</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">数据类型</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">nil</td>\n<td style=\"text-align:left\">这个最简单，只有值nil属于该类，表示一个无效值（在条件表达式中相当于false）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">boolean</td>\n<td style=\"text-align:left\">包含两个值：false和true</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">number</td>\n<td style=\"text-align:left\">表示双精度类型的实浮点数</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">string</td>\n<td style=\"text-align:left\">字符串由一对双引号或单引号来表示</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">function</td>\n<td style=\"text-align:left\">由 C 或 Lua 编写的函数</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">userdata</td>\n<td style=\"text-align:left\">表示任意存储在变量中的C数据结构</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">thread</td>\n<td style=\"text-align:left\">表示执行的独立线路，用于执行协同程序</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">table</td>\n<td style=\"text-align:left\">Lua 中的表（table）其实是一个”关联数组”（associative arrays），数组的索引可以是数字、字符串或表类型。在 Lua 里，table 的创建是通过”构造表达式”来完成，最简单构造表达式是{}，用来创建一个空表</td>\n</tr>\n</tbody>\n</table>\n<ol start=\"4\">\n<li>特性<ul>\n<li>i,j = j,i – 交换变量的值 </li>\n<li>table默认初始索引一般以 1 开始</li>\n<li>table 访问时支持<code>table[i]</code>和<code>table.i</code>  </li>\n<li>在Lua中false和nil为假，true和非nil(包括0)为真</li>\n<li>#返回字符串或表的长度，如#”Hello” 返回 5</li>\n<li><code>for var=exp1,exp2,exp3 do  &lt;执行体&gt;  end</code>：var 从exp1变化到exp2，每次变化以exp3(可选，默认为1)为步长递增var，并执行一次”执行体”</li>\n<li>字符串的定义方式</li>\n<li>单引号’string’</li>\n<li>双引号”string”</li>\n<li><code>[[string]]</code></li>\n</ul>\n</li>\n<li><p>协程</p>\n<ul>\n<li>Lua 协同程序(coroutine)与线程比较类似：拥有独立的堆栈，独立的局部变量，独立的指令指针，同时又与其它协同程序共享全局变量和其它大部分东西</li>\n<li>一个具有多个线程的程序可以同时运行几个线程，而协同程序却需要彼此协作的运行</li>\n<li>在任一指定时刻只有一个协同程序在运行，并且这个正在运行的协同程序只有在明确的被要求挂起的时候才会被挂起</li>\n<li>协同程序有点类似同步的多线程，在等待同一个线程锁的几个线程有点类似协同</li>\n</ul>\n</li>\n<li><p>面向对象</p>\n<ul>\n<li>用table来描述对象的属性</li>\n<li>用function 可以用来表示方法</li>\n<li>LUA中的类可以通过 table + function 模拟出来</li>\n</ul>\n</li>\n<li><p>Lua 垃圾回收</p>\n<ul>\n<li>Lua 采用了自动内存管理</li>\n<li>Lua 运行了一个垃圾收集器来收集所有死对象（即在Lua中不可能再访问到的对象）来完成自动内存管理的工作</li>\n<li>Lua 实现了一个增量标记-扫描收集器，它使用这两个数字来控制垃圾收集循环：垃圾收集器间歇率和垃圾收集器步进倍率，这两个数字都使用百分数为单位 （例如：值100在内部表示1）</li>\n<li>垃圾收集器间歇率控制着收集器需要在开启新的循环前要等待多久。增大这个值会减少收集器的积极性。当这个值比 100 小的时候，收集器在开启新的循环前不会有等待。设置这个值为 200 就会让收集器等到总内存使用量达到 之前的两倍时才开始新的循环</li>\n<li>垃圾收集器步进倍率控制着收集器运作速度相对于内存分配速度的倍率。增大这个值不仅会让收集器更加积极，还会增加每个增量步骤的长度。不要把这个值设得小于100，那样的话收集器就工作的太慢了以至于永远都干不完一个循环。默认值是 200，这表示收集器以内存分配的”两倍”速工作</li>\n</ul>\n</li>\n</ol>","text":" 遇到个问题，有个亿级别的网站，实现访问黑名单白名单控制，搜了下解决方案，基本都是nginx+lua实现，特此记录！ 定义 Lua是一种轻量小巧的脚本语言，用标准C语言编写并以源代码形式开放，几乎在所有操作系统和平台上都可以编译运行。其设计目的是为了嵌入应用程序中，从而为应用程序...","link":"","photos":[],"count_time":{"symbolsCount":"1.8k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Modelling and Evaluation of CCN","uid":"d8e7a42229faacbdacc5ea8072c7e0a1","slug":"zl/2016-01-01-325_Modelling and Evaluation of CCN","date":"2024-04-03T03:47:35.606Z","updated":"2024-04-03T03:47:35.606Z","comments":true,"path":"api/articles/zl/2016-01-01-325_Modelling and Evaluation of CCN.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":" &lt;div class=&quot;m-article-content js-article-content&quot; itemprop=&quot;articleBody&quot;&gt;&lt;h2 id=&quot;综述&quot;&gt;综述&lt;/h2&gt...","link":"","photos":[],"count_time":{"symbolsCount":"1.4k","symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Lua迭代器和范型for","uid":"9e5bd7e7e0d0323640ed08b6293beebf","slug":"zl/2016-01-01-322_Lua迭代器和范型for","date":"2024-04-03T03:47:35.605Z","updated":"2024-04-03T03:47:35.605Z","comments":true,"path":"api/articles/zl/2016-01-01-322_Lua迭代器和范型for.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"关于Lua中的迭代器：ipairs与pairs。 迭代器和泛型for：迭代器和闭包：所有的迭代器都需要在连续的调用之间保存一些状态，这样才能知道当前迭代所处的位置及如何从当前位置步进到下一位置。对于我们自己的迭代器而言，闭包为保存状态提供了一种良好的机制。一个闭包就是一个可以访问...","link":"","photos":[],"count_time":{"symbolsCount":"2k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}