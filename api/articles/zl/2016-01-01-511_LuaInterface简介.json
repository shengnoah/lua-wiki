{"title":"LuaInterface简介","uid":"47c2a3b8557d1f5b890b5bb9ea97b552","slug":"zl/2016-01-01-511_LuaInterface简介","date":"2024-04-03T03:47:35.788Z","updated":"2024-04-03T03:47:35.788Z","comments":true,"path":"api/articles/zl/2016-01-01-511_LuaInterface简介.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<p>LuaInterface</p>\n<p><a href=\"https://www.cnblogs.com/sifenkesi/p/3901831.html\" target=\"_blank\" rel=\"noopener noreferrer\">https://www.cnblogs.com/sifenkesi/p/3901831.html</a></p>\n<h1 id=\"二-使用\"><a href=\"#二-使用\" class=\"headerlink\" title=\"二 使用\"></a>二 使用</h1><h2 id=\"1-C-中调用Lua\"><a href=\"#1-C-中调用Lua\" class=\"headerlink\" title=\"1.C#中调用Lua\"></a>1.C#中调用Lua</h2><p>下载LuaInterface。<a href=\"http://luaforge.net/projects/luainterface/\" target=\"_blank\" rel=\"noopener noreferrer\">下载地址</a></p>\n<p>里面有两个文件：<code>lua51.dll</code>，<code>LuaInterface.dll</code></p>\n<p>新建c#控制台，添加引用（引用右键-添加引用）：</p>\n<p><img src=\"https://qihr.github.io//2019/04/23/C和Lua交互/Image 0011557124613.png\" alt=\"Image 0011557124613\"/></p>\n<p>c#：</p>\n<figure class=\"highlight csharp\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/><span class=\"line\">9</span><br/><span class=\"line\">10</span><br/><span class=\"line\">11</span><br/><span class=\"line\">12</span><br/><span class=\"line\">13</span><br/><span class=\"line\">14</span><br/><span class=\"line\">15</span><br/><span class=\"line\">16</span><br/><span class=\"line\">17</span><br/><span class=\"line\">18</span><br/><span class=\"line\">19</span><br/><span class=\"line\">20</span><br/><span class=\"line\">21</span><br/><span class=\"line\">22</span><br/><span class=\"line\">23</span><br/><span class=\"line\">24</span><br/><span class=\"line\">25</span><br/><span class=\"line\">26</span><br/><span class=\"line\">27</span><br/><span class=\"line\">28</span><br/><span class=\"line\">29</span><br/><span class=\"line\">30</span><br/><span class=\"line\">31</span><br/><span class=\"line\">32</span><br/><span class=\"line\">33</span><br/><span class=\"line\">34</span><br/><span class=\"line\">35</span><br/><span class=\"line\">36</span><br/><span class=\"line\">37</span><br/><span class=\"line\">38</span><br/><span class=\"line\">39</span><br/><span class=\"line\">40</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br/><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br/><span class=\"line\"><span class=\"keyword\">using</span> System.Linq;</span><br/><span class=\"line\"><span class=\"keyword\">using</span> System.Text;</span><br/><span class=\"line\"><span class=\"keyword\">using</span> System.Threading.Tasks;</span><br/><span class=\"line\"><span class=\"keyword\">using</span> LuaInterface;</span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"keyword\">namespace</span> </span><br/><span class=\"line\">{</span><br/><span class=\"line\">    <span class=\"keyword\">class</span> <span class=\"title\">Program</span></span><br/><span class=\"line\">    {</span><br/><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args</span>)</span></span><br/><span class=\"line\"><span class=\"function\"></span>        {</span><br/><span class=\"line\">            </span><br/><span class=\"line\">            Lua lua = <span class=\"keyword\">new</span> Lua();</span><br/><span class=\"line\">            </span><br/><span class=\"line\">            <span class=\"comment\">// Lua的索引操作[]可以创建、访问、修改global域，括号里面是变量名</span></span><br/><span class=\"line\">            <span class=\"comment\">// 创建global域num和str</span></span><br/><span class=\"line\">            lua[<span class=\"string\">&#34;num&#34;</span>] = <span class=\"number\">2</span>;</span><br/><span class=\"line\">            lua[<span class=\"string\">&#34;str&#34;</span>] = <span class=\"string\">&#34;a string&#34;</span>;</span><br/><span class=\"line\"></span><br/><span class=\"line\">            <span class=\"comment\">// 创建空table</span></span><br/><span class=\"line\">            lua.NewTable(<span class=\"string\">&#34;tab&#34;</span>);</span><br/><span class=\"line\"></span><br/><span class=\"line\">            <span class=\"comment\">// 执行lua脚本，着两个方法都会返回object[]记录脚本的执行结果</span></span><br/><span class=\"line\">            lua.DoString(<span class=\"string\">&#34;num = 100; print(&#34;i am a lua string&#34;)&#34;</span>);</span><br/><span class=\"line\">            <span class=\"keyword\">object</span>[] retVals = lua.DoString(<span class=\"string\">&#34;return num,str&#34;</span>);</span><br/><span class=\"line\"></span><br/><span class=\"line\">            <span class=\"comment\">// 访问global域num和str</span></span><br/><span class=\"line\">            <span class=\"keyword\">double</span> num = (<span class=\"keyword\">double</span>)lua[<span class=\"string\">&#34;num&#34;</span>];</span><br/><span class=\"line\">            <span class=\"keyword\">string</span> str = (<span class=\"keyword\">string</span>)lua[<span class=\"string\">&#34;str&#34;</span>];</span><br/><span class=\"line\">            lua.DoFile(<span class=\"string\">&#34;E:\\Personal\\Test_Personal\\LuainterfaceTest\\LuajinterfaceTest\\LuajinterfaceTest\\testLuaInterface.lua&#34;</span>);</span><br/><span class=\"line\">            Console.WriteLine(<span class=\"string\">&#34;num = {0}&#34;</span>, num);</span><br/><span class=\"line\">            Console.WriteLine(<span class=\"string\">&#34;str = {0}&#34;</span>, str);</span><br/><span class=\"line\">            Console.WriteLine(<span class=\"string\">&#34;width = {0}&#34;</span>, lua[<span class=\"string\">&#34;width&#34;</span>]);</span><br/><span class=\"line\">            Console.WriteLine(<span class=\"string\">&#34;height = {0}&#34;</span>, lua[<span class=\"string\">&#34;height&#34;</span>]);</span><br/><span class=\"line\">            Console.ReadLine();</span><br/><span class=\"line\">        }</span><br/><span class=\"line\">    }</span><br/><span class=\"line\">}</span><br/></pre></td></tr></tbody></table></figure>\n<p>Lua：</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">local</span> width = <span class=\"number\">99999</span></span><br/><span class=\"line\"><span class=\"keyword\">local</span> height = <span class=\"number\">888888</span></span><br/><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#34;fuck&#34;</span>)</span><br/></pre></td></tr></tbody></table></figure>\n<p>dofile使用相对路径？？</p>\n<h3 id=\"1-1-LuaInterface与CLR类型对应\"><a href=\"#1-1-LuaInterface与CLR类型对应\" class=\"headerlink\" title=\"1.1 LuaInterface与CLR类型对应\"></a>1.1 LuaInterface与CLR类型对应</h3><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">LuaInterface</th>\n<th style=\"text-align:center\">CSharp</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">nil</td>\n<td style=\"text-align:center\">null</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">string</td>\n<td style=\"text-align:center\">System.String</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">number</td>\n<td style=\"text-align:center\">System.Double</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">boolean</td>\n<td style=\"text-align:center\">System.Boolean</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">table</td>\n<td style=\"text-align:center\">LuaInterface.LuaTable</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">function</td>\n<td style=\"text-align:center\">LuaInterface.LuaFunction</td>\n</tr>\n</tbody>\n</table>\n<p>其他类型传给lua会被视为是userdata。lua将userdata传给c#时还会是原来的数据结构。</p>\n<p>　*<em>LuaTable和LuaUserData都有索引操作[]，用来访问或修改域值，索引可以为string或number。</em><br/>　　LuaFunction和LuaUserData都有call方法用来执行函数，可以传入任意多个参数并返回多个值。*</p>\n<h3 id=\"1-2-使用Luainterface的一些问题\"><a href=\"#1-2-使用Luainterface的一些问题\" class=\"headerlink\" title=\"1.2 使用Luainterface的一些问题\"></a>1.2 使用Luainterface的一些问题</h3><p>（1）异常：混合模式程序集是针对“v2.0.50727”版的运行时生成的，在没有配置其他信息的情况下，无法在 4.0 运行时中加载该程序集。</p>\n<p>解决办法：</p>\n<p>在App.config文件中添加如下配置节：</p>\n<figure class=\"highlight xml\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">startup</span> <span class=\"attr\">useLegacyV2RuntimeActivationPolicy</span>=<span class=\"string\">&#34;true&#34;</span>&gt;</span></span><br/><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">supportedRuntime</span> <span class=\"attr\">version</span>=<span class=\"string\">&#34;v4.0&#34;</span>/&gt;</span></span><br/><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">startup</span>&gt;</span></span><br/></pre></td></tr></tbody></table></figure>\n<h2 id=\"2-Lua中调用C\"><a href=\"#2-Lua中调用C\" class=\"headerlink\" title=\"2.Lua中调用C\"></a>2.Lua中调用C</h2><p><em>第一种是纯lua中进行测试：</em></p>\n<h3 id=\"2-1-获取类，访问构造函数\"><a href=\"#2-1-获取类，访问构造函数\" class=\"headerlink\" title=\"2.1 获取类，访问构造函数\"></a>2.1 获取类，访问构造函数</h3><p>在c#工程中测试：</p>\n<p>　    luanet.load_assembly函数：加载CLR程序集（程序集的名字在工程右键属性可以看到）；</p>\n<p>　　luanet.import_type函数：加载程序集中的类；</p>\n<p>　　luanet.get_constructor_bysig函数：手动匹配某个构造函数</p>\n<p>Lua代码：</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/><span class=\"line\">9</span><br/><span class=\"line\">10</span><br/><span class=\"line\">11</span><br/><span class=\"line\">12</span><br/><span class=\"line\">13</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 加载自定义类型，先加载程序集，在加载类型</span></span><br/><span class=\"line\">luanet.load_assembly(<span class=\"string\">&#34;LuajinterfaceTest&#34;</span>)</span><br/><span class=\"line\">TestClass = luanet.import_type(<span class=\"string\">&#34;LuajinterfaceTest.TestClass2&#34;</span>)</span><br/><span class=\"line\"></span><br/><span class=\"line\"></span><br/><span class=\"line\">obj1 = TestClass(<span class=\"number\">2</span>, <span class=\"number\">3</span>)    <span class=\"comment\">-- 匹配public TestClass2(int n1, int n2)</span></span><br/><span class=\"line\">obj1:PrintSomthing()</span><br/><span class=\"line\">obj2 = TestClass(<span class=\"string\">&#34;x&#34;</span>)    <span class=\"comment\">-- 匹配public TestClass2(string str)</span></span><br/><span class=\"line\">obj3 = TestClass(<span class=\"number\">3</span>)        <span class=\"comment\">-- 匹public TestClass2(string str)</span></span><br/><span class=\"line\"></span><br/><span class=\"line\"></span><br/><span class=\"line\">TestClass_cons2 = luanet.get_constructor_bysig(TestClass, <span class=\"string\">&#39;System.Int32&#39;</span>)</span><br/><span class=\"line\">obj3 = TestClass_cons2(<span class=\"number\">3</span>)    <span class=\"comment\">-- 匹配public TestClass2(int n)</span></span><br/></pre></td></tr></tbody></table></figure>\n<p><em>注意先执行构造函数再进行方法调用</em></p>\n<h3 id=\"2-2-访问对象的字段和方法\"><a href=\"#2-2-访问对象的字段和方法\" class=\"headerlink\" title=\"2.2 访问对象的字段和方法\"></a>2.2 访问对象的字段和方法</h3><figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">-- 加载自定义类型，先加载程序集，在加载类型</span><br/><span class=\"line\">luanet.load_assembly(&#34;LuajinterfaceTest&#34;)</span><br/><span class=\"line\">TestClass = luanet.import_type(&#34;LuajinterfaceTest.TestClass2&#34;)</span><br/><span class=\"line\"></span><br/><span class=\"line\">obj1 = TestClass(2, 3)    -- 匹配public TestClass2(int n1, int n2)</span><br/><span class=\"line\">obj1:PrintSomthing()</span><br/></pre></td></tr></tbody></table></figure>\n<p>访问对象的字段和table一样：button.Text… button[“Text”]</p>\n<p>访问对象就是obj1:PrintSomthing()</p>\n<h3 id=\"2-3-重载方法的匹配\"><a href=\"#2-3-重载方法的匹配\" class=\"headerlink\" title=\"2.3 重载方法的匹配\"></a>2.3 重载方法的匹配</h3><p>luanet.get_method_bysig</p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">　　setMethod=luanet.get_method_bysig(obj,&#39;setValue&#39;,&#39;System.String&#39;)&#34;</span><br/><span class=\"line\">　　setMethod(&#39;str&#39;)</span><br/></pre></td></tr></tbody></table></figure>\n<p>Luainterface匹配重载方法（包括构造函数）的规律是自动匹配第一个能够匹配的方法（构造函数）</p>\n<p>LuaInterface匹配第一个能够匹配的构造函数，在这个过程中，numerical string（数字字符串）会自动匹配number，而number可以自动匹配string，所以TestClass(3)匹配到了参数为string的构造函数。</p>\n<p>out和ref参数的方法，参数和方法返回值同时返回。out参数不需要传入。</p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">-- calling int obj::OutMethod1(int,out int,out int)</span><br/><span class=\"line\">  retVal,out1,out2 = obj:OutMethod1(inVal)</span><br/><span class=\"line\">  -- calling void obj::OutMethod2(int,out int)</span><br/><span class=\"line\">  retVal,out1 = obj:OutMethod2(inVal) -- retVal ser´a nil</span><br/><span class=\"line\">  -- calling int obj::RefMethod(int,ref int)</span><br/></pre></td></tr></tbody></table></figure>\n<h3 id=\"2-4-接口\"><a href=\"#2-4-接口\" class=\"headerlink\" title=\"2.4 接口\"></a>2.4 接口</h3><p>两个接口：</p>\n<p>IFoo.method()和IBar.method()，这种情况下obj[“IFoo.method”]</p>\n<h3 id=\"2-7事件，委托\"><a href=\"#2-7事件，委托\" class=\"headerlink\" title=\"2.7事件，委托\"></a>2.7事件，委托</h3><figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">handle_mouseup</span><span class=\"params\">(sender,args)</span></span></span><br/><span class=\"line\">　　<span class=\"built_in\">print</span>(sender:ToString() .. ’ MouseUp!’)</span><br/><span class=\"line\">　　button.MouseUp:Remove(handler)</span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/><span class=\"line\">handler = button.MouseUp:Add(handle_mouseup)</span><br/></pre></td></tr></tbody></table></figure>\n<p>add（）会将lua方法转换为CLR委托，并会返回这个委托。</p>\n<h3 id=\"2-6-扩展interface的方法\"><a href=\"#2-6-扩展interface的方法\" class=\"headerlink\" title=\"2.6 扩展interface的方法\"></a>2.6 扩展interface的方法</h3><p>太难了 等会再看吧</p>\n<p>差一个c#调lua方法</p>\n<p>lua报错输出</p>\n<p><em>Lua中button.Text… button[“Text”]的区别</em></p>\n<p>vscode控制台中文乱码<a href=\"https://blog.csdn.net/xjk2017/article/details/81388493\" target=\"_blank\" rel=\"noopener noreferrer\">https://blog.csdn.net/xjk2017/article/details/81388493</a></p>\n<p>CLR</p>\n<p>构造方法</p>\n<p><img src=\"https://qihr.github.io//2019/04/23/C和Lua交互/Image 0011555992894.png\" alt=\"Image 0011555992894\"/></p>","text":"LuaInterface https://www.cnblogs.com/sifenkesi/p/3901831.html 二 使用1.C#中调用Lua下载LuaInterface。下载地址 里面有两个文件：lua51.dll，LuaInterface.dll 新建c#控制台，添...","link":"","photos":[],"count_time":{"symbolsCount":"4.3k","symbolsTime":"4 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%BA%8C-%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">二 使用</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-C-%E4%B8%AD%E8%B0%83%E7%94%A8Lua\"><span class=\"toc-text\">1.C#中调用Lua</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-1-LuaInterface%E4%B8%8ECLR%E7%B1%BB%E5%9E%8B%E5%AF%B9%E5%BA%94\"><span class=\"toc-text\">1.1 LuaInterface与CLR类型对应</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-2-%E4%BD%BF%E7%94%A8Luainterface%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">1.2 使用Luainterface的一些问题</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-Lua%E4%B8%AD%E8%B0%83%E7%94%A8C\"><span class=\"toc-text\">2.Lua中调用C</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-1-%E8%8E%B7%E5%8F%96%E7%B1%BB%EF%BC%8C%E8%AE%BF%E9%97%AE%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">2.1 获取类，访问构造函数</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-2-%E8%AE%BF%E9%97%AE%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%AD%97%E6%AE%B5%E5%92%8C%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">2.2 访问对象的字段和方法</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-3-%E9%87%8D%E8%BD%BD%E6%96%B9%E6%B3%95%E7%9A%84%E5%8C%B9%E9%85%8D\"><span class=\"toc-text\">2.3 重载方法的匹配</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-4-%E6%8E%A5%E5%8F%A3\"><span class=\"toc-text\">2.4 接口</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-7%E4%BA%8B%E4%BB%B6%EF%BC%8C%E5%A7%94%E6%89%98\"><span class=\"toc-text\">2.7事件，委托</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-6-%E6%89%A9%E5%B1%95interface%E7%9A%84%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">2.6 扩展interface的方法</span></a></li></ol></li></ol></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Kafka cluaster partitions replicas group","uid":"6de49941c0e06cf59df272961068cd7b","slug":"zl/2016-01-01-510_Kafka cluaster partitions replicas group","date":"2024-04-03T03:47:35.788Z","updated":"2024-04-03T03:47:35.788Z","comments":true,"path":"api/articles/zl/2016-01-01-510_Kafka cluaster partitions replicas group.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"Partition &amp; Replicas Kafka 集群默认自动分配解析 下面以一个Kafka集群中4个Broker举例，创建1个topic包含4个Partition，2 Replication；数据Producer流动如图所示： Broker1 Broker2 Bro...","link":"","photos":[],"count_time":{"symbolsCount":"3.2k","symbolsTime":"3 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"tolua++安装","uid":"0f6d71b477132b063b4c2ff5fbac2c35","slug":"zl/2016-01-01-50_tolua++安装","date":"2024-04-03T03:47:35.787Z","updated":"2024-04-03T03:47:35.788Z","comments":true,"path":"api/articles/zl/2016-01-01-50_tolua++安装.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":" &lt;a href=&quot;/2015/11/11/lua_cpp_bind/&quot; rel=&quot;next&quot; title=&quot;C++与Lua本质原始交互API&quot;&gt; &lt;i class=&quot;fa fa-chevro...","link":"","photos":[],"count_time":{"symbolsCount":"3.6k","symbolsTime":"3 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}