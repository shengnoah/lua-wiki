{"title":"手动编译Lua代码","uid":"4e509981ccdc51e8e4dfb1f9bc0c5fcb","slug":"zl/2016-01-01-370_手动编译Lua代码","date":"2024-04-03T03:47:35.653Z","updated":"2024-04-03T03:47:35.654Z","comments":true,"path":"api/articles/zl/2016-01-01-370_手动编译Lua代码.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<p>如果将一段<code class=\"highlighter-rouge\">Lua</code>代码直接翻译成<code class=\"highlighter-rouge\">C++</code>代码，可能会存在一个问题：<code class=\"highlighter-rouge\">Lua</code>有<code class=\"highlighter-rouge\">tail call</code>，<code class=\"highlighter-rouge\">C++</code>没有<code class=\"highlighter-rouge\">tail call</code>。\n例如下面这个函数(求二叉树所有结点的和)，第二次递归调用<code class=\"highlighter-rouge\">Visit</code>是<code class=\"highlighter-rouge\">tail call</code>，如果直接翻译成<code class=\"highlighter-rouge\">C++</code>代码，会失去一部分优化效果。</p>\n<figure class=\"highlight\"><pre><code class=\"language-lua\" data-lang=\"lua\"><span class=\"k\">function</span> <span class=\"nf\">SumTree</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">)</span>\n    <span class=\"kd\">local</span> <span class=\"n\">Sum</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n    <span class=\"kd\">local</span> <span class=\"k\">function</span> <span class=\"nf\">Visit</span><span class=\"p\">(</span><span class=\"n\">CurNode</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">CurNode</span> <span class=\"k\">then</span>\n            <span class=\"k\">return</span>    \n        <span class=\"k\">end</span>\n        <span class=\"n\">Sum</span> <span class=\"o\">=</span> <span class=\"n\">Sum</span> <span class=\"o\">+</span> <span class=\"n\">CurNode</span><span class=\"p\">.</span><span class=\"n\">val</span>\n        <span class=\"n\">Visit</span><span class=\"p\">(</span><span class=\"n\">CurNode</span><span class=\"p\">.</span><span class=\"n\">left</span><span class=\"p\">)</span>\n        <span class=\"n\">Visit</span><span class=\"p\">(</span><span class=\"n\">CurNode</span><span class=\"p\">.</span><span class=\"n\">right</span><span class=\"p\">)</span> <span class=\"c1\">-- tail call</span>\n    <span class=\"k\">end</span>\n    <span class=\"n\">Visit</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">Sum</span>\n<span class=\"k\">end</span></code></pre></figure>\n<p>有一种方法可以将这段代码转化成高效的<code class=\"highlighter-rouge\">C++</code>代码，保留<code class=\"highlighter-rouge\">tail call</code>的效果，同时避免大部分函数调用的开销。 <br/>\n第一步，用 <a href=\"https://en.wikipedia.org/wiki/Continuation-passing_style\">cps变换</a> 将代码转换成下面的样子，每个函数调用都是<code class=\"highlighter-rouge\">tail call</code>，每个函数增加了一个参数<code class=\"highlighter-rouge\">Cont</code>。 <br/>\n代码运行时系统的栈不会增长，访问<code class=\"highlighter-rouge\">left</code>的时候<code class=\"highlighter-rouge\">Cont</code>才会增长。 <br/>\n这个变换的作用是用自定义的<code class=\"highlighter-rouge\">Cont</code>代替系统的栈，同时保留<code class=\"highlighter-rouge\">tail call</code>的效果。</p>\n<figure class=\"highlight\"><pre><code class=\"language-lua\" data-lang=\"lua\"><span class=\"k\">function</span> <span class=\"nf\">SumTree</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">)</span>\n    <span class=\"kd\">local</span> <span class=\"n\">Sum</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n<pre><code>&lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ApplyCont&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Cont&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;\n    &lt;span class=&quot;n&quot;&gt;Cont&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;\n&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;\n\n&lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;\n&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;\n\n&lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Visit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CurNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Cont&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;\n    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CurNode&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;\n        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ApplyCont&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Cont&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;\n    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;\n    &lt;span class=&quot;n&quot;&gt;Sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CurNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;\n    &lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Cont1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;\n        &lt;span class=&quot;n&quot;&gt;Visit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CurNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Cont&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;\n    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;\n    &lt;span class=&quot;n&quot;&gt;Visit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CurNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Cont1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- Cont增长&lt;/span&gt;\n&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;\n&lt;span class=&quot;n&quot;&gt;Visit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;\n\n&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Sum&lt;/span&gt;\n</code></pre>\n<p><span class=\"k\">end</span></code></pre></figure></p>\n<p>第二步，用自定义的数据结构代表<code class=\"highlighter-rouge\">Cont</code>，主要是将<code class=\"highlighter-rouge\">Cont</code>函数捕捉的<code class=\"highlighter-rouge\">free vars</code>与函数的代码分离开。</p>\n<figure class=\"highlight\"><pre><code class=\"language-lua\" data-lang=\"lua\"><span class=\"k\">function</span> <span class=\"nf\">SumTree</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">)</span>\n    <span class=\"kd\">local</span> <span class=\"n\">Sum</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n<pre><code>&lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Visit&lt;/span&gt;\n&lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ActionMap&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&#123;&lt;/span&gt;\n    &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FreeVars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Cont&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;\n        &lt;span class=&quot;n&quot;&gt;Visit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FreeVars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Cont&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;\n    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;\n&lt;span class=&quot;p&quot;&gt;&#125;&lt;/span&gt;\n\n&lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ApplyCont&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Cont&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;\n    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Cont&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;\n        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;\n    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;\n    &lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Action&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ActionMap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Cont&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ActionIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;\n    &lt;span class=&quot;n&quot;&gt;Action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Cont&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FreeVars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Cont&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Cont&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;\n&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;\n\n&lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;\n\n&lt;span class=&quot;n&quot;&gt;Visit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CurNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Cont&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;\n    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CurNode&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;\n        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ApplyCont&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Cont&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;\n    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;\n    &lt;span class=&quot;n&quot;&gt;Sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CurNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;\n    &lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Cont1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&#123;&lt;/span&gt;\n        &lt;span class=&quot;n&quot;&gt;FreeVars&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&#123;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CurNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&#125;,&lt;/span&gt;\n        &lt;span class=&quot;n&quot;&gt;ActionIndex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;\n        &lt;span class=&quot;n&quot;&gt;Cont&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Cont&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;\n    &lt;span class=&quot;p&quot;&gt;&#125;&lt;/span&gt;\n    \n    &lt;span class=&quot;n&quot;&gt;Visit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CurNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Cont1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;\n&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;\n&lt;span class=&quot;n&quot;&gt;Visit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;\n\n&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Sum&lt;/span&gt;\n</code></pre>\n<p><span class=\"k\">end</span></code></pre></figure></p>\n<p>第三步，上面代码中的<code class=\"highlighter-rouge\">Cont</code>是一个简单的链表，而且只在一端操作，所以可以替换成一个外部的<code class=\"highlighter-rouge\">Stack</code>，删掉所有函数的<code class=\"highlighter-rouge\">Cont</code>参数。\n同时将<code class=\"highlighter-rouge\">ActionMap</code>中的代码<code class=\"highlighter-rouge\">inline</code>到 <code class=\"highlighter-rouge\">ApplyCont</code> 中。这段代码中只有一种<code class=\"highlighter-rouge\">Action</code>，所以<code class=\"highlighter-rouge\">ActionIndex</code>不是必须的。</p>\n<figure class=\"highlight\"><pre><code class=\"language-lua\" data-lang=\"lua\"><span class=\"k\">function</span> <span class=\"nf\">SumTree</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">)</span>\n    <span class=\"kd\">local</span> <span class=\"n\">Sum</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n<pre><code>&lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Visit&lt;/span&gt;\n&lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Stack&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&#123;&#125;&lt;/span&gt;\n\n&lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ApplyCont&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;\n    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Stack&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;\n        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;\n    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;\n    &lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Top&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Stack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Stack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;\n    &lt;span class=&quot;n&quot;&gt;Stack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Stack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;\n    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Top&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ActionIndex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;\n        &lt;span class=&quot;n&quot;&gt;Visit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Top&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FreeVars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;\n    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;\n&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;\n\n&lt;span class=&quot;n&quot;&gt;Visit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CurNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;\n    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CurNode&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;\n        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ApplyCont&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;\n    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;\n    &lt;span class=&quot;n&quot;&gt;Sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CurNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;\n    &lt;span class=&quot;nb&quot;&gt;table.insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Stack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&#123;&lt;/span&gt;\n        &lt;span class=&quot;n&quot;&gt;FreeVars&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&#123;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CurNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&#125;,&lt;/span&gt;\n        &lt;span class=&quot;n&quot;&gt;ActionIndex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;\n    &lt;span class=&quot;p&quot;&gt;&#125;)&lt;/span&gt;\n    \n    &lt;span class=&quot;n&quot;&gt;Visit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CurNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;\n&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;\n&lt;span class=&quot;n&quot;&gt;Visit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;\n\n&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Sum&lt;/span&gt;\n</code></pre>\n<p><span class=\"k\">end</span></code></pre></figure></p>\n<p>第四步，用<code class=\"highlighter-rouge\">tail call</code>的方式调用函数时，当前函数中的参数和局部变量的生命周期就结束了，所以可以用一些外部的<code class=\"highlighter-rouge\">register</code>来代替函数的参数和局部变量。同时调整一下<code class=\"highlighter-rouge\">Stack</code>的结构，上面代码中的<code class=\"highlighter-rouge\">FreeVars</code>主要是为了更好地说明问题。</p>\n<figure class=\"highlight\"><pre><code class=\"language-lua\" data-lang=\"lua\"><span class=\"k\">function</span> <span class=\"nf\">SumTree</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">)</span>\n    <span class=\"kd\">local</span> <span class=\"n\">Sum</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n<pre><code>&lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Stack&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&#123;&#125;&lt;/span&gt;\n&lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;R_CurNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;R_Temp&lt;/span&gt;\n\n&lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Visit&lt;/span&gt;\n\n&lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ApplyCont&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;\n    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Stack&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;\n        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;\n    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;\n    &lt;span class=&quot;n&quot;&gt;R_Temp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Stack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Stack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;\n    &lt;span class=&quot;n&quot;&gt;Stack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Stack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;\n    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;R_Temp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ActionIndex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;\n        &lt;span class=&quot;n&quot;&gt;R_CurNode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;R_Temp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Node&lt;/span&gt;\n        &lt;span class=&quot;n&quot;&gt;Visit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;\n    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;\n&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;\n\n&lt;span class=&quot;n&quot;&gt;Visit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;\n    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;R_CurNode&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;\n        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ApplyCont&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;\n    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;\n    &lt;span class=&quot;n&quot;&gt;Sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;R_CurNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;\n    &lt;span class=&quot;nb&quot;&gt;table.insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Stack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&#123;&lt;/span&gt;\n        &lt;span class=&quot;n&quot;&gt;ActionIndex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;\n        &lt;span class=&quot;n&quot;&gt;Node&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;R_CurNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;\n    &lt;span class=&quot;p&quot;&gt;&#125;)&lt;/span&gt;\n    &lt;span class=&quot;n&quot;&gt;R_CurNode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;R_CurNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;\n    &lt;span class=&quot;n&quot;&gt;Visit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;\n&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;\n&lt;span class=&quot;n&quot;&gt;R_CurNode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;\n&lt;span class=&quot;n&quot;&gt;Visit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;\n\n&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Sum&lt;/span&gt;\n</code></pre>\n<p><span class=\"k\">end</span></code></pre></figure></p>\n<p>第五步，将上面代码翻译成<code class=\"highlighter-rouge\">C++</code>代码，其中，每个函数都没有参数、没有返回值、没有局部变量，每个函数调用都是<code class=\"highlighter-rouge\">tail call</code>，所以可以直接用<code class=\"highlighter-rouge\">goto</code>语句代替函数调用。有多种<code class=\"highlighter-rouge\">Action</code>的时候，<code class=\"highlighter-rouge\">ActionIndex</code>就有存在的必要了。</p>\n<figure class=\"highlight\"><pre><code class=\"language-c--\" data-lang=\"c++\"><span class=\"kt\">int</span> <span class=\"nf\">SumTree</span><span class=\"p\">(</span><span class=\"n\">TreeNode</span><span class=\"o\">*</span> <span class=\"n\">root</span><span class=\"p\">)</span> \n<span class=\"p\">&#123;</span>\n    <span class=\"kt\">int</span> <span class=\"n\">Sum</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<pre><code>&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StackNode&lt;/span&gt; \n&lt;span class=&quot;p&quot;&gt;&#123;&lt;/span&gt;\n    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ActionIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;\n    &lt;span class=&quot;n&quot;&gt;TreeNode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;\n&lt;span class=&quot;p&quot;&gt;&#125;;&lt;/span&gt;\n&lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StackNode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Stack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;\n\n&lt;span class=&quot;n&quot;&gt;TreeNode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;R_CurNode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;//对应上面代码中的第一次调用Visit\n</code></pre>\n<p></span>    <span class=\"k\">goto</span> <span class=\"n\">L_Visit</span><span class=\"p\">;</span></p>\n<p><span class=\"nl\">L_ApplyCont:</span><br />\n<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">Stack</span><span class=\"p\">.</span><span class=\"n\">empty</span><span class=\"p\">())</span><br />\n<span class=\"p\">{</span><br />\n<span class=\"k\">return</span> <span class=\"n\">Sum</span><span class=\"p\">;</span> <span class=\"c1\">// 将最后的return移到此处<br />\n</span>    <span class=\"p\">}</span><br />\n<span class=\"c1\">// 此处微调一下，不再需要R_Temp<br />\n</span>    <span class=\"k\">switch</span> <span class=\"p\">(</span><span class=\"n\">Stack</span><span class=\"p\">.</span><span class=\"n\">back</span><span class=\"p\">().</span><span class=\"n\">ActionIndex</span><span class=\"p\">)</span><br />\n<span class=\"p\">{</span><br />\n<span class=\"k\">case</span> <span class=\"mi\">1</span><span class=\"p\">:</span><br />\n<span class=\"n\">R_CurNode</span> <span class=\"o\">=</span> <span class=\"n\">Stack</span><span class=\"p\">.</span><span class=\"n\">back</span><span class=\"p\">().</span><span class=\"n\">Node</span><span class=\"p\">;</span><br />\n<span class=\"n\">Stack</span><span class=\"p\">.</span><span class=\"n\">pop_back</span><span class=\"p\">();</span><br />\n<span class=\"k\">goto</span> <span class=\"n\">L_Visit</span><span class=\"p\">;</span><br />\n<span class=\"c1\">//break; 不需要<br />\n</span>    <span class=\"p\">}</span></p>\n<p><span class=\"nl\">L_Visit:</span><br />\n<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">R_CurNode</span><span class=\"p\">)</span><br />\n<span class=\"p\">{</span><br />\n<span class=\"k\">goto</span> <span class=\"n\">L_ApplyCont</span><span class=\"p\">;</span><br />\n<span class=\"p\">}</span><br />\n<span class=\"n\">Sum</span> <span class=\"o\">+=</span> <span class=\"n\">R_CurNode</span><span class=\"o\">-&gt;</span><span class=\"n\">val</span><span class=\"p\">;</span><br />\n<span class=\"n\">Stack</span><span class=\"p\">.</span><span class=\"n\">push_back</span><span class=\"p\">({</span><br />\n<span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">R_CurNode</span><span class=\"o\">-&gt;</span><span class=\"n\">right</span><br />\n<span class=\"p\">});</span><br />\n<span class=\"n\">R_CurNode</span> <span class=\"o\">=</span> <span class=\"n\">R_CurNode</span><span class=\"o\">-&gt;</span><span class=\"n\">left</span><span class=\"p\">;</span><br />\n<span class=\"k\">goto</span> <span class=\"n\">L_Visit</span><span class=\"p\">;</span><br />\n<span class=\"p\">}</span></code></pre></figure></p>\n<p>最后，用<code class=\"highlighter-rouge\">Leetcode</code>上的<a href=\"https://leetcode.com/problems/n-ary-tree-level-order-traversal/\">N-ary Tree Level Order Traversal</a> 验证一下这种方法的正确性和优化效果。 <br/>\n这个问题比较聪明的答案是利用<code class=\"highlighter-rouge\">queue</code>实现一个迭代算法，<code class=\"highlighter-rouge\">Leetcode</code>官方版本的迭代代码最短执行时间是40ms，但是我用同样的代码提交，执行时间大约在45~70ms之间。 <br/>\n先实现一个无脑的递归算法，下面这段代码的执行时间大概在60~100ms之间，最短时间58秒。</p>\n<figure class=\"highlight\"><pre><code class=\"language-c--\" data-lang=\"c++\"><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;&gt;</span> <span class=\"n\">levelOrder</span><span class=\"p\">(</span><span class=\"n\">Node</span><span class=\"o\">*</span> <span class=\"n\">root</span><span class=\"p\">)</span> <span class=\"p\">&#123;</span>\n    <span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;&gt;</span> <span class=\"n\">Results</span><span class=\"p\">;</span>\n    <span class=\"n\">function</span><span class=\"o\">&lt;</span><span class=\"kt\">void</span><span class=\"p\">(</span><span class=\"n\">Node</span><span class=\"o\">*</span><span class=\"p\">,</span> <span class=\"kt\">int</span><span class=\"p\">)</span><span class=\"o\">&gt;</span> <span class=\"n\">Visit</span><span class=\"p\">;</span>\n    <span class=\"n\">Visit</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"o\">&amp;</span><span class=\"p\">](</span><span class=\"n\">Node</span><span class=\"o\">*</span> <span class=\"n\">CurNode</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">Depth</span><span class=\"p\">)</span>\n    <span class=\"p\">&#123;</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">CurNode</span><span class=\"p\">)</span>\n        <span class=\"p\">&#123;</span>\n            <span class=\"k\">return</span><span class=\"p\">;</span>\n        <span class=\"p\">&#125;</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">Results</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">()</span> <span class=\"o\">&lt;</span> <span class=\"n\">Depth</span><span class=\"p\">)</span>\n        <span class=\"p\">&#123;</span>\n            <span class=\"n\">Results</span><span class=\"p\">.</span><span class=\"n\">resize</span><span class=\"p\">(</span><span class=\"n\">Depth</span><span class=\"p\">);</span>\n        <span class=\"p\">&#125;</span>\n        <span class=\"n\">Results</span><span class=\"p\">[</span><span class=\"n\">Depth</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">].</span><span class=\"n\">push_back</span><span class=\"p\">(</span><span class=\"n\">CurNode</span><span class=\"o\">-&gt;</span><span class=\"n\">val</span><span class=\"p\">);</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">auto</span> <span class=\"n\">Child</span> <span class=\"o\">:</span> <span class=\"n\">CurNode</span><span class=\"o\">-&gt;</span><span class=\"n\">children</span><span class=\"p\">)</span>\n        <span class=\"p\">&#123;</span>\n            <span class=\"n\">Visit</span><span class=\"p\">(</span><span class=\"n\">Child</span><span class=\"p\">,</span> <span class=\"n\">Depth</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n        <span class=\"p\">&#125;</span>\n    <span class=\"p\">&#125;;</span>\n    <span class=\"n\">Visit</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n    <span class=\"k\">return</span> <span class=\"n\">Results</span><span class=\"p\">;</span>\n<span class=\"p\">&#125;</span></code></pre></figure>\n<p>然后利用上面的方法转化成下面的代码，能通过所有testcase，执行时间大概在45~85ms之间，最短时间44ms。这个递归算法的实现中没有<code class=\"highlighter-rouge\">tail call</code>，所以主要的优化效果来源于<code class=\"highlighter-rouge\">goto</code>语句。</p>\n<figure class=\"highlight\"><pre><code class=\"language-c--\" data-lang=\"c++\"><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;&gt;</span> <span class=\"n\">levelOrder</span><span class=\"p\">(</span><span class=\"n\">Node</span><span class=\"o\">*</span> <span class=\"n\">root</span><span class=\"p\">)</span> <span class=\"p\">&#123;</span>\n    <span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;&gt;</span> <span class=\"n\">Results</span><span class=\"p\">;</span>\n    <span class=\"k\">struct</span> <span class=\"n\">StackNode</span> <span class=\"p\">&#123;</span>\n        <span class=\"kt\">int</span> <span class=\"n\">ChildIndex</span><span class=\"p\">;</span>\n        <span class=\"n\">Node</span><span class=\"o\">*</span> <span class=\"n\">CurNode</span><span class=\"p\">;</span>\n        <span class=\"kt\">int</span> <span class=\"n\">CurDepth</span><span class=\"p\">;</span>\n    <span class=\"p\">&#125;;</span>\n    <span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"n\">StackNode</span><span class=\"o\">&gt;</span> <span class=\"n\">Stack</span><span class=\"p\">;</span>\n    <span class=\"kt\">int</span> <span class=\"n\">R_ChildIndex</span><span class=\"p\">;</span>\n    <span class=\"n\">Node</span><span class=\"o\">*</span> <span class=\"n\">R_CurNode</span> <span class=\"o\">=</span> <span class=\"n\">root</span><span class=\"p\">;</span>\n    <span class=\"kt\">int</span> <span class=\"n\">R_CurDepth</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n    <span class=\"k\">goto</span> <span class=\"n\">L_Recursive</span><span class=\"p\">;</span>\n<p><span class=\"n\">L_ApplyCont</span><span class=\"o\">:</span><br />\n<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">Stack</span><span class=\"p\">.</span><span class=\"n\">empty</span><span class=\"p\">())</span><br />\n<span class=\"p\">&#123;</span><br />\n<span class=\"k\">return</span> <span class=\"n\">Results</span><span class=\"p\">;</span><br />\n<span class=\"p\">&#125;</span><br />\n<span class=\"n\">R_ChildIndex</span> <span class=\"o\">=</span> <span class=\"n\">Stack</span><span class=\"p\">.</span><span class=\"n\">back</span><span class=\"p\">().</span><span class=\"n\">ChildIndex</span><span class=\"p\">;</span><br />\n<span class=\"n\">R_CurNode</span> <span class=\"o\">=</span> <span class=\"n\">Stack</span><span class=\"p\">.</span><span class=\"n\">back</span><span class=\"p\">().</span><span class=\"n\">CurNode</span><span class=\"p\">;</span><br />\n<span class=\"n\">R_CurDepth</span> <span class=\"o\">=</span> <span class=\"n\">Stack</span><span class=\"p\">.</span><span class=\"n\">back</span><span class=\"p\">().</span><span class=\"n\">CurDepth</span><span class=\"p\">;</span><br />\n<span class=\"n\">Stack</span><span class=\"p\">.</span><span class=\"n\">pop_back</span><span class=\"p\">();</span><br />\n<span class=\"k\">goto</span> <span class=\"n\">L_LoopChild</span><span class=\"p\">;</span></p>\n<p><span class=\"n\">L_LoopChild</span><span class=\"o\">:</span><br />\n<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">R_ChildIndex</span> <span class=\"o\">&lt;</span> <span class=\"n\">R_CurNode</span><span class=\"o\">-&gt;</span><span class=\"n\">children</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">())</span><br />\n<span class=\"p\">&#123;</span><br />\n<span class=\"n\">Stack</span><span class=\"p\">.</span><span class=\"n\">push_back</span><span class=\"p\">(&#123;</span><br />\n<span class=\"n\">R_ChildIndex</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">R_CurNode</span><span class=\"p\">,</span> <span class=\"n\">R_CurDepth</span><br />\n<span class=\"p\">&#125;);</span><br />\n<span class=\"n\">R_CurNode</span> <span class=\"o\">=</span> <span class=\"n\">R_CurNode</span><span class=\"o\">-&gt;</span><span class=\"n\">children</span><span class=\"p\">[</span><span class=\"n\">R_ChildIndex</span><span class=\"p\">];</span><br />\n<span class=\"n\">R_CurDepth</span><span class=\"o\">++</span><span class=\"p\">;</span><br />\n<span class=\"k\">goto</span> <span class=\"n\">L_Recursive</span><span class=\"p\">;</span><br />\n<span class=\"p\">&#125;</span><br />\n<span class=\"k\">else</span><br />\n<span class=\"p\">&#123;</span><br />\n<span class=\"k\">goto</span> <span class=\"n\">L_ApplyCont</span><span class=\"p\">;</span><br />\n<span class=\"p\">&#125;</span></p>\n<p><span class=\"n\">L_Recursive</span><span class=\"o\">:</span><br />\n<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">R_CurNode</span><span class=\"p\">)</span><br />\n<span class=\"p\">&#123;</span><br />\n<span class=\"k\">goto</span> <span class=\"n\">L_ApplyCont</span><span class=\"p\">;</span><br />\n<span class=\"p\">&#125;</span><br />\n<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">Results</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">()</span> <span class=\"o\">&lt;</span> <span class=\"n\">R_CurDepth</span><span class=\"p\">)</span><br />\n<span class=\"p\">&#123;</span><br />\n<span class=\"n\">Results</span><span class=\"p\">.</span><span class=\"n\">resize</span><span class=\"p\">(</span><span class=\"n\">R_CurDepth</span><span class=\"p\">);</span><br />\n<span class=\"p\">&#125;</span><br />\n<span class=\"n\">Results</span><span class=\"p\">[</span><span class=\"n\">R_CurDepth</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">].</span><span class=\"n\">push_back</span><span class=\"p\">(</span><span class=\"n\">R_CurNode</span><span class=\"o\">-&gt;</span><span class=\"n\">val</span><span class=\"p\">);</span><br />\n<span class=\"n\">R_ChildIndex</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span><br />\n<span class=\"k\">goto</span> <span class=\"n\">L_LoopChild</span><span class=\"p\">;</span><br />\n<span class=\"p\">&#125;</span></code></pre></figure></p>\n<p>这个转换代码的方法有一个灵活之处，我们可以将那些不需要优化的函数调用视为基本操作(类似<code class=\"highlighter-rouge\">+ - * /</code>)，最后生成的<code class=\"highlighter-rouge\">C++</code>代码中添加上对这些<code class=\"highlighter-rouge\">Lua</code>函数的调用。</p>\n<ul>\n  <li><a href=\"https://en.wikipedia.org/wiki/Continuation-passing_style\">Continuation-passing style</a></li>\n  <li><a href=\"https://www.cs.indiana.edu/~dfried/mex.pdf\">The Role of the Study of Programming Languages in the Education of a Programmer</a></li>\n</ul>","text":"如果将一段Lua代码直接翻译成C++代码，可能会存在一个问题：Lua有tail call，C++没有tail call。 例如下面这个函数(求二叉树所有结点的和)，第二次递归调用Visit是tail call，如果直接翻译成C++代码，会失去一部分优化效果。 function S...","link":"","photos":[],"count_time":{"symbolsCount":"25k","symbolsTime":"23 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Sol2实现Cpp和Lua绑定","uid":"a0aa244da9b5db84b7a7c09b4e0b028c","slug":"zl/2016-01-01-371_Sol2实现Cpp和Lua绑定","date":"2024-04-03T03:47:35.654Z","updated":"2024-04-03T03:47:35.654Z","comments":true,"path":"api/articles/zl/2016-01-01-371_Sol2实现Cpp和Lua绑定.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":" &lt;a href=&quot;/2018/06/17/cpp11_raw_string/&quot; rel=&quot;next&quot; title=&quot;C++11的Raw String Literals&quot;&gt; &lt;i class=&quot...","link":"","photos":[],"count_time":{"symbolsCount":"4.8k","symbolsTime":"4 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Lua值与类型 · 花生肉泥","uid":"ddc28b77a20693c53b25d2400833ae25","slug":"zl/2016-01-01-36_Lua值与类型 · 花生肉泥","date":"2024-04-03T03:47:35.653Z","updated":"2024-04-03T03:47:35.653Z","comments":true,"path":"api/articles/zl/2016-01-01-36_Lua值与类型 · 花生肉泥.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"Lua基础语法之值与类型Lua是一种动态类型语言。这意味着变量没有类型，只有值才有类型，所有的值都可以被放在变量里，当做参数传递到另一个函数中，并被函数作为结果返回。1234567print(type(&#34;hello world&#34;)) print(type(10.4...","link":"","photos":[],"count_time":{"symbolsCount":"3.1k","symbolsTime":"3 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}