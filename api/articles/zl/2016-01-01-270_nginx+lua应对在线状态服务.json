{"title":"nginx+lua应对在线状态服务","uid":"435845a09ea1fa9e5995c6990db247aa","slug":"zl/2016-01-01-270_nginx+lua应对在线状态服务","date":"2024-04-03T03:47:33.130Z","updated":"2024-04-03T03:47:33.131Z","comments":true,"path":"api/articles/zl/2016-01-01-270_nginx+lua应对在线状态服务.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<pre><code>    &lt;p&gt;几天前在@ideawu的博客上看到了其一篇文章中讲到的技术题.&lt;br&gt;&lt;a href=&quot;http://www.ideawu.net/blog/archives/732.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;《在线状态服务在网站系统中的应用》&lt;/a&gt; 。于是内心折腾的火焰便熊熊燃烧起来，连续几天晚上折腾到凌晨1点。感谢@agentzh 春哥与阿里巴巴的技术贡献,让我可以安心睡觉 :) &lt;/p&gt;\n</code></pre>\n<p>在线状态服务这样的场景在互联网应用上比比皆是</p>\n<ul>\n<li>聊天系统中同时在线的人数</li>\n<li>游戏中同时在线玩家等</li>\n</ul>\n<p>文中所言,现实的在线状态应用场景是:<br>网页中用JavaScript启动一个定时器, 定期报告在线状态, 也就是向在线状态服务器发送心跳包.对某个同时在线100万人, 每天1亿PV的网站来说, 在线状态服务器一天接收到的心跳包大概是10亿个, 也即每秒10000个请求(10000qps).要实现这样的在线状态服务器, 也是一个挑战.</p>\n<p>好了，我当时真的很兴奋，感觉自己像接到了任务，立马打起了鸡血研究. 脑海中涌现出来的直觉是，使用tornado + Redis，这样的高并发组合应对这样的场景应该是无压力的，但是因为这样的事情我做过，想挑战自己非舒适的区域，挖掘新的知识大陆。<br>我们一直都说，没有经过打磨的想法一般都是廉价的。后来我想到的是Ngnix这样的服务器来抗如此高的请求，那么我们就自己写个拓展，查询内存数据库，这里我选择用redis来做kv内存数据库，</p>\n<p>文中谈到的自己设计精巧的kv数据库，甚至用C++写针对性的http服务，来提升通用服务器的性能。曾经写过一个KV数据库，其性能真的是渣渣。<a href=\"https://github.com/zheng-ji/KvDb\" target=\"_blank\" rel=\"noopener noreferrer\">源码链接</a>。欢迎吐槽.<br>一直以来听闻春哥的nginx lua模块拓展，可以为nginx定制业务。想想以前用c语言实现，简直就是痛苦,这一次可以使用lua，甚为欢悦，没有什么比探索新东西带来的乐趣更令人振奋了</p>\n<p>首先要有lua的运行环境。他是一种胶水粘合剂 ：） 还必须安装<strong>luajit</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#设置环境变量，后续安装需要</span><br><span class=\"line\">shell&gt; export LUAJIT_LIB=/usr/local/lib</span><br><span class=\"line\">shell&gt; export LUAJIT_INC=/usr/local/include/luajit-&lt;VERSION&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"需要安装的nginx-插件\"><a href=\"https://zheng-ji.github.io/#%E9%9C%80%E8%A6%81%E5%AE%89%E8%A3%85%E7%9A%84nginx-%E6%8F%92%E4%BB%B6\" class=\"headerlink\" title=\"需要安装的nginx 插件\"></a>需要安装的nginx 插件</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ngx_devel_kit https://github.com/simpl/ngx_devel_kit</span><br><span class=\"line\">set-misc-nginx-module https://github.com/agentzh/set-misc-nginx-module</span><br><span class=\"line\">memc-nginx-module https://github.com/agentzh/memc-nginx-module </span><br><span class=\"line\">lua-nginx-module https://github.com/chaoslawful/lua-nginx-module</span><br></pre></td></tr></table></figure>\n<h4 id=\"下载之后，安装nginx插件\"><a href=\"https://zheng-ji.github.io/#%E4%B8%8B%E8%BD%BD%E4%B9%8B%E5%90%8E%EF%BC%8C%E5%AE%89%E8%A3%85nginx%E6%8F%92%E4%BB%B6\" class=\"headerlink\" title=\"下载之后，安装nginx插件\"></a>下载之后，安装nginx插件</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./configure --prefix=/path/to/nginx_src --add-module=/path/to/ngx_devel_kit --add-module=set-misc-nginx-module </span><br><span class=\"line\">--add-module=/path/to/lua-nginx-module -add-module=ngx_devel_kit </span><br><span class=\"line\">make </span><br><span class=\"line\">make install</span><br></pre></td></tr></table></figure>\n<p>nginx.conf 文档                 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location /echo {  </span><br><span class=\"line\">    default_type 'text/plain';  </span><br><span class=\"line\">    echo 'hello echo';  </span><br><span class=\"line\">}  </span><br><span class=\"line\"></span><br><span class=\"line\">location /lua {  </span><br><span class=\"line\">    default_type 'text/plain';  </span><br><span class=\"line\">    content_by_lua 'ngx.say(\"hello, lua\")';  </span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<p>也许你会遇到一些麻烦,执行如下命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell&gt; echo \"/usr/local/lib\" &gt; /etc/ld.so.conf.d/usr_local_lib.conf</span><br><span class=\"line\">shell&gt; ldconfig</span><br></pre></td></tr></table></figure>\n<p>重启服务器之后，应该就可以看到hello,lua :) (到这里仅仅是开始，折腾了有点久)</p>\n<h3 id=\"好了，来完成ideawu的作业-：）\"><a href=\"https://zheng-ji.github.io/#%E5%A5%BD%E4%BA%86%EF%BC%8C%E6%9D%A5%E5%AE%8C%E6%88%90ideawu%E7%9A%84%E4%BD%9C%E4%B8%9A-%EF%BC%9A%EF%BC%89\" class=\"headerlink\" title=\"好了，来完成ideawu的作业 ：）\"></a>好了，来完成ideawu的作业 ：）</h3>\n<p>使用 Lua 脚本语言操作 Redis。这里使用 content_by_lua_file （nginx_lua_module 模块具有）来引入 Lua 脚本文档。<br>agentzh 提供了一个很方便的开发包，如下：<a href=\"https://github.com/agentzh/lua-resty-redis.git\" target=\"_blank\" rel=\"noopener noreferrer\">lua-resty-redis</a></p>\n<p>该包中，有一个 lib 目录，将 lib 目录下的文档和子目录拷贝至目录 /home/zj/soft/data/www/lua/<br>在 Nginx 配置文档中，需要加一行代码，以便引入 redis.lua。<br>注：加在 http 段里。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lua_package_path \"/home/zj/soft/data/www/lua//?.lua;;\";</span><br></pre></td></tr></table></figure>\n<p>为了使得 lua 脚本的修改能及时生效，需要加入一行代码，如下：注：在 server 段里，加入代码，如果不加此代码或者设置为 on 时，则需要重启 Nginx。 不过nginx 会报警</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lua_code_cache off;</span><br></pre></td></tr></table></figure>\n<p>nginx.conf 里</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location /getolNum {</span><br><span class=\"line\">    content_by_lua_file /conf/online.lua;  </span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<h5 id=\"online-lua-源码\"><a href=\"https://zheng-ji.github.io/#online-lua-%E6%BA%90%E7%A0%81\" class=\"headerlink\" title=\"online.lua 源码\"></a>online.lua 源码</h5><figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">local</span> redis = <span class=\"built_in\">require</span> <span class=\"string\">\"redis\"</span></span><br><span class=\"line\"><span class=\"keyword\">local</span> cache = redis.new()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">local</span> ok, err = cache.connect(cache, <span class=\"string\">'127.0.0.1'</span>, <span class=\"string\">'6379'</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">not</span> ok <span class=\"keyword\">then</span></span><br><span class=\"line\">    ngx.say(<span class=\"string\">\"failed to connect:\"</span>, err)</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">cache:set_timeout(<span class=\"number\">30000</span>)</span><br><span class=\"line\">args = ngx.req.get_uri_args()</span><br><span class=\"line\">user = args[<span class=\"string\">\"user\"</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">cache:setex(user,<span class=\"number\">180</span>,<span class=\"number\">23</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">local</span> res,err = cache:keys(<span class=\"string\">'*'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">count = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">pairs</span>(res) <span class=\"keyword\">do</span></span><br><span class=\"line\">    count = count + <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\">ngx.say(count)</span><br><span class=\"line\"><span class=\"keyword\">local</span> ok, err = cache:<span class=\"built_in\">close</span>()</span><br></pre></td></tr></table></figure>\n<p>结果</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl localhost/getOlnum?user=zj</span><br><span class=\"line\">返回：1</span><br><span class=\"line\">curl localhost/getOlnum?user=zhengji</span><br><span class=\"line\">返回：2</span><br></pre></td></tr></table></figure>\n<p>Happy Hacking :)</p>","text":" &lt;p&gt;几天前在@ideawu的博客上看到了其一篇文章中讲到的技术题.&lt;br&gt;&lt;a href=&quot;http://www.ideawu.net/blog/archives/732.html&quot; target=&quot;_blank&q...","link":"","photos":[],"count_time":{"symbolsCount":"3k","symbolsTime":"3 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%9C%80%E8%A6%81%E5%AE%89%E8%A3%85%E7%9A%84nginx-%E6%8F%92%E4%BB%B6\"><span class=\"toc-text\">需要安装的nginx 插件</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%B8%8B%E8%BD%BD%E4%B9%8B%E5%90%8E%EF%BC%8C%E5%AE%89%E8%A3%85nginx%E6%8F%92%E4%BB%B6\"><span class=\"toc-text\">下载之后，安装nginx插件</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%A5%BD%E4%BA%86%EF%BC%8C%E6%9D%A5%E5%AE%8C%E6%88%90ideawu%E7%9A%84%E4%BD%9C%E4%B8%9A-%EF%BC%9A%EF%BC%89\"><span class=\"toc-text\">好了，来完成ideawu的作业 ：）</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#online-lua-%E6%BA%90%E7%A0%81\"><span class=\"toc-text\">online.lua 源码</span></a></li></ol></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"lua鉴权","uid":"ec4484b625c96084efebc419c043f6ca","slug":"zl/2016-01-01-26_lua鉴权","date":"2024-04-03T03:47:33.130Z","updated":"2024-04-03T03:47:33.130Z","comments":true,"path":"api/articles/zl/2016-01-01-26_lua鉴权.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"简介openresty+lua做接口调用权限限制说明：openresty可以理解为一个服务器它将nginx的核心包含了过来，并结合lua脚本语言实现一些对性能要求高的功能 purview.lua1234567891011121314151617181920212223242526...","link":"","photos":[],"count_time":{"symbolsCount":"7.8k","symbolsTime":"7 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Lua进程设计（5）","uid":"d0b187144aba9fb0a587a12b0c875dec","slug":"zl/2016-01-01-266_Lua进程设计（5）","date":"2024-04-03T03:47:33.129Z","updated":"2024-04-03T03:47:33.129Z","comments":true,"path":"api/articles/zl/2016-01-01-266_Lua进程设计（5）.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":" &lt;p&gt;Lua中的闭包。&lt;/p&gt; 闭包在Lua语言中，函数是严格遵循词法定界的第一类值。 “第一类值”意味着Lua语言中的函数与与其他常见类型的值具有同等权限（函数也是值）： 一个进程可以将某个函数保存到变量中或表中 可以将某个函数作为参数传递给其他函数 ...","link":"","photos":[],"count_time":{"symbolsCount":"1.2k","symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}