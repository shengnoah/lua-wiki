{"title":"lua","uid":"df60e476b394b1dd4755ec96c53302ff","slug":"zl/2016-01-01-651_lua","date":"2024-04-03T03:47:35.871Z","updated":"2024-04-03T03:47:35.872Z","comments":true,"path":"api/articles/zl/2016-01-01-651_lua.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<section class=\"meta\">\n  <span class=\"time\">\n  </span>\n<p>|<br />\n<span class=\"categories\"><br />\n分类</p>\n<pre><code>&lt;a href=&quot;/categories/#lua之基础&quot; title=&quot;lua之基础&quot;&gt;lua之基础&lt;/a&gt; \n</code></pre>\n  </span>\n<p>|</p>\n</section>\n<section class=\"post\">\n  <blockquote>\n  <p>“翻译”自<a href=\"https://github.com/SteveKChiu/lua-intf\">https://github.com/SteveKChiu/lua-intf</a></p>\n</blockquote>\n<p>lua-intf 提供了C++11 与Lua 语言之间的一种绑定机制，它提供了三种不同的API（本文只会讲到LuaBinding 与LuaRef）</p>\n<ul>\n  <li>LuaBinding：导出C++ 类、函数给Lua 脚本使用</li>\n  <li>LuaRef：用于访问Lua Object 的高级别API</li>\n  <li>LuaState：为Lua C API 提供的低级别包装器</li>\n</ul>\n<p>除了C++11、Lua 之外，lua-intf 没有其他需要依赖的。而且它是一个只有头文件的库，也就是说没有makefile 或者其他安装操作，直接拷贝lua-intf 源码到你的项目中，在代码中#include LuaIntf.h 即可</p>\n<h2 id=\"lua-和c-的错误处理\">Lua 和C++ 的错误处理</h2>\n<p>使用LuaIntf，最好使用C++ 编译器编译Lua，这样允许Lua 库在出现错误时抛出异常，而且保证栈上的C++ 对象被正确的析构</p>\n<p>更多关于错误处理的内容，可以参见<a href=\"http://lua-users.org/wiki/ErrorHandlingBetweenLuaAndCplusplus\">http://lua-users.org/wiki/ErrorHandlingBetweenLuaAndCplusplus</a></p>\n<p>如果你坚持想在C 环境下编译Lua，而且可以忍受longjump 问题，你可以在#include LuaIntf.h 头文件之前先#define LUAINTF_LINK_LUA_COMPILED_IN_CXX 0</p>\n<div class=\"language-c highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"cp\">#define LUAINTF_LINK_LUA_COMPILED_IN_CXX 0\n#include &#34;LuaIntf/LuaIntf.h&#34;\n</span></code></pre></div></div>\n<h2 id=\"在c-环境下编译lua\">在C++ 环境下编译Lua</h2>\n<p>预编译的Lua 库大多数发行版都是在C 环境下编译的，如果需要在C++ 环境下编译Lua 库，你可能需要自己手动操作。在C++ 环境下编译Lua 其实也很简单，首先先把Lua 源码下载下来</p>\n<div class=\"language-shell highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>curl http://www.lua.org/ftp/lua-5.3.0.tar.gz <span class=\"nt\">-o</span> lua-5.3.0.tar.gz\n<span class=\"nb\">tar </span>xf lua-5.3.0.tar.gz\n<span class=\"nb\">cd </span>lua-5.3.0\n</code></pre></div></div>\n<p>在不同的环境下使用不同的命令进行编译构建</p>\n<div class=\"language-shell highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># Linux环境下编译</span>\nmake linux <span class=\"nv\">MYCFLAGS</span><span class=\"o\">=</span><span class=\"s2\">&#34;-x c++&#34;</span> <span class=\"nv\">CC</span><span class=\"o\">=</span><span class=\"s2\">&#34;g++&#34;</span>\n<p><span class=\"c\"># Mac OSX 环境下编译</span><br />\nmake macosx <span class=\"nv\">MYCFLAGS</span><span class=\"o\">=</span><span class=\"s2\">&quot;-x c++&quot;</span> <span class=\"nv\">MYLDFLAGS</span><span class=\"o\">=</span><span class=\"s2\">&quot;-lc++&quot;</span></p>\n<p><span class=\"c\">## 在Windows 下用MINGW 或MSYS 编译</span><br />\nmake mingw <span class=\"nv\">MYCFLAGS</span><span class=\"o\">=</span><span class=\"s2\">&quot;-x c++&quot;</span> <span class=\"nv\">CC</span><span class=\"o\">=</span><span class=\"s2\">&quot;g++&quot;</span><br />\n</code></pre></div></div></p>\n<p>而且你可以选择指定路径进行安装</p>\n<div class=\"language-shell highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>make install <span class=\"nv\">INSTALL_TOP</span><span class=\"o\">=</span>&lt;path&gt;\n</code></pre></div></div>\n<h2 id=\"为lua-脚本导出c-类或函数\">为Lua 脚本导出C++ 类或函数</h2>\n<p>比如下面这个C++ 类</p>\n<div class=\"language-c++ highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">class</span> <span class=\"nc\">Web</span>\n<span class=\"p\">&#123;</span>\n<span class=\"k\">public</span><span class=\"o\">:</span>\n    <span class=\"c1\">// base_url is optional\n</span>    <span class=\"n\">Web</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span> <span class=\"o\">&amp;</span><span class=\"n\">base_url</span><span class=\"p\">);</span>\n    <span class=\"o\">~</span><span class=\"n\">Web</span><span class=\"p\">();</span>\n<pre><code>&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;go_home&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;\n\n&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;home_url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;\n&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;set_home_url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;\n\n&lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;\n&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;set_url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;\n&lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resolve_url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uri&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;\n\n&lt;span class=&quot;c1&quot;&gt;// doing reload if uri is empty\n</code></pre>\n<p></span>    <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span> <span class=\"n\">load</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span> <span class=\"o\">&amp;</span><span class=\"n\">uri</span><span class=\"p\">);</span><br />\n<span class=\"p\">}</span><br />\n</code></pre></div></div></p>\n<p>使用下面的代码可以将Web 类导出</p>\n<div class=\"language-c++ highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">LuaBinding</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">).</span><span class=\"n\">beginClass</span><span class=\"o\">&lt;</span><span class=\"n\">Web</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"s\">&#34;Web&#34;</span><span class=\"p\">)</span>\n    <span class=\"p\">.</span><span class=\"n\">addConstructor</span><span class=\"p\">(</span><span class=\"n\">LUA_ARGS</span><span class=\"p\">(</span><span class=\"n\">_opt</span><span class=\"o\">&lt;</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span><span class=\"o\">&gt;</span><span class=\"p\">))</span>\n    <span class=\"p\">.</span><span class=\"n\">addStaticProperty</span><span class=\"p\">(</span><span class=\"s\">&#34;home_url&#34;</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">Web</span><span class=\"o\">::</span><span class=\"n\">home_url</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">Web</span><span class=\"o\">::</span><span class=\"n\">set_home_url</span><span class=\"p\">)</span>\n    <span class=\"p\">.</span><span class=\"n\">addStaticFunction</span><span class=\"p\">(</span><span class=\"s\">&#34;go_home&#34;</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">Web</span><span class=\"o\">::</span><span class=\"n\">go_home</span><span class=\"p\">)</span>\n    <span class=\"p\">.</span><span class=\"n\">addProperty</span><span class=\"p\">(</span><span class=\"s\">&#34;url&#34;</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">Web</span><span class=\"o\">::</span><span class=\"n\">url</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">Web</span><span class=\"o\">:</span><span class=\"n\">set_url</span><span class=\"p\">)</span>\n    <span class=\"p\">.</span><span class=\"n\">addFunction</span><span class=\"p\">(</span><span class=\"s\">&#34;resolve_url&#34;</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">Web</span><span class=\"o\">::</span><span class=\"n\">resolve_url</span><span class=\"p\">)</span>\n    <span class=\"p\">.</span><span class=\"n\">addFunction</span><span class=\"p\">(</span><span class=\"s\">&#34;load&#34;</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">Web</span><span class=\"o\">::</span><span class=\"n\">load</span><span class=\"p\">,</span> <span class=\"n\">LUA_ARGS</span><span class=\"p\">(</span><span class=\"n\">_opt</span><span class=\"o\">&lt;</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span><span class=\"o\">&gt;</span><span class=\"p\">))</span>\n    <span class=\"p\">.</span><span class=\"n\">addStaticFunction</span><span class=\"p\">(</span><span class=\"s\">&#34;lambda&#34;</span><span class=\"p\">,</span> <span class=\"p\">[]</span> <span class=\"p\">&#123;</span>\n        <span class=\"c1\">// you can use C++11 lambda expression here too\n</span>        <span class=\"k\">return</span> <span class=\"s\">&#34;yes&#34;</span><span class=\"p\">;</span>\n    <span class=\"p\">&#125;)</span>\n<span class=\"p\">.</span><span class=\"n\">endClass</span><span class=\"p\">();</span>\n</code></pre></div></div>\n<p>在Lua 代码中可以这样使用Web 类</p>\n<div class=\"language-lua highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">local</span> <span class=\"n\">w</span> <span class=\"o\">=</span> <span class=\"n\">Web</span><span class=\"p\">()</span>                            <span class=\"c1\">-- auto w = Web(&#34;&#34;);</span>\n<span class=\"n\">w</span><span class=\"p\">.</span><span class=\"n\">url</span> <span class=\"o\">=</span> <span class=\"s2\">&#34;http://www.xumenger.com&#34;</span>          <span class=\"c1\">-- w.set_url(&#34;http://www.xumenger.com&#34;);</span>\n<span class=\"kd\">local</span> <span class=\"n\">page</span> <span class=\"o\">=</span> <span class=\"n\">w</span><span class=\"p\">:</span><span class=\"nb\">load</span><span class=\"p\">()</span>                      <span class=\"c1\">-- auto page = w.load(&#34;&#34;);</span>\n<span class=\"n\">page</span> <span class=\"o\">=</span> <span class=\"n\">w</span><span class=\"p\">:</span><span class=\"nb\">load</span><span class=\"p\">(</span><span class=\"s2\">&#34;http://www.google.com&#34;</span><span class=\"p\">)</span>     <span class=\"c1\">-- page = w.load(&#34;http://www.google.com&#34;);</span>\n<span class=\"kd\">local</span> <span class=\"n\">url</span> <span class=\"o\">=</span> <span class=\"n\">w</span><span class=\"p\">.</span><span class=\"n\">url</span>                          <span class=\"c1\">-- auto url = w.url();</span>\n</code></pre></div></div>\n<h2 id=\"lua-调用c-的例子\">Lua 调用C++ 的例子</h2>\n<p>编写C++ 代码simplelog.cpp，如下</p>\n<div class=\"language-c++ highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"cp\">#define LUAINTF_LINK_LUA_COMPILED_IN_CXX 0\n#include &#34;LuaIntf/LuaIntf.h&#34;\n</span>\n<span class=\"cp\">#include &lt;iostream&gt;\n#include &lt;lua.hpp&gt;\n#include &lt;string&gt;\n</span>\n<span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>\n<p><span class=\"k\">struct</span> <span class=\"n\">lua_State</span><span class=\"p\">;</span></p>\n<p><span class=\"k\">class</span> <span class=\"nc\">SimpleLog</span> <span class=\"p\">&#123;</span><br />\n<span class=\"k\">public</span><span class=\"o\">:</span><br />\n<span class=\"k\">static</span> <span class=\"n\">SimpleLog</span> <span class=\"o\">*</span><span class=\"n\">getInstance</span><span class=\"p\">()</span> <span class=\"p\">&#123;</span><br />\n<span class=\"k\">static</span> <span class=\"n\">SimpleLog</span> <span class=\"n\">instance</span><span class=\"p\">;</span><br />\n<span class=\"k\">return</span> <span class=\"o\">&amp;</span><span class=\"n\">instance</span><span class=\"p\">;</span><br />\n<span class=\"p\">&#125;</span></p>\n<pre><code>&lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SimpleLog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;\n&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;\n&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BindLua&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lua_State&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;\n</code></pre>\n<p><span class=\"k\">private</span><span class=\"o\">:</span><br />\n<span class=\"n\">SimpleLog</span><span class=\"p\">();</span><br />\n<span class=\"p\">};</span></p>\n<p><span class=\"n\">SimpleLog</span><span class=\"o\">::</span><span class=\"n\">SimpleLog</span><span class=\"p\">()</span> <span class=\"p\">{}</span><br />\n<span class=\"n\">SimpleLog</span><span class=\"o\">::~</span><span class=\"n\">SimpleLog</span><span class=\"p\">()</span> <span class=\"p\">{}</span></p>\n<p><span class=\"kt\">void</span> <span class=\"n\">SimpleLog</span><span class=\"o\">::</span><span class=\"n\">Log</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">string</span> <span class=\"o\">&amp;</span><span class=\"n\">str</span><span class=\"p\">)</span> <span class=\"p\">{</span><br />\n<span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&quot;C++ Env: SimpleLog::Log() &quot;</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">str</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span><br />\n<span class=\"p\">}</span></p>\n<p><span class=\"k\">namespace</span> <span class=\"p\">{</span><br />\n<span class=\"k\">using</span> <span class=\"n\">LuaRef</span> <span class=\"o\">=</span> <span class=\"n\">LuaIntf</span><span class=\"o\">::</span><span class=\"n\">LuaRef</span><span class=\"p\">;</span></p>\n<pre><code>&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;LuaLog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&#123;&lt;/span&gt;\n    &lt;span class=&quot;n&quot;&gt;SimpleLog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getInstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;\n&lt;span class=&quot;p&quot;&gt;&#125;&lt;/span&gt;\n\n&lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LuaSimpleLog&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&#123;&lt;/span&gt;\n    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Bind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lua_State&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&#123;&lt;/span&gt;\n        &lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;\n        &lt;span class=&quot;n&quot;&gt;LuaIntf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LuaBinding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;beginModule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#34;simple_log&amp;#34;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;\n                 &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addFunction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#34;log&amp;#34;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LuaLog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;\n                 &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endModule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;\n    &lt;span class=&quot;p&quot;&gt;&#125;&lt;/span&gt;\n&lt;span class=&quot;p&quot;&gt;&#125;;&lt;/span&gt;\n</code></pre>\n<p><span class=\"p\">};</span></p>\n<p><span class=\"kt\">void</span> <span class=\"n\">SimpleLog</span><span class=\"o\">::</span><span class=\"n\">BindLua</span><span class=\"p\">(</span><span class=\"n\">lua_State</span> <span class=\"o\">*</span><span class=\"n\">L</span><span class=\"p\">)</span> <span class=\"p\">{</span><br />\n<span class=\"n\">LuaSimpleLog</span><span class=\"o\">::</span><span class=\"n\">Bind</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">);</span><br />\n<span class=\"p\">}</span></p>\n<p><span class=\"kt\">int</span> <span class=\"n\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span><br />\n<span class=\"n\">lua_State</span> <span class=\"o\">*</span><span class=\"n\">L</span> <span class=\"o\">=</span> <span class=\"n\">luaL_newstate</span><span class=\"p\">();</span><br />\n<span class=\"n\">luaL_openlibs</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">);</span><br />\n<span class=\"n\">SimpleLog</span><span class=\"o\">::</span><span class=\"n\">getInstance</span><span class=\"p\">()</span><span class=\"o\">-&gt;</span><span class=\"n\">BindLua</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">);</span><br />\n<span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&quot;C++ Env: C++ main() start&quot;</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span><br />\n<span class=\"n\">luaL_dofile</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"s\">&quot;./test.lua&quot;</span><span class=\"p\">);</span><br />\n<span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&quot;C++ Env: C++ main() end&quot;</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span><br />\n<span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span><br />\n<span class=\"p\">}</span><br />\n</code></pre></div></div></p>\n<p>编写log.lua 代码如下</p>\n<div class=\"language-lua highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">local</span> <span class=\"n\">Log</span> <span class=\"o\">=</span> <span class=\"p\">&#123;&#125;</span>\n<span class=\"kd\">local</span> <span class=\"n\">log</span> <span class=\"o\">=</span> <span class=\"n\">simple_log</span><span class=\"p\">.</span><span class=\"n\">log</span>\n<p><span class=\"k\">function</span> <span class=\"nf\">Log</span><span class=\"p\">:</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">log_name</span><span class=\"p\">)</span><br />\n<span class=\"nb\">assert</span><span class=\"p\">(</span><span class=\"s2\">&quot;table&quot;</span> <span class=\"o\"><mark></span> <span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">))</span><br />\n<span class=\"nb\">assert</span><span class=\"p\">(</span><span class=\"ow\">not</span> <span class=\"n\">log_name</span> <span class=\"ow\">or</span> <span class=\"s2\">&quot;string&quot;</span> <span class=\"o\"></mark></span> <span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"n\">log_name</span><span class=\"p\">))</span><br />\n<span class=\"kd\">local</span> <span class=\"n\">log</span> <span class=\"o\">=</span> <span class=\"p\">&#123;&#125;</span><br />\n<span class=\"n\">log</span><span class=\"p\">.</span><span class=\"n\">log_name</span> <span class=\"o\">=</span> <span class=\"n\">log_name</span> <span class=\"ow\">or</span> <span class=\"s2\">&quot;log&quot;</span><br />\n<span class=\"nb\">setmetatable</span><span class=\"p\">(</span><span class=\"n\">log</span><span class=\"p\">,</span> <span class=\"n\">self</span><span class=\"p\">)</span><br />\n<span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">__index</span> <span class=\"o\">=</span> <span class=\"n\">self</span><br />\n<span class=\"k\">return</span> <span class=\"n\">log</span><br />\n<span class=\"k\">end</span></p>\n<p><span class=\"k\">function</span> <span class=\"nf\">Log</span><span class=\"p\">:</span><span class=\"n\">set_log_name</span><span class=\"p\">(</span><span class=\"n\">log_name</span><span class=\"p\">)</span><br />\n<span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">log_name</span> <span class=\"o\">=</span> <span class=\"n\">log_name</span><br />\n<span class=\"k\">end</span></p>\n<p><span class=\"k\">function</span> <span class=\"nf\">Log</span><span class=\"p\">:</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"n\">pattern</span><span class=\"p\">,</span> <span class=\"o\">…</span><span class=\"p\">)</span><br />\n<span class=\"n\">log</span><span class=\"p\">(</span><span class=\"nb\">string.format</span><span class=\"p\">(</span><span class=\"n\">pattern</span><span class=\"p\">,</span> <span class=\"o\">…</span><span class=\"p\">))</span><br />\n<span class=\"k\">end</span></p>\n<p><span class=\"k\">function</span> <span class=\"nf\">Log</span><span class=\"p\">:</span><span class=\"n\">debug</span><span class=\"p\">()</span><br />\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;Lua Env: log.lua debuf()&quot;</span><span class=\"p\">)</span><br />\n<span class=\"k\">end</span></p>\n<p><span class=\"k\">return</span> <span class=\"n\">Log</span><br />\n</code></pre></div></div></p>\n<p>编写test.lua 内容如下</p>\n<div class=\"language-lua highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">local</span> <span class=\"k\">function</span> <span class=\"nf\">main</span><span class=\"p\">()</span>\n<pre><code>&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;#34;Lua Env: test.lua main() begin&amp;#34;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;\n&lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;#34;../TestLuaIntf&amp;#34;&lt;/span&gt;\n&lt;span class=&quot;nb&quot;&gt;package.path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;package.path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;#34;;&amp;#34;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;#34;/&amp;#34;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;#34;TestLuaIntf&amp;#34;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;#34;/?.lua&amp;#34;&lt;/span&gt;\n\n&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;#34;Lua Env: test.lua main() middle&amp;#34;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;\n\n&lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;#34;log&amp;#34;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;#34;svn_log&amp;#34;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;\n&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;#34;Lua Env: test.lua main() call info() %d...&amp;#34;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;\n\n&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;#34;Lua Env: test.lua main() end&amp;#34;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;\n</code></pre>\n<p><span class=\"k\">end</span></p>\n<p><span class=\"nb\">xpcall</span><span class=\"p\">(</span><span class=\"n\">main</span><span class=\"p\">,</span> <span class=\"k\">function</span><span class=\"p\">(</span><span class=\"o\">…</span><span class=\"p\">)</span><br />\n<span class=\"kd\">local</span> <span class=\"n\">msg</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"o\">…</span><span class=\"p\">};</span><br />\n<span class=\"k\">for</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">v</span> <span class=\"k\">in</span> <span class=\"nb\">pairs</span><span class=\"p\">(</span><span class=\"n\">msg</span><span class=\"p\">)</span> <span class=\"k\">do</span><br />\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;Lua Env: k=&quot;</span> <span class=\"o\">…</span> <span class=\"nb\">tostring</span><span class=\"p\">(</span><span class=\"n\">k</span><span class=\"p\">)</span> <span class=\"o\">…</span> <span class=\"s2\">&quot; v =&quot;</span> <span class=\"o\">…</span> <span class=\"nb\">tostring</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span><br />\n<span class=\"k\">end</span><br />\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;Lua Env: &quot;</span> <span class=\"o\">…</span> <span class=\"nb\">tostring</span><span class=\"p\">()</span> <span class=\"o\">…</span> <span class=\"s2\">&quot; 123&quot;</span><span class=\"p\">)</span><br />\n<span class=\"k\">end</span><span class=\"p\">)</span><br />\n</code></pre></div></div></p>\n<p>编译C++ 程序运行效果如下</p>\n<p><img src=\"http://www.xumenger.com/../media/image/2019-06-07/01.png\" alt=\"\"/></p>\n<blockquote>\n  <p>这个例子中的流程是通过C++ 调用lua 接口luaL_dofile(L, “./test.lua”) 来执行test.lua，test.lua 中require(“log”)，然后lua 再调用C++ 的函数Log 完成打印！</p>\n</blockquote>\n<h2 id=\"访问lua-object-的高级别api\">访问Lua Object 的高级别API</h2>\n<p>LuaRef 被设计用来方便地访问Lua 对象，而且大多数情况下你不需要像Lua 原生API那样处理Lua 栈</p>\n<p>使用Lua 原生API 实现C++ 访问Lua 的代码要这样实现</p>\n<div class=\"language-c++ highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">lua_State</span> <span class=\"o\">*</span><span class=\"n\">L</span> <span class=\"o\">=</span> <span class=\"p\">...;</span>\n<span class=\"n\">lua_getglobal</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"s\">&#34;module&#34;</span><span class=\"p\">);</span>\n<span class=\"n\">lua_getfield</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s\">&#34;method&#34;</span><span class=\"p\">);</span>\n<span class=\"n\">lua_pushintteger</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n<span class=\"n\">lua_pushstring</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"s\">&#34;yes&#34;</span><span class=\"p\">);</span>\n<span class=\"n\">lua_pushboolean</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"nb\">true</span><span class=\"p\">);</span>\n<span class=\"n\">lua_call</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">);</span>\n</code></pre></div></div>\n<p>但如果使用LuaRef 那么就会非常简单</p>\n<div class=\"language-c++ highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">LuaRef</span> <span class=\"n\">fun</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"s\">&#34;module.method&#34;</span><span class=\"p\">);</span>\n<span class=\"n\">func</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s\">&#34;yes&#34;</span><span class=\"p\">,</span> <span class=\"nb\">true</span><span class=\"p\">);</span>\n</code></pre></div></div>\n<p>访问Lua 中的表也是非常方便的</p>\n<div class=\"language-c++ highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">LuaRef</span> <span class=\"n\">table</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"s\">&#34;my_table&#34;</span><span class=\"p\">);</span>\n<span class=\"n\">table</span><span class=\"p\">[</span><span class=\"s\">&#34;value&#34;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">15</span><span class=\"p\">;</span>\n<span class=\"kt\">int</span> <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">table</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"s\">&#34;value&#34;</span><span class=\"p\">);</span>\n<p><span class=\"k\">for</span><span class=\"p\">(</span><span class=\"k\">auto</span> <span class=\"o\">&amp;</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">table</span><span class=\"p\">)</span> <span class=\"p\">&#123;</span><br />\n<span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span> <span class=\"n\">key</span> <span class=\"o\">=</span> <span class=\"n\">e</span><span class=\"p\">.</span><span class=\"n\">key</span><span class=\"o\">&lt;</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span><span class=\"o\">&gt;</span><span class=\"p\">();</span><br />\n<span class=\"n\">LuaRef</span> <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">e</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"o\">&lt;</span><span class=\"n\">LuaRef</span><span class=\"o\">&gt;</span><span class=\"p\">();</span><br />\n<span class=\"p\">…</span><br />\n<span class=\"p\">&#125;</span><br />\n</code></pre></div></div></p>\n<p>你也可以和Lua 原生API 混用</p>\n<div class=\"language-c++ highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">lua_State</span> <span class=\"o\">*</span><span class=\"n\">L</span> <span class=\"o\">=</span> <span class=\"p\">...;</span>\n<span class=\"n\">LuaRef</span> <span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"p\">...;</span>\n<span class=\"n\">lua_getglobal</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"s\">&#34;my_method&#34;</span><span class=\"p\">);</span>\n<span class=\"n\">Lua</span><span class=\"o\">::</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">);</span>                    <span class=\"c1\">// the same as lua_pushinteger\n</span><span class=\"n\">Lua</span><span class=\"o\">::</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">);</span>                    <span class=\"c1\">// push v to lua stack\n</span><span class=\"n\">Lua</span><span class=\"o\">::</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"nb\">true</span><span class=\"p\">);</span>                 <span class=\"c1\">// the same as lua_pushboolean\n</span><span class=\"n\">lua_call</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">);</span>\n<span class=\"n\">LuaRef</span> <span class=\"n\">r</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">);</span>                    <span class=\"c1\">// map r to lua stack index -2\n</span></code></pre></div></div>\n<h2 id=\"c-调用lua-脚本\">C++ 调用Lua 脚本</h2>\n<p>下面实际的实现一个例子展示如何使用C++ 调用Lua 脚本，将代码运行起来更直观！</p>\n<p>编写call_lua.cpp 的代码如下</p>\n<div class=\"language-c++ highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"cp\">#define LUAINTF_LINK_LUA_COMPILED_IN_CXX 0\n#include &#34;LuaIntf/LuaIntf.h&#34;\n</span>\n<span class=\"cp\">#include &lt;lua.hpp&gt;\n#include &lt;string&gt;\n#include &lt;iostream&gt;\n</span>\n<span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>\n<p><span class=\"k\">struct</span> <span class=\"n\">lua_State</span><span class=\"p\">;</span></p>\n<p><span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span><br />\n<span class=\"p\">&#123;</span><br />\n<span class=\"k\">using</span> <span class=\"n\">LuaRef</span> <span class=\"o\">=</span> <span class=\"n\">LuaIntf</span><span class=\"o\">::</span><span class=\"n\">LuaRef</span><span class=\"p\">;</span></p>\n<pre><code>&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&#123;&lt;/span&gt;\n    &lt;span class=&quot;n&quot;&gt;lua_State&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;luaL_newstate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;\n    &lt;span class=&quot;n&quot;&gt;luaL_openlibs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;\n\n    &lt;span class=&quot;n&quot;&gt;LuaIntf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LuaContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;\n    &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;doFile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#34;./test_ref.lua&amp;#34;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;\n\n    &lt;span class=&quot;n&quot;&gt;LuaRef&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#34;test_module.test_func&amp;#34;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;\n    &lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#34;hello world&amp;#34;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;\n&lt;span class=&quot;p&quot;&gt;&#125;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LuaIntf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LuaException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&#123;&lt;/span&gt;\n    &lt;span class=&quot;n&quot;&gt;cerr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#34;Error: &amp;#34;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;what&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;\n&lt;span class=&quot;p&quot;&gt;&#125;&lt;/span&gt;\n\n&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;\n</code></pre>\n<p><span class=\"p\">}</span><br />\n</code></pre></div></div></p>\n<p>在编写对应的test_ref.lua 代码如下</p>\n<div class=\"language-lua highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">local</span> <span class=\"n\">M</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n<span class=\"kd\">local</span> <span class=\"n\">modelName</span> <span class=\"o\">=</span> <span class=\"s2\">&#34;test_module&#34;</span>\n<span class=\"nb\">_G</span><span class=\"p\">[</span><span class=\"n\">modelName</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">M</span>\n<p><span class=\"k\">function</span> <span class=\"nc\">M</span><span class=\"p\">.</span><span class=\"nf\">test_func</span><span class=\"p\">(</span><span class=\"n\">int_v</span><span class=\"p\">,</span> <span class=\"n\">bool_v</span><span class=\"p\">,</span> <span class=\"n\">string_v</span><span class=\"p\">)</span><br />\n<span class=\"nb\">print</span>&lt;span class=&quot;</p>\n","text":" | 分类 &lt;a href=&quot;/categories/#lua之基础&quot; title=&quot;lua之基础&quot;&gt;lua之基础&lt;/a&gt; | “翻译”自https://github.com/SteveKChiu/lua-intf ...","link":"","photos":[],"count_time":{"symbolsCount":"19k","symbolsTime":"17 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#lua-%E5%92%8Cc-%E7%9A%84%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86\"><span class=\"toc-text\">Lua 和C++ 的错误处理</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%9C%A8c-%E7%8E%AF%E5%A2%83%E4%B8%8B%E7%BC%96%E8%AF%91lua\"><span class=\"toc-text\">在C++ 环境下编译Lua</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%BAlua-%E8%84%9A%E6%9C%AC%E5%AF%BC%E5%87%BAc-%E7%B1%BB%E6%88%96%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">为Lua 脚本导出C++ 类或函数</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#lua-%E8%B0%83%E7%94%A8c-%E7%9A%84%E4%BE%8B%E5%AD%90\"><span class=\"toc-text\">Lua 调用C++ 的例子</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%AE%BF%E9%97%AElua-object-%E7%9A%84%E9%AB%98%E7%BA%A7%E5%88%ABapi\"><span class=\"toc-text\">访问Lua Object 的高级别API</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#c-%E8%B0%83%E7%94%A8lua-%E8%84%9A%E6%9C%AC\"><span class=\"toc-text\">C++ 调用Lua 脚本</span></a></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Lua 笔记","uid":"ae7aefc0bc12da0c129eeca96c4d42db","slug":"zl/2016-01-01-650_Lua 笔记","date":"2024-04-03T03:47:35.871Z","updated":"2024-04-03T03:47:35.871Z","comments":true,"path":"api/articles/zl/2016-01-01-650_Lua 笔记.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"词法约定变量是以字母或下划线开头的字母下划线数字序列，不要使用下划线加大写字母的标识符，因为Lua的保留字是这种形式Lua的保留字： and break do else elseif end false for function if in local nil not or re...","link":"","photos":[],"count_time":{"symbolsCount":958,"symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"cocos2dx lua —— Http请求总结与实战(封装)","uid":"dcb7ce12f00b8209eff197aa80b46963","slug":"zl/2016-01-01-648_cocos2dx lua —— Http请求总结与实战(封装)","date":"2024-04-03T03:47:35.870Z","updated":"2024-04-03T03:47:35.870Z","comments":true,"path":"api/articles/zl/2016-01-01-648_cocos2dx lua —— Http请求总结与实战(封装).json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"今天的主题是关于cocos2dx lua实现短链接网络请求，使用Http实现基本的服务器网络数据获取，关于长链接（socket后续文件或者遇到需要的时候回特别实现与处理） 关于Http这里就不多做介绍了，不过，作为一个程序员，网络请求是开发中最多也是最重要的一环节，这里比较建议，...","link":"","photos":[],"count_time":{"symbolsCount":"9.8k","symbolsTime":"9 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}