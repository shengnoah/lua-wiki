{"title":"Unity中使用sLua的 超丶简单基础教程(二)","uid":"bf541aa57d5643f7179ad07349624c98","slug":"zl/2016-01-01-140_Unity中使用sLua的 超丶简单基础教程(二)","date":"2024-04-03T03:47:33.038Z","updated":"2024-04-03T03:47:33.038Z","comments":true,"path":"api/articles/zl/2016-01-01-140_Unity中使用sLua的 超丶简单基础教程(二).json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<p><img src=\"https://Lafree317.github.io/../../images/Slua-1.png\" alt=\"\"/></p>\n<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p><a href=\"https://lafree317.github.io/2018/01/20/2018-01-20%20-%20Unity%E4%B8%AD%E4%BD%BF%E7%94%A8sLua%E7%9A%84%20%E8%B6%85%E4%B8%B6%E7%AE%80%E5%8D%95%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B(%E4%B8%80)/\" target=\"_blank\" rel=\"noopener noreferrer\">Unity中使用sLua的 超丶简单基础教程(一)</a></p>\n<p>上一篇博客讲了一下简单调用LuaState读取Lua代码并执行</p>\n<p>本篇要讲一下如何更改路径并使得Lua可以调用UnityEngine代码的方法</p>\n<p>虽然简短但也是长时间爬坑试验出来的(因为基础教程真的好少啊….)希望对大家有帮助..</p>\n<h3 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h3><p>在创建一个新的场景,一个新的CreateEmpty把C#脚本挂上去代码如下:</p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/><span class=\"line\">9</span><br/><span class=\"line\">10</span><br/><span class=\"line\">11</span><br/><span class=\"line\">12</span><br/><span class=\"line\">13</span><br/><span class=\"line\">14</span><br/><span class=\"line\">15</span><br/><span class=\"line\">16</span><br/><span class=\"line\">17</span><br/><span class=\"line\">18</span><br/><span class=\"line\">19</span><br/><span class=\"line\">20</span><br/><span class=\"line\">21</span><br/><span class=\"line\">22</span><br/><span class=\"line\">23</span><br/><span class=\"line\">24</span><br/><span class=\"line\">25</span><br/><span class=\"line\">26</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">using System;</span><br/><span class=\"line\">using System.Collections;</span><br/><span class=\"line\">using System.Collections.Generic;</span><br/><span class=\"line\">using UnityEngine;</span><br/><span class=\"line\">using System.IO;</span><br/><span class=\"line\">using SLua;</span><br/><span class=\"line\"></span><br/><span class=\"line\">public class TestLua : MonoBehaviour {</span><br/><span class=\"line\"></span><br/><span class=\"line\">\tvoid Start () {</span><br/><span class=\"line\">\t\tLuaSvr svr = new LuaSvr();// 如果不先进行某个LuaSvr的初始化的话,下面的mianState会爆一个为null的错误..</span><br/><span class=\"line\">        LuaSvr.mainState.loaderDelegate += LuaReourcesFileLoader;</span><br/><span class=\"line\">\t\tsvr.init(null, () =&gt; // 如果不用init方法初始化的话,在Lua中是不能import的</span><br/><span class=\"line\">\t\t{</span><br/><span class=\"line\">            svr.start(&#34;Test&#34;);</span><br/><span class=\"line\">\t\t});</span><br/><span class=\"line\">\t}</span><br/><span class=\"line\"></span><br/><span class=\"line\">    // SLua Loader代理方法</span><br/><span class=\"line\">    private static byte[] LuaReourcesFileLoader(string strFile)</span><br/><span class=\"line\">    {</span><br/><span class=\"line\">        // 这里为了测试就不先判断为空,开发的时候再加上</span><br/><span class=\"line\">        string filename = Application.dataPath + &#34;/Scripts/Lua/&#34; + strFile.Replace(&#39;.&#39;, &#39;/&#39;) + &#34;.txt&#34;;</span><br/><span class=\"line\">        return File.ReadAllBytes(filename);</span><br/><span class=\"line\">    }</span><br/><span class=\"line\">}</span><br/></pre></td></tr></tbody></table></figure>\n<p>然后在Assest/Scripts/Lua/中创建一个Lua.txt脚本 命名路径都可以更改代码如下:</p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">import &#34;UnityEngine&#34;</span><br/><span class=\"line\"></span><br/><span class=\"line\">function main()</span><br/><span class=\"line\">    print(&#34;Lua创建了一个Cube&#34;)</span><br/><span class=\"line\">    local cube = GameObject.CreatePrimitive(PrimitiveType.Cube)</span><br/><span class=\"line\">end</span><br/><span class=\"line\"></span><br/><span class=\"line\">main()</span><br/></pre></td></tr></tbody></table></figure>\n<h4 id=\"效果图\"><a href=\"#效果图\" class=\"headerlink\" title=\"效果图\"></a>效果图</h4><p><img src=\"https://user-gold-cdn.xitu.io/2018/2/3/1615b60570c81eb1?w=504&amp;h=324&amp;f=png&amp;s=66637\" alt=\"\"/></p>\n<h4 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h4><p>上一篇主要说了一下如何引用SLua读取lua脚本<br/>这一篇主要说了一下Lua如何调用UnityEngine的方法<br/>下一遍我会说一下开发一个中间层,把Start Awake Update等方法都传递到Lua中<br/>最终完成一个纯Lua项目</p>\n<p>本篇教程很基础,如果有精力会将之后学习到的知识都整理成博客分享给大家~</p>","text":" 前言Unity中使用sLua的 超丶简单基础教程(一) 上一篇博客讲了一下简单调用LuaState读取Lua代码并执行 本篇要讲一下如何更改路径并使得Lua可以调用UnityEngine代码的方法 虽然简短但也是长时间爬坑试验出来的(因为基础教程真的好少啊….)希望对大家有帮助...","link":"","photos":[],"count_time":{"symbolsCount":"1.3k","symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%89%8D%E8%A8%80\"><span class=\"toc-text\">前言</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%AD%A3%E6%96%87\"><span class=\"toc-text\">正文</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%95%88%E6%9E%9C%E5%9B%BE\"><span class=\"toc-text\">效果图</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%85%B6%E4%BB%96\"><span class=\"toc-text\">其他</span></a></li></ol></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Lua 排序算法","uid":"18c65ae79c1521b9ec150d64b8237a42","slug":"zl/2016-01-01-144_Lua 排序算法 ","date":"2024-04-03T03:47:33.039Z","updated":"2024-04-03T03:47:33.039Z","comments":true,"path":"api/articles/zl/2016-01-01-144_Lua 排序算法 .json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"归并排序（Merge Sort，台湾译作：合并排序）是建立在归并操作上的一种有效的排序算法。该算法是采用分治法（Divide and Conquer）的一个非常典型的应用。 归并操作(Merge)，也叫归并算法，指的是将两个已经排序的序列合并成一个序列的操作。归并排序算法依赖归并...","link":"","photos":[],"count_time":{"symbolsCount":"6.6k","symbolsTime":"6 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"LUA5.1调用C函数","uid":"c16303c759dd88967615455485b434a3","slug":"zl/2016-01-01-141_LUA5.1调用C函数","date":"2024-04-03T03:47:33.038Z","updated":"2024-04-03T03:47:33.038Z","comments":true,"path":"api/articles/zl/2016-01-01-141_LUA5.1调用C函数.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"Lua利用一个虚拟的栈(stack)来给C传递值或从C获取值。每当Lua调用C函数，都会获得一个新的栈，该栈初始包含所有的调用C函数所需要的参数值（Lua传给C函数的调用实参），并且C函数执行完毕后，会把返回值压入这个栈（Lua从中拿到C函数调用结果）本文展示了如何在lua中调用...","link":"","photos":[],"count_time":{"symbolsCount":"1.7k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}