{"title":"Lua 排序算法","uid":"18c65ae79c1521b9ec150d64b8237a42","slug":"zl/2016-01-01-210_Lua 排序算法 ","date":"2024-04-03T03:47:33.090Z","updated":"2024-04-03T03:47:33.090Z","comments":true,"path":"api/articles/zl/2016-01-01-210_Lua 排序算法 .json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<pre><code>\t\t\t&lt;p&gt;选择排序（Selection Sort）是一种简单直观的排序算法。它的工作原理如下，首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置，然后，再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。以此类推，直到所有元素均排序完毕。&lt;/p&gt;\n</code></pre>\n<p>选择排序的主要优点与数据移动有关。如果某个元素位于正确的最终位置上，则它不会被移动。选择排序每次交换一对元素，它们当中至少有一个将被移到其最终位置上，因此对n个元素的序列进行排序总共进行至多n-1次交换。在所有的完全依靠交换去移动元素的排序方法中，选择排序属于非常好的一种。</p>\n<h5 id=\"算法步骤\">算法步骤</h5>\n<ol>\n  <li>首先在未排序序列中找到最小元素，存放到排序序列的起始位置</li>\n  <li>再从剩余未排序元素中继续寻找最小元素，然后放到已排序序列的末尾。</li>\n  <li>重复第二步，直到所有元素均排序完毕。</li>\n</ol>\n<h5 id=\"动画演示\">动画演示</h5>\n<p><img src=\"https://ms2008.github.io/img/in-post/sort/Selection-Sort-Animation.gif\" alt=\"Alt text\"></p>\n<h5 id=\"lua-实现\">Lua 实现</h5>\n<div class=\"language-lua highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">local</span> <span class=\"k\">function</span> <span class=\"nf\">selectionSort</span><span class=\"p\">(</span><span class=\"n\">arr</span><span class=\"p\">)</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"o\">#</span><span class=\"n\">arr</span><span class=\"o\">-</span><span class=\"mi\">1</span> <span class=\"k\">do</span>\n        <span class=\"kd\">local</span> <span class=\"n\">idx</span> <span class=\"o\">=</span> <span class=\"n\">i</span>\n        <span class=\"c1\">-- 迭代剩下的元素，寻找最小的元素</span>\n        <span class=\"k\">for</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"n\">i</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"o\">#</span><span class=\"n\">arr</span> <span class=\"k\">do</span>\n            <span class=\"k\">if</span> <span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">&lt;</span> <span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"n\">idx</span><span class=\"p\">]</span> <span class=\"k\">then</span>\n                <span class=\"n\">idx</span> <span class=\"o\">=</span> <span class=\"n\">j</span>\n            <span class=\"k\">end</span>\n        <span class=\"k\">end</span>\n        <span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">],</span> <span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"n\">idx</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"n\">idx</span><span class=\"p\">],</span> <span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span>\n    <span class=\"k\">end</span>\n<span class=\"k\">end</span>\n<p><span class=\"kd\">local</span> <span class=\"n\">list</span> <span class=\"o\">=</span> <span class=\"p\">&#123;</span><br />\n<span class=\"o\">-</span><span class=\"mi\">81</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">93</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">36</span><span class=\"p\">.</span><span class=\"mi\">85</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">53</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">31</span><span class=\"p\">,</span> <span class=\"mi\">79</span><span class=\"p\">,</span> <span class=\"mi\">45</span><span class=\"p\">.</span><span class=\"mi\">94</span><span class=\"p\">,</span> <span class=\"mi\">36</span><span class=\"p\">,</span> <span class=\"mi\">94</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">95</span><span class=\"p\">.</span><span class=\"mi\">03</span><span class=\"p\">,</span> <span class=\"mi\">11</span><span class=\"p\">,</span> <span class=\"mi\">56</span><span class=\"p\">,</span> <span class=\"mi\">23</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">39</span><span class=\"p\">,</span><br />\n<span class=\"mi\">14</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">20</span><span class=\"p\">.</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">21</span><span class=\"p\">,</span> <span class=\"mi\">91</span><span class=\"p\">,</span> <span class=\"mi\">31</span><span class=\"p\">,</span> <span class=\"mi\">91</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">23</span><span class=\"p\">,</span> <span class=\"mi\">36</span><span class=\"p\">.</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">44</span><span class=\"p\">,</span> <span class=\"mi\">82</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"mi\">51</span><span class=\"p\">,</span> <span class=\"mi\">96</span><span class=\"p\">,</span> <span class=\"mi\">64</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">41</span><br />\n<span class=\"p\">&#125;</span><br />\n<span class=\"n\">selectionSort</span><span class=\"p\">(</span><span class=\"n\">list</span><span class=\"p\">)</span><br />\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"nb\">table.concat</span><span class=\"p\">(</span><span class=\"n\">list</span><span class=\"p\">,</span> <span class=\"s2\">&quot;, &quot;</span><span class=\"p\">))</span><br />\n</code></pre></div></div></p>\n","text":" &lt;p&gt;选择排序（Selection Sort）是一种简单直观的排序算法。它的工作原理如下，首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置，然后，再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。以此类推，直到所有元素均排序完毕。&...","link":"","photos":[],"count_time":{"symbolsCount":917,"symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E7%AE%97%E6%B3%95%E6%AD%A5%E9%AA%A4\"><span class=\"toc-text\">算法步骤</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%8A%A8%E7%94%BB%E6%BC%94%E7%A4%BA\"><span class=\"toc-text\">动画演示</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#lua-%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">Lua 实现</span></a></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"lua","uid":"df60e476b394b1dd4755ec96c53302ff","slug":"zl/2016-01-01-215_lua","date":"2024-04-03T03:47:33.091Z","updated":"2024-04-03T03:47:33.092Z","comments":true,"path":"api/articles/zl/2016-01-01-215_lua.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"函数 函数定义 1 2 3 function function_name (arc) -- arc 表示参数列表，函数的参数列表可以为空 -- body end 1 2 3 local function function_name (arc) -- body end 由于全局变量...","link":"","photos":[],"count_time":{"symbolsCount":"2.9k","symbolsTime":"3 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Lua 学习 chapter17","uid":"71d4be5e48e9da5655b092bfb309953f","slug":"zl/2016-01-01-211_Lua 学习 chapter17 ","date":"2024-04-03T03:47:33.090Z","updated":"2024-04-03T03:47:33.090Z","comments":true,"path":"api/articles/zl/2016-01-01-211_Lua 学习 chapter17 .json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":" &lt;h3 id=&quot;目录&quot;&gt;目录&lt;/h3&gt; require函数 模块 require函数 ruquire函数可以加载任意模块，然后创建和返回一个表. 1 2 3 4 5 6 7 8 9 local mod = require \"mod\" ...","link":"","photos":[],"count_time":{"symbolsCount":739,"symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}