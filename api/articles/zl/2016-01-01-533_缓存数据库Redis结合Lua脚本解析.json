{"title":"缓存数据库Redis结合Lua脚本解析","uid":"3374fc9e5690a7d583cf9d06cecfe571","slug":"zl/2016-01-01-533_缓存数据库Redis结合Lua脚本解析","date":"2024-04-03T03:47:35.807Z","updated":"2024-04-03T03:47:35.808Z","comments":true,"path":"api/articles/zl/2016-01-01-533_缓存数据库Redis结合Lua脚本解析.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<p>redis作为一款优秀的缓存数据库，已成为许多的公司项目开发的必备底层数据库之一了，在我们使用redis时，除了平常对五种基础数据结构进行单一操作，有时会需要依赖redis来处理一段相对复杂的逻辑，而这段逻辑可能需要通过redis client发送多条redis命令来达到我们的目的，然而这种处理方式，不仅效率低，而且无法保证事务的原子性；redis从2.6.0版本开始提供了一种新的解决方案，内置lua解释器，通过 redis Eval 命令来执行lua脚本，达到执行自定义逻辑的redis命令的目的。</p>\n<h3 id=\"解析\"><a href=\"#解析\" class=\"headerlink\" title=\"解析\"></a>解析</h3><p>Eval 命令的基本语法如下：<br/></p><figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">redis 127.0.0.1:6379&gt; EVAL script numkeys key [key ...] arg [arg ...]</div></pre></td></tr></tbody></table></figure><p></p>\n<p>如果我们想在lua脚本中调用redis的命令该如何操作？可以在脚本中使用redis.call()或redis.pcall()直接调用，两者用法类似，只是在遇到错误时，返回错误的提示方式不同。例如：<br/></p><figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">eval &#34;return redis.call(&#39;set&#39;,KEYS[1],&#39;bar&#39;)&#34; 1 foo</div></pre></td></tr></tbody></table></figure><p></p>\n<p>实例：<br/></p><figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">10.109:9&gt;eval &#34;return {KEYS[1],ARGV[1]}&#34; 1 key1 ff</div><div class=\"line\"> 1)  &#34;key1&#34;</div><div class=\"line\"> 2)  &#34;ff&#34;</div></pre></td></tr></tbody></table></figure><p></p>\n<p>由于redis是单线程执行命令的，因此我们需要保证我们lua脚本足够精简，才不至于会阻塞redis线程，因此脚本内容尽量不用循环，避免阻塞redis线程，导致后续网络请求也被阻塞。</p>\n<h3 id=\"项目应用\"><a href=\"#项目应用\" class=\"headerlink\" title=\"项目应用\"></a>项目应用</h3><h4 id=\"实现功能\"><a href=\"#实现功能\" class=\"headerlink\" title=\"实现功能\"></a>实现功能</h4><p>redis实现消息队列先进先出，并限制队列最大长度，超出长度则顶出队列最后一个元素</p>\n<h4 id=\"demo代码\"><a href=\"#demo代码\" class=\"headerlink\" title=\"demo代码\"></a>demo代码</h4><figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> org.junit.Test;</div><div class=\"line\"><span class=\"keyword\">import</span> org.junit.runner.RunWith;</div><div class=\"line\"><span class=\"keyword\">import</span> org.slf4j.Logger;</div><div class=\"line\"><span class=\"keyword\">import</span> org.slf4j.LoggerFactory;</div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.test.context.SpringBootTest;</div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.test.context.SpringBootTest.WebEnvironment;</div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.core.io.ClassPathResource;</div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.redis.core.StringRedisTemplate;</div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.redis.core.script.DefaultRedisScript;</div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.redis.core.script.RedisScript;</div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.scripting.support.ResourceScriptSource;</div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Collections;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.ExecutorService;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.Executors;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.locks.Lock;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.locks.ReentrantLock;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"> * Created by lilm on 17-11-10.</div><div class=\"line\"> */</div><div class=\"line\">(SpringJUnit4ClassRunner.class)</div><div class=\"line\"><span class=\"meta\">@SpringBootTest</span>(webEnvironment = WebEnvironment.RANDOM_PORT)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span>  </span>{</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Logger logger = LoggerFactory.getLogger(getClass());</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"meta\">@Autowired</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> StringRedisTemplate redisTemplate;</div><div class=\"line\">\t</div><div class=\"line\">\t</div><div class=\"line\">\t * push redis 队列脚本</div><div class=\"line\">\t * 1. 检查队列长度是否超出配置长度</div><div class=\"line\">\t * 2. 若超出, 弹出队列最后一个元素, 并将当前元素插入第一位</div><div class=\"line\">\t * 3. 没超出则将当前元素插入第一位</div><div class=\"line\">\t */</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> DefaultRedisScript&lt;Long&gt; queueScript = <span class=\"keyword\">null</span>;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"comment\">// 创建一个锁对象</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> Lock lock = <span class=\"keyword\">new</span> ReentrantLock();</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">private</span> Long l = <span class=\"number\">0L</span>;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"comment\">// 最大缓存消息数</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> Long MAX_CACHED_NUM = <span class=\"number\">300L</span>;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> String QUEUE_KEY = <span class=\"string\">&#34;demo-queue&#34;</span>;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">push</span><span class=\"params\">()</span> </span>{</div><div class=\"line\">\t\t<span class=\"keyword\">try</span> {</div><div class=\"line\">\t\t\tlock.lock();</div><div class=\"line\">\t\t\tLong num = redisTemplate.execute(</div><div class=\"line\">\t\t\t\t\tgetQueueScript(), Collections.singletonList(QUEUE_KEY),</div><div class=\"line\">\t\t\t\t\tMAX_CACHED_NUM.toString(), String.valueOf(l)</div><div class=\"line\">\t\t\t);</div><div class=\"line\">\t\t\tlogger.info(<span class=\"string\">&#34;push data:{} to queue return:{}&#34;</span>, l, num);</div><div class=\"line\">\t\t} <span class=\"keyword\">catch</span> (Exception e) {</div><div class=\"line\">\t\t\tlogger.error(<span class=\"string\">&#34;redis error:&#34;</span>, e);</div><div class=\"line\">\t\t} <span class=\"keyword\">finally</span> {</div><div class=\"line\">\t\t\tl++;</div><div class=\"line\">\t\t\tlock.unlock();</div><div class=\"line\">\t\t}</div><div class=\"line\">\t}</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> RedisScript&lt;Long&gt; <span class=\"title\">getQueueScript</span><span class=\"params\">()</span> </span>{</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (queueScript == <span class=\"keyword\">null</span>) {</div><div class=\"line\">\t\t\tqueueScript = <span class=\"keyword\">new</span> DefaultRedisScript&lt;Long&gt;();</div><div class=\"line\">\t\t\tqueueScript.setResultType(Long.class);</div><div class=\"line\">\t\t\t<span class=\"comment\">// ClassPathResource指定路径不需要前缀 classpath:</span></div><div class=\"line\">\t\t\tqueueScript.setScriptSource(<span class=\"keyword\">new</span> ResourceScriptSource(<span class=\"keyword\">new</span> ClassPathResource(<span class=\"string\">&#34;lua/queue_script.lua&#34;</span>)));</div><div class=\"line\">\t\t}</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> queueScript;</div><div class=\"line\">\t}</div><div class=\"line\">\t</div><div class=\"line\">\t</div><div class=\"line\">\t * 线程池持有三十个线程，每个线程持续写入100次，推入数据为0~2999</div><div class=\"line\">\t * 由于push方法是线程安全的，最终redis中demo-queue的结果应该是：</div><div class=\"line\">\t * 1. list中总共300条数据</div><div class=\"line\">\t * 2. 第一条为 2999 第300条为 2700，中间数据依次加1</div><div class=\"line\">\t */</div><div class=\"line\">\t<span class=\"meta\">@Test</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testQueue</span><span class=\"params\">()</span> </span>{</div><div class=\"line\">\t\tExecutorService service = Executors.newFixedThreadPool(<span class=\"number\">50</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">try</span> {</div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">30</span>; i ++) {</div><div class=\"line\">\t\t\t\tThread t = <span class=\"keyword\">new</span> Thread(() -&gt; {</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">int</span> x = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) {</div><div class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">if</span> (x == <span class=\"number\">100</span>) {</div><div class=\"line\">\t\t\t\t\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t\t\t\t\t}</div><div class=\"line\">\t\t\t\t\t\tpush();</div><div class=\"line\">\t\t\t\t\t\tx++;</div><div class=\"line\">\t\t\t\t\t}</div><div class=\"line\">\t\t\t\t});</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">try</span> {</div><div class=\"line\">\t\t\t\t\tservice.execute(t);</div><div class=\"line\">\t\t\t\t} <span class=\"keyword\">finally</span> {</div><div class=\"line\">\t\t\t\t\tlogger.info(<span class=\"string\">&#34;子线程{}已开启&#34;</span>, i + <span class=\"number\">1</span>);</div><div class=\"line\">\t\t\t\t}</div><div class=\"line\">\t\t\t}</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\tlogger.info(<span class=\"string\">&#34;已启动所有的子线程&#34;</span>);</div><div class=\"line\">\t\t\tservice.shutdown();</div><div class=\"line\">\t\t\t<span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) {</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (service.isTerminated()) {</div><div class=\"line\">\t\t\t\t\tlogger.info(<span class=\"string\">&#34;所有的子线程都结束了！&#34;</span>);</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t\t\t}</div><div class=\"line\">\t\t\t}</div><div class=\"line\">\t\t} <span class=\"keyword\">catch</span> (Exception e) {</div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t}</div><div class=\"line\">\t\t</div><div class=\"line\">\t}</div><div class=\"line\">}</div></pre></td></tr></tbody></table></figure>\n<p>lua脚本内容：<br/></p><figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">-- push redis 队列脚本</span></div><div class=\"line\"><span class=\"comment\">-- 1. 检查队列长度是否超出配置长度</span></div><div class=\"line\"><span class=\"comment\">-- 2. 若超出, 弹出队列最后一个元素, 并将当前元素插入第一位</span></div><div class=\"line\"><span class=\"comment\">-- 3. 没超出则将当前元素插入第一位</span></div><div class=\"line\"><span class=\"keyword\">local</span> num = redis.call(<span class=\"string\">&#39;LLEN&#39;</span>, KEYS[<span class=\"number\">1</span>])</div><div class=\"line\"><span class=\"keyword\">if</span> num &gt;= <span class=\"built_in\">tonumber</span>(ARGV[<span class=\"number\">1</span>]) <span class=\"keyword\">then</span></div><div class=\"line\">    redis.call(<span class=\"string\">&#39;RPOP&#39;</span>, KEYS[<span class=\"number\">1</span>])</div><div class=\"line\">    num = num - <span class=\"number\">1</span></div><div class=\"line\"><span class=\"keyword\">end</span></div><div class=\"line\">redis.call(<span class=\"string\">&#39;LPUSH&#39;</span>, KEYS[<span class=\"number\">1</span>], ARGV[<span class=\"number\">2</span>])</div><div class=\"line\"><span class=\"keyword\">return</span> num + <span class=\"number\">1</span></div></pre></td></tr></tbody></table></figure><p></p>\n<p>redis处理结果：<br/><img src=\"https://lilomin.github.io//images/lua/redis_lua_1.png\" alt=\"\"/><br/><img src=\"https://lilomin.github.io//images/lua/redis_lua_2.png\" alt=\"\"/></p>\n<p>demo代码使用springboot+junit+spring-data-redis实现，附 <a href=\"https://github.com/lilomin/Easy/blob/master/easy-account/src/test/java/lilm/p/easy/account/RedisDemoTest.java\" target=\"_blank\" rel=\"external noopener noreferrer\">源码地址</a></p>\n<p>使用redis加lua脚本的好处是使程序逻辑更加简单，只需调用脚本执行即可，lua脚本执行可以减少网络延迟以及多余的传输流量，redis在执行lua脚本之后会将脚本sha1值缓存，下次调用时可以只携带脚本sha1值执行，进一步的减小网络开销。</p>\n<h3 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h3><p>使用redis+lua脚本时一定要精简我们的脚本，太过复杂的逻辑将会降低redis执行效率，阻塞线程，甚至影响到系统性能；同时复杂的脚本一旦出现bug，因为是在lua解释器中执行将很难去排查问题。</p>","text":"redis作为一款优秀的缓存数据库，已成为许多的公司项目开发的必备底层数据库之一了，在我们使用redis时，除了平常对五种基础数据结构进行单一操作，有时会需要依赖redis来处理一段相对复杂的逻辑，而这段逻辑可能需要通过redis client发送多条redis命令来达到我们的目...","link":"","photos":[],"count_time":{"symbolsCount":"4.6k","symbolsTime":"4 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%A7%A3%E6%9E%90\"><span class=\"toc-text\">解析</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%A1%B9%E7%9B%AE%E5%BA%94%E7%94%A8\"><span class=\"toc-text\">项目应用</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E7%8E%B0%E5%8A%9F%E8%83%BD\"><span class=\"toc-text\">实现功能</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#demo%E4%BB%A3%E7%A0%81\"><span class=\"toc-text\">demo代码</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B3%A8%E6%84%8F\"><span class=\"toc-text\">注意</span></a></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"lua中的C","uid":"d907583fe80bb53b2d460061452afe81","slug":"zl/2016-01-01-535_lua中的C","date":"2024-04-03T03:47:35.808Z","updated":"2024-04-03T03:47:35.808Z","comments":true,"path":"api/articles/zl/2016-01-01-535_lua中的C.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"了解lua的内部实现结构有助于更清楚的各个函数是怎么要操作内容及内容的，就从最开始的lua解释器开始进行查看。 Lua提供了一系列API来让宿主程序和Lua进行通信。所有的API函数和相关的类型和常量都在lua.h内声明。 虽然我们使用了函数这个术语，但是API中的某些特性可能是...","link":"","photos":[],"count_time":{"symbolsCount":"13k","symbolsTime":"12 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"LUA面向对象编程技巧","uid":"7b688055584efd19ee44e4529173196a","slug":"zl/2016-01-01-531_LUA面向对象编程技巧","date":"2024-04-03T03:47:35.804Z","updated":"2024-04-03T03:47:35.804Z","comments":true,"path":"api/articles/zl/2016-01-01-531_LUA面向对象编程技巧.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"LUA中的对象我们知道，对象由属性和方法组成。LUA中最基本的结构是table，So 必须用table描述对象的属性。lua中的function可以用来表示方法。那么LUA中的类可以通过table + function模拟出来。至于继承，可以通过metetable模拟出来（不推荐...","link":"","photos":[],"count_time":{"symbolsCount":"1.7k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}