{"title":"nginx + lua 开发中过程中 post body 过大返回 4xx","uid":"907c558f6073daa875604aa5a0e703cf","slug":"zl/2016-01-01-571_nginx + lua 开发中过程中 post body 过大返回 4xx","date":"2024-04-03T03:47:35.825Z","updated":"2024-04-03T03:47:35.825Z","comments":true,"path":"api/articles/zl/2016-01-01-571_nginx + lua 开发中过程中 post body 过大返回 4xx.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>基于 OpenResty 提供 post 接口，调用方调用该接口 post 数据，该接口接收 post 过来的数据，复用 Nginx access 日志落盘。</p>\n<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><p>当用户的 body 体过大时，<code>ngx.req.get_body_data()</code> 读请求体，会出现读取不到直接返回 <code>nil</code> 的情况。</p>\n<h2 id=\"问题原因\"><a href=\"#问题原因\" class=\"headerlink\" title=\"问题原因\"></a>问题原因</h2><p>究其原因，主要是 Nginx 诞生之初主要是为了解决负载均衡情况，而这种情况，是不需要读取 body 就可以决定负载策略的，所以这个点对于 API Server 和 Web Application 开发的同学有点怪。</p>\n<h2 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h2><ol>\n<li>如果你只是某个接口需要读取 body（并非全局行为），那么这时候也可以显示调用 <code>ngx.req.read_body()</code> 接口</li>\n<li>如果想全局生效的话需要使用命令<code>lua_need_request_body on;</code></li>\n</ol>\n<p>当选择上述其中一种，甚至两种方案都使用了，依旧还解决不了问题，这时候，需要坚持 body 体是不是太大了。这是需要设置如下两个命令：<br/></p><figure class=\"highlight shell\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">client_body_buffer_size 256k; #默认8k|16k</span><br/><span class=\"line\">client_max_body_size 256k; #默认1m</span><br/></pre></td></tr></tbody></table></figure><p></p>\n<p>上述两条命令将强制将 body 写入内存，这样就可以读取较大的 body 体的数据了。</p>\n<p>如果请求体已经被存入临时文件，请使用<code>ngx.req.get_body_file</code>函数代替。</p>","text":"背景基于 OpenResty 提供 post 接口，调用方调用该接口 post 数据，该接口接收 post 过来的数据，复用 Nginx access 日志落盘。 问题当用户的 body 体过大时，ngx.req.get_body_data() 读请求体，会出现读取不到直接返回 ...","link":"","photos":[],"count_time":{"symbolsCount":600,"symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%83%8C%E6%99%AF\"><span class=\"toc-text\">背景</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">问题</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%97%AE%E9%A2%98%E5%8E%9F%E5%9B%A0\"><span class=\"toc-text\">问题原因</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95\"><span class=\"toc-text\">解决办法</span></a></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Mac下安装lua","uid":"17e7437a74ee5f0d7e09e4f383b05a7d","slug":"zl/2016-01-01-573_Mac下安装lua","date":"2024-04-03T03:47:35.825Z","updated":"2024-04-03T03:47:35.826Z","comments":true,"path":"api/articles/zl/2016-01-01-573_Mac下安装lua.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":" Lua 是一种轻量小巧的脚本语言，用标准C语言编写并以源代码形式开放， 其设计目的是为了嵌入应用程序中，从而为应用程序提供灵活的扩展和定制功能。 以官网的Lua 5.3.5版本为例。 12345curl -R -O http://www.lua.org/ftp/lua-5.3....","link":"","photos":[],"count_time":{"symbolsCount":347,"symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Redis慢查询、Pipeline、事务与Lua、Bitmaps、发布订阅","uid":"2eceeeadcd601ca2a9fee495ed73c176","slug":"zl/2016-01-01-572_Redis慢查询、Pipeline、事务与Lua、Bitmaps、发布订阅","date":"2024-04-03T03:47:35.825Z","updated":"2024-04-03T03:47:35.825Z","comments":true,"path":"api/articles/zl/2016-01-01-572_Redis慢查询、Pipeline、事务与Lua、Bitmaps、发布订阅.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":" Redis提供的5种数据结构已经足够强大，但除此之外，Redis还提供了诸如慢查询分析、功能强大的Redis Shell、Pipeline、事务与Lua脚本、Bitmaps、HyperLogLog、发布订阅、GEO等附加功能，这些功能可以在某些场景发挥重要的作用。 慢查询分析许...","link":"","photos":[],"count_time":{"symbolsCount":"11k","symbolsTime":"10 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}