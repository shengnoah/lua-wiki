{"title":"Lua学习笔记(二)","uid":"0262d5e813f620b4d5ffd84599479a3f","slug":"zl/2016-01-01-517_Lua学习笔记(二)","date":"2024-04-03T03:47:35.790Z","updated":"2024-04-03T03:47:35.794Z","comments":true,"path":"api/articles/zl/2016-01-01-517_Lua学习笔记(二).json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<ul>\n<li><a href=\"#变量\">变量</a></li>\n<li><a href=\"#赋值语句\">赋值语句</a><ul>\n<li><a href=\"#多变量赋值\">多变量赋值</a></li>\n</ul>\n</li>\n<li><a href=\"#索引\">索引</a></li>\n<li><a href=\"#循环\">循环</a><ul>\n<li><a href=\"#控制语句\">控制语句</a></li>\n</ul>\n</li>\n<li><a href=\"#流程控制\">流程控制</a></li>\n<li><a href=\"#函数\">函数</a><ul>\n<li><a href=\"#可变参数\">可变参数</a></li>\n</ul>\n</li>\n<li><a href=\"#运算符\">运算符</a><ul>\n<li><a href=\"#算术运算符\">算术运算符</a></li>\n<li><a href=\"#关系运算符\">关系运算符</a></li>\n<li><a href=\"#逻辑运算符\">逻辑运算符</a></li>\n<li><a href=\"#其它运算符\">其它运算符</a></li>\n<li><a href=\"#优先级\">优先级</a></li>\n</ul>\n</li>\n<li><a href=\"#字符串\">字符串</a><ul>\n<li><a href=\"#转义字符\">转义字符</a></li>\n<li><a href=\"#字符串操作\">字符串操作</a></li>\n<li><a href=\"#字符串格式化\">字符串格式化</a></li>\n<li><a href=\"#匹配模式\">匹配模式</a><ul>\n<li><a href=\"#模式\">模式</a></li>\n<li><a href=\"#捕获\">捕获</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#数组\">数组</a></li>\n<li><a href=\"#迭代器\">迭代器</a><ul>\n<li><a href=\"#泛型for迭代器\">泛型for迭代器</a></li>\n<li><a href=\"#无状态迭代器\">无状态迭代器</a></li>\n<li><a href=\"#多状态迭代器\">多状态迭代器</a></li>\n</ul>\n</li>\n<li><a href=\"#table\">table</a><ul>\n<li><a href=\"#操作方法\">操作方法</a></li>\n</ul>\n</li>\n</ul>\n<h2><span id=\"变量\">变量</span></h2><p>使用前必须<strong>申明</strong>，即创建该变量。</p>\n<p>包括：<strong>全局变量，局部变量，表中的域。</strong></p>\n<p>前文中提到过，Lua中所有的变量默认都是全局变量，有一种情况是例外的，那就是用local显示声明为局部变量的。</p>\n<p>试尝试：</p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/><span class=\"line\">9</span><br/><span class=\"line\">10</span><br/><span class=\"line\">11</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">a=1;</span><br/><span class=\"line\">local b = 2;</span><br/><span class=\"line\">function test()</span><br/><span class=\"line\">    c=3;</span><br/><span class=\"line\">    local d=4;</span><br/><span class=\"line\">end</span><br/><span class=\"line\">test()</span><br/><span class=\"line\">print(&#34;a&#34;..a)</span><br/><span class=\"line\">print(&#34;b&#34;..b)</span><br/><span class=\"line\">print(&#34;c&#34;..c)</span><br/><span class=\"line\">print(d)</span><br/></pre></td></tr></tbody></table></figure>\n<p><img src=\"https://thbelief.github.io//2019/04/20/Lua学习笔记-二/local.jpg\" alt=\"\"/></p>\n<p>这里经过试验可以轻易的得知，local定义的变量的使用范围就是在当前的代码块儿之内的。一旦超出的话就直接归nil！</p>\n<p>这里使用到了Lua中的一些语法，例如function与end，这里就不一一的详细描述了，后面会讲到。</p>\n<h2><span id=\"赋值语句\">赋值语句</span></h2><h3><span id=\"多变量赋值\">多变量赋值</span></h3><p>在Lua中，多个变量可以一同赋值。（两边的数量相同时）</p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">a,b=&#34;hello&#34;,&#34;world&#34;</span><br/><span class=\"line\">print(a)</span><br/><span class=\"line\">print(b)</span><br/></pre></td></tr></tbody></table></figure>\n<p>结果为：</p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">hello</span><br/><span class=\"line\">world</span><br/></pre></td></tr></tbody></table></figure>\n<p><strong>当变量的个数不等于赋值个数的时候？</strong></p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">a. 变量个数 &gt; 值的个数             按变量个数补足nil</span><br/><span class=\"line\">b. 变量个数 &lt; 值的个数             多余的值会被忽略</span><br/></pre></td></tr></tbody></table></figure>\n<p>注意，当函数返回多个值的时候，可以直接使用多变量赋值：</p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">a,b=fun()</span><br/></pre></td></tr></tbody></table></figure>\n<p>这里的话返回的多个值会直接赋值给前面的变量。</p>\n<h2><span id=\"索引\">索引</span></h2><p>对table表的使用索引主要就是包括了两种：</p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">site={}</span><br/><span class=\"line\">site[&#34;key&#34;]=&#34;thbelief&#34;</span><br/><span class=\"line\">--第一种方法</span><br/><span class=\"line\">print(&#34;第一种&#34;..site[&#34;key&#34;])</span><br/><span class=\"line\">--第二种方法</span><br/><span class=\"line\">print(&#34;第二种&#34;..site.key)</span><br/></pre></td></tr></tbody></table></figure>\n<p>输出结果：</p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">第一种thbelief</span><br/><span class=\"line\">第二种thbelief</span><br/></pre></td></tr></tbody></table></figure>\n<h2><span id=\"循环\">循环</span></h2><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">循环类型</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><a href=\"http://www.runoob.com/lua/lua-while-loop.html\" target=\"_blank\" rel=\"noopener noreferrer\">while 循环</a></td>\n<td style=\"text-align:left\">在条件为 true 时，让程序重复地执行某些语句。执行语句前会先检查条件是否为 true。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"http://www.runoob.com/lua/lua-for-loop.html\" target=\"_blank\" rel=\"noopener noreferrer\">for 循环</a></td>\n<td style=\"text-align:left\">重复执行指定语句，重复次数可在 for 语句中控制。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"http://www.runoob.com/lua/lua-repeat-until-loop.html\" target=\"_blank\" rel=\"noopener noreferrer\">repeat…until</a></td>\n<td style=\"text-align:left\">重复执行循环，直到 指定的条件为真时为止</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"http://www.runoob.com/lua/lua-nested-loops.html\" target=\"_blank\" rel=\"noopener noreferrer\">循环嵌套</a></td>\n<td style=\"text-align:left\">可以在循环内嵌套一个或多个循环语句（while do … end;for … do … end;repeat … until;）</td>\n</tr>\n</tbody>\n</table>\n<p><img src=\"https://thbelief.github.io//2019/04/20/Lua学习笔记-二/循环.jpg\" alt=\"\"/></p>\n<h3><span id=\"控制语句\">控制语句</span></h3><p><strong>Break：退出当前循环或语句。</strong></p>\n<h2><span id=\"流程控制\">流程控制</span></h2><p><strong>需要特别注意，在Lua中0是true。</strong></p>\n<p><strong>在Lua中，只有nil和false为假！</strong></p>\n<p>if语句、if…else语句、if的嵌套语句。</p>\n<h2><span id=\"函数\">函数</span></h2><p>Lua中函数的定义：</p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">optional_function_scope function function_name( argument1, argument2, argument3..., argumentn)</span><br/><span class=\"line\">    function_body</span><br/><span class=\"line\">    return result_params_comma_separated</span><br/><span class=\"line\">end</span><br/></pre></td></tr></tbody></table></figure>\n<ul>\n<li><strong>optional_function_scope:</strong> 该参数是可选的制定函数是全局函数还是局部函数，未设置该参数默认为全局函数，如果你需要设置函数为局部函数需要使用关键字 <strong>local</strong>。</li>\n<li><strong>function_name:</strong> 指定函数名称。</li>\n<li><strong>argument1, argument2, argument3…, argumentn:</strong> 函数参数，多个参数以逗号隔开，函数也可以不带参数。</li>\n<li><strong>function_body:</strong> 函数体，函数中需要执行的代码语句块。</li>\n<li><strong>result_params_comma_separated:</strong> 函数返回值，Lua语言函数可以返回多个值，每个值以逗号隔开。</li>\n</ul>\n<h3><span id=\"可变参数\">可变参数</span></h3><p>和c语言类似，Lua中用<strong>…</strong>表示函数有可变的参数。</p>\n<ul>\n<li><strong>select(‘#’, …)</strong> 返回可变参数的长度</li>\n<li><strong>select(n, …)</strong> 用于访问 <strong>n</strong> 到 <strong>select(‘#’,…)</strong> 的参数</li>\n</ul>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/><span class=\"line\">9</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">function add(...)--这里使用...表示可变参数</span><br/><span class=\"line\">local s=0</span><br/><span class=\"line\">for i,v in ipairs{...} do</span><br/><span class=\"line\">    s=s+v</span><br/><span class=\"line\">end</span><br/><span class=\"line\">print(&#34;可变参数数量：&#34;..select(&#34;#&#34;, ...))</span><br/><span class=\"line\">return s</span><br/><span class=\"line\">end</span><br/><span class=\"line\">print(add(1,2,3,4))</span><br/></pre></td></tr></tbody></table></figure>\n<p><img src=\"https://thbelief.github.io//2019/04/20/Lua学习笔记-二/可变参数.jpg\" alt=\"\"/></p>\n<h2><span id=\"运算符\">运算符</span></h2><h3><span id=\"算术运算符\">算术运算符</span></h3><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">操作符</th>\n<th style=\"text-align:left\">描述</th>\n<th style=\"text-align:left\">实例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">+</td>\n<td style=\"text-align:left\">加法</td>\n<td style=\"text-align:left\">A + B 输出结果 30</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-</td>\n<td style=\"text-align:left\">减法</td>\n<td style=\"text-align:left\">A - B 输出结果 -10</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">*</td>\n<td style=\"text-align:left\">乘法</td>\n<td style=\"text-align:left\">A * B 输出结果 200</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">/</td>\n<td style=\"text-align:left\">除法</td>\n<td style=\"text-align:left\">B / A w输出结果 2</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">%</td>\n<td style=\"text-align:left\">取余</td>\n<td style=\"text-align:left\">B % A 输出结果 0</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">^</td>\n<td style=\"text-align:left\">乘幂</td>\n<td style=\"text-align:left\">A^2 输出结果 100</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-</td>\n<td style=\"text-align:left\">负号</td>\n<td style=\"text-align:left\">-A 输出结果v -10</td>\n</tr>\n</tbody>\n</table>\n<p>由于太简单了，这里就不写例子了。</p>\n<h3><span id=\"关系运算符\">关系运算符</span></h3><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">操作符</th>\n<th style=\"text-align:left\">描述</th>\n<th style=\"text-align:left\">实例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">==</td>\n<td style=\"text-align:left\">等于，检测两个值是否相等，相等返回 true，否则返回 false</td>\n<td style=\"text-align:left\">(A == B) 为 false。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">~=</td>\n<td style=\"text-align:left\">不等于，检测两个值是否相等，相等返回 false，否则返回 true</td>\n<td style=\"text-align:left\">(A ~= B) 为 true。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">&gt;</td>\n<td style=\"text-align:left\">大于，如果左边的值大于右边的值，返回 true，否则返回 false</td>\n<td style=\"text-align:left\">(A &gt; B) 为 false。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">&lt;</td>\n<td style=\"text-align:left\">小于，如果左边的值大于右边的值，返回 false，否则返回 true</td>\n<td style=\"text-align:left\">(A &lt; B) 为 true。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">&gt;=</td>\n<td style=\"text-align:left\">大于等于，如果左边的值大于等于右边的值，返回 true，否则返回 false</td>\n<td style=\"text-align:left\">(A &gt;= B) 返回 false。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">&lt;=</td>\n<td style=\"text-align:left\">小于等于， 如果左边的值小于等于右边的值，返回 true，否则返回 false</td>\n<td style=\"text-align:left\">(A &lt;= B) 返回 true。</td>\n</tr>\n</tbody>\n</table>\n<p>这里需要注意的就是~=，和其它高级语言使用的！=不同，<strong>Lua中用~=表示不等于。</strong></p>\n<h3><span id=\"逻辑运算符\">逻辑运算符</span></h3><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">操作符</th>\n<th style=\"text-align:left\">描述</th>\n<th style=\"text-align:left\">实例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">and</td>\n<td style=\"text-align:left\">逻辑与操作符。 若 A 为 false，则返回 A，否则返回 B。</td>\n<td style=\"text-align:left\">(A and B) 为 false。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">or</td>\n<td style=\"text-align:left\">逻辑或操作符。 若 A 为 true，则返回 A，否则返回 B。</td>\n<td style=\"text-align:left\">(A or B) 为 true。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">not</td>\n<td style=\"text-align:left\">逻辑非操作符。与逻辑运算结果相反，如果条件为 true，逻辑非为 false。</td>\n<td style=\"text-align:left\">not(A and B) 为 true。</td>\n</tr>\n</tbody>\n</table>\n<h3><span id=\"其它运算符\">其它运算符</span></h3><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">操作符</th>\n<th style=\"text-align:left\">描述</th>\n<th style=\"text-align:left\">实例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">..</td>\n<td style=\"text-align:left\">连接两个字符串</td>\n<td style=\"text-align:left\">a..b ，其中 a 为 “Hello “ ， b 为 “World”, 输出结果为 “Hello World”。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">#</td>\n<td style=\"text-align:left\">一元运算符，返回字符串或表的长度。</td>\n<td style=\"text-align:left\">#”Hello” 返回 5</td>\n</tr>\n</tbody>\n</table>\n<p>这两个其它运算符之前提过，这里就不详细描述了。</p>\n<h3><span id=\"优先级\">优先级</span></h3><figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">^</span><br/><span class=\"line\">not    - (unary)</span><br/><span class=\"line\">*      /</span><br/><span class=\"line\">+      -</span><br/><span class=\"line\">..</span><br/><span class=\"line\">&lt;      &gt;      &lt;=     &gt;=     ~=     ==</span><br/><span class=\"line\">and</span><br/><span class=\"line\">or</span><br/></pre></td></tr></tbody></table></figure>\n<h2><span id=\"字符串\">字符串</span></h2><h3><span id=\"转义字符\">转义字符</span></h3><table>\n<thead>\n<tr>\n<th>转义字符</th>\n<th>意义</th>\n<th>ASCII码值（十进制）</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>a</td>\n<td>响铃(BEL)</td>\n<td>007</td>\n</tr>\n<tr>\n<td>b</td>\n<td>退格(BS) ，将当前位置移到前一列</td>\n<td>008</td>\n</tr>\n<tr>\n<td>f</td>\n<td>换页(FF)，将当前位置移到下页开头</td>\n<td>012</td>\n</tr>\n<tr>\n<td>n</td>\n<td>换行(LF) ，将当前位置移到下一行开头</td>\n<td>010</td>\n</tr>\n<tr>\n<td>r</td>\n<td>回车(CR) ，将当前位置移到本行开头</td>\n<td>013</td>\n</tr>\n<tr>\n<td>t</td>\n<td>水平制表(HT) （跳到下一个TAB位置）</td>\n<td>009</td>\n</tr>\n<tr>\n<td>v</td>\n<td>垂直制表(VT)</td>\n<td>011</td>\n</tr>\n<tr>\n<td></td>\n<td>代表一个反斜线字符’’’</td>\n<td>092</td>\n</tr>\n<tr>\n<td>’</td>\n<td>代表一个单引号（撇号）字符</td>\n<td>039</td>\n</tr>\n<tr>\n<td>”</td>\n<td>代表一个双引号字符</td>\n<td>034</td>\n</tr>\n<tr>\n<td>","text":" 变量 赋值语句 多变量赋值 索引 循环 控制语句 流程控制 函数 可变参数 运算符 算术运算符 关系运算符 逻辑运算符 其它运算符 优先级 字符串 转义字符 字符串操作 字符串格式化 匹配模式 模式 捕获 数组 迭代器 泛型for迭代器 无状态迭代器 多状态迭代器 table ...","link":"","photos":[],"count_time":{"symbolsCount":"3.4k","symbolsTime":"3 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">变量</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">赋值语句</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">多变量赋值</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">索引</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">循环</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">控制语句</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">流程控制</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">函数</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">可变参数</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">运算符</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">算术运算符</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">关系运算符</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">逻辑运算符</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">其它运算符</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">优先级</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">字符串</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">转义字符</span></a></li></ol></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Lua作图教程之lua面向对象","uid":"770d44a35edd5976fd1b4dcdf804f77e","slug":"zl/2016-01-01-516_Lua作图教程之lua面向对象","date":"2024-04-03T03:47:35.790Z","updated":"2024-04-03T03:47:35.790Z","comments":true,"path":"api/articles/zl/2016-01-01-516_Lua作图教程之lua面向对象.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":" C++ Java Objective-C Smalltalk C# Ruby 面向对象特征 1） 封装：指能够把一个实体的信息、功能、响应都装入一个单独的对象中的特性。 2） 继承：继承的方法允许在不改动原程序的基础上对其进行扩充，这样使得原功能得以保存，而新功能也得以扩展。这...","link":"","photos":[],"count_time":{"symbolsCount":"3.6k","symbolsTime":"3 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Lua 排序算法","uid":"18c65ae79c1521b9ec150d64b8237a42","slug":"zl/2016-01-01-512_Lua 排序算法 ","date":"2024-04-03T03:47:35.789Z","updated":"2024-04-03T03:47:35.789Z","comments":true,"path":"api/articles/zl/2016-01-01-512_Lua 排序算法 .json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"选择排序（Selection Sort）是一种简单直观的排序算法。它的工作原理如下，首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置，然后，再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。以此类推，直到所有元素均排序完毕。 选择排序的主要优点与...","link":"","photos":[],"count_time":{"symbolsCount":957,"symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}