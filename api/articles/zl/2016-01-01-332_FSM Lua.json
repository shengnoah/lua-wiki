{"title":"FSM Lua","uid":"54a85aabe87773932febee3c49b74082","slug":"zl/2016-01-01-332_FSM Lua","date":"2024-04-03T03:47:35.610Z","updated":"2024-04-03T03:47:35.610Z","comments":true,"path":"api/articles/zl/2016-01-01-332_FSM Lua.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<p><br/><font color=\"#002060\" size=\"6\" face=\"Calibri\"><strong>Finite State Machine</strong></font><br/></p>\n<font color=\"#002060\" size=\"5\" face=\"Calibri\"><strong>Description</strong></font>\n<blockquote>\n<p>在讲这个设计模式之前, 我先举一个例子, 假如我们现在开发一款游戏, 我们的任务是实现一个角色, 我们需要根据玩家的输入来控制主角的行为。</p>\n<p>那当按下B键时，他应该跳跃但这时有bug，在哪？我们没有阻止主角 “在空中跳跃”，当主角跳起来后持续的按下B键，这样会导致他一直飘在空中，那简单的修复就是添加一个 isJumping 布尔变量来跟踪主角跳跃</p>\n<p>接着，我们要实现主角的闪避动作，当主角站在地面上的时候，玩家按下下方键，则躲避，松开此键则站立, 但这时有bug，在哪？<br/>按下, 下方键来闪避，按B键从闪避状态直接跳起来，玩家在空中的时候松开手，玩家还在空中的时候，却显示站立头像，是时候添加另一个布尔标志位来解决问题了 </p>\n<p>接下来，我们在跳起来的过程，进行一次俯冲攻击，这样才酷炫, 但这时又有bug，在哪？我们发现主角在跳跃状态的时候不能再跳，但在俯冲攻击的时候却可以跳跃。又要添加成员变量了。</p>\n<p>很明显，我们这种做法很有问题，每次我们添加一些功能的时候，都会不经意地破坏已有代码的功能。而且我们还有很多行为等动作没有添加，如果我们继续采用类似的做法，那Bug将会可能更多</p>\n<p>你拥有一组状态，并且可以在这组状态之间进行切换，状态机同一时刻只能处于一种状态。每个状态有一组转换，每一个转换和每一个输入并指向另一个状态。 状态机由此而来</p>\n<p>熟知面向对象方法的人来说，每一个条件分支可以用动态分发来解决。状态模式的目的就是将每个状态相关所有的数据和行为封装到相关的类里面。</p>\n</blockquote>\n<h2 id=\"Example-1\"><a href=\"#Example-1\" class=\"headerlink\" title=\"Example 1\"></a><font color=\"#ff4200\" size=\"5\" face=\"Calibri\"><strong>Example 1</strong></font></h2><font color=\"#002060\" size=\"4\" face=\"Calibri\"><strong>FSM.lua</strong></font>\n<pre><code>local M = &#123;&#125;\n\nfunction M:new(...)\n    self.__index = self\n    local ret = setmetatable(&#123;&#125;,self)\n    ret:init(...)\n    return ret\nend\n\nfunction M:init()\n    self.StateTable = &#123;&#125;        -- 状态表\n    self.CurState = nil         -- 当前状态\n    self.LastState = nil        -- 当前状态的上一个状态\nend\n\n--- 增加一个状态\nfunction M:AddState(state)\n    if not self.StateTable[state.State] then\n        self.StateTable[state.State] = state\n    end\nend\n\n--- 删除一个状态\nfunction M:DeleteState(state)\n    if self.StateTable[state.State] then\n        self.StateTable[state.State] = nil\n    end\nend\n\n--- 切换状态\nfunction M:TranslateState(state)\n    if not self.StateTable[state] then \n        error(&#34;&lt;color=orange&gt;&#34;..string.format(&#34;Error : State %s not exist state table&#34;,state)..&#34;&lt;/color&gt;&#34;)\n        return\n    end\n    if nil == self.CurState then\n        self.StateTable[state]:DoEnter()\n        self.CurState = state\n        return\n    end\n    if self.StateTable[self.CurState]:Can(state) then\n        self.StateTable[self.CurState]:DoLeave()\n        self.StateTable[state]:DoEnter() \n        self.LastState = self.CurState\n        self.CurState = state\n    else\n        error(&#34;&lt;color=orange&gt;&#34;..string.format(&#34;Error : Can&#39;t Translate %s  to %s &#34;,self.CurState,state)..&#34;&lt;/color&gt;&#34;)\n    end\nend\n\n--- 当前状态\nfunction M:CurrentState()\n    return self.CurState\nend\n\n--- 当前状态的:上一个状态\nfunction M:lastState()\n    return self.LastState\nend \n\nreturn M\n</code></pre><font color=\"#002060\" size=\"4\" face=\"Calibri\"><strong>FSMState.lua</strong></font>\n<pre><code>local M = &#123;&#125;\n\nfunction M:new(...)\n    self.__index = self\n    local ret = setmetatable(&#123;&#125;,self)\n    ret:init(...)\n    return ret\nend\n\nfunction M:init(state,transitionTable,onEnterCallBack,onLeaveCallBack)\n    self.State = state                                      -- 状态值\n    self.Transition = transitionTable or &#123;&#125;                 -- 可迁移状态表\n    self.onEnter = onEnterCallBack                          -- 进入时调用\n    self.onLeave = onLeaveCallBack                          -- 离开时操作\nend\n\n--- 进入状态时的操作\nfunction M:DoEnter()\n    if self.onEnter then\n        self.onEnter(self.State)\n    end\nend\n\n--- 离开该状态时的操作\nfunction M:DoLeave()\n    if self.onLeave then\n        self.onLeave(self.State)\n    end\nend\n\n--- 是否可切换到指定状态\nfunction M:Can(state) \n    return self.Transition[state]\nend\n\nreturn M\n</code></pre><font color=\"#002060\" size=\"4\" face=\"Calibri\"><strong>How to Use</strong></font>\n<pre><code>local Standing_Enter = function()\n    --进入站立状态的行为\nend \n\nlocal Standing_Leave = function()\n    --离开站立状态的行为\nend \n\nlocal Jumping_Enter = function()\n    --进入跳跃状态的行为\nend \n\nlocal Jumping_Leave = function()\n    --离开跳跃状态的行为\nend \n\nlocal Ducking_Enter = function()\n    --进入闪避状态的行为\nend \n\nlocal Ducking_Leave = function()\n    --离开闪避状态的行为\nend \n\nfunction InitFSM()\n    FState = &#123;\n        Standing = 1,\n        Jumping  = 2,\n        Ducking  = 3,\n    &#125;\n\n    local Fsm = require(&#34;.....FSM&#34;)\n    local State = require(&#34;.....FSMState&#34;)\n    FSM = Fsm:new() \n\n    FSM:AddState(State:new(FState.Standing,&#123;nil, FState.Jumping, FState.Ducking&#125;, Standing_Enter, Standing_Leave))\n    FSM:AddState(State:new(FState.Jumping,&#123;FState.Standing, nil, nil&#125;, Jumping_Enter,Jumping_Leave))\n    FSM:AddState(State:new(FState.Ducking,&#123;FState.Standing, nil, nil&#125;, Ducking_Enter,Ducking_Leave))\n    FSM:TranslateState(FState.Standing) \nend \n\n-- 获取当前状态\nfunction current_GameState()\n    return FSM:CurrentState()\nend \n\n-- 获取上一个状态\nfunction last_GameState() \n    return FSM:lastState()\nend \n\n-- 改变状态\nfunction ChangeFState(State)\n    FSM:TranslateState(State)\nend \n</code></pre><h2 id=\"Example-2\"><a href=\"#Example-2\" class=\"headerlink\" title=\"Example 2\"></a><font color=\"#ff4200\" size=\"5\" face=\"Calibri\"><strong>Example 2</strong></font></h2><font color=\"#002060\" size=\"4\" face=\"Calibri\"><strong>rFSM 状态机</strong></font>\n<blockquote>\n<p>以下是rFSM 状态机的使用情况, 这是个人业余时间写的一个小框架(还在搬砖中……), 读者有时间的话可以去下面的 Github连接上浏览代码。</p>\n</blockquote>\n<pre><code>require (&#39;Common.FSM.rfsm&#39;)\n<p>local GameState_Manager = Class()</p>\n<p>local fsm</p>\n<p>– 加载所有游戏状态对象<br />\nlocal gameStateType = &#123;&#125;<br />\ngameStateType.login_state = require(&quot;GameState.login_state&quot;).new()<br />\ngameStateType.user_state = require(&quot;GameState.user_state&quot;).new()<br />\ngameStateType.lobby_state = require(&quot;GameState.lobby_state&quot;).new()<br />\ngameStateType.room_state = require(&quot;GameState.room_state&quot;).new()<br />\ngameStateType.hero_state = require(&quot;GameState.hero_state&quot;).new()<br />\ngameStateType.loading_state = require(&quot;GameState.loading_state&quot;).new()<br />\ngameStateType.play_state = require(&quot;GameState.play_state&quot;).new()<br />\ngameStateType.over_state = require(&quot;GameState.over_state&quot;).new()</p>\n<p>– 建立游戏状态之间的关系<br />\nlocal game_state_fsm = rfsm.state &#123;</p>\n<pre><code>login_state = rfsm.state&#123; \n    entry = gameStateType.login_state.enter,\n    exit = gameStateType.login_state.leave,\n&#125;,\n\n\n\nrfsm.transition &#123; src=&amp;#39;initial&amp;#39;, tgt=&amp;#39;login_state&amp;#39; &#125;,\n--rfsm.transition &#123; src=&amp;#39;hello&amp;#39;, tgt=&amp;#39;world&amp;#39;, events=&#123; &amp;#39;e_done&amp;#39; &#125; &#125;,\n--rfsm.transition &#123; src=&amp;#39;world&amp;#39;, tgt=&amp;#39;hello&amp;#39;, events=&#123; &amp;#39;e_restart&amp;#39; &#125; &#125;,\n</code></pre>\n<p>}</p>\n<p>– 默认构造函数<br />\nfunction GameState_Manager:ctor()</p>\n<p>end</p>\n<p>– 进入登录状态<br />\nfunction GameState_Manager:enter_default_state()<br />\nfsm = rfsm.init(game_state_fsm)<br />\nrfsm.run(fsm)<br />\nend</p>\n<p>return GameState_Manager<br />\n</code></pre><font color=\"#002060\" size=\"5\" face=\"Calibri\"><strong>Reference</strong></font></p>\n<p>pmsl. (2018). luaFSM. Retrieved from: <a href=\"https://github.com/pmsl/luaFSM\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/pmsl/luaFSM</a></p>\n<p>kmarkus. (2017). rFSM. Retrieved from: <a href=\"https://github.com/kmarkus/rFSM\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/kmarkus/rFSM</a></p>\n<p>preston. (2019). MobileLegend Retrieved from: <a href=\"https://github.com/Preston-Chen/MobileLegend\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/Preston-Chen/MobileLegend</a></p>","text":"Finite State Machine Description 在讲这个设计模式之前, 我先举一个例子, 假如我们现在开发一款游戏, 我们的任务是实现一个角色, 我们需要根据玩家的输入来控制主角的行为。 那当按下B键时，他应该跳跃但这时有bug，在哪？我们没有阻止主角 “在空中...","link":"","photos":[],"count_time":{"symbolsCount":"6k","symbolsTime":"5 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Example-1\"><span class=\"toc-text\">Example 1</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Example-2\"><span class=\"toc-text\">Example 2</span></a></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Lua","uid":"15b0cdc6d03f6c3f6bf8d3a7ff197317","slug":"zl/2016-01-01-335_Lua","date":"2024-04-03T03:47:35.612Z","updated":"2024-04-03T03:47:35.612Z","comments":true,"path":"api/articles/zl/2016-01-01-335_Lua.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":" Lua函数定义格式： optional_function_scope function function_name( argument1, argument2, argument3..., argumentn) function_body return result_param...","link":"","photos":[],"count_time":{"symbolsCount":"1.2k","symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Lua源码阅读：表操作的指令","uid":"49f00c825acf95092ff9c35fb1172205","slug":"zl/2016-01-01-333_Lua源码阅读：表操作的指令","date":"2024-04-03T03:47:35.610Z","updated":"2024-04-03T03:47:35.612Z","comments":true,"path":"api/articles/zl/2016-01-01-333_Lua源码阅读：表操作的指令.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"表操作的相关指令。 创建表：创建一个空表，代码： 1local p = {} 对应的OPCODE为OP_NEWTABLE，用于创建一个表，将结果存入寄存器。 1OP_NEWTABLE, simpleexp最终调用Constructor 函数，这个函数专门负责构造表。 解析表的信息...","link":"","photos":[],"count_time":{"symbolsCount":"9.9k","symbolsTime":"9 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}