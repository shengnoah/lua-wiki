{"title":"lua中面向对象","uid":"16f9ae6dcf0026a7385795cb427ed129","slug":"zl/2016-01-01-27_lua中面向对象","date":"2024-04-03T03:47:33.138Z","updated":"2024-04-03T03:47:33.138Z","comments":true,"path":"api/articles/zl/2016-01-01-27_lua中面向对象.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<p></p>\n<h2 id=\"Account-lua\"><a href=\"#Account-lua\" class=\"headerlink\" title=\"Account.lua\"></a>Account.lua</h2><figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/><span class=\"line\">9</span><br/><span class=\"line\">10</span><br/><span class=\"line\">11</span><br/><span class=\"line\">12</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">module(<span class=\"string\">&#34;Account&#34;</span>, <span class=\"built_in\">package</span>.<span class=\"built_in\">seeall</span>)</span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(o)</span></span></span><br/><span class=\"line\">    o = o <span class=\"keyword\">or</span> {}</span><br/><span class=\"line\">    <span class=\"built_in\">setmetatable</span>(o, self)</span><br/><span class=\"line\">    self.<span class=\"built_in\">__index</span> = self</span><br/><span class=\"line\">    <span class=\"keyword\">return</span> o</span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Account:deposit</span><span class=\"params\">()</span></span></span><br/><span class=\"line\">\t<span class=\"built_in\">print</span>(<span class=\"string\">&#34;account deposit&#34;</span>)</span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/></pre></td></tr></tbody></table></figure>\n<p>这个机制的意思就是在创建一个新table的时候，把元类设为<br/>Account，在Account查找没有的方法<br/></p><figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">a = Account:new{balance = <span class=\"number\">0</span>}</span><br/><span class=\"line\">a:deposit(<span class=\"number\">100</span>) </span><br/></pre></td></tr></tbody></table></figure><p></p>\n<p>实际上我们编写类的时候习惯把每个类划分为文件，如何用module结合上面的做法呢？<br/>这里写另外继承account的specialaccount类</p>\n<h2 id=\"SpecialAccount-lua\"><a href=\"#SpecialAccount-lua\" class=\"headerlink\" title=\"SpecialAccount.lua\"></a>SpecialAccount.lua</h2><figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/><span class=\"line\">9</span><br/><span class=\"line\">10</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">module(<span class=\"string\">&#34;SpecialAccount&#34;</span>, <span class=\"built_in\">package</span>.<span class=\"built_in\">seeall</span>)</span><br/><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">&#34;Account&#34;</span>)</span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"comment\">-- 继承自Account</span></span><br/><span class=\"line\"><span class=\"built_in\">_G</span>.SpecialAccount = Account:new()</span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"comment\">--定义基类没有的方法</span></span><br/><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">SpecialAccount:getLimit</span><span class=\"params\">()</span></span></span><br/><span class=\"line\">\t<span class=\"built_in\">print</span>(<span class=\"string\">&#34;SpecialAccount getLimit&#34;</span>)</span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/></pre></td></tr></tbody></table></figure>\n<p>注意上面的第5行代码，为什么不是书中的SpecialAccount = Account:new()？<br/>因为我们用module的时候已经默认引入了SpecialAccount，如果用这种做法，那么相当于增加了另外的变量，那么下面的代码就会报错</p>\n<blockquote>\n<p>attempt to call method ‘new’ (a nil value)</p>\n</blockquote>\n<h2 id=\"test-lua\"><a href=\"#test-lua\" class=\"headerlink\" title=\"test.lua\"></a>test.lua</h2><figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/><span class=\"line\">9</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">require</span> <span class=\"string\">&#34;Account&#34;</span></span><br/><span class=\"line\"><span class=\"built_in\">require</span> <span class=\"string\">&#34;SpecialAccount&#34;</span></span><br/><span class=\"line\"></span><br/><span class=\"line\">a = Account:new()</span><br/><span class=\"line\">a.deposit()</span><br/><span class=\"line\"></span><br/><span class=\"line\">s = SpecialAccount:new()</span><br/><span class=\"line\">s.deposit()</span><br/><span class=\"line\">s.getLimit()</span><br/></pre></td></tr></tbody></table></figure>\n<p>原因在于module(“SpecialAccount”, package.seeall)相当于下面的代码<br/></p><figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">local</span> modname = <span class=\"string\">&#34;SpecialAccount&#34;</span></span><br/><span class=\"line\"><span class=\"keyword\">local</span> M = {}</span><br/><span class=\"line\"><span class=\"built_in\">_G</span>[modname] = M</span><br/><span class=\"line\"><span class=\"built_in\">package</span>.<span class=\"built_in\">loaded</span>[modname] = M</span><br/><span class=\"line\"><span class=\"built_in\">setfenv</span>(<span class=\"number\">1</span>, M)</span><br/></pre></td></tr></tbody></table></figure><p></p>\n<p>当SpecialAccount = Account:new()的时候，其实相当于<br/></p><figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">_G</span>[<span class=\"string\">&#34;SpecialAccount&#34;</span>].SpecialAccount = Account:new()</span><br/></pre></td></tr></tbody></table></figure><p></p>\n<p>这样在require “SpecialAccount”自然就找不到内嵌的new<br/>按照上面的写法就可以自然玩起面向对象了，附上代码<br/><a href=\"https://github.com/zzqboy/misc/tree/master/lua_oo\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/zzqboy/misc/tree/master/lua_oo</a></p>","text":" Account.lua123456789101112module(&#34;Account&#34;, package.seeall)function (o) o = o or {} setmetatable(o, self) self.__index = self retur...","link":"","photos":[],"count_time":{"symbolsCount":"1.3k","symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Account-lua\"><span class=\"toc-text\">Account.lua</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#SpecialAccount-lua\"><span class=\"toc-text\">SpecialAccount.lua</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#test-lua\"><span class=\"toc-text\">test.lua</span></a></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Redis_Lua_Script","uid":"bd333dafb8d8bcd98ff7f478cda8a744","slug":"zl/2016-01-01-282_Redis_Lua_Script","date":"2024-04-03T03:47:33.139Z","updated":"2024-04-03T03:47:33.140Z","comments":true,"path":"api/articles/zl/2016-01-01-282_Redis_Lua_Script.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":" NoSql现在被大量应用在大数据操作，其中原因以IO速度较以往关联式数据库快且耗费资源较低吸引我，而Redis性能更是数一数二。 Redis简单来说就是一个KeyValue架构的NoSql，而Value的类型可以是String、List、Hash…….，不过不是这篇要说的重点。...","link":"","photos":[],"count_time":{"symbolsCount":404,"symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"nginx+lua","uid":"a773c3a9f69d581e601604c5af796ac7","slug":"zl/2016-01-01-280_nginx+lua","date":"2024-04-03T03:47:33.138Z","updated":"2024-04-03T03:47:33.139Z","comments":true,"path":"api/articles/zl/2016-01-01-280_nginx+lua.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":" &lt;h3 id=&quot;1-安装lua编译器LuaJIT&quot;&gt;&lt;a href=&quot;https://Seven-zhang.github.io/#1-%E5%AE%89%E8%A3%85lua%E7%BC%96%E8%AF%91%E5%99%A...","link":"","photos":[],"count_time":{"symbolsCount":"4.6k","symbolsTime":"4 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}