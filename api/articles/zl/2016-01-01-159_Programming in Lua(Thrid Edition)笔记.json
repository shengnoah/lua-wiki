{"title":"Programming in Lua(Thrid Edition)笔记","uid":"a502732b8dc58224e972b6c53538b8c4","slug":"zl/2016-01-01-159_Programming in Lua(Thrid Edition)笔记","date":"2024-04-03T03:47:33.051Z","updated":"2024-04-03T03:47:33.051Z","comments":true,"path":"api/articles/zl/2016-01-01-159_Programming in Lua(Thrid Edition)笔记.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<h3 id=\"16-Object-oriented-Programming\"><a href=\"#16-Object-oriented-Programming\" class=\"headerlink\" title=\"16 Object-oriented Programming\"></a>16 Object-oriented Programming</h3>\n<ul>\n<li>对象和方法<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/><span class=\"line\">9</span><br/><span class=\"line\">10</span><br/><span class=\"line\">11</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">Account = {</span><br/><span class=\"line\">\tbalance = <span class=\"number\">0</span>,</span><br/><span class=\"line\">\twithdraw = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(self, v)</span></span></span><br/><span class=\"line\">\t\tself.balance = self.balance - v</span><br/><span class=\"line\">\t<span class=\"keyword\">end</span></span><br/><span class=\"line\">}</span><br/><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(v)</span></span></span><br/><span class=\"line\">\tself.balance = self.balance + v</span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/><span class=\"line\">Account.deposit(Account, <span class=\"number\">200.00</span>)</span><br/><span class=\"line\">Account:withdraw(<span class=\"number\">100.00</span>)</span><br/></pre></td></tr></tbody></table></figure>\n</li>\n</ul>\n<p>在用冒号<code>:</code>而不是<code>.</code>创建或使用一个table的函数时，会自动生成或调用一个<code>self</code>指代table自身</p>\n<ul>\n<li>类，用<code>__index</code>来类的实例化<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/><span class=\"line\">9</span><br/><span class=\"line\">10</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Account:new</span><span class=\"params\">(o)</span></span></span><br/><span class=\"line\">\to = o <span class=\"keyword\">or</span> {} </span><br/><span class=\"line\">\t<span class=\"built_in\">setmetatable</span>(o, self)</span><br/><span class=\"line\">\tself.<span class=\"built_in\">__index</span> = self</span><br/><span class=\"line\">\t<span class=\"keyword\">return</span> o</span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/><span class=\"line\">a = Account:new{balance = <span class=\"number\">0</span>}</span><br/><span class=\"line\"><span class=\"built_in\">print</span>(a.balance) <span class=\"comment\">--&gt; 0</span></span><br/><span class=\"line\">a:deposit(<span class=\"number\">100.00</span>)</span><br/><span class=\"line\"><span class=\"built_in\">print</span>(a.balance) <span class=\"comment\">--&gt; 100</span></span><br/></pre></td></tr></tbody></table></figure>\n</li>\n</ul>\n<p>初次调用<code>a.balance = a.balance + v</code>，右侧的<code>balance</code>是类的默认值，右侧是对象的新域，之后再调用，右侧的<code>balance</code>为对象的域</p>\n<ul>\n<li><p>继承，子类可以在父类的基础上修改方法，修改后的方法是在子类自身的域</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/><span class=\"line\">9</span><br/><span class=\"line\">10</span><br/><span class=\"line\">11</span><br/><span class=\"line\">12</span><br/><span class=\"line\">13</span><br/><span class=\"line\">14</span><br/><span class=\"line\">15</span><br/><span class=\"line\">16</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">SpecialAccount = Account:new()</span><br/><span class=\"line\">s = SpecialAccount:new{limit = <span class=\"number\">1000.00</span>}</span><br/><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">SpecialAccount:withdraw</span><span class=\"params\">(v)</span></span></span><br/><span class=\"line\">\t<span class=\"keyword\">if</span> v - self.balance &gt;= self:getLimit() <span class=\"keyword\">then</span></span><br/><span class=\"line\">\t\t<span class=\"built_in\">error</span><span class=\"string\">&#34;insufficient funds&#34;</span></span><br/><span class=\"line\">\t<span class=\"keyword\">end</span></span><br/><span class=\"line\">\tself.balance = self.balance - v</span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">SpecialAccount:getLimit</span><span class=\"params\">()</span></span></span><br/><span class=\"line\">\t<span class=\"keyword\">return</span> self.limit <span class=\"keyword\">or</span> <span class=\"number\">0</span></span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/><span class=\"line\"><span class=\"built_in\">print</span>(s.balance) <span class=\"comment\">--&gt; 0</span></span><br/><span class=\"line\">s:deposit(<span class=\"number\">100.00</span>)</span><br/><span class=\"line\"><span class=\"built_in\">print</span>(s.balance) <span class=\"comment\">--&gt; 100</span></span><br/><span class=\"line\">s:withdraw(<span class=\"number\">200.00</span>)</span><br/><span class=\"line\"><span class=\"built_in\">print</span>(s.balance) <span class=\"comment\">--&gt; 200</span></span><br/></pre></td></tr></tbody></table></figure>\n</li>\n<li><p>多重继承</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/><span class=\"line\">9</span><br/><span class=\"line\">10</span><br/><span class=\"line\">11</span><br/><span class=\"line\">12</span><br/><span class=\"line\">13</span><br/><span class=\"line\">14</span><br/><span class=\"line\">15</span><br/><span class=\"line\">16</span><br/><span class=\"line\">17</span><br/><span class=\"line\">18</span><br/><span class=\"line\">19</span><br/><span class=\"line\">20</span><br/><span class=\"line\">21</span><br/><span class=\"line\">22</span><br/><span class=\"line\">23</span><br/><span class=\"line\">24</span><br/><span class=\"line\">25</span><br/><span class=\"line\">26</span><br/><span class=\"line\">27</span><br/><span class=\"line\">28</span><br/><span class=\"line\">29</span><br/><span class=\"line\">30</span><br/><span class=\"line\">31</span><br/><span class=\"line\">32</span><br/><span class=\"line\">33</span><br/><span class=\"line\">34</span><br/><span class=\"line\">35</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- look up for &#39;k&#39; in list of tables &#39;plist&#39;</span></span><br/><span class=\"line\"><span class=\"keyword\">local</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">search</span><span class=\"params\">(k, plist)</span></span></span><br/><span class=\"line\">\t<span class=\"keyword\">for</span> i = <span class=\"number\">1</span>, #plist <span class=\"keyword\">do</span></span><br/><span class=\"line\">\t\t<span class=\"keyword\">local</span> v = plist[i][k] <span class=\"comment\">-- try &#39;i&#39;-th superclass</span></span><br/><span class=\"line\">\t\t<span class=\"keyword\">if</span> v <span class=\"keyword\">then</span> <span class=\"keyword\">return</span> v <span class=\"keyword\">end</span></span><br/><span class=\"line\">\t<span class=\"keyword\">end</span></span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createClass</span><span class=\"params\">(...)</span></span></span><br/><span class=\"line\">\t<span class=\"keyword\">local</span> c = {} <span class=\"comment\">-- new class</span></span><br/><span class=\"line\">\t<span class=\"keyword\">local</span> parents = {...}</span><br/><span class=\"line\">\t<span class=\"comment\">-- class will search for each method in the list of its parents</span></span><br/><span class=\"line\">\t<span class=\"built_in\">setmetatable</span>(c, {<span class=\"built_in\">__index</span> = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(t,k)</span></span></span><br/><span class=\"line\">\t\t<span class=\"keyword\">return</span> search(k, parents)</span><br/><span class=\"line\">\t<span class=\"keyword\">end</span>})</span><br/><span class=\"line\">\t<span class=\"comment\">-- prepare &#39;c&#39; to be the metatable of its instances</span></span><br/><span class=\"line\">\tc.<span class=\"built_in\">__index</span> = c</span><br/><span class=\"line\">\t<span class=\"comment\">-- define a new constructor for this new class</span></span><br/><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">c:new</span><span class=\"params\">(o)</span></span></span><br/><span class=\"line\">\t\to = o <span class=\"keyword\">or</span> {}</span><br/><span class=\"line\">\t\t<span class=\"built_in\">setmetatable</span>(o, c)</span><br/><span class=\"line\">\t\t<span class=\"keyword\">return</span> o</span><br/><span class=\"line\">\t<span class=\"keyword\">end</span></span><br/><span class=\"line\">\t<span class=\"keyword\">return</span> c <span class=\"comment\">-- return new class</span></span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/><span class=\"line\">Named = {}</span><br/><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Named:getname</span><span class=\"params\">()</span></span></span><br/><span class=\"line\">\t<span class=\"keyword\">return</span> self.name</span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Named:setname</span><span class=\"params\">(n)</span></span></span><br/><span class=\"line\">\tself.name = n</span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/><span class=\"line\">NamedAccount = createClass(Account, Named)</span><br/><span class=\"line\">account = NamedAccount:new{name = <span class=\"string\">&#34;Paul&#34;</span>}</span><br/><span class=\"line\"><span class=\"built_in\">print</span>(account:getname()) <span class=\"comment\">--&gt; Paul</span></span><br/><span class=\"line\"><span class=\"built_in\">print</span>(account)</span><br/></pre></td></tr></tbody></table></figure>\n</li>\n</ul>\n<p>用<code>createClass()</code>创造一个继承自两个父类的子类。为了减少<code>search()</code>在父类中搜索的复杂度，可以采用记忆化搜索，将搜索的结果保存在原table中<br/></p><figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">setmetatable</span>(c, {<span class=\"built_in\">__index</span> = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(t, k)</span></span></span><br/><span class=\"line\">\t<span class=\"keyword\">local</span> v = search(k, parents)</span><br/><span class=\"line\">\tt[k] = v <span class=\"comment\">-- save for next access</span></span><br/><span class=\"line\">\t<span class=\"keyword\">return</span> v</span><br/><span class=\"line\"><span class=\"keyword\">end</span>})</span><br/></pre></td></tr></tbody></table></figure><p></p>\n<p>这样做的缺点：It is difficult to change method definitions after the system is running, because these changes do not propagate down the hierarhy chain.（说实话，我没看懂这句话……）</p>\n<ul>\n<li><p>privacy，用局部变量和闭包构造私有成员，使得私有成员从外部无法直接获得，只能在内部获得</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/><span class=\"line\">9</span><br/><span class=\"line\">10</span><br/><span class=\"line\">11</span><br/><span class=\"line\">12</span><br/><span class=\"line\">13</span><br/><span class=\"line\">14</span><br/><span class=\"line\">15</span><br/><span class=\"line\">16</span><br/><span class=\"line\">17</span><br/><span class=\"line\">18</span><br/><span class=\"line\">19</span><br/><span class=\"line\">20</span><br/><span class=\"line\">21</span><br/><span class=\"line\">22</span><br/><span class=\"line\">23</span><br/><span class=\"line\">24</span><br/><span class=\"line\">25</span><br/><span class=\"line\">26</span><br/><span class=\"line\">27</span><br/><span class=\"line\">28</span><br/><span class=\"line\">29</span><br/><span class=\"line\">30</span><br/><span class=\"line\">31</span><br/><span class=\"line\">32</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">newAccount</span><span class=\"params\">(initialBalance)</span></span></span><br/><span class=\"line\">\t<span class=\"keyword\">local</span> self = {</span><br/><span class=\"line\">\t\tbalance = initialBalance,</span><br/><span class=\"line\">\t\tLIM = <span class=\"number\">10000.00</span>,</span><br/><span class=\"line\">\t}</span><br/><span class=\"line\">\t<span class=\"keyword\">local</span> extra = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span></span></span><br/><span class=\"line\">\t\t<span class=\"keyword\">if</span> self.balance &gt; self.LIM <span class=\"keyword\">then</span></span><br/><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> self.balance * <span class=\"number\">0.10</span></span><br/><span class=\"line\">\t\t<span class=\"keyword\">else</span></span><br/><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br/><span class=\"line\">\t\t<span class=\"keyword\">end</span></span><br/><span class=\"line\">\t<span class=\"keyword\">end</span></span><br/><span class=\"line\">\t<span class=\"keyword\">local</span> withdraw = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(v)</span></span></span><br/><span class=\"line\">\t\tself.balance = self.balance - v</span><br/><span class=\"line\">\t<span class=\"keyword\">end</span></span><br/><span class=\"line\">\t<span class=\"keyword\">local</span> deposit = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(v)</span></span></span><br/><span class=\"line\">\t\tself.balance = self.balance + v</span><br/><span class=\"line\">\t<span class=\"keyword\">end</span></span><br/><span class=\"line\">\t<span class=\"keyword\">local</span> getBalance = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span></span></span><br/><span class=\"line\">\t\t<span class=\"keyword\">return</span> self.balance + extra()</span><br/><span class=\"line\">\t<span class=\"keyword\">end</span></span><br/><span class=\"line\">\t<span class=\"keyword\">return</span> {</span><br/><span class=\"line\">\t\twithdraw = withdraw,</span><br/><span class=\"line\">\t\tdeposit = deposit,</span><br/><span class=\"line\">\t\tgetBalance = getBalance</span><br/><span class=\"line\">\t}</span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/><span class=\"line\">acc1 = newAccount(<span class=\"number\">100.00</span>)</span><br/><span class=\"line\">acc1.withdraw(<span class=\"number\">110.00</span>)</span><br/><span class=\"line\"><span class=\"built_in\">print</span>(acc1.getBalance()) <span class=\"comment\">--&gt; -10</span></span><br/><span class=\"line\">acc1.deposit(<span class=\"number\">50.00</span>)</span><br/><span class=\"line\"><span class=\"built_in\">print</span>(acc1.getBalance()) <span class=\"comment\">--&gt; 40</span></span><br/></pre></td></tr></tbody></table></figure>\n</li>\n<li><p>single-method object，用闭包创建对象，无需创建一个接口table，根据参数调用不同的方法，没有继承，但是有私有性</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/><span class=\"line\">9</span><br/><span class=\"line\">10</span><br/><span class=\"line\">11</span><br/><span class=\"line\">12</span><br/><span class=\"line\">13</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">newObject</span><span class=\"params\">(value)</span></span></span><br/><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(action, v)</span></span></span><br/><span class=\"line\">\t\t<span class=\"keyword\">if</span> action == <span class=\"string\">&#34;get&#34;</span> <span class=\"keyword\">then</span> <span class=\"keyword\">return</span> value</span><br/><span class=\"line\">\t\t<span class=\"keyword\">elseif</span> action == <span class=\"string\">&#34;set&#34;</span> <span class=\"keyword\">then</span> value = v</span><br/><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"built_in\">error</span>(<span class=\"string\">&#34;invalid action&#34;</span>)</span><br/><span class=\"line\">\t\t<span class=\"keyword\">end</span></span><br/><span class=\"line\">\t<span class=\"keyword\">end</span></span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/><span class=\"line\"></span><br/><span class=\"line\">d = newObject(<span class=\"number\">0</span>)</span><br/><span class=\"line\"><span class=\"built_in\">print</span>(d(<span class=\"string\">&#34;get&#34;</span>)) <span class=\"comment\">--&gt; 0</span></span><br/><span class=\"line\">d(<span class=\"string\">&#34;set&#34;</span>, <span class=\"number\">10</span>)</span><br/><span class=\"line\"><span class=\"built_in\">print</span>(d(<span class=\"string\">&#34;get&#34;</span>)) <span class=\"comment\">--&gt; 10</span></span><br/></pre></td></tr></tbody></table></figure>\n</li>\n</ul>","text":"16 Object-oriented Programming 对象和方法1234567891011Account = { balance = 0, withdraw = function (self, v) self.balance = self.balance - v end}...","link":"","photos":[],"count_time":{"symbolsCount":"3.5k","symbolsTime":"3 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#16-Object-oriented-Programming\"><span class=\"toc-text\">16 Object-oriented Programming</span></a></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Programming in Lua(Thrid Edition)笔记","uid":"a502732b8dc58224e972b6c53538b8c4","slug":"zl/2016-01-01-161_Programming in Lua(Thrid Edition)笔记","date":"2024-04-03T03:47:33.052Z","updated":"2024-04-03T03:47:33.052Z","comments":true,"path":"api/articles/zl/2016-01-01-161_Programming in Lua(Thrid Edition)笔记.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"3 Expressions a % b == a - math.floor(a / b) * b，可以用于浮点数，x % 1为x的小数部分，x - x % 1为x的整数部分，x-x%0.01可以保留x两位小数，也可以用于角度对360取模和弧度对2PI取模angle%(2*math...","link":"","photos":[],"count_time":{"symbolsCount":"1.3k","symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"lua 迭代器和泛型for","uid":"3b0fab6604d54755a5ebd02f17ce752d","slug":"zl/2016-01-01-15_lua 迭代器和泛型for","date":"2024-04-03T03:47:33.051Z","updated":"2024-04-03T03:47:33.052Z","comments":true,"path":"api/articles/zl/2016-01-01-15_lua 迭代器和泛型for.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":" &lt;h2 id=&quot;迭代器和闭包&quot;&gt;迭代器和闭包&lt;/h2&gt; 迭代器可以遍历集合的每一个元素，在lua中常常使用函数来描述迭代器，每次调用该函数就返回集合的下一个元素。 迭代器需要保留上一次成功调用的状态和下一次成功调用的状态，也就是它知道...","link":"","photos":[],"count_time":{"symbolsCount":"3.7k","symbolsTime":"3 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}