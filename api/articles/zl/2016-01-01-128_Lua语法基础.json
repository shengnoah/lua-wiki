{"title":"Lua语法基础","uid":"7f1b4558290db46f8036450f70cb1288","slug":"zl/2016-01-01-128_Lua语法基础","date":"2024-04-03T03:47:33.032Z","updated":"2024-04-03T03:47:33.032Z","comments":true,"path":"api/articles/zl/2016-01-01-128_Lua语法基础.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<ul>\n<li>函数是第一类值（和其他变量相同），意味着函数可以存储在变量中，可以作为函数的参数，也可以作为函数的返回值</li>\n<li>逻辑运算符and和or的运算结果不是true和false，而是和它的两个操作数相关</li>\n</ul>\n<div class=\"highlight\"><pre><code class=\"language-lua\" data-lang=\"lua\">    <span class=\"n\">a</span> <span class=\"ow\">and</span> <span class=\"n\">b</span>     <span class=\"c1\">-- 如果a为false,则返回a,否则返回b</span>\n    <span class=\"n\">a</span> <span class=\"ow\">or</span> <span class=\"n\">b</span>      <span class=\"c1\">-- 如果a为true,则返回a,否则返回b</span>\n</code></pre></div>\n<ul>\n<li><strong>三元运算符</strong> <code>a and b or c</code></li>\n<li><strong>连接运算符</strong> .. 数字使用连接运算符会转换为字符串</li>\n<li><p><strong>优先级</strong></p>\n<ol>\n<li>^</li>\n<li>not - (unary)</li>\n<li>* /</li>\n<li>+ -</li>\n<li>..</li>\n<li>&lt; &gt; &lt;= &gt;= ~= == </li>\n<li>and</li>\n<li>or</li>\n</ol></li>\n<li><p><strong>表</strong></p>\n<ul>\n<li>可以使用{}直接构造</li>\n<li>用[expression]显示的表示将被初始化的索引 </li>\n</ul></li>\n<li><p><strong>控制结构语句</strong></p>\n<ul>\n<li>if语句</li>\n<li>while语句 </li>\n<li>repeat until语句</li>\n<li>for语句：ipairs迭代数组元素。不能返回nil，只能返回数字0，如果遇到nil则退出。从1开始，它只能遍历到表中出现的第一个；pairs迭代table元素，遍历所有的键值对。并且除了迭代器本身和遍历表本身还可以返回nil</li>\n</ul></li>\n</ul>\n<div class=\"highlight\"><pre><code class=\"language-lua\" data-lang=\"lua\"><span class=\"k\">if</span> <span class=\"n\">condtion1</span> <span class=\"k\">then</span>\n<p><span class=\"k\">elseif</span> <span class=\"n\">condtion2</span> <span class=\"k\">then</span></p>\n<p><span class=\"k\">end</span></p>\n<p><span class=\"k\">while</span> <span class=\"n\">condition3</span> <span class=\"k\">do</span></p>\n<p><span class=\"k\">end</span></p>\n<p><span class=\"k\">repeat</span></p>\n<p><span class=\"k\">until</span> <span class=\"n\">condition4</span></p>\n<p><span class=\"k\">for</span> <span class=\"n\">var</span> <span class=\"o\">=</span> <span class=\"n\">exp1</span><span class=\"p\">,</span> <span class=\"n\">exp2</span><span class=\"p\">,</span> <span class=\"n\">exp3</span> <span class=\"k\">do</span></p>\n<p><span class=\"k\">end</span><br />\n</code></pre></div></p>\n<ul>\n<li><strong>函数</strong>\n<ul>\n<li>多返回值：\n<ul>\n<li>当调用作为表达式最后一个参数或者仅有一个参数时，根据变量个数函数尽可能多地返回多个值，不足补nil，超出舍去。</li>\n<li>其他情况下，函数调用仅返回第一个值（如果没有返回值为nil）</li>\n<li>函数调用作为函数参数被调用和在表构造函数中初始化时，和多值赋值相同。</li>\n<li>可以使用圆括号强制使用返回一个值</li>\n</ul></li>\n<li>可变参数：使用三点(...)表示函数有可变的参数。可变的参数放在arg的表中，arg中还有一个域n表示参数的个数。</li>\n<li>高级函数：以其他函数作为参数的函数。</li>\n</ul></li>\n<li><strong>闭包</strong>\n<ul>\n<li>闭包是一个函数以及它的upvalues。高级函数内的匿名函数使用高级函数的局部变量。</li>\n<li>尾调用：当函数的最后一个动作时调用另外一个函数。</li>\n<li>一个典型的闭包的结构包含两个函数：一个是闭包自己；另一个是工厂（创建闭包的函数）。</li>\n</ul></li>\n<li><strong>迭代器</strong>\n<ul>\n<li>范型for的执行过程：1.初始化，计算in后面表达式的值，表达式应该返回范性for需要的三个值：迭代函数、状态常量、控制变量；2.将状态常量和控制变量作为参数调用迭代函数；3.将迭代函数返回的值赋给变量列表；4.如果返回的第一个值为nil循环结束，否则执行循环体；5.回到第二步再次调用迭代函数。</li>\n</ul></li>\n<li><strong>String函数库</strong>\n<ul>\n<li>string.len(s): 返回字符串s的长度</li>\n<li>string.rep(s,n): 返回重复n次字符串s的串</li>\n<li>string.lower(s), string.upper(s): 大小写转换</li>\n<li>string.sub(s,i,j): 截取字符串s的从第i 个字符到第j 个字符之间的串。string.sub(s, 1, j)返回字符串s的长度为j的前缀；string.sub(s, j, -1)返回从第j个字符开始的后缀。</li>\n<li>string.char(...): 获取0个或多个整数，将每一个数字转换成字符，然后返回一个所有这些字符连接起来的字符串</li>\n<li>string.byte(s, i): 将字符串s的第i个字符的转换成整数</li>\n<li>string.format(): 字符串格式化，和C的printf类似。</li>\n<li>stirng.find(s, word): 在目标串内搜索匹配指定的模式的串。函数如果找到匹配的串返回他的位置，否则返回nil。第三个参数是可选的：标示目标串中搜索的起始位置，支持模式匹配。</li>\n<li>string.gsub(s, 匹配模式, 替换字符(函数))</li>\n<li>string.gfind(s, 匹配模式)</li>\n</ul></li>\n<li><strong>Lua面向对象编程</strong>\n<ul>\n<li>元表(metatable): 多个table可以定义同一个元表，表示共性操作。也可以定义自己为元表，表示私有操作。</li>\n<li>metamethod：_<em>add, _</em>mul, _<em>sub, _</em>div, _<em>unm(取负), _</em>pow, _<em>concat, _</em>eq, _<em>lt, _</em>le</li>\n<li>Lua选择metamethod的原则：如果第一个参数存在带有<strong>add域的metatable，Lua使用它作为metamethod，和第二个参数无关；否则第二个参数存在带有</strong>add域的metatable，Lua使用它作为metamethod 否则报错。</li>\n<li>原型(prototype): __index通过原型访问表中缺少的域</li>\n<li>包(package): 公有函数和私有函数的访问方式不一致(公有函数要加上前缀包名)</li>\n<li>使用全局表：setfenv(1, p)</li>\n<li>私有性：使用闭包来实现</li>\n</ul></li>\n<li>Lua中table使用=号直接赋值是赋值引用（浅拷贝），如要深拷贝需要定义深拷贝函数。</li>\n<li><strong>Lua 时间库</strong></li>\n</ul>\n<div class=\"highlight\"><pre><code class=\"language-lua\" data-lang=\"lua\"><span class=\"nb\">os.time</span><span class=\"p\">()</span>                <span class=\"c1\">-- 返回当前系统的日历时间</span>\n<span class=\"nb\">os.date</span><span class=\"p\">()</span>                <span class=\"c1\">-- 返回本地化的时间字符串，这里是&#34;11/28/08 17:23:37&#34;</span>\n<span class=\"nb\">os.date</span><span class=\"p\">(</span><span class=\"s2\">&#34;%x&#34;</span><span class=\"p\">,</span> <span class=\"nb\">os.time</span><span class=\"p\">())</span> <span class=\"c1\">-- 返回自定义格式化时间字符串（完整的格式化参数），这里是&#34;11/28/08&#34;</span>\n<span class=\"nb\">os.clock</span><span class=\"p\">()</span>               <span class=\"c1\">-- 返回执行该程序CPU花去的时钟秒数，这里是1156.726</span>\n<span class=\"cm\">--[[%a abbreviated weekday name (e.g., Wed)\n%A full weekday name (e.g., Wednesday)\n%b abbreviated month name (e.g., Sep)\n%B full month name (e.g., September)\n%c date and time (e.g., 09/16/98 23:48:10) \n%d day of the month (16) [01-31]\n%H hour, using a 24-hour clock (23) [00-23]\n%I hour, using a 12-hour clock (11) [01-12]\n%M minute (48) [00-59]\n%m month (09) [01-12]\n%p either &#34;am&#34; or &#34;pm&#34; (pm)\n%S second (10) [00-61]\n%w weekday (3) [0-6 = Sunday-Saturday]\n%x date (e.g., 09/16/98)\n%X time (e.g., 23:48:10)\n%Y full year (1998)\n%y two-digit year (98) [00-99]\n%% the character &#39;%&#39;]]</span>\n</code></pre></div>","text":" 函数是第一类值（和其他变量相同），意味着函数可以存储在变量中，可以作为函数的参数，也可以作为函数的返回值 逻辑运算符and和or的运算结果不是true和false，而是和它的两个操作数相关 a and b -- 如果a为false,则返回a,否则返回b a or b -- 如果...","link":"","photos":[],"count_time":{"symbolsCount":"2.9k","symbolsTime":"3 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Programming in Lua(Thrid Edition)笔记","uid":"a502732b8dc58224e972b6c53538b8c4","slug":"zl/2016-01-01-131_Programming in Lua(Thrid Edition)笔记","date":"2024-04-03T03:47:33.033Z","updated":"2024-04-03T03:47:33.034Z","comments":true,"path":"api/articles/zl/2016-01-01-131_Programming in Lua(Thrid Edition)笔记.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"9 Coroutines 协程和线程的相同点：1It is a line of execution, with its own stack, its own local variables, and its own instruction pointer; but it shar...","link":"","photos":[],"count_time":{"symbolsCount":"5.3k","symbolsTime":"5 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"lua table只读","uid":"17f6d66111f0c01620fec40a9ad0c055","slug":"zl/2016-01-01-12_lua table只读","date":"2024-04-03T03:47:33.032Z","updated":"2024-04-03T03:47:33.033Z","comments":true,"path":"api/articles/zl/2016-01-01-12_lua table只读.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":" &lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&...","link":"","photos":[],"count_time":{"symbolsCount":"9.2k","symbolsTime":"8 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}