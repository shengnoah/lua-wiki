{"title":"学习Lua语言进度","uid":"4e4ea658c98f008b39f71704cd0c83b8","slug":"zl/2016-01-01-236_学习Lua语言进度 ","date":"2024-04-03T03:47:33.107Z","updated":"2024-04-03T03:47:33.107Z","comments":true,"path":"api/articles/zl/2016-01-01-236_学习Lua语言进度 .json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<pre><code>            &lt;h3 id=&quot;时间2016年8月11日-天气晴sunny&quot;&gt;时间:2016年8月11日 天气:晴:sunny:&lt;/h3&gt;\n</code></pre>\n<h5 id=\"author冬之晓dizzy_face\">Author:冬之晓:dizzy_face:</h5>\n<h5 id=\"email-347916416qqcom\">Email: 347916416@qq.com</h5>\n<h5 id=\"myappearance-\">MyAppearance: <img src=\"https://github.com/Dongzhixiao/PictureCache/raw/master/MyPicture.JPG\" alt=\"MyAppearance\" title=\"我的头像\"></h5>\n<hr>\n<pre>\n    今天上午，陈博士过来找我，问我学习Lua语言学习的进度。说了惭愧，我最近一\n直在看C++那一块的源代码，而且发现代码里面的注释块做的不好，因此研究了一下文档\n的标准写法。并且在读代码的同时将里面的注释顺便改成标准格式，但是这样就耽误了Lu\na语言的学习进度。为了赶上下来的任务，我需要每天抽出一段时间来进行Lua语言的学习\n了。但是文档的内容还没有完全学完，因此这几天晚上继续文档学习，完成之后会研究一\n段Lua语言。\n</pre>\n<h4 id=\"小节指示命令\">小节指示命令</h4>\n<p><strong>小节指示命令都比较常用，要多多学习！</strong></p>\n<ul>\n  <li>@attention { attention text }</li>\n</ul>\n<p>开始一个可输入需要处理信息的段落，次段落将会缩排，段落的文本不会指定一个内部结构，所有视觉增强的命令可以放置到该段落中，多个相邻的<code class=\"highlighter-rouge\">@attention</code>命令将被组合到一个单独的段落中，当遇到一个空白行或者是其他的小节命令，那么<code class=\"highlighter-rouge\">@attention</code>将终止。</p>\n<ul>\n  <li>@author { list of authors }</li>\n</ul>\n<p>开始一个可输入一个或者多个作者名的段落，此段落将会缩排，段落的文本不会指定一个内部结构，所有视觉增强命令可以放置到该段落中，多个相邻的<code class=\"highlighter-rouge\">@author</code>命令将被组合到一个单独的段落中，每个作者描述都将开启一个新行，另外一个   <code class=\"highlighter-rouge\">@author</code>命令可能会有若干个作者，当遇到一个空白行或者是其他的小节命令，那么<code class=\"highlighter-rouge\">@author</code>将终止。例如：</p>\n<pre><code class=\"language-C++\">/*!  \n *  @brief     Pretty nice class. \n *  @details   This class is used to demonstrate a number of section commands. \n *  @author    John Doe \n *  @author    Jan Doe \n *  @version   4.1a *  date      1990-2011 \n *  @pre       First initialize the system.\n *  @bug       Not all memory is freed when deleting an object of this class. \n *  @warning   Improper use can crash your application\n *  @copyright GNU Public License. \n */\nclass SomeNiceClass &#123;&#125;;\n</code></pre>\n<ul>\n  <li>@authors { list of authors }</li>\n</ul>\n<p>同<code class=\"highlighter-rouge\">@author</code>等价</p>\n<ul>\n  <li>@brief { brief description }</li>\n</ul>\n<p>开始一个作为简明描述的段落，在文档页的起始部分可使用类和文档的简明描述的列表，可在细节描述的前端和成员声明处放置类成员和文档成员的简明描述。一个简明描述可能需要若干行(尽管建议它保持简明的风格)。当遇到一个空白行或者是其他的小节命令，那么简明描述将终止。如果出现多个<code class=\"highlighter-rouge\">@brief</code>命令，那么它们将被组合在一起。查看命令<code class=\"highlighter-rouge\">@authhor</code>的例子。等同于命令<code class=\"highlighter-rouge\">@short</code></p>\n<ul>\n  <li>@bug { bug description }</li>\n</ul>\n<p>开始一个可报告一个或多个bug的段落，此段落将会缩排，段落的文本不会指定一个内部结构，所有视觉增强命令可以放置到该段落中，多个相邻的<code class=\"highlighter-rouge\">@bug</code>命令将被组合到一个单独的段落中，每个bug都将开启一个新行，另外一个   <code class=\"highlighter-rouge\">@bug</code>命令可能会有若干个bug，当遇到一个空白行或者是其他的小节命令，那么<code class=\"highlighter-rouge\">@bug</code>将终止。查看命令<code class=\"highlighter-rouge\">@authhor</code>的例子。</p>\n<ul>\n  <li>@cond [(section-label)]</li>\n</ul>\n<p>开始一个带条件的小节，使用命令<code class=\"highlighter-rouge\">@endcond</code>来终止该小节，通常在其他的注释块中可查找到<code class=\"highlighter-rouge\">@endcond</code>。此对命令的目的是，(条件化)在处理中将一部分文档排除。</p>\n<p>小节将包含在命令<code class=\"highlighter-rouge\">@cond</code>和<code class=\"highlighter-rouge\">@endcond</code>之间，并将小节的标号加入到配置选项<code class=\"highlighter-rouge\">ENABLED_SECTIONS </code>中，如果标号被忽略，该小节也将在处理中被无条件忽略。</p>\n<p>在注释块中的条件小节，可使用一个<code class=\"highlighter-rouge\">@if...@endif</code>块。</p>\n<p>条件小节能被嵌套，在这种情况下，如果它和嵌套的小节都包含在其中，那么只有被嵌套的小节才会显示。例如：</p>\n<pre><code class=\"language-C++\">/** An interface */\nclass Intf\n&#123;\n  public:\n    /** A method */\n    virtual void func() = 0;\n\n    /// @cond TEST\n\n    /** A method used for testing */\n    virtual void test() = 0;\n\n    /// @endcond\n&#125;;\n\n/// @cond DEV\n/*\n *  The implementation of the interface\n */\nclass Implementation : public Intf\n&#123;\n  public:\n    void func();\n\n    /// @cond TEST\n    void test();\n    /// @endcond\n\n    /// @cond\n    /** This method is obsolete and does\n     *  not show up in the documentation.\n     */\n    void obsolete();\n    /// @endcond\n&#125;;\n\n/// @endcond\n</code></pre>\n<ul>\n  <li>@copyright { copyright description }</li>\n</ul>\n<p>开始描述一个实体的版权的段落，这个段落收到约束，这个段落的内容没有特殊的内部结构。查看命令<code class=\"highlighter-rouge\">@authhor</code>的例子。</p>\n<ul>\n  <li>@date { date description }</li>\n</ul>\n<p>开始一个可可输入一个或多个日期的段落，此段落将会缩排，段落的文本不会指定一个内部结构，所有视觉增强命令可以放置到该段落中，多个相邻的<code class=\"highlighter-rouge\">@date</code>命令将被组合到一个单独的段落中，每个date都将开启一个新行，另外一个   <code class=\"highlighter-rouge\">@date</code>命令可能会有若干个date，当遇到一个空白行或者是其他的小节命令，那么<code class=\"highlighter-rouge\">@date</code>将终止。查看命令<code class=\"highlighter-rouge\">@authhor</code>的例子。</p>\n<ul>\n  <li>@deprecated { description }</li>\n</ul>\n<p>开始一个指示文档块是否弃用的段落，可用于描述替代方法，预定生命周期等</p>\n<ul>\n  <li>@details { detailed description }</li>\n</ul>\n<p>如同<code class=\"highlighter-rouge\">@brief</code>开始一个简明描述，<code class=\"highlighter-rouge\">@details</code>将开始一个细节描述，你也可以开始一个新段落(加入空白行)，而无需加入命令<code class=\"highlighter-rouge\">@details</code>。</p>\n<ul>\n  <li>@else</li>\n</ul>\n<p>开始一个条件小节，如果前一个条件小节无效。前一个小节可使用命令<code class=\"highlighter-rouge\">@if,@ifnot,@elseif</code>开始。</p>\n<ul>\n  <li>@elseif (section-label)</li>\n</ul>\n<p>开始一个条件小节，如果前一个条件小节无效。当条件小节默认为无效时，你必须放置该命令的<code class=\"highlighter-rouge\">section-label</code>到配置标记<code class=\"highlighter-rouge\">ENABLED_SECTIONS</code>中使得命令<code class=\"highlighter-rouge\">@elseif</code>有效。条件块可以嵌套，如果所有嵌套的条件都有效，那么也只有做内层的嵌套小节才会被读取。</p>\n<ul>\n  <li>@endcond</li>\n</ul>\n<p>结束一个由<code class=\"highlighter-rouge\">@cond</code>开始的条件小节。</p>\n<ul>\n  <li>@endif</li>\n</ul>\n<p>结束一个由<code class=\"highlighter-rouge\">@if或@ifnot</code>开始的条件小节，每个<code class=\"highlighter-rouge\">@if或@ifnot</code>只能一一对应匹配之后的<code class=\"highlighter-rouge\">@endif</code>。</p>\n<ul>\n  <li>@exception <exception-object> { exception description }</exception-object></li>\n</ul>\n<p>为一个名字为<code class=\"highlighter-rouge\">&lt;exception-object&gt;</code>异常对象而开始一个描述，其次是此异常的描述。不会去检查是否存在这个异常对象。段落的文本不会指定一个内部结构，所有视觉增强的命令可以放置到该段落中，多个相邻的<code class=\"highlighter-rouge\">@exception</code>命令将被组合到一个单独的段落中，每个参数的描述都将开启一个新行，当遇到一个空白行或者是其他的小节命令，那么<code class=\"highlighter-rouge\">@exception</code>将终止。\n与<code class=\"highlighter-rouge\">@exception</code>一样。</p>\n<ul>\n  <li>@if (section-label)</li>\n</ul>\n<p>开始一个条件化的文档小节，并使用一个匹配的命令<code class=\"highlighter-rouge\">@endif</code>结束。当条件小节默认为无效时，你必须放置该命令的<code class=\"highlighter-rouge\">section-label</code>到配置标记<code class=\"highlighter-rouge\">ENABLED_SECTIONS</code>中使得命令<code class=\"highlighter-rouge\">@if</code>有效。条件块可以嵌套，如果所有嵌套的条件都有效，那么也只有做内层的嵌套小节才会被读取。例如：</p>\n<pre><code class=\"language-C++\">/*! Unconditionally shown documentation.\n   *  if Cond1\n   *    Only included if Cond1 is set.\n   *  endif\n   *  if Cond2\n   *    Only included if Cond2 is set.\n   *    if Cond3\n   *      Only included if Cond2 and Cond3 are set.\n   *    endif\n   *    More text.\n   *  endif\n   *  Unconditional text.\n   */\n</code></pre>\n<p>如果你在alias中使用了条件命令，如果在两种语言中文档化一个类，你可以这样使用：</p>\n<pre><code class=\"language-C++\">/*! english\n *  This is English.\n *  endenglish\n *  dutch\n *  Dit is Nederlands.\n *  enddutch\n */\nclass Example\n&#123;\n&#125;;\n</code></pre>\n<p>一下是配置文档中的alias：</p>\n<pre><code class=\"language-C++\">ALIASES  = \"english=if english\" \n           \"endenglish=endif\" \n           \"dutch=if dutch\" \n           \"enddutch=endif\"\n</code></pre>\n<p>那么<code class=\"highlighter-rouge\">ENABLED_SECTIONS</code>即可有效english也可有效dutch</p>\n<ul>\n  <li>@ifnot (section-label)</li>\n</ul>\n<p>开始一个条件化的文档小节，并使用一个匹配的命令<code class=\"highlighter-rouge\">@endif</code>结束。当条件小节默认为有效时，你必须放置该命令的<code class=\"highlighter-rouge\">section-label</code>到配置标记<code class=\"highlighter-rouge\">ENABLED_SECTIONS</code>中使得命令<code class=\"highlighter-rouge\">@ifnot</code>无效。</p>\n<ul>\n  <li>@invariant { description of invariant }</li>\n</ul>\n<p>开始一个可描述不变式的段落，此段落将会缩排，段落的文本不会指定一个内部结构，所有视觉增强的命令可以放置到该段落中，多个相邻的<code class=\"highlighter-rouge\">@invariant</code>命令将被组合到一个单独的段落中，每个invariant描述都将开启一个新行，另外一个<code class=\"highlighter-rouge\">@invariant</code>命令可能会有若干个不变式，当遇到一个空白行或者是其他的小节命令，那么<code class=\"highlighter-rouge\">@exception</code>将终止。</p>\n<ul>\n  <li>@note { text }</li>\n</ul>\n<p>开始一个输入提示的段落，此段落将会缩排，段落的文本不会指定一个内部结构，所有视觉增强的命令可以放置到该段落中，多个相邻的<code class=\"highlighter-rouge\">@note</code>命令将被组合到一个单独的段落中，每个note描述都将开启一个新行，另外一个<code class=\"highlighter-rouge\">@note</code>命令可能会有若干个提示，当遇到一个空白行或者是其他的小节命令，那么<code class=\"highlighter-rouge\">@note</code>将终止。查看<code class=\"highlighter-rouge\">@par</code>命令的例子。</p>\n<ul>\n  <li>@par [(paragraph title)] { paragraph }</li>\n</ul>\n<p>如果一个段落标题已经给定，此命令将开始一个用户自定义的段头。段头将会占用一行，命令后的段头将会缩排。</p>\n<p>如果段落标题未给出，此命令将开始一个新段落，也可插入其他段落命令(如@param或@warning)来终止该命令。</p>\n<p>段落的文本不会指定一个内部结构，所有视觉增强的命令可以放置到该段落中，当遇到一个空白行或者是其他的小节命令，那么<code class=\"highlighter-rouge\">@par</code>将终止。例如：</p>\n<pre><code class=\"language-C++\">/*! @class Par_Test \n * Normal text. \n * \n * @par User defined paragraph: \n * Contents of the paragraph. \n * \n * @par \n * New paragraph under the same heading. \n *\n * @note \n * This note consists of two paragraphs. \n * This is the first paragraph. \n * \n * @par \n * And this is the second paragraph. \n *\n * More normal text. \n */ \nclass Par_Test &#123;&#125;;\n</code></pre>\n<ul>\n  <li>@param [(dir)] <parameter-name> { parameter description }</parameter-name></li>\n</ul>\n<p>为一个名字为<code class=\"highlighter-rouge\">&lt;parameter-name&gt;</code>函数参数开始一个参数描述，将会去检查是否存在。如果在函数声明或定义中，该参数(或其他参数)的文档丢失或未出现，将会给出一个警告。</p>\n<p><code class=\"highlighter-rouge\">@param</code>命令有一个可选属性，能指定参数的方向属性，可为<code class=\"highlighter-rouge\">into或out</code>，这有一个例子：</p>\n<pre><code class=\"language-C++\">/*! * Copies bytes from a source memory area to a destination memory area, \n * where both areas may not overlap. \n * @param[out] dest The memory area to copy to.\n * @param[in]  src  The memory area to copy from.\n * @param[in]  n    The number of bytes to copy \n */void \nmemcpy(void *dest, const void *src, size_t n);\n</code></pre>\n<p>如果参数既可以输入也可输出，则使用[in,out]指定方向属性，段落的文本不会指定一个内部结构，所有视觉增强的命令可以放置到该段落中，多个相邻的<code class=\"highlighter-rouge\">@param</code>命令将被组合到一个单独的段落中，每个参数描述都将开启一个新行，当遇到一个空白行或者是其他的小节命令，那么<code class=\"highlighter-rouge\">@param</code>将终止。</p>\n<ul>\n  <li>@parblock</li>\n</ul>\n<p>不像那些评论单一段落的参数( @par, @param 和 @warning)，@parblock可以作为一个跨越多行段落描述的命令，并且以<code class=\"highlighter-rouge\">endparblock</code>结束。例如：</p>\n<pre><code class=\"language-C++\">/** Example of a param command with a description consisting of two paragraphs\n *  param p \n *  parblock\n *  First paragraph of the param description.\n *\n *  Second paragraph of the param description.\n *  endparblock\n *  Rest of the comment block continues.\n */\n</code></pre>\n<ul>\n  <li>@endparblock</li>\n</ul>\n<p>结束一个以<code class=\"highlighter-rouge\">@parblock</code>开头的段落块。</p>\n<ul>\n  <li>@tparam <template-parameter-name> { description }</template-parameter-name></li>\n</ul>\n<p>为一个名字为<code class=\"highlighter-rouge\">&lt;template-parameter-name&gt;</code>类或函数模板参数开始一个模板参数描述，等同于<code class=\"highlighter-rouge\">@cmdparam</code></p>\n<ul>\n  <li>@post { description of the postcondition }</li>\n</ul>\n<p>开始一个可描述的后置条件的段落，此段落将会缩排，段落的文本不会指定一个内部结构，所有视觉增强的命令可以放置到该段落中，多个相邻的<code class=\"highlighter-rouge\">@post</code>命令将被组合到一个单独的段落中，每个后置描述都将开启一个新行，另外一个<code class=\"highlighter-rouge\">@post</code>命令可能会有若干个提示，当遇到一个空白行或者是其他的小节命令，那么<code class=\"highlighter-rouge\">@post</code>将终止。</p>\n<ul>\n  <li>@pre { description of the precondition }</li>\n</ul>\n<p>开始一个可描述的前置条件的段落，此段落将会缩排，段落的文本不会指定一个内部结构，所有视觉增强的命令可以放置到该段落中，多个相邻的<code class=\"highlighter-rouge\">@pre</code>命令将被组合到一个单独的段落中，每个前置条件描述都将开启一个新行，另外一个<code class=\"highlighter-rouge\">@pre</code>命令可能会有若干个提示，当遇到一个空白行或者是其他的小节命令，那么<code class=\"highlighter-rouge\">@pre</code>将终止。</p>\n<ul>\n  <li>@remark { remark text }</li>\n</ul>\n<p>开始一个可输入一个或多个备注的段落，此段落将会缩排，段落的文本不会指定一个内部结构，所有视觉增强的命令可以放置到该段落中，多个相邻的<code class=\"highlighter-rouge\">@remark</code>命令将被组合到一个单独的段落中，每个备注都将开启一个新行，另外一个<code class=\"highlighter-rouge\">@remark</code>命令可能会有若干个提示，当遇到一个空白行或者是其他的小节命令，那么<code class=\"highlighter-rouge\">@remark</code>将终止。</p>\n<ul>\n  <li>@remarks { remark text }</li>\n</ul>\n<p>同<code class=\"highlighter-rouge\">@remark</code>。</p>\n<ul>\n  <li>@result { description of the result value }</li>\n</ul>\n<p>同<code class=\"highlighter-rouge\">@return</code>。</p>\n<ul>\n  <li>@return { description of the return value }</li>\n</ul>\n<p>开始一个可输入一个或多个备注的段落，此段落将会缩排，段落的文本不会指定一个内部结构，所有视觉增强的命令可以放置到该段落中，当遇到一个空白行或者是其他的小节命令，那么<code class=\"highlighter-rouge\">@remark</code>将终止。参考<code class=\"highlighter-rouge\">@fn</code>命令中的例子。</p>\n<ul>\n  <li>@returns { description of the return value }</li>\n</ul>\n<p>同<code class=\"highlighter-rouge\">@return</code>。</p>\n<ul>\n  <li>@retval <return value=\"\"> { description }</return></li>\n</ul>\n<p>为一个名字为<code class=\"highlighter-rouge\">&lt;return value&gt;</code>函数开始一个返回值的描述，段落的文本不会指定一个内部结构，所有视觉增强的命令可以放置到该段落中，多个相邻的<code class=\"highlighter-rouge\">@retval</code>命令将被组合到一个单独的段落中，每个备注都将开启一个新行，当遇到一个空白行或者是其他的小节命令，那么<code class=\"highlighter-rouge\">@retval</code>将终止。</p>\n<ul>\n  <li>@sa { references }</li>\n</ul>\n<p>为指定的类、函数、方法、变量、文档、URL的一个或多个交叉引用开始一个段落，使用<code class=\"highlighter-rouge\">::或者#</code>作为类和它的一个成员的引用连接符来组合上述两个名称。在方法名称之后包含一个带括号的参数类型列表，用于若干个重载方法或者构造器的选择。</p>\n<ul>\n  <li>@see { references }</li>\n</ul>\n<p>为了兼容JavaDoc，等同于<code class=\"highlighter-rouge\">@sa</code>。</p>\n<ul>\n  <li>@short { short description }</li>\n</ul>\n<p>同<code class=\"highlighter-rouge\">@brief</code>。</p>\n<ul>\n  <li>@since { text }</li>\n</ul>\n<p>用于指定一个有效的版本和时间，<code class=\"highlighter-rouge\">@since</code>之后的段落不会指定一个内部结构，所有视觉增强的命令可以放置到该段落中，当遇到一个空白行或者是其他的小节命令，那么<code class=\"highlighter-rouge\">@since</code>将终止。</p>\n<ul>\n  <li>@test { paragraph describing a test case }</li>\n</ul>\n<p>开始一个可描述的测试用例的段落，此描述会添加这个测试用例到一个单独的测试列表中，而这两种描述将可交叉引用。在测试列表中的每一个测试用例的前端，都还有一个指明它出处的头。</p>\n<ul>\n  <li>@throw <exception-object> { exception description }</exception-object></li>\n</ul>\n<p>同<code class=\"highlighter-rouge\">@exception</code>。</p>\n<ul>\n  <li>@throws <exception-object> { exception description }</exception-object></li>\n</ul>\n<p>同<code class=\"highlighter-rouge\">@throw</code>。</p>\n<ul>\n  <li>@todo { paragraph describing what is to be done }</li>\n</ul>\n<p>开始一个可描述的todo条目的段落，此描述会添加这个条目到一个单独的todo列表中，而这两种描述将可交叉引用。在测试列表中的每一个测试用例的前端，都还有一个指明它出处的头。</p>\n<ul>\n  <li>@version { version number }</li>\n</ul>\n<p>开始一个可可输入一个或多个版本字符串的段落，此段落将会缩排，段落的文本不会指定一个内部结构，所有视觉增强命令可以放置到该段落中，多个相邻的<code class=\"highlighter-rouge\">@version</code>命令将被组合到一个单独的段落中，每个版本描述将开启一个新行，另外一个   <code class=\"highlighter-rouge\">@version</code>命令可能会有若干个版本字符串，当遇到一个空白行或者是其他的小节命令，那么<code class=\"highlighter-rouge\">@version</code>将终止。查看命令<code class=\"highlighter-rouge\">@authhor</code>的例子。</p>\n<ul>\n  <li>@warning { warning message }</li>\n</ul>\n<p>开始一个可可输入一个或多个警告信息的段落，此段落将会缩排，段落的文本不会指定一个内部结构，所有视觉增强命令可以放置到该段落中，多个相邻的<code class=\"highlighter-rouge\">@warning</code>命令将被组合到一个单独的段落中，每个版本描述将开启一个新行，另外一个   <code class=\"highlighter-rouge\">@warning</code>命令可能会有若干个警告，当遇到一个空白行或者是其他的小节命令，那么<code class=\"highlighter-rouge\">@warning</code>将终止。查看命令<code class=\"highlighter-rouge\">@authhor</code>的例子。</p>\n<ul>\n  <li>@xrefitem <key> \"(heading)\" \"(list title)\" { text }</key></li>\n</ul>\n<p>此命令是一个类似于<code class=\"highlighter-rouge\">@todo,@bug</code>的集合，用于创建用户自定义文本小节，它会在连接点与关联页面之间自动生成交叉引用，并且能搜集关联页面中的所有相同类型的小节。第一个参数<key>是一个表述小节类型的唯一标识，第二个参数是一个加了引号的字符串，它用于表述第四个参数放置文本下的小节头，为包含同一个标识的所有条目相关页面，第三个参数将作为一个标题来使用，一些已经预定义的标识：`todo,test,bug,deprecated`。</key></p>\n<p>想想如果使用<code class=\"highlighter-rouge\">@xrefitem</code>命令和它运行后的结果，如果只考虑todo列表，它看上去更像是一个alias：</p>\n<p><code class=\"highlighter-rouge\">xrefitem todo \"Todo\" \"Todo List\" </code></p>\n<p>为每个小节都将重复该命令的前三个参数，这使得它非常易错，该命令也可用于合并配置文档中的<code class=\"highlighter-rouge\">ALIAES</code>选项，如果定义一个新命令<code class=\"highlighter-rouge\">@reminder</code>，可添加一下内容到配置文档：</p>\n<p><code class=\"highlighter-rouge\">ALIASES += \"reminder=xrefitem reminders \"Reminder\" \"Reminders\"\" </code></p>\n<p>注意：命令中第二和第三参数使用转义引号。</p>\n<p>万一参数”(heading)”是一个空字符串则没有heading生成。当和<code class=\"highlighter-rouge\">@page</code>命令联合使用时这非常有用。例如：</p>\n<pre><code class=\"language-C++\">/** @page my_errors My Errors\n *  @brief Errors page\n *\n *  Errors page contents.\n */\n\n/** error ERROR 101: in case a file can not be opened.\n    Check about file system read/write access. */\n#define MY_ERR_CANNOT_OPEN_FILE                   101\n\n/** error ERROR 102: in case a file can not be closed.\n    Check about file system read/write access. */\n#define MY_ERR_CANNOT_CLOSE_FILE                  102\n</code></pre>\n<p>里面的<code class=\"highlighter-rouge\">@error</code>定义为：</p>\n<p><code class=\"highlighter-rouge\">ALIASES += \"error=xrefitem my_errors \"\" \"\"\"</code></p>","text":" &lt;h3 id=&quot;时间2016年8月11日-天气晴sunny&quot;&gt;时间:2016年8月11日 天气:晴:sunny:&lt;/h3&gt; Author:冬之晓:dizzy_face: Email: 347916416@qq.com MyAppear...","link":"","photos":[],"count_time":{"symbolsCount":"9.9k","symbolsTime":"9 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#author%E5%86%AC%E4%B9%8B%E6%99%93dizzy_face\"><span class=\"toc-text\">Author:冬之晓:dizzy_face:</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#email-347916416qqcom\"><span class=\"toc-text\">Email: 347916416@qq.com</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#myappearance-\"><span class=\"toc-text\">MyAppearance: </span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%B0%8F%E8%8A%82%E6%8C%87%E7%A4%BA%E5%91%BD%E4%BB%A4\"><span class=\"toc-text\">小节指示命令</span></a>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"基于AndroLua_Pro的Android开发代码示例","uid":"94417dda5756bd306e745ea97ae3cbdc","slug":"zl/2016-01-01-235_基于AndroLua_Pro的Android开发代码示例","date":"2024-04-03T03:47:33.107Z","updated":"2024-04-03T03:47:33.107Z","comments":true,"path":"api/articles/zl/2016-01-01-235_基于AndroLua_Pro的Android开发代码示例.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":" &lt;blockquote&gt; 温馨提示:请使用电脑浏览器打开,以确保最佳的阅读体验,谢谢.(￣▽￣)” 我希望你有了一些AndroLua_Pro的基础, 如果还没有可以结合这篇文章(基于AndroLua_Pro的Android开发笔记)来看. 其实我代码都放在了GitH...","link":"","photos":[],"count_time":{"symbolsCount":"1.8k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Lua_on_Nginx","uid":"0481568951d740141fe68c4fb1df4db7","slug":"zl/2016-01-01-237_Lua_on_Nginx","date":"2024-04-03T03:47:33.107Z","updated":"2024-04-03T03:47:33.108Z","comments":true,"path":"api/articles/zl/2016-01-01-237_Lua_on_Nginx.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":" &lt;p&gt;Nginx的高并发是它的一大显著优势，Lua则是一门较为轻便的脚本语言。把他们组合在一起，则极大的增强了Nginx的能力（灵活性，扩展性）。&lt;br&gt;Nginx-Lua模块是由淘宝开发的第三方模块，使用它可以把Lua内嵌到Nginx中。&lt;/p&...","link":"","photos":[],"count_time":{"symbolsCount":"2.5k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}