{"title":"lua学习的查缺补漏","uid":"9f270bf956efdfa36eccfee547f93132","slug":"zl/2016-01-01-859_lua学习的查缺补漏","date":"2024-04-03T03:47:36.124Z","updated":"2024-04-03T03:47:36.125Z","comments":true,"path":"api/articles/zl/2016-01-01-859_lua学习的查缺补漏.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<h3 id=\"目录\">目录</h3>\n<ol>\n  <li>多行注释</li>\n  <li>取整</li>\n  <li>长字符串</li>\n  <li>字符串标准库</li>\n  <li>lua中安全访问</li>\n  <li>表</li>\n  <li>可变长参数</li>\n  <li>输入和输出</li>\n  <li>lua运行一段程序</li>\n</ol>\n<blockquote>\n  <p>认真学习，增强自己的能力和知识面。</p>\n</blockquote>\n<h2 id=\"多行注释\">多行注释</h2>\n<div class=\"language-lua highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n</pre></td><td class=\"rouge-code\"><pre><span class=\"cm\">--[[\nfdsa\nfdas\n]]</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n<h2 id=\"取整\">取整</h2>\n<p>为了做到公平性取整，应该做到3.5+0.5为偶数则进位，而2.5+0.5为奇数不进位。</p>\n<div class=\"language-lua highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n</pre></td><td class=\"rouge-code\"><pre><span class=\"k\">function</span> <span class=\"nf\">round</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n\t<span class=\"kd\">local</span> <span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"n\">math</span><span class=\"p\">.</span><span class=\"n\">floot</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n\t<span class=\"k\">if</span>\t<span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">==</span> <span class=\"n\">f</span><span class=\"p\">)</span> <span class=\"ow\">or</span> <span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">%</span> <span class=\"mi\">2</span><span class=\"p\">.</span><span class=\"mi\">0</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">.</span><span class=\"mi\">5</span><span class=\"p\">)</span> <span class=\"k\">then</span>\n\t\t<span class=\"k\">return</span> <span class=\"n\">f</span>\n\t<span class=\"k\">else</span>\n\t\t<span class=\"k\">return</span> <span class=\"nb\">math.floor</span><span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"mi\">0</span><span class=\"p\">.</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n\t<span class=\"k\">end</span>\n<span class=\"k\">end</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n<h2 id=\"长字符串\">长字符串</h2>\n<p>在lua中字符串是常量，一个字符串当被存到内存中的时候就不能再被改变了，所以我们发现如果一个变量引用了一个字符串，我们是不能像CC++那样通过索引进行改变其值的，只能从新赋值新的字符串，这样子其实是这个变量指向了另一块内存了。</p>\n<div class=\"language-lua highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">local</span> <span class=\"n\">page</span> <span class=\"o\">=</span> <span class=\"s\">[[\nfdsaf\n<p>fdasf</p>\n<p>]]</span><br />\n</pre></td></tr></tbody></table></code></pre></div></div></p>\n<h2 id=\"字符串标准库\">字符串标准库</h2>\n<div class=\"language-lua highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n</pre></td><td class=\"rouge-code\"><pre><span class=\"nb\">string.gsub</span><span class=\"p\">(</span><span class=\"s2\">&#34;one string&#34;</span><span class=\"p\">,</span><span class=\"s2\">&#34;one&#34;</span><span class=\"p\">,</span><span class=\"s2\">&#34;two&#34;</span><span class=\"p\">)</span> <span class=\"c1\">--&gt; two string</span>\n<span class=\"nb\">string.rep</span><span class=\"p\">(</span><span class=\"s2\">&#34;abc&#34;</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"nb\">string.reverse</span><span class=\"p\">(</span><span class=\"s2\">&#34;abc&#34;</span><span class=\"p\">)</span>\n<span class=\"nb\">string.lower</span><span class=\"p\">(</span><span class=\"s2\">&#34;Abc&#34;</span><span class=\"p\">)</span>\n<span class=\"nb\">string.upper</span><span class=\"p\">(</span><span class=\"s2\">&#34;abc&#34;</span><span class=\"p\">)</span>\n<p><span class=\"nb\">string.sub</span><span class=\"p\">(</span><span class=\"s2\">&quot;abc&quot;</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"c1\">–包含1和2</span><br />\n<span class=\"nb\">string.char</span><span class=\"p\">(</span><span class=\"mi\">97</span><span class=\"p\">)</span> <span class=\"c1\">– a,转换字符及其内部数值表示形式</span><br />\n<span class=\"nb\">string.byte</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span> <span class=\"c1\">– 97</span></p>\n<p><span class=\"nb\">string.find</span><span class=\"p\">(</span><span class=\"s2\">&quot;hello world&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;wor&quot;</span><span class=\"p\">)</span> <span class=\"c1\">–7 9</span><br />\n<span class=\"nb\">string.gsub</span><span class=\"p\">(</span><span class=\"s2\">&quot;hello world&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;l&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;.&quot;</span><span class=\"p\">)</span> <span class=\"c1\">–he…o wor.d</span></p>\n<p></pre></td></tr></tbody></table></code></pre></div></div></p>\n<p>一般情况下，string内部的函数都是针对于字节进行操作的，当遇到中文就不行了，在这里lua增加了utf8的函数封装。</p>\n<div class=\"language-lua highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">local</span> <span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"s2\">&#34;中华人民共和国&#34;</span>\n<span class=\"n\">utf8</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span> <span class=\"c1\">--7,返回指定字符串中UTF-8字符的个数</span>\n<span class=\"c1\">--utf8把字符位置转换成字节位置</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">utf8</span><span class=\"p\">.</span><span class=\"n\">codepoint</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">,</span><span class=\"n\">utf8</span><span class=\"p\">.</span><span class=\"n\">offset</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">),</span><span class=\"n\">utf8</span><span class=\"p\">.</span><span class=\"n\">offset</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">)))</span> <span class=\"c1\">-- </span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">utf8</span><span class=\"p\">.</span><span class=\"n\">char</span><span class=\"p\">(</span><span class=\"mi\">20013</span><span class=\"p\">,</span><span class=\"mi\">21326</span><span class=\"p\">))</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">utf8</span><span class=\"p\">.</span><span class=\"n\">offset</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">))</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"nb\">string.sub</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"n\">utf8</span><span class=\"p\">.</span><span class=\"n\">offset</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"mi\">1</span> <span class=\"p\">))</span> <span class=\"c1\">--在使用的时候需要注意，offset返回的是字符的第一个字节位置，在截取的使用时候需要减去1</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">.</span><span class=\"mi\">5</span> <span class=\"o\">%</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n</pre></td></tr></tbody></table></code></pre></div></div>\n<h2 id=\"lua中安全访问\">lua中安全访问</h2>\n<p>通过  (class or {}).  的方式来实现安全访问</p>\n<h2 id=\"表\">表</h2>\n<p>表的拷贝除了使用遍历赋值之外，还可以通过table.move函数来实现。</p>\n<p>在这里注意到下面的代码，如果我将table插入到另一个table中，这里是引用，而不是新开辟了一块新的内存，如果我现在改变inta中index为1的值，那么表a中index为1的表的index为1的值也会随着改变。</p>\n<p>这里还需要思考一个问题，什么时候一个变量才算引用一个表成功呢？意思是这两个变量是否指向同一块内存，一般我们常说基本类型一般是不会引用的像数值和布尔，这里table会被引用,</p>\n<div class=\"language-lua highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n</pre></td><td class=\"rouge-code\"><pre><span class=\"n\">table</span><span class=\"p\">.</span><span class=\"n\">move</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"o\">#</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,&#123;&#125;)</span>\n<p><span class=\"kd\">local</span> <span class=\"n\">inta</span> <span class=\"o\">=</span> <span class=\"p\">&#123;</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">&#125;</span><br />\n<span class=\"kd\">local</span> <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"p\">&#123;&#125;</span><br />\n<span class=\"kd\">local</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"p\">&#123;&#125;</span><br />\n<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span> <span class=\"k\">do</span><br />\n<span class=\"nb\">table.insert</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"n\">inta</span><span class=\"p\">)</span><br />\n<span class=\"k\">end</span></p>\n<p><span class=\"n\">table</span><span class=\"p\">.</span><span class=\"n\">move</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"o\">#</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"n\">b</span><span class=\"p\">)</span><br />\n</pre></td></tr></tbody></table></code></pre></div></div></p>\n<p>通过’#’符号对表进行取长度，只适应于数组，不适应于hash表，当表中存在空洞的时候，不要再使用’#’来取长度了，在对数组进行添加和移除的时候，应该使用remove和insert函数，而不应该直接赋空值。</p>\n<p>这里常见的误区包括：</p>\n<ol>\n  <li>对一个数组中的某个索引进行完赋空值操作之后，还使用ipairs进行遍历，因为存在空洞，所以是不可能遍历整个数组的。</li>\n  <li>一次遍历删除数组中的多个值，这样子可能会导致删除不干净，当连续两个相同的值需要删除的时候，后面那个值是删除不掉的，因为他的索引值已经减一了，到了刚删除值的位置了。这样子是遍历不到它的。</li>\n</ol>\n<p>要怎么解决这个问题呢？</p>\n<p>如果删除之后不保留数组的特性，那么直接遍历一遍删除的赋值为nil就行了，但是一般很少不保留，所以应该使用下面这种方法，那就是创建一个新表，删除的不插入其中，不删除的插入其中，然后赋值给原来的变量。</p>\n<h2 id=\"可变长参数\">可变长参数</h2>\n<p>在函数中，一个函数为了可以接受可变长的参数列表，一般采用三个点。</p>\n<p>用这个三个点获取来的参数列表其实是一个表达式，和return回来多个值是一样的，可以选择接受一个或者多个，也可以通过表的形式全部接受。</p>\n<p>但是如果可变长参数中包含无效的nill，那么{…}获得的表可能不再是一个有效的序列。这样会导致一个问题，就是table中存在nil的时候，元素就会被自动移除。假设参数为 1，nil，2，那个打包到table中就只剩下1，2了，table的长度为2，不是一个数组，因为table[2]没有这个键值。</p>\n<p><img src=\"https://i.imgur.com/ERw2JLC.png\" alt=\"\"/></p>\n<p>这个时候我们可以使用table.pack来打包可变长参数。通过pack打包出来的表会存在一个键值n，表示原来 … 返回来的参数个数。</p>\n<p>通过table.unpack可以解开表，返回内容类似于return表达式。</p>\n<h2 id=\"输入和输出\">输入和输出</h2>\n<p>如果没有重定向io.lines(),默认会从控制台接收输入，运到换行符不会结束，会以CTR^Z结束。</p>\n<p>io.input和io.output可以用于改变当前的输入输出流。调用io.input(file_name)会以只读模式打开指定的文件，并将文件设置为当前输入流。</p>\n<div class=\"language-lua highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">local</span> <span class=\"n\">file</span> <span class=\"o\">=</span> <span class=\"nb\">io.open</span><span class=\"p\">(</span><span class=\"s2\">&#34;a.txt&#34;</span><span class=\"p\">,</span><span class=\"s2\">&#34;r&#34;</span><span class=\"p\">)</span>\n<p><span class=\"nb\">io.read</span><span class=\"p\">()</span> <span class=\"c1\">–类似于c<ins>中的cin函数</span><br />\n<span class=\"nb\">io.write</span><span class=\"p\">()</span><span class=\"c1\">–类似于c</ins>中cout函数</span></p>\n<p><span class=\"kd\">local</span> <span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"p\">&#123;&#125;</span><br />\n<span class=\"k\">for</span> <span class=\"n\">line</span> <span class=\"k\">in</span> <span class=\"nb\">io.lines</span><span class=\"p\">()</span> <span class=\"k\">do</span><br />\n<span class=\"nb\">table.insert</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">,</span><span class=\"n\">line</span><span class=\"p\">)</span><br />\n<span class=\"k\">end</span></p>\n<p><span class=\"kd\">local</span> <span class=\"n\">temp</span> <span class=\"o\">=</span> <span class=\"nb\">io.input</span><span class=\"p\">()</span> <span class=\"c1\">–保存当前的输入流</span><br />\n<span class=\"nb\">io.input</span><span class=\"p\">(</span><span class=\"s2\">&quot;newinput&quot;</span><span class=\"p\">)</span> <span class=\"c1\">–打开一个新的当前输入流</span><br />\n<span class=\"err\">对新的输入流进行某些操作</span><br />\n<span class=\"nb\">io.input</span><span class=\"p\">():</span><span class=\"n\">close</span><span class=\"p\">()</span> <span class=\"c1\">–关闭当前流</span><br />\n<span class=\"nb\">io.input</span><span class=\"p\">(</span><span class=\"n\">temp</span><span class=\"p\">)</span> <span class=\"c1\">–回复此前的当前输入流</span></p>\n<p><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"nb\">os.execute</span><span class=\"p\">(</span><span class=\"s2\">&quot;ls&quot;</span><span class=\"p\">))</span></p>\n<p></pre></td></tr></tbody></table></code></pre></div></div></p>\n<p>io.read(args)实际上是io.input():read(args)的简写。</p>\n<p>io.write((args)是io.output():write(args)的简写。</p>\n<p>为了及时的获取输入流中的内容，可以使用io.flush()函数刷新输入流。</p>\n<p>我们可以使用os.excute(“ls”)，来展示目录中的文件。</p>\n<h2 id=\"lua运行一段程序\">lua运行一段程序</h2>\n<p>突然发现自己用多了编译器竟然不知道lua是怎么运行一段程序的了，一般lua运行程序分为两种：</p>\n<div class=\"language-lua highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n</pre></td><td class=\"rouge-code\"><pre><span class=\"n\">lua</span> <span class=\"o\">-</span><span class=\"n\">i</span> <span class=\"n\">prog</span> <span class=\"c1\">--运行prog这个文件的带码，并进入交互模式</span>\n<p><span class=\"nb\">dofile</span><span class=\"p\">(</span><span class=\"s2\">&quot;lib1.lua&quot;</span><span class=\"p\">)</span> <span class=\"c1\">–在交互模式下加载文件</span><br />\n</pre></td></tr></tbody></table></code></pre></div></div></p>\n<p>函数dofile在开发阶段非常有用，我们可以通过它重新加载带码，这样就可以使用新的代码了。</p>\n<p>使用方法如下：</p>\n<ol>\n  <li>加载一个文件：\tdofile(“hello.lua”)</li>\n  <li>调用文件中的函数</li>\n  <li>修改文件中的函数</li>\n  <li>重新加载文件： dofile(“hello.lua”)</li>\n  <li>调用函数：就会发现输入的内容使我们新修改的内容</li>\n</ol>\n<p>而且lua存在独立的解释器类似于，这个就像是通过命令行执行一个c程序一样，lua命令的完整参数形式如：</p>\n<blockquote>\n  <p>lua [options] [script [args]]</p>\n</blockquote>\n<ol>\n  <li>-e参数允许我们直接在命令行中输入代码</li>\n  <li>-l参数用于加载库。</li>\n  <li>-i参数用于在运行完其它命令行参数后进入交互模式</li>\n</ol>\n<p>%lua -e “sin=math.sin” script a b</p>\n<p>在上面的用例中，编译器在运行代码前会创建一个名为arg的边，其中存储了所有的命令行参数。索引0中保存的内容为脚本名，索引1保存的为第一个参数。所以上面的例子解释如下：</p>\n<ol>\n  <li>arg[-3] = “lua”</li>\n  <li>arg[-2] = “-e”</li>\n  <li>arg[-1] = “sin=math.sin”</li>\n  <li>arg[0] = “script”</li>\n  <li>arg[1] = a</li>\n  <li>arg[2] = b</li>\n</ol>\n<div class=\"language-lua highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><table class=\"rouge-table\"><tbody><tr><td class=\"rouge-gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n</pre></td><td class=\"rouge-code\"><pre><span class=\"kd\">local</span> <span class=\"k\">function</span> <span class=\"nf\">printParams</span><span class=\"p\">(</span><span class=\"n\">arg</span><span class=\"p\">)</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">v</span> <span class=\"k\">in</span> <span class=\"nb\">ipairs</span><span class=\"p\">(</span><span class=\"n\">arg</span><span class=\"p\">)</span> <span class=\"k\">do</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span>\n    <span class=\"k\">end</span>\n<span class=\"k\">end</span>\n<p><span class=\"n\">printParams</span><span class=\"p\">(</span><span class=\"n\">arg</span><span class=\"p\">)</span></p>\n<p><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">sin</span><span class=\"p\">(</span><span class=\"mi\">12</span><span class=\"p\">))</span></p>\n<p><span class=\"c1\">–lua -e &quot;sin=math.sin&quot; hello.lua 1 2</span></p>\n<p></pre></td></tr></tbody></table></code></pre></div></div></p>\n<pre><code>            &lt;hr style=&quot;visibility: hidden;&quot;/&gt;\n            \n            &lt;hr style=&quot;visibility: hidden;&quot;/&gt;\n</code></pre>\n","text":"目录 多行注释 取整 长字符串 字符串标准库 lua中安全访问 表 可变长参数 输入和输出 lua运行一段程序 认真学习，增强自己的能力和知识面。 多行注释 1 2 3 4 --[[ fdsa fdas ]] 取整 为了做到公平性取整，应该做到3.5+0.5为偶数则进位，而2.5...","link":"","photos":[],"count_time":{"symbolsCount":"4.3k","symbolsTime":"4 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%9B%AE%E5%BD%95\"><span class=\"toc-text\">目录</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%A4%9A%E8%A1%8C%E6%B3%A8%E9%87%8A\"><span class=\"toc-text\">多行注释</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8F%96%E6%95%B4\"><span class=\"toc-text\">取整</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%95%BF%E5%AD%97%E7%AC%A6%E4%B8%B2\"><span class=\"toc-text\">长字符串</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%A0%87%E5%87%86%E5%BA%93\"><span class=\"toc-text\">字符串标准库</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#lua%E4%B8%AD%E5%AE%89%E5%85%A8%E8%AE%BF%E9%97%AE\"><span class=\"toc-text\">lua中安全访问</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%A1%A8\"><span class=\"toc-text\">表</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8F%AF%E5%8F%98%E9%95%BF%E5%8F%82%E6%95%B0\"><span class=\"toc-text\">可变长参数</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%BE%93%E5%85%A5%E5%92%8C%E8%BE%93%E5%87%BA\"><span class=\"toc-text\">输入和输出</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#lua%E8%BF%90%E8%A1%8C%E4%B8%80%E6%AE%B5%E7%A8%8B%E5%BA%8F\"><span class=\"toc-text\">lua运行一段程序</span></a>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Coroutine协程","uid":"94a6b6597c466125d27dcf26efe96b41","slug":"zl/2016-01-01-858_[Lua] Coroutine协程","date":"2024-04-03T03:47:36.124Z","updated":"2024-04-03T03:47:36.124Z","comments":true,"path":"api/articles/zl/2016-01-01-858_[Lua] Coroutine协程.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"Coroutine Manipulation coroutine.create (f) Creates a new coroutine, with body f. f must be a function. Returns this new coroutine, an objec...","link":"","photos":[],"count_time":{"symbolsCount":"5.9k","symbolsTime":"5 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Lua Iterator","uid":"1fdf57fb1195f5f43473998d9681fe6e","slug":"zl/2016-01-01-856_Lua Iterator","date":"2024-04-03T03:47:36.123Z","updated":"2024-04-03T03:47:36.123Z","comments":true,"path":"api/articles/zl/2016-01-01-856_Lua Iterator.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"前言由于工作的关系其实我平时写Lua还是很多的，然而一个偶然的机会发现了其实我对Lua的迭代的认识还不够，这里记录一下。 READ THE MANUAL强调一下，一定要看守手册Lua5.1手册 我们来看下Lua中的For 12345678910111213141516171819...","link":"","photos":[],"count_time":{"symbolsCount":"5.5k","symbolsTime":"5 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}