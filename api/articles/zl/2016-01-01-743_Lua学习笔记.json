{"title":"Lua学习笔记","uid":"d112c00bf05f368c0020529ea6c8efaf","slug":"zl/2016-01-01-743_Lua学习笔记","date":"2024-04-03T03:47:35.992Z","updated":"2024-04-03T03:47:35.992Z","comments":true,"path":"api/articles/zl/2016-01-01-743_Lua学习笔记.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<p> 两个减号是单行注释:<br/></p><figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">-- 注释内容</span><br/></pre></td></tr></tbody></table></figure><p></p>\n<p> 多行注释:<br/></p><figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">--[[ </span><br/><span class=\"line\">注释内容</span><br/><span class=\"line\">注释内容</span><br/><span class=\"line\">--]]</span><br/></pre></td></tr></tbody></table></figure><p></p>\n<h1 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h1><p>Lua是动态类型语言，变量不要类型定义,只需要为变量赋值。值可以存储在变量中，作为参数传递或结果返回。</p>\n<h2 id=\"nil\"><a href=\"#nil\" class=\"headerlink\" title=\"nil\"></a>nil</h2><p>这个最简单，只有值nil属于该类，表示一个无效值（在条件表达式中相当于false）。</p>\n<h2 id=\"boolean\"><a href=\"#boolean\" class=\"headerlink\" title=\"boolean\"></a>boolean</h2><p>包含两个值：false和true。</p>\n<h2 id=\"number\"><a href=\"#number\" class=\"headerlink\" title=\"number\"></a>number</h2><p>表示双精度类型的实浮点数</p>\n<h2 id=\"string\"><a href=\"#string\" class=\"headerlink\" title=\"string\"></a>string</h2><p>字符串由一对双引号或单引号或[[和]]间的一串字符来表示</p>\n<h2 id=\"function\"><a href=\"#function\" class=\"headerlink\" title=\"function\"></a>function</h2><p>由 C 或 Lua 编写的函数</p>\n<h2 id=\"userdata\"><a href=\"#userdata\" class=\"headerlink\" title=\"userdata\"></a>userdata</h2><p>表示任意存储在变量中的C数据结构</p>\n<h2 id=\"thread\"><a href=\"#thread\" class=\"headerlink\" title=\"thread\"></a>thread</h2><p>表示执行的独立线路，用于执行协同程序</p>\n<h2 id=\"table\"><a href=\"#table\" class=\"headerlink\" title=\"table\"></a>table</h2><p>Lua 中的表（table）其实是一个”关联数组”（associative arrays），数组的索引可以是数字或者是字符串。在 Lua 里，table 的创建是通过”构造表达式”来完成，最简单构造表达式是{}，用来创建一个空表。<br/>对 table 的索引使用方括号 []。Lua 也提供了 . 操作。<br/></p><figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">t[i]</span><br/><span class=\"line\">t.i                 -- 当索引为字符串类型时的一种简化写法</span><br/><span class=\"line\">gettable_event(t,i) -- 采用索引访问本质上是一个类似这样的函数调用</span><br/><span class=\"line\"></span><br/><span class=\"line\">site[&#34;key&#34;] = &#34;www.w3cschool.cc&#34;</span><br/><span class=\"line\">print(site[&#34;key&#34;])</span><br/><span class=\"line\">print(site.key)</span><br/></pre></td></tr></tbody></table></figure><p></p>\n<h1 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h1><p>Lua 变量有三种类型：全局变量、局部变量、表中的域。Lua 中的变量全是全局变量，那怕是语句块或是函数里，除非用 local 显式声明为局部变量。</p>\n<h1 id=\"赋值\"><a href=\"#赋值\" class=\"headerlink\" title=\"赋值\"></a>赋值</h1><h2 id=\"多个变量赋值\"><a href=\"#多个变量赋值\" class=\"headerlink\" title=\"多个变量赋值\"></a>多个变量赋值</h2><p>在对多个变量同时赋值，变量列表和值列表的各个元素用逗号分开，赋值语句右边的值会依次赋给左边的变量。<br/></p><figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">a, b = 10, 20</span><br/></pre></td></tr></tbody></table></figure><p></p>\n<p><br/><br/>遇到赋值语句Lua会先计算右边所有的值然后再执行赋值操作，所以我们可以这样进行交换变量的值：<br/></p><figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">x, y = y, x                     -- swap &#39;x&#39; for &#39;y&#39;</span><br/><span class=\"line\">a[i], a[j] = a[j], a[i]         -- swap &#39;a[i]&#39; for &#39;a[j]&#39;</span><br/></pre></td></tr></tbody></table></figure><p></p>\n<p><br/><br/>当变量个数和值的个数不一致时，Lua会一直以变量个数为基础采取以下策略：<br/>a. 变量个数 &gt; 值的个数             按变量个数补足nil<br/>b. 变量个数 &lt; 值的个数             多余的值会被忽略<br/></p><figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">a, b, c = 0, 1</span><br/><span class=\"line\">print(a,b,c)             --&gt; 0   1   nil</span><br/><span class=\"line\"> </span><br/><span class=\"line\">a, b = a+1, b+1, b+2     -- value of b+2 is ignored</span><br/><span class=\"line\">print(a,b)               --&gt; 1   2</span><br/><span class=\"line\"> </span><br/><span class=\"line\">a, b, c = 0</span><br/><span class=\"line\">print(a,b,c)             --&gt; 0   nil   nil</span><br/></pre></td></tr></tbody></table></figure><p></p>\n<h1 id=\"循环\"><a href=\"#循环\" class=\"headerlink\" title=\"循环\"></a>循环</h1><h2 id=\"while\"><a href=\"#while\" class=\"headerlink\" title=\"while\"></a>while</h2><figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">while(condition)</span><br/><span class=\"line\">do</span><br/><span class=\"line\">   statements</span><br/><span class=\"line\">end</span><br/></pre></td></tr></tbody></table></figure>\n<h2 id=\"for\"><a href=\"#for\" class=\"headerlink\" title=\"for\"></a>for</h2><figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">for var=exp1,exp2,exp3 do  </span><br/><span class=\"line\">    &lt;执行体&gt;  </span><br/><span class=\"line\">end</span><br/></pre></td></tr></tbody></table></figure>\n<p>exp1为循环初始值。<br/>exp2为循环中止条件。<br/>exp3为步长递增，如果不指定则默认为1。<br/>三个表达式在循环开始前一次性求值，以后不再进行求值。例如这些表达式都为函数的情况。</p>\n<p>Lua有种类似java中的foreach语句，泛型for循环通过一个迭代器函数来遍历所有值。<br/></p><figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">for i,v in ipairs(a) -- i为元素的下表,v为元素的值,ipairs是Lua提供的一个迭代器函数，用来迭代数组。</span><br/><span class=\"line\">\tdo print(v) </span><br/><span class=\"line\">end</span><br/></pre></td></tr></tbody></table></figure><p></p>\n<h2 id=\"repeat…until\"><a href=\"#repeat…until\" class=\"headerlink\" title=\"repeat…until\"></a>repeat…until</h2><figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">repeat</span><br/><span class=\"line\">   statements</span><br/><span class=\"line\">until( condition )</span><br/></pre></td></tr></tbody></table></figure>\n<p>在条件进行判断前循环体都会执行一次。<br/>如果条件判断语句（condition）为 false，循环会重新开始执行，直到条件判断语句（condition）为 true 才会停止执行。</p>\n<h1 id=\"流程控制\"><a href=\"#流程控制\" class=\"headerlink\" title=\"流程控制\"></a>流程控制</h1><h2 id=\"if\"><a href=\"#if\" class=\"headerlink\" title=\"if\"></a>if</h2><figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">if(布尔表达式)</span><br/><span class=\"line\">then</span><br/><span class=\"line\">   --[ 在布尔表达式为 true 时执行的语句 --]</span><br/><span class=\"line\">end</span><br/></pre></td></tr></tbody></table></figure>\n<p>Lua认为false和nil为假，true 和非nil为真。要注意的是Lua中 0 为 true。</p>\n<h2 id=\"if…else\"><a href=\"#if…else\" class=\"headerlink\" title=\"if…else\"></a>if…else</h2><figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">if(布尔表达式)</span><br/><span class=\"line\">then</span><br/><span class=\"line\">   --[ 布尔表达式为 true 时执行该语句块 --]</span><br/><span class=\"line\">else</span><br/><span class=\"line\">   --[ 布尔表达式为 false 时执行该语句块 --]</span><br/><span class=\"line\">end</span><br/></pre></td></tr></tbody></table></figure>\n<h2 id=\"if…elseif…else\"><a href=\"#if…elseif…else\" class=\"headerlink\" title=\"if…elseif…else\"></a>if…elseif…else</h2><figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/><span class=\"line\">9</span><br/><span class=\"line\">10</span><br/><span class=\"line\">11</span><br/><span class=\"line\">12</span><br/><span class=\"line\">13</span><br/><span class=\"line\">14</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">if( 布尔表达式 1)</span><br/><span class=\"line\">then</span><br/><span class=\"line\">   --[ 在布尔表达式 1 为 true 时执行该语句块 --]</span><br/><span class=\"line\"></span><br/><span class=\"line\">elseif( 布尔表达式 2)</span><br/><span class=\"line\">then</span><br/><span class=\"line\">   --[ 在布尔表达式 2 为 true 时执行该语句块 --]</span><br/><span class=\"line\"></span><br/><span class=\"line\">elseif( 布尔表达式 3)</span><br/><span class=\"line\">then</span><br/><span class=\"line\">   --[ 在布尔表达式 3 为 true 时执行该语句块 --]</span><br/><span class=\"line\">else </span><br/><span class=\"line\">   --[ 如果以上布尔表达式都不为 true 则执行该语句块 --]</span><br/><span class=\"line\">end</span><br/></pre></td></tr></tbody></table></figure>\n<h1 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h1><p>Lua 编程语言函数定义格式如下：<br/></p><figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">optional_function_scope function function_name( argument1, argument2, argument3..., argumentn)</span><br/><span class=\"line\">\tfunction_body</span><br/><span class=\"line\">\treturn result_params_comma_separated</span><br/><span class=\"line\">end</span><br/></pre></td></tr></tbody></table></figure><p></p>\n<ul>\n<li>optional_function_scope: 该参数是可选的制定函数是全局函数还是局部函数，未设置该参数默认为全局函数，如果你需要设置函数为局部函数需要使用关键字 local。</li>\n</ul>\n<ul>\n<li><p>argument1, argument2, argument3…, argumentn:<br/>函数参数，多个参数以逗号隔开，函数也可以不带参数。</p>\n</li>\n<li><p>result_params_comma_separated:<br/>函数返回值，Lua语言函数可以返回多个值，每个值以逗号隔开。</p>\n</li>\n</ul>\n<h2 id=\"可变参数\"><a href=\"#可变参数\" class=\"headerlink\" title=\"可变参数\"></a>可变参数</h2><p>Lua函数可以接受可变数目的参数，和C语言类似在函数参数列表中使用三点（…) 表示函数有可变的参数。<br/>Lua将函数的参数放在一个叫arg的表中，#arg 表示传入参数的个数。<br/></p><figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/><span class=\"line\">9</span><br/><span class=\"line\">10</span><br/><span class=\"line\">11</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">function average(...)</span><br/><span class=\"line\">   result = 0</span><br/><span class=\"line\">   local arg={...}</span><br/><span class=\"line\">   for i,v in ipairs(arg) do</span><br/><span class=\"line\">      result = result + v</span><br/><span class=\"line\">   end</span><br/><span class=\"line\">   print(&#34;总共传入 &#34; .. #arg .. &#34; 个数&#34;)</span><br/><span class=\"line\">   return result/#arg</span><br/><span class=\"line\">end</span><br/><span class=\"line\"></span><br/><span class=\"line\">print(&#34;平均值为&#34;,average(10,5,3,4,5,6))</span><br/></pre></td></tr></tbody></table></figure><p></p>\n<h1 id=\"字符串操作\"><a href=\"#字符串操作\" class=\"headerlink\" title=\"字符串操作\"></a>字符串操作</h1><ul>\n<li><p>..<br/>连接两个字符串</p>\n</li>\n<li><p>＃<br/>一元运算符，返回字符串或表的长度。</p>\n</li>\n</ul>\n<h1 id=\"模块\"><a href=\"#模块\" class=\"headerlink\" title=\"模块\"></a>模块</h1><p>模块是由变量、函数等已知元素组成的 table，类似java的类。<br/></p><figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/><span class=\"line\">9</span><br/><span class=\"line\">10</span><br/><span class=\"line\">11</span><br/><span class=\"line\">12</span><br/><span class=\"line\">13</span><br/><span class=\"line\">14</span><br/><span class=\"line\">15</span><br/><span class=\"line\">16</span><br/><span class=\"line\">17</span><br/><span class=\"line\">18</span><br/><span class=\"line\">19</span><br/><span class=\"line\">20</span><br/><span class=\"line\">21</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">-- 文件名为 module.lua</span><br/><span class=\"line\">-- 定义一个名为 module 的模块</span><br/><span class=\"line\">module = {}</span><br/><span class=\"line\"> </span><br/><span class=\"line\">-- 定义一个常量</span><br/><span class=\"line\">module.constant = &#34;这是一个常量&#34;</span><br/><span class=\"line\"> </span><br/><span class=\"line\">-- 定义一个函数</span><br/><span class=\"line\">function module.func1()</span><br/><span class=\"line\">    io.write(&#34;这是一个公有函数！n&#34;)</span><br/><span class=\"line\">end</span><br/><span class=\"line\"> </span><br/><span class=\"line\">local function func2()</span><br/><span class=\"line\">    print(&#34;这是一个私有函数！&#34;)</span><br/><span class=\"line\">end</span><br/><span class=\"line\"> </span><br/><span class=\"line\">function module.func3()</span><br/><span class=\"line\">    func2()</span><br/><span class=\"line\">end</span><br/><span class=\"line\"> </span><br/><span class=\"line\">return module</span><br/></pre></td></tr></tbody></table></figure><p></p>\n<p><br/><br/>Lua提供了一个名为require的函数用来加载模块:<br/></p><figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">require(&#34;&lt;模块名&gt;&#34;)</span><br/><span class=\"line\">或者</span><br/><span class=\"line\">require &#34;&lt;模块名&gt;&#34;</span><br/></pre></td></tr></tbody></table></figure><p></p>\n<p>还给加载的模块定义一个别名变量，方便调用: local m = require(“module”)</p>\n<h2 id=\"加载机制\"><a href=\"#加载机制\" class=\"headerlink\" title=\"加载机制\"></a>加载机制</h2><p>对于自定义的模块，模块文件不是放在哪个文件目录都行，函数 require 有它自己的文件路径加载策略，它会尝试从 Lua 文件或 C 程序库中加载模块。<br/>当 Lua 启动后，会以环境变量 LUA_PATH 的值来初始环境变量用户加载模块。</p>","text":" 两个减号是单行注释:1-- 注释内容 多行注释:1234--[[ 注释内容注释内容--]] 数据类型Lua是动态类型语言，变量不要类型定义,只需要为变量赋值。值可以存储在变量中，作为参数传递或结果返回。 nil这个最简单，只有值nil属于该类，表示一个无效值（在条件表达式中相当...","link":"","photos":[],"count_time":{"symbolsCount":"3.6k","symbolsTime":"3 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">数据类型</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#nil\"><span class=\"toc-text\">nil</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#boolean\"><span class=\"toc-text\">boolean</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#number\"><span class=\"toc-text\">number</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#string\"><span class=\"toc-text\">string</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#function\"><span class=\"toc-text\">function</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#userdata\"><span class=\"toc-text\">userdata</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#thread\"><span class=\"toc-text\">thread</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#table\"><span class=\"toc-text\">table</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%8F%98%E9%87%8F\"><span class=\"toc-text\">变量</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E8%B5%8B%E5%80%BC\"><span class=\"toc-text\">赋值</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%A4%9A%E4%B8%AA%E5%8F%98%E9%87%8F%E8%B5%8B%E5%80%BC\"><span class=\"toc-text\">多个变量赋值</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%BE%AA%E7%8E%AF\"><span class=\"toc-text\">循环</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#while\"><span class=\"toc-text\">while</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#for\"><span class=\"toc-text\">for</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#repeat%E2%80%A6until\"><span class=\"toc-text\">repeat…until</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6\"><span class=\"toc-text\">流程控制</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#if\"><span class=\"toc-text\">if</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#if%E2%80%A6else\"><span class=\"toc-text\">if…else</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#if%E2%80%A6elseif%E2%80%A6else\"><span class=\"toc-text\">if…elseif…else</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">函数</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8F%AF%E5%8F%98%E5%8F%82%E6%95%B0\"><span class=\"toc-text\">可变参数</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">字符串操作</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%A8%A1%E5%9D%97\"><span class=\"toc-text\">模块</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6\"><span class=\"toc-text\">加载机制</span></a></li></ol></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"lua","uid":"df60e476b394b1dd4755ec96c53302ff","slug":"zl/2016-01-01-746_lua","date":"2024-04-03T03:47:35.993Z","updated":"2024-04-03T03:47:35.995Z","comments":true,"path":"api/articles/zl/2016-01-01-746_lua.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"基本使用 * 行注释用-- * 数组和字典都是table，数组下标不是从0开始的，而是从1开始的 * 函数调用只有一个参数，并且这个参数是字符串字面量或者table构造器时，可以省略括号 * unpack函数最重要的使用场景就是generic call，即函数的动态参数调用 * ...","link":"","photos":[],"count_time":{"symbolsCount":"1.6k","symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"利用 nginx_lua 定制高效灵活的专属WAF","uid":"994fc3de17c65e2ae51e44a27bc34a37","slug":"zl/2016-01-01-745_利用 nginx_lua 定制高效灵活的专属WAF","date":"2024-04-03T03:47:35.992Z","updated":"2024-04-03T03:47:35.993Z","comments":true,"path":"api/articles/zl/2016-01-01-745_利用 nginx_lua 定制高效灵活的专属WAF.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"0x01 什么是Lua123关于Lua,就不用多说了吧,想必朋友们应该也都非常熟悉了,众多脚本语言中的一种,不过相对于其它脚本来说,性能要略高一点在nginx中也提供了一个nginx_lua的模块,主要是为了方便用户,可以灵活的通过lua来扩展nginx功能,比如lua_waf有...","link":"","photos":[],"count_time":{"symbolsCount":"4.5k","symbolsTime":"4 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}