{"title":"Luajit反编译之探索记","uid":"22062178d617aba31a34cf58f7508d61","slug":"zl/2016-01-01-732_Luajit反编译之探索记","date":"2024-04-03T03:47:35.977Z","updated":"2024-04-03T03:47:35.982Z","comments":true,"path":"api/articles/zl/2016-01-01-732_Luajit反编译之探索记.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<div class=\"post\">\n  <p>由于工作需求，要反编译一个luajit编译过的文件。百度反编译luajit，得到的信息是目前没有此类成熟的反编译器。所以，如果你用luajit编译了代码，基本上不用担心被别人破解（2015.12）。</p>\n<p>虽然没有luaj反编译器，但是不代表反编译不可能。至少，人肉反编译是可以的，哈。因为我只需要反编译一个文件，所以采取人肉的方式，也许是可行的。</p>\n<p>首先，在github上面找到了唯一的一个项目是关于<a href=\"https://github.com/bobsayshilol/luajit-decomp\">反编译luaj的项目</a>，这个作者写了个工具，可以把手头上的代码翻译成可以可以阅读的模式。（在win/linux下可以直接执行他的工具，他的工具用的是AutoIt脚本写的）</p>\n<p>通过阅读他的源码，才知道这个工具首先是用luajit的命令行工具，把字节码转换成可读的模式：</p>\n<p><code class=\"highlighter-rouge\">luajit -bl test.lua test.txt</code></p>\n<p>翻译的思路，就是根据luajit提供的指令表，把指令翻译成对应的lua源码，例如， 对这句指令 <strong>MOV\tdst\tvar</strong>，翻译成 <code class=\"highlighter-rouge\">local dst = var</code></p>\n<p>在对luajit指令的翻译过程，最麻烦的是，lua里的function被重新整理，原来是树状结构的（毕竟大家总是会在function里嵌套function），编译后变成线性的。</p>\n<p>这个项目的作者没有解决这个问题，反编译出来的内容，是无数个function，而且没有排版，function里的指令也只是单纯的翻译。所以看着翻译后的代码（三千多行），也极是头疼。</p>\n<p>但是这是唯一的线索，所以只能硬着头皮做了。在阅读和整理的过程中，我也懂得去luajit的<a href=\"http://wiki.luajit.org/Bytecode-2.0\">wiki</a>上查找指令的意思，发现这个作者写的工具bug不少，一些比较难理解的地方，一般都是翻译错了，所以还得再过一遍指令。</p>\n<p>作者自己也说了，这个项目只是够用他自己的需求而已。</p>\n<p>在经过整合代码后，终于人肉地把线性的function列表整理回树状的。事实上这块是有规则可循的，所以写一个工具来转换，肯定是可以的。</p>\n<p>当整个结构和代码看似都整理好后，我面临着一个大问题。function里有些变量是上某层function的，怎么去定位这个变量呢，由于这样的变量不少，如果不能定位准确，那可能前功要尽弃。</p>\n<p>luajit的命令行工具<code class=\"highlighter-rouge\">luajit -bl</code>指令翻译出来的可读字节码并没有包含这层信息。但是文件要执行，必然需要这层信息，也就是说<code class=\"highlighter-rouge\">luajit -bl</code>没有翻译完所有信息。</p>\n<p>上面提到的那个反编译项目，作者在他的说明里提到了这点，说他也不知道有没有可能解决这个问题。</p>\n<p>我在谷歌上，试着再去搜索luajit，翻遍了也没有找到相关的，但是找到了另一个<a href=\"https://github.com/franko/luajit-lang-toolkit\">luajit-language-toolkit</a>，这个项目的存在也挺特别，只是单纯地把luajit的一些功能（编译功能）用lua源码重新实现一遍。（作者说，单纯是提供学习）</p>\n<p>看着使用方法，感觉好像没有卵用，但是在说明的最后一部分，看到了希望，这个工具除了能像<code class=\"highlighter-rouge\">luajit -bl</code>一样外，还可以进一步地，把函数内的全局变量表引用的信息也翻译出来了。</p>\n<p>有了这件法宝，接下来我就顺利得反编译出这个源码了（1千多行的代码）</p>\n</div>\n<script>\n  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){\n  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),\n  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)\n  })(window,document,'script','https://www.google-analytics.com/analytics.js','ga');\n\n  ga('create', 'UA-81483447-1', 'auto');\n  ga('send', 'pageview');\n</script>\n<pre><code>&lt;div class=&quot;ds-thread&quot; data-thread-key=&quot;Luajit反编译之探索记&quot; data-title=&quot;Luajit反编译之探索记&quot; data-url=&quot;/log/2016/05/17/the-journey-with-luajit.html&quot;&gt;&lt;/div&gt;\n</code></pre>\n<script type=\"text/javascript\">\nvar duoshuoQuery = {short_name:\"jaryguo\"};\n\t(function() {\n\t\tvar ds = document.createElement('script');\n\t\tds.type = 'text/javascript';ds.async = true;\n\t\tds.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//static.duoshuo.com/embed.js';\n\t\tds.charset = 'UTF-8';\n\t\t(document.getElementsByTagName('head')[0] \n\t\t || document.getElementsByTagName('body')[0]).appendChild(ds);\n\t})();\n</script>","text":" 由于工作需求，要反编译一个luajit编译过的文件。百度反编译luajit，得到的信息是目前没有此类成熟的反编译器。所以，如果你用luajit编译了代码，基本上不用担心被别人破解（2015.12）。 虽然没有luaj反编译器，但是不代表反编译不可能。至少，人肉反编译是可以的，哈...","link":"","photos":[],"count_time":{"symbolsCount":"2.3k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Lua学习笔记","uid":"d112c00bf05f368c0020529ea6c8efaf","slug":"zl/2016-01-01-733_Lua学习笔记","date":"2024-04-03T03:47:35.982Z","updated":"2024-04-03T03:47:35.983Z","comments":true,"path":"api/articles/zl/2016-01-01-733_Lua学习笔记.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":" Lua在设计上，从一开始就把简洁、高效、可移植性、可嵌入型、可扩展性等作为自己的目标。 数据类型 表、函数、线程、以及完全用户数据在 Lua 中被称为对象：变量并不真的持有它们的值，而仅保存了对这些对象的引用。 赋值、参数传递、函数返回，都是针对引用而不是针对值的操作， 这些操...","link":"","photos":[],"count_time":{"symbolsCount":"2.8k","symbolsTime":"3 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"cocos2dx lua 绑定详解与实战","uid":"adba9f75759928073dc25e3c54ccdb5c","slug":"zl/2016-01-01-731_cocos2dx lua 绑定详解与实战","date":"2024-04-03T03:47:35.976Z","updated":"2024-04-03T03:47:35.976Z","comments":true,"path":"api/articles/zl/2016-01-01-731_cocos2dx lua 绑定详解与实战.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"我们平时在开发cocos2dx lua游戏的时候的，会遇到这样的情况： 在c++层定义了一些类，我们需要将这些类导出给Lua来使用，从而完成在c++层实现起来容易的需求，这个时候就需要将整个类作为模块导出。 而Cocos2d-x正是采用的这种思想，将Cocos中的类导出供用户使用...","link":"","photos":[],"count_time":{"symbolsCount":"14k","symbolsTime":"12 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}