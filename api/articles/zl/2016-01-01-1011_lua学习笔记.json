{"title":"lua学习笔记","uid":"329726c67d21b0b62fc4af0c5b68cfed","slug":"zl/2016-01-01-1011_lua学习笔记","date":"2024-04-03T03:47:32.964Z","updated":"2024-04-03T03:47:32.965Z","comments":true,"path":"api/articles/zl/2016-01-01-1011_lua学习笔记.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<nav id=\"TableOfContents\"></nav>\n<pre><code>            &lt;p&gt;lua是一门轻量级的脚本语言…好像比较适合写游戏？在 &lt;a href=&quot;https://github.com/Mogara/QSanguosha&quot;&gt;太阳神三国杀&lt;/a&gt; 中见过很多lua脚本。 由于&lt;a href=&quot;https://splash.readthedocs.io/en/stable/scripting-tutorial.html&quot;&gt;splash&lt;/a&gt; 的渲染脚本需要用lua来写，因此来学习一波。&lt;/p&gt;\n</code></pre>\n<p>直接上语法…看到了python和pascal的影子orz</p>\n<pre><code>-- Two dashes start a one-line comment.\n<p>–[[<br />\nAdding two ['s and ]'s makes it a<br />\nmulti-line comment.<br />\n–]]</p>\n<hr />\n<h2 id=\"1-variables-and-flow-control\"><a class=\"markdownIt-Anchor\" href=\"#1-variables-and-flow-control\"></a> – 1. Variables and flow control.</h2>\n<p>num = 42  – All numbers are doubles.<br />\n– Don't freak out, 64-bit doubles have 52 bits for<br />\n– storing exact int values; machine precision is<br />\n– not a problem for ints that need &lt; 52 bits.</p>\n<p>s = 'walternate'  – Immutable strings like Python.<br />\nt = &quot;double-quotes are also fine&quot;<br />\nu = [[ Double brackets<br />\nstart and end<br />\nmulti-line strings.]]<br />\nt = nil  – Undefines t; Lua has garbage collection.</p>\n<p>– Blocks are denoted with keywords like do/end:<br />\nwhile num &lt; 50 do<br />\nnum = num + 1  – No ++ or += type operators.<br />\nend</p>\n<p>– If clauses:<br />\nif num &gt; 40 then<br />\nprint('over 40')<br />\nelseif s ~= 'walternate' then  – ~= is not equals.<br />\n– Equality check is == like Python; ok for strs.<br />\nio.write('not over 40n')  – Defaults to stdout.<br />\nelse<br />\n– Variables are global by default.<br />\nthisIsGlobal = 5  – Camel case is common.</p>\n<p>– How to make a variable local:<br />\nlocal line = io.read()  – Reads next stdin line.</p>\n<p>– String concatenation uses the … operator:<br />\nprint('Winter is coming, ' … line)<br />\nend</p>\n<p>– Undefined variables return nil.<br />\n– This is not an error:<br />\nfoo = anUnknownVariable  – Now foo = nil.</p>\n<p>aBoolValue = false</p>\n<p>– Only nil and false are falsy; 0 and '' are true!<br />\nif not aBoolValue then print('twas false') end</p>\n<p>– 'or' and 'and' are short-circuited.<br />\n– This is similar to the a?b:c operator in C/js:<br />\nans = aBoolValue and 'yes' or 'no'  –&gt; 'no'</p>\n<p>karlSum = 0<br />\nfor i = 1, 100 do  – The range includes both ends.<br />\nkarlSum = karlSum + i<br />\nend</p>\n<p>– Use &quot;100, 1, -1&quot; as the range to count down:<br />\nfredSum = 0<br />\nfor j = 100, 1, -1 do fredSum = fredSum + j end</p>\n<p>– In general, the range is begin, end[, step].</p>\n<p>– Another loop construct:<br />\nrepeat<br />\nprint('the way of the future')<br />\nnum = num - 1<br />\nuntil num == 0</p>\n<hr />\n<h2 id=\"2-functions\"><a class=\"markdownIt-Anchor\" href=\"#2-functions\"></a> – 2. Functions.</h2>\n<p>function fib(n)<br />\nif n &lt; 2 then return 1 end<br />\nreturn fib(n - 2) + fib(n - 1)<br />\nend</p>\n<p>– Closures and anonymous functions are ok:<br />\nfunction adder(x)<br />\n– The returned function is created when adder is<br />\n– called, and remembers the value of x:<br />\nreturn function (y) return x + y end<br />\nend<br />\na1 = adder(9)<br />\na2 = adder(36)<br />\nprint(a1(16))  –&gt; 25<br />\nprint(a2(64))  –&gt; 100</p>\n<p>– Returns, func calls, and assignments all work<br />\n– with lists that may be mismatched in length.<br />\n– Unmatched receivers are nil;<br />\n– unmatched senders are discarded.</p>\n<p>x, y, z = 1, 2, 3, 4<br />\n– Now x = 1, y = 2, z = 3, and 4 is thrown away.</p>\n<p>function bar(a, b, c)<br />\nprint(a, b, c)<br />\nreturn 4, 8, 15, 16, 23, 42<br />\nend</p>\n<p>x, y = bar('zaphod')  –&gt; prints &quot;zaphod  nil nil&quot;<br />\n– Now x = 4, y = 8, values 15…42 are discarded.</p>\n<p>– Functions are first-class, may be local/global.<br />\n– These are the same:<br />\nfunction f(x) return x * x end<br />\nf = function (x) return x * x end</p>\n<p>– And so are these:<br />\nlocal function g(x) return math.sin(x) end<br />\nlocal g; g  = function (x) return math.sin(x) end<br />\n– the 'local g' decl makes g-self-references ok.</p>\n<p>– Trig funcs work in radians, by the way.</p>\n<p>– Calls with one string param don't need parens:<br />\nprint 'hello'  – Works fine.</p>\n<hr />\n<h2 id=\"3-tables\"><a class=\"markdownIt-Anchor\" href=\"#3-tables\"></a> – 3. Tables.</h2>\n<p>– Tables = Lua's only compound data structure;<br />\n–          they are associative arrays.<br />\n– Similar to php arrays or js objects, they are<br />\n– hash-lookup dicts that can also be used as lists.</p>\n<p>– Using tables as dictionaries / maps:</p>\n<p>– Dict literals have string keys by default:<br />\nt = &#123;key1 = 'value1', key2 = false&#125;</p>\n<p>– String keys can use js-like dot notation:<br />\nprint(t.key1)  – Prints 'value1'.<br />\nt.newKey = &#123;&#125;  – Adds a new key/value pair.<br />\nt.key2 = nil   – Removes key2 from the table.</p>\n<p>– Literal notation for any (non-nil) value as key:<br />\nu = &#123;['@!#'] = 'qbert', [&#123;&#125;] = 1729, [6.28] = 'tau'&#125;<br />\nprint(u[6.28])  – prints &quot;tau&quot;</p>\n<p>– Key matching is basically by value for numbers<br />\n– and strings, but by identity for tables.<br />\na = u['@!#']  – Now a = 'qbert'.<br />\nb = u[&#123;&#125;]     – We might expect 1729, but it's nil:<br />\n– b = nil since the lookup fails. It fails<br />\n– because the key we used is not the same object<br />\n– as the one used to store the original value. So<br />\n– strings &amp; numbers are more portable keys.</p>\n<p>– A one-table-param function call needs no parens:<br />\nfunction h(x) print(x.key1) end<br />\nh&#123;key1 = 'Sonmi~451'&#125;  – Prints 'Sonmi~451'.</p>\n<p>for key, val in pairs(u) do  – Table iteration.<br />\nprint(key, val)<br />\nend</p>\n<p>– _G is a special table of all globals.<br />\nprint(_G['_G'] == _G)  – Prints 'true'.</p>\n<p>– Using tables as lists / arrays:</p>\n<p>– List literals implicitly set up int keys:<br />\nv = &#123;'value1', 'value2', 1.21, 'gigawatts'&#125;<br />\nfor i = 1, #v do  – #v is the size of v for lists.<br />\nprint(v[i])  – Indices start at 1 !! SO CRAZY!<br />\nend<br />\n– A 'list' is not a real type. v is just a table<br />\n– with consecutive integer keys, treated as a list.</p>\n<hr />\n<h2 id=\"31-metatables-and-metamethods\"><a class=\"markdownIt-Anchor\" href=\"#31-metatables-and-metamethods\"></a> – 3.1 Metatables and metamethods.</h2>\n<p>– A table can have a metatable that gives the table<br />\n– operator-overloadish behavior. Later we'll see<br />\n– how metatables support js-prototypey behavior.</p>\n<p>f1 = &#123;a = 1, b = 2&#125;  – Represents the fraction a/b.<br />\nf2 = &#123;a = 2, b = 3&#125;</p>\n<p>– This would fail:<br />\n– s = f1 + f2</p>\n<p>metafraction = &#123;&#125;<br />\nfunction metafraction.__add(f1, f2)<br />\nsum = &#123;&#125;<br />\nsum.b = f1.b * f2.b<br />\nsum.a = f1.a * f2.b + f2.a * f1.b<br />\nreturn sum<br />\nend</p>\n<p>setmetatable(f1, metafraction)<br />\nsetmetatable(f2, metafraction)</p>\n<p>s = f1 + f2  – call __add(f1, f2) on f1's metatable</p>\n<p>– f1, f2 have no key for their metatable, unlike<br />\n– prototypes in js, so you must retrieve it as in<br />\n– getmetatable(f1). The metatable is a normal table<br />\n– with keys that Lua knows about, like __add.</p>\n<p>– But the next line fails since s has no metatable:<br />\n– t = s + s<br />\n– Class-like patterns given below would fix this.</p>\n<p>– An __index on a metatable overloads dot lookups:<br />\ndefaultFavs = &#123;animal = 'gru', food = 'donuts'&#125;<br />\nmyFavs = &#123;food = 'pizza'&#125;<br />\nsetmetatable(myFavs, &#123;__index = defaultFavs&#125;)<br />\neatenBy = myFavs.animal  – works! thanks, metatable</p>\n<p>– Direct table lookups that fail will retry using<br />\n– the metatable's __index value, and this recurses.</p>\n<p>– An __index value can also be a function(tbl, key)<br />\n– for more customized lookups.</p>\n<p>– Values of __index,add, … are called metamethods.<br />\n– Full list. Here a is a table with the metamethod.</p>\n<p>– __add(a, b)                     for a + b<br />\n– __sub(a, b)                     for a - b<br />\n– __mul(a, b)                     for a * b<br />\n– __div(a, b)                     for a / b<br />\n– __mod(a, b)                     for a % b<br />\n– __pow(a, b)                     for a ^ b<br />\n– __unm(a)                        for -a<br />\n– __concat(a, b)                  for a … b<br />\n– __len(a)                        for #a<br />\n– __eq(a, b)                      for a == b<br />\n– __lt(a, b)                      for a &lt; b<br />\n– __le(a, b)                      for a &lt;= b<br />\n– __index(a, b)  &lt;fn or a table&gt;  for a.b<br />\n– __newindex(a, b, c)             for a.b = c<br />\n– __call(a, …)                  for a(…)</p>\n<hr />\n<h2 id=\"32-class-like-tables-and-inheritance\"><a class=\"markdownIt-Anchor\" href=\"#32-class-like-tables-and-inheritance\"></a> – 3.2 Class-like tables and inheritance.</h2>\n<p>– Classes aren't built in; there are different ways<br />\n– to make them using tables and metatables.</p>\n<p>– Explanation for this example is below it.</p>\n<p>Dog = &#123;&#125;                                   – 1.</p>\n<p>function Dog:new()                         – 2.<br />\nnewObj = &#123;sound = 'woof'&#125;                – 3.<br />\nself.__index = self                      – 4.<br />\nreturn setmetatable(newObj, self)        – 5.<br />\nend</p>\n<p>function Dog:makeSound()                   – 6.<br />\nprint('I say ' … self.sound)<br />\nend</p>\n<p>mrDog = Dog:new()                          – 7.<br />\nmrDog:makeSound()  – 'I say woof'         – 8.</p>\n<p>– 1. Dog acts like a class; it's really a table.<br />\n– 2. function tablename:fn(…) is the same as<br />\n–    function tablename.fn(self, …)<br />\n–    The : just adds a first arg called self.<br />\n–    Read 7 &amp; 8 below for how self gets its value.<br />\n– 3. newObj will be an instance of class Dog.<br />\n– 4. self = the class being instantiated. Often<br />\n–    self = Dog, but inheritance can change it.<br />\n–    newObj gets self's functions when we set both<br />\n–    newObj's metatable and self's __index to self.<br />\n– 5. Reminder: setmetatable returns its first arg.<br />\n– 6. The : works as in 2, but this time we expect<br />\n–    self to be an instance instead of a class.<br />\n– 7. Same as Dog.new(Dog), so self = Dog in new().<br />\n– 8. Same as mrDog.makeSound(mrDog); self = mrDog.</p>\n<hr />\n<p>– Inheritance example:</p>\n<p>LoudDog = Dog:new()                           – 1.</p>\n<p>function LoudDog:makeSound()<br />\ns = self.sound … ' '                       – 2.<br />\nprint(s … s … s)<br />\nend</p>\n<p>seymour = LoudDog:new()                       – 3.<br />\nseymour:makeSound()  – 'woof woof woof'      – 4.</p>\n<p>– 1. LoudDog gets Dog's methods and variables.<br />\n– 2. self has a 'sound' key from new(), see 3.<br />\n– 3. Same as LoudDog.new(LoudDog), and converted to<br />\n–    Dog.new(LoudDog) as LoudDog has no 'new' key,<br />\n–    but does have __index = Dog on its metatable.<br />\n–    Result: seymour's metatable is LoudDog, and<br />\n–    LoudDog.__index = LoudDog. So seymour.key will<br />\n–    = seymour.key, LoudDog.key, Dog.key, whichever<br />\n–    table is the first with the given key.<br />\n– 4. The 'makeSound' key is found in LoudDog; this<br />\n–    is the same as LoudDog.makeSound(seymour).</p>\n<p>– If needed, a subclass's new() is like the base's:<br />\nfunction LoudDog:new()<br />\nnewObj = &#123;&#125;<br />\n– set up newObj<br />\nself.__index = self<br />\nreturn setmetatable(newObj, self)<br />\nend</p>\n<hr />\n<h2 id=\"4-modules\"><a class=\"markdownIt-Anchor\" href=\"#4-modules\"></a> – 4. Modules.</h2>\n<p>–[[ I'm commenting out this section so the rest of<br />\n–   this script remains runnable.<br />\n– Suppose the file mod.lua looks like this:<br />\nlocal M = &#123;&#125;</p>\n<p>local function sayMyName()<br />\nprint('Hrunkner')<br />\nend</p>\n<p>function M.sayHello()<br />\nprint('Why hello there')<br />\nsayMyName()<br />\nend</p>\n<p>return M</p>\n<p>– Another file can use mod.lua's functionality:<br />\nlocal mod = require('mod')  – Run the file mod.lua.</p>\n<p>– require is the standard way to include modules.<br />\n– require acts like:     (if not cached; see below)<br />\nlocal mod = (function ()<br />\n&lt;contents of mod.lua&gt;<br />\nend)()<br />\n– It's like mod.lua is a function body, so that<br />\n– locals inside mod.lua are invisible outside it.</p>\n<p>– This works because mod here = M in mod.lua:<br />\nmod.sayHello()  – Says hello to Hrunkner.</p>\n<p>– This is wrong; sayMyName only exists in mod.lua:<br />\nmod.sayMyName()  – error</p>\n<p>– require's return values are cached so a file is<br />\n– run at most once, even when require'd many times.</p>\n<p>– Suppose mod2.lua contains &quot;print('Hi!')&quot;.<br />\nlocal a = require('mod2')  – Prints Hi!<br />\nlocal b = require('mod2')  – Doesn't print; a=b.</p>\n<p>– dofile is like require without caching:<br />\ndofile('mod2.lua')  –&gt; Hi!<br />\ndofile('mod2.lua')  –&gt; Hi! (runs it again)</p>\n<p>– loadfile loads a lua file but doesn't run it yet.<br />\nf = loadfile('mod2.lua')  – Call f() to run it.</p>\n<p>– loadstring is loadfile for strings.<br />\ng = loadstring('print(343)')  – Returns a function.<br />\ng()  – Prints out 343; nothing printed before now.</p>\n<p>–]]</p>\n<hr />\n<h2 id=\"5-references\"><a class=\"markdownIt-Anchor\" href=\"#5-references\"></a> – 5. References.</h2>\n<p>–[[</p>\n<p>I was excited to learn Lua so I could make games<br />\nwith the Löve 2D game engine. That's the why.</p>\n<p>I started with BlackBulletIV's Lua for programmers.<br />\nNext I read the official Programming in Lua book.<br />\nThat's the how.</p>\n<p>It might be helpful to check out the Lua short<br />\nreference on <a href=\"http://lua-users.org\">lua-users.org</a>.</p>\n<p>The main topics not covered are standard libraries:</p>\n<ul class=\"lvl-0\">\n<li class=\"lvl-3\">\n<p>string library</p>\n</li>\n<li class=\"lvl-3\">\n<p>table library</p>\n</li>\n<li class=\"lvl-3\">\n<p>math library</p>\n</li>\n<li class=\"lvl-3\">\n<p>io library</p>\n</li>\n<li class=\"lvl-3\">\n<p>os library</p>\n</li>\n</ul>\n<p>By the way, this entire file is valid Lua; save it<br />\nas learn.lua and run it with &quot;lua learn.lua&quot; !</p>\n<p>This was first written for <a href=\"http://tylerneylon.com\">tylerneylon.com</a>. It's<br />\nalso available as a github gist. Tutorials for other<br />\nlanguages, in the same style as this one, are here:</p>\n<p><a href=\"http://learnxinyminutes.com/\">http://learnxinyminutes.com/</a></p>\n<p>Have fun with Lua!</p>\n<p>–]]<br />\n</code></pre></p>\n<div class=\"zs-modal-bg\"></div>\n<div class=\"zs-modal-box\">\n\t<div class=\"zs-modal-head\">\n\t\t<button type=\"button\" class=\"close\">×</button>\n<pre><code>        &lt;p class=&quot;tip&quot;&gt;&lt;i&gt;&lt;/i&gt;&lt;span&gt;真诚赞赏，手留余香&lt;/span&gt;&lt;/p&gt;\n\t\n\n&lt;/div&gt;\n&lt;div class=&quot;zs-modal-body&quot;&gt;\n\t&lt;div class=&quot;zs-modal-btns&quot;&gt;\n\t\t&lt;button class=&quot;btn btn-blink&quot; data-num=&quot;2&quot;&gt;2元&lt;/button&gt;\n\t\t&lt;button class=&quot;btn btn-blink&quot; data-num=&quot;5&quot;&gt;5元&lt;/button&gt;\n\t\t&lt;button class=&quot;btn btn-blink&quot; data-num=&quot;10&quot;&gt;10元&lt;/button&gt;\n\t\t&lt;button class=&quot;btn btn-blink&quot; data-num=&quot;50&quot;&gt;50元&lt;/button&gt;\n\t\t&lt;button class=&quot;btn btn-blink&quot; data-num=&quot;100&quot;&gt;100元&lt;/button&gt;\n\t\t&lt;button class=&quot;btn btn-blink&quot; data-num=&quot;1&quot;&gt;任意金额&lt;/button&gt;\n\t&lt;/div&gt;\n\t&lt;div class=&quot;zs-modal-pay&quot;&gt;\n\t\t&lt;button class=&quot;btn btn-bred&quot; id=&quot;pay-text&quot;&gt;2元&lt;/button&gt;\n\t\t&lt;p&gt;使用&lt;span id=&quot;pay-type&quot;&gt;微信&lt;/span&gt;扫描二维码完成支付&lt;/p&gt;\n\t\t&lt;img src=&quot;https://111qqz.github.io//img/reward/wechat-2.png&quot; id=&quot;pay-image&quot;/&gt;\n\t&lt;/div&gt;\n&lt;/div&gt;\n&lt;div class=&quot;zs-modal-footer&quot;&gt;\n\t&lt;label&gt;&lt;input type=&quot;radio&quot; name=&quot;zs-type&quot; value=&quot;wechat&quot; class=&quot;zs-type&quot; checked=&quot;checked&quot;/&gt;&lt;span&gt;&lt;span class=&quot;zs-wechat&quot;&gt;&lt;img src=&quot;https://111qqz.github.io//img/reward/wechat-btn.png&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/label&gt;\n\t&lt;label&gt;&lt;input type=&quot;radio&quot; name=&quot;zs-type&quot; value=&quot;alipay&quot; class=&quot;zs-type&quot; class=&quot;zs-alipay&quot;/&gt;&lt;img src=&quot;https://111qqz.github.io//img/reward/alipay-btn.png&quot;/&gt;&lt;/label&gt;\n&lt;/div&gt;\n</code></pre>\n</div>\n<script type=\"text/javascript\" src=\"/js/reward.js\"></script>\n<pre><code>            &lt;hr/&gt;\n</code></pre>\n<div id=\"git-comments\"></div>\n<link rel=\"stylesheet\" href=\"https://imsun.github.io/gitment/style/default.css\"/>\n<script src=\"https://ihtcboy.com/script/gitment.browser.js\"></script>\n<script>\n  var gitment = new Gitment({\n    id: decodeURI(window.location.pathname),  \n    owner: '111qqz',\n    repo: '111qqz.github.io',\n    oauth: {\n      client_id: '8839ce5e58d5197e2490',\n      client_secret: '2d475a8a7e27a8b509847a6c60f692b8cbaa274e',\n    }\n  })\n  gitment.render('git-comments')\n</script>","text":" &lt;p&gt;lua是一门轻量级的脚本语言…好像比较适合写游戏？在 &lt;a href=&quot;https://github.com/Mogara/QSanguosha&quot;&gt;太阳神三国杀&lt;/a&gt; 中见过很多lua脚本。 由于&lt;a hre...","link":"","photos":[],"count_time":{"symbolsCount":"14k","symbolsTime":"12 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-variables-and-flow-control\"><span class=\"toc-text\"> – 1. Variables and flow control.</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-functions\"><span class=\"toc-text\"> – 2. Functions.</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-tables\"><span class=\"toc-text\"> – 3. Tables.</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#31-metatables-and-metamethods\"><span class=\"toc-text\"> – 3.1 Metatables and metamethods.</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#32-class-like-tables-and-inheritance\"><span class=\"toc-text\"> – 3.2 Class-like tables and inheritance.</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-modules\"><span class=\"toc-text\"> – 4. Modules.</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-references\"><span class=\"toc-text\"> – 5. References.</span></a></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Lua","uid":"15b0cdc6d03f6c3f6bf8d3a7ff197317","slug":"zl/2016-01-01-1010_[Lua","date":"2024-04-03T03:47:32.964Z","updated":"2024-04-03T03:47:32.964Z","comments":true,"path":"api/articles/zl/2016-01-01-1010_[Lua.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"读书笔记： Programming in Lua, 4th Edition. Account = &#123; balance = 0, withdraw = function(self, v) self.balance = self.balance - v end &#125;...","link":"","photos":[],"count_time":{"symbolsCount":"3.5k","symbolsTime":"3 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Redis Lua脚本小学教程","uid":"c411cdcc3a7f4e11b8b34c0cbe3fb292","slug":"zl/2016-01-01-100_Redis Lua脚本小学教程","date":"2024-04-03T03:47:32.963Z","updated":"2024-04-03T03:47:32.964Z","comments":true,"path":"api/articles/zl/2016-01-01-100_Redis Lua脚本小学教程.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"Redis提供了丰富的指令集，但是仍然不能满足所有场景，在一些特定场景下，需要自定义一些指定来完成某些功能。因此，Redis提供了Lua脚本支持，用户可以自己编写脚本来实现想要的功能。 什么是Lua？Lua是一种功能强大的，高效，轻量级，可嵌入的脚本语言。它是动态类型语言，通过使...","link":"","photos":[],"count_time":{"symbolsCount":"2.3k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}