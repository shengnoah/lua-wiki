{"title":"利用 nginx_lua 定制高效灵活的专属WAF","uid":"994fc3de17c65e2ae51e44a27bc34a37","slug":"zl/2016-01-01-745_利用 nginx_lua 定制高效灵活的专属WAF","date":"2024-04-03T03:47:35.992Z","updated":"2024-04-03T03:47:35.993Z","comments":true,"path":"api/articles/zl/2016-01-01-745_利用 nginx_lua 定制高效灵活的专属WAF.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<p><br/><br/>0x01 什么是Lua<br/></p><figure class=\"highlight autohotkey\"><table><tbody><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">关于Lua,就不用多说了吧,想必朋友们应该也都非常熟悉了,众多脚本语言中的一种,不过相对于其它脚本来说,性能要略高一点</div><div class=\"line\">在nginx中也提供了一个nginx_lua的模块,主要是为了方便用户,可以灵活的通过lua来扩展nginx功能,比如lu<span class=\"built_in\">a_waf</span></div><div class=\"line\">有兴趣可自行深入了解,这里就不细说了,我们今天的重点主要还是想利用它来快速部署一个简易版的Waf</div></pre></td></tr></tbody></table></figure><p></p>\n<p>0x02 这里,我还是拿之前已经编译好的lnmp环境来演示,因为等会儿要重新编译nginx,所以就直接把之前nginx的整个安装目录干掉,因为是源码编译安装的,所以也不会有啥残留[源码编译安装的好处],记得在干掉之前先把nginx服务停掉,配置文件[nginx.conf]也备份一下,方便等会儿再直接拿过来用<br/></p><figure class=\"highlight css\"><table><tbody><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">php5</span><span class=\"selector-class\">.5</span><span class=\"selector-class\">.38</span> + <span class=\"selector-tag\">mysql-5</span><span class=\"selector-class\">.5</span><span class=\"selector-class\">.32</span> + <span class=\"selector-tag\">nginx-1</span><span class=\"selector-class\">.12</span><span class=\"selector-class\">.1</span> + <span class=\"selector-tag\">centOS6</span><span class=\"selector-class\">.8_x64</span></div></pre></td></tr></tbody></table></figure><p></p>\n<figure class=\"highlight shell\"><table><tbody><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"bash\"> pkill nginx</span></div><div class=\"line\"><span class=\"bash\"> netstat -tulnp | grep <span class=\"string\">&#34;80&#34;</span></span></div><div class=\"line\"><span class=\"bash\"> cp /usr/<span class=\"built_in\">local</span>/nginx/conf/nginx.conf /root/</span></div><div class=\"line\"><span class=\"bash\"> cp /usr/<span class=\"built_in\">local</span>/nginx/conf/extra/bwapp.conf /root/</span></div></pre></td></tr></tbody></table></figure>\n<p>0x03 准备好所需的所有源码包,注意,这里的nginx尽量先不要用太高的版本,高版本自身还有些问题,在实际编译时错误的解决也比较周折,暂不推荐用<br/></p><figure class=\"highlight css\"><table><tbody><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">LuaJIT-2</span><span class=\"selector-class\">.0</span><span class=\"selector-class\">.5</span><span class=\"selector-class\">.tar</span><span class=\"selector-class\">.gz</span>\t\t\t\t</div><div class=\"line\"><span class=\"selector-tag\">lua-nginx-module-0</span><span class=\"selector-class\">.9</span><span class=\"selector-class\">.13</span><span class=\"selector-class\">.tar</span><span class=\"selector-class\">.gz</span></div><div class=\"line\"><span class=\"selector-tag\">ngx_devel_kit-0</span><span class=\"selector-class\">.2</span><span class=\"selector-class\">.19</span><span class=\"selector-class\">.tar</span><span class=\"selector-class\">.gz</span></div><div class=\"line\"><span class=\"selector-tag\">nginx-1</span><span class=\"selector-class\">.8</span><span class=\"selector-class\">.1</span><span class=\"selector-class\">.tar</span><span class=\"selector-class\">.gz</span></div></pre></td></tr></tbody></table></figure><p></p>\n<p>0x04 编译安装 LuaJIT ,lua脚本的解释器,因为这里是64位系统,防止等会儿找不到库,所以就提前把它链到32位的库中<br/></p><figure class=\"highlight shell\"><table><tbody><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"bash\"> tar xf LuaJIT-2.0.5.tar.gz</span></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> <span class=\"built_in\">cd</span> LuaJIT-2.0.5</span></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> make &amp;&amp; make install</span></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ln -s /usr/<span class=\"built_in\">local</span>/lib/libluajit-5.1.so.2 /lib64/libluajit-5.1.so.2</span></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> <span class=\"built_in\">echo</span> <span class=\"string\">&#34;LUAJIT_LIB=/usr/local/lib&#34;</span> &gt;&gt; /etc/profile</span></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> <span class=\"built_in\">echo</span> <span class=\"string\">&#34;LUAJIT_INC=/usr/local/include/luajit-2.0/&#34;</span> &gt;&gt; /etc/profile</span></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> <span class=\"built_in\">source</span> /etc/profile</span></div></pre></td></tr></tbody></table></figure><p></p>\n<p>0x05 重新编译安装nginx,其实,我自己这里的依赖库本身是不用再装的,因为之前装nginx时已经都装过了,如果你是第一次全新安装nginx,可能还是要装一下<br/></p><figure class=\"highlight shell\"><table><tbody><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> wget http://nginx.org/download/nginx-1.8.1.tar.gz</span></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> yum install pcre pcre-devel openssl openssl-devel -y</span></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> useradd -s /sbin/nologin -M nginx</span></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> tar xf ../lua-nginx-module-0.9.16.tar.gz</span></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> tar xf ../ngx_devel_kit-0.2.19.tar.gz</span></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> tar xf nginx-1.8.1.tar.gz</span></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> <span class=\"built_in\">cd</span> nginx-1.8.1</span></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ./configure --prefix=/usr/<span class=\"built_in\">local</span>/nginx-1.8.1 --user=nginx --group=nginx --with-http_ssl_module --with-http_stub_status_module --with-http_gzip_static_module --with-file-aio --with-http_dav_module --add-module=./lua-nginx-module-0.9.16 --add-module=./ngx_devel_kit-0.2.19/</span></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> make &amp;&amp; make install</span></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ln -s /usr/<span class=\"built_in\">local</span>/nginx-1.8.1/ /usr/<span class=\"built_in\">local</span>/nginx</span></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> <span class=\"built_in\">cd</span> /usr/<span class=\"built_in\">local</span>/nginx/conf/</span></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> mv nginx.conf nginx.conf.bak &amp;&amp; egrep -v <span class=\"string\">&#34;^$|#&#34;</span> nginx.conf.bak &gt;&gt; nginx.conf</span></div></pre></td></tr></tbody></table></figure><p></p>\n<p>0x06 重新配置nginx,在nginx中配置文件中加入以下语句,之后重启nginx,主要是为了测试lua是否可用<br/></p><figure class=\"highlight puppet\"><table><tbody><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">http</span> {</div><div class=\"line\">    .....</div><div class=\"line\">    log_format <span class=\"keyword\">main</span> <span class=\"string\">&#39;<span class=\"variable\">$remote_addr</span> - <span class=\"variable\">$remote_user</span>  [<span class=\"variable\">$time_local</span>]  &#39;</span></div><div class=\"line\">    <span class=\"string\">&#39; &#34;<span class=\"variable\">$request</span>&#34; <span class=\"variable\">$request_body</span> <span class=\"variable\">$status</span>  <span class=\"variable\">$body_bytes_sent</span>  &#39;</span></div><div class=\"line\">    <span class=\"string\">&#39; &#34;<span class=\"variable\">$http_referer</span>&#34;  &#34;<span class=\"variable\">$http_user_agent</span>&#34;  &#34;<span class=\"variable\">$http_x_forwarded_for</span>&#34; &#39;</span>;</div><div class=\"line\">\t</div><div class=\"line\">    server {</div><div class=\"line\">    ....</div><div class=\"line\">        location /lua {</div><div class=\"line\">            default_type <span class=\"string\">&#39;text/plain&#39;</span>;</div><div class=\"line\">            content_by_lua <span class=\"string\">&#39;ngx.say(&#34;Lua say Hello to you!&#34;)&#39;</span>;</div><div class=\"line\">        }</div><div class=\"line\">    ....</div><div class=\"line\">    }</div><div class=\"line\">    .....</div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># /usr/local/nginx-1.8.1/sbin/nginx -t</span></div><div class=\"line\"><span class=\"comment\"># /usr/local/nginx-1.8.1/sbin/nginx</span></div></pre></td></tr></tbody></table></figure><p></p>\n<p><img src=\"https://klionsec.github.io//img/lua_info.png\" alt=\"\"/><br/></p>\n<p>0x07 在nginx主配置文件中加载lua_waf,具体配置如下<br/></p><figure class=\"highlight shell\"><table><tbody><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> git <span class=\"built_in\">clone</span> https://github.com/loveshell/ngx_lua_waf.git</span></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> cp -r ngx_lua_waf/ /usr/<span class=\"built_in\">local</span>/nginx/conf/waf</span></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> <span class=\"built_in\">cd</span> /usr/<span class=\"built_in\">local</span>/nginx/conf/</span></div></pre></td></tr></tbody></table></figure><p></p>\n<figure class=\"highlight puppet\"><table><tbody><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># vi nginx.conf</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">http</span> {</div><div class=\"line\">\t....</div><div class=\"line\">    lua_package_path <span class=\"string\">&#34;/usr/local/nginx/conf/waf/?.lua&#34;</span>;</div><div class=\"line\">    lua_shared_dict limit <span class=\"number\">10</span>m;</div><div class=\"line\">    init_by_lua_file  /usr/local/nginx/conf/waf/init.lua;</div><div class=\"line\">    access_by_lua_file /usr/local/nginx/conf/waf/waf.lua;</div><div class=\"line\">\t....</div><div class=\"line\">\t</div><div class=\"line\">\tlog_format <span class=\"keyword\">main</span> <span class=\"string\">&#39;<span class=\"variable\">$remote_addr</span> - <span class=\"variable\">$remote_user</span>  [<span class=\"variable\">$time_local</span>]  &#39;</span></div><div class=\"line\">    <span class=\"string\">&#39; &#34;<span class=\"variable\">$request</span>&#34; <span class=\"variable\">$request_body</span> <span class=\"variable\">$status</span>  <span class=\"variable\">$body_bytes_sent</span>  &#39;</span></div><div class=\"line\">    <span class=\"string\">&#39; &#34;<span class=\"variable\">$http_referer</span>&#34;  &#34;<span class=\"variable\">$http_user_agent</span>&#34;  &#34;<span class=\"variable\">$http_x_forwarded_for</span>&#34; &#34;<span class=\"variable\">$dm_cookie</span>&#34; &#39;</span>;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"literal\">include</span> extra/bwapp.conf;</div><div class=\"line\">}</div></pre></td></tr></tbody></table></figure>\n<p>0x08 编辑waf配置,非常简单,从名字都能看出来是干啥的,非常简单<br/></p><figure class=\"highlight gradle\"><table><tbody><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"># vi <span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/nginx/</span>conf<span class=\"regexp\">/waf/</span>config.lua</div></pre></td></tr></tbody></table></figure><p></p>\n<figure class=\"highlight makefile\"><table><tbody><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">RulePath = <span class=\"string\">&#34;/usr/local/nginx/conf/waf/wafconf/&#34;</span></div><div class=\"line\">attacklog = <span class=\"string\">&#34;on&#34;</span>\t\t<span class=\"comment\"># 开启日志记录</span></div><div class=\"line\">logdir = <span class=\"string\">&#34;/usr/local/nginx/logs/hack/&#34;</span></div><div class=\"line\">UrlDeny=<span class=\"string\">&#34;on&#34;</span>\t\t\t<span class=\"comment\"># 从url中拦截</span></div><div class=\"line\">Redirect=<span class=\"string\">&#34;on&#34;</span></div><div class=\"line\">CookieMatch=<span class=\"string\">&#34;on&#34;</span>\t\t<span class=\"comment\"># 从cookie中拦截</span></div><div class=\"line\">postMatch=<span class=\"string\">&#34;on&#34;</span>\t\t\t<span class=\"comment\"># 从post包中拦截</span></div><div class=\"line\">whiteModule=<span class=\"string\">&#34;on&#34;</span></div><div class=\"line\">black_fileExt={<span class=\"string\">&#34;php&#34;</span>,<span class=\"string\">&#34;jsp&#34;</span>}\t<span class=\"comment\"># 黑名单后缀</span></div><div class=\"line\">ipWhitelist={<span class=\"string\">&#34;127.0.0.1&#34;</span>}\t<span class=\"comment\"># ip白名单</span></div><div class=\"line\">ipBlocklist={<span class=\"string\">&#34;1.0.0.1&#34;</span>}\t\t<span class=\"comment\"># ip黑名单</span></div><div class=\"line\">CCDeny=<span class=\"string\">&#34;on&#34;</span>\t\t\t<span class=\"comment\"># 开启防CC攻击</span></div><div class=\"line\">CCrate=<span class=\"string\">&#34;100/60&#34;</span></div><div class=\"line\">html=[[</div><div class=\"line\">&lt;center&gt;&lt;h1&gt;No sir! &lt;/h1&gt;&lt;/center&gt;</div><div class=\"line\">]]</div></pre></td></tr></tbody></table></figure>\n<figure class=\"highlight shell\"><table><tbody><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> mkdir /usr/<span class=\"built_in\">local</span>/nginx/logs/hack/</span></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> chown -R nginx.nginx /usr/<span class=\"built_in\">local</span>/nginx/logs/hack/\t注意,这里一定要nginx可写,不然你会发现拦截不了,因为<span class=\"built_in\">log</span>文件根本没法创建</span></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> mkdir /usr/<span class=\"built_in\">local</span>/nginx-1.8.1/conf/extra</span></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> cp bwapp.conf /usr/<span class=\"built_in\">local</span>/nginx/conf/extra/</span></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> /usr/<span class=\"built_in\">local</span>/nginx/sbin/nginx -t</span></div><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> /usr/<span class=\"built_in\">local</span>/nginx/sbin/nginx -s reload</span></div></pre></td></tr></tbody></table></figure>\n<p>0x09 最后,再来看看最核心的地方,规则目录,这里的规则和上面的配置项功能都是一一对应的,还是那句话,这里默认的规则如果实际用当然是远远不够的,不过好在,我们可以直接往里面写正则,这样就显得简单灵活多了<br/></p><figure class=\"highlight gradle\"><table><tbody><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"># ls <span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/nginx/</span>conf<span class=\"regexp\">/waf/</span>wafconf</div></pre></td></tr></tbody></table></figure><p></p>\n<p>参数正则,确实太简陋了,不过,好在定制空间非常大,而且lua相对比较简单,花费的时间周期也比较短<br/><img src=\"https://klionsec.github.io//img/lua_regx.png\" alt=\"\"/><br/></p>\n<p>尝试命令执行<br/><img src=\"https://klionsec.github.io//img/lua_cmd.png\" alt=\"\"/><br/></p>\n<p>尝试php代码执行<br/><img src=\"https://klionsec.github.io//img/lua_code.png\" alt=\"\"/><br/></p>\n<p>尝试sql注入<br/><img src=\"https://klionsec.github.io//img/lua_sqli.png\" alt=\"\"/><br/></p>\n<p>尝试 xss<br/><img src=\"https://klionsec.github.io//img/lua_xss.png\" alt=\"\"/><br/></p>\n<p>0x10 通过日志观察攻击行为,利用脚本绘制动态图实时显示到前端页面上<br/><img src=\"https://klionsec.github.io//img/lua_log.png\" alt=\"\"/><br/></p>\n<p>0x11 小结:<br/></p><figure class=\"highlight clean\"><table><tbody><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">部署简单,灵活高效,可扩展性较强,后期会把自己加强版的正则给大家,待续....</div></pre></td></tr></tbody></table></figure><p></p>","text":"0x01 什么是Lua123关于Lua,就不用多说了吧,想必朋友们应该也都非常熟悉了,众多脚本语言中的一种,不过相对于其它脚本来说,性能要略高一点在nginx中也提供了一个nginx_lua的模块,主要是为了方便用户,可以灵活的通过lua来扩展nginx功能,比如lua_waf有...","link":"","photos":[],"count_time":{"symbolsCount":"4.5k","symbolsTime":"4 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Lua学习笔记","uid":"d112c00bf05f368c0020529ea6c8efaf","slug":"zl/2016-01-01-743_Lua学习笔记","date":"2024-04-03T03:47:35.992Z","updated":"2024-04-03T03:47:35.992Z","comments":true,"path":"api/articles/zl/2016-01-01-743_Lua学习笔记.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":" 两个减号是单行注释:1-- 注释内容 多行注释:1234--[[ 注释内容注释内容--]] 数据类型Lua是动态类型语言，变量不要类型定义,只需要为变量赋值。值可以存储在变量中，作为参数传递或结果返回。 nil这个最简单，只有值nil属于该类，表示一个无效值（在条件表达式中相当...","link":"","photos":[],"count_time":{"symbolsCount":"3.6k","symbolsTime":"3 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"基于OpenResty安装配置Nginx+LUA并实现请求分发的双层Nginx架构策略","uid":"ba17cf45fbc8e4f389116ffd1e13da5f","slug":"zl/2016-01-01-742_基于OpenResty安装配置Nginx+LUA并实现请求分发的双层Nginx架构策略","date":"2024-04-03T03:47:35.991Z","updated":"2024-04-03T03:47:35.992Z","comments":true,"path":"api/articles/zl/2016-01-01-742_基于OpenResty安装配置Nginx+LUA并实现请求分发的双层Nginx架构策略.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"台CentOS6.x192.168.1.210192.168.1.211192.168.1.212网络拓扑210和211作为应用层web服务器212作为网络请求分发代理服务器 Step1:安装Linux依赖1yum install -y readline-devel pcre-d...","link":"","photos":[],"count_time":{"symbolsCount":"5.5k","symbolsTime":"5 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}