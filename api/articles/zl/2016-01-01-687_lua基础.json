{"title":"lua基础","uid":"17e0bfbfb6b4c3db4a03ab2e2f07d20b","slug":"zl/2016-01-01-687_lua基础","date":"2024-04-03T03:47:35.920Z","updated":"2024-04-03T03:47:35.920Z","comments":true,"path":"api/articles/zl/2016-01-01-687_lua基础.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<nav class=\"wy-nav-top\" aria-label=\"top navigation\">\n<pre><code>      &lt;i data-toggle=&quot;wy-nav-top&quot; class=&quot;fa fa-bars&quot;&gt;&lt;/i&gt;\n      &lt;a href=&quot;../../index.html&quot;&gt;赵子清技术文章&lt;/a&gt;\n    \n  &lt;/nav&gt;\n\n\n  &lt;div class=&quot;wy-nav-content&quot;&gt;\n    \n    &lt;div class=&quot;rst-content&quot;&gt;\n</code></pre>\n<div role=\"navigation\" aria-label=\"breadcrumbs navigation\">\n  <ul class=\"wy-breadcrumbs\">\n<pre><code>  &lt;li&gt;&lt;a href=&quot;../../index.html&quot;&gt;Docs&lt;/a&gt; »&lt;/li&gt;\n    \n      &lt;li&gt;&lt;a href=&quot;../index.html&quot;&gt;开发语言&lt;/a&gt; »&lt;/li&gt;\n    \n  &lt;li&gt;lua基础&lt;/li&gt;\n\n\n  &lt;li class=&quot;wy-breadcrumbs-aside&quot;&gt;\n    \n        \n    \n  &lt;/li&gt;\n</code></pre>\n  </ul>\n  <hr/>\n</div>\n          <div role=\"main\" class=\"document\" itemscope=\"itemscope\" itemtype=\"http://schema.org/Article\">\n           <div itemprop=\"articleBody\">\n  <div class=\"section\" id=\"lua\">\n<p>Lua本身以简单优雅为美, 着眼于处理那些C不擅长的任务. 借助C/C++为其扩展, Lua可以展现无穷的魅力. Lua本身完全遵循ANSI C写成, 只要有C编译器的地方, Lua便可以发挥它的力量. Lua不需要追求python那样大而全的库, 太多的累赘, 反而会破坏她的优美.</p>\n<blockquote>\n<div>— &lt;Lua中文教程&gt;译序</div></blockquote>\n<p>本文章基于lua 5.2.</p>\n<div class=\"section\" id=\"id1\">\n<h2>预备知识<a class=\"headerlink\" href=\"#id1\" title=\"永久链接至标题\">¶</a></h2>\n<div class=\"section\" id=\"id2\">\n<h3>获得lua<a class=\"headerlink\" href=\"#id2\" title=\"永久链接至标题\">¶</a></h3>\n<p>lua非常小, 且支持几乎所有的系统. Linux上基本已预装了lua, 其他系统如何获得lua请参考: <a class=\"reference external\" href=\"http://lua-users.org/wiki/LuaBinaries\">http://lua-users.org/wiki/LuaBinaries</a></p>\n</div>\n<div class=\"section\" id=\"id3\">\n<h3>lua命令行<a class=\"headerlink\" href=\"#id3\" title=\"永久链接至标题\">¶</a></h3>\n<p>安装好lua后, 即可使用lua命令行, 它的使用非常简单:</p>\n<div class=\"highlight-text\"><div class=\"highlight\"><pre><span></span>usage: lua [options] [script [args]]\nAvailable options are:\n  -e stat  execute string &#39;stat&#39;\n  -i       enter interactive mode after executing &#39;script&#39;\n  -l name  require library &#39;name&#39;\n  -v       show version information\n  -E       ignore environment variables\n  --       stop handling options\n  -        stop handling options and execute stdin\n</pre></div>\n</div>\n<p>不加任何参数则进入交互式环境.</p>\n<p>arg全局变量保存了所有参数, 脚本名索引为0, 脚本参数的索引从1开始, 而脚本之前参数的索引为负数. 比如运行:</p>\n<div class=\"highlight-text\"><div class=\"highlight\"><pre><span></span>$lua -e &#34;print &#39;hello&#39;&#34; test.lua a b\n</pre></div>\n</div>\n<p>arg保存的值如下:</p>\n<div class=\"highlight-text\"><div class=\"highlight\"><pre><span></span>arg[-3] = lua\narg[-2] = -e\narg[-1] = print &#39;hello&#39;\narg[0] = test.lua\narg[1] = a\narg[2] = b\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"id4\">\n<h3>保留关键字<a class=\"headerlink\" href=\"#id4\" title=\"永久链接至标题\">¶</a></h3>\n<p>lua的变量命令和C语言一致, 但最好不要使用下划线加大字字母的标识符, 因为这样的标识符一般供内部使用. lua的保留关键字如下:</p>\n<div class=\"highlight-text\"><div class=\"highlight\"><pre><span></span>and     break   do      else        elseif\nend     false   for     function    if\nin      local   nil     not         or\nrepeat  return  then    true        until\nwhile\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"id5\">\n<h3>注释<a class=\"headerlink\" href=\"#id5\" title=\"永久链接至标题\">¶</a></h3>\n<ul class=\"simple\">\n<li>单行注释: –</li>\n<li>多行注释 –[[  –]]</li>\n</ul>\n</div>\n<div class=\"section\" id=\"chunk\">\n<h3>Chunk<a class=\"headerlink\" href=\"#chunk\" title=\"永久链接至标题\">¶</a></h3>\n<p>Chunk就是一系列语句. lua执行的语句块, 比如一个文件交互模式下的每一行就是一个chunk.</p>\n</div>\n</div>\n<div class=\"section\" id=\"id6\">\n<h2>数据类型<a class=\"headerlink\" href=\"#id6\" title=\"永久链接至标题\">¶</a></h2>\n<p>lua是动态类型语言, 声明变量时不需要指定数据类型.</p>\n<p>lua一其有8种基本类型:</p>\n<ul class=\"simple\">\n<li>nil</li>\n<li>boolean</li>\n<li>number</li>\n<li>string</li>\n<li>userdata</li>\n<li>function</li>\n<li>thread</li>\n<li>table</li>\n</ul>\n<p>使用type()函数可以查看给定变量或值的类型.</p>\n<div class=\"section\" id=\"string\">\n<h3>string<a class=\"headerlink\" href=\"#string\" title=\"永久链接至标题\">¶</a></h3>\n<ul class=\"simple\">\n<li>字符串字面值可以用单引号也可以用双引号, 最好保持风格统一</li>\n<li>还可以用 <code class=\"docutils literal\"><span class=\"pre\">[[string]]</span></code> 这种形式表示字符串, 此时字符串可以包含多行,且不会进行转义</li>\n<li>lua会在需要时把number和string进行互相转化, 也可以使用tostring()和tonumber()进行显式转换</li>\n<li><code class=\"docutils literal\"><span class=\"pre\">..</span></code> 是字符串连接符, 相当于某些语言中的+</li>\n</ul>\n<div class=\"admonition warning\">\n<p class=\"first admonition-title\">警告</p>\n<ol class=\"last arabic simple\">\n<li>在lua里使用条件判断时, 除了false和nil为假, 其他条件都为真, 所以数字0和空字符串也为真.</li>\n<li>string里可以有0, 且是可读的, 要修改必须新建一个变量</li>\n</ol>\n</div>\n</div>\n<div class=\"section\" id=\"userdata\">\n<h3>userdata<a class=\"headerlink\" href=\"#userdata\" title=\"永久链接至标题\">¶</a></h3>\n<p>userdata可以将C数据存放在lua变量中, 它除了赋值和相等比较外没有其他操作. userdata用来描述应用程序或者使用C实现的库创建的新类型.</p>\n<p>// todo</p>\n</div>\n<div class=\"section\" id=\"thread\">\n<h3>thread<a class=\"headerlink\" href=\"#thread\" title=\"永久链接至标题\">¶</a></h3>\n<p>// todo</p>\n</div>\n</div>\n<div class=\"section\" id=\"id7\">\n<h2>表达式<a class=\"headerlink\" href=\"#id7\" title=\"永久链接至标题\">¶</a></h2>\n<div class=\"section\" id=\"id8\">\n<h3>算术运算符<a class=\"headerlink\" href=\"#id8\" title=\"永久链接至标题\">¶</a></h3>\n<p>二元: + - * / ^(幂)</p>\n<p>一元: -(取负)</p>\n</div>\n<div class=\"section\" id=\"id9\">\n<h3>关系运算符<a class=\"headerlink\" href=\"#id9\" title=\"永久链接至标题\">¶</a></h3>\n<p>lua关系运算符包括:</p>\n<div class=\"highlight-text\"><div class=\"highlight\"><pre><span></span>&lt;   &gt;   &lt;=  &gt;=  ==  ~=\n</pre></div>\n</div>\n<p>关系运算符的结果是true或false. 对于table, userdata和function, 是通过引用比较的,而不是值比较.</p>\n<div class=\"admonition warning\">\n<p class=\"first admonition-title\">警告</p>\n<p class=\"last\">不等于是~=而不是!=</p>\n</div>\n</div>\n<div class=\"section\" id=\"id10\">\n<h3>逻辑运算符<a class=\"headerlink\" href=\"#id10\" title=\"永久链接至标题\">¶</a></h3>\n<p>lua逻辑运算符包括:</p>\n<div class=\"highlight-text\"><div class=\"highlight\"><pre><span></span>and     or    not\n</pre></div>\n</div>\n<div class=\"admonition warning\">\n<p class=\"first admonition-title\">警告</p>\n<p class=\"last\">and和or的结果不是true/false, 而是和2个操作数有关, 见下例.</p>\n</div>\n<div class=\"highlight-lua\"><div class=\"highlight\"><pre><span></span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"mi\">4</span> <span class=\"ow\">and</span> <span class=\"mi\">5</span><span class=\"p\">)</span>      <span class=\"c1\">--&gt; 5</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"kc\">nil</span> <span class=\"ow\">and</span> <span class=\"mi\">13</span><span class=\"p\">)</span>   <span class=\"c1\">--&gt; nil</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"kc\">false</span> <span class=\"ow\">and</span> <span class=\"mi\">13</span><span class=\"p\">)</span> <span class=\"c1\">--&gt; false</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"mi\">4</span> <span class=\"ow\">or</span> <span class=\"mi\">5</span><span class=\"p\">)</span>       <span class=\"c1\">--&gt; 4</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"kc\">false</span> <span class=\"ow\">or</span> <span class=\"mi\">5</span><span class=\"p\">)</span>   <span class=\"c1\">--&gt; 5</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"id11\">\n<h3>连接运算符<a class=\"headerlink\" href=\"#id11\" title=\"永久链接至标题\">¶</a></h3>\n<p>即两个点 <code class=\"docutils literal\"><span class=\"pre\">..</span></code> , 使用时最好在两边加上空格.</p>\n</div>\n<div class=\"section\" id=\"id12\">\n<h3>运算符优先级<a class=\"headerlink\" href=\"#id12\" title=\"永久链接至标题\">¶</a></h3>\n<p>lua运算符优先级从高到低顺序如下:</p>\n<div class=\"highlight-text\"><div class=\"highlight\"><pre><span></span>^\nnot     - (unary)\n*   /\n+   -\n..\n&lt;   &gt;   &lt;=  &gt;=  ~=  ==\nand\nor\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"id13\">\n<h2>语句<a class=\"headerlink\" href=\"#id13\" title=\"永久链接至标题\">¶</a></h2>\n<div class=\"section\" id=\"id14\">\n<h3>赋值<a class=\"headerlink\" href=\"#id14\" title=\"永久链接至标题\">¶</a></h3>\n<p>lua可以一次性给多个变量同时赋值, 变量列表和值列表的各元素用逗号隔开:</p>\n<div class=\"highlight-text\"><div class=\"highlight\"><pre><span></span>a, b = 10, 2*x\n</pre></div>\n</div>\n<p>lua会先计算赋值语句右边所有的值, 然后再进行赋值操作, 所以在lua里可以通过下面这样来交换两个变量的值:</p>\n<div class=\"highlight-text\"><div class=\"highlight\"><pre><span></span>x, y = y, x\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"id15\">\n<h3>局部变量<a class=\"headerlink\" href=\"#id15\" title=\"永久链接至标题\">¶</a></h3>\n<p>可以通过local声明一个局部变量, 它只在被声明的代码块中有效. 访问局部变量比全局变量更快, 并且可以避免命名冲突. 可以把局部变量放在 do..end 中, 就好像C中的{}中一样.</p>\n</div>\n<div class=\"section\" id=\"id16\">\n<h3>条件语句<a class=\"headerlink\" href=\"#id16\" title=\"永久链接至标题\">¶</a></h3>\n<p>lua条件语句主要有3种结构:</p>\n<div class=\"highlight-lua\"><div class=\"highlight\"><pre><span></span><span class=\"kr\">if</span> <span class=\"n\">cond</span> <span class=\"kr\">then</span>            <span class=\"c1\">-- C: if(cond) {</span>\n    <span class=\"kr\">then</span><span class=\"o\">-</span><span class=\"n\">part</span>           <span class=\"c1\">--     }</span>\n<span class=\"kr\">end</span><span class=\"p\">;</span>\n<p><span class=\"kr\">if</span> <span class=\"n\">cond</span> <span class=\"kr\">then</span>            <span class=\"c1\">– C: if(cond) {</span><br />\n<span class=\"kr\">then</span><span class=\"o\">-</span><span class=\"n\">part</span>           <span class=\"c1\">–    }</span><br />\n<span class=\"kr\">else</span>                    <span class=\"c1\">–    else {</span><br />\n<span class=\"kr\">else</span><span class=\"o\">-</span><span class=\"n\">part</span>           <span class=\"c1\">–    }</span><br />\n<span class=\"kr\">end</span><span class=\"p\">;</span></p>\n<p><span class=\"kr\">if</span> <span class=\"n\">cond1</span> <span class=\"kr\">then</span>           <span class=\"c1\">– C: if(cond1) {</span><br />\n<span class=\"kr\">then</span><span class=\"o\">-</span><span class=\"n\">part</span>           <span class=\"c1\">–    }</span><br />\n<span class=\"kr\">elseif</span> <span class=\"n\">cond2</span> <span class=\"kr\">then</span>       <span class=\"c1\">–    else if(cond2) {</span><br />\n<span class=\"kr\">elseif</span><span class=\"o\">-</span><span class=\"n\">part</span>         <span class=\"c1\">–    }</span><br />\n<span class=\"o\">…</span>                      <span class=\"c1\">–    …</span><br />\n<span class=\"kr\">else</span>                    <span class=\"c1\">–    else {</span><br />\n<span class=\"kr\">else</span><span class=\"o\">-</span><span class=\"n\">part</span>           <span class=\"c1\">–    }</span><br />\n<span class=\"kr\">end</span><span class=\"p\">;</span><br />\n</pre></div></p>\n</div>\n<p>注意if语句后面的then以及最后的end.</p>\n</div>\n<div class=\"section\" id=\"id17\">\n<h3>循环语句<a class=\"headerlink\" href=\"#id17\" title=\"永久链接至标题\">¶</a></h3>\n<p>while:</p>\n<div class=\"highlight-lua\"><div class=\"highlight\"><pre><span></span><span class=\"kr\">while</span> <span class=\"n\">cond</span> <span class=\"kr\">do</span>       <span class=\"c1\">-- C: while(cond) {</span>\n    <span class=\"n\">statements</span><span class=\"p\">;</span>     <span class=\"c1\">--    }</span>\n<span class=\"kr\">end</span><span class=\"p\">;</span>\n</pre></div>\n</div>\n<p>repeat-until:</p>\n<div class=\"highlight-lua\"><div class=\"highlight\"><pre><span></span><span class=\"kr\">repeat</span>              <span class=\"c1\">-- C: do{</span>\n    <span class=\"n\">statements</span><span class=\"p\">;</span>     <span class=\"c1\">--    } while(cond)</span>\n<span class=\"kr\">until</span> <span class=\"n\">cond</span><span class=\"p\">;</span>\n</pre></div>\n</div>\n<p>for:</p>\n<div class=\"highlight-lua\"><div class=\"highlight\"><pre><span></span><span class=\"kr\">for</span> <span class=\"n\">var</span><span class=\"o\">=</span><span class=\"n\">start</span><span class=\"p\">,</span><span class=\"kr\">end</span><span class=\"p\">,</span><span class=\"n\">step</span> <span class=\"kr\">do</span>   <span class=\"c1\">-- C: for(var=start;var&lt;=end;var+=step) {</span>\n    <span class=\"n\">loop</span><span class=\"o\">-</span><span class=\"n\">part</span>               <span class=\"c1\">--    }</span>\n<span class=\"kr\">end</span>\n</pre></div>\n</div>\n<div class=\"admonition warning\">\n<p class=\"first admonition-title\">警告</p>\n<ol class=\"last arabic simple\">\n<li>for后面的表达式只会在循环开始前被计算1次</li>\n<li>上面的C等价语句其实不完全一致, 因为step也可以是负数</li>\n<li>step可以省略, 默认为1</li>\n<li>end值也被循环一次, 所以逻辑不等于C的for(i=start; i!=end; i+=step)</li>\n<li>循环过程中不要改变控制变量的值, 否则结果是不可预知的</li>\n</ol>\n</div>\n<p>break语句可以用来退出循环，但必须是语句块的最后一句.</p>\n</div>\n</div>\n<div class=\"section\" id=\"id18\">\n<h2>函数<a class=\"headerlink\" href=\"#id18\" title=\"永久链接至标题\">¶</a></h2>\n</div>\n</div>\n<pre><code>       &lt;/div&gt;\n       \n      &lt;/div&gt;\n      &lt;footer&gt;\n\n&lt;div class=&quot;rst-footer-buttons&quot; role=&quot;navigation&quot; aria-label=&quot;footer navigation&quot;&gt;\n  \n    \n  \n  \n    \n  \n&lt;/div&gt;\n</code></pre>\n  <hr/>\n  <div role=\"contentinfo\">\n    <p>\n        © Copyright 2019, 赵子清\n<pre><code>&lt;/p&gt;\n</code></pre>\n  </div> \n</footer>\n<pre><code>    &lt;/div&gt;\n  &lt;/div&gt;\n</code></pre>\n","text":" &lt;i data-toggle=&quot;wy-nav-top&quot; class=&quot;fa fa-bars&quot;&gt;&lt;/i&gt; &lt;a href=&quot;../../index.html&quot;&gt;赵子清技术文章&lt;/...","link":"","photos":[],"count_time":{"symbolsCount":"4.5k","symbolsTime":"4 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#id1\"><span class=\"toc-text\">预备知识</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#id2\"><span class=\"toc-text\">获得lua</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#id3\"><span class=\"toc-text\">lua命令行</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#id4\"><span class=\"toc-text\">保留关键字</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#id5\"><span class=\"toc-text\">注释</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#chunk\"><span class=\"toc-text\">Chunk</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#id6\"><span class=\"toc-text\">数据类型</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#string\"><span class=\"toc-text\">string</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#userdata\"><span class=\"toc-text\">userdata</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#thread\"><span class=\"toc-text\">thread</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#id7\"><span class=\"toc-text\">表达式</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#id8\"><span class=\"toc-text\">算术运算符</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#id9\"><span class=\"toc-text\">关系运算符</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#id10\"><span class=\"toc-text\">逻辑运算符</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#id11\"><span class=\"toc-text\">连接运算符</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#id12\"><span class=\"toc-text\">运算符优先级</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#id13\"><span class=\"toc-text\">语句</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#id14\"><span class=\"toc-text\">赋值</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#id15\"><span class=\"toc-text\">局部变量</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#id16\"><span class=\"toc-text\">条件语句</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#id17\"><span class=\"toc-text\">循环语句</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#id18\"><span class=\"toc-text\">函数</span></a></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"使用lua","uid":"289e7df27ca56d00963fddf6d45270f2","slug":"zl/2016-01-01-68_使用lua","date":"2024-04-03T03:47:35.925Z","updated":"2024-04-03T03:47:35.926Z","comments":true,"path":"api/articles/zl/2016-01-01-68_使用lua.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"lua-cmsgpack是一个开源的MessagePack实现方式、纯C的库，没有任何其它依赖，编译后可以直接被lua调用，目前主要支持Lua 5.1/5.2/5.3 版本。1、什么是MessagePack？ 官方的解释是： 12It&#39;s like JSON.but fa...","link":"","photos":[],"count_time":{"symbolsCount":"2.4k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Car Evaluation Analysis","uid":"25140a3756945e2b6db9700c9078fc4a","slug":"zl/2016-01-01-688_Car Evaluation Analysis","date":"2024-04-03T03:47:35.920Z","updated":"2024-04-03T03:47:35.924Z","comments":true,"path":"api/articles/zl/2016-01-01-688_Car Evaluation Analysis.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"汽车数据R语言机器学习分析 title: “Car Evaluation Analysis” author: “Suraj Vidyadaran” date: “Sunday, February 21, 2016” output: md_document 对汽车数据使用17种分类...","link":"","photos":[],"count_time":{"symbolsCount":"24k","symbolsTime":"22 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}