{"title":"lua c api","uid":"a088e52eeedd5a2e08a78395ae73ef54","slug":"zl/2016-01-01-366_lua c api ","date":"2024-04-03T03:47:35.647Z","updated":"2024-04-03T03:47:35.647Z","comments":true,"path":"api/articles/zl/2016-01-01-366_lua c api .json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<h2 id=\"一-概述\">一 概述</h2> <p>在 <code class=\"highlighter-rouge\">Lua</code> 中使用 <code class=\"highlighter-rouge\">userdata</code> 表示 <code class=\"highlighter-rouge\">C</code> 中的复杂数据类型（其实是一块内存区域），对于 <code class=\"highlighter-rouge\">uerdata</code> 没有预定义的操作。<code class=\"highlighter-rouge\">light userdata</code> 表示指针类型数据，并不需要创建（它是指针值），同时，<strong><code class=\"highlighter-rouge\">light userdata</code> 不被 <code class=\"highlighter-rouge\">gc</code> 管理</strong>。<code class=\"highlighter-rouge\">ligth userdata</code> 的主要用途是用户自己管理内存，避免 <code class=\"highlighter-rouge\">gc</code> 管理内存。</p> <h2 id=\"二-使用-userdata-实现数组\">二 使用 <code class=\"highlighter-rouge\">userdata</code> 实现数组</h2> <p>在 <code class=\"highlighter-rouge\">lua</code> 中使用 <code class=\"highlighter-rouge\">table</code> 作为数组，在数组变大时会耗费非常多的内存，使用 <code class=\"highlighter-rouge\">userdata</code> 能够降低内存使用。<code class=\"highlighter-rouge\">userdata</code> 可以有 <code class=\"highlighter-rouge\">metatable</code>，对 <code class=\"highlighter-rouge\">userdata</code> 类型进行识别（判断 <code class=\"highlighter-rouge\">C</code> 类型是否正确）增加元方法。</p> <h3 id=\"1-示例代码\">1. 示例代码</h3> <div class=\"language-c highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"cp\">#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;unistd.h&gt;\n#include &lt;string.h&gt;\n</span>\n<span class=\"cp\">#include &#34;lua.h&#34;\n#include &#34;lauxlib.h&#34;\n#include &#34;lualib.h&#34;\n</span>\n<span class=\"k\">typedef</span> <span class=\"k\">struct</span> <span class=\"n\">NumArray</span> <span class=\"p\">&#123;</span>\n    <span class=\"kt\">int</span> <span class=\"n\">size</span><span class=\"p\">;</span>\n    <span class=\"kt\">double</span> <span class=\"n\">values</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">];</span>  <span class=\"cm\">/* variable part */</span>\n<span class=\"p\">&#125;</span> <span class=\"n\">NumArray</span><span class=\"p\">;</span>\n<p><span class=\"cm\">/******************************************************************************</p>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>创建 array<br />\n**************************************************************************<em><em><em><em>/</span><br />\n<span class=\"k\">static</span> <span class=\"kt\">int</span><br />\n<span class=\"nf\">newarray</span><span class=\"p\">(</span><span class=\"n\">lua_State</span> <span class=\"o\"></em></span><span class=\"n\">L</span><span class=\"p\">)</span> <span class=\"p\">&#123;</span><br />\n<span class=\"kt\">int</span> <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"n\">luaL_checkint</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">);</span><br />\n<span class=\"kt\">size_t</span> <span class=\"n\">nbytes</span> <span class=\"o\">=</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">NumArray</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\"></em></span><span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"kt\">double</span><span class=\"p\">);</span><br />\n<span class=\"n\">NumArray</span> <span class=\"o\"></em></span><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">NumArray</span> <span class=\"o\"></em></span><span class=\"p\">)</span><span class=\"n\">lua_newuserdata</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"n\">nbytes</span><span class=\"p\">);</span></p>\n<p><span class=\"n\">luaL_getmetatable</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"s\">&quot;LuaBook.array&quot;</span><span class=\"p\">);</span><br />\n<span class=\"n\">lua_setmetatable</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">);</span></p>\n<p><span class=\"n\">a</span><span class=\"o\">-&gt;</span><span class=\"n\">size</span> <span class=\"o\">=</span> <span class=\"n\">n</span><span class=\"p\">;</span><br />\n<span class=\"k\">return</span> <span class=\"mi\">1</span><span class=\"p\">;</span>  <span class=\"cm\">/* new userdatum is already on the stack */</span><br />\n<span class=\"p\">&#125;</span></p>\n</li>\n</ul>\n<p><span class=\"k\">static</span> <span class=\"n\">NumArray</span> <span class=\"o\"><em></span><br />\n<span class=\"nf\">checkarray</span><span class=\"p\">(</span><span class=\"n\">lua_State</span> <span class=\"o\"></em></span><span class=\"n\">L</span><span class=\"p\">)</span> <span class=\"p\">&#123;</span><br />\n<span class=\"kt\">void</span> <span class=\"o\"><em></span><span class=\"n\">ud</span> <span class=\"o\">=</span> <span class=\"n\">luaL_checkudata</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s\">&quot;LuaBook.array&quot;</span><span class=\"p\">);</span><br />\n<span class=\"n\">luaL_argcheck</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"n\">ud</span> <span class=\"o\">!=</span> <span class=\"nb\">NULL</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s\">&quot;`array' expected&quot;</span><span class=\"p\">);</span><br />\n<span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"n\">NumArray</span> <span class=\"o\"></em></span><span class=\"p\">)</span><span class=\"n\">ud</span><span class=\"p\">;</span><br />\n<span class=\"p\">&#125;</span></p>\n<p><span class=\"cm\">/******************************************************************************</p>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>更新 array 中内容</p>\n</li>\n<li class=\"lvl-2\">\n<p>@param  userdata    array</p>\n</li>\n<li class=\"lvl-2\">\n<p>@param  index</p>\n</li>\n<li class=\"lvl-2\">\n<p>@para   value<br />\n*****************************************************************************<em>/</span><br />\n<span class=\"k\">static</span> <span class=\"kt\">int</span><br />\n<span class=\"nf\">setarray</span><span class=\"p\">(</span><span class=\"n\">lua_State</span> <span class=\"o\"></em></span><span class=\"n\">L</span><span class=\"p\">)</span> <span class=\"p\">&#123;</span><br />\n<span class=\"c1\">//NumArray *a = (NumArray <em>)lua_touserdata(L, 1);<br />\n</span>    <span class=\"n\">NumArray</span> <span class=\"o\"></em></span><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">checkarray</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">);</span><br />\n<span class=\"n\">luaL_argcheck</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"n\">a</span> <span class=\"o\">!=</span> <span class=\"nb\">NULL</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s\">&quot;`array' expected&quot;</span><span class=\"p\">);</span></p>\n<p><span class=\"kt\">int</span> <span class=\"n\">index</span> <span class=\"o\">=</span> <span class=\"n\">luaL_checkint</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">);</span><br />\n<span class=\"n\">luaL_argcheck</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"mi\">1</span> <span class=\"o\">&lt;=</span> <span class=\"n\">index</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">index</span> <span class=\"o\">&lt;=</span> <span class=\"n\">a</span><span class=\"o\">-&gt;</span><span class=\"n\">size</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span><br />\n<span class=\"s\">&quot;index out of range&quot;</span><span class=\"p\">);</span></p>\n<p><span class=\"kt\">double</span> <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">luaL_checknumber</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">);</span></p>\n<p><span class=\"n\">a</span><span class=\"o\">-&gt;</span><span class=\"n\">values</span><span class=\"p\">[</span><span class=\"n\">index</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">value</span><span class=\"p\">;</span><br />\n<span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span><br />\n<span class=\"p\">&#125;</span></p>\n</li>\n</ul>\n<p><span class=\"cm\">/******************************************************************************</p>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>获得 array 中内容</p>\n</li>\n<li class=\"lvl-2\">\n<p>@param  userdata    array</p>\n</li>\n<li class=\"lvl-2\">\n<p>@param  index<br />\n*****************************************************************************<em>/</span><br />\n<span class=\"k\">static</span> <span class=\"kt\">int</span><br />\n<span class=\"nf\">getarray</span><span class=\"p\">(</span><span class=\"n\">lua_State</span> <span class=\"o\"></em></span><span class=\"n\">L</span><span class=\"p\">)</span> <span class=\"p\">&#123;</span><br />\n<span class=\"c1\">//NumArray *a = (NumArray <em>)lua_touserdata(L, 1);<br />\n</span>    <span class=\"n\">NumArray</span> <span class=\"o\"></em></span><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">checkarray</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">);</span><br />\n<span class=\"n\">luaL_argcheck</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"n\">a</span> <span class=\"o\">!=</span> <span class=\"nb\">NULL</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s\">&quot;`array' expected&quot;</span><span class=\"p\">);</span></p>\n<p><span class=\"kt\">int</span> <span class=\"n\">index</span> <span class=\"o\">=</span> <span class=\"n\">luaL_checkint</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">);</span><br />\n<span class=\"n\">luaL_argcheck</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"mi\">1</span> <span class=\"o\">&lt;=</span> <span class=\"n\">index</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">index</span> <span class=\"o\">&lt;=</span> <span class=\"n\">a</span><span class=\"o\">-&gt;</span><span class=\"n\">size</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span><br />\n<span class=\"s\">&quot;index out of range&quot;</span><span class=\"p\">);</span></p>\n<p><span class=\"n\">lua_pushnumber</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"o\">-&gt;</span><span class=\"n\">values</span><span class=\"p\">[</span><span class=\"n\">index</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]);</span><br />\n<span class=\"k\">return</span> <span class=\"mi\">1</span><span class=\"p\">;</span><br />\n<span class=\"p\">&#125;</span></p>\n</li>\n</ul>\n<p><span class=\"cm\">/******************************************************************************</p>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>获得 array 大小</p>\n</li>\n<li class=\"lvl-2\">\n<p>@param  userdata    array<br />\n*****************************************************************************<em>/</span><br />\n<span class=\"k\">static</span> <span class=\"kt\">int</span><br />\n<span class=\"nf\">getsize</span><span class=\"p\">(</span><span class=\"n\">lua_State</span> <span class=\"o\"></em></span><span class=\"n\">L</span><span class=\"p\">)</span> <span class=\"p\">&#123;</span><br />\n<span class=\"c1\">// NumArray *a = (NumArray <em>)lua_touserdata(L, 1);<br />\n</span>    <span class=\"n\">NumArray</span> <span class=\"o\"></em></span><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">checkarray</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">);</span></p>\n<p><span class=\"n\">luaL_argcheck</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"n\">a</span> <span class=\"o\">!=</span> <span class=\"nb\">NULL</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s\">&quot;`array' expected&quot;</span><span class=\"p\">);</span><br />\n<span class=\"n\">lua_pushnumber</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"o\">-&gt;</span><span class=\"n\">size</span><span class=\"p\">);</span><br />\n<span class=\"k\">return</span> <span class=\"mi\">1</span><span class=\"p\">;</span><br />\n<span class=\"p\">&#125;</span></p>\n</li>\n</ul>\n<p><span class=\"k\">static</span> <span class=\"k\">const</span><br />\n<span class=\"k\">struct</span> <span class=\"n\">luaL_reg</span> <span class=\"n\">array_lib</span><span class=\"p\">[]</span> <span class=\"o\">=</span> <span class=\"p\">&#123;</span><br />\n<span class=\"p\">&#123;</span><span class=\"s\">&quot;new&quot;</span><span class=\"p\">,</span> <span class=\"n\">newarray</span><span class=\"p\">&#125;,</span><br />\n<span class=\"p\">&#123;</span><span class=\"s\">&quot;set&quot;</span><span class=\"p\">,</span> <span class=\"n\">setarray</span><span class=\"p\">&#125;,</span><br />\n<span class=\"p\">&#123;</span><span class=\"s\">&quot;get&quot;</span><span class=\"p\">,</span> <span class=\"n\">getarray</span><span class=\"p\">&#125;,</span><br />\n<span class=\"p\">&#123;</span><span class=\"s\">&quot;size&quot;</span><span class=\"p\">,</span> <span class=\"n\">getsize</span><span class=\"p\">&#125;,</span><br />\n<span class=\"p\">&#123;</span><span class=\"nb\">NULL</span><span class=\"p\">,</span> <span class=\"nb\">NULL</span><span class=\"p\">&#125;</span><br />\n<span class=\"p\">&#125;;</span></p>\n<p><span class=\"cm\">/******************************************************************************</p>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>注册函数<br />\n****************************************************************************<em><em>/</span><br />\n<span class=\"kt\">int</span><br />\n<span class=\"nf\">luaopen_userdata</span><span class=\"p\">(</span><span class=\"n\">lua_State</span> <span class=\"o\"></em></span><span class=\"n\">l</span><span class=\"p\">)</span> <span class=\"p\">&#123;</span><br />\n<span class=\"c1\">// 创建 metatable，使用 array.new 创建的数组元表是同一个元表<br />\n</span>    <span class=\"n\">luaL_newmetatable</span><span class=\"p\">(</span><span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"s\">&quot;LuaBook.array&quot;</span><span class=\"p\">);</span><br />\n<span class=\"n\">luaL_openlib</span><span class=\"p\">(</span><span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"s\">&quot;array&quot;</span><span class=\"p\">,</span> <span class=\"n\">array_lib</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">);</span><br />\n<span class=\"k\">return</span> <span class=\"mi\">1</span><span class=\"p\">;</span><br />\n<span class=\"p\">&#125;</span><br />\n</code></pre></div></div> <h3 id=\"2-调用示例\">2. 调用示例</h3> <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$ </span>/usr/local/lua5.1.5/bin/lua <span class=\"nt\">-e</span> <span class=\"s2\">&quot;require 'userdata'; arr = array.new(20); print(type(arr)); array.set(arr,1,20);print('arr[1]=',array.get(arr,1));print('size:',array.size(arr))&quot;</span><br />\nuserdata<br />\narr[1]<span class=\"o\">=</span>\t20<br />\nsize:\t20<br />\n</code></pre></div></div> <h2 id=\"三-添加元方法\">三 添加元方法</h2> <p>在创建元表时可以在元表中添加元方法，方便使用 <code class=\"highlighter-rouge\">Lua</code> 的 <code class=\"highlighter-rouge\">__index</code>、<code class=\"highlighter-rouge\">__newindex</code> 方法。修改 <code class=\"highlighter-rouge\">luaopen_userdata</code> 方法实现：</p> <div class=\"language-c highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">int</span><br />\n<span class=\"nf\">luaopen_userdata</span><span class=\"p\">(</span><span class=\"n\">lua_State</span> <span class=\"o\"></em></span><span class=\"n\">l</span><span class=\"p\">)</span> <span class=\"p\">&#123;</span><br />\n<span class=\"c1\">// 创建 metatable，使用 array.new 创建的数组元表是同一个元表<br />\n</span>    <span class=\"n\">luaL_newmetatable</span><span class=\"p\">(</span><span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"s\">&quot;LuaBook.array&quot;</span><span class=\"p\">);</span><br />\n<span class=\"n\">luaL_openlib</span><span class=\"p\">(</span><span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"s\">&quot;array&quot;</span><span class=\"p\">,</span> <span class=\"n\">array_lib</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">);</span></p>\n<p><span class=\"cm\">/* now the stack has the metatable at index 1 and<br />\n`array' at index 2 <em>/</span><br />\n<span class=\"n\">lua_pushstring</span><span class=\"p\">(</span><span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"s\">&quot;__index&quot;</span><span class=\"p\">);</span><br />\n<span class=\"n\">lua_pushstring</span><span class=\"p\">(</span><span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"s\">&quot;get&quot;</span><span class=\"p\">);</span><br />\n<span class=\"n\">lua_gettable</span><span class=\"p\">(</span><span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">3</span><span class=\"p\">);</span>  <span class=\"cm\">/</em> get array.get on stack top*/</span><br />\n<span class=\"n\">lua_settable</span><span class=\"p\">(</span><span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">4</span><span class=\"p\">);</span>  <span class=\"cm\">/* metatable.__index = array.get */</span></p>\n<p><span class=\"n\">lua_pushstring</span><span class=\"p\">(</span><span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"s\">&quot;__newindex&quot;</span><span class=\"p\">);</span><br />\n<span class=\"n\">lua_pushstring</span><span class=\"p\">(</span><span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"s\">&quot;set&quot;</span><span class=\"p\">);</span><br />\n<span class=\"n\">lua_gettable</span><span class=\"p\">(</span><span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">3</span><span class=\"p\">);</span> <span class=\"cm\">/* get array.set <em>/</span><br />\n<span class=\"n\">lua_settable</span><span class=\"p\">(</span><span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">4</span><span class=\"p\">);</span> <span class=\"cm\">/</em> metatable.__newindex = array.set */</span></p>\n<p><span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span><br />\n<span class=\"p\">&#125;</span><br />\n</code></pre></div></div> <p><strong>在这里的栈操作要仔细</strong></p> <h3 id=\"调用示例\">调用示例</h3> <div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$ </span>/usr/local/lua5.1.5/bin/lua <span class=\"nt\">-e</span> <span class=\"s2\">&quot;require 'userdata'; arr = array.new(20); print(type(arr)); arr[1]=20;print('arr[1]=',arr[1])&quot;</span><br />\nuserdata<br />\narr[1]<span class=\"o\">=</span>\t20<br />\n</code></pre></div></div> <h2 id=\"四-函数说明\">四 函数说明</h2> <h3 id=\"1-lua_newuserdata\">1. <code class=\"highlighter-rouge\">lua_newuserdata</code></h3> <div class=\"language-c highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">void</span> <span class=\"o\"><em></span><span class=\"n\">lua_newuserdata</span> <span class=\"p\">(</span><span class=\"n\">lua_State</span> <span class=\"o\"></em></span><span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"kt\">size_t</span> <span class=\"n\">size</span><span class=\"p\">);</span><br />\n</code></pre></div></div> <p>创建一块 <code class=\"highlighter-rouge\">size</code> 大小的内存区域，将其压入栈顶并返回内存地址指针。</p> <h3 id=\"2-lual_checkudata\">2. <code class=\"highlighter-rouge\">luaL_checkudata</code></h3> <div class=\"language-c highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">void</span> <span class=\"o\"><em></span><span class=\"n\">luaL_checkudata</span> <span class=\"p\">(</span><span class=\"n\">lua_State</span> <span class=\"o\"></em></span><span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">narg</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">char</span> <span class=\"o\"><em></span><span class=\"n\">tname</span><span class=\"p\">);</span><br />\n</code></pre></div></div> <p>检查函数的第 <code class=\"highlighter-rouge\">narg</code> 参数是否是 <code class=\"highlighter-rouge\">tname</code> 类型的 <code class=\"highlighter-rouge\">userdata</code>。<code class=\"highlighter-rouge\">luaL_checkudata</code> 首先将 <code class=\"highlighter-rouge\">narg</code> 转换为 <code class=\"highlighter-rouge\">userdata</code> ，然后获得元表；同时，从注册表中根据 <code class=\"highlighter-rouge\">tname</code> 获得元表，两者相互比较如果不同触发错误并返回 <code class=\"highlighter-rouge\">NULL</code>，如果相同则返回 <code class=\"highlighter-rouge\">narg</code> 指向的 <code class=\"highlighter-rouge\">userdata</code>。</p> <p><em>可以看 <code class=\"highlighter-rouge\">luaL_checkudata</code> 代码实现，非常简单。</em></p> <h3 id=\"3-lual_newmetatable\">3. <code class=\"highlighter-rouge\">luaL_newmetatable</code></h3> <div class=\"language-c highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">int</span> <span class=\"n\">luaL_newmetatable</span> <span class=\"p\">(</span><span class=\"n\">lua_State</span> <span class=\"o\"></em></span><span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">char</span> <span class=\"o\"><em></span><span class=\"n\">tname</span><span class=\"p\">);</span><br />\n</code></pre></div></div> <p>创建一个新的可以作为 <code class=\"highlighter-rouge\">userdata</code> 类型元表的 <code class=\"highlighter-rouge\">table</code>，并使用 <code class=\"highlighter-rouge\">tname</code> 作为 <code class=\"highlighter-rouge\">key</code> 存储在注册表中。如果注册表中已经存在 <code class=\"highlighter-rouge\">tname</code> 类型的值，返回值为 <code class=\"highlighter-rouge\">0</code>。</p> <h3 id=\"4-lual_getmetatable\">4. <code class=\"highlighter-rouge\">luaL_getmetatable</code></h3> <div class=\"language-c highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">void</span> <span class=\"n\">luaL_getmetatable</span> <span class=\"p\">(</span><span class=\"n\">lua_State</span> <span class=\"o\"></em></span><span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">char</span> <span class=\"o\"><em></span><span class=\"n\">tname</span><span class=\"p\">);</span><br />\n</code></pre></div></div> <p>将注册表中与名称 <code class=\"highlighter-rouge\">tname</code> 关联的元表压入栈中。</p> <h3 id=\"5-lua_setmetatable\">5. <code class=\"highlighter-rouge\">lua_setmetatable</code></h3> <div class=\"language-c highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">int</span> <span class=\"n\">lua_setmetatable</span> <span class=\"p\">(</span><span class=\"n\">lua_State</span> <span class=\"o\"></em></span><span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">index</span><span class=\"p\">);</span><br />\n</code></pre></div></div> <p>从栈顶弹出一个 <code class=\"highlighter-rouge\">table</code> 并将其设置为栈中 <code class=\"highlighter-rouge\">index</code> 索引出的值的元表。</p> <h2 id=\"五-参考资料\">五 参考资料</h2> <ul> <li> <p><a href=\"https://www.lua.org/pil/28.4.html\">programming in lua</a></p> </li> <li> <p><a href=\"https://www.lua.org/manual/5.1/manual.html\">lua 5.1 manual</a></p> </li> </ul></p>\n</li>\n</ul>\n","text":"一 概述 在 Lua 中使用 userdata 表示 C 中的复杂数据类型（其实是一块内存区域），对于 uerdata 没有预定义的操作。light userdata 表示指针类型数据，并不需要创建（它是指针值），同时，light userdata 不被 gc 管理。ligth ...","link":"","photos":[],"count_time":{"symbolsCount":"5.5k","symbolsTime":"5 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%80-%E6%A6%82%E8%BF%B0\"><span class=\"toc-text\">一 概述</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BA%8C-%E4%BD%BF%E7%94%A8-userdata-%E5%AE%9E%E7%8E%B0%E6%95%B0%E7%BB%84\"><span class=\"toc-text\">二 使用 userdata 实现数组</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E7%A4%BA%E4%BE%8B%E4%BB%A3%E7%A0%81\"><span class=\"toc-text\">1. 示例代码</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E8%B0%83%E7%94%A8%E7%A4%BA%E4%BE%8B\"><span class=\"toc-text\">2. 调用示例</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%89-%E6%B7%BB%E5%8A%A0%E5%85%83%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">三 添加元方法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%B0%83%E7%94%A8%E7%A4%BA%E4%BE%8B\"><span class=\"toc-text\">调用示例</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%9B%9B-%E5%87%BD%E6%95%B0%E8%AF%B4%E6%98%8E\"><span class=\"toc-text\">四 函数说明</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-lua_newuserdata\"><span class=\"toc-text\">1. lua_newuserdata</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-lual_checkudata\"><span class=\"toc-text\">2. luaL_checkudata</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-lual_newmetatable\"><span class=\"toc-text\">3. luaL_newmetatable</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-lual_getmetatable\"><span class=\"toc-text\">4. luaL_getmetatable</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-lua_setmetatable\"><span class=\"toc-text\">5. lua_setmetatable</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BA%94-%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99\"><span class=\"toc-text\">五 参考资料</span></a></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Lua编程9之模块","uid":"2ab23a6427d36f17002fdb67d397b275","slug":"zl/2016-01-01-368_Lua编程9之模块","date":"2024-04-03T03:47:35.648Z","updated":"2024-04-03T03:47:35.648Z","comments":true,"path":"api/articles/zl/2016-01-01-368_Lua编程9之模块.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"思考并回答以下问题：1.如何创建一个模块？2.私有函数如何声明？3.return tab1必须和模块同一名称吗？4.如何引用一个模块？别名如何使用？5.原生lua文件加载路径如何查看？6.xLua加载方式是怎样的？建议的加载Lua脚本方式是什么？7.什么是自定义Loader？如何...","link":"","photos":[],"count_time":{"symbolsCount":"3.5k","symbolsTime":"3 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"在Lua中调用C函数","uid":"e915da81aa7864ddfb697e914e30f001","slug":"zl/2016-01-01-367_在Lua中调用C函数","date":"2024-04-03T03:47:35.647Z","updated":"2024-04-03T03:47:35.648Z","comments":true,"path":"api/articles/zl/2016-01-01-367_在Lua中调用C函数.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"Lua调用C语言中的函数是通过栈来进行参数传递的，这与大部分编程语言的内部函数调用的实现一致。我们先实现如下C代码12345678910111213141516171819202122232425262728293031323334353637383940414243444546...","link":"","photos":[],"count_time":{"symbolsCount":"2.9k","symbolsTime":"3 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}