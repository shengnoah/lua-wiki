{"title":"Lua 数据类型","uid":"6c463eadf15d1d28f8d8924fee10fda2","slug":"zl/2016-01-01-87_Lua 数据类型","date":"2024-04-03T03:47:36.151Z","updated":"2024-04-03T03:47:36.151Z","comments":true,"path":"api/articles/zl/2016-01-01-87_Lua 数据类型.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">数据类型</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">nil</td>\n<td>这个最简单，只有值nil属于该类，表示一个无效值（在条件表达式中相当于false）。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">boolean</td>\n<td>包含两个值：false和true。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">number</td>\n<td>表示双精度类型的实浮点数</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">string</td>\n<td>字符串由一对双引号或单引号来表示</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">function</td>\n<td>由 C 或 Lua 编写的函数</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">userdata   </td>\n<td>表示任意存储在变量中的C数据结构</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">thread</td>\n<td>表示执行的独立线路，用于执行协同程序</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">table</td>\n<td>Lua 中的表（table）其实是一个”关联数组”（associative arrays），数组的索引可以是数字或者是字符串。在 Lua 里，table 的创建是通过”构造表达式”来完成，最简单构造表达式是{}，用来创建一个空表。</td>\n</tr>\n</tbody>\n</table>\n<hr/>\n<h2><span id=\"nil\">nil</span><a href=\"#nil\" class=\"header-anchor\">#</a></h2><ul>\n<li>nil 类型表示一种没有任何有效值，它只有一个值 – nil</li>\n<li>对于全局变量和 table，nil 还有一个”删除”作用，给全局变量或者 table 表里的变量赋一个 nil 值，等同于把它们删掉.</li>\n</ul>\n<hr/>\n<h2><span id=\"boolean\">boolean</span><a href=\"#boolean\" class=\"header-anchor\">#</a></h2><ul>\n<li>boolean 类型只有两个可选值：true（真） 和 false（假）</li>\n<li>Lua 把 false 和 nil 看作是”假”，其他的都为”真”:</li>\n</ul>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">if false or nil then</span><br/><span class=\"line\">    print(&#34;至少有一个是 true&#34;)</span><br/><span class=\"line\">else</span><br/><span class=\"line\">    print(&#34;false 和 nil 都为 false!&#34;)</span><br/><span class=\"line\">end</span><br/></pre></td></tr></tbody></table></figure>\n<p> *<em>以上代码执行结果如下</em></p>\n <figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">false 和 nil 都为 false!</span><br/><span class=\"line\">[Finished in 0.0s]</span><br/></pre></td></tr></tbody></table></figure>\n<hr/>\n<h2><span id=\"number\">number</span><a href=\"#number\" class=\"header-anchor\">#</a></h2><ul>\n<li>Lua 默认只有一种 number 类型 – double（双精度）类型（默认类型可以修改 luaconf.h 里的定义）</li>\n</ul>\n<hr/>\n<h2><span id=\"string\">string</span><a href=\"#string\" class=\"header-anchor\">#</a></h2><ul>\n<li>字符串由一对双引号或单引号来表示。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">string1 = &#34;this is string1&#34;</span><br/><span class=\"line\">string2 = &#39;this is string2&#39;</span><br/></pre></td></tr></tbody></table></figure>\n<ul>\n<li>也可以用 2 个方括号 “[[]]” 来表示”一块”字符串。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">html = [[</span><br/><span class=\"line\">There are many words</span><br/><span class=\"line\">]]</span><br/></pre></td></tr></tbody></table></figure>\n<ul>\n<li>在对一个数字字符串上进行算术操作时，Lua 会尝试将这个数字字符串转成一个数字，如：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; print(&#34;2&#34; + 6)</span><br/><span class=\"line\">8.0</span><br/><span class=\"line\">&gt; print(&#34;2&#34; + &#34;6&#34;)</span><br/><span class=\"line\">8.0</span><br/><span class=\"line\">&gt; print(&#34;2 + 6&#34;)</span><br/><span class=\"line\">2 + 6</span><br/><span class=\"line\">&gt; print(&#34;-2e2&#34; * &#34;6&#34;)</span><br/><span class=\"line\">-1200.0</span><br/></pre></td></tr></tbody></table></figure>\n<ul>\n<li>字符串连接使用的是 .. ，如：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; print(&#34;a&#34; .. &#39;b&#39;)</span><br/><span class=\"line\">ab</span><br/><span class=\"line\">&gt; print(157 .. 428)</span><br/><span class=\"line\">157428</span><br/></pre></td></tr></tbody></table></figure>\n<ul>\n<li>使用 # 来计算字符串的长度，放在字符串前面，如：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; len = &#34;https://freshwlnd.github.io/&#34;</span><br/><span class=\"line\">&gt; print(#len)</span><br/><span class=\"line\">28</span><br/></pre></td></tr></tbody></table></figure>\n<hr/>\n<h2><span id=\"table\">table</span><a href=\"#table\" class=\"header-anchor\">#</a></h2><ul>\n<li>在 Lua 里，table 的创建是通过”构造表达式”来完成，最简单构造表达式是{}，用来创建一个空表。也可以在表里添加一些数据，直接初始化表:</li>\n</ul>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">-- 创建一个空的 table</span><br/><span class=\"line\">table1 = {}</span><br/><span class=\"line\">table2 = {&#39;a&#39;}</span><br/></pre></td></tr></tbody></table></figure>\n<ul>\n<li>Lua 中的表（table）其实是一个”关联数组”（associative arrays），数组的索引可以是数字或者是字符串:</li>\n</ul>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/><span class=\"line\">9</span><br/><span class=\"line\">10</span><br/><span class=\"line\">11</span><br/><span class=\"line\">12</span><br/><span class=\"line\">13</span><br/><span class=\"line\">14</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">-- table.lua</span><br/><span class=\"line\"></span><br/><span class=\"line\">-- 1</span><br/><span class=\"line\">table1 = {1,3,4,5,6}</span><br/><span class=\"line\">print(table1[3])</span><br/><span class=\"line\">print()</span><br/><span class=\"line\"></span><br/><span class=\"line\">-- 2</span><br/><span class=\"line\">table2 = {}</span><br/><span class=\"line\">table2[&#39;a&#39;] = &#39;b&#39;</span><br/><span class=\"line\">table2[1] = 2</span><br/><span class=\"line\">for k,v in pairs(table2) do</span><br/><span class=\"line\">\tprint(k..&#39; : &#39;..v)</span><br/><span class=\"line\">end</span><br/></pre></td></tr></tbody></table></figure>\n<ul>\n<li>脚本执行结果为：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">4</span><br/><span class=\"line\"></span><br/><span class=\"line\">1 : 2</span><br/><span class=\"line\">a : b</span><br/><span class=\"line\">[Finished in 0.0s]</span><br/></pre></td></tr></tbody></table></figure>\n<ul>\n<li>不同于其他语言的数组把 0 作为数组的初始索引，在 Lua 里表的默认初始索引一般以 1 开始:</li>\n</ul>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">-- table.lua</span><br/><span class=\"line\"></span><br/><span class=\"line\">table = {1,2,3,4,5}</span><br/><span class=\"line\">for k,v in pairs(table) do</span><br/><span class=\"line\">\tprint(k..&#39; : &#39;..v)</span><br/><span class=\"line\">end</span><br/></pre></td></tr></tbody></table></figure>\n<ul>\n<li>脚本执行结果为：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">1 : 1</span><br/><span class=\"line\">2 : 2</span><br/><span class=\"line\">3 : 3</span><br/><span class=\"line\">4 : 4</span><br/><span class=\"line\">5 : 5</span><br/><span class=\"line\">[Finished in 0.0s]</span><br/></pre></td></tr></tbody></table></figure>\n<ul>\n<li>table 不会固定长度大小，有新数据添加时 table 长度会自动增长，没初始的 table 都是 nil:</li>\n</ul>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">-- table.lua</span><br/><span class=\"line\"></span><br/><span class=\"line\">table = {}</span><br/><span class=\"line\">table[1] = &#39;a&#39;</span><br/><span class=\"line\">table[2] = &#39;b&#39;</span><br/><span class=\"line\">for i=1,3 do</span><br/><span class=\"line\">\tprint(table[i])</span><br/><span class=\"line\">end</span><br/></pre></td></tr></tbody></table></figure>\n<ul>\n<li>脚本执行结果为：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">a</span><br/><span class=\"line\">b</span><br/><span class=\"line\">nil</span><br/><span class=\"line\">[Finished in 0.0s]</span><br/></pre></td></tr></tbody></table></figure>\n<hr/>\n<h2><span id=\"function\">function</span><a href=\"#function\" class=\"header-anchor\">#</a></h2><ul>\n<li>在 Lua 中，函数是被看作是”第一类值（First-Class Value）”，函数可以存在变量里:</li>\n</ul>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/><span class=\"line\">9</span><br/><span class=\"line\">10</span><br/><span class=\"line\">11</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">-- function.lua</span><br/><span class=\"line\">function factorial1(n)</span><br/><span class=\"line\">    if n == 0 then</span><br/><span class=\"line\">        return 1</span><br/><span class=\"line\">    else</span><br/><span class=\"line\">        return n * factorial1(n - 1)</span><br/><span class=\"line\">    end</span><br/><span class=\"line\">end</span><br/><span class=\"line\">print(factorial1(5))</span><br/><span class=\"line\">factorial2 = factorial1</span><br/><span class=\"line\">print(factorial2(5))</span><br/></pre></td></tr></tbody></table></figure>\n<ul>\n<li>脚本执行结果为：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">120</span><br/><span class=\"line\">120</span><br/><span class=\"line\">[Finished in 0.0s]</span><br/></pre></td></tr></tbody></table></figure>\n<ul>\n<li>function 可以以匿名函数（anonymous function）的方式通过参数传递:</li>\n</ul>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/><span class=\"line\">9</span><br/><span class=\"line\">10</span><br/><span class=\"line\">11</span><br/><span class=\"line\">12</span><br/><span class=\"line\">13</span><br/><span class=\"line\">14</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">-- function2.lua</span><br/><span class=\"line\">function testFun(tab,fun)</span><br/><span class=\"line\">    for k ,v in pairs(tab) do</span><br/><span class=\"line\">        print(fun(k,v));</span><br/><span class=\"line\">    end</span><br/><span class=\"line\">end</span><br/><span class=\"line\"></span><br/><span class=\"line\"></span><br/><span class=\"line\">tab={key1=&#34;val1&#34;,key2=&#34;val2&#34;};</span><br/><span class=\"line\">testFun(tab,</span><br/><span class=\"line\">function(key,val)--匿名函数</span><br/><span class=\"line\">    return key..&#34;=&#34;..val;</span><br/><span class=\"line\">end</span><br/><span class=\"line\">);</span><br/></pre></td></tr></tbody></table></figure>\n<ul>\n<li>脚本执行结果为：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">key1=val1</span><br/><span class=\"line\">key2=val2</span><br/><span class=\"line\">[Finished in 0.0s]</span><br/></pre></td></tr></tbody></table></figure>\n<hr/>\n<h2><span id=\"userdata-zi-ding-yi-lei-xing\">userdata（自定义类型）</span><a href=\"#userdata-zi-ding-yi-lei-xing\" class=\"header-anchor\">#</a></h2><ul>\n<li>userdata 是一种用户自定义数据，用于表示一种由应用程序或 C/C++ 语言库所创建的类型，可以将任意 C/C++ 的任意数据类型的数据（通常是 struct 和 指针）存储到 Lua 变量中调用。</li>\n</ul>\n<hr/>\n<blockquote>\n<p>在最后，必须感谢<a href=\"www.runoob.com\">菜鸟教程</a>的教程</p>\n</blockquote>","text":" 数据类型 描述 nil 这个最简单，只有值nil属于该类，表示一个无效值（在条件表达式中相当于false）。 boolean 包含两个值：false和true。 number 表示双精度类型的实浮点数 string 字符串由一对双引号或单引号来表示 function 由 C 或...","link":"","photos":[],"count_time":{"symbolsCount":"3k","symbolsTime":"3 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">nil</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">boolean</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">number</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">string</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">table</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">function</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">userdata（自定义类型）</span></a></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Lua中的表操作","uid":"cc682423b40ae962d737009e42144d09","slug":"zl/2016-01-01-881_Lua中的表操作","date":"2024-04-03T03:47:36.154Z","updated":"2024-04-03T03:47:36.155Z","comments":true,"path":"api/articles/zl/2016-01-01-881_Lua中的表操作.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"「�TODO�」: 表的查找和新增元素 取长度操作Lua中可以用 # 符号对表进行取长度操作. 对Lua中的表进行取长度操作时, 如果没有该表的元方法 __len, 则该取长度操作只对表的数组部分进行. 取长度的入口函数为 luaH_getn, 该函数的目的是找到表 t 的一个边...","link":"","photos":[],"count_time":{"symbolsCount":"2.1k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"lua脚本解析webhooks实现自动部署","uid":"fbe4509147239e385948192a32ab2b36","slug":"zl/2016-01-01-880_lua脚本解析webhooks实现自动部署","date":"2024-04-03T03:47:36.151Z","updated":"2024-04-03T03:47:36.152Z","comments":true,"path":"api/articles/zl/2016-01-01-880_lua脚本解析webhooks实现自动部署.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"码云配置webhooks实现自动部署的方式有很多，可以把项目放在github用github的webhooks，但是github只能创建公开项目私有项目是要钱的。也可以使用一种相对麻烦的方式，可以在vps上建一个git仓库每次提交到vps上之后触发hook去更新blog，这种方法相...","link":"","photos":[],"count_time":{"symbolsCount":"2.1k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}