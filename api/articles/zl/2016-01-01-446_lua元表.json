{"title":"lua元表","uid":"c5c8270f1029963f65f977750d4c1320","slug":"zl/2016-01-01-446_lua元表","date":"2024-04-03T03:47:35.728Z","updated":"2024-04-03T03:47:35.728Z","comments":true,"path":"api/articles/zl/2016-01-01-446_lua元表.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<p>在 Lua table 中我们可以访问对应的key来得到value值，但是却无法对两个 table 进行操作。</p>\n<p>因此 Lua 提供了元表(Metatable)，允许我们改变table的行为，每个行为关联了对应的元方法。</p>\n<p>例如，使用元表我们可以定义Lua如何计算两个table的相加操作a+b。</p>\n<p>当Lua试图对两个表进行相加时，先检查两者之一是否有元表，之后检查是否有一个叫”<strong>add”的字段，若找到，则调用对应的值。”</strong>add”等即时字段，其对应的值（往往是一个函数或是table）就是”元方法”。</p>\n<p>有两个很重要的函数来处理元表：</p>\n<p><strong>setmetatable(table,metatable):</strong>对指定table设置元表(metatable)，如果元表(metatable)中存在__metatable键值，setmetatable会失败 。</p>\n<p><strong>getmetatable(table):</strong>返回对象的元表(metatable)。</p>\n<p><strong>__index 元方法</strong></p>\n<p>这是 metatable 最常用的键。</p>\n<p>当你通过键来访问 table 的时候，如果这个键没有值，那么Lua就会寻找该table的metatable（假定有metatable）中的<strong>index 键。如果</strong>index包含一个表格，Lua会在表格中查找相应的键。</p>\n<p>Lua查找一个表元素时的规则，其实就是如下3个步骤:</p>\n<p>1.在表中查找，如果找到，返回该元素，找不到则继续</p>\n<p>2.判断该表是否有元表，如果没有元表，返回nil，有元表则继续。</p>\n<p>3.判断元表有没有<strong>index方法，如果</strong>index方法为nil，则返回nil；如果<strong>index方法是一个表，则重复1、2、3；如果</strong>index方法是一个函数，则返回该函数的返回值。</p>\n<p><strong>__newindex 元方法</strong></p>\n<p><strong>newindex 元方法用来对表更新，</strong>index则用来对表访问 。</p>\n<p>当你给表的一个缺少的索引赋值，解释器就会查找__newindex 元方法：如果存在则调用这个函数而不进行赋值操作。</p>\n<p><strong>__call 元方法</strong></p>\n<p>__call 元方法在 Lua 调用一个值时调用。</p>\n<p><strong>__tostring 元方法</strong></p>\n<p>__tostring 元方法用于修改表的输出行为。</p>\n<p>table存在两种行为：查询和修改（赋值），通过元方法<strong>index和</strong>newindex来改变table的这两种行为。</p>\n<p>__index主要用于table的查询</p>\n<p>table[key] 的访问过程，首先检查table表中是否存在key的字段，如果有则返回，否则检查是否有__index的元方法，没有返回nil,有则查找元方法。</p>\n<p>__index元方法可以是一个函数，还可以是一个table。如果是一个函数，则以table和不存在的key作为参数方位该函数，</p>\n<p>例如：__index = function(t,key)</p>\n<p>如果是一个table时，就以相同的方式来访问这个table（即传入key访问元方法的table，如果存在则放回值，反之返回nil）</p>\n<p>例如：__index = tab –此时会返回tab[key]的值</p>\n<p>__index可以很好的实现具有默认值的table</p>\n<pre><code>function setDefaultValues(t,d)\n<p>​    local mt = &#123;__index = function() return d end&#125;</p>\n<p>​    setmetatable(t, mt)</p>\n<p>end</p>\n<p>tab = &#123;x=10,y=20&#125;</p>\n<p>print(tab.x ,tab.y,tab.z)    --由于没有设置元方法则为nil</p>\n<p>setDefaultValues(tab,100)    --设置默认值（设置__index元方法）</p>\n<p>print(tab.z)            --检查到有__index的元方法则返回默认值<br />\n</code></pre><p>__newindex主要用于table的更新</p></p>\n<p>当对table中不存在的索引赋值时，解释器就会查找__newindex元方法。如果有这个元方法，就调用这个元方法，而不是执行赋值。如果这个元方法是一个table，解释器就在table中进行赋值，而不是对原来的table。</p>\n<pre><code>local k = &#123;&#125;\n<p>local mt = &#123;</p>\n<p>​    __newindex = k</p>\n<p>&#125;</p>\n<p>local t = &#123;&#125;</p>\n<p>setmetatable(t, mt)</p>\n<p>print(&quot;赋值前：&quot;)</p>\n<p>for k,v in pairs(k) do</p>\n<p>​    print(k ,v)</p>\n<p>end</p>\n<p>t[1] = 20</p>\n<p>print(&quot;赋值后：t表中的值:&quot;)</p>\n<p>for k,v in pairs(t) do</p>\n<p>​    print(k ,v)</p>\n<p>end</p>\n<p>print(&quot;赋值后：k表中的值:&quot;)</p>\n<p>for k,v in pairs(k) do</p>\n<p>​    print(k ,v)</p>\n<p>end<br />\n</code></pre></p>\n","text":"在 Lua table 中我们可以访问对应的key来得到value值，但是却无法对两个 table 进行操作。 因此 Lua 提供了元表(Metatable)，允许我们改变table的行为，每个行为关联了对应的元方法。 例如，使用元表我们可以定义Lua如何计算两个table的相加...","link":"","photos":[],"count_time":{"symbolsCount":"2.1k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Lua作图教程之设计模式","uid":"f5fa6c4f2499c0d40f721be59caa4a29","slug":"zl/2016-01-01-449_Lua作图教程之设计模式","date":"2024-04-03T03:47:35.729Z","updated":"2024-04-03T03:47:35.729Z","comments":true,"path":"api/articles/zl/2016-01-01-449_Lua作图教程之设计模式.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"设计模式设计模式（Design pattern）代表了最佳的实践，通常被有经验的面向对象的软件开发人员所采用。设计模式是软件开发人员在软件开发过程中面临的一般问题的解决方案。这些解决方案是众多软件开发人员经过相当长的一段时间的试验和错误总结出来的。 到目前为止，我在用lua作图时...","link":"","photos":[],"count_time":{"symbolsCount":"1.1k","symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"对LuaJIT制作的游戏的简单修改（一）","uid":"6e4664f8c3b0fa66a18a7e477462fa1b","slug":"zl/2016-01-01-443_对LuaJIT制作的游戏的简单修改（一）","date":"2024-04-03T03:47:35.727Z","updated":"2024-04-03T03:47:35.727Z","comments":true,"path":"api/articles/zl/2016-01-01-443_对LuaJIT制作的游戏的简单修改（一）.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"本次修改的游戏是一个使用了LuaJIT制作的梦幻西游类单机游戏，名字叫做《梦战：碧海旭梦》。 这个游戏在我的硬盘里放了有很长一段时间了，当时水平有限，就没有再修改，直到这几天才重新开始研究。 网上关于LuaJIT的分析资料并不多，而有关单机游戏修改的是没有了，所以我基本上是从零开...","link":"","photos":[],"count_time":{"symbolsCount":"2.3k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}