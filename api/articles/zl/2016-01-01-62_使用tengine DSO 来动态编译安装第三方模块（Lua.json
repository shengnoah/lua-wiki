{"title":"使用tengine DSO 来动态编译安装第三方模块（Lua","uid":"f85dd439799fe3e2219dae35416b76de","slug":"zl/2016-01-01-62_使用tengine DSO 来动态编译安装第三方模块（Lua","date":"2024-04-03T03:47:35.853Z","updated":"2024-04-03T03:47:35.854Z","comments":true,"path":"api/articles/zl/2016-01-01-62_使用tengine DSO 来动态编译安装第三方模块（Lua.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<p>在使用nginx时，需要增加或者改动一个模块，都需要重新编译nginx文件。最近使用了tengine，它提供的DSO工具来动态加载模块。本例测试需要动态增加lua-nginx模块，记录一下安装过程。</p>\n<h2>1. 编译安装 luajit</h2>\n<p>Lua 环境推荐使用成熟快速的 luajit。</p>\n<figure class=\"code\"><div class=\"highlight\"><table><tbody><tr><td class=\"gutter\"><pre class=\"line-numbers\"><span class=\"line-number\">1</span>\n<span class=\"line-number\">2</span>\n<span class=\"line-number\">3</span>\n<span class=\"line-number\">4</span>\n<span class=\"line-number\">5</span>\n</pre></td><td class=\"code\"><pre><code class=\"\"><span class=\"line\">cd /root/Download/\n</span><span class=\"line\">wget http://luajit.org/download/LuaJIT-2.0.4.tar.gz\n</span><span class=\"line\">tar zxvf LuaJIT-2.0.4.tar.gz\n</span><span class=\"line\">cd /root/Downloads/LuaJIT-2.0.4\n</span><span class=\"line\">make &amp;&amp; make install PREFIX=/usr/local/luajit-2.0.4\n</span></code></pre></td></tr></tbody></table></div></figure>\n<h2>2. 设置环境变量：</h2>\n<figure class=\"code\"><div class=\"highlight\"><table><tbody><tr><td class=\"gutter\"><pre class=\"line-numbers\"><span class=\"line-number\">1</span>\n<span class=\"line-number\">2</span>\n<span class=\"line-number\">3</span>\n</pre></td><td class=\"code\"><pre><code class=\"\"><span class=\"line\"># tell nginx&#39;s build system where to find LuaJIT 2.0:\n</span><span class=\"line\">export LUAJIT_LIB=/usr/local/luajit-2.0.4/lib\n</span><span class=\"line\">export LUAJIT_INC=/usr/local/luajit-2.0.4/include/luajit-2.0</span></code></pre></td></tr></tbody></table></div></figure>\n<h2>3. 你能够使用dso_tool(在Nginx安装目录的sbin下)这个工具来编译第三方模块 lua-nginx-module.</h2>\n<figure class=\"code\"><div class=\"highlight\"><table><tbody><tr><td class=\"gutter\"><pre class=\"line-numbers\"><span class=\"line-number\">1</span>\n<span class=\"line-number\">2</span>\n<span class=\"line-number\">3</span>\n<span class=\"line-number\">4</span>\n<span class=\"line-number\">5</span>\n</pre></td><td class=\"code\"><pre><code class=\"\"><span class=\"line\">cd /root/Download/\n</span><span class=\"line\">wget --no-check-certificate https://github.com/openresty/lua-nginx-module/archive/v0.9.19.tar.gz\n</span><span class=\"line\">tar zxvf v0.9.19.tar.gz \n</span><span class=\"line\">cd /usr/local/tengine/sbin/\n</span><span class=\"line\">./dso_tool --add-module=/root/Downloads/LuaJIT-2.0.4</span></code></pre></td></tr></tbody></table></div></figure>\n<h2>4. 编译成功时，如下图</h2>\n<p><img src=\"https://swmwlm.github.io//images/tengine/tengine-2.png\"/></p>\n<h2>5. 设置动态库</h2>\n<figure class=\"code\"><div class=\"highlight\"><table><tbody><tr><td class=\"gutter\"><pre class=\"line-numbers\"><span class=\"line-number\">1</span>\n<span class=\"line-number\">2</span>\n</pre></td><td class=\"code\"><pre><code class=\"\"><span class=\"line\">echo &#39;/usr/local/luajit-2.0.4/lib&#39;&gt;&gt;/etc/ld.so.conf.d/usr_local_luajit_lib.conf \n</span><span class=\"line\">ldconfig</span></code></pre></td></tr></tbody></table></div></figure>\n<h2>6. 配置tengine的配置文件，动态加载模块，如下图所示：</h2>\n<p><img src=\"https://swmwlm.github.io//images/tengine/tengine-1.png\"/></p>\n<p>使用./nginx -t 测试配置文件是否通过。提示成功，则打开浏览器访问/lua路径，测试第三方模块lua-nginx-module是否正常。</p>\n<h2>7. 全新编译安装Tengine+Lua</h2>\n<h3>7.1 编译安装nginx需要的依赖包</h3>\n<pre><code>yum install gcc gcc-c++ make automake autoconf libtool pcre pcre-devel zlib zlib-devel openssl openssl-devel\n</code></pre>\n<h3>7.2 编译安装Lua需要的依赖包（centos默认可能装过了，可省略，rpm -qa|grep readline查询）</h3>\n<pre><code>yum install readline readline-devel\n\n或者手动编译安装\n\nwget -c ftp://ftp.gnu.org/gnu/readline/readline-6.2.tar.gz \ntar -zxvf readline-6.2.tar.gz \ncd readline-6.2\n./configure\nmake &amp;&amp; make installl\n\n手动编译后如果指定了 prefix ，要修改一下 lua 的编译脚本\n修改lua src/Makefile\n修改MYCFLAGS=-I/usr/local/readline/include\n修改MYLDFLAGS=-L/usr/local/readline/lib\n直接执行lua命令，出现加载不了readline.so的问题，软链接 /usr/local/readline/lib/libreadline.so.6 到 /usr/lib/\n</code></pre>\n<h3>7.3 安装lua</h3>\n<pre><code>yum安装:\nyum install lua lua-devel\n\n安装Lua或者LuaJIT都是可以的，但是出于效率的考虑，推荐安装LuaJIT。源码安装LuaGIT如下：\nLuaGIT官方地址: http://luajit.org/\n</code></pre>\n<figure class=\"code\"><div class=\"highlight\"><table><tbody><tr><td class=\"gutter\"><pre class=\"line-numbers\"><span class=\"line-number\">1</span>\n<span class=\"line-number\">2</span>\n<span class=\"line-number\">3</span>\n<span class=\"line-number\">4</span>\n<span class=\"line-number\">5</span>\n<span class=\"line-number\">6</span>\n<span class=\"line-number\">7</span>\n<span class=\"line-number\">8</span>\n<span class=\"line-number\">9</span>\n</pre></td><td class=\"code\"><pre><code class=\"\"><span class=\"line\">wget http://luajit.org/download/LuaJIT-2.0.4.tar.gz\n</span><span class=\"line\">cd /usr/local/src \n</span><span class=\"line\">tar -zxvf LuaJIT-2.0.4.tar.gz \n</span><span class=\"line\">cd LuaJIT-2.0.4\n</span><span class=\"line\">make\n</span><span class=\"line\">make install                                                       (也可以使用make install PREFIX=/usr/local/luagit-2.0.4)\n</span><span class=\"line\">ln -s /usr/local/lib/libluajit-5.1.so.2 /lib64/libluajit-5.1.so.2    (ln -s /usr/local/luagit-2.0.4/lib/libluajit-5.1.so.2 /lib64/libluajit-5.1.so.2)\n</span><span class=\"line\">export LUAJIT_LIB=/usr/local/lib                                       (export LUAJIT_LIB=/usr/local/luagit-2.0.4/lib)\n</span><span class=\"line\">export LUAJIT_INC=/usr/local/include/luajit-2.0/                   (export LUAJIT_INC=/usr/local/luagit-2.0.4/include/luajit-2.0/)</span></code></pre></td></tr></tbody></table></div></figure>\n<pre><code>因为安装在缺省路径，所以LuaJIT对应的lib，include均在/usr/local目录里。\n</code></pre>\n<blockquote><p><a href=\"http://huoding.com/2012/08/31/156\">请参考博文</a></p></blockquote>\n<p>创建www用户和组:</p>\n<pre><code>sudo groupadd www\nsudo useradd www -g www -s /sbin/nologin -M \n</code></pre>\n<p>另外，可以安装jemalloc，优化内存管理</p>\n<pre><code>wget http://www.canonware.com/download/jemalloc/jemalloc-3.6.0.tar.bz2\ntar xjf jemalloc-3.6.0.tar.bz2\ncd jemalloc-3.6.0\n./configure\nmake &amp;&amp; make install\necho &#39;/usr/local/lib&#39; &gt; /etc/ld.so.conf.d/local.conf\nldconfig\n</code></pre>\n<h4>7.3.1 使用jemalloc优化MySQL</h4>\n<pre><code>方法1.\n\nMySQL/MaridDB 5.5编译方法，cmake预编译时加上下面参数\n\n-DCMAKE_EXE_LINKER_FLAGS=&#34;-ljemalloc&#34; -DWITH_SAFEMALLOC=OFF\n\n方法2.\n\n修改mysqld_safe直接加载:\n\n查找文件 /usr/local/mysql/bin/mysqld_safe\n在#executing mysqld_safe 下面加上\n\nLD_PRELOAD=/usr/local/lib/libjemalloc.so\n\n重新启动MYSQL\n\n使用下面代码自动修改mysqld_safe文件\n\nsed -i &#39;s@executing mysqld_safe@executing mysqld_safenexport LD_PRELOAD=/usr/local/lib/libjemalloc.so@&#39; /usr/local/mysql/bin/mysqld_safe\nservice mysqld restart\n</code></pre>\n<h4>7.3.2 使用jemalloc优化Nginx</h4>\n<pre><code>编译NGINX时添加以下参数:\n--with-ld-opt=&#34;-ljemalloc&#34;\n\n具体实现：\n\ncd lnmp/src/nginx-1.4.2\nmake clean\n./configure --prefix=/usr/local/nginx --user=www --group=www   \n--with-http_stub_status_module --with-http_ssl_module --with-http_flv_module  \n--with-http_gzip_static_module --with-ld-opt=&#34;-ljemalloc&#34; (或者 --with-jemalloc)\nmake &amp;&amp; make install\n</code></pre>\n<p>验证 jemalloc 是否运行:</p>\n<pre><code>lsof -n | grep jemalloc\n</code></pre>\n<h3>7.4 编译Tengine</h3>\n<figure class=\"code\"><div class=\"highlight\"><table><tbody><tr><td class=\"gutter\"><pre class=\"line-numbers\"><span class=\"line-number\">1</span>\n<span class=\"line-number\">2</span>\n<span class=\"line-number\">3</span>\n<span class=\"line-number\">4</span>\n<span class=\"line-number\">5</span>\n<span class=\"line-number\">6</span>\n<span class=\"line-number\">7</span>\n<span class=\"line-number\">8</span>\n<span class=\"line-number\">9</span>\n<span class=\"line-number\">10</span>\n<span class=\"line-number\">11</span>\n<span class=\"line-number\">12</span>\n</pre></td><td class=\"code\"><pre><code class=\"\"><span class=\"line\">shell&gt; wget http://tengine.taobao.org/download/tengine-2.1.2.tar.gz\n</span><span class=\"line\">shell&gt; tar zxvf tengine-2.1.2.tar.gz\n</span><span class=\"line\">shell&gt; cd tengine-2.1.2\n</span><span class=\"line\">shell&gt; ./configure --prefix=/usr/local/tengine-2.1.2 --with-http_lua_module --with-luajit-lib=/usr/local/luagit-2.0.4/lib/ --with-luajit-inc=/usr/local/luagit-2.0.4/include/luajit-2.0/ --pid-path=/var/run/nginx.pid --group=www --user=www --dso-path=/usr/local/tengine-2.1.2/modules --with-http_gzip_static_module --with-http_stub_status_module --with-poll_module --with-http_sub_module --with-http_realip_module --with-http_concat_module --http-proxy-temp-path=/var/tmp/tengine-2.1.2/proxy_temp --http-fastcgi-temp-path=/var/tmp/tengine-2.1.2/fastcgi_temp --http-uwsgi-temp-path=/var/tmp/tengine-2.1.2/uwsgi_temp --http-scgi-temp-path=/var/tmp/tengine-2.1.2/cgi_temp --http-client-body-temp-path=/var/tmp/tengine-2.1.2/client_body_temp --http-log-path=/var/log/tengine-2.1.2/access.log --error-log-path=/var/log/tengine-2.1.2/error.log --with-ld-opt=&#34;-Wl,-rpath,$LUAJIT_LIB,-ljemalloc&#34;\n</span><span class=\"line\">\n</span><span class=\"line\">shell&gt; make&amp;&amp; make install\n</span><span class=\"line\">\n</span><span class=\"line\">shell&gt; ln -s /usr/local/tengine-2.1.2 /usr/local/nginx （创建软连接，可省略）\n</span><span class=\"line\">shell&gt; mkdir /var/tmp/tengine-2.1.2 -p           （创建所需的目录以及赋权）\n</span><span class=\"line\">shell&gt; chown -R www:www /var/tmp/tengine-2.1.2\n</span><span class=\"line\">\n</span><span class=\"line\">\n</span></code></pre></td></tr></tbody></table></div></figure>\n<pre><code>参数说明：由于Pcre是通过yum安装的，不用使用--with-pcre=/path/to/ 指定。\nlua是手动安装的需要配置参数\n--with-http_lua_module \n--with-luajit-lib=/usr/local/luagit-2.0.4/lib/  --with-luajit-inc=/usr/local/luagit-2.0.4/include/luajit-2.0/ \n\n--prefix安装的目录\n\n作用：不指定prefix，则可执行文件默认放在/usr/local/bin,库文件默认在/usr/local/lib,配置文件在/usr/local/etc,其他资源文件放在/usr/local/share。若要卸载这个程序，要么在原来的make目录下执行make uninstall(前提是make文件指定过uninstall),要么去上述默认目录里把相关的文件夹一个个的删掉。但是，对于指定了prefix的目录的好处是卸载软件或者移植软件。当某个软件不再需要时，只须简单删除该文件安装目录，就可以把软件卸载干净；移植软件只需要拷贝整个目录到另外一个机器即可（相同的操作系统及环境依赖）。\n\n--with-ld-opt\n\n其中的 --with-ld-opt=-Wl,-rpath,/usr/local/lib:/opt/openresty/luajit/lib 意思是：这是链接器选项，目的是把/usr/loca/lib和/opt/openresty/luajit/lib这两个路径添加进nginx可执行文件的RPATH头重，这样在启动的时候，系统就可以找到正确的动态链接库文件。\n\n若不使用该参数指定动态的链接库，试着使用 ./nginx 启动tengine,如果运气不好的话，可能遇到如下错误：\n\ncannot open shared object file: No such file or directory\n\n这是什么情况呢？可以使用ldd命令来查看：\nldd /usr/local/tengine-2.1.0/sbin/nginx\n会出现xxxx-xxxx.so =&gt; not found\n\n此类问题通常使用ldconfig命令就能解决，例如本例有可能出现的\nlibluajit-&lt;VERSION&gt;.so =&gt; not found\n\n我们使用如下命令：（由于我们默认安装libluagit动态链接库默认安装至/usr/local/lib）\n</code></pre>\n<figure class=\"code\"><div class=\"highlight\"><table><tbody><tr><td class=\"gutter\"><pre class=\"line-numbers\"><span class=\"line-number\">1</span>\n<span class=\"line-number\">2</span>\n</pre></td><td class=\"code\"><pre><code class=\"\"><span class=\"line\">shell&gt; echo &#34;/usr/local/lib&#34; &gt; /etc/ld.so.conf.d/usr_local_lib.conf\n</span><span class=\"line\">shell&gt; ldconfig</span></code></pre></td></tr></tbody></table></div></figure>\n<pre><code>再次启动nginx，应该就OK了。\n</code></pre>\n<h3>7.5 测试lua是否可以使用了</h3>\n<p>配置下面代码至nginx.conf的server 中，并重新加载配置文件（./nginx -s reload），</p>\n<figure class=\"code\"><div class=\"highlight\"><table><tbody><tr><td class=\"gutter\"><pre class=\"line-numbers\"><span class=\"line-number\">1</span>\n<span class=\"line-number\">2</span>\n<span class=\"line-number\">3</span>\n<span class=\"line-number\">4</span>\n<span class=\"line-number\">5</span>\n<span class=\"line-number\">6</span>\n<span class=\"line-number\">7</span>\n</pre></td><td class=\"code\"><pre><code class=\"\"><span class=\"line\">location /lua &#123;\n</span><span class=\"line\">    set $test &#34;hello, world.&#34;;\n</span><span class=\"line\">    content_by_lua &#39;\n</span><span class=\"line\">        ngx.header.content_type = &#34;text/plain&#34;;\n</span><span class=\"line\">        ngx.say(ngx.var.test);\n</span><span class=\"line\">    &#39;;\n</span><span class=\"line\">&#125;</span></code></pre></td></tr></tbody></table></div></figure>","text":"在使用nginx时，需要增加或者改动一个模块，都需要重新编译nginx文件。最近使用了tengine，它提供的DSO工具来动态加载模块。本例测试需要动态增加lua-nginx模块，记录一下安装过程。 1. 编译安装 luajit Lua 环境推荐使用成熟快速的 luajit。 1...","link":"","photos":[],"count_time":{"symbolsCount":"6.5k","symbolsTime":"6 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">1. 编译安装 luajit</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">2. 设置环境变量：</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">3. 你能够使用dso_tool(在Nginx安装目录的sbin下)这个工具来编译第三方模块 lua-nginx-module.</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">4. 编译成功时，如下图</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">5. 设置动态库</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">6. 配置tengine的配置文件，动态加载模块，如下图所示：</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">7. 全新编译安装Tengine+Lua</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">7.1 编译安装nginx需要的依赖包</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">7.2 编译安装Lua需要的依赖包（centos默认可能装过了，可省略，rpm -qa|grep readline查询）</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">7.3 安装lua</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\"><span class=\"toc-text\">7.3.1 使用jemalloc优化MySQL</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\"><span class=\"toc-text\">7.3.2 使用jemalloc优化Nginx</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">7.4 编译Tengine</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">7.5 测试lua是否可以使用了</span></a></li></ol></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Style Transfer in Text Exploration and Evaluation","uid":"ac918c0dcbf09644172fa3f2545f1457","slug":"zl/2016-01-01-629_Style Transfer in Text Exploration and Evaluation","date":"2024-04-03T03:47:35.853Z","updated":"2024-04-03T03:47:35.853Z","comments":true,"path":"api/articles/zl/2016-01-01-629_Style Transfer in Text Exploration and Evaluation.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"Abstract 2 main problems in Style Transfer: Lack of parallel data Model learn from non-parallel data Learn separate content representations ...","link":"","photos":[],"count_time":{"symbolsCount":"2k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Programming in Lua(Thrid Edition)笔记","uid":"a502732b8dc58224e972b6c53538b8c4","slug":"zl/2016-01-01-628_Programming in Lua(Thrid Edition)笔记","date":"2024-04-03T03:47:35.852Z","updated":"2024-04-03T03:47:35.853Z","comments":true,"path":"api/articles/zl/2016-01-01-628_Programming in Lua(Thrid Edition)笔记.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"17 Weak Tables and Finalizers第二部分的这后几章都不太好理解，作为第二部分的这最后一章尤其如此，看了至少有三遍才看明白，为了保证之后能看懂，这一章的笔记会加上不少自己的理解。 这章看完PiL第二部分也就学完，前两部分占了全书一半多一点，偏重语法和语言本...","link":"","photos":[],"count_time":{"symbolsCount":"5.3k","symbolsTime":"5 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}