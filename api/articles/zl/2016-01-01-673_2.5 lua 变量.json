{"title":"2.5 lua 变量","uid":"b2787ccd9305bf14b24dde7aef10b55d","slug":"zl/2016-01-01-673_2.5 lua 变量","date":"2024-04-03T03:47:35.899Z","updated":"2024-04-03T03:47:35.900Z","comments":true,"path":"api/articles/zl/2016-01-01-673_2.5 lua 变量.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<h2 id=\"全局变量\"><a href=\"#全局变量\" class=\"headerlink\" title=\"全局变量\"></a>全局变量</h2><h3 id=\"创建一个全局变量\"><a href=\"#创建一个全局变量\" class=\"headerlink\" title=\"创建一个全局变量\"></a>创建一个全局变量</h3><p>全局变量不需要声明，给一个变量赋值即创建了一个全局变量，访问一个没有初始化的变量（默认是全局变量，即，lua的变量默认是全局变量，特别注意）也不会出错，会返回<code>nil</code>。<br/></p><figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(var_a) </span><br/><span class=\"line\">var_a = <span class=\"number\">10</span></span><br/><span class=\"line\"><span class=\"built_in\">print</span>(var_a) <span class=\"comment\">-- 10</span></span><br/></pre></td></tr></tbody></table></figure><p></p>\n<p>在命令模式中执行如下：<br/></p><figure class=\"highlight shell\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">Lua 5.3.4  Copyright (C) 1994-2017 Lua.org, PUC-Rio</span><br/><span class=\"line\"> print(var_a)</span><br/><span class=\"line\">nil</span><br/><span class=\"line\"></span><br/></pre></td></tr></tbody></table></figure><p></p>\n<h3 id=\"删除一个全局变量\"><a href=\"#删除一个全局变量\" class=\"headerlink\" title=\"删除一个全局变量\"></a>删除一个全局变量</h3><p>删除一个变量很简单，直接将改变量赋值为<code>nil</code>;如下面的例子：b是全局变量，当赋值为<code>nil</code>之后，再调用<code>print</code>就会返回<code>nil</code>。<br/></p><figure class=\"highlight shell\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">Lua 5.3.4  Copyright (C) 1994-2017 Lua.org, PUC-Rio</span><br/><span class=\"line\"> b = 1; print(&#34;b=&#34; .. b); b = nil; print(b);</span><br/><span class=\"line\">b=1</span><br/><span class=\"line\">nil</span><br/><span class=\"line\"></span><br/></pre></td></tr></tbody></table></figure><p></p>\n<p>总之，可以这么理解：当一个变量被赋值为<code>nil</code>，这个变量就变得像从来没出现过一样，换句话说，<strong>只有当一个变量的值不是<code>nil</code>这个变量才是存在的</strong>。</p>\n<h2 id=\"局部变量\"><a href=\"#局部变量\" class=\"headerlink\" title=\"局部变量\"></a>局部变量</h2><p>使用<code>local</code> 关键字来声明一个局部变量，和其他语言一样，局部变量只在被声明的那个代码块中有效。代码块包括：</p>\n<ol>\n<li>控制结构</li>\n<li>函数体</li>\n<li>chunk（变量被声明的那个文件或者文本串</li>\n</ol>\n<p><strong>注意</strong>:命令行模式中每一行就是一个chunk,也就是说，上一行的局部变量下一行就不可见了。<br/></p><figure class=\"highlight shell\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">Lua 5.3.4  Copyright (C) 1994-2017 Lua.org, PUC-Rio</span><br/><span class=\"line\"> a = 1 -- 全局变量</span><br/><span class=\"line\"><span class=\"meta\">&gt;</span> print(a)</span><br/><span class=\"line\">1</span><br/><span class=\"line\"><span class=\"meta\">&gt;</span> local b = 2 -- 局部变量</span><br/><span class=\"line\"><span class=\"meta\">&gt;</span> print(b)</span><br/><span class=\"line\">nil</span><br/><span class=\"line\"><span class=\"meta\">&gt;</span></span><br/></pre></td></tr></tbody></table></figure><p></p>\n<h3 id=\"使用do-end\"><a href=\"#使用do-end\" class=\"headerlink\" title=\"使用do ... end\"></a>使用<code>do ... end</code></h3><p>使用<code>do ... end</code>可以给一个block一个明确的边界。<br/></p><figure class=\"highlight shell\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/><span class=\"line\">9</span><br/><span class=\"line\">10</span><br/><span class=\"line\">11</span><br/><span class=\"line\">12</span><br/><span class=\"line\">13</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">Lua 5.3.4  Copyright (C) 1994-2017 Lua.org, PUC-Rio</span><br/><span class=\"line\"><span class=\"meta\">&gt;</span> a = 1 --全局变量</span><br/><span class=\"line\"><span class=\"meta\">&gt;</span> local b = 2 -- 局部变量</span><br/><span class=\"line\"><span class=\"meta\">&gt;</span> do</span><br/><span class=\"line\"><span class=\"meta\">&gt;</span>&gt; local c = a * 3 --局部变量</span><br/><span class=\"line\"><span class=\"meta\">&gt;</span>&gt; print(a)</span><br/><span class=\"line\"><span class=\"meta\">&gt;</span>&gt; print(b)</span><br/><span class=\"line\"><span class=\"meta\">&gt;</span>&gt; print(c)</span><br/><span class=\"line\"><span class=\"meta\">&gt;</span>&gt; end</span><br/><span class=\"line\">1</span><br/><span class=\"line\">nil</span><br/><span class=\"line\">3</span><br/><span class=\"line\"><span class=\"meta\">&gt;</span></span><br/></pre></td></tr></tbody></table></figure><p></p>","text":"全局变量创建一个全局变量全局变量不需要声明，给一个变量赋值即创建了一个全局变量，访问一个没有初始化的变量（默认是全局变量，即，lua的变量默认是全局变量，特别注意）也不会出错，会返回nil。123print(var_a) var_a = 10print(var_a) -- 10 ...","link":"","photos":[],"count_time":{"symbolsCount":"1k","symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F\"><span class=\"toc-text\">全局变量</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F\"><span class=\"toc-text\">创建一个全局变量</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%A0%E9%99%A4%E4%B8%80%E4%B8%AA%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F\"><span class=\"toc-text\">删除一个全局变量</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F\"><span class=\"toc-text\">局部变量</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8do-end\"><span class=\"toc-text\">使用do ... end</span></a></li></ol></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"lua栈","uid":"08b7dd8782e6521654ff6a509c9158ff","slug":"zl/2016-01-01-674_lua栈","date":"2024-04-03T03:47:35.904Z","updated":"2024-04-03T03:47:35.905Z","comments":true,"path":"api/articles/zl/2016-01-01-674_lua栈.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"既然Lua虚拟机模拟的是CPU的运作,那么Lua栈模拟的就是内存的角色.在Lua内部,参数的传递是通过Lua栈,同时Lua与C等外部进行交互的时候也是使用的栈.,先关注的是Lua栈的分配,管理和相关的数据结构. lua虚拟机在初始化创建lua_State结构体时,会走到stack...","link":"","photos":[],"count_time":{"symbolsCount":"3.1k","symbolsTime":"3 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Lua入门教程：垃圾回收","uid":"4b20aa269e6f3afa1a8fc742335197dc","slug":"zl/2016-01-01-671_Lua入门教程：垃圾回收","date":"2024-04-03T03:47:35.898Z","updated":"2024-04-03T03:47:35.898Z","comments":true,"path":"api/articles/zl/2016-01-01-671_Lua入门教程：垃圾回收.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"Lua 使用的是自动内存管理，所以我们不需要自己手动取删除创建后的对象，Lua 通过垃圾回收（garbage collection）的方式自动删除成为来及的对象，从而将程序员从内存管理的负担中解放出来。 虽然在理想的环境中，垃圾回收对我们来说是不可见的，但其却不是万能的，比如某些...","link":"","photos":[],"count_time":{"symbolsCount":"4.6k","symbolsTime":"4 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}