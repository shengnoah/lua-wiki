{"title":"Lua 在 Android 中应用上,如何引入 Lua","uid":"bb9230b411dc55a2fbf212ffc7592664","slug":"zl/2016-01-01-871_Lua 在 Android 中应用上,如何引入 Lua","date":"2024-04-03T03:47:36.141Z","updated":"2024-04-03T03:47:36.142Z","comments":true,"path":"api/articles/zl/2016-01-01-871_Lua 在 Android 中应用上,如何引入 Lua.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<p>转载请附原文链接：<a href=\"http://yongyu.itscoder.com/2018/04/16/yongyu_20180416_lua_android_one/\" target=\"_blank\" rel=\"external noopener noreferrer\">Lua 在 Android 中应用上,如何引入 Lua</a></p>\n<h2 id=\"一、概要\"><a href=\"#一、概要\" class=\"headerlink\" title=\"一、概要\"></a>一、概要</h2><p><em>注：该部分适合不熟悉 NDK 编译的新手看，老司机请绕行</em></p>\n<p>最近公司在做一个项目，利用一份  XML 文件来布局绘制 Android 和 iOS 界面，界面与用户的交互逻辑部分开始是根据自己定义的协议进行手动解析实现，但是这样有两个弊端，第一是每次需要一些特殊功能时候需要事先定义好协议，第二个是自己定义的协议在进行一些复杂的逻辑判断很麻烦，写起来很不方便。所以决定引入脚本来实现逻辑交互功能。说起脚本语言大家应该马上会想起 JavaScript， JavaScript 在前端开发应用最多，而且微信小程序也使用到了 js 脚本，那么我们为什么最终选择使用 Lua 了呢，因为 JavaScript 虽然功能强大，但是引擎使用起来稍微重了一点，而 Lua 是一个功能强大，高效，轻量级的嵌入式脚本语言，使用标准 Lua 库构建的 Lua 解释器需要 246K，Lua 库需要 421K。<a href=\"https://www.lua.org/about.html\" target=\"_blank\" rel=\"external noopener noreferrer\">Why choose Lua?</a> 而且 Android 中嵌入 Lua 优点很多，借助 Lua 脚本语言的优势，可以轻松实现动态逻辑控制，应用可以随时从服务器读取最新 Lua 脚本文件，在不更新应用的情况下修改程序逻辑，算是一种热更新？算吧。</p>\n<h2 id=\"二、Android-中如何引入-Lua\"><a href=\"#二、Android-中如何引入-Lua\" class=\"headerlink\" title=\"二、Android 中如何引入 Lua\"></a>二、Android 中如何引入 Lua</h2><p>Lua 解释器是 C 语言写的，而 Android 开发使用的是 Java 语言，所以如果我们不打算用 Java 重写解释器的话，我们需要一种方式使 C 和 Java 能良好的沟通，互相调用。所幸的是 Java 支持本地化编程，能使用 JNI 调用 C，因而让 Lua 嵌入到 Java 中成为可能。但是要将 Lua 大部分需要的函数通过 JNI 转换成对应的 Java 方法实际上也是比较浩大的工程。不过，已经有 LuaJava 这个开源库帮我们完成这个工作，将大部分 Lua 函数封装成堆栈类 LuaState 对应的 Java 方法，我们就可以直接拿来用。</p>\n<h3 id=\"1、假如你熟悉-NDK-编译：\"><a href=\"#1、假如你熟悉-NDK-编译：\" class=\"headerlink\" title=\"1、假如你熟悉 NDK 编译：\"></a>1、假如你熟悉 NDK 编译：</h3><p><em>注意:不熟悉的，请绕行看第二种办法去，笔者就不熟悉，自己好顿折腾</em></p>\n<p>那么就自己去官网下载源码自己编译 so 库文件再去使用，下面是下载地址:</p>\n<h4 id=\"1-1-资源准备\"><a href=\"#1-1-资源准备\" class=\"headerlink\" title=\"1.1 资源准备\"></a><strong>1.1 资源准备</strong></h4><p>1）去<a href=\"http://www.lua.org/ftp/\" target=\"_blank\" rel=\"external noopener noreferrer\">Lua 官网</a> 选择需要版本下载源码</p>\n<p>2）去下载 LuaJava  三方裤子源码，这个裤子最新版本是 2007 年最后更新的 [<a href=\"http://files.luaforge.net/releases/luajava/luajava/LuaJava1.1/luajava-1.1.zip\" target=\"_blank\" rel=\"external noopener noreferrer\">luajava-1.1</a>] 版本，当然如果你牛逼，下载下来自己去根据需求改去吧，当然 Gayhub 上也有人改过的，你也可以去搜搜，而且这个裤子里面只提供了 luajava.c 文件没有提供 luajava.h 头文件，这个 luajava.h 文件是根据 LuaState.java 这个类生成的，你可以采用命令行 javac 将 Luajava.java 编程成 Luajava.class 文件，再用 javah 将 Luajava.class 文件编译成 luajava.h 文件，这是 java 函数与 C++ 函数对应的静态注册方法，即通过特定的规则来写，此处方法名可以随意起名字，然后还可以用动态注册的方式关联两个方法（显然，静态注册要简单一些）。</p>\n<p>3）配置NDK 编译 so 库，编译方式自行选择（ndk build 和 CMake 方式），笔者目前使用的是 Stutio 3.0.1 ，所以采用的是 CMake 编译方式，下面简单介绍下编译流程：</p>\n<p>1、在SDK Tools 中勾选安装 CMake、LLDB、NDK</p>\n<p><img src=\"https://github.com/yongyu0102/WeeklyBlogImages/blob/master/androidLua/ndkconfig.PNG?raw=true\" alt=\"ndkconfig\"/></p>\n<p>2、File -&gt; New -&gt; New Project，在如下界面中勾选<code>Include C++ Support</code>，然后一路 Next，直到 Finish 为止即可（图省略）。</p>\n<p>3、创建完成项目发现与常规项目比多了.externalNativeBuild文件夹、cpp文件夹、CMakeLists.txt文件。</p>\n<p><strong>.externalNativeBuild文件夹</strong>：cmake编译好的文件, 显示支持的各种硬件等信息。系统生成。 </p>\n<p><strong>cpp文件夹</strong>：存放C/C++代码文件。 </p>\n<p><strong>CMakeLists.txt文件</strong>：CMake脚本配置的文件。需要自己配置编写。</p>\n<h4 id=\"1-2-编译步骤\"><a href=\"#1-2-编译步骤\" class=\"headerlink\" title=\"1.2 编译步骤\"></a><strong>1.2 编译步骤</strong></h4><p>这里稍微提一句，笔者 菜鸟一枚， c 代码不懂，但是为了学习一下 NDK 编译，所以去官网下载完了，根据按照 CMake 编译规则进行编译，采坑不断。开始下载完 luajava 裤子，发现没有 luajava.h 文件，查了下，这个文件是根据 LuaState.java 编译出来的，于是笔者自己先把下载俩来 luajava 裤子里的 Java 代码放到 工程目录的 java 目录下面，如图：<img src=\"https://github.com/yongyu0102/WeeklyBlogImages/blob/master/androidLua/LuaState.PNG?raw=true\" alt=\"LuaState\"/></p>\n<p>然后执行 Make Project LuaState ，然后到 appbuildintermediatesclassesdebug 目录下执行：</p>\n<p><code>javah org.keplerproject.luajava.LuaState</code> 命令</p>\n<p><img src=\"https://yongyu.itscoder.com/D:BlogluaBlogpicjavah.PNG\" alt=\"javah\"/></p>\n<p>将 LuaState.class 编译出一个 LuaState.h 文件</p>\n<p><img src=\"https://github.com/yongyu0102/WeeklyBlogImages/blob/master/androidLua/h.PNG?raw=true\" alt=\"h\"/></p>\n<p>然后将文件名字改为 luajava.h 放在 cpp 文件夹下， 并将  lua5.3.3 版本源码和 luajava 的 luajava.c 文件也放在 cpp 文件夹下 ，</p>\n<p><img src=\"https://github.com/yongyu0102/WeeklyBlogImages/blob/master/androidLua/cpp.PNG?raw=true\" alt=\"cpp\"/></p>\n<p><strong>配置 app/build.gradle 文件</strong></p>\n<figure class=\"highlight tex\"><table><tbody><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">android {</div><div class=\"line\">    compileSdkVersion 26</div><div class=\"line\">    defaultConfig {</div><div class=\"line\">        externalNativeBuild {</div><div class=\"line\">            cmake {</div><div class=\"line\">                arguments &#34;-DANDROID_ARM_NEON=TRUE&#34;, &#34;-DCMAKE_BUILD_TYPE=Debug&#34;</div><div class=\"line\">                /* cppFlags &#34;-std=c++11 -frtti -fexceptions&#34;*/</div><div class=\"line\">                cppFlags &#34;-frtti -fexceptions&#34;</div><div class=\"line\">                abiFilters &#39;armeabi&#39;, &#39;armeabi-v7a&#39;, &#39;x86&#39;, &#39;arm64-v8a&#39;, &#39;mips&#39;, &#39;mips64&#39;, &#39;x86_64&#39;</div><div class=\"line\">            }</div><div class=\"line\">        }</div><div class=\"line\">    }</div><div class=\"line\">    buildTypes {</div><div class=\"line\">        release {</div><div class=\"line\">            minifyEnabled false</div><div class=\"line\">            proguardFiles getDefaultProguardFile(&#39;proguard-android.txt&#39;), &#39;proguard-rules.pro&#39;</div><div class=\"line\">        }</div><div class=\"line\">    }</div><div class=\"line\">    externalNativeBuild {</div><div class=\"line\">        cmake {</div><div class=\"line\">            path &#34;CMakeLists.txt&#34;</div><div class=\"line\">        }</div><div class=\"line\">    }</div><div class=\"line\">}</div></pre></td></tr></tbody></table></figure>\n<p><strong>配置 CMakeLists.txt 文件</strong>：</p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">#设置要编译 c 文件的 路径（多个 c 文件）</div><div class=\"line\">aux_source_directory(src/main/cpp SRC_LIST)</div><div class=\"line\">add_library( # Sets the name of the library.</div><div class=\"line\">             luajava</div><div class=\"line\">             # Sets the library as a shared library.</div><div class=\"line\">             SHARED</div><div class=\"line\">             # Provides a relative path to your source file(s).</div><div class=\"line\">             ${SRC_LIST}</div><div class=\"line\">             )</div><div class=\"line\"></div><div class=\"line\">find_library( # Sets the name of the path variable.</div><div class=\"line\">              log-lib )</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">target_link_libraries( # Specifies the target library.</div><div class=\"line\">                       luajava</div><div class=\"line\"></div><div class=\"line\">                       # Links the target library to the log library</div><div class=\"line\">                       # included in the NDK.</div><div class=\"line\">                       ${log-lib} )</div><div class=\"line\">set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${PROJECT_SOURCE_DIR}/src/main/jniLibs/${ANDROID_ABI})</div></pre></td></tr></tbody></table></figure>\n<p>然后执行 Make Project 进行编译 so 库，报错。查了一下，是因为 luajava1.1 版本当时作者对应的是 lua5.1 版本，而笔者用的是 Lua5.3 ，所以 api 有差异，于是重新下载了一个 lua5.1 版本编译，报错<a href=\"https://stackoverflow.com/questions/44736135/ndk-clang-error-undefined-reference-to-localeconv\" target=\"_blank\" rel=\"external noopener noreferrer\">NDK Clang error: undefined reference to ‘localeconv’</a>。查原因 stackoverflow 上面说是 sdk21 之后版本 才实现了 localeconv() 方法，于是直接将 sdk 最小版本改成 21，编译这个错误解决了，然后又有新的报错<a href=\"https://stackoverflow.com/questions/6622007/multiple-definitions-of-main\" target=\"_blank\" rel=\"external noopener noreferrer\">Multiple definitions of main</a>。继续查，stackoverflow  上说  lua.c 和 luac.c 两个 main 函数重复了，于是直接粗暴的luac.c 的 main 函数注释掉，一顿折腾终于编译通过，在  appbuildintermediatescmakedebugobj 目录下生产对应 CPU 架构的 so文件</p>\n<p>![<img src=\"https://github.com/yongyu0102/WeeklyBlogImages/blob/master/androidLua/so.PNG?raw=true\" alt=\"img\"/></p>\n<h4 id=\"1-3-使用\"><a href=\"#1-3-使用\" class=\"headerlink\" title=\"1.3 使用\"></a><strong>1.3 使用</strong></h4><ol>\n<li><p><code>luajava</code> 下的 org 文件夹拷贝到工程自己目标工程 <code>src/main/java</code> 目录下</p>\n</li>\n<li><p>将 <code>jniLibs/armeabi</code>下的 <code>libluajava.so</code> 重命名为 <code>libluajava-1.1.so</code> 或者修改 <code>org.keplerproject.luajava.LuaState.java</code> 的 <code>LUAJAVA_LIB</code> 常量 为 libluajava 。</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> </span></div><div class=\"line\">{</div><div class=\"line\">   </div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> String LUAJAVA_LIB = <span class=\"string\">&#34;luajava-1.1&#34;</span>;</div><div class=\"line\">   <span class=\"comment\">//改为</span></div><div class=\"line\">     <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> String LUAJAVA_LIB = <span class=\"string\">&#34;luajava&#34;</span>;</div><div class=\"line\">   ...</div><div class=\"line\">}</div></pre></td></tr></tbody></table></figure>\n<p>经过一些列的折腾，最终成功，可以正常使用了。笔者做这些就是为了自己也学习一把 NDK 编译的过程。虽然笔者自己编译的这个 so 库能正常使用，但是还是建议大家使用 gayhub 上别人升级改造过的库，因为 luajava 这个库比较老 支持的是 Lua5.1 ，而且存在小 bug，有人已经把这个库升级到支持 Lua5.3.1 了比如 <a href=\"https://github.com/lendylongli/AndroLua\" target=\"_blank\" rel=\"external noopener noreferrer\"><strong>AndroLua</strong></a> 这个裤子，大家可以根据需求 gayhub 上找合适自己的裤子吧。反正最后笔者从 gayhub 上找了别人升级过的 c 文件进行编译，比较稳。</p>\n</li>\n</ol>\n<p>###2、假如你不熟悉 NDK 编译，也懒得折腾</p>\n<p>直接上 Gayhub 上搜索 androidlua ，然后 clone 到本地，按照人家的 README 文档操作进行，编译出 so 库直接使用即可， Lua 和 Luajava 源码人家已经帮你集成好了，具体细节你也不必操心，㖏，这里是裤子  <a href=\"https://github.com/lendylongli/AndroLua\" target=\"_blank\" rel=\"external noopener noreferrer\"><strong>AndroLua</strong></a> 。</p>\n<p>到这里本章节结束，下一节介绍，具体使用。</p>","text":"转载请附原文链接：Lua 在 Android 中应用上,如何引入 Lua 一、概要注：该部分适合不熟悉 NDK 编译的新手看，老司机请绕行 最近公司在做一个项目，利用一份 XML 文件来布局绘制 Android 和 iOS 界面，界面与用户的交互逻辑部分开始是根据自己定义的协议进...","link":"","photos":[],"count_time":{"symbolsCount":"5.1k","symbolsTime":"5 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%80%E3%80%81%E6%A6%82%E8%A6%81\"><span class=\"toc-text\">一、概要</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E3%80%81Android-%E4%B8%AD%E5%A6%82%E4%BD%95%E5%BC%95%E5%85%A5-Lua\"><span class=\"toc-text\">二、Android 中如何引入 Lua</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1%E3%80%81%E5%81%87%E5%A6%82%E4%BD%A0%E7%86%9F%E6%82%89-NDK-%E7%BC%96%E8%AF%91%EF%BC%9A\"><span class=\"toc-text\">1、假如你熟悉 NDK 编译：</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-1-%E8%B5%84%E6%BA%90%E5%87%86%E5%A4%87\"><span class=\"toc-text\">1.1 资源准备</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-2-%E7%BC%96%E8%AF%91%E6%AD%A5%E9%AA%A4\"><span class=\"toc-text\">1.2 编译步骤</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-3-%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">1.3 使用</span></a></li></ol></li></ol></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"在原有的nginx上面安装Openresty和lua相关的模块","uid":"0d892d9759f4be16a021241761f801c2","slug":"zl/2016-01-01-870_在原有的nginx上面安装Openresty和lua相关的模块","date":"2024-04-03T03:47:36.141Z","updated":"2024-04-03T03:47:36.141Z","comments":true,"path":"api/articles/zl/2016-01-01-870_在原有的nginx上面安装Openresty和lua相关的模块.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"突然有一天出了个需求，做文件防盗链的，而且需要通过nginx来做，这个时候必然想到了Openresty，Openresty本身其实已经安装有nginx了，但是要求在公司原有的nginx上面装一些Openresty里面的模块，这个时候就有点复杂了，但是最终还是研究出来了，庆幸啊，这...","link":"","photos":[],"count_time":{"symbolsCount":"5k","symbolsTime":"5 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Lua C API 教程","uid":"908a0f416a79b3abf4106994c55b122c","slug":"zl/2016-01-01-86_Lua C API 教程 ","date":"2024-04-03T03:47:36.141Z","updated":"2024-04-03T03:47:36.141Z","comments":true,"path":"api/articles/zl/2016-01-01-86_Lua C API 教程 .json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"从正在运行的 C 程序中，你可以调用 Lua 脚本。C 程序可以将参数传递给 Lua 脚本，而Lua脚本也可以向 C 程序传回一个返回值。Lua脚本可以用来初始化C程序，或者Lua脚本也可以在 C 程序中注册一个回调。 错误处理如果没有正确的信息，从C程序调用Lua脚本可能会令人...","link":"","photos":[],"count_time":{"symbolsCount":"8.4k","symbolsTime":"8 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}