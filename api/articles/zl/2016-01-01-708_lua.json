{"title":"lua","uid":"df60e476b394b1dd4755ec96c53302ff","slug":"zl/2016-01-01-708_lua","date":"2024-04-03T03:47:35.939Z","updated":"2024-04-03T03:47:35.940Z","comments":true,"path":"api/articles/zl/2016-01-01-708_lua.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<article class=\"markdown-body\">\n        <p>之前项目中用到 openresty 作为 Web Api  的开发平台, 用 openresty 很适合开发以 http 接口形式\n提供的服务. openresty 可以使用 lua 进行逻辑控制,加上完备的组件driver(redis, mysql, rabbitmq 等),\n只需要写业务代码将各种数据读取,加工,输出,就是充当胶水的角色.</p>\n<p>最重要的一点是, openresty + lua 已经很好的处理并行(开多个 nginx worker即可)和并发(lua coroutine),\nlua vm 已经默默的处理了阻塞的IO操作,开发人员可以用写同步代码的方式实现异步.</p>\n<p>既然是 Web Api,自然少不了对参数的校验, <a href=\"https://github.com/xsyr/lua-resty-validator\">validator</a>库实现对 lua table 的校验.</p>\n<p>把 validator.lua 文件放入 openresty 安装目录的 <code class=\"highlighter-rouge\">lualib/resty/</code> 下即可.</p>\n<h1 id=\"demo\">Demo</h1>\n<div class=\"highlighter-rouge\"><pre class=\"highlight line-numbers \"><code>\nlocation /validator_demo &#123;\n    content_by_lua_block &#123;\n        local v = require(&#34;resty.validator&#34;)\n        local cjson = require(&#34;cjson&#34;)\n<pre><code>    local user = &#123;\n        id = &#123;\n            type     = v.NUMBER,\n            required = true,\n        &#125;,\n        name = &#123;\n            type     = v.STRING,\n            required = true,\n        &#125;,\n        addr = &#123;\n            type     = v.OBJECT,\n            required = true,\n            struct = &#123;\n                city = &#123;\n                    type      = v.STRING,\n                    required  = true,\n                    minlength = 2,\n                &#125;,\n                postcode = &#123;\n                    type      = v.STRING,\n                    required  = true,\n                    minlength = 6,\n                    maxlength = 6,\n                &#125;\n            &#125;\n        &#125;\n    &#125;\n\n    ngx.req.read_body()\n    local body = ngx.req.get_body_data()\n    local json = cjson.decode(body)\n    local ok, user, err = v.bind(user, json)\n    if not ok then\n        ngx.say(err)\n    else\n        ngx.say(cjson.encode(user))\n    end\n&#125;\n</code></pre>\n<p>}</p>\n<p></code></pre></p>\n</div>\n<div class=\"language-bash highlighter-rouge\"><pre class=\"highlight line-numbers \"><code><span class=\"gp\">$ </span>curl -d <span class=\"s1\">&#39;&#123;&#125;&#39;</span> <span class=\"s1\">&#39;http://localhost/validator_demo&#39;</span>\n<span class=\"s1\">&#39;addr&#39;</span> is required\n<p><span class=\"gp\">$ </span>curl -d <span class=\"s1\">'&#123; &quot;addr&quot;:&#123; &quot;city&quot;: &quot;guangzhou&quot; &#125; &#125;'</span> <span class=\"s1\">'<a href=\"http://localhost/validator_demo&amp;#39;\">http://localhost/validator_demo&amp;#39;</a></span><br />\n<span class=\"s1\">'addr.postcode'</span> is required</p>\n<p><span class=\"gp\">$ </span>curl -d <span class=\"s1\">'&#123; &quot;addr&quot;:&#123; &quot;city&quot;: &quot;guangzhou&quot;, &quot;postcode&quot;: &quot;510000&quot; &#125; &#125;'</span> <span class=\"s1\">'<a href=\"http://localhost/validator_demo&amp;#39;\">http://localhost/validator_demo&amp;#39;</a></span><br />\n<span class=\"s1\">'name'</span> is required</p>\n<p><span class=\"gp\">$ </span>curl -d <span class=\"s1\">'&#123; &quot;name&quot;: &quot;xsyr&quot;, &quot;addr&quot;:&#123; &quot;city&quot;: &quot;guangzhou&quot;, &quot;postcode&quot;: &quot;510000&quot; &#125; &#125;'</span> <span class=\"s1\">'<a href=\"http://localhost/validator_demo&amp;#39;\">http://localhost/validator_demo&amp;#39;</a></span><br />\n<span class=\"s1\">'id'</span> is required</p>\n<p><span class=\"gp\">$ </span>curl -d <span class=\"s1\">'&#123; &quot;id&quot; : 100, &quot;name&quot;: &quot;xsyr&quot;, &quot;addr&quot;:&#123; &quot;city&quot;: &quot;guangzhou&quot;, &quot;postcode&quot;: &quot;510000&quot; &#125; &#125;'</span> <span class=\"s1\">'<a href=\"http://localhost/validator_demo&amp;#39;\">http://localhost/validator_demo&amp;#39;</a></span><br />\n<span class=\"o\">&#123;</span><span class=\"s2\">&quot;addr&quot;</span>:<span class=\"o\">&#123;</span><span class=\"s2\">&quot;city&quot;</span>:<span class=\"s2\">&quot;guangzhou&quot;</span>,<span class=\"s2\">&quot;postcode&quot;</span>:<span class=\"s2\">&quot;510000&quot;</span><span class=\"o\">&#125;</span>,<span class=\"s2\">&quot;name&quot;</span>:<span class=\"s2\">&quot;xsyr&quot;</span>,<span class=\"s2\">&quot;id&quot;</span>:100<span class=\"o\">&#125;</span></p>\n<p></code></pre></p>\n</div>\n<hr/>\n<h1 id=\"参数类型定义\">参数类型定义</h1>\n<h2 id=\"1-number---数值类型\">1. NUMBER - 数值类型</h2>\n<div class=\"highlighter-rouge\"><pre class=\"highlight line-numbers \"><code>    绑定语法：\n    &lt;field&gt; = &#123;\n        -- 数值类型（必填）\n        type = validator.NUMBER,\n<pre><code>    -- 默认值（可选，默认为 nil）\n    default = 0,\n\n    -- 是否必填项（可选，默认为 false）\n    required = true,\n\n    -- checker 执行前的处理函数，函数的返回值用作后续的处理（可选，默认无）\n    -- 执行顺序：pre, checker, post\n    pre = function(val) return dosth(val) end,\n\n    -- 对填写的值进行校验，返回 res, err （可选，默认无）\n    -- res: 校验的结果（true/false）\n    -- err: 如果校验不通过（res = false）的错误提示信息，如果不填\n    --      则使用 err_msg。\n    checker = function(val, field) return docheck(val) end,\n\n    -- checker 执行后的处理函数，函数的返回值作为最终 field 的值（可选，默认无）\n    post = function(val) return dosth(val) end,\n&#125;\n</code></pre>\n<p></code></pre></p>\n</div>\n<h2 id=\"2-string---字符串类型\">2. STRING - 字符串类型</h2>\n<div class=\"highlighter-rouge\"><pre class=\"highlight line-numbers \"><code>    绑定语法：\n    &lt;field&gt; = &#123;\n        -- 数值类型（必填）\n        type = validator.STRING,\n<pre><code>    -- 默认值（可选，默认为 nil）\n    default = &amp;#34;unknown&amp;#34;,\n\n    -- 是否必填项（可选，默认为 false）\n    required = true,\n\n    -- checker 执行前的处理函数，函数的返回值用作后续的处理（可选，默认无）\n    -- 执行顺序：pre, minlength, maxlength, checker, post\n    pre = function(val) return dosth(val) end,\n\n    -- 最小长度（可选，默认 nil 无限制）\n    minlength = 1,\n\n    -- 最大长度（可选，默认 nil 无限制）\n    maxlength = 5,\n\n    -- 对填写的值进行校验，返回 res, err （可选，默认无）\n    -- res: 校验的结果（true/false）\n    -- err: 如果校验不通过（res = false）的错误提示信息，如果不填\n    --      则使用 err_msg。\n    checker = function(val, field) return docheck(val) end,\n\n    -- checker 执行后的处理函数，函数的返回值作为最终 field 的值（可选，默认无）\n    post = function(val) return dosth(val) end,\n&#125;\n</code></pre>\n<p></code></pre></p>\n</div>\n<h2 id=\"3-object---对象类型对象成员的类型可以是任意类型number-string-\">3. OBJECT - 对象类型（对象成员的类型可以是任意类型（NUMBER, STRING, …））</h2>\n<div class=\"highlighter-rouge\"><pre class=\"highlight line-numbers \"><code>    绑定语法：\n    &lt;field&gt; = &#123;\n        -- 数值类型（必填）\n        type = validator.OBJECT,\n<pre><code>    -- 默认值（可选，默认为 nil）\n    default = &#123; a = 1, b = 2 &#125;,\n\n    -- 是否必填项（可选，默认为 false）\n    required = true,\n\n    -- 对象的结构（必填）\n    struct = &#123;\n\n        -- 对象的成员，成员的类型可以为 NUMBER, STRING, OBJECT\n        &amp;lt;member&amp;gt; = &#123;\n            type = STRING, -- 成员的类型，详见 STRING 类型的定义\n            required = true,\n            ...\n        &#125;,\n        ...\n    &#125;\n\n    -- checker 执行前的处理函数，函数的返回值用作后续的处理（可选，默认无）\n    -- 执行顺序：pre, checker, post\n    pre = function(val) return dosth(val) end,\n\n    -- 对填写的值进行校验，返回 res, err （可选，默认无）\n    -- res: 校验的结果（true/false）\n    -- err: 如果校验不通过（res = false）的错误提示信息，如果不填\n    --      则使用 err_msg。\n    checker = function(val, field) return docheck(val) end,\n\n    -- checker 执行后的处理函数，函数的返回值作为最终 field 的值（可选，默认无）\n    post = function(val) return dosth(val) end,\n&#125;\n</code></pre>\n<p></code></pre></p>\n</div>\n<h2 id=\"4-array---数组类型数组元素的类型可以是任意类型number-string-\">4. ARRAY - 数组类型（数组元素的类型可以是任意类型（NUMBER, STRING, …））</h2>\n<div class=\"highlighter-rouge\"><pre class=\"highlight line-numbers \"><code>    绑定语法：\n    &lt;field&gt; = &#123;\n        -- 数值类型（必填）\n        type = validator.ARRAY,\n<pre><code>    -- 默认值（可选，默认为 nil）\n    default = &#123;&#125;,\n\n    -- 是否必填项（可选，默认为 false）\n    required = true,\n\n    -- 数组元素的结构（可以是任意类型）\n    element = &#123;\n        type = NUMBER, -- 可以是任意类型，类型的绑定语法详见各类型的说明\n        ...\n    &#125;,\n\n    -- checker 执行前的处理函数，函数的返回值用作后续的处理（可选，默认无）\n    -- 执行顺序：pre, minlength, maxlength, checker, post\n    pre = function(val) return dosth(val) end,\n\n    -- 最小长度（可选，默认 nil 无限制）\n    minlength = 1,\n\n    -- 最大长度（可选，默认 nil 无限制）\n    maxlength = 5,\n\n    -- 对填写的值进行校验，返回 res, err （可选，默认无）\n    -- res: 校验的结果（true/false）\n    -- err: 如果校验不通过（res = false）的错误提示信息，如果不填\n    --      则使用 err_msg。\n    checker = function(val, field) return docheck(val) end,\n\n    -- checker 执行后的处理函数，函数的返回值作为最终 field 的值（可选，默认无）\n    post = function(val) return dosth(val) end,\n&#125;\n</code></pre>\n<p></code></pre></p>\n</div>\n<h2 id=\"5-stringify_object---字符串化的对象类型对象成员的类型可以是任意类型number-string-\">5. STRINGIFY_OBJECT - 字符串化的对象类型（对象成员的类型可以是任意类型（NUMBER, STRING, …））</h2>\n<div class=\"highlighter-rouge\"><pre class=\"highlight line-numbers \"><code>    如： module = &#34;&#123;&#34;type&#34;:&#34;audio&#34;,&#34;id&#34;:1&#125;&#34;\n<pre><code>绑定语法：\n&amp;lt;field&amp;gt; = &#123;\n    -- 数值类型（必填）\n    type = validator.STRINGIFY_OBJECT,\n\n    -- NOTE: 其他定义与 OBJECT 相同\n&#125;\n</code></pre>\n<p></code></pre></p>\n</div>\n<h2 id=\"6-stringify_array---数组类型数组元素的类型可以是任意类型number-string-\">6. STRINGIFY_ARRAY - 数组类型（数组元素的类型可以是任意类型（NUMBER, STRING, …））</h2>\n<div class=\"highlighter-rouge\"><pre class=\"highlight line-numbers \"><code>    如： lists = &#34;[&#123;&#34;type&#34;:&#34;audio&#34;,&#34;id&#34;:1&#125;,&#123;&#34;type&#34;:&#34;album&#34;,&#34;id&#34;:2&#125;]&#34;\n<pre><code>绑定语法：\n&amp;lt;field&amp;gt; = &#123;\n    -- 数值类型（必填）\n    type = validator.STRINGIFY_ARRAY,\n\n    -- NOTE: 其他定义与 ARRAY 相同\n&#125;\n</code></pre>\n<p></code></pre></p>\n</div>\n<pre><code>&lt;/article&gt;\n\n&lt;div class=&quot;social-share-wrapper&quot;&gt;\n    \n&lt;/div&gt;\n</code></pre>\n","text":" 之前项目中用到 openresty 作为 Web Api 的开发平台, 用 openresty 很适合开发以 http 接口形式 提供的服务. openresty 可以使用 lua 进行逻辑控制,加上完备的组件driver(redis, mysql, rabbitmq 等), ...","link":"","photos":[],"count_time":{"symbolsCount":"6.7k","symbolsTime":"6 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#demo\"><span class=\"toc-text\">Demo</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%8F%82%E6%95%B0%E7%B1%BB%E5%9E%8B%E5%AE%9A%E4%B9%89\"><span class=\"toc-text\">参数类型定义</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-number---%E6%95%B0%E5%80%BC%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">1. NUMBER - 数值类型</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-string---%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">2. STRING - 字符串类型</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-object---%E5%AF%B9%E8%B1%A1%E7%B1%BB%E5%9E%8B%E5%AF%B9%E8%B1%A1%E6%88%90%E5%91%98%E7%9A%84%E7%B1%BB%E5%9E%8B%E5%8F%AF%E4%BB%A5%E6%98%AF%E4%BB%BB%E6%84%8F%E7%B1%BB%E5%9E%8Bnumber-string-\"><span class=\"toc-text\">3. OBJECT - 对象类型（对象成员的类型可以是任意类型（NUMBER, STRING, …））</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-array---%E6%95%B0%E7%BB%84%E7%B1%BB%E5%9E%8B%E6%95%B0%E7%BB%84%E5%85%83%E7%B4%A0%E7%9A%84%E7%B1%BB%E5%9E%8B%E5%8F%AF%E4%BB%A5%E6%98%AF%E4%BB%BB%E6%84%8F%E7%B1%BB%E5%9E%8Bnumber-string-\"><span class=\"toc-text\">4. ARRAY - 数组类型（数组元素的类型可以是任意类型（NUMBER, STRING, …））</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-stringify_object---%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8C%96%E7%9A%84%E5%AF%B9%E8%B1%A1%E7%B1%BB%E5%9E%8B%E5%AF%B9%E8%B1%A1%E6%88%90%E5%91%98%E7%9A%84%E7%B1%BB%E5%9E%8B%E5%8F%AF%E4%BB%A5%E6%98%AF%E4%BB%BB%E6%84%8F%E7%B1%BB%E5%9E%8Bnumber-string-\"><span class=\"toc-text\">5. STRINGIFY_OBJECT - 字符串化的对象类型（对象成员的类型可以是任意类型（NUMBER, STRING, …））</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#6-stringify_array---%E6%95%B0%E7%BB%84%E7%B1%BB%E5%9E%8B%E6%95%B0%E7%BB%84%E5%85%83%E7%B4%A0%E7%9A%84%E7%B1%BB%E5%9E%8B%E5%8F%AF%E4%BB%A5%E6%98%AF%E4%BB%BB%E6%84%8F%E7%B1%BB%E5%9E%8Bnumber-string-\"><span class=\"toc-text\">6. STRINGIFY_ARRAY - 数组类型（数组元素的类型可以是任意类型（NUMBER, STRING, …））</span></a></li></ol></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Lua表达式 · 花生肉泥","uid":"148bf8464f1e30bf4f29b6a6cd87b88d","slug":"zl/2016-01-01-709_Lua表达式 · 花生肉泥","date":"2024-04-03T03:47:35.940Z","updated":"2024-04-03T03:47:35.940Z","comments":true,"path":"api/articles/zl/2016-01-01-709_Lua表达式 · 花生肉泥.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"算术运算符下表列出了lua语言中常用算术运算符(设定A的值为10，B的值为20) 操作符 描述 示例 + 加法 A + B 输出 30 - 减法 A - B 输出 -10 * 乘法 A * B 输出 200 / 除法 B / A 输出 2 % 取余 B % A 输出 0 ^ 乘幂...","link":"","photos":[],"count_time":{"symbolsCount":"2.4k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Lua学习","uid":"98627ae8510dc86d4061c2718311a9a7","slug":"zl/2016-01-01-707_Lua学习","date":"2024-04-03T03:47:35.939Z","updated":"2024-04-03T03:47:35.939Z","comments":true,"path":"api/articles/zl/2016-01-01-707_Lua学习.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"因为Moongen的需要，学习了一些Lua知识，特此总结。 现在更新到lua的模块与包。 注释字符串匹配模式以后补充。 包的加载机制和C包以后补充。 1brew install lua 注：lua的index都是从1开始的。 Lua数据类型 nil boolean number ...","link":"","photos":[],"count_time":{"symbolsCount":"6.9k","symbolsTime":"6 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}