{"title":"lua","uid":"df60e476b394b1dd4755ec96c53302ff","slug":"zl/2016-01-01-835_lua","date":"2024-04-03T03:47:36.084Z","updated":"2024-04-03T03:47:36.084Z","comments":true,"path":"api/articles/zl/2016-01-01-835_lua.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<h3 id=\"介绍\">介绍</h3>\n<hr/>\n<ol>\n<li>Lua 是一个小巧的脚本语言。<code>openresty采用的是LuaJIT 2 ，而不是标准的lua</code>。</li>\n<li>解释下什么是jit\n<ul>\n<li>LuaJIT 的运行时环境包括一个用手写汇编实现的 Lua 解释器和一个可以直接生成机器代码的 JIT 编译器。\nLua 代码在被执行之前总是会先被 lfn 成 LuaJIT 自己定义的字节码（Byte Code）。关于 LuaJIT 字节码的文档，可以参见：<a href=\"http://wiki.luajit.org/Bytecode-2.0（这个文档描述的是\">http://wiki.luajit.org/Bytecode-2.0（这个文档描述的是</a> LuaJIT 2.0 的字节码，不过 2.1 里面的变化并不算太大）。\n一开始的时候，Lua 字节码总是被 LuaJIT 的解释器解释执行。LuaJIT 的解释器会在执行字节码时同时记录一些运行时的统计信息，比如每个 Lua 函数调用入口的实际运行次数，还有每个 Lua 循环的实际执行次数。当这些次数超过某个预设的阈值时，便认为对应的 Lua 函数入口或者对应的 Lua 循环足够的“热”，这时便会触发 JIT 编译器开始工作。\nJIT 编译器会从热函数的入口或者热循环的某个位置开始尝试编译对应的 Lua 代码路径。编译的过程是把 LuaJIT 字节码先转换成 LuaJIT 自己定义的中间码（IR），然后再生成针对目标体系结构的机器码（比如 x86_64 指令组成的机器码）。</li>\n<li>当然jit并不是支持所有的原语，所有对性能要求很高的情况下，应该尽量使用jit支持的原语。\n<br/>\n<br/></li>\n</ul></li>\n</ol>\n<h3 id=\"环境搭建\">环境搭建</h3>\n<hr/>\n<ol>\n<li>按照官网的搭建方式即可 <br/>\n<ul>\n<li>eg: mac 上环境搭建 <br/>\ntar zxf LuaJIT-2.0.5.tar.gz <br/>\ncd LuaJIT-2.0.5<br/>\nmake <br/>\nmake install<br/>\n<br/></li>\n</ul></li>\n</ol>\n<h3 id=\"数据类型\">数据类型</h3>\n<hr/>\n<ol>\n<li>nil、boolean、 number、string、table、function<br/>\n<ul>\n<li>lua将nil表示为<code>无效值</code> ，一个变量在第一次赋值前默认为nil,将 nil 赋予给一个全局变量就等同于删除它。</li>\n<li>Lua 中 nil 和 false 为“假”，其它所有值均为“真”。比如 0 和空字符串就是“真”</li>\n<li>一般地，Lua 的 number 类型就是用双精度浮点数来实现的。值得一提的是，LuaJIT 支持所谓的“dual-number”（双数）模式，即 LuaJIT 会根据上下文用整型来存储整数，而用双精度浮点数来存放浮点数</li>\n<li>三种写法： 单引号、双引号、长括号（[[]]）</li>\n<li>Table 类型实现了一种抽象的“关联数组”。“关联数组”是一种具有特殊索引方式的数组，索引通常是字符串（string）或者 number 类型，但也可以是除 nil 以外的任意类型的值。</li>\n<li>在 Lua 中，函数 也是一种数据类型，函数可以存储在变量中，可以通过参数传递给其他函数，还可以作为其他函数的返回值。<br/></li>\n</ul></li>\n</ol>\n<h3 id=\"表达式-着重说下不一样\">表达式（着重说下不一样）</h3>\n<hr/>\n<ol>\n<li>算术运算符\n<ul>\n<li>print(5.0 / 10)    –&gt;打印 0.5。 <code>浮点数相除的结果是浮点数</code></li>\n</ul></li>\n<li><p>关系运算符</p>\n<ul>\n<li>~= 不等于\n<br/></li>\n</ul></li>\n<li><p>逻辑运算符</p>\n<ul>\n<li>and 逻辑与</li>\n<li>or 逻辑或</li>\n<li>not 逻辑非</li>\n</ul></li>\n</ol>\n<h3 id=\"控制结构\">控制结构</h3>\n<hr/>\n<h5 id=\"分支结构-elseif\">分支结构 （<code>elseif</code>）</h5>\n<div class=\"highlight\"><div class=\"chroma\">\n<table class=\"lntable\"><tbody><tr><td class=\"lntd\">\n<pre class=\"chroma\"><span class=\"lnt\">1\n</span><span class=\"lnt\">2\n</span><span class=\"lnt\">3\n</span></pre></td>\n<td class=\"lntd\">\n<pre class=\"chroma\">if x &gt; 0 then\n    print(&#34;x is a positive number&#34;)\nend</pre></td></tr></tbody></table>\n</div>\n</div><div class=\"highlight\"><div class=\"chroma\">\n<table class=\"lntable\"><tbody><tr><td class=\"lntd\">\n<pre class=\"chroma\"><span class=\"lnt\">1\n</span><span class=\"lnt\">2\n</span><span class=\"lnt\">3\n</span><span class=\"lnt\">4\n</span><span class=\"lnt\">5\n</span></pre></td>\n<td class=\"lntd\">\n<pre class=\"chroma\">if x &gt; 0 then\n    print(&#34;x is a positive number&#34;)\nelse\n    print(&#34;x is a non-positive number&#34;)\nend</pre></td></tr></tbody></table>\n</div>\n</div><div class=\"highlight\"><div class=\"chroma\">\n<table class=\"lntable\"><tbody><tr><td class=\"lntd\">\n<pre class=\"chroma\"><span class=\"lnt\">1\n</span><span class=\"lnt\">2\n</span><span class=\"lnt\">3\n</span><span class=\"lnt\">4\n</span><span class=\"lnt\">5\n</span><span class=\"lnt\">6\n</span><span class=\"lnt\">7\n</span><span class=\"lnt\">8\n</span></pre></td>\n<td class=\"lntd\">\n<pre class=\"chroma\">if score == 100 then\n    print(&#34;Very good!Your score is 100&#34;)\nelseif score &gt;= 60 then\n    print(&#34;Congratulations, you have passed it,your score greater or equal to 60&#34;)\n--此处可以添加多个elseif\nelse\n    print(&#34;Sorry, you do not pass the exam! &#34;)\nend</pre></td></tr></tbody></table>\n</div>\n</div>\n<h5 id=\"循环结构-没有提供-continue-却也提供了另外一个标准控制语句-break\">循环结构（<code>没有提供 continue，却也提供了另外一个标准控制语句 break</code>）</h5>\n<div class=\"highlight\"><div class=\"chroma\">\n<table class=\"lntable\"><tbody><tr><td class=\"lntd\">\n<pre class=\"chroma\"><span class=\"lnt\">1\n</span><span class=\"lnt\">2\n</span><span class=\"lnt\">3\n</span></pre></td>\n<td class=\"lntd\">\n<pre class=\"chroma\">while 表达式 do\n--body\nend</pre></td></tr></tbody></table>\n</div>\n</div>\n<ul>\n<li><p>直到 until 的条件为真时才结束</p>\n<div class=\"highlight\"><div class=\"chroma\">\n<table class=\"lntable\"><tbody><tr><td class=\"lntd\">\n<pre class=\"chroma\"><span class=\"lnt\">1\n</span><span class=\"lnt\">2\n</span><span class=\"lnt\">3\n</span><span class=\"lnt\">4\n</span></pre></td>\n<td class=\"lntd\">\n<pre class=\"chroma\">x = 10\nrepeat\nprint(x)\nuntil false</pre></td></tr></tbody></table>\n</div>\n</div></li>\n<li><p>for 数字型</p>\n<div class=\"highlight\"><div class=\"chroma\">\n<table class=\"lntable\"><tbody><tr><td class=\"lntd\">\n<pre class=\"chroma\"><span class=\"lnt\">1\n</span><span class=\"lnt\">2\n</span><span class=\"lnt\">3\n</span></pre></td>\n<td class=\"lntd\">\n<pre class=\"chroma\">for var = begin, finish, step do\n--body\nend</pre></td></tr></tbody></table>\n</div>\n</div></li>\n<li><p>for 泛型</p>\n<div class=\"highlight\"><div class=\"chroma\">\n<table class=\"lntable\"><tbody><tr><td class=\"lntd\">\n<pre class=\"chroma\"><span class=\"lnt\">1\n</span><span class=\"lnt\">2\n</span><span class=\"lnt\">3\n</span><span class=\"lnt\">4\n</span><span class=\"lnt\">5\n</span></pre></td>\n<td class=\"lntd\">\n<pre class=\"chroma\">只能遍历数组\nlocal a = {&#34;a&#34;, &#34;b&#34;, &#34;c&#34;, &#34;d&#34;}\nfor i, v in ipairs(a) do\nprint(&#34;index:&#34;, i, &#34; value:&#34;, v)\nend</pre></td></tr></tbody></table>\n</div>\n</div><div class=\"highlight\"><div class=\"chroma\">\n<table class=\"lntable\"><tbody><tr><td class=\"lntd\">\n<pre class=\"chroma\"><span class=\"lnt\">1\n</span><span class=\"lnt\">2\n</span><span class=\"lnt\">3\n</span><span class=\"lnt\">4\n</span></pre></td>\n<td class=\"lntd\">\n<pre class=\"chroma\">遍历 k、v\nfor k,v in pairs(revDays) do\nprint(&#34;k:&#34;, k, &#34; v:&#34;, v)\nend</pre></td></tr></tbody></table>\n</div>\n</div></li>\n<li><p><code>ipairs() 内建函数是可以被 JIT 编译的，而 pairs() 则只能被解释执行</code></p></li>\n</ul>","text":"介绍 Lua 是一个小巧的脚本语言。openresty采用的是LuaJIT 2 ，而不是标准的lua。 解释下什么是jit LuaJIT 的运行时环境包括一个用手写汇编实现的 Lua 解释器和一个可以直接生成机器代码的 JIT 编译器。 Lua 代码在被执行之前总是会先被 lfn...","link":"","photos":[],"count_time":{"symbolsCount":"2.3k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BB%8B%E7%BB%8D\"><span class=\"toc-text\">介绍</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA\"><span class=\"toc-text\">环境搭建</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">数据类型</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%A1%A8%E8%BE%BE%E5%BC%8F-%E7%9D%80%E9%87%8D%E8%AF%B4%E4%B8%8B%E4%B8%8D%E4%B8%80%E6%A0%B7\"><span class=\"toc-text\">表达式（着重说下不一样）</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%8E%A7%E5%88%B6%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">控制结构</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%88%86%E6%94%AF%E7%BB%93%E6%9E%84-elseif\"><span class=\"toc-text\">分支结构 （elseif）</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%BE%AA%E7%8E%AF%E7%BB%93%E6%9E%84-%E6%B2%A1%E6%9C%89%E6%8F%90%E4%BE%9B-continue-%E5%8D%B4%E4%B9%9F%E6%8F%90%E4%BE%9B%E4%BA%86%E5%8F%A6%E5%A4%96%E4%B8%80%E4%B8%AA%E6%A0%87%E5%87%86%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5-break\"><span class=\"toc-text\">循环结构（没有提供 continue，却也提供了另外一个标准控制语句 break）</span></a></li></ol></li></ol></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Erlang+Lua的一次重构","uid":"7635535fb530719b6f10fbc7f8fdcc90","slug":"zl/2016-01-01-837_Erlang+Lua的一次重构","date":"2024-04-03T03:47:36.088Z","updated":"2024-04-03T03:47:36.090Z","comments":true,"path":"api/articles/zl/2016-01-01-837_Erlang+Lua的一次重构.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"目前所在的项目基于erlang cluster搭建框架，再接入lua用于写逻辑。由于之前有一些erlang+lua的开发经验，因此着手项目的重构和优化，过程中一些体会，记录于此。 先简述一下项目架构，erlang做集群，网络层，节点交互，DB交互等，lua层只写逻辑。一个erla...","link":"","photos":[],"count_time":{"symbolsCount":"2.5k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Lua 学习 chapter27","uid":"6fa85b2c9d2fb1c7122f1bf9a96bb9e7","slug":"zl/2016-01-01-836_Lua 学习 chapter27 ","date":"2024-04-03T03:47:36.084Z","updated":"2024-04-03T03:47:36.088Z","comments":true,"path":"api/articles/zl/2016-01-01-836_Lua 学习 chapter27 .json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"目录 前言 第一个示例 lua堆栈操作 处理应用代码中的错误 内存分配 只有疯狂过，你才知道自己究竟能不能成功。 前言 lua是一种嵌入式语言，这就意味着lua并不是一个独立运行的应用，而是一个库，它可以链接到其它应用程序，将lua的功能融入到这些应用。 由于lua存在解释器（可...","link":"","photos":[],"count_time":{"symbolsCount":"13k","symbolsTime":"12 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}