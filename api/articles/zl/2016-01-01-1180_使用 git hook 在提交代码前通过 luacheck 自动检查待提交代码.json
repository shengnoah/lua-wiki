{"title":"使用 git hook 在提交代码前通过 luacheck 自动检查待提交代码","uid":"64a3f8f6a724180029824b8c982d04a2","slug":"zl/2016-01-01-1180_使用 git hook 在提交代码前通过 luacheck 自动检查待提交代码","date":"2024-04-03T03:47:33.026Z","updated":"2024-04-03T03:47:33.026Z","comments":true,"path":"api/articles/zl/2016-01-01-1180_使用 git hook 在提交代码前通过 luacheck 自动检查待提交代码.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<div class=\"wrapper\">\n<p>\n  23 Oct 2019\n<pre><code>- &lt;a href=&quot;/authors/zhouyan.html&quot;&gt;周岩&lt;/a&gt;\n</code></pre>\n</p>\n<h1 id=\"preface\">Preface</h1>\n<p>由于脚本语言解释执行的特性，很多低级错误在运行到问题代码时才会报错，而不是像 C++ 这种静态语言那样在编译期就能由编译器检查出来，这就导致有很多本来在开发期就可以避免的问题，拖到线上才被发现。这里给出一个方案，可以在提交代码前，通过 Git 的 <code class=\"language-plaintext highlighter-rouge\">hook/pre-commit</code> 机制，去做一些脚本代码的静态检查。</p>\n<p>我用 Lua 比较多，这里就以 Lua 为例来进行说明。Lua 的静态检查工具基本上只有一个 <a href=\"https://github.com/mpeterv/luacheck\">luacheck</a> 可用, 安装很简单，可以使用 <a href=\"https://luarocks.org/\">luarocks</a> 安装（类似 python 的 pip, 是一个 Lua 的包管理器）：</p>\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>luarocks install luacheck\n</code></pre></div></div>\n<p>安装好以后可以直接在终端使用:</p>\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>luacheck your_lua_file.lua\n</code></pre></div></div>\n<h1 id=\"luacheck-的配置\"><a href=\"https://luacheck.readthedocs.io/en/stable/config.html\">luacheck 的配置</a></h1>\n<p>默认的 luacheck 配置比较严格，会报很多警告，比如我们自定义的一些全局变量和函数，这当然是我们不希望看到的，既然要检查了，就要做到整个项目里所有文件都是 0 warnings / 0 errors。</p>\n<p>配置方法：\n新建 <code class=\"language-plaintext highlighter-rouge\">~/.luacheckrc</code> 文件, 然后在里面加上下面的内容, 这里面是我们项目的一些符号，大家可以根据自己项目实际需求来添加或删除。</p>\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>-- 这个文件是一个 Lua 文件\n<p>– 每行最大长度，默认 120<br />\nmax_line_length = 9999</p>\n<p>– 忽略的符号<br />\nignore = &#123;<br />\n&quot;init&quot;,<br />\n&quot;exit&quot;,<br />\n&quot;accept&quot;,<br />\n&quot;response&quot;,<br />\n&quot;class&quot;,<br />\n&#125;</p>\n<p>– 全局变量<br />\nglobals = &#123;<br />\n&quot;Log&quot;,<br />\n&quot;table.empty&quot;,<br />\n&quot;table.size&quot;,<br />\n&quot;table.merge&quot;,<br />\n&quot;table.indexof&quot;,<br />\n&quot;table.keys&quot;,<br />\n&quot;table.values&quot;,<br />\n&quot;table.valuestring&quot;,<br />\n&quot;table.copy&quot;,<br />\n&quot;table.deepcopy&quot;,<br />\n&quot;table.first&quot;,<br />\n&quot;table.deepmerge&quot;,<br />\n&quot;table.walk&quot;,<br />\n&quot;table.clear&quot;,<br />\n&quot;string.split&quot;,<br />\n&quot;string.ltrim&quot;,<br />\n&quot;string.rtrim&quot;,<br />\n&quot;string.trim&quot;,<br />\n&quot;string.repeated&quot;,<br />\n&quot;string.nocase&quot;,<br />\n&quot;string.nocasefind&quot;,<br />\n&quot;enum&quot;,<br />\n&quot;ASSERT&quot;,<br />\n&quot;ANSI_COLOR&quot;,<br />\n&quot;const&quot;,<br />\n&quot;math.round&quot;,<br />\n&#125;<br />\n</code></pre></div></div></p>\n<p>完整的配置说明请查看：https://luacheck.readthedocs.io/en/stable/config.html</p>\n<h1 id=\"git-pre-commit-配置\">Git pre-commit 配置</h1>\n<p>进入项目根目录下，然后 <code class=\"language-plaintext highlighter-rouge\">cd .git/hooks</code>, 进去后输入 <code class=\"language-plaintext highlighter-rouge\">ls -ahl</code> 会看到以下文件：</p>\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>-rwxr-xr-x   1 zy  staff   478B Jun 26  2018 applypatch-msg.sample\n-rwxr-xr-x   1 zy  staff   896B Jun 26  2018 commit-msg.sample\n-rwxr-xr-x   1 zy  staff   189B Jun 26  2018 post-update.sample\n-rwxr-xr-x   1 zy  staff   424B Jun 26  2018 pre-applypatch.sample\n-rwxr-xr-x   1 zy  staff   1.8K Oct 23 19:47 pre-commit.sample\n-rwxr-xr-x   1 zy  staff   1.3K Jun 26  2018 pre-push.sample\n-rwxr-xr-x   1 zy  staff   4.8K Jun 26  2018 pre-rebase.sample\n-rwxr-xr-x   1 zy  staff   544B Jun 26  2018 pre-receive.sample\n-rwxr-xr-x   1 zy  staff   1.5K Jun 26  2018 prepare-commit-msg.sample\n-rwxr-xr-x   1 zy  staff   3.5K Jun 26  2018 update.sample\n</code></pre></div></div>\n<p>我们把 pre-commit.sample 文件的后缀名去掉 <code class=\"language-plaintext highlighter-rouge\">mv pre-commit.sample pre-commit</code>, 然后打开它，里面已经有一些内容了，我在这个基础上加上了 luacheck 的检查，可以直接用我提供的版本覆盖里面的内容：</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\">#!/bin/sh</span>\n<span class=\"c\">#</span>\n<span class=\"c\"># An example hook script to verify what is about to be committed.</span>\n<span class=\"c\"># Called by &#34;git commit&#34; with no arguments.  The hook should</span>\n<span class=\"c\"># exit with non-zero status after issuing an appropriate message if</span>\n<span class=\"c\"># it wants to stop the commit.</span>\n<span class=\"c\">#</span>\n<span class=\"c\"># To enable this hook, rename this file to &#34;pre-commit&#34;.</span>\n<p><span class=\"k\">if </span>git rev-parse <span class=\"nt\">–verify</span> HEAD <span class=\"o\">&gt;</span>/dev/null 2&gt;&amp;1<br />\n<span class=\"k\">then<br />\n</span><span class=\"nv\">against</span><span class=\"o\">=</span>HEAD<br />\n<span class=\"k\">else</span><br />\n<span class=\"c\"># Initial commit: diff against an empty tree object</span><br />\n<span class=\"nv\">against</span><span class=\"o\">=</span>4b825dc642cb6eb9a060e54bf8d69288fbee4904<br />\n<span class=\"k\">fi</span></p>\n<p><span class=\"c\"># If you want to allow non-ASCII filenames set this variable to true.</span><br />\n<span class=\"nv\">allownonascii</span><span class=\"o\">=</span><span class=\"si\">$(</span>git config <span class=\"nt\">–bool</span> hooks.allownonascii<span class=\"si\">)</span></p>\n<p><span class=\"c\"># Redirect output to stderr.</span><br />\n<span class=\"nb\">exec </span>1&gt;&amp;2</p>\n<p><span class=\"c\"># Cross platform projects tend to avoid non-ASCII filenames; prevent</span><br />\n<span class=\"c\"># them from being added to the repository. We exploit the fact that the</span><br />\n<span class=\"c\"># printable range starts at the space character and ends with tilde.</span><br />\n<span class=\"k\">if</span> <span class=\"o\">[</span> <span class=\"s2\">&quot;</span><span class=\"nv\">allownonascii</span><span class=\"s2\">&#34;</span> <span class=\"o\">!=</span> <span class=\"s2\">&#34;true&#34;</span> <span class=\"o\">]</span> <span class=\"o\">&amp;&amp;</span>\n\t<span class=\"c\"># Note that the use of brackets around a tr range is ok here, (it&#39;s</span>\n\t<span class=\"c\"># even required, for portability to Solaris 10&#39;s /usr/bin/tr), since</span>\n\t<span class=\"c\"># the square bracket bytes happen to fall in the designated range.</span>\n\t<span class=\"nb\">test</span> <span class=\"si\">(</span>git diff <span class=\"nt\">–cached</span> <span class=\"nt\">–name-only</span> <span class=\"nt\">–diff-filter</span><span class=\"o\">=</span>A <span class=\"nt\">-z</span> <span class=\"nv\">$against</span> |<br />\n<span class=\"nv\">LC_ALL</span><span class=\"o\">=</span>C <span class=\"nb\">tr</span> <span class=\"nt\">-d</span> <span class=\"s1\">'[ -~]</p>\n","text":" 23 Oct 2019 - &lt;a href=&quot;/authors/zhouyan.html&quot;&gt;周岩&lt;/a&gt; Preface 由于脚本语言解释执行的特性，很多低级错误在运行到问题代码时才会报错，而不是像 C++ 这种静态语言那样在编译期就...","link":"","photos":[],"count_time":{"symbolsCount":"3.6k","symbolsTime":"3 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#preface\"><span class=\"toc-text\">Preface</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#luacheck-%E7%9A%84%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">luacheck 的配置</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#git-pre-commit-%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">Git pre-commit 配置</span></a></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"lua learning","uid":"a93951064ce695bee6f68c691297e02f","slug":"zl/2016-01-01-117_lua learning","date":"2024-04-03T03:47:33.026Z","updated":"2024-04-03T03:47:33.026Z","comments":true,"path":"api/articles/zl/2016-01-01-117_lua learning.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"https://www.runoob.com/lua/lua-miscellaneous-operator.html data struture: nil boolean number: 双精度的实浮点数 string funcion: 由C或lua编写的函数 userdata:...","link":"","photos":[],"count_time":{"symbolsCount":"1.5k","symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"build system, lazy evaluation, and incremental computation","uid":"d5712a9f78b52f610f4ac8fda149147a","slug":"zl/2016-01-01-1181_build system, lazy evaluation, and incremental com","date":"2024-04-03T03:47:33.026Z","updated":"2024-04-03T03:47:33.026Z","comments":true,"path":"api/articles/zl/2016-01-01-1181_build system, lazy evaluation, and incremental com.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":" NOTE: I wrote this based on the same casual tech talk I gave in USTC and SJTU. The talk is recorded in Chinese, thus I wrote this to share ...","link":"","photos":[],"count_time":{"symbolsCount":"10k","symbolsTime":"9 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}