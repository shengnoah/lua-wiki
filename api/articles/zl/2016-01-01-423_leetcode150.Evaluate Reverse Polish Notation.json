{"title":"leetcode150.Evaluate Reverse Polish Notation","uid":"ee891655411c520d8650b5b8cf0d510b","slug":"zl/2016-01-01-423_leetcode150.Evaluate Reverse Polish Notation","date":"2024-04-03T03:47:35.712Z","updated":"2024-04-03T03:47:35.712Z","comments":true,"path":"api/articles/zl/2016-01-01-423_leetcode150.Evaluate Reverse Polish Notation.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<h2 id=\"题目要求\"><a href=\"#题目要求\" class=\"headerlink\" title=\"题目要求\"></a>题目要求</h2><pre><code>Evaluate the value of an arithmetic expression in Reverse Polish Notation.\n<p>Valid operators are +, -, *, /. Each operand may be an integer or another expression.</p>\n<p>Some examples:<br />\n[&quot;2&quot;, &quot;1&quot;, &quot;+&quot;, &quot;3&quot;, &quot;*&quot;] -&gt; ((2 + 1) * 3) -&gt; 9<br />\n[&quot;4&quot;, &quot;13&quot;, &quot;5&quot;, &quot;/&quot;, &quot;+&quot;] -&gt; (4 + (13 / 5)) -&gt; 6<br />\n</code></pre><p>计算后缀表达式。我们一般看到的数学表达式就是中缀表达式，也就是将符号放在两个数字之间。后缀表达式也就是将运算符放在相应数字的后面。后缀表达式相当于树中的后序遍历。<br/></p></p>\n<h2 id=\"思路一：栈\"><a href=\"#思路一：栈\" class=\"headerlink\" title=\"思路一：栈\"></a>思路一：栈</h2><p>当我们遇到数字时就将数字压入栈中，如果遇到操作符就将栈顶的两个数字弹出，并将其根据操作符计算结构并重新压入栈中。栈中剩下的最后的值就是我们的结果。<br/></p><figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/><span class=\"line\">9</span><br/><span class=\"line\">10</span><br/><span class=\"line\">11</span><br/><span class=\"line\">12</span><br/><span class=\"line\">13</span><br/><span class=\"line\">14</span><br/><span class=\"line\">15</span><br/><span class=\"line\">16</span><br/><span class=\"line\">17</span><br/><span class=\"line\">18</span><br/><span class=\"line\">19</span><br/><span class=\"line\">20</span><br/><span class=\"line\">21</span><br/><span class=\"line\">22</span><br/><span class=\"line\">23</span><br/><span class=\"line\">24</span><br/><span class=\"line\">25</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"params\">(String[] tokens)</span> </span>{</span><br/><span class=\"line\">    LinkedList&lt;Integer&gt; stack = <span class=\"keyword\">new</span> LinkedList&lt;Integer&gt;();</span><br/><span class=\"line\">    <span class=\"keyword\">for</span>(String token : tokens){</span><br/><span class=\"line\">        <span class=\"keyword\">if</span>(token.equals(<span class=\"string\">&#34;+&#34;</span>)){</span><br/><span class=\"line\">            <span class=\"keyword\">int</span> operand1 = stack.pop();</span><br/><span class=\"line\">            <span class=\"keyword\">int</span> operand2 = stack.pop();</span><br/><span class=\"line\">            stack.push(operand2 + operand1);</span><br/><span class=\"line\">        }<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(token.equals(<span class=\"string\">&#34;-&#34;</span>)){</span><br/><span class=\"line\">            <span class=\"keyword\">int</span> operand1 = stack.pop();</span><br/><span class=\"line\">            <span class=\"keyword\">int</span> operand2 = stack.pop();</span><br/><span class=\"line\">            stack.push(operand2 - operand1);</span><br/><span class=\"line\">        }<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(token.equals(<span class=\"string\">&#34;*&#34;</span>)){</span><br/><span class=\"line\">            <span class=\"keyword\">int</span> operand1 = stack.pop();</span><br/><span class=\"line\">            <span class=\"keyword\">int</span> operand2 = stack.pop();</span><br/><span class=\"line\">            stack.push(operand2 * operand1);</span><br/><span class=\"line\">        }<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(token.equals(<span class=\"string\">&#34;/&#34;</span>)){</span><br/><span class=\"line\">            <span class=\"keyword\">int</span> operand1 = stack.pop();</span><br/><span class=\"line\">            <span class=\"keyword\">int</span> operand2 = stack.pop();</span><br/><span class=\"line\">            stack.push(operand2 / operand1);</span><br/><span class=\"line\">        }<span class=\"keyword\">else</span>{</span><br/><span class=\"line\">            stack.push(Integer.valueOf(token));</span><br/><span class=\"line\">        }</span><br/><span class=\"line\">    }</span><br/><span class=\"line\">    <span class=\"keyword\">return</span> stack.pop();</span><br/><span class=\"line\">}</span><br/></pre></td></tr></tbody></table></figure><p></p>\n<h2 id=\"思路二：递归\"><a href=\"#思路二：递归\" class=\"headerlink\" title=\"思路二：递归\"></a>思路二：递归</h2><p>从后缀表达式的末尾开始递归获取操作符对应的两个操作符。通过index获得对应位置的操作符。如果对应的还是操作符，则继续递归往前计算。<br/></p><figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/><span class=\"line\">9</span><br/><span class=\"line\">10</span><br/><span class=\"line\">11</span><br/><span class=\"line\">12</span><br/><span class=\"line\">13</span><br/><span class=\"line\">14</span><br/><span class=\"line\">15</span><br/><span class=\"line\">16</span><br/><span class=\"line\">17</span><br/><span class=\"line\">18</span><br/><span class=\"line\">19</span><br/><span class=\"line\">20</span><br/><span class=\"line\">21</span><br/><span class=\"line\">22</span><br/><span class=\"line\">23</span><br/><span class=\"line\">24</span><br/><span class=\"line\">25</span><br/><span class=\"line\">26</span><br/><span class=\"line\">27</span><br/><span class=\"line\">28</span><br/><span class=\"line\">29</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> index;</span><br/><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">evalRPN2</span><span class=\"params\">(String[] tokens)</span></span>{</span><br/><span class=\"line\">    index = tokens.length-<span class=\"number\">1</span>;</span><br/><span class=\"line\">    <span class=\"keyword\">return</span> recursive(tokens);</span><br/><span class=\"line\">} </span><br/><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">recursive</span><span class=\"params\">(String[] tokens)</span></span>{</span><br/><span class=\"line\">    String current = tokens[index--];</span><br/><span class=\"line\">    <span class=\"keyword\">int</span> operand1, operand2;</span><br/><span class=\"line\">    <span class=\"keyword\">switch</span>(current){</span><br/><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">&#34;+&#34;</span> : </span><br/><span class=\"line\">        operand1 = recursive(tokens);</span><br/><span class=\"line\">        operand2 = recursive(tokens);</span><br/><span class=\"line\">        <span class=\"keyword\">return</span> operand1 + operand2;</span><br/><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">&#34;-&#34;</span> :</span><br/><span class=\"line\">        operand1 = recursive(tokens);</span><br/><span class=\"line\">        operand2 = recursive(tokens);</span><br/><span class=\"line\">        <span class=\"keyword\">return</span> operand2 - operand1;</span><br/><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">&#34;*&#34;</span> :</span><br/><span class=\"line\">        operand1 = recursive(tokens);</span><br/><span class=\"line\">        operand2 = recursive(tokens);</span><br/><span class=\"line\">        <span class=\"keyword\">return</span> operand2 * operand1;</span><br/><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">&#34;/&#34;</span> :</span><br/><span class=\"line\">        operand1 = recursive(tokens);</span><br/><span class=\"line\">        operand2 = recursive(tokens);</span><br/><span class=\"line\">        <span class=\"keyword\">return</span> operand2 / operand1;</span><br/><span class=\"line\">    <span class=\"keyword\">default</span>:</span><br/><span class=\"line\">        <span class=\"keyword\">return</span> Integer.valueOf(current);</span><br/><span class=\"line\">    }</span><br/><span class=\"line\">}</span><br/></pre></td></tr></tbody></table></figure><p></p>","text":"题目要求Evaluate the value of an arithmetic expression in Reverse Polish Notation. Valid operators are +, -, *, /. Each operand may be an intege...","link":"","photos":[],"count_time":{"symbolsCount":"2.4k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%A2%98%E7%9B%AE%E8%A6%81%E6%B1%82\"><span class=\"toc-text\">题目要求</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%80%9D%E8%B7%AF%E4%B8%80%EF%BC%9A%E6%A0%88\"><span class=\"toc-text\">思路一：栈</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%80%9D%E8%B7%AF%E4%BA%8C%EF%BC%9A%E9%80%92%E5%BD%92\"><span class=\"toc-text\">思路二：递归</span></a></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"随机取n个不相同的元素（Lua） 木之子南","uid":"bca72b7983592027c66a9f3656ad722b","slug":"zl/2016-01-01-422_随机取n个不相同的元素（Lua） 木之子南","date":"2024-04-03T03:47:35.712Z","updated":"2024-04-03T03:47:35.712Z","comments":true,"path":"api/articles/zl/2016-01-01-422_随机取n个不相同的元素（Lua） 木之子南.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"随机取n个不相同的元素（Lua实现） 一些逻辑逻辑需求要在一个长度为m数组中取出n个不同的元素（m &gt; n），一般第一想法是随机出一个下标，然后删除对应的元素，以此来取出不同的元素。本篇文章介绍一个不需要删除操作的方法。代码如下： -- 假设长度m为10，随机取出个数为n=...","link":"","photos":[],"count_time":{"symbolsCount":481,"symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"在Lua中使用gettext实现多语言支持","uid":"d485d7ff58a4cae420de4aaaf961115d","slug":"zl/2016-01-01-420_[转]在Lua中使用gettext实现多语言支持","date":"2024-04-03T03:47:35.711Z","updated":"2024-04-03T03:47:35.711Z","comments":true,"path":"api/articles/zl/2016-01-01-420_[转]在Lua中使用gettext实现多语言支持.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"本文系转载，原文链接：http://zengrong.net/post/1986.htm感谢原作者无私分享。 在Lua中使用gettext实现多语言支持 2016-06-07更新：加入gettext包含的工具简介。 GNU gettext 是一套优秀的国际化工具。在 linux ...","link":"","photos":[],"count_time":{"symbolsCount":"3.5k","symbolsTime":"3 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}