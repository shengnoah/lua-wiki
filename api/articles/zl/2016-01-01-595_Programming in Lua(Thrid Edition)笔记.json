{"title":"Programming in Lua(Thrid Edition)笔记","uid":"a502732b8dc58224e972b6c53538b8c4","slug":"zl/2016-01-01-595_Programming in Lua(Thrid Edition)笔记","date":"2024-04-03T03:47:35.834Z","updated":"2024-04-03T03:47:35.834Z","comments":true,"path":"api/articles/zl/2016-01-01-595_Programming in Lua(Thrid Edition)笔记.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<h3 id=\"7-Iterators-and-the-Generic-for\"><a href=\"#7-Iterators-and-the-Generic-for\" class=\"headerlink\" title=\"7 Iterators and the Generic for\"></a>7 Iterators and the Generic for</h3>\n<ul>\n<li>用闭包编写迭代器可以存储状态，先写一个迭代器生成器，然后生成新的迭代器<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(t)</span></span></span><br/><span class=\"line\">\t<span class=\"keyword\">local</span> i = <span class=\"number\">0</span></span><br/><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span></span> i = i + <span class=\"number\">1</span>； <span class=\"keyword\">return</span> t[i] <span class=\"keyword\">end</span></span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/></pre></td></tr></tbody></table></figure>\n</li>\n</ul>\n<p>在while循环中使用迭代器<br/></p><figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">t = {<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">30</span>}</span><br/><span class=\"line\">iter = values(t)</span><br/><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"literal\">true</span> <span class=\"keyword\">do</span></span><br/><span class=\"line\">\t<span class=\"keyword\">local</span> element = iter()</span><br/><span class=\"line\">\t<span class=\"keyword\">if</span> element == <span class=\"literal\">nil</span> <span class=\"keyword\">then</span> <span class=\"keyword\">break</span> <span class=\"keyword\">end</span></span><br/><span class=\"line\">\t<span class=\"built_in\">print</span>(element)</span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/></pre></td></tr></tbody></table></figure><p></p>\n<p><code>generic for</code>专为迭代器而生<br/></p><figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">t = {<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">30</span>}</span><br/><span class=\"line\"><span class=\"keyword\">for</span> element <span class=\"keyword\">in</span> values(t) <span class=\"keyword\">do</span></span><br/><span class=\"line\">\t<span class=\"built_in\">print</span>(element)</span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/></pre></td></tr></tbody></table></figure><p></p>\n<p>打印文件中的每一个word<br/></p><figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/><span class=\"line\">9</span><br/><span class=\"line\">10</span><br/><span class=\"line\">11</span><br/><span class=\"line\">12</span><br/><span class=\"line\">13</span><br/><span class=\"line\">14</span><br/><span class=\"line\">15</span><br/><span class=\"line\">16</span><br/><span class=\"line\">17</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">allwords</span><span class=\"params\">()</span></span></span><br/><span class=\"line\">\t<span class=\"keyword\">local</span> line = <span class=\"built_in\">io</span>.<span class=\"built_in\">read</span>()       </span><br/><span class=\"line\">\t<span class=\"keyword\">local</span> pos = <span class=\"number\">1</span>                <span class=\"comment\">-- current position in the line</span></span><br/><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span></span>           <span class=\"comment\">-- iterator function</span></span><br/><span class=\"line\">\t\t<span class=\"keyword\">while</span> line <span class=\"keyword\">do</span>            <span class=\"comment\">-- repeat while there are lines</span></span><br/><span class=\"line\">\t\t\t<span class=\"keyword\">local</span> s, e = <span class=\"built_in\">string</span>.<span class=\"built_in\">find</span>(line, <span class=\"string\">&#34;%w+&#34;</span>, pos)</span><br/><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> s <span class=\"keyword\">then</span>            <span class=\"comment\">-- found a word?</span></span><br/><span class=\"line\">\t\t\t\tpos = e + <span class=\"number\">1</span>      <span class=\"comment\">-- next position is after this word</span></span><br/><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"built_in\">string</span>.<span class=\"built_in\">sub</span>(line, s, e) <span class=\"comment\">-- return the word</span></span><br/><span class=\"line\">\t\t\t<span class=\"keyword\">else</span></span><br/><span class=\"line\">\t\t\t\tline = <span class=\"built_in\">io</span>.<span class=\"built_in\">read</span>() <span class=\"comment\">-- word not found; try next line</span></span><br/><span class=\"line\">\t\t\t\tpos = <span class=\"number\">1</span>          <span class=\"comment\">-- restart from first position</span></span><br/><span class=\"line\">\t\t\t<span class=\"keyword\">end</span></span><br/><span class=\"line\">\t\t<span class=\"keyword\">end</span></span><br/><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>               <span class=\"comment\">-- no more lines: end of traversal</span></span><br/><span class=\"line\">\t<span class=\"keyword\">end</span></span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/></pre></td></tr></tbody></table></figure><p></p>\n<p>一旦迭代器写好，在<code>generic for</code>中调用极其简单：<br/></p><figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> word <span class=\"keyword\">in</span> allwords() <span class=\"keyword\">do</span></span><br/><span class=\"line\">\t<span class=\"built_in\">print</span>(word)</span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/></pre></td></tr></tbody></table></figure><p></p>\n<ul>\n<li><code>generic for</code>的语义<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> var_1, ..., var_n <span class=\"keyword\">in</span> &lt;explist&gt; <span class=\"keyword\">do</span> &lt;block&gt; <span class=\"keyword\">end</span></span><br/></pre></td></tr></tbody></table></figure>\n</li>\n</ul>\n<p>相当于<br/></p><figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/><span class=\"line\">9</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">do</span></span><br/><span class=\"line\">\t<span class=\"keyword\">local</span> _f, _s, _var = &lt;explist&gt;</span><br/><span class=\"line\">\t<span class=\"keyword\">while</span> <span class=\"literal\">true</span> <span class=\"keyword\">do</span></span><br/><span class=\"line\">\t\t<span class=\"keyword\">local</span> var_1, ..., var_n = _f(_s, _var)</span><br/><span class=\"line\">\t\t_var = var_1</span><br/><span class=\"line\">\t\t<span class=\"keyword\">if</span> _var == <span class=\"literal\">nil</span> <span class=\"keyword\">then</span> <span class=\"keyword\">break</span> <span class=\"keyword\">end</span></span><br/><span class=\"line\">\t\t&lt;block&gt;</span><br/><span class=\"line\">\t<span class=\"keyword\">end</span></span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/></pre></td></tr></tbody></table></figure><p></p>\n<p>其中，<code>var_1</code>为控制变量，<code>&lt;explist&gt;</code>初始化出三个值：迭代器函数、不变状态、控制变量的初值，迭代器函数使用不变状态和控制变量做参数，返回的值赋给<code>var_1, ..., var_n</code>，如果<code>var_1</code>为<code>nil</code>则循环结束，否则执行<code>&lt;block&gt;</code>。如果<code>f</code>为迭代器函数，<code>a0</code>为控制变量初值，s为不变状态，则<code>a1=f(s,a0),a2=f(s,a1),...</code></p>\n<ul>\n<li>无状态迭代器，有状态迭代器的状态存储在闭包中，无状态迭代器的状态存储在<code>_var</code>中。ipairs()可实现如下：<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/><span class=\"line\">9</span><br/><span class=\"line\">10</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">local</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">iter</span><span class=\"params\">(a, i)</span></span></span><br/><span class=\"line\">\ti = i + <span class=\"number\">1</span></span><br/><span class=\"line\">\t<span class=\"keyword\">local</span> v = a[i]</span><br/><span class=\"line\">\t<span class=\"keyword\">if</span> v <span class=\"keyword\">then</span></span><br/><span class=\"line\">\t\t<span class=\"keyword\">return</span> i, v</span><br/><span class=\"line\">\t<span class=\"keyword\">end</span></span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ipairs</span><span class=\"params\">(a)</span></span></span><br/><span class=\"line\">\t<span class=\"keyword\">return</span> iter, a, <span class=\"number\">0</span></span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/></pre></td></tr></tbody></table></figure>\n</li>\n</ul>\n<p>pairs()需用到next()：<br/></p><figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">pairs</span><span class=\"params\">(t)</span></span></span><br/><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"built_in\">next</span>, t, <span class=\"literal\">nil</span></span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/></pre></td></tr></tbody></table></figure><p></p>\n<p><code>next(t, k)</code>，k是table t的一个key，返回下一个key和值，<code>next(t, nil)</code>返回第一个键值对，没有其他键值对时返回nil。next也可以直接使用：<br/></p><figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> k, v <span class=\"keyword\">in</span> <span class=\"built_in\">next</span>, t <span class=\"keyword\">do</span></span><br/><span class=\"line\">\t&lt;loop body&gt;</span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/></pre></td></tr></tbody></table></figure><p></p>\n<ul>\n<li>链表迭代器<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/><span class=\"line\">9</span><br/><span class=\"line\">10</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">local</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getnext</span><span class=\"params\">(list, node)</span></span></span><br/><span class=\"line\">\t<span class=\"keyword\">if</span> <span class=\"keyword\">not</span> node <span class=\"keyword\">then</span></span><br/><span class=\"line\">\t\t<span class=\"keyword\">return</span> list</span><br/><span class=\"line\">\t<span class=\"keyword\">else</span></span><br/><span class=\"line\">\t\t<span class=\"keyword\">return</span> node.<span class=\"built_in\">next</span></span><br/><span class=\"line\">\t<span class=\"keyword\">end</span></span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">traverse</span><span class=\"params\">(list)</span></span></span><br/><span class=\"line\">\t<span class=\"keyword\">return</span> getnext, list, <span class=\"literal\">nil</span></span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/></pre></td></tr></tbody></table></figure>\n</li>\n</ul>\n<p><code>list</code>本身就是链表的主节点<br/></p><figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">list = <span class=\"literal\">nil</span></span><br/><span class=\"line\"><span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> <span class=\"built_in\">io</span>.<span class=\"built_in\">lines</span>() <span class=\"keyword\">do</span></span><br/><span class=\"line\">\tlist = {val = line, <span class=\"built_in\">next</span> = list}</span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/><span class=\"line\"><span class=\"keyword\">for</span> node <span class=\"keyword\">in</span> traverse(list) <span class=\"keyword\">do</span></span><br/><span class=\"line\">\t<span class=\"built_in\">print</span>(node.val)</span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/></pre></td></tr></tbody></table></figure><p></p>\n<ul>\n<li>迭代器的多状态可通过闭包或者将多状态打包为table实现<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/><span class=\"line\">9</span><br/><span class=\"line\">10</span><br/><span class=\"line\">11</span><br/><span class=\"line\">12</span><br/><span class=\"line\">13</span><br/><span class=\"line\">14</span><br/><span class=\"line\">15</span><br/><span class=\"line\">16</span><br/><span class=\"line\">17</span><br/><span class=\"line\">18</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">local</span> iterator</span><br/><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">allwords</span><span class=\"params\">()</span></span></span><br/><span class=\"line\">\t<span class=\"keyword\">local</span> state = {line = <span class=\"built_in\">io</span>.<span class=\"built_in\">read</span>(), pos = <span class=\"number\">1</span>}</span><br/><span class=\"line\">\t<span class=\"keyword\">return</span> iterator, state</span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">iterator</span><span class=\"params\">(state)</span></span></span><br/><span class=\"line\">\t<span class=\"keyword\">while</span> state.line <span class=\"keyword\">do</span>            <span class=\"comment\">-- repeat while there are lines</span></span><br/><span class=\"line\">\t\t<span class=\"keyword\">local</span> s, e = <span class=\"built_in\">string</span>.<span class=\"built_in\">find</span>(state.line, <span class=\"string\">&#34;%w+&#34;</span>, state.pos)</span><br/><span class=\"line\">\t\t<span class=\"keyword\">if</span> s <span class=\"keyword\">then</span>                  <span class=\"comment\">-- found a word?</span></span><br/><span class=\"line\">\t\t\tstate.pos = e + <span class=\"number\">1</span></span><br/><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"built_in\">string</span>.<span class=\"built_in\">sub</span>(state.line, s, e)</span><br/><span class=\"line\">\t\t<span class=\"keyword\">else</span>                       <span class=\"comment\">-- word not found</span></span><br/><span class=\"line\">\t\t\tstate.line = <span class=\"built_in\">io</span>.<span class=\"built_in\">read</span>() <span class=\"comment\">-- try next line...</span></span><br/><span class=\"line\">\t\t\tstate.pos = <span class=\"number\">1</span>          <span class=\"comment\">-- ... from first position</span></span><br/><span class=\"line\">\t\t<span class=\"keyword\">end</span></span><br/><span class=\"line\">\t<span class=\"keyword\">end</span></span><br/><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>                     <span class=\"comment\">-- no more lines: end loop</span></span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/></pre></td></tr></tbody></table></figure>\n</li>\n</ul>\n<p>这里将循环的状态包含在了“不变”状态state中。简单的调用：<br/></p><figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> word <span class=\"keyword\">in</span> allwords() <span class=\"keyword\">do</span></span><br/><span class=\"line\">\t<span class=\"built_in\">print</span>(word)</span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/></pre></td></tr></tbody></table></figure><p></p>\n<ul>\n<li>true iterator，循环在函数内，参数为另一个函数，表示对迭代对象的操作<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">allwords</span><span class=\"params\">(f)</span></span></span><br/><span class=\"line\">\t<span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> <span class=\"built_in\">io</span>.<span class=\"built_in\">lines</span>() <span class=\"keyword\">do</span></span><br/><span class=\"line\">\t\t<span class=\"keyword\">for</span> word <span class=\"keyword\">in</span> <span class=\"built_in\">string</span>.<span class=\"built_in\">gmatch</span>(line, <span class=\"string\">&#34;%w+&#34;</span>) <span class=\"keyword\">do</span></span><br/><span class=\"line\">\t\t\tf(word)</span><br/><span class=\"line\">\t\t<span class=\"keyword\">end</span></span><br/><span class=\"line\">\t<span class=\"keyword\">end</span></span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/><span class=\"line\">allwords(<span class=\"built_in\">print</span>)</span><br/></pre></td></tr></tbody></table></figure>\n</li>\n</ul>\n<p>参数为匿名函数：<br/></p><figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">local</span> count = <span class=\"number\">0</span></span><br/><span class=\"line\">allwords(<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(w)</span></span></span><br/><span class=\"line\">\t<span class=\"keyword\">if</span> w == <span class=\"string\">&#34;hello&#34;</span> <span class=\"keyword\">then</span> count = count + <span class=\"number\">1</span> <span class=\"keyword\">end</span></span><br/><span class=\"line\"><span class=\"keyword\">end</span>)</span><br/><span class=\"line\"><span class=\"built_in\">print</span>(count)</span><br/></pre></td></tr></tbody></table></figure><p></p>\n<p>用之前的迭代器<br/></p><figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">local</span> count = <span class=\"number\">0</span></span><br/><span class=\"line\"><span class=\"keyword\">for</span> w <span class=\"keyword\">in</span> allwords() <span class=\"keyword\">do</span></span><br/><span class=\"line\">\t<span class=\"keyword\">if</span> w == <span class=\"string\">&#34;hello&#34;</span> <span class=\"keyword\">then</span> count = count + <span class=\"number\">1</span> <span class=\"keyword\">end</span></span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/><span class=\"line\"><span class=\"built_in\">print</span>(count)</span><br/></pre></td></tr></tbody></table></figure><p></p>","text":"7 Iterators and the Generic for 用闭包编写迭代器可以存储状态，先写一个迭代器生成器，然后生成新的迭代器1234function (t) local i = 0 return function () i = i + 1； return t[i] en...","link":"","photos":[],"count_time":{"symbolsCount":"3.3k","symbolsTime":"3 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#7-Iterators-and-the-Generic-for\"><span class=\"toc-text\">7 Iterators and the Generic for</span></a></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"399. Evaluate Division","uid":"5031930731b6e4a4cb5f9737c634e239","slug":"zl/2016-01-01-594_399. Evaluate Division","date":"2024-04-03T03:47:35.834Z","updated":"2024-04-03T03:47:35.834Z","comments":true,"path":"api/articles/zl/2016-01-01-594_399. Evaluate Division.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":" &lt;a href=&quot;https://techlarry.github.io/tags/Leetcode/&quot; style=&quot;color:white&quot; class=&quot;tag&quot;&gt; Leetcode &lt;/a&...","link":"","photos":[],"count_time":{"symbolsCount":"5.7k","symbolsTime":"5 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"linux常用库的lua移植：libmcrypt的lua插件","uid":"9e32926600738e59d526b5fa520f6d70","slug":"zl/2016-01-01-596_linux常用库的lua移植：libmcrypt的lua插件","date":"2024-04-03T03:47:35.834Z","updated":"2024-04-03T03:47:35.835Z","comments":true,"path":"api/articles/zl/2016-01-01-596_linux常用库的lua移植：libmcrypt的lua插件.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"openresty的lua方案效率不错，缺点是库不全，php现成的接口应用改成lua并不容易，比如libmcrypt，这个php常用的加密库（其实nginx的lua模块加密还有个不错的原生方案，openssl，在openrestylualibresty目录下，特定的加密方式需要自...","link":"","photos":[],"count_time":{"symbolsCount":"2.6k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}