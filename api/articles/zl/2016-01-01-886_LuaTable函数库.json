{"title":"LuaTable函数库","uid":"cb60e27e762dec313375f2a4e70391a8","slug":"zl/2016-01-01-886_LuaTable函数库","date":"2024-04-03T03:47:36.157Z","updated":"2024-04-03T03:47:36.157Z","comments":true,"path":"api/articles/zl/2016-01-01-886_LuaTable函数库.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">table</span>.<span class=\"built_in\">insert</span>(<span class=\"built_in\">table</span>,[ pos,] value) </span><br/><span class=\"line\"><span class=\"built_in\">table</span>.<span class=\"built_in\">remove</span>(<span class=\"built_in\">table</span>[, pos]) </span><br/><span class=\"line\"><span class=\"built_in\">table</span>.<span class=\"built_in\">concat</span>(<span class=\"built_in\">table</span>[, sep[, i[, j]]]) </span><br/><span class=\"line\"><span class=\"built_in\">table</span>.<span class=\"built_in\">sort</span>(<span class=\"built_in\">table</span>[, comp]) // 见Lua排序</span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"built_in\">table</span>.<span class=\"built_in\">getn</span>() //<span class=\"number\">5.0</span>费</span><br/><span class=\"line\"><span class=\"built_in\">table</span>.<span class=\"built_in\">maxn</span>() //<span class=\"number\">5.2</span>费</span><br/></pre></td></tr></tbody></table></figure>\n<p>#####insert, remove</p>\n<p>insert 和 remove 只能用于数组元素的插入和移出， 进行插入和移出时，会将后面的元素对齐起来。<br/>  所以在 for 循环中进行 insert 和 remove 的时候要注意插入和移除时是否<strong>漏掉</strong>了某些项：<br/>    local t = {1,2,3,3,5,3,6}<br/>    for i,v in ipairs(t) do<br/>      if v == 3 then<br/>        table.remove(t,i)<br/>      end<br/>    end<br/>    – 错误，第四个 3 没有被移除，ipairs 内部会维护一个变量记录遍历的位置，remove 掉第三个数字 3 之后，ipairs 下一个返回的值是 5 而不是 3 </p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/><span class=\"line\">9</span><br/><span class=\"line\">10</span><br/><span class=\"line\">11</span><br/><span class=\"line\">12</span><br/><span class=\"line\">13</span><br/><span class=\"line\">14</span><br/><span class=\"line\">15</span><br/><span class=\"line\">16</span><br/><span class=\"line\">17</span><br/><span class=\"line\">18</span><br/><span class=\"line\">19</span><br/><span class=\"line\">20</span><br/><span class=\"line\">21</span><br/><span class=\"line\">22</span><br/><span class=\"line\">23</span><br/><span class=\"line\">24</span><br/><span class=\"line\">25</span><br/><span class=\"line\">26</span><br/><span class=\"line\">27</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">local</span> t = {<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>,<span class=\"number\">3</span>,<span class=\"number\">6</span>} </span><br/><span class=\"line\"><span class=\"keyword\">for</span> i=<span class=\"number\">1</span>, #t <span class=\"keyword\">do</span> </span><br/><span class=\"line\">  <span class=\"keyword\">if</span> t[i] == <span class=\"number\">3</span> <span class=\"keyword\">then</span> </span><br/><span class=\"line\">    <span class=\"built_in\">table</span>.<span class=\"built_in\">remove</span>(t,i) </span><br/><span class=\"line\">    i = i<span class=\"number\">-1</span> </span><br/><span class=\"line\">  <span class=\"keyword\">end</span> </span><br/><span class=\"line\"><span class=\"keyword\">end</span> </span><br/><span class=\"line\"></span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"keyword\">local</span> t = {<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>,<span class=\"number\">3</span>,<span class=\"number\">6</span>} </span><br/><span class=\"line\"><span class=\"keyword\">for</span> i=#t, <span class=\"number\">1</span>, <span class=\"number\">-1</span> <span class=\"keyword\">do</span> </span><br/><span class=\"line\">  <span class=\"keyword\">if</span> t[i] == <span class=\"number\">3</span> <span class=\"keyword\">then</span> </span><br/><span class=\"line\">    <span class=\"built_in\">table</span>.<span class=\"built_in\">remove</span>(t,i) </span><br/><span class=\"line\">  <span class=\"keyword\">end</span> </span><br/><span class=\"line\"><span class=\"keyword\">end</span> </span><br/><span class=\"line\"><span class=\"comment\">-- 正确，从后往前遍历 </span></span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"keyword\">local</span> t = {<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>,<span class=\"number\">3</span>,<span class=\"number\">6</span>} </span><br/><span class=\"line\"><span class=\"keyword\">local</span> i = <span class=\"number\">1</span> </span><br/><span class=\"line\"><span class=\"keyword\">while</span> t[i] <span class=\"keyword\">do</span> </span><br/><span class=\"line\">  <span class=\"keyword\">if</span> t[i] == <span class=\"number\">3</span> <span class=\"keyword\">then</span> </span><br/><span class=\"line\">    <span class=\"built_in\">table</span>.<span class=\"built_in\">remove</span>(t,i) </span><br/><span class=\"line\">  <span class=\"keyword\">else</span> </span><br/><span class=\"line\">    i = i+<span class=\"number\">1</span> </span><br/><span class=\"line\">  <span class=\"keyword\">end</span> </span><br/><span class=\"line\"><span class=\"keyword\">end</span> </span><br/><span class=\"line\"><span class=\"comment\">-- 正确，自己控制 i 的值是否增加</span></span><br/></pre></td></tr></tbody></table></figure>\n<h5 id=\"Concat\"><a href=\"#Concat\" class=\"headerlink\" title=\"Concat\"></a>Concat</h5><p>concat 可以将 table 的数组部分拼接成一个字符串，中间用 seq 分隔。<br/>  lua 中字符串的存储方式与 C 不一样，lua 中的每个字符串都是单独的一个拷贝，拼接两个字符串会产生一个新的拷贝，如果拼接操作特别多，就会影响性能：<br/>    local beginTime = os.clock()<br/>    local str = “”<br/>    for i=1, 30000 do<br/>      str = str .. i<br/>    end<br/>    local endTime = os.clock()<br/>    print(endTime - beginTime)<br/>    – 消耗 0.613 秒，产生了 30000 个字符串拷贝，但只有最后一个是有用的</p>\n<p>​    local beginTime = os.clock()<br/>​    local t = {}<br/>​    for i=1, 30000 do<br/>​      t[i] = i<br/>​    end<br/>​    local str = table.concat(t, “”)<br/>​    local endTime = os.clock()<br/>​    print(endTime - beginTime)<br/>​    – 消耗 0.024 秒，利用 concat，一次性把字符串拼接出来，只产生了一个字符串拷贝 </p>\n<h5 id=\"maxn\"><a href=\"#maxn\" class=\"headerlink\" title=\"maxn\"></a>maxn</h5><ul>\n<li>原型：table.maxn (tab_table)</li>\n<li>解释：返回一个表<code>tab_table</code>中的最大正数索引，如果没有正数索引的话返回0。</li>\n<li>总结#<ul>\n<li>这个函数比较简单，行为和函数解释一致，<strong>不要求索引必须连续，返回一个最大的正数索引</strong>。</li>\n<li>有运行结果可知，当表中<strong>只有</strong>非数字索引或者负数索引时，函数返回0。</li>\n<li>其中官方文档中有一句话，大意是说这个函数的工作原理就是线性的遍历了这个表</li>\n</ul>\n</li>\n</ul>\n<p><a href=\"https://www.cnblogs.com/whiteyun/archive/2009/08/10/1543139.html\" target=\"_blank\" rel=\"noopener noreferrer\">https://www.cnblogs.com/whiteyun/archive/2009/08/10/1543139.html</a></p>\n<p><a href=\"https://www.cnblogs.com/slysky/p/5360387.html\" target=\"_blank\" rel=\"noopener noreferrer\">https://www.cnblogs.com/slysky/p/5360387.html</a></p>","text":"1234567table.insert(table,[ pos,] value) table.remove(table[, pos]) table.concat(table[, sep[, i[, j]]]) table.sort(table[, comp]) // 见Lua排序...","link":"","photos":[],"count_time":{"symbolsCount":"1.8k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#Concat\"><span class=\"toc-text\">Concat</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#maxn\"><span class=\"toc-text\">maxn</span></a></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Lua中的协程","uid":"4d0a91799dda866fbb32a60943831f1f","slug":"zl/2016-01-01-885_Lua中的协程","date":"2024-04-03T03:47:36.157Z","updated":"2024-04-03T03:47:36.157Z","comments":true,"path":"api/articles/zl/2016-01-01-885_Lua中的协程.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"Lua中的协程和其他变量一样，都是第一类值（first-class alue），可以被保存在变量中，可以被作为参数传递，可以被函数返回。 协程有4种状态：挂起（suspended），运行（running），死亡（dead）和正常（normal）。 Lua为协程提供了3个基础接口：...","link":"","photos":[],"count_time":{"symbolsCount":"2.3k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Programming in Lua摘录","uid":"cb778e9fbe266619575d7969eb9ee508","slug":"zl/2016-01-01-887_Programming in Lua摘录","date":"2024-04-03T03:47:36.157Z","updated":"2024-04-03T03:47:36.157Z","comments":true,"path":"api/articles/zl/2016-01-01-887_Programming in Lua摘录.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"“袁承志知道若再谦逊，那就是瞧人不起，展开五行拳，发拳当胸打去。荣彩和旁观三人本来都以为他武功有独到之秘，哪知使出来的竟是武林中最寻常不过的五行拳。 敌对三人登时意存轻视，温青脸上不自禁露出失望的神色。 “荣彩心中暗喜，双拳如风，连抢三下攻势，满拟自己的大力魔爪手江南独步，三四招...","link":"","photos":[],"count_time":{"symbolsCount":246,"symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}