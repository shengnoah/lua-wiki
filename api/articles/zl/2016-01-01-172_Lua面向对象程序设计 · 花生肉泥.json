{"title":"Lua面向对象程序设计 · 花生肉泥","uid":"a08477f26237ca96269b3d0e18271099","slug":"zl/2016-01-01-172_Lua面向对象程序设计 · 花生肉泥","date":"2024-04-03T03:47:33.061Z","updated":"2024-04-03T03:47:33.061Z","comments":true,"path":"api/articles/zl/2016-01-01-172_Lua面向对象程序设计 · 花生肉泥.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<h3 id=\"类\"><a href=\"#类\" class=\"headerlink\" title=\"类\"></a>类</h3><p>lua不存在类的概念，每个对象定义他自己的行为并拥有自己的形状（shape）。然而，依据基于原型的语言，在lua中仿效类的概念并不难。</p>\n<p>在lua中，使用继承的思想，很容易实现prototype（原型），如果我们有两个对象a和b，我们想让b作为a的原型，只需要<br/></p><figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">setmetatable</span>(a,{<span class=\"built_in\">__index</span> = b})</span><br/></pre></td></tr></tbody></table></figure><p></p>\n<p>这样，对象a调用任何不存在的成员函数都会到对象b中去找，术语上，可以将b看做类，a看做对象。</p>\n<p>例：为了使得新创建的对象拥有和Account相似的行为。我们使用__index metamethod，使新的对象继承Account，注意一个小小的优化，我们不需要创建一个额外的表作为account对象的metatable，我们可以用Account表本身作为metatable</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>  <span class=\"params\">(o)</span></span></span><br/><span class=\"line\">     o = o <span class=\"keyword\">or</span> {}     </span><br/><span class=\"line\">     <span class=\"built_in\">setmetatable</span>(o,self)</span><br/><span class=\"line\">     self.<span class=\"built_in\">__index</span> = self</span><br/><span class=\"line\">     <span class=\"keyword\">return</span> o</span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/></pre></td></tr></tbody></table></figure>\n<p>当我们调用Account:new时，self等于Account，因此可以直接使用Account取代self。有了这段代码之后，当我们创建一个新的账号并且用掉一个方法的时候：<br/></p><figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">a = Account:new{balance = <span class=\"number\">0</span>}</span><br/><span class=\"line\">a:deposit(<span class=\"number\">100.00</span>)</span><br/></pre></td></tr></tbody></table></figure><p></p>","text":"类lua不存在类的概念，每个对象定义他自己的行为并拥有自己的形状（shape）。然而，依据基于原型的语言，在lua中仿效类的概念并不难。 在lua中，使用继承的思想，很容易实现prototype（原型），如果我们有两个对象a和b，我们想让b作为a的原型，只需要1setmetata...","link":"","photos":[],"count_time":{"symbolsCount":585,"symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%B1%BB\"><span class=\"toc-text\">类</span></a></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Lua","uid":"15b0cdc6d03f6c3f6bf8d3a7ff197317","slug":"zl/2016-01-01-174_[Lua","date":"2024-04-03T03:47:33.062Z","updated":"2024-04-03T03:47:33.062Z","comments":true,"path":"api/articles/zl/2016-01-01-174_[Lua.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"读书笔记： Programming in Lua, 4th Edition. 替换字符串 &gt; a = &#34;one string&#34; &gt; b = string.gsub(a, &#34;one&#34;, &#34;another&#34;) &gt; pr...","link":"","photos":[],"count_time":{"symbolsCount":"4.3k","symbolsTime":"4 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"lua与Cpp传递参数接口介绍","uid":"394309a2e844b8a4a4af9139e80bc213","slug":"zl/2016-01-01-171_lua与Cpp传递参数接口介绍","date":"2024-04-03T03:47:33.060Z","updated":"2024-04-03T03:47:33.061Z","comments":true,"path":"api/articles/zl/2016-01-01-171_lua与Cpp传递参数接口介绍.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"最近在开源代码中遇到MySQL-Proxy, 其允许lua脚本实现用户的个性化配置, lua脚本可以引用C/C++的动态链接库完成一些复杂的功能. 本文对最近接触到的lua和C/C++混合的相关接口使用做个总结. 本文的完整代码在文末的附录中, 代码测试在Ubuntu16.04+...","link":"","photos":[],"count_time":{"symbolsCount":"5.8k","symbolsTime":"5 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}