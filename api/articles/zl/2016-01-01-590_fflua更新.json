{"title":"fflua更新","uid":"83de5120af5a98a8d401694006b8691e","slug":"zl/2016-01-01-590_fflua更新","date":"2024-04-03T03:47:35.833Z","updated":"2024-04-03T03:47:35.833Z","comments":true,"path":"api/articles/zl/2016-01-01-590_fflua更新.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<h2 id=\"简介：\"><a href=\"#简介：\" class=\"headerlink\" title=\"简介：\"></a>简介：</h2><p>fflua 发布了有段时间了，很多网友都用了，并且提供了一些很好的反馈。其中一个就是c++接口注册到lua中时，对引用的支持。这样使用起来更加方便。</p>\n<h2 id=\"原有方式：\"><a href=\"#原有方式：\" class=\"headerlink\" title=\"原有方式：\"></a>原有方式：</h2><p>fflua 中注册c++的类用如下方式：</p>\n<figure class=\"highlight cpp\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/><span class=\"line\">9</span><br/><span class=\"line\">10</span><br/><span class=\"line\">11</span><br/><span class=\"line\">12</span><br/><span class=\"line\">13</span><br/><span class=\"line\">14</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> </span></span><br/><span class=\"line\"><span class=\"class\">{</span></span><br/><span class=\"line\"><span class=\"keyword\">public</span>:</span><br/><span class=\"line\">    <span class=\"keyword\">base_t</span>():v(<span class=\"number\">789</span>){}</span><br/><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dump</span><span class=\"params\">()</span></span></span><br/><span class=\"line\"><span class=\"function\">    </span>{</span><br/><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&#34;in %s a:%dn&#34;</span>, __FUNCTION__, v);</span><br/><span class=\"line\">    }</span><br/><span class=\"line\">    <span class=\"keyword\">int</span> v;</span><br/><span class=\"line\">};</span><br/><span class=\"line\"></span><br/><span class=\"line\">    <span class=\"keyword\">fflua_register_t</span>&lt;<span class=\"keyword\">base_t</span>, ctor()&gt;(ls, <span class=\"string\">&#34;base_t&#34;</span>)  <span class=\"comment\">//! 注册构造函数</span></span><br/><span class=\"line\">                    .def(&amp;<span class=\"keyword\">base_t</span>::dump, <span class=\"string\">&#34;dump&#34;</span>)     <span class=\"comment\">//! 注册基类的函数</span></span><br/><span class=\"line\">                    .def(&amp;<span class=\"keyword\">base_t</span>::v, <span class=\"string\">&#34;v&#34;</span>);          <span class=\"comment\">//! 注册基类的属性</span></span><br/></pre></td></tr></tbody></table></figure>\n<p>当c++类注册成功，后lua代码中可以操作类对象的指针，并且可以作为参数传递给c++的接口：</p>\n<pre><code class=\"cpp\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dumy_base</span><span class=\"params\">(<span class=\"keyword\">base_t</span>* p)</span></span>\n<span class=\"function\"></span>&#123;\n    <span class=\"built_in\">printf</span>(<span class=\"string\">&#34;in %s begin ------------n&#34;</span>, __FUNCTION__);\n&#125;\n<span class=\"keyword\">fflua_register_t</span>&lt;&gt;(ls).def(&amp;dumy, <span class=\"string\">&#34;dumy&#34;</span>);  <span class=\"comment\">//! 注册静态函数</span>\n<span class=\"comment\">//有网友跟我反映，原来的接口很多都是使用引用作为参数，为了接收lua传过来的参数，还得需要重新写一个函数，比较麻烦，于是fflua增加了对引用的支持：</span>\n<p><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dumy_base</span><span class=\"params\">(<span class=\"keyword\">base_t</span>&amp; p)</span></span><br />\n<span class=\"function\"></span>&#123;<br />\n<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;in %s begin ------------n&quot;</span>, <strong>FUNCTION</strong>);<br />\n&#125;<br />\n<span class=\"keyword\">fflua_register_t</span>&lt;&gt;(ls).def(&amp;dumy, <span class=\"string\">&quot;dumy&quot;</span>); <span class=\"comment\">//! 注册静态函数</span><br />\n</code></pre></p>\n<h2 id=\"总结：\"><a href=\"#总结：\" class=\"headerlink\" title=\"总结：\"></a>总结：</h2><p>最新代码：<a href=\"https://github.com/fanchy/fflua\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/fanchy/fflua</a></p>","text":"简介：fflua 发布了有段时间了，很多网友都用了，并且提供了一些很好的反馈。其中一个就是c++接口注册到lua中时，对引用的支持。这样使用起来更加方便。 原有方式：fflua 中注册c++的类用如下方式： 1234567891011121314class {public: ba...","link":"","photos":[],"count_time":{"symbolsCount":992,"symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%AE%80%E4%BB%8B%EF%BC%9A\"><span class=\"toc-text\">简介：</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8E%9F%E6%9C%89%E6%96%B9%E5%BC%8F%EF%BC%9A\"><span class=\"toc-text\">原有方式：</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93%EF%BC%9A\"><span class=\"toc-text\">总结：</span></a></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"tolua原理","uid":"56b3f0ea692e4bd7f2a5a1a768e3707f","slug":"zl/2016-01-01-592_tolua原理","date":"2024-04-03T03:47:35.833Z","updated":"2024-04-03T03:47:35.833Z","comments":true,"path":"api/articles/zl/2016-01-01-592_tolua原理.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"tolua++如何将c++对象导入到lua里？lua如何能够访问c++对象成员？创建一个 userdata ，存放 C/C++ 对象指针，然后给 userdata 添加元表，用index 和newindex 元方法映射 C/C++ 中的对象方法。 c++层新建一个元表作为类型（通...","link":"","photos":[],"count_time":{"symbolsCount":"6.8k","symbolsTime":"6 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"全站静态资源抓取的ngx_lua方案","uid":"95d6afbff481aed8248dd4731c0bf4a3","slug":"zl/2016-01-01-589_全站静态资源抓取的ngx_lua方案","date":"2024-04-03T03:47:35.832Z","updated":"2024-04-03T03:47:35.832Z","comments":true,"path":"api/articles/zl/2016-01-01-589_全站静态资源抓取的ngx_lua方案.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"一些方案，没有一一测试：SiteSucker、httrack、idm、nomder、webzip、Teleport Pro、wget webzip有乱码问题，？和后面一个英文字符被合成了一个中文乱码，原因不明，最终采用的是wget的方案： wget -e robots=off -...","link":"","photos":[],"count_time":{"symbolsCount":651,"symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}