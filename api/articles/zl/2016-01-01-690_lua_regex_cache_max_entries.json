{"title":"lua_regex_cache_max_entries","uid":"241115d184586f7e3f5b8de93b6b3126","slug":"zl/2016-01-01-690_lua_regex_cache_max_entries","date":"2024-04-03T03:47:35.926Z","updated":"2024-04-03T03:47:35.926Z","comments":true,"path":"api/articles/zl/2016-01-01-690_lua_regex_cache_max_entries.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<p>\n\t\t<!--\nauthor: wngn123\nhead: head.png\ndate: 2016-08-24\ntitle: lua_regex_cache_max_entries\ntags: lua\ncategory: Lua\nstatus: publish\nsummary: 指定在worker进程级别编译的正则表达式缓存结果的最大数量\n-->\n</p><h2>lua_regex_cache_max_entries</h2>\n<p><strong>syntax:</strong> <em>lua_regex_cache_max_entries &lt;num&gt;</em></p>\n<p><strong>default:</strong> <em>lua_regex_cache_max_entries 1024</em></p>\n<p><strong>context:</strong> <em>http</em></p>\n<p>Specifies the maximum number of entries allowed in the worker process level compiled regex cache.</p>\n<p>The regular expressions used in <a href=\"#ngxrematch\">ngx.re.match</a>, <a href=\"#ngxregmatch\">ngx.re.gmatch</a>, <a href=\"#ngxresub\">ngx.re.sub</a>, and <a href=\"#ngxregsub\">ngx.re.gsub</a> will be cached within this cache if the regex option <code>o</code> (i.e., compile-once flag) is specified.</p>\n<p>The default number of entries allowed is 1024 and when this limit is reached, new regular expressions will not be cached (as if the <code>o</code> option was not specified) and there will be one, and only one, warning in the <code>error.log</code> file:</p>\n<pre><code>2011/08/27 23:18:26 [warn] 31997#0: *1 lua exceeding regex cache max entries (1024), ...</code></pre>\n<p>Do not activate the <code>o</code> option for regular expressions (and/or <code>replace</code> string arguments for <a href=\"#ngxresub\">ngx.re.sub</a> and <a href=\"#ngxregsub)\">ngx.re.gsub</a> that are generated <em>on the fly</em> and give rise to infinite variations to avoid hitting the specified limit.</p>\n<h2>中文</h2>\n<p><strong>语法:</strong> <em>lua_regex_cache_max_entries &lt;num&gt;</em></p>\n<p><strong>默认值:</strong> <em>lua_regex_cache_max_entries 1024</em></p>\n<p><strong>上下文:</strong> <em>http</em></p>\n<p>指定在worker进程级别编译的正则表达式缓存结果的最大数量。</p>\n<p>当正则选项o被指定的时候，ngx.re.match，ngx.re.gmatch，ngx.re.sub，ngx.re.gsub使用的正则表达式会被缓存在缓存中。</p>\n<p>缓存数量的最大值默认是1024，如果数量达到最大值限定值，新的正则表达式将不会被缓存（就像o选项没有指定一样），但是会写一条，仅仅一条警告日志到error.log文件中。</p>\n<pre><code>2011/08/27 23:18:26 [warn] 31997#0: *1 lua exceeding regex cache max entries (1024), ...</code></pre>\n<p>注意不要激活那些会很快的产生和引起无数的变化的正则表达式的o选项（或者为ngx.re.sub和ngx.re.gsub替换字符串参数），以避免达到指定的限制。</p>\n<h4>扩展</h4>\n<p>o 选项参数用于提高性能，指明该参数之后，被编译的 Pattern 将会在 worker 进程中缓存，并且被当前 worker 进程的每次请求所共享。 Pattern 缓存的上限值通过 lua_regex_cache_max_entries 来修改</p>\n<pre><code># nginx.conf\nlocation /test &#123;\n    content_by_lua &#39;\n        local regex = [[\\d+]]\n<pre><code>    -- 参数&amp;#34;o&amp;#34;是开启缓存必须的\n    local m = ngx.re.match(&amp;#34;hello, 1234&amp;#34;, regex, &amp;#34;o&amp;#34;)  \n    if m then\n        ngx.say(m[0])\n    else\n        ngx.say(&amp;#34;not matched!&amp;#34;)\n    end\n&amp;#39;;\n</code></pre>\n<p>}</p>\n<h1 id=\"在网址中输入yoururltest即会在网页中显示-1234-codepre\"><a class=\"markdownIt-Anchor\" href=\"#在网址中输入yoururltest即会在网页中显示-1234-codepre\"></a> 在网址中输入&quot;yourURL/test&quot;，即会在网页中显示 1234 。</code></pre></h1>\n<pre><code>\t&lt;p&gt;&lt;/p&gt;\n</code></pre>\n","text":" lua_regex_cache_max_entries syntax: lua_regex_cache_max_entries &lt;num&gt; default: lua_regex_cache_max_entries 1024 context: http Specifi...","link":"","photos":[],"count_time":{"symbolsCount":"1.9k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">lua_regex_cache_max_entries</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">中文</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\"><span class=\"toc-text\">扩展</span></a></li></ol></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%9C%A8%E7%BD%91%E5%9D%80%E4%B8%AD%E8%BE%93%E5%85%A5yoururltest%E5%8D%B3%E4%BC%9A%E5%9C%A8%E7%BD%91%E9%A1%B5%E4%B8%AD%E6%98%BE%E7%A4%BA-1234-codepre\"><span class=\"toc-text\"> 在网址中输入&quot;yourURL&#x2F;test&quot;，即会在网页中显示 1234 。</span></a>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Lua 汉字拼音首字母提取","uid":"7210045a47c00c031b29ac526b186e4c","slug":"zl/2016-01-01-693_Lua 汉字拼音首字母提取 ","date":"2024-04-03T03:47:35.927Z","updated":"2024-04-03T03:47:35.931Z","comments":true,"path":"api/articles/zl/2016-01-01-693_Lua 汉字拼音首字母提取 .json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"最近项目上有个需求，需要将一些联系人数据按照拼音首字母排序。google 了一番，竟然没有找到一个合适的 Lua 解决方案。倒是找到一个 lua-pinyin，粗略翻了下源码发现其是将所有的中文返回全部完整的拼音，原理是将所有汉字对应拼音创建好数据字典，载入 Lua，之后查询这个...","link":"","photos":[],"count_time":{"symbolsCount":598,"symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Lua 编程之基本语法与数据类型","uid":"ac424faa46411eca3e7ef770ca03a0c3","slug":"zl/2016-01-01-691_Lua 编程之基本语法与数据类型","date":"2024-04-03T03:47:35.926Z","updated":"2024-04-03T03:47:35.927Z","comments":true,"path":"api/articles/zl/2016-01-01-691_Lua 编程之基本语法与数据类型.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"学习一门编程语言，必然需要先从它的语法开始，所以今天先来学习下 Lua 的基本语法。 首先一个就要说到注释了，一段程序无论编写得多好，少量的注释也是必要的。在 Lua 中的注释比其他的语言稍有不同。 1234567-- 多行注释--[[ print(&#39;多行注释里面的内容&...","link":"","photos":[],"count_time":{"symbolsCount":"2.5k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}