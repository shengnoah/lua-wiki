{"title":"The Environment Model of Evaluation","uid":"7fba90ed15811944e899f4562a8fb009","slug":"zl/2016-01-01-183_The Environment Model of Evaluation","date":"2024-04-03T03:47:33.071Z","updated":"2024-04-03T03:47:33.071Z","comments":true,"path":"api/articles/zl/2016-01-01-183_The Environment Model of Evaluation.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<pre><code>&lt;p&gt;这是 sicp 第三章中的 The Environment Model of Evaluation 的总结和一道习题的回顾。&lt;/p&gt;\n</code></pre>\n<p>因为 procedure 在调用过程中会有参数的引入，嵌套的调用，define 变量的定义和作用域等。\n如何安排这些变量的生命周期和作用域就显得至关重要了。</p>\n<h2 id=\"environment\">Environment</h2>\n<p>首先引入了 Environment 的概念，一个 environment 是由一系列的 <em>frames</em> 组成。\n每个 frame 是一个包含了 <em>bindings</em> 的 table，关联了变量名称和它们相应的值。</p>\n<h2 id=\"procedure\">Procedure</h2>\n<p>procedure 的 definition 语法是对底下隐式的 lambda-expression 的语法糖。</p>\n<div class=\"language-scheme highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"p\">(</span><span class=\"k\">define</span> <span class=\"p\">(</span><span class=\"nf\">square</span> <span class=\"nv\">x</span><span class=\"p\">)</span> \n\t<span class=\"p\">(</span><span class=\"nb\">*</span> <span class=\"nv\">x</span> <span class=\"nv\">x</span><span class=\"p\">))</span>\n<p><span class=\"p\">(</span><span class=\"k\">define</span> <span class=\"nv\">square</span><br />\n<span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"p\">(</span><span class=\"nf\">x</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\">*</span> <span class=\"nv\">x</span> <span class=\"nv\">x</span><span class=\"p\">)))</span></p>\n<p></code></pre></div></div></p>\n<p>所以 一个 procedure 就相当于是一个对底下 lambda 的引用。比如上面 <code class=\"highlighter-rouge\">square</code> 就是对 <code class=\"highlighter-rouge\">(lambda (x) (* x x))</code> 的引用。</p>\n<p>而且一个 procedure 对象是由一些代码和一个指向 environment 的 pointer 组成的 pair。</p>\n<h3 id=\"add-bindings\">add bindings</h3>\n<p><code class=\"highlighter-rouge\">define</code> 通过向 frames 添加 bindings 来创建 definitions。如上面的 <code class=\"highlighter-rouge\">square</code> 所述一样。</p>\n<h3 id=\"apply-procedure\">apply procedure</h3>\n<p>To apply a procedure to arguments, create a new environment containing a frame that \nbinds the parameters to the values of the arguments.</p>\n<p>执行一个 procedure 会创建一个 environment，并且会把形参绑定实参的值。</p>\n<p>the frame has as its enclosing environment the environment part of the procedure object being applied.</p>\n<p>每个 frame 有一个包含它的 environment，这个 environment 是 procedure 对象指向的 environment。</p>\n<p>如果 procedure 返回一个 lambda，则 procedure 执行后创建的 environment 就是这个 lambda (procedure 只是 lambda 的 definition) 的 enclosing environment。\n这个比较抽象，建议翻看 <a href=\"http://sarabander.github.io/sicp/html/3_002e2.xhtml#g_t3_002e2_002e3\">Frames as the Repository of Local State</a></p>\n<h2 id=\"exercise-320\">Exercise 3.20</h2>\n<p>首先提供一个由 procedure 定义的 mutable pair</p>\n<div class=\"language-scheme highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"p\">(</span><span class=\"k\">define</span> <span class=\"p\">(</span><span class=\"nb\">cons</span> <span class=\"nv\">x</span> <span class=\"nv\">y</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\">define</span> <span class=\"p\">(</span><span class=\"nf\">set-x!</span> <span class=\"nv\">v</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">set!</span> <span class=\"nv\">x</span> <span class=\"nv\">v</span><span class=\"p\">))</span>\n  <span class=\"p\">(</span><span class=\"k\">define</span> <span class=\"p\">(</span><span class=\"nf\">set-y!</span> <span class=\"nv\">v</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">set!</span> <span class=\"nv\">y</span> <span class=\"nv\">v</span><span class=\"p\">))</span>\n  <span class=\"p\">(</span><span class=\"k\">define</span> <span class=\"p\">(</span><span class=\"nf\">dispatch</span> <span class=\"nv\">m</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"k\">cond</span> <span class=\"p\">((</span><span class=\"nb\">eq?</span> <span class=\"nv\">m</span> <span class=\"ss\">'car</span><span class=\"p\">)</span> <span class=\"nv\">x</span><span class=\"p\">)</span>\n          <span class=\"p\">((</span><span class=\"nb\">eq?</span> <span class=\"nv\">m</span> <span class=\"ss\">'cdr</span><span class=\"p\">)</span> <span class=\"nv\">y</span><span class=\"p\">)</span>\n          <span class=\"p\">((</span><span class=\"nb\">eq?</span> <span class=\"nv\">m</span> <span class=\"ss\">'set-car!</span><span class=\"p\">)</span> <span class=\"nv\">set-x!</span><span class=\"p\">)</span>\n          <span class=\"p\">((</span><span class=\"nb\">eq?</span> <span class=\"nv\">m</span> <span class=\"ss\">'set-cdr!</span><span class=\"p\">)</span> <span class=\"nv\">set-y!</span><span class=\"p\">)</span>\n          <span class=\"p\">(</span><span class=\"k\">else</span> <span class=\"p\">(</span><span class=\"nf\">error</span> <span class=\"s\">\"Undefined \n                 operation: CONS\"</span> <span class=\"nv\">m</span><span class=\"p\">))))</span>\n  <span class=\"nv\">dispatch</span><span class=\"p\">)</span>\n<p><span class=\"p\">(</span><span class=\"k\">define</span> <span class=\"p\">(</span><span class=\"nb\">car</span> <span class=\"nv\">z</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nf\">z</span> <span class=\"ss\">'car</span><span class=\"p\">))</span><br />\n<span class=\"p\">(</span><span class=\"k\">define</span> <span class=\"p\">(</span><span class=\"nb\">cdr</span> <span class=\"nv\">z</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nf\">z</span> <span class=\"ss\">'cdr</span><span class=\"p\">))</span></p>\n<p><span class=\"p\">(</span><span class=\"k\">define</span> <span class=\"p\">(</span><span class=\"nb\">set-car!</span> <span class=\"nv\">z</span> <span class=\"nv\">new-value</span><span class=\"p\">)</span><br />\n<span class=\"p\">((</span><span class=\"nf\">z</span> <span class=\"ss\">'set-car!</span><span class=\"p\">)</span> <span class=\"nv\">new-value</span><span class=\"p\">)</span><br />\n<span class=\"nv\">z</span><span class=\"p\">)</span></p>\n<p><span class=\"p\">(</span><span class=\"k\">define</span> <span class=\"p\">(</span><span class=\"nb\">set-cdr!</span> <span class=\"nv\">z</span> <span class=\"nv\">new-value</span><span class=\"p\">)</span><br />\n<span class=\"p\">((</span><span class=\"nf\">z</span> <span class=\"ss\">'set-cdr!</span><span class=\"p\">)</span> <span class=\"nv\">new-value</span><span class=\"p\">)</span><br />\n<span class=\"nv\">z</span><span class=\"p\">)</span></p>\n<p></code></pre></div></div></p>\n<p><strong>Exercise 3.20</strong>: Draw environment diagrams to illustrate the \nevaluation of the sequence of expressions</p>\n<div class=\"language-scheme highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"p\">(</span><span class=\"k\">define</span> <span class=\"nv\">x</span> <span class=\"p\">(</span><span class=\"nb\">cons</span> <span class=\"mi\">1</span> <span class=\"mi\">2</span><span class=\"p\">))</span>\n<span class=\"p\">(</span><span class=\"k\">define</span> <span class=\"nv\">z</span> <span class=\"p\">(</span><span class=\"nb\">cons</span> <span class=\"nv\">x</span> <span class=\"nv\">x</span><span class=\"p\">))</span>\n<p><span class=\"p\">(</span><span class=\"nb\">set-car!</span> <span class=\"p\">(</span><span class=\"nb\">cdr</span> <span class=\"nv\">z</span><span class=\"p\">)</span> <span class=\"mi\">17</span><span class=\"p\">)</span></p>\n<p><span class=\"p\">(</span><span class=\"nb\">car</span> <span class=\"nv\">x</span><span class=\"p\">)</span><br />\n<span class=\"mi\">17</span><br />\n</code></pre></div></div></p>\n<p>using the procedural implementation of pairs given above.</p>\n<h3 id=\"分析\">分析</h3>\n<p>我先把答案放上来，来根据图分析。</p>\n<p>说明：</p>\n<p><img src=\"https://img.dazhuanlan.com/2019/11/28/5ddf6c10b758d.svg!v1\" alt=\"3.20\"></p>\n<p>根据上面的 mutable pair procedure 定义，和题目中的 expressions。\n在 global environment 里，会有这些 variables：</p>\n<ul>\n  <li>cons</li>\n  <li>car</li>\n  <li>cdr</li>\n  <li>set-car!</li>\n  <li>set-cdr!</li>\n  <li>x</li>\n  <li>z</li>\n</ul>\n<p>在图中可以看出，这些 variables 都指向了各自的 procedure。</p>\n<p>首先是</p>\n<div class=\"language-scheme highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"p\">(</span><span class=\"k\">define</span> <span class=\"nv\">x</span> <span class=\"p\">(</span><span class=\"nb\">cons</span> <span class=\"mi\">1</span> <span class=\"mi\">2</span><span class=\"p\">))</span>\n<span class=\"p\">(</span><span class=\"k\">define</span> <span class=\"nv\">z</span> <span class=\"p\">(</span><span class=\"nb\">cons</span> <span class=\"nv\">x</span> <span class=\"nv\">x</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>两行</p>\n<p><code class=\"highlighter-rouge\">(define x (cons 1 2))</code> 调用了 <code class=\"highlighter-rouge\">(cons 1 2)</code>，会生成一个 environment 叫做 E1，\nE1 指向了 <code class=\"highlighter-rouge\">cons</code> 这个 procedure 对象指定的 environment，对应于 “the frame has as its enclosing environment the environment part of the procedure object being applied.”。\nE1 的唯一 frame 里绑定了参数 x, y 到实参 1, 2。还有 E1 内部绑定的变量 <code class=\"highlighter-rouge\">set-x!</code>, <code class=\"highlighter-rouge\">set-y!</code>, <code class=\"highlighter-rouge\">dispatch</code>。</p>\n<p>因为 <code class=\"highlighter-rouge\">(cons x y)</code> 返回了 <code class=\"highlighter-rouge\">dispatch</code>，所以 x 指向了 <code class=\"highlighter-rouge\">dispatch</code> 这个 procedure，这个 procedure 对象指向了 E1 这个 environment，还有一个指针指向了 dispatch 实际的代码。</p>\n<p><code class=\"highlighter-rouge\">(define z (cons x x))</code> 的情况也比较相似。有一点特别的是，E2 中绑定的 x, y 是在 global env 中的 x。</p>\n<p>接着是 <code class=\"highlighter-rouge\">(set-car! (cdr z) 17)</code> 的调用，<code class=\"highlighter-rouge\">(set-car! (cdr z) 17)</code> 调用了 <code class=\"highlighter-rouge\">(cdr z)</code> 创建了 E3。\n因为 <code class=\"highlighter-rouge\">cdr</code> 属于 global env，所以 E3 指向了 global env。</p>\n<p><code class=\"highlighter-rouge\">(cdr z)</code> 接着调用是 <code class=\"highlighter-rouge\">(z 'cdr)</code> 创建了 E4。\n因为 z 指向的 procedure 所指向的 environment 是 E2，所以 E4 指向了 E2。</p>\n<p>因为 <code class=\"highlighter-rouge\">(z 'cdr)</code> = x，所以 <code class=\"highlighter-rouge\">(set-car! (cdr z) 17)</code> = <code class=\"highlighter-rouge\">(set-car! x 17)</code>。\n对 <code class=\"highlighter-rouge\">(set-car! x 17)</code> 调用创建的 E5，指向了 global env。</p>\n<p><code class=\"highlighter-rouge\">(set-car! x 17)</code> = <code class=\"highlighter-rouge\">((x 'set-car!) 17)</code>，创建了 E6。\n对 <code class=\"highlighter-rouge\">(x 'set-car!)</code> 的调用来说，因为 x 指向的 procedure 所指向的 environment 是 E1，所以 E6 指向了 E1。</p>\n<p>对 <code class=\"highlighter-rouge\">(set-x! 17)</code> 的调用，因为 <code class=\"highlighter-rouge\">set-x!</code> 变量所绑定的 environment 是 E1，所以 E7 也指向 E1。最后 E1 中的 x 修改成了 17。</p>\n<p>对 <code class=\"highlighter-rouge\">(car x)</code> 调用，创建了 E8。</p>\n<p>然后调用 <code class=\"highlighter-rouge\">(x 'car)</code>，创建了 E9，指向 E1，然后返回 E1 中的 x，也就是 17。</p>\n<h2 id=\"总结\">总结</h2>\n<p>这里只是非常简单的通过一道习题来讲解一下 Environment Model，也能看出这个设计的精巧。通过执行 procedure 创建一个 Environment 来维护变量的绑定。\n而且这些 Environment 是能受到内存管理的，不被引用就可以被回收。Environment 还有指向包含它的 Environment 指针，可以很方便的找到上级 Environment 中的变量。</p>","text":"&lt;p&gt;这是 sicp 第三章中的 The Environment Model of Evaluation 的总结和一道习题的回顾。&lt;/p&gt; 因为 procedure 在调用过程中会有参数的引入，嵌套的调用，define 变量的定义和作用域等。 如何安排这些...","link":"","photos":[],"count_time":{"symbolsCount":"3.5k","symbolsTime":"3 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#environment\"><span class=\"toc-text\">Environment</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#procedure\"><span class=\"toc-text\">Procedure</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#add-bindings\"><span class=\"toc-text\">add bindings</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#apply-procedure\"><span class=\"toc-text\">apply procedure</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#exercise-320\"><span class=\"toc-text\">Exercise 3.20</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%86%E6%9E%90\"><span class=\"toc-text\">分析</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">总结</span></a></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Lua","uid":"15b0cdc6d03f6c3f6bf8d3a7ff197317","slug":"zl/2016-01-01-185_[Lua","date":"2024-04-03T03:47:33.072Z","updated":"2024-04-03T03:47:33.072Z","comments":true,"path":"api/articles/zl/2016-01-01-185_[Lua.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":" &lt;h2 id=&quot;介绍&quot;&gt;介绍&lt;/h2&gt; 官网地址： http://www.lua.org/home.html Lua是脚本语言，可以自己运行，可以嵌入C语言运行，也可以把C语言嵌入Lua运行。 Lua全部都是用C语言实现的，可以到官网...","link":"","photos":[],"count_time":{"symbolsCount":981,"symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"lua __index和__newindex元方法","uid":"2de21734b2aaee59ca84e1dec23909a3","slug":"zl/2016-01-01-181_lua __index和__newindex元方法","date":"2024-04-03T03:47:33.069Z","updated":"2024-04-03T03:47:33.069Z","comments":true,"path":"api/articles/zl/2016-01-01-181_lua __index和__newindex元方法.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":" &lt;h1 id=&quot;__index&quot;&gt;__index&lt;/h1&gt; 当访问一个table的字段时，如果存在这个字段，则返回这个字段的值 如果没有这个字段，则会让解释器去查找__index元方法，如果存在此元方法，则会调用它，返回结果 如果没有...","link":"","photos":[],"count_time":{"symbolsCount":"2.5k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}