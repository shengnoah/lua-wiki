{"title":"Wireshark+Lua自动解析自定义协议数据报","uid":"6810eca09bcc54d978cf8538c2cb16d9","slug":"zl/2016-01-01-365_Wireshark+Lua自动解析自定义协议数据报","date":"2024-04-03T03:47:35.646Z","updated":"2024-04-03T03:47:35.647Z","comments":true,"path":"api/articles/zl/2016-01-01-365_Wireshark+Lua自动解析自定义协议数据报.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<ul id=\"markdown-toc\">\n  <li><a href=\"#自定义协议格式\" id=\"markdown-toc-自定义协议格式\">自定义协议格式</a></li>\n  <li><a href=\"#原始抓包结果\" id=\"markdown-toc-原始抓包结果\">原始抓包结果</a></li>\n  <li><a href=\"#编写lua脚本\" id=\"markdown-toc-编写lua脚本\">编写Lua脚本</a></li>\n  <li><a href=\"#在wireshark中加载lua脚本\" id=\"markdown-toc-在wireshark中加载lua脚本\">在Wireshark中加载Lua脚本</a></li>\n  <li><a href=\"#在wireshark中查看解析结果\" id=\"markdown-toc-在wireshark中查看解析结果\">在Wireshark中查看解析结果</a></li>\n  <li><a href=\"#参考文献\" id=\"markdown-toc-参考文献\">参考文献</a></li>\n</ul>\n<p>在平时的工作中，经常需要根据接口文档进行开发，在调试时一般都会借助WireShark抓包进行分析，但是当协议较为复杂时，需要根据字节数手动计算进行解析，费时费力。曾经打算自己写个简单的自定义协议解析工具，后来发现WireShark提供了Lua接口，可以通过Lua脚本根据协议格式自动对获取的数据报进行解析，本文将对此进行简要介绍。</p>\n<h2 id=\"自定义协议格式\">自定义协议格式</h2>\n<div class=\"language-c highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"cp\">#pragma pack(1)\n</span>\n<span class=\"k\">struct</span> <span class=\"n\">MsgHead</span> <span class=\"p\">&#123;</span>\n    <span class=\"kt\">int</span> <span class=\"n\">msgNo_</span><span class=\"p\">;</span>\n    <span class=\"kt\">unsigned</span> <span class=\"kt\">char</span> <span class=\"n\">msgType_</span><span class=\"p\">;</span>\n    <span class=\"kt\">unsigned</span> <span class=\"kt\">char</span> <span class=\"n\">subMsgType_</span><span class=\"p\">;</span>\n    <span class=\"kt\">short</span> <span class=\"n\">dataLen_</span><span class=\"p\">;</span>\n<span class=\"p\">&#125;;</span>\n<p><span class=\"k\">struct</span> <span class=\"n\">MsgStruct</span> <span class=\"p\">&#123;</span><br />\n<span class=\"n\">MsgHead</span> <span class=\"n\">msgHead_</span><span class=\"p\">;</span><br />\n<span class=\"kt\">unsigned</span> <span class=\"kt\">char</span> <span class=\"n\">data_</span><span class=\"p\">[</span><span class=\"n\">MaxDataSize</span><span class=\"p\">];</span><br />\n<span class=\"p\">&#125;;</span></p>\n<p><span class=\"cp\">#pragma pack()<br />\n</span></code></pre></div></div></p>\n<h2 id=\"原始抓包结果\">原始抓包结果</h2>\n<p><img src=\"https://AnonymousRookie.github.io/images/2018/10/201801004_01.png\" alt=\"https://AnonymousRookie.github.io/images/2018/10/201801004_01.png\"/></p>\n<h2 id=\"编写lua脚本\">编写Lua脚本</h2>\n<div class=\"language-lua highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">-- creates a Proto object, but doesn&#39;t register it yet</span>\n<span class=\"kd\">local</span> <span class=\"n\">test_proto</span> <span class=\"o\">=</span> <span class=\"n\">Proto</span><span class=\"p\">(</span><span class=\"s2\">&#34;test&#34;</span><span class=\"p\">,</span> <span class=\"s2\">&#34;Test Protocol&#34;</span><span class=\"p\">)</span>\n<p><span class=\"c1\">– a table of all of our Protocol's fields</span><br />\n<span class=\"kd\">local</span> <span class=\"n\">test_fields</span> <span class=\"o\">=</span><br />\n<span class=\"p\">&#123;</span><br />\n<span class=\"n\">msgNo</span> <span class=\"o\">=</span> <span class=\"n\">ProtoField</span><span class=\"p\">.</span><span class=\"n\">uint32</span><span class=\"p\">(</span><span class=\"s2\">&quot;test.msgNo&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;msgNo&quot;</span><span class=\"p\">,</span> <span class=\"n\">base</span><span class=\"p\">.</span><span class=\"n\">DEC</span><span class=\"p\">),</span><br />\n<span class=\"n\">msgType</span> <span class=\"o\">=</span> <span class=\"n\">ProtoField</span><span class=\"p\">.</span><span class=\"n\">uint8</span><span class=\"p\">(</span><span class=\"s2\">&quot;test.msgType&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;msgType&quot;</span><span class=\"p\">,</span> <span class=\"n\">base</span><span class=\"p\">.</span><span class=\"n\">HEX</span><span class=\"p\">),</span><br />\n<span class=\"n\">subMsgType</span> <span class=\"o\">=</span> <span class=\"n\">ProtoField</span><span class=\"p\">.</span><span class=\"n\">uint8</span><span class=\"p\">(</span><span class=\"s2\">&quot;test.subMsgType&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;subMsgType&quot;</span><span class=\"p\">,</span> <span class=\"n\">base</span><span class=\"p\">.</span><span class=\"n\">HEX</span><span class=\"p\">),</span><br />\n<span class=\"n\">dataLen</span> <span class=\"o\">=</span> <span class=\"n\">ProtoField</span><span class=\"p\">.</span><span class=\"n\">uint16</span><span class=\"p\">(</span><span class=\"s2\">&quot;test.dataLen&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;dataLen&quot;</span><span class=\"p\">,</span> <span class=\"n\">base</span><span class=\"p\">.</span><span class=\"n\">DEC</span><span class=\"p\">),</span><br />\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">ProtoField</span><span class=\"p\">.</span><span class=\"n\">bytes</span><span class=\"p\">(</span><span class=\"s2\">&quot;test.data&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;data&quot;</span><span class=\"p\">),</span><br />\n<span class=\"p\">&#125;</span></p>\n<p><span class=\"c1\">– register the ProtoFields</span><br />\n<span class=\"n\">test_proto</span><span class=\"p\">.</span><span class=\"n\">fields</span> <span class=\"o\">=</span> <span class=\"n\">test_fields</span></p>\n<p><span class=\"c1\">– a table of our default settings - these can be changed by changing</span><br />\n<span class=\"c1\">– the preferences through the GUI or command-line; the Lua-side of that</span><br />\n<span class=\"c1\">– preference handling is at the end of this script file</span><br />\n<span class=\"kd\">local</span> <span class=\"n\">default_settings</span> <span class=\"o\">=</span><br />\n<span class=\"p\">&#123;</span><br />\n<span class=\"n\">enabled</span>      <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"p\">,</span> <span class=\"c1\">– whether this dissector is enabled or not</span><br />\n<span class=\"n\">port</span>         <span class=\"o\">=</span> <span class=\"mi\">5001</span><span class=\"p\">,</span> <span class=\"c1\">– default TCP port number for Test</span><br />\n<span class=\"p\">&#125;</span></p>\n<p><span class=\"c1\">--------------------------------------------------------------------------------</span><br />\n<span class=\"c1\">– The following creates the callback function for the dissector.</span><br />\n<span class=\"c1\">– It's the same as doing &quot;test_proto.dissector = function (tvbuf,pkt,root)&quot;</span><br />\n<span class=\"c1\">– The 'tvbuf' is a Tvb object, 'pktinfo' is a Pinfo object, and 'root' is a TreeItem object.</span><br />\n<span class=\"c1\">– Whenever Wireshark dissects a packet that our Proto is hooked into, it will call</span><br />\n<span class=\"c1\">– this function and pass it these arguments for the packet it's dissecting.</span><br />\n<span class=\"k\">function</span> <span class=\"nc\">test_proto</span><span class=\"p\">.</span><span class=\"nf\">dissector</span><span class=\"p\">(</span><span class=\"n\">tvbuf</span><span class=\"p\">,</span> <span class=\"n\">pktinfo</span><span class=\"p\">,</span> <span class=\"n\">root</span><span class=\"p\">)</span></p>\n<pre><code>&lt;span class=&quot;c1&quot;&gt;-- set the protocol column to show our protocol name&lt;/span&gt;\n&lt;span class=&quot;n&quot;&gt;pktinfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cols&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;protocol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;#34;Test&amp;#34;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;\n\n&lt;span class=&quot;c1&quot;&gt;-- get the length of the packet buffer (Tvb).&lt;/span&gt;\n&lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pktlen&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tvbuf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;\n\n&lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;\n\n&lt;span class=&quot;c1&quot;&gt;-- We start by adding our protocol to the dissection display tree.&lt;/span&gt;\n&lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tree&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test_proto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tvbuf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pktlen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;\n\n&lt;span class=&quot;n&quot;&gt;tree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test_fields&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msgNo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tvbuf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;\n&lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;\n&lt;span class=&quot;n&quot;&gt;tree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test_fields&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msgType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tvbuf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;\n&lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;\n&lt;span class=&quot;n&quot;&gt;tree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test_fields&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subMsgType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tvbuf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;\n&lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;\n&lt;span class=&quot;n&quot;&gt;tree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test_fields&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dataLen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tvbuf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;\n&lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;\n&lt;span class=&quot;n&quot;&gt;tree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test_fields&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tvbuf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pktlen&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;\n</code></pre>\n<p><span class=\"k\">end</span></p>\n<p><span class=\"c1\">--------------------------------------------------------------------------------</span><br />\n<span class=\"c1\">– We want to have our protocol dissection invoked for a specific TCP port,</span><br />\n<span class=\"c1\">– so get the TCP dissector table and add our protocol to it.</span><br />\n<span class=\"kd\">local</span> <span class=\"k\">function</span> <span class=\"nf\">enableDissector</span><span class=\"p\">()</span><br />\n<span class=\"c1\">– using DissectorTable:set() removes existing dissector(s), whereas the</span><br />\n<span class=\"c1\">– DissectorTable:add() one adds ours before any existing ones, but</span><br />\n<span class=\"c1\">– leaves the other ones alone, which is better</span><br />\n<span class=\"n\">DissectorTable</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;tcp.port&quot;</span><span class=\"p\">):</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">default_settings</span><span class=\"p\">.</span><span class=\"n\">port</span><span class=\"p\">,</span> <span class=\"n\">test_proto</span><span class=\"p\">)</span><br />\n<span class=\"k\">end</span></p>\n<p><span class=\"kd\">local</span> <span class=\"k\">function</span> <span class=\"nf\">disableDissector</span><span class=\"p\">()</span><br />\n<span class=\"n\">DissectorTable</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;tcp.port&quot;</span><span class=\"p\">):</span><span class=\"n\">remove</span><span class=\"p\">(</span><span class=\"n\">default_settings</span><span class=\"p\">.</span><span class=\"n\">port</span><span class=\"p\">,</span> <span class=\"n\">test_proto</span><span class=\"p\">)</span><br />\n<span class=\"k\">end</span></p>\n<p><span class=\"c1\">– call it now</span><br />\n<span class=\"n\">enableDissector</span><span class=\"p\">()</span><br />\n</code></pre></div></div></p>\n<p>完整程序详见：<a href=\"https://github.com/AnonymousRookie/useful-tools/tree/master/wireshark_protocol_dissector/\">https://github.com/AnonymousRookie/useful-tools/tree/master/wireshark_protocol_dissector</a></p>\n<h2 id=\"在wireshark中加载lua脚本\">在Wireshark中加载Lua脚本</h2>\n<p>将protocol_dissector_example.lua拷贝到Wireshark的安装目录，找到init.lua，在该脚本结尾加上：</p>\n<div class=\"language-lua highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">dofile</span><span class=\"p\">(</span><span class=\"n\">DATA_DIR</span><span class=\"o\">..</span><span class=\"s2\">&#34;protocol_dissector_example.lua&#34;</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>重启Wireshark，点击按钮”表达式…/(Expression…)”，在搜索框中输入”TEST”，发现”Test Protocol”，说明脚本已经加载成功。</p>\n<p><img src=\"https://AnonymousRookie.github.io/images/2018/10/201801004_02.png\" alt=\"https://AnonymousRookie.github.io/images/2018/10/201801004_02.png\"/></p>\n<h2 id=\"在wireshark中查看解析结果\">在Wireshark中查看解析结果</h2>\n<p>现在就可以根据协议格式进行筛选了，并且获取到的数据报已经根据定义的格式自动进行了解析。</p>\n<p><img src=\"https://AnonymousRookie.github.io/images/2018/10/201801004_03.png\" alt=\"https://AnonymousRookie.github.io/images/2018/10/201801004_03.png\"/></p>\n<h2 id=\"参考文献\">参考文献</h2>\n<ul>\n  <li>[1] https://wiki.wireshark.org/Lua/Examples</li>\n</ul>","text":" 自定义协议格式 原始抓包结果 编写Lua脚本 在Wireshark中加载Lua脚本 在Wireshark中查看解析结果 参考文献 在平时的工作中，经常需要根据接口文档进行开发，在调试时一般都会借助WireShark抓包进行分析，但是当协议较为复杂时，需要根据字节数手动计算进行解...","link":"","photos":[],"count_time":{"symbolsCount":"9.9k","symbolsTime":"9 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%87%AA%E5%AE%9A%E4%B9%89%E5%8D%8F%E8%AE%AE%E6%A0%BC%E5%BC%8F\"><span class=\"toc-text\">自定义协议格式</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8E%9F%E5%A7%8B%E6%8A%93%E5%8C%85%E7%BB%93%E6%9E%9C\"><span class=\"toc-text\">原始抓包结果</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%BC%96%E5%86%99lua%E8%84%9A%E6%9C%AC\"><span class=\"toc-text\">编写Lua脚本</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%9C%A8wireshark%E4%B8%AD%E5%8A%A0%E8%BD%BDlua%E8%84%9A%E6%9C%AC\"><span class=\"toc-text\">在Wireshark中加载Lua脚本</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%9C%A8wireshark%E4%B8%AD%E6%9F%A5%E7%9C%8B%E8%A7%A3%E6%9E%90%E7%BB%93%E6%9E%9C\"><span class=\"toc-text\">在Wireshark中查看解析结果</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8F%82%E8%80%83%E6%96%87%E7%8C%AE\"><span class=\"toc-text\">参考文献</span></a></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"在Lua中调用C函数","uid":"e915da81aa7864ddfb697e914e30f001","slug":"zl/2016-01-01-367_在Lua中调用C函数","date":"2024-04-03T03:47:35.647Z","updated":"2024-04-03T03:47:35.648Z","comments":true,"path":"api/articles/zl/2016-01-01-367_在Lua中调用C函数.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"Lua调用C语言中的函数是通过栈来进行参数传递的，这与大部分编程语言的内部函数调用的实现一致。我们先实现如下C代码12345678910111213141516171819202122232425262728293031323334353637383940414243444546...","link":"","photos":[],"count_time":{"symbolsCount":"2.9k","symbolsTime":"3 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"OpenResty Lua 的使用 (一) 环境搭建","uid":"e7caaf0563bdeb3b9918a8bc0871fd9a","slug":"zl/2016-01-01-364_OpenResty Lua 的使用 (一) 环境搭建","date":"2024-04-03T03:47:35.645Z","updated":"2024-04-03T03:47:35.646Z","comments":true,"path":"api/articles/zl/2016-01-01-364_OpenResty Lua 的使用 (一) 环境搭建.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"OpenResty Lua 的使用 (一) 环境搭建 前言 开始学习Openresty Lua的使用,顺便也熟悉了下Nginx。 一、准备 Linux环境，我这里是在虚拟机安装的CentOS 7。 Openresty lua 安装包。 二、安装 安装 wget 命令用以下载使用，...","link":"","photos":[],"count_time":{"symbolsCount":"7.6k","symbolsTime":"7 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}