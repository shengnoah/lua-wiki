{"title":"安卓cocos2d游戏Lua热更新的一次破解","uid":"5960413320ed22247dca54be380e8d4c","slug":"zl/2016-01-01-32_安卓cocos2d游戏Lua热更新的一次破解","date":"2024-04-03T03:47:35.608Z","updated":"2024-04-03T03:47:35.608Z","comments":true,"path":"api/articles/zl/2016-01-01-32_安卓cocos2d游戏Lua热更新的一次破解.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<ul id=\"markdown-toc\">\n  <li><a href=\"#lua热更新\" id=\"markdown-toc-lua热更新\">lua热更新</a>    <ul>\n      <li><a href=\"#lualuacluajit三种文件的关系\" id=\"markdown-toc-lualuacluajit三种文件的关系\">lua、luac、luaJIT三种文件的关系</a></li>\n      <li><a href=\"#逆向\" id=\"markdown-toc-逆向\">逆向</a>        <ul>\n          <li><a href=\"#1-解压apk\" id=\"markdown-toc-1-解压apk\">1. 解压apk</a>            <ul>\n              <li><a href=\"#2-反编译工具\" id=\"markdown-toc-2-反编译工具\">2. 反编译工具</a></li>\n              <li><a href=\"#3分析待破解文件\" id=\"markdown-toc-3分析待破解文件\">3.分析待破解文件</a></li>\n            </ul>\n          </li>\n          <li><a href=\"#4逆向分析\" id=\"markdown-toc-4逆向分析\">4.逆向分析</a></li>\n          <li><a href=\"#5解密文件\" id=\"markdown-toc-5解密文件\">5.解密文件</a>            <ul>\n              <li><a href=\"#1-解密lua文件\" id=\"markdown-toc-1-解密lua文件\">1. 解密lua文件</a></li>\n              <li><a href=\"#2-解密package包\" id=\"markdown-toc-2-解密package包\">2. 解密package包</a></li>\n            </ul>\n          </li>\n        </ul>\n      </li>\n      <li><a href=\"#小结\" id=\"markdown-toc-小结\">小结</a></li>\n    </ul>\n  </li>\n</ul>\n<p>   \n很多游戏和软件都是用了lua热更新技术，以前对lua热更新不太熟悉，前段时间刚好帮同事个小忙就研究了一下，很多都是比较浅显，有错误还要读者指出。lua作为热更新包还是有很多优势的，首先lua性能算是比较高的，虽然比着C的性能还差一些，但是相当不错。其次lua比较好写，对于迭代比较高的一些游戏业务或者其他需要反复开发的业务都很适合。另外lua很容易内嵌到C语言中，简直是无缝结合，所以很多厂商用lua脚本来写那些需要快速迭代的业务。</p>\n<h2 id=\"lualuacluajit三种文件的关系\">lua、luac、luaJIT三种文件的关系</h2>\n<p>   \n基于lua的更新包一般有三种文件：lua、luac、luaJIT。lua是明文代码，直接用记事本就能打开；luac是lua编译后的字节码，文件头为</p>\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>0x1B 0x4C 0x75 0x61 0x51\n</code></pre></div></div>\n<p>   \nlua虚拟机能够直接解析lua和luac脚本文件；而luaJIT是另一个lua的实现版本，JIT是指Just-In-Time(即时解析运行)，luaJIT比lua和luac更加高效，文件头是</p>\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>0x1B 0x4C 0x4A。 \n</code></pre></div></div>\n<p><img src=\"https://img.dazhuanlan.com/2019/11/28/5ddf730c1c278.jpg\" alt=\"字节码标识\"/></p>\n<p>   \n一般情况加，厂商是不会直接来把lua脚本明文加载到apk包内的，因为apk包很容易解开拿到lua明文。厂商一般会使用三种方式来加密lua脚本</p>\n<ul>\n  <li>加密lua脚本，在加载lua脚本前来解密lua脚本，最后运行lua脚本。</li>\n  <li>首先编译lua脚本生成luac字节码，然后再加密字节码，最后在加载前解密然后加载字节码。</li>\n  <li>最后是修改lua虚拟机中的opcode的顺序，有点像重新映射lua虚拟机执行指令。</li>\n</ul>\n<p>   \n好啦！基本层面介绍完开始实战。首先拿游戏开刀因为很多游戏都是用cocos2d开发的，cocos2d自带lua接口方便开发，所以很多游戏的业务逻辑都是在lua脚本里面，所以第一时间拿到lua脚本基本就是成功了一大半。</p>\n<h2 id=\"逆向\">逆向</h2>\n<h3 id=\"1-解压apk\">1. 解压apk</h3>\n<p>   \n下载待解密apk包，具体哪款我就不具体指出了，简单粗暴把apk包用解压工具直接解压，一般情况下会得到文件夹结构</p>\n<p><img src=\"https://img.dazhuanlan.com/2019/11/28/5ddf730d569ab.jpg\" alt=\"文件夹结构\"/></p>\n<p>一般lib目录里面是存放的打包的整个游戏的动态库，如图所示：</p>\n<p><img src=\"https://img.dazhuanlan.com/2019/11/28/5ddf730eb0aac.jpg\" alt=\"lua库\"/></p>\n<p>下一步就要对这个动态库进行挖矿了，里面有所有想要的东西。</p>\n<h4 id=\"2-反编译工具\">2. 反编译工具</h4>\n<p>   \n反编译工具还是挺多的，我使用的IDAQ这个工具，很好用推荐。直接可以将静态库和动态库进行反编译，得到内部各个段的数据，同时IDAQ工具可以将反编译的汇编代码逆编译到C语言，虽然只是部分近似C语言代码，但是对于逆向已经是非常完美的工具。</p>\n<ol>\n  <li>\n    <p>对于找到的lua动态库进行反编译。使用这个工具是很简单的。教程不细说了，google一下。反编译后的汇编界面如下图所示：</p>\n<pre><code>&lt;p&gt;&lt;img src=&quot;https://img.dazhuanlan.com/2019/11/28/5ddf730fcf9ab.jpg&quot; alt=&quot;反编译汇编区&quot;/&gt;&lt;/p&gt;\n</code></pre>\n  </li>\n</ol>\n<h4 id=\"3分析待破解文件\">3.分析待破解文件</h4>\n<p>   \n在apk的解压包内开始找apk可能加载的lua文件。一般apk的文件会在assets目录下，尽情的找吧！首先找到了一些.lua后缀的文件，很明显这可能是主要的lua程序入口。</p>\n<p><img src=\"https://img.dazhuanlan.com/2019/11/28/5ddf73107dda8.jpg\" alt=\"lua\"/></p>\n<p>继续翻找又找到了一些package包，看起来很想游戏的加载包。</p>\n<p><img src=\"https://img.dazhuanlan.com/2019/11/28/5ddf731155938.jpg\" alt=\"package包\"/></p>\n<p>首先我们尝试打开.lua文件。</p>\n<p><img src=\"https://img.dazhuanlan.com/2019/11/28/5ddf731268d6b.jpg\" alt=\"lua包\"/></p>\n<p>不出所料加密了，很沮丧，没事加密了才有挑战。我们尝试打开package包看看，</p>\n<p><img src=\"https://img.dazhuanlan.com/2019/11/28/5ddf731406310.jpg\" alt=\"pakeage\"/></p>\n<p>同样加密了，但是我们对比了多个package包，发现首字母都是]6这两个字符，这说明有可能说明未加密的数据前面是有一个固定的头的，这让我想起了压缩包格式，常见的zip，tar，tar.gz,rar等压缩包其实都有固定的标识。当然很多厂商也确实会把文件先打成压缩包，毕竟会节省一部分空间。现在就比较尴尬了。我们是不知道这个文件是用的什么算法加密的，秘钥也不知道。我们该想办法得到加密方式和秘钥。</p>\n<h3 id=\"4逆向分析\">4.逆向分析</h3>\n<p>   \n前面讲过，lua加载无外乎哪几种方式，但是不管什么方式最后在运行时都要lua代码或者字节码。所以我们要想办法找到解密文件的地方。</p>\n<p>首先我们要了解cocos2d引擎加载lua脚本的过程，这样我们才能顺着整个路径走。google到cocos启动的入口函数和普通常规代码在AppDelegate.cpp文件下如下：</p>\n<div class=\"language-c++ highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">bool</span> <span class=\"n\">AppDelegate</span><span class=\"o\">::</span><span class=\"n\">applicationDidFinishLaunching</span><span class=\"p\">()</span>\n<span class=\"p\">&#123;</span>\n    <span class=\"c1\">// set default FPS\n</span>    <span class=\"n\">Director</span><span class=\"o\">::</span><span class=\"n\">getInstance</span><span class=\"p\">()</span><span class=\"o\">-&gt;</span><span class=\"n\">setAnimationInterval</span><span class=\"p\">(</span><span class=\"mf\">1.0</span> <span class=\"o\">/</span> <span class=\"mf\">60.0</span><span class=\"n\">f</span><span class=\"p\">);</span>\n<pre><code>&lt;span class=&quot;c1&quot;&gt;// register lua module\n</code></pre>\n<p></span>    <span class=\"k\">auto</span> <span class=\"n\">engine</span> <span class=\"o\">=</span> <span class=\"n\">LuaEngine</span><span class=\"o\">::</span><span class=\"n\">getInstance</span><span class=\"p\">();</span><br />\n<span class=\"n\">ScriptEngineManager</span><span class=\"o\">::</span><span class=\"n\">getInstance</span><span class=\"p\">()</span><span class=\"o\">-&gt;</span><span class=\"n\">setScriptEngine</span><span class=\"p\">(</span><span class=\"n\">engine</span><span class=\"p\">);</span><br />\n<span class=\"n\">lua_State</span><span class=\"o\">*</span> <span class=\"n\">L</span> <span class=\"o\">=</span> <span class=\"n\">engine</span><span class=\"o\">-&gt;</span><span class=\"n\">getLuaStack</span><span class=\"p\">()</span><span class=\"o\">-&gt;</span><span class=\"n\">getLuaState</span><span class=\"p\">();</span><br />\n<span class=\"n\">lua_module_register</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">);</span></p>\n<pre><code>&lt;span class=&quot;n&quot;&gt;register_all_packages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;\n\n&lt;span class=&quot;n&quot;&gt;LuaStack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stack&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;engine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getLuaStack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;\n&lt;span class=&quot;n&quot;&gt;stack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setXXTEAKeyAndSign&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#34;2dxLua&amp;#34;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strlen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#34;2dxLua&amp;#34;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#34;XXTEA&amp;#34;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strlen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#34;XXTEA&amp;#34;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;\n\n&lt;span class=&quot;c1&quot;&gt;//register custom function\n</code></pre>\n<p></span>    <span class=\"c1\">//LuaStack* stack = engine-&gt;getLuaStack();<br />\n</span>    <span class=\"c1\">//register_custom_function(stack-&gt;getLuaState());<br />\n</span><br />\n<span class=\"cp\">#if (COCOS2D_DEBUG &gt; 0) &amp;&amp; (CC_CODE_IDE_DEBUG_SUPPORT &gt; 0)<br />\n</span>    <span class=\"c1\">// NOTE:Please don't remove this call if you want to debug with Cocos Code IDE<br />\n</span>    <span class=\"k\">auto</span> <span class=\"n\">runtimeEngine</span> <span class=\"o\">=</span> <span class=\"n\">RuntimeEngine</span><span class=\"o\">::</span><span class=\"n\">getInstance</span><span class=\"p\">();</span><br />\n<span class=\"n\">runtimeEngine</span><span class=\"o\">-&gt;</span><span class=\"n\">addRuntime</span><span class=\"p\">(</span><span class=\"n\">RuntimeLuaImpl</span><span class=\"o\">::</span><span class=\"n\">create</span><span class=\"p\">(),</span> <span class=\"n\">kRuntimeEngineLua</span><span class=\"p\">);</span><br />\n<span class=\"n\">runtimeEngine</span><span class=\"o\">-&gt;</span><span class=\"n\">start</span><span class=\"p\">();</span><br />\n<span class=\"cp\">#else<br />\n</span><span class=\"c1\">//默认调用src/main.lua代码<br />\n</span>    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">engine</span><span class=\"o\">-&gt;</span><span class=\"n\">executeScriptFile</span><span class=\"p\">(</span><span class=\"s\">&quot;src/main.lua&quot;</span><span class=\"p\">))</span><br />\n<span class=\"p\">{</span><br />\n<span class=\"k\">return</span> <span class=\"nb\">false</span><span class=\"p\">;</span><br />\n<span class=\"p\">}</span><br />\n<span class=\"cp\">#endif<br />\n</span><br />\n<span class=\"k\">return</span> <span class=\"nb\">true</span><span class=\"p\">;</span><br />\n<span class=\"p\">}</span><br />\n</code></pre></div></div></p>\n<p>逻辑通熟易懂，可以看到入口函数applicationDidFinishLaunching                                                                                    中完成初始化lua虚拟机完成后，然后调用了main.lua进入业务逻辑。所以可以顺着这条路走下去。\n在IDAQ的函数栏查找applicationDidFinishLaunching函数。然后反编译生成代码。</p>\n<p><img src=\"https://img.dazhuanlan.com/2019/11/28/5ddf73151d24d.jpg\" alt=\"反编译\"/></p>\n<p>好了就要按着耐心查找入口代码了，先分析MainManagerCpp::setupLuaBinding(v13, v11);这句话还是在初始化lua引擎的工作，说明加载理论上用在在这句话后面，好吧小哥开始找吧！最终找到了这个函数：这个是设置秘钥的函数，后面的长字符串就是秘钥。</p>\n<p><img src=\"https://img.dazhuanlan.com/2019/11/28/5ddf73163b096.jpg\" alt=\"\"/></p>\n<p>有了秘钥肯定有地方调用解密，好吧，继续查找发现了这个函数</p>\n<p><img src=\"https://img.dazhuanlan.com/2019/11/28/5ddf7317191d8.jpg\" alt=\"\"/></p>\n<p>继续点击进去发现了这个关键字rc4：</p>\n<p><img src=\"https://img.dazhuanlan.com/2019/11/28/5ddf7318240fa.jpg\" alt=\"\"/></p>\n<p>到这地方基本就很清楚了，该代码在加载lua文件的时候先解密了文件，使用了rc4加解密算法，秘钥是上面的字符串，是不是很激动。</p>\n<h3 id=\"5解密文件\">5.解密文件</h3>\n<h4 id=\"1-解密lua文件\">1. 解密lua文件</h4>\n<p>有了秘钥和加密方式，那就开始左手解密，<a href=\"http://blog.csdn.net/lc_910927/article/details/37599161\">rc4流加密算法</a>介绍可以看一下，秘钥长度可变，上面获取的秘钥是128位的秘钥。rc4的加解密算法网上可以拿到实现，rc4加密算法，加密一次是加密，再次加密就是解密，很有意思，拿到算法实现直接写一个加解密工具。对上面的文件进行解密。获取到main.lua文件解密后的代码截图：</p>\n<p><img src=\"https://img.dazhuanlan.com/2019/11/28/5ddf73193dcaa.jpg\" alt=\"解密文件\"/></p>\n<p>有没有很激动。</p>\n<h4 id=\"2-解密package包\">2. 解密package包</h4>\n<p>同样对pakeage包进行解密，获得原始二进制文件，打开文件还是乱码，如下图：</p>\n<p><img src=\"https://img.dazhuanlan.com/2019/11/28/5ddf731a71172.jpg\" alt=\"\"/></p>\n<p>但是注意箭头处的两个字符PK这两个字符，ASCII字符值为0x50,0x4B,通过查询文件压缩头发现zip压缩的头表示符为0x04034b50，<a href=\"http://blog.sina.com.cn/s/blog_4c3591bd0100zzm6.html\">zip文件格式</a>，随即确定为zip压缩格式，直接按zip文件解压得到了一下文件结构：</p>\n<p><img src=\"https://img.dazhuanlan.com/2019/11/28/5ddf731b6a486.jpg\" alt=\"\"/></p>\n<p>作为lua文件直接打开得到包内核心lua业务代码，转账银行代码：</p>\n<p><img src=\"https://img.dazhuanlan.com/2019/11/28/5ddf731c54609.jpg\" alt=\"\"/></p>\n<p>好了至此，全部文件解密，可以一窥核心逻辑代码，想怎么修改就怎么修改。</p>\n<h2 id=\"小结\">小结</h2>\n<p>本文详细介绍了如果逆向一个基于lua热更新游戏的包，获取了整个解密后的lua代码。如果你收本文启发可以尝试破解其他游戏，关闭碰撞检测来个子弹穿墙没问题，哈哈，切记任何破解违法行为与本作者无关，只供交流学习。</p>","text":" lua热更新 lua、luac、luaJIT三种文件的关系 逆向 1. 解压apk 2. 反编译工具 3.分析待破解文件 4.逆向分析 5.解密文件 1. 解密lua文件 2. 解密package包 小结 很多游戏和软件都是用了lua热更新技术，以前对lua热更新不太熟悉，前段...","link":"","photos":[],"count_time":{"symbolsCount":"5.5k","symbolsTime":"5 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#lualuacluajit%E4%B8%89%E7%A7%8D%E6%96%87%E4%BB%B6%E7%9A%84%E5%85%B3%E7%B3%BB\"><span class=\"toc-text\">lua、luac、luaJIT三种文件的关系</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%80%86%E5%90%91\"><span class=\"toc-text\">逆向</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E8%A7%A3%E5%8E%8Bapk\"><span class=\"toc-text\">1. 解压apk</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-%E5%8F%8D%E7%BC%96%E8%AF%91%E5%B7%A5%E5%85%B7\"><span class=\"toc-text\">2. 反编译工具</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3%E5%88%86%E6%9E%90%E5%BE%85%E7%A0%B4%E8%A7%A3%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">3.分析待破解文件</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4%E9%80%86%E5%90%91%E5%88%86%E6%9E%90\"><span class=\"toc-text\">4.逆向分析</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5%E8%A7%A3%E5%AF%86%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">5.解密文件</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-%E8%A7%A3%E5%AF%86lua%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">1. 解密lua文件</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-%E8%A7%A3%E5%AF%86package%E5%8C%85\"><span class=\"toc-text\">2. 解密package包</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%B0%8F%E7%BB%93\"><span class=\"toc-text\">小结</span></a></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Redisson lua脚本执行踩坑之神秘的引号","uid":"7c7d9abb8dae7e75ae4567ba056992f2","slug":"zl/2016-01-01-331_Redisson lua脚本执行踩坑之神秘的引号","date":"2024-04-03T03:47:35.609Z","updated":"2024-04-03T03:47:35.610Z","comments":true,"path":"api/articles/zl/2016-01-01-331_Redisson lua脚本执行踩坑之神秘的引号.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"最近项目需求，在redis中需要执行批量删除指定key，并且要支持原子操作，那么当然只有自己写lua脚本了。 项目中使用的是redisson作为redis连接工具，首先先定义好lua脚本： 1234private static final String BATCH_DEL_SCR...","link":"","photos":[],"count_time":{"symbolsCount":"1.3k","symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Lua学习笔记","uid":"d112c00bf05f368c0020529ea6c8efaf","slug":"zl/2016-01-01-330_Lua学习笔记","date":"2024-04-03T03:47:35.608Z","updated":"2024-04-03T03:47:35.609Z","comments":true,"path":"api/articles/zl/2016-01-01-330_Lua学习笔记.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"基础函数assertassert(v[,message])如果其参数v的值为假（nil或false），它就调用error；否则，返回所有的参数。在错误情况时，message指那个错误对象；如果不提供这个参数，参数默认为”assertionfailed!” getmetatable...","link":"","photos":[],"count_time":{"symbolsCount":"4.4k","symbolsTime":"4 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}