{"title":"lua版本变化","uid":"4a210a155a77b4a011d630ddb5275315","slug":"zl/2016-01-01-295_lua版本变化","date":"2024-04-03T03:47:33.153Z","updated":"2024-04-03T03:47:33.153Z","comments":true,"path":"api/articles/zl/2016-01-01-295_lua版本变化.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<h4 id=\"从-Lua-5-1-迁移到-5-2\"><a href=\"#从-Lua-5-1-迁移到-5-2\" class=\"headerlink\" title=\"从 Lua 5.1 迁移到 5.2\"></a>从 Lua 5.1 迁移到 5.2</h4><ul>\n<li><p>5.2中抛弃module，建议使用require进行加载， 可能是考虑到Module定义对全局表的污染</p>\n</li>\n<li><p>在5.1版本，可以理解为每个<a href=\"https://www.lua.org/pil/1.1.html\" target=\"_blank\" rel=\"noopener noreferrer\">chunk</a>都具有自己的环境表，然后通过setfenv/getfenv进行设置和操作。Lua5.2开始取消了环境表的概念，取消setfenv/getfenv方法，增加了_Env来管理。</p>\n</li>\n<li><p>_G 和 _Env*</p>\n</li>\n</ul>\n<p>_G 是放在注册表LUA_RIDX_GLOBALS中，初始化时核心的库都放在_G中；_Env 是chunk闭包的第一个upvalue，load时默认为_G, 然后后面定义的变量都会在编译时加上_ENV.前缀，以此传递下去，当然也可以修改</p>\n<ul>\n<li>全局注册表</li>\n</ul>\n<p>在5.2中已经移除了LUA_GLOBALSINDEX,去而带之的是注册表。5.2以后中上面两个函数都是使用的注册标中的LUA_RIDX_GLOBAS伪索引（索引注册表的全局环境）。处理 lua和C交互API的时候需要注意</p>\n<ul>\n<li>luaL_register</li>\n</ul>\n<p>Lua5.2 以后取消了这个接口，不过可以通过luaL_setfunc方法看来实现</p>\n<p>#undef luaL_register #define luaL_register(L,n,f)      { if ((n) == NULL) luaL_setfuncs(L,f,0); else luaL_newlib(L,f); } #endif</p>\n<h4 id=\"从-Lua-5-2-迁移到-5-3\"><a href=\"#从-Lua-5-2-迁移到-5-3\" class=\"headerlink\" title=\"从 Lua 5.2 迁移到 5.3\"></a>从 Lua 5.2 迁移到 5.3</h4><ul>\n<li>整数 (默认 64 位)，32 位整数的官方支持</li>\n<li>位操作符</li>\n<li>基本的 utf-8 支持</li>\n<li>值的打包及解包函数</li>\n<li>整数除法</li>\n<li>ipairs 以及表处理库都会考虑元方法</li>\n<li>新函数 string.pack</li>\n<li>新函数 string.unpack</li>\n<li>新函数 string.packsize</li>\n</ul>","text":"从 Lua 5.1 迁移到 5.2 5.2中抛弃module，建议使用require进行加载， 可能是考虑到Module定义对全局表的污染 在5.1版本，可以理解为每个chunk都具有自己的环境表，然后通过setfenv/getfenv进行设置和操作。Lua5.2开始取消了环境表...","link":"","photos":[],"count_time":{"symbolsCount":766,"symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%BB%8E-Lua-5-1-%E8%BF%81%E7%A7%BB%E5%88%B0-5-2\"><span class=\"toc-text\">从 Lua 5.1 迁移到 5.2</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%BB%8E-Lua-5-2-%E8%BF%81%E7%A7%BB%E5%88%B0-5-3\"><span class=\"toc-text\">从 Lua 5.2 迁移到 5.3</span></a></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"2.4lua控制结构","uid":"05f95be9f92ea29db6f3eec91cdcb6f0","slug":"zl/2016-01-01-29_2.4 lua 控制结构","date":"2024-04-03T03:47:33.154Z","updated":"2024-04-03T03:47:33.154Z","comments":true,"path":"api/articles/zl/2016-01-01-29_2.4 lua 控制结构.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"流程控制语句对于程序设计来说特别重要，它可以用于设定程序的逻辑结构。一般需要与条件判断语句结合使用。Lua 语言提供的控制结构有 if，while，repeat，for，并提供 break 关键字来满足更丰富的需求。 if/elseif-else 是我们熟知的一种控制结构。Lua...","link":"","photos":[],"count_time":{"symbolsCount":"3.7k","symbolsTime":"3 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"lua代码风格","uid":"6645762dc9ef363b033420ebea534803","slug":"zl/2016-01-01-296_lua代码风格","date":"2024-04-03T03:47:33.153Z","updated":"2024-04-03T03:47:33.153Z","comments":true,"path":"api/articles/zl/2016-01-01-296_lua代码风格.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":" &lt;/header&gt; &lt;div class=&quot;entry&quot;&gt; &lt;h1 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; tit...","link":"","photos":[],"count_time":{"symbolsCount":"7.4k","symbolsTime":"7 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}