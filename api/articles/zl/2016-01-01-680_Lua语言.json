{"title":"Lua语言","uid":"f2ad1fdbae5984109e0546da0f31ad6f","slug":"zl/2016-01-01-680_Lua语言","date":"2024-04-03T03:47:35.913Z","updated":"2024-04-03T03:47:35.913Z","comments":true,"path":"api/articles/zl/2016-01-01-680_Lua语言.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<div class=\"page-header\">\n</div>\n<div class=\"row-fluid\">\n  <div class=\"span12\">  \n    <div id=\"article\">\n    <h2 id=\"1-数据类型\">1. 数据类型</h2>\n<table>\n  <thead>\n    <tr>\n      <th>数据类型</th>\n      <th>描述</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>nil</td>\n      <td>只有值为 nil 属于该类，表示一个无效值（在条件表达式中相当于 false）</td>\n    </tr>\n    <tr>\n      <td>boolean</td>\n      <td>false or true</td>\n    </tr>\n    <tr>\n      <td>number</td>\n      <td>双精度类型的实浮点数</td>\n    </tr>\n    <tr>\n      <td>string</td>\n      <td>双引号或单引号表示</td>\n    </tr>\n    <tr>\n      <td>function</td>\n      <td>由 C 或 Lua 编写的函数</td>\n    </tr>\n    <tr>\n      <td>userdata</td>\n      <td>表示任意存储在变量中的 C 数据结构</td>\n    </tr>\n    <tr>\n      <td>thread</td>\n      <td>表示执行的独立线路，用于执行协同程序</td>\n    </tr>\n    <tr>\n      <td>table</td>\n      <td>Lua 中的表其实是一个”关联数据”, 数组的索引可以是数字或字符串</td>\n    </tr>\n  </tbody>\n</table>\n<ul>\n  <li>nil</li>\n  <li>boolena</li>\n  <li>number</li>\n  <li>string\n    <ul>\n      <li>可以使用两个方括号”[[]]” 来表示一块字符串</li>\n      <li>字符串链接使用两个点好 ..</li>\n      <li>计算字符串的长度使用 #</li>\n    </ul>\n  </li>\n</ul>\n<div class=\"language-lua highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">html</span> <span class=\"o\">=</span> <span class=\"s\">[[\n    &lt;html&gt;\n    &lt;head&gt;&lt;/head&gt;\n    &lt;body&gt;\n        &lt;a href=&#34;http://domob.cn&#34;&gt;Domob&lt;/a&gt;\n    &lt;/body&gt;\n    &lt;/html&gt;\n]]</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">html</span><span class=\"p\">)</span>\n<p><span class=\"n\">len</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;pemako.cn&quot;</span><br />\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"o\">#</span><span class=\"n\">len</span><span class=\"p\">)</span><br />\n</code></pre></div></div></p>\n<ul>\n  <li>function</li>\n</ul>\n<div class=\"language-lua highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">-- function_test.lua</span>\n<span class=\"k\">function</span> <span class=\"nf\">factoriall</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"o\">==</span> <span class=\"mi\">0</span> <span class=\"k\">then</span>\n        <span class=\"k\">return</span> <span class=\"mi\">1</span>\n    <span class=\"k\">else</span>\n        <span class=\"k\">return</span> <span class=\"n\">n</span> <span class=\"o\">*</span> <span class=\"n\">factoriall</span><span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"k\">end</span>\n<span class=\"k\">end</span>\n<p><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">factoriall</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">))</span> <span class=\"c1\">– 120</span><br />\n</code></pre></div></div></p>\n<ul>\n  <li>table\n    <ul>\n      <li>不同于其他语言的数组把 0 作为数组的初始索引，在 Lua 里表的默认初始索引一般以 1 开始</li>\n    </ul>\n  </li>\n</ul>\n<div class=\"language-lua highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">local</span> <span class=\"n\">tb1</span> <span class=\"o\">=</span> <span class=\"p\">&#123;</span><span class=\"s2\">&#34;apple&#34;</span><span class=\"p\">,</span> <span class=\"s2\">&#34;pear&#34;</span><span class=\"p\">,</span> <span class=\"s2\">&#34;orange&#34;</span><span class=\"p\">&#125;</span>\n<p><span class=\"k\">for</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">v</span> <span class=\"k\">in</span> <span class=\"nb\">pairs</span><span class=\"p\">(</span><span class=\"n\">tb1</span><span class=\"p\">)</span> <span class=\"k\">do</span><br />\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">k</span> <span class=\"o\">…</span> <span class=\"s2\">&quot; : &quot;</span> <span class=\"o\">…</span> <span class=\"n\">v</span><span class=\"p\">)</span><br />\n<span class=\"k\">end</span><br />\n<span class=\"c1\">– 1 : apple</span><br />\n<span class=\"c1\">– 2 : pear</span><br />\n<span class=\"c1\">– 3 : orange</span><br />\n</code></pre></div></div></p>\n<ul>\n  <li>\n    <p>userdata</p>\n<pre><code>&lt;p&gt;userdata 是一种用户自定义数据，用于表示一种由应用程序或 C/C++ 语言库所创建的类型，可以将任意 C/C++ 的任意数据类型的数据（通常是 struct 和 指针）存储到 Lua 变量中调用&lt;/p&gt;\n</code></pre>\n  </li>\n  <li>\n    <p>thread</p>\n<pre><code>&lt;p&gt;在 Lua 里，最主要的线程是协同程序（coroutine）。它跟线程（thread）差不多，拥有自己独立的栈、局部变量和指令指针，可以跟其他协同程序共享全局变量和其他大部分东西。\n</code></pre>\n<p>线程跟协程的区别：线程可以同时多个运行，而协程任意时刻只能运行一个，并且处于运行状态的协程只有被挂起（suspend）时才会暂停</p></p>\n  </li>\n</ul>\n<hr/>\n<h2 id=\"2-lua-变量\">2. Lua 变量</h2>\n<ul>\n  <li>\n    <p>全局变量</p>\n<pre><code>&lt;p&gt;Lua 中的变量全是全局变量，哪怕是语句块或是函数里，除非用 local 显示声明为局部变量&lt;/p&gt;\n</code></pre>\n  </li>\n  <li>\n    <p>局部变量</p>\n<pre><code>&lt;p&gt;局部变量的作用于为从生命位置开始到所在语句块结束&lt;/p&gt;\n\n&lt;p&gt;变量的默认值均为 &lt;code class=&quot;highlighter-rouge&quot;&gt;nil&lt;/code&gt;&lt;/p&gt;\n</code></pre>\n  </li>\n  <li>\n    <p>表中的域</p>\n  </li>\n  <li>\n    <p>赋值语句</p>\n<pre><code>&lt;ul&gt;\n  &lt;li&gt;Lua 可以对多个变量同时赋值，变量列表和值列表的各个元素使用逗号分开，复制语句右边的值会依次赋值给左边的变量&lt;/li&gt;\n  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;x, y = y, x&lt;/code&gt; – 交换 x y 的值&lt;/li&gt;\n  &lt;li&gt;当变量的个数和值的个数不一致时，Lua会一直以变量个数为基础采取以下策略&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  a. 变量的个数 &amp;gt; 值的个数    按变量个数补足 nil\n</code></pre>\n<p>b. 变量的格式 &lt; 值的格式    多余的值会被忽略<br />\n</code></pre></div>    </div></p>\n<pre><code>&lt;ul&gt;\n  &lt;li&gt;多值赋值经常用来交换变量，或将函数调用返回给变量&lt;/li&gt;\n&lt;/ul&gt;\n</code></pre>\n  </li>\n  <li>\n    <p>索引</p>\n<pre><code>&lt;ul&gt;\n  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;t[i]&lt;/code&gt;&lt;/li&gt;\n  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;t.i&lt;/code&gt; 当索引为字符串类型时的一种简化写法&lt;/li&gt;\n&lt;/ul&gt;\n</code></pre>\n  </li>\n</ul>\n<h2 id=\"3-lua-循环\">3. Lua 循环</h2>\n<ul>\n  <li><code class=\"highlighter-rouge\">while</code></li>\n  <li><code class=\"highlighter-rouge\">for</code></li>\n  <li><code class=\"highlighter-rouge\">repeat...until</code> 重复执行循环，知道指定的条件为真时为止</li>\n  <li>循环嵌套  可以在循环内嵌套一个或多个循环语句(while for do..while)</li>\n</ul>\n<h2 id=\"4-lua-流程控制\">4. Lua 流程控制</h2>\n<div class=\"language-lua highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">if</span> <span class=\"err\">表达式</span>\n<span class=\"k\">then</span>\n    <span class=\"c1\">-- 在表达式为 true 时执行的语句</span>\n<span class=\"k\">end</span>\n</code></pre></div></div>\n<h2 id=\"5-lua-函数\">5. Lua 函数</h2>\n<div class=\"language-lua highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">optional_function_scope</span> <span class=\"k\">function</span> <span class=\"nf\">function_name</span><span class=\"p\">(</span> <span class=\"n\">argument1</span><span class=\"p\">,</span> <span class=\"n\">argument2</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"n\">argumentn</span><span class=\"p\">)</span>\n    <span class=\"n\">function_body</span>\n    <span class=\"k\">return</span> <span class=\"n\">result_params_comma_separated</span>\n<span class=\"k\">end</span>\n<span class=\"c1\">-- optional_function_scope 默认不写为全局函数 加上 local 为局部函数</span>\n<span class=\"c1\">-- Lua 可以返回多个返回值，每个值已逗号隔开</span>\n</code></pre></div></div>\n<ul>\n  <li>可变参数</li>\n</ul>\n<p>可变参数使用三个点(…) 便是函数有可变参数。Lua 将函数的参数放在一个叫 arg 的表中，<code class=\"highlighter-rouge\">#arg</code> 便是传入参数的个数</p>\n<div class=\"language-lua highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">function</span> <span class=\"nf\">average</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">)</span>\n    <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n    <span class=\"kd\">local</span> <span class=\"n\">arg</span> <span class=\"o\">=</span> <span class=\"p\">&#123;</span><span class=\"o\">...</span><span class=\"p\">&#125;</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span><span class=\"p\">,</span><span class=\"n\">v</span> <span class=\"k\">in</span> <span class=\"nb\">ipairs</span><span class=\"p\">(</span><span class=\"n\">arg</span><span class=\"p\">)</span> <span class=\"k\">do</span>\n        <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">result</span> <span class=\"o\">+</span> <span class=\"n\">v</span>\n    <span class=\"k\">end</span>\n<pre><code>&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;#34;总共传入&amp;#34;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;#34;个数&amp;#34;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;\n&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt;\n</code></pre>\n<p><span class=\"k\">end</span></p>\n<p><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;平均值为:&quot;</span><span class=\"p\">,</span> <span class=\"n\">average</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">))</span><br />\n<span class=\"c1\">– 总共传入4个数</span><br />\n<span class=\"c1\">– 平均值为: 2.5</span><br />\n</code></pre></div></div></p>\n<h2 id=\"6-lua-运算符\">6. Lua 运算符</h2>\n<ul>\n  <li>算术运算符： <code class=\"highlighter-rouge\">+</code> <code class=\"highlighter-rouge\">-</code> <code class=\"highlighter-rouge\">*</code> <code class=\"highlighter-rouge\">/</code> <code class=\"highlighter-rouge\">%</code> <code class=\"highlighter-rouge\">^</code></li>\n  <li>关系运算符：<code class=\"highlighter-rouge\">==</code> <code class=\"highlighter-rouge\">~=(不等于)</code> <code class=\"highlighter-rouge\">&gt;</code> <code class=\"highlighter-rouge\">&lt;</code> <code class=\"highlighter-rouge\">&gt;=</code> <code class=\"highlighter-rouge\">&lt;=</code></li>\n  <li>逻辑运算符：<code class=\"highlighter-rouge\">and</code> <code class=\"highlighter-rouge\">or</code> <code class=\"highlighter-rouge\">not</code></li>\n  <li>其它运算符：<code class=\"highlighter-rouge\">..(链接两个字符串)</code> <code class=\"highlighter-rouge\">#(返回字符串或表的程度)</code></li>\n</ul>\n<h2 id=\"7-lua-字符串\">7. Lua 字符串</h2>\n<ul>\n  <li>单引号字符串</li>\n  <li>双引号字符串</li>\n  <li>[[和]]间的字符串</li>\n  <li>字符串操作\n    <ul>\n      <li>string.upper(argument)</li>\n      <li>string.lower(argument)</li>\n      <li>string.gsub(mainString, findString, replaceString, num)</li>\n      <li>string.strfind(str, substr,[init,[end]])</li>\n      <li>string.reverse(arg)</li>\n      <li>string.format(…)</li>\n      <li>string.len(arg)</li>\n      <li>string.rep(string, n)</li>\n      <li>string.char(arg) 和 string.byte(arg[,int])</li>\n    </ul>\n  </li>\n</ul>\n<div class=\"language-lua highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">string.gsub</span><span class=\"p\">(</span><span class=\"s2\">&#34;aaaaa&#34;</span><span class=\"p\">,</span> <span class=\"s2\">&#34;a&#34;</span><span class=\"p\">,</span> <span class=\"s2\">&#34;z&#34;</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span> <span class=\"c1\">-- 把字符串aaaaa 中的 a 替换为z 天幻3次</span>\n<span class=\"nb\">string.gsub</span><span class=\"p\">(</span><span class=\"s2\">&#34;aaaaa&#34;</span><span class=\"p\">,</span> <span class=\"s2\">&#34;a&#34;</span><span class=\"p\">,</span> <span class=\"s2\">&#34;z&#34;</span><span class=\"p\">)</span> <span class=\"c1\">-- 把字符串aaaaa 中的 a 替换为z 全部替换</span>\n<p><span class=\"c1\">– 在一个指定的目标字符串中搜索指定的内容(第三个参数为索引)</span><br />\n<span class=\"nb\">string.find</span><span class=\"p\">(</span><span class=\"s2\">&quot;Hello Lua user&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Lua&quot;</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"c1\">– 7  9 (分别为开始位置和结束位置的索引)</span></p>\n<p><span class=\"nb\">string.format</span><span class=\"p\">(</span><span class=\"s2\">&quot;the value is:%d&quot;</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)</span> <span class=\"c1\">– the value is:4</span></p>\n<p><span class=\"nb\">string.rep</span><span class=\"p\">(</span><span class=\"s2\">&quot;abcd&quot;</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"c1\">– abcdabcd</span></p>\n<p><span class=\"c1\">– char 将整数数字转换成字符并连接，byte 转换字符为整数值(可以指定某一个字符，默认第一个字符)</span><br />\n<span class=\"nb\">string.char</span><span class=\"p\">(</span><span class=\"mi\">97</span><span class=\"p\">,</span><span class=\"mi\">98</span><span class=\"p\">,</span><span class=\"mi\">99</span><span class=\"p\">,</span><span class=\"mi\">100</span><span class=\"p\">)</span>   <span class=\"c1\">– abcd</span><br />\n<span class=\"nb\">string.byte</span><span class=\"p\">(</span><span class=\"s2\">&quot;ABCD&quot;</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)</span>      <span class=\"c1\">– 68</span><br />\n<span class=\"nb\">string.byte</span><span class=\"p\">(</span><span class=\"s2\">&quot;ABCD&quot;</span><span class=\"p\">)</span>         <span class=\"c1\">– 65</span><br />\n</code></pre></div></div></p>\n<h2 id=\"8-lua-数组\">8. Lua 数组</h2>\n<p>Lua数组可以为一维数组或多维数组，数组的索引值可以使用整数表示，数组的大小不固定。</p>\n<div class=\"language-lua highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">-- 一维数组</span>\n<span class=\"n\">array</span> <span class=\"o\">=</span> <span class=\"p\">&#123;</span><span class=\"s2\">&#34;Lua&#34;</span><span class=\"p\">,</span> <span class=\"s2\">&#34;Tutorial&#34;</span><span class=\"p\">&#125;</span>\n<p><span class=\"k\">for</span> <span class=\"n\">i</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"o\">#</span><span class=\"n\">array</span> <span class=\"k\">do</span><br />\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">array</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">])</span><br />\n<span class=\"k\">end</span></p>\n<p><span class=\"c1\">–Lua</span><br />\n<span class=\"c1\">–Tutorial</span></p>\n<p><span class=\"c1\">– 多维数组</span><br />\n<span class=\"n\">array</span> <span class=\"o\">=</span> <span class=\"p\">&#123;&#125;</span><br />\n<span class=\"c1\">– 初始化数组</span><br />\n<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span> <span class=\"k\">do</span><br />\n<span class=\"n\">array</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">&#123;&#125;</span><br />\n<span class=\"k\">for</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span> <span class=\"k\">do</span><br />\n<span class=\"n\">array</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">i</span><span class=\"o\">*</span><span class=\"n\">j</span><br />\n<span class=\"k\">end</span><br />\n<span class=\"k\">end</span><br />\n<span class=\"c1\">– 遍历数组</span><br />\n<span class=\"k\">for</span> <span class=\"n\">i</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span> <span class=\"k\">do</span><br />\n<span class=\"k\">for</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span> <span class=\"k\">do</span><br />\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">array</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">])</span><br />\n<span class=\"k\">end</span><br />\n<span class=\"k\">end</span></p>\n<p><span class=\"c1\">– 1 2 3 2 4 6 3 6 9</span><br />\n</code></pre></div></div></p>\n<h2 id=\"9-lua-迭代器\">9. Lua 迭代器</h2>\n<ul>\n  <li>\n    <p>无状态的迭代器</p>\n<pre><code>&lt;p&gt;无状态迭代器的典型的简单的例子是 &lt;code class=&quot;highlighter-rouge&quot;&gt;ipairs&lt;/code&gt;, 他遍历数组的每一个元素&lt;/p&gt;\n</code></pre>\n  </li>\n</ul>\n<div class=\"language-lua highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"p\">&#123;</span><span class=\"s2\">&#34;Lua&#34;</span><span class=\"p\">,</span><span class=\"s2\">&#34;Python&#34;</span><span class=\"p\">,</span> <span class=\"s2\">&#34;PHP&#34;</span><span class=\"p\">,</span> <span class=\"s2\">&#34;Java&#34;</span><span class=\"p\">&#125;</span>\n<span class=\"k\">for</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">v</span> <span class=\"k\">in</span> <span class=\"nb\">pairs</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">)</span> <span class=\"k\">do</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">)</span>\n<span class=\"k\">end</span>\n</code></pre></div></div>\n<ul>\n  <li>多状态的迭代器</li>\n</ul>\n<div class=\"language-lua highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">array</span> <span class=\"o\">=</span> <span class=\"p\">&#123;</span><span class=\"s2\">&#34;Lua&#34;</span><span class=\"p\">,</span> <span class=\"s2\">&#34;Tutorial&#34;</span><span class=\"p\">&#125;</span>\n<p><span class=\"k\">function</span> <span class=\"nf\">elementIterator</span> <span class=\"p\">(</span><span class=\"n\">collection</span><span class=\"p\">)</span><br />\n<span class=\"kd\">local</span> <span class=\"n\">index</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><br />\n<span class=\"kd\">local</span> <span class=\"n\">count</span> <span class=\"o\">=</span> <span class=\"o\">#</span><span class=\"n\">collection</span><br />\n<span class=\"c1\">– 闭包函数</span><br />\n<span class=\"k\">return</span> <span class=\"k\">function</span> <span class=\"p\">()</span><br />\n<span class=\"n\">index</span> <span class=\"o\">=</span> <span class=\"n\">index</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><br />\n<span class=\"k\">if</span> <span class=\"n\">index</span> <span class=\"o\">&lt;=</span> <span class=\"n\">count</span><br />\n<span class=\"k\">then</span><br />\n<span class=\"c1\">–  返回迭代器的当前元素</span><br />\n<span class=\"k\">return</span> <span class=\"n\">collection</span><span class=\"p\">[</span><span class=\"n\">index</span><span class=\"p\">]</span><br />\n<span class=\"k\">end</span><br />\n<span class=\"k\">end</span><br />\n<span class=\"k\">end</span></p>\n<p><span class=\"k\">for</span> <span class=\"n\">element</span> <span class=\"k\">in</span> <span class=\"n\">elementIterator</span><span class=\"p\">(</span><span class=\"n\">array</span><span class=\"p\">)</span><br />\n<span class=\"k\">do</span><br />\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">element</span><span class=\"p\">)</span><br />\n<span class=\"k\">end</span></p>\n<p><span class=\"c1\">– Lua</span><br />\n<span class=\"c1\">– Tutorial</span><br />\n</code></pre></div></div></p>\n<h2 id=\"10-lua-table\">10. Lua table</h2>\n<p>table 是 Lua 的一种数据结构用来帮助我们创建不同的数据类型，如：数字、字典等。</p>\n<p>Lua table 使用关联型数组，你可以用任意类型的值来作数组的索引，但这个值不能是 nil。</p>\n<p>Lua table 是不固定大小的，你可以根据自己需要进行扩容。</p>\n<p>Lua也是通过table来解决模块（module）、包（package）和对象（Object）的。 例如string.format表示使用”format”来索引table string。</p>\n<ul>\n  <li>\n    <p>Table 操作</p>\n<pre><code>&lt;ul&gt;\n  &lt;li&gt;table.concat(table[,sep[,start[,end]]])&lt;/li&gt;\n&lt;/ul&gt;\n</code></pre>\n  </li>\n</ul>\n<div class=\"language-lua highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">-- concat 链接两个 table 和 PHP 中的 implode 函数很类似</span>\n<span class=\"c1\">-- table.concat() 函数列出参数中指定 table 的数组部分从 start 位置到 end 位置的所有元素，元素间已指定的分隔符(sep)隔开</span>\n<span class=\"o\">&gt;</span> <span class=\"n\">language</span> <span class=\"o\">=</span> <span class=\"p\">&#123;</span><span class=\"s2\">&#34;Lua&#34;</span><span class=\"p\">,</span> <span class=\"s2\">&#34;Python&#34;</span><span class=\"p\">,</span> <span class=\"s2\">&#34;PHP&#34;</span><span class=\"p\">,</span> <span class=\"s2\">&#34;Java&#34;</span><span class=\"p\">&#125;</span>\n<span class=\"o\">&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"nb\">table.concat</span><span class=\"p\">(</span><span class=\"n\">language</span><span class=\"p\">))</span>\n<span class=\"n\">LuaPythonPHPJava</span>\n<span class=\"o\">&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"nb\">table.concat</span><span class=\"p\">(</span><span class=\"n\">language</span><span class=\"p\">,</span> <span class=\"s1\">&#39;,&#39;</span><span class=\"p\">))</span>\n<span class=\"n\">Lua</span><span class=\"p\">,</span><span class=\"n\">Python</span><span class=\"p\">,</span><span class=\"n\">PHP</span><span class=\"p\">,</span><span class=\"n\">Java</span>\n<span class=\"o\">&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"nb\">table.concat</span><span class=\"p\">(</span><span class=\"n\">language</span><span class=\"p\">,</span> <span class=\"s1\">&#39;,&#39;</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">))</span>\n<span class=\"n\">Lua</span><span class=\"p\">,</span><span class=\"n\">Python</span>\n</code></pre></div></div>\n<ul>\n  <li>table.insert(table[,[pos,]value])</li>\n</ul>\n<div class=\"language-lua highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>\n<span class=\"c1\">-- 在 table 数组部分指定位置(pos)插入值为 value 的元素，默认从末尾插入</span>\n<span class=\"o\">&gt;</span> <span class=\"n\">language</span> <span class=\"o\">=</span> <span class=\"p\">&#123;</span><span class=\"s2\">&#34;Lua&#34;</span><span class=\"p\">,</span> <span class=\"s2\">&#34;Python&#34;</span><span class=\"p\">,</span> <span class=\"s2\">&#34;PHP&#34;</span><span class=\"p\">,</span> <span class=\"s2\">&#34;Java&#34;</span><span class=\"p\">&#125;</span>\n<span class=\"o\">&gt;</span> <span class=\"nb\">table.insert</span><span class=\"p\">(</span><span class=\"n\">language</span><span class=\"p\">,</span> <span class=\"s2\">&#34;Golang&#34;</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">language</span><span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">])</span>\n<span class=\"n\">Golang</span>\n<span class=\"o\">&gt;</span> <span class=\"nb\">table.remove</span><span class=\"p\">(</span><span class=\"n\">language</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">language</span><span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">])</span>\n<span class=\"kc\">nil</span>\n<span class=\"o\">&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">language</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n<span class=\"n\">Lua</span>\n<span class=\"o\">&gt;</span> <span class=\"nb\">table.remove</span><span class=\"p\">(</span><span class=\"n\">language</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">language</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n<span class=\"n\">Python</span>\n</code></pre></div></div>\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- table.remove(table[,pos])\n- table.sort(table[,comp])\n</code></pre></div></div>\n<h2 id=\"11-lua-模块与包\">11. Lua 模块与包</h2>\n<p>Lua 的模块是由变量、函数等已知元素组成的 table，因此创建一个模块很简单，就是创建一个 table，然后把需要导出的常量、函数放入其中，最后返回这个 table 就行。以下为创建自定义模块 module.lua，文件代码格式如下：</p>\n<ul>\n  <li>定义模块</li>\n</ul>\n<div class=\"language-lua highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">-- 文件名 utils.lua</span>\n<span class=\"c1\">-- 定义一个名为 utils 的模块</span>\n<p><span class=\"n\">utils</span> <span class=\"o\">=</span> <span class=\"p\">&#123;&#125;</span></p>\n<p><span class=\"c1\">– 定义一个常量</span><br />\n<span class=\"n\">utils</span><span class=\"p\">.</span><span class=\"n\">constant</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;这是一个常量&quot;</span></p>\n<p><span class=\"c1\">– 定义一个函数</span><br />\n<span class=\"k\">function</span> <span class=\"nc\">utils</span><span class=\"p\">.</span><span class=\"nf\">func1</span><span class=\"p\">()</span><br />\n<span class=\"nb\">io.write</span><span class=\"p\">(</span><span class=\"s2\">&quot;这是一个共有函数!n&quot;</span><span class=\"p\">)</span><br />\n<span class=\"k\">end</span></p>\n<p><span class=\"kd\">local</span> <span class=\"k\">function</span> <span class=\"nf\">func2</span><span class=\"p\">()</span><br />\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;这是一个私有函数！&quot;</span><span class=\"p\">)</span><br />\n<span class=\"k\">end</span></p>\n<p><span class=\"k\">function</span> <span class=\"nc\">utils</span><span class=\"p\">.</span><span class=\"nf\">fun3</span><span class=\"p\">()</span><br />\n<span class=\"n\">func2</span><span class=\"p\">()</span><br />\n<span class=\"k\">end</span></p>\n<p><span class=\"k\">return</span> <span class=\"n\">utils</span><br />\n</code></pre></div></div></p>\n<ul>\n  <li>加载模块 require</li>\n</ul>\n<div class=\"language-lua highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>\n<span class=\"nb\">require</span><span class=\"p\">(</span><span class=\"s2\">&#34;utils&#34;</span><span class=\"p\">)</span> <span class=\"c1\">-- 或者使用 require &#34;utils&#34;</span>\n                 <span class=\"c1\">-- 别名导入 local u = require(&#34;utils&#34;)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">utils</span><span class=\"p\">.</span><span class=\"n\">constant</span><span class=\"p\">)</span>\n                <span class=\"c1\">-- print(u.constant)  使用别名</span>\n<span class=\"n\">utils</span><span class=\"p\">.</span><span class=\"n\">fun3</span><span class=\"p\">()</span>\n</code></pre></div></div>\n<h2 id=\"12-lua-元表metatable\">12. Lua 元表(Metatable)</h2>\n<p>Lua table 无法对两个 table 进行操作，因此 Lua 提供了元表(Metatable),允许我们改变 table 的行为，每个行为关联了对应的元方法。</p>\n<p>对指定的表设置元表</p>\n<ul>\n  <li><code class=\"highlighter-rouge\">setmetatable(table, metatable):</code> 对指定的 table 设置元表(metatable),如果元表中存在<code class=\"highlighter-rouge\">__metatable</code>值，<code class=\"highlighter-rouge\">setmetatable</code>会失败</li>\n  <li>\n    <p><code class=\"highlighter-rouge\">getmetatable(table):</code> 返回对象的元表(<code class=\"highlighter-rouge\">metatable</code>)</p>\n  </li>\n  <li><code class=\"highlighter-rouge\">__index</code>元方法</li>\n</ul>\n<p>当你通过健来访问 table 的时候，如果这个健没有值，那么 Lua 就会寻找该 table 的 metatable(假定有 metatable)中的<code class=\"highlighter-rouge\">__index</code> 健。如果<code class=\"highlighter-rouge\">__index</code>包含一个表格，Lua 会在表格中查找相应的健。</p>\n<div class=\"language-lua highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">Lua</span> <span class=\"mi\">5</span><span class=\"p\">.</span><span class=\"mi\">3</span><span class=\"p\">.</span><span class=\"mi\">4</span>  <span class=\"n\">Copyright</span> <span class=\"p\">(</span><span class=\"n\">C</span><span class=\"p\">)</span> <span class=\"mi\">1994</span><span class=\"o\">-</span><span class=\"mi\">2017</span> <span class=\"n\">Lua</span><span class=\"p\">.</span><span class=\"n\">org</span><span class=\"p\">,</span> <span class=\"n\">PUC</span><span class=\"o\">-</span><span class=\"n\">Rio</span>\n<span class=\"o\">&gt;</span> <span class=\"n\">other</span> <span class=\"o\">=</span> <span class=\"p\">&#123;</span> <span class=\"n\">foo</span> <span class=\"o\">=</span> <span class=\"mi\">3</span><span class=\"p\">&#125;</span>\n<span class=\"o\">&gt;</span> <span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"nb\">setmetatable</span><span class=\"p\">(&#123;&#125;,</span> <span class=\"p\">&#123;</span><span class=\"n\">__index</span> <span class=\"o\">=</span> <span class=\"n\">other</span><span class=\"p\">&#125;)</span>\n<span class=\"o\">&gt;</span> <span class=\"n\">t</span><span class=\"p\">.</span><span class=\"n\">foo</span>\n<span class=\"mi\">3</span>\n<span class=\"o\">&gt;</span> <span class=\"n\">t</span><span class=\"p\">.</span><span class=\"n\">bar</span>\n<span class=\"kc\">nil</span>\n</code></pre></div></div>\n<p>如果 <code class=\"highlighter-rouge\">__index</code>包含一个函数的话，Lua 就会调用那个函数，table 和健会作为参数传递给函数。<code class=\"highlighter-rouge\">__index</code>元房费查看表中元素是否存在，如果不存在，返回结果为 nil, 如果存在则由<code class=\"highlighter-rouge\">__index</code>返回结果。</p>\n<div class=\"language-lua highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">mytable</span> <span class=\"o\">=</span> <span class=\"nb\">setmetatable</span><span class=\"p\">(&#123;</span><span class=\"n\">key1</span> <span class=\"o\">=</span> <span class=\"s2\">&#34;value1&#34;</span><span class=\"p\">&#125;,</span> <span class=\"p\">&#123;</span>\n    <span class=\"n\">__index</span> <span class=\"o\">=</span> <span class=\"k\">function</span><span class=\"p\">(</span><span class=\"n\">mytable</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">key</span> <span class=\"o\">==</span> <span class=\"s2\">&#34;key2&#34;</span> <span class=\"k\">then</span>\n            <span class=\"k\">return</span> <span class=\"s2\">&#34;metablevalue&#34;</span>\n        <span class=\"k\">else</span>\n            <span class=\"k\">return</span> <span class=\"kc\">nil</span>\n        <span class=\"k\">end</span>\n    <span class=\"k\">end</span>\n<span class=\"p\">&#125;)</span>\n<p><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">mytable</span><span class=\"p\">.</span><span class=\"n\">key1</span><span class=\"p\">,</span> <span class=\"n\">mytable</span><span class=\"p\">.</span><span class=\"n\">key2</span><span class=\"p\">)</span><br />\n<span class=\"c1\">– value1\tmetablevalue</span></p>\n<p><span class=\"c1\">– 上面的代码可以简写为</span><br />\n<span class=\"n\">mytable</span> <span class=\"o\">=</span> <span class=\"nb\">setmetatable</span><span class=\"p\">(&#123;</span><span class=\"n\">key1</span><span class=\"o\">=</span><span class=\"s2\">&quot;value1&quot;</span><span class=\"p\">,</span> <span class=\"p\">&#123;</span><span class=\"n\">__index</span> <span class=\"o\">=</span> <span class=\"p\">&#123;</span><span class=\"n\">key2</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;metatablevalue&quot;</span><span class=\"p\">&#125;&#125;</span> <span class=\"p\">&#125;)</span><br />\n</code></pre></div></div></p>\n<blockquote>\n  <p>Lua 查找一个元素时的规则</p>\n  <blockquote>\n    <ol>\n      <li>在表中查找，如果找到，返回该元素，找不到则继续</li>\n      <li>判断该表是否有元表，如果没有元表，返回 nil, 有元表则继续</li>\n      <li>判断元表有没有 __index 方法,如果__index 方法为 nil,则返回 nil; 如果 __index 方法是一个表，则重复i, ii, iii; 如果 __index 方法是一个函数，则返回该函数的返回值</li>\n    </ol>\n  </blockquote>\n</blockquote>\n<ul>\n  <li><code class=\"highlighter-rouge\">__newindex</code> 元方法</li>\n</ul>\n<p><code class=\"highlighter-rouge\">__newindex</code>元方法用来对表更新，<code class=\"highlighter-rouge\">__index</code>则用来对表访问。当你给表的一个缺少的索引赋值，解释器就会查找<code class=\"highlighter-rouge\">__newindex</code>元方法；如果存在则调用这个函数而不进行赋值操作。</p>\n<pre><code class=\"language-Lua\">mymetatable = &#123;&#125;\nmytable = setmetatable(&#123;key1 = &#34;vlaue1&#34;&#125;, &#123; __newindex = mymetatable &#125;)\n\nprint(mytable.key1)                         -- value1\n\nmytable.newkey = &#34;新值2&#34;\nprint(mytable.newkey, mymetatable.newkey)   -- nil 新值2\n\nmytable.key1 = &#34;新值1&#34;\nprint(mytable.key1, mymetatable.key1)       -- 新值1 nil\n</code></pre>\n<blockquote>\n  <p>以上实例中表设置了元方法 __newindex,在对新索引(newkey)赋值时(mytable.newkey = “新值2”),会调用元方法，而不进行赋值。而如果对已存在的索引健(key1),则会进行赋值，而不调用元方法 __newindex。</p>\n</blockquote>\n<ul>\n  <li><code class=\"highlighter-rouge\">__add</code>方法</li>\n</ul>\n<p>进行两个表相加操作。</p>\n<div class=\"language-lua highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">-- 计算表中最大值，table.maxn 在 Lua5.2以上版本中已无法使用</span>\n<span class=\"c1\">-- 自定义计算表中最大值函数 table_maxn</span>\n<p><span class=\"k\">function</span> <span class=\"nf\">table_maxn</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">)</span><br />\n<span class=\"kd\">local</span> <span class=\"n\">mn</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><br />\n<span class=\"k\">for</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">v</span> <span class=\"k\">in</span> <span class=\"nb\">pairs</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">)</span> <span class=\"k\">do</span><br />\n<span class=\"k\">if</span> <span class=\"n\">mn</span> <span class=\"o\">&lt;</span> <span class=\"n\">k</span> <span class=\"k\">then</span><br />\n<span class=\"n\">mn</span> <span class=\"o\">=</span> <span class=\"n\">k</span><br />\n<span class=\"k\">end</span><br />\n<span class=\"k\">end</span><br />\n<span class=\"k\">return</span> <span class=\"n\">mn</span><br />\n<span class=\"k\">end</span></p>\n<p><span class=\"c1\">– 两表相加操作</span><br />\n<span class=\"n\">mytable</span> <span class=\"o\">=</span> <span class=\"nb\">setmetatable</span><span class=\"p\">({</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">},</span> <span class=\"p\">{</span><br />\n<span class=\"n\">__add</span> <span class=\"o\">=</span> <span class=\"k\">function</span><span class=\"p\">(</span><span class=\"n\">mytable</span><span class=\"p\">,</span> <span class=\"n\">newtable</span><span class=\"p\">)</span><br />\n<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">table_maxn</span><span class=\"p\">(</span><span class=\"n\">newtable</span><span class=\"p\">)</span> <span class=\"k\">do</span><br />\n<span class=\"nb\">table.insert</span><span class=\"p\">(</span><span class=\"n\">mytable</span><span class=\"p\">,</span> <span class=\"n\">table_maxn</span><span class=\"p\">(</span><span class=\"n\">mytable</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">newtable</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">])</span><br />\n<span class=\"k\">end</span><br />\n<span class=\"k\">return</span> <span class=\"n\">mytable</span><br />\n<span class=\"k\">end</span><br />\n<span class=\"p\">})</span></p>\n<p><span class=\"n\">secondtable</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"mi\">4</span>&lt;span class</p>\n","text":" 1. 数据类型 数据类型 描述 nil 只有值为 nil 属于该类，表示一个无效值（在条件表达式中相当于 false） boolean false or true number 双精度类型的实浮点数 string 双引号或单引号表示 function 由 C 或 Lua 编写的...","link":"","photos":[],"count_time":{"symbolsCount":"10k","symbolsTime":"9 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">1. 数据类型</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-lua-%E5%8F%98%E9%87%8F\"><span class=\"toc-text\">2. Lua 变量</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-lua-%E5%BE%AA%E7%8E%AF\"><span class=\"toc-text\">3. Lua 循环</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-lua-%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6\"><span class=\"toc-text\">4. Lua 流程控制</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-lua-%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">5. Lua 函数</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#6-lua-%E8%BF%90%E7%AE%97%E7%AC%A6\"><span class=\"toc-text\">6. Lua 运算符</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#7-lua-%E5%AD%97%E7%AC%A6%E4%B8%B2\"><span class=\"toc-text\">7. Lua 字符串</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#8-lua-%E6%95%B0%E7%BB%84\"><span class=\"toc-text\">8. Lua 数组</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#9-lua-%E8%BF%AD%E4%BB%A3%E5%99%A8\"><span class=\"toc-text\">9. Lua 迭代器</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#10-lua-table\"><span class=\"toc-text\">10. Lua table</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#11-lua-%E6%A8%A1%E5%9D%97%E4%B8%8E%E5%8C%85\"><span class=\"toc-text\">11. Lua 模块与包</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#12-lua-%E5%85%83%E8%A1%A8metatable\"><span class=\"toc-text\">12. Lua 元表(Metatable)</span></a></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"通过lua栈了解lua与c的交互","uid":"85ff80717730fc6400f5d3d615799d7f","slug":"zl/2016-01-01-682_通过lua栈了解lua与c的交互","date":"2024-04-03T03:47:35.917Z","updated":"2024-04-03T03:47:35.918Z","comments":true,"path":"api/articles/zl/2016-01-01-682_通过lua栈了解lua与c的交互.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"其中分析、执行部分都是c语言实现的。 lua与c的关系lua的虚拟机是用c语言实现的，换句话说一段lua指令最终在执行时都是当作c语言来执行的，lua的global表，函数调用栈也都是存在c语言中的一个叫lua_State的结构体中的。举个例子，来看下lua中的加指令 OP_AD...","link":"","photos":[],"count_time":{"symbolsCount":"8.3k","symbolsTime":"8 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Lua的元表","uid":"74fdff3e8ba6e278fa488790b194fb21","slug":"zl/2016-01-01-681_Lua的元表","date":"2024-04-03T03:47:35.913Z","updated":"2024-04-03T03:47:35.917Z","comments":true,"path":"api/articles/zl/2016-01-01-681_Lua的元表.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"在 Lua 5.1 语言中，元表 (metatable) 的表现行为类似于 C++ 语言中的操作符重载，例如我们可以重载 “__add” 元方法 (metamethod)，来计算两个 Lua 数组的并集；或者重载 “__index” 方法，来定义我们自己的 Hash 函数。Lua...","link":"","photos":[],"count_time":{"symbolsCount":"3.4k","symbolsTime":"3 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}