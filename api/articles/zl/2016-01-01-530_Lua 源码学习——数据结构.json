{"title":"Lua 源码学习——数据结构","uid":"f5dc09223cf8a3f93f00af503d5c1ca0","slug":"zl/2016-01-01-530_Lua 源码学习——数据结构","date":"2024-04-03T03:47:35.803Z","updated":"2024-04-03T03:47:35.804Z","comments":true,"path":"api/articles/zl/2016-01-01-530_Lua 源码学习——数据结构.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<ul id=\"markdown-toc\">\n  <li><a href=\"#数据结构简介\" id=\"markdown-toc-数据结构简介\">数据结构简介</a></li>\n  <li><a href=\"#字符串\" id=\"markdown-toc-字符串\">字符串</a></li>\n</ul>\n<h2 id=\"数据结构简介\">数据结构简介</h2>\n<p>Lua 中支持的数据结构包括：</p>\n<table>\n  <thead>\n    <tr>\n      <th>宏</th>\n      <th>类型</th>\n      <th>对应数据结构</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>LUA_TNONE</td>\n      <td> </td>\n      <td> </td>\n    </tr>\n    <tr>\n      <td>LUA_TNIL</td>\n      <td>nil</td>\n      <td> </td>\n    </tr>\n    <tr>\n      <td>LUA_TBOOLEAN</td>\n      <td>boolean</td>\n      <td>int</td>\n    </tr>\n    <tr>\n      <td>LUA_TLIGHTUSERDATA</td>\n      <td>pointer</td>\n      <td>void *</td>\n    </tr>\n    <tr>\n      <td>LUA_TNUMBER</td>\n      <td>number</td>\n      <td>lua_Number</td>\n    </tr>\n    <tr>\n      <td>LUA_TSTRING</td>\n      <td>string</td>\n      <td>TString</td>\n    </tr>\n    <tr>\n      <td>LUA_TTABLE</td>\n      <td>table</td>\n      <td>Table</td>\n    </tr>\n    <tr>\n      <td>LUA_TFUNCTION</td>\n      <td>function</td>\n      <td>CClosure, LClosure</td>\n    </tr>\n    <tr>\n      <td>LUA_TUSERDATA</td>\n      <td>pointer</td>\n      <td>void *</td>\n    </tr>\n    <tr>\n      <td>LUA_TTHREAD</td>\n      <td>lua vm, thread</td>\n      <td>lua_State</td>\n    </tr>\n  </tbody>\n</table>\n<p>注意：</p>\n<ul>\n  <li>LUA_TLIGHTUSERDATA 与 LUA_TUSERDATA 都是 void * 指针，它们的区别是，前者的分配释放由 Lua 外部的使用者负责、后者的分配释放由 Lua 内部完成；</li>\n  <li>LUA_TSTRING 及以后的类型，需要进行 GC 操作；</li>\n</ul>\n<p>之前已经多次说过，Lua 使用联合体 lua_TValue 来同时表示上述类型的数据。其定义类似于：</p>\n<div class=\"language-c highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">union</span> <span class=\"n\">GCObject</span> <span class=\"p\">&#123;</span>\n    <span class=\"n\">GCheader</span> <span class=\"n\">gch</span><span class=\"p\">;</span>\n    <span class=\"k\">union</span> <span class=\"n\">TString</span> <span class=\"n\">ts</span><span class=\"p\">;</span>       <span class=\"c1\">// string\n</span>    <span class=\"k\">union</span> <span class=\"n\">Udata</span> <span class=\"n\">u</span><span class=\"p\">;</span>          <span class=\"c1\">// userdata\n</span>    <span class=\"k\">union</span> <span class=\"n\">Closure</span> <span class=\"n\">cl</span><span class=\"p\">;</span>       <span class=\"c1\">// function\n</span>    <span class=\"k\">struct</span> <span class=\"n\">Table</span> <span class=\"n\">h</span><span class=\"p\">;</span>         <span class=\"c1\">// table\n</span>    <span class=\"k\">struct</span> <span class=\"n\">Proto</span> <span class=\"n\">p</span><span class=\"p\">;</span>\n    <span class=\"k\">struct</span> <span class=\"n\">UpVal</span> <span class=\"n\">uv</span><span class=\"p\">;</span>\n    <span class=\"k\">struct</span> <span class=\"n\">lua_state</span> <span class=\"n\">th</span><span class=\"p\">;</span>    <span class=\"c1\">// thread\n</span><span class=\"p\">&#125;;</span>\n<p><span class=\"k\">union</span> <span class=\"n\">Value</span> <span class=\"p\">&#123;</span><br />\n<span class=\"n\">GCObject</span><span class=\"o\"><em></span> <span class=\"n\">gc</span><span class=\"p\">;</span>   <span class=\"c1\">// 所有可 GC 的数据，包括 string, table, function, userdata, thread<br />\n</span>    <span class=\"kt\">void</span><span class=\"o\"></em></span> <span class=\"n\">p</span><span class=\"p\">;</span>        <span class=\"c1\">// light userdata<br />\n</span>    <span class=\"n\">lua_Number</span> <span class=\"n\">n</span><span class=\"p\">;</span>   <span class=\"c1\">// number<br />\n</span>    <span class=\"kt\">int</span> <span class=\"n\">b</span><span class=\"p\">;</span>          <span class=\"c1\">// boolean<br />\n</span><span class=\"p\">&#125;;</span></p>\n<p><span class=\"k\">struct</span> <span class=\"n\">lua_TValue</span> <span class=\"p\">&#123;</span><br />\n<span class=\"kt\">int</span> <span class=\"n\">tt</span><span class=\"p\">;</span>         <span class=\"c1\">// 数据类型<br />\n</span>    <span class=\"n\">Value</span> <span class=\"n\">value</span><span class=\"p\">;</span>    <span class=\"c1\">// 数据<br />\n</span><span class=\"p\">&#125;;</span><br />\n</code></pre></div></div></p>\n<h2 id=\"字符串\">字符串</h2>\n<p>正如之前所了解的，Lua 中的字符串是一个不可变的数据。事实上，Lua 虚拟机存在一块全局的数据区，用来存放此虚拟机中的所有字符串。</p>\n<div class=\"language-c highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"cm\">/*\n** String headers for string table\n*/</span>\n<span class=\"k\">typedef</span> <span class=\"k\">union</span> <span class=\"n\">TString</span> <span class=\"p\">&#123;</span>\n  <span class=\"n\">L_Umaxalign</span> <span class=\"n\">dummy</span><span class=\"p\">;</span>  <span class=\"cm\">/* ensures maximum alignment for strings */</span>\n  <span class=\"k\">struct</span> <span class=\"p\">&#123;</span>\n    <span class=\"n\">CommonHeader</span><span class=\"p\">;</span>\n    <span class=\"n\">lu_byte</span> <span class=\"n\">reserved</span><span class=\"p\">;</span>\n    <span class=\"kt\">unsigned</span> <span class=\"kt\">int</span> <span class=\"n\">hash</span><span class=\"p\">;</span>\n    <span class=\"kt\">size_t</span> <span class=\"n\">len</span><span class=\"p\">;</span>\n  <span class=\"p\">&#125;</span> <span class=\"n\">tsv</span><span class=\"p\">;</span>\n<span class=\"p\">&#125;</span> <span class=\"n\">TString</span><span class=\"p\">;</span>\n</code></pre></div></div>","text":" 数据结构简介 字符串 数据结构简介 Lua 中支持的数据结构包括： 宏 类型 对应数据结构 LUA_TNONE LUA_TNIL nil LUA_TBOOLEAN boolean int LUA_TLIGHTUSERDATA pointer void * LUA_TNUMBER...","link":"","photos":[],"count_time":{"symbolsCount":"1.7k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AE%80%E4%BB%8B\"><span class=\"toc-text\">数据结构简介</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AD%97%E7%AC%A6%E4%B8%B2\"><span class=\"toc-text\">字符串</span></a></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"lua数据结构table的键值存取过程源码分析","uid":"9b656271fc49c3ddbaf216361a033b92","slug":"zl/2016-01-01-529_lua数据结构table的键值存取过程源码分析","date":"2024-04-03T03:47:35.803Z","updated":"2024-04-03T03:47:35.803Z","comments":true,"path":"api/articles/zl/2016-01-01-529_lua数据结构table的键值存取过程源码分析.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"一、相关数据结构定义1、Table结构定义1234567891011typedef struct { CommonHeader; lu_byte flags; lu_byte lsizenode; /* log2 of size of `node&#39; array */ st...","link":"","photos":[],"count_time":{"symbolsCount":"7.4k","symbolsTime":"7 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"SpelEvaluationException","uid":"dda73fa1b7e2070a5bd13794e9b4a28f","slug":"zl/2016-01-01-527_org.springframework.expression.spel.SpelEvaluation","date":"2024-04-03T03:47:35.802Z","updated":"2024-04-03T03:47:35.802Z","comments":true,"path":"api/articles/zl/2016-01-01-527_org.springframework.expression.spel.SpelEvaluation.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"","link":"","photos":[],"count_time":{"symbolsCount":0,"symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}