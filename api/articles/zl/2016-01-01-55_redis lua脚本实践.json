{"title":"redis lua脚本实践","uid":"80634426fe8d58b38a0ab1cdae66b618","slug":"zl/2016-01-01-55_redis lua脚本实践","date":"2024-04-03T03:47:35.820Z","updated":"2024-04-03T03:47:35.820Z","comments":true,"path":"api/articles/zl/2016-01-01-55_redis lua脚本实践.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<h2 id=\"redis-lua简介\"><a href=\"#redis-lua简介\" class=\"headerlink\" title=\"redis lua简介\"></a>redis lua简介</h2><p>Lua 脚本功能是Reids2.6版本的最大亮点， 通过内嵌对Lua环境的支持，Redis解决了长久以来不能高效地处理CAS（check-and-set）命令的缺点，并且可以通过组合使用多个命令，轻松实现以前很难实现或者不能高效实现的模式。</p>\n<h4 id=\"基本命令\"><a href=\"#基本命令\" class=\"headerlink\" title=\"基本命令\"></a>基本命令</h4><h5 id=\"EVAL与EVALSHA\"><a href=\"#EVAL与EVALSHA\" class=\"headerlink\" title=\"EVAL与EVALSHA\"></a>EVAL与EVALSHA</h5><p>通过内置的Lua解释器，可以使用EVAL命令对Lua脚本进行求值。</p>\n<ul>\n<li>script参数是一段Lua 5.1脚本程序，它会被运行在Redis服务器上下文中，这段脚本不必(也不应该)定义为一个Lua函数。</li>\n<li>numkeys 参数用于指定键名参数的个数。</li>\n</ul>\n<p>键名参数 key [key …] 从EVAL的第三个参数开始算起，表示在脚本中所用到的那些Redis键(key)，这些键名参数可以在Lua中通过全局变量KEYS数组用1为起始所有的形式访问(KEYS[1]，KEYS[2]，以此类推)。<br/>在命令的最后是那些不是键名参数的附加参数 arg [arg …]，可以在Lua中通过全局变量ARGV数组访问，访问的形式和KEYS变量类似(ARGV[1]，ARGV[2]，诸如此类)。</p>\n<p>EVAL命令要求你在每次执行脚本的时候都发送一次脚本主体(script body)。Redis有一个内部的缓存机制，因此它不会每次都重新编译脚本，不过在很多场合，付出无谓的带宽来传送脚本主体并不是最佳选择。</p>\n<p><em>为了减少带宽的消耗， Redis实现了EVALSHA命令</em>，它的作用和 EVAL 一样，都用于对脚本求值，但它接受的第一个参数不是脚本，而是脚本的 SHA1 校验和(sum)。EVALSHA 命令的表现如下：</p>\n<ul>\n<li>如果服务器还记得给定的 SHA1 校验和所指定的脚本，那么执行这个脚本</li>\n<li>如果服务器不记得给定的 SHA1 校验和所指定的脚本，那么它返回一个特殊的错误，提醒用户使用 EVAL 代替 EVALSHA</li>\n</ul>\n<p>使用样例：</p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:8379&gt; EVAL &#39;return &#34;return String KEYS1: &#34;..KEYS[1]..&#34; KEYS2: &#34;..&#34; &#34;..KEYS[2]..&#34; ARGV1: &#34;..ARGV[1]..&#34; ARGV2: &#34;..ARGV[2]&#39; 3 KEYS1Str KEYS2Str KEYS3Str ARGV1Str ARGV2Str ARGV3Str ARGV4Str</span><br/><span class=\"line\">&#34;return String KEYS1: KEYS1Str KEYS2:  KEYS2Str ARGV1: ARGV1Str ARGV2: ARGV2Str&#34;</span><br/><span class=\"line\"></span><br/><span class=\"line\">127.0.0.1:8379&gt; SCRIPT LOAD &#34;return redis.call(&#39;GET&#39;,&#39;evalShell&#39;)&#34;</span><br/><span class=\"line\">&#34;c870035beb27b1c404c19624c50b5e451ecf1623&#34;</span><br/><span class=\"line\">127.0.0.1:6379&gt; EVALSHA c870035beb27b1c404c19624c50b5e451ecf1623 0</span><br/><span class=\"line\">&#34;shellTest&#34;</span><br/></pre></td></tr></tbody></table></figure>\n<h5 id=\"redis-call-与redis-pcall\"><a href=\"#redis-call-与redis-pcall\" class=\"headerlink\" title=\"redis.call()与redis.pcall()\"></a>redis.call()与redis.pcall()</h5><p>可以使用两个不同函数来执行Redis命令，redis.call()和redis.pcall()两个函数的参数可以是任何格式良好(well formed)的 Redis 命令：</p>\n<p>使用样例：</p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">#最后的1如果为0代表的是没有keys是必须的 </span><br/><span class=\"line\">127.0.0.1:8379&gt; EVAL &#34;return redis.call(&#39;SET&#39;,KEYS[1],ARGV[1])&#34; 1 testLuaSet luaSetValue</span><br/><span class=\"line\">OK</span><br/><span class=\"line\">127.0.0.1:8379&gt; GET testLuaSet</span><br/><span class=\"line\">&#34;luaSetValue&#34;</span><br/><span class=\"line\">127.0.0.1:8379&gt; EVAL &#34;return redis.call(&#39;GET&#39;,KEYS[1])&#34; 1 testLuaSet</span><br/><span class=\"line\">&#34;luaSetValue&#34;</span><br/></pre></td></tr></tbody></table></figure>\n<p>这两个函数的唯一区别在于它们使用不同的方式处理执行命令所产生的错误，</p>\n<ul>\n<li>redis.call() 在执行命令的过程中发生错误时，脚本会停止执行，并返回一个脚本错误，错误的输出信息会说明错误造成的原因</li>\n<li>redis.pcall() 出错时并不引发(raise)错误，而是返回一个带 err 域的 Lua 表(table)，用于表示错误（这样与命令行客户端直接操作返回相同）：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:8379&gt; EVAL &#34;return redis.call(&#39;GET&#39;,&#39;evalShell&#39;,&#39;a&#39;)&#34; 0</span><br/><span class=\"line\">(error) ERR Error running script (call to f_8730e9f52481d51b1aadfd2960f8bc324ec56e58): @user_script:1: @user_script: 1: Wrong number of args calling Redis command From Lua script</span><br/><span class=\"line\">127.0.0.1:8379&gt; EVAL &#34;return redis.pcall(&#39;GET&#39;,&#39;evalShell&#39;,&#39;a&#39;)&#34; 0</span><br/><span class=\"line\">(error) @user_script: 1: Wrong number of args calling Redis command From Lua script</span><br/></pre></td></tr></tbody></table></figure>\n<h4 id=\"redis-lua数据类型映射\"><a href=\"#redis-lua数据类型映射\" class=\"headerlink\" title=\"redis lua数据类型映射\"></a>redis lua数据类型映射</h4><p>当 Lua 通过 call() 或 pcall() 函数执行 Redis 命令的时候，命令的返回值会被转换成 Lua 数据结构。同样地，当 Lua 脚本在 Redis 内置的解释器里运行时，Lua 脚本的返回值也会被转换成 Redis 协议(protocol)，然后由 EVAL 将值返回给客户端。</p>\n<p><strong>redis-&gt;lua</strong></p>\n<ul>\n<li>Redis 整数转换成 Lua numbers</li>\n<li>Redis bulk 回复转换成 Lua strings</li>\n<li>Redis 多条 bulk 回复转换成 Lua tables，tables 内可能有其他别的 Redis 数据类型</li>\n<li>Redis 状态回复转换成 Lua tables， tables 内的 ok 域包含了状态信息</li>\n<li>Redis 错误回复转换成 Lua tables ，tables 内的 err 域包含了错误信息</li>\n<li>Redis 的 Nil 回复和 Nil 多条回复转换成 Lua 的 booleans false</li>\n</ul>\n<p><strong>lua-&gt;redis</strong></p>\n<ul>\n<li>Lua numbers 转换成 Redis 整数</li>\n<li>Lua strings 换成 Redis bulk 回复</li>\n<li>Lua tables (array) 转换成 Redis 多条 bulk 回复</li>\n<li>一个带单个 ok 域的 Lua tables，转换成 Redis 状态回复</li>\n<li>一个带单个 err 域的 Lua tables ，转换成 Redis 错误回复</li>\n<li>Lua 的 booleans false 转换成 Redis 的 Nil bulk 回复</li>\n<li>Lua booleans true 转换成 Redis 整数回复中的 1 —- 额外的</li>\n</ul>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"># redis 中与 lua 各种类型转换</span><br/><span class=\"line\">127.0.0.1:8379&gt;  EVAL &#34;return {1,3.1415,&#39;luaStrings&#39;,true,false}&#34; 0</span><br/><span class=\"line\">1) (integer) 1</span><br/><span class=\"line\">2) (integer) 3</span><br/><span class=\"line\">3) &#34;luaStrings&#34;</span><br/><span class=\"line\">4) (integer) 1</span><br/><span class=\"line\">5) (nil)</span><br/><span class=\"line\">127.0.0.1:8379&gt;</span><br/></pre></td></tr></tbody></table></figure>\n<h4 id=\"Helper函数返回Redis类型\"><a href=\"#Helper函数返回Redis类型\" class=\"headerlink\" title=\"Helper函数返回Redis类型\"></a>Helper函数返回Redis类型</h4><p>从Lua返回Redis类型有两个 Helper 函数。</p>\n<ul>\n<li>redis.error_reply(error_string)返回错误回复。此函数只返回一个字段表，其中err字段设置为指定的字符串。</li>\n<li>redis.status_reply(status_string)返回状态回复。此函数只返回一个字段表，其中ok字段设置为指定的字符串。</li>\n</ul>\n<p>使用 Helper 函数或直接以指定的格式返回表之间没有区别，因此以下两种形式是等效的：</p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">return {err=&#34;My Error&#34;}</span><br/><span class=\"line\">return redis.error_reply(&#34;My Error&#34;)</span><br/></pre></td></tr></tbody></table></figure>\n<h4 id=\"script脚本缓存\"><a href=\"#script脚本缓存\" class=\"headerlink\" title=\"script脚本缓存\"></a>script脚本缓存</h4><p>Redis保证所有被运行过的脚本都会被永久保存在脚本缓存当中，这意味着，当EVAL命令在一个Redis实例上成功执行某个脚本之后，随后针对这个脚本的所有EVALSHA命令都会成功执行。</p>\n<p>刷新脚本缓存的唯一办法是显式地调用SCRIPT FLUSH 命令，这个命令会清空运行过的所有脚本的缓存。通常只有在云计算环境中，Redis 实例被改作其他客户或者别的应用程序的实例时，才会执行这个命令。</p>\n<p>缓存可以长时间储存而不产生内存问题的原因是，它们的体积非常小，而且数量也非常少，即使脚本在概念上类似于实现一个新命令，即使在一个大规模的程序里有成百上千的脚本，即使这些脚本会经常修改，即便如此，储存这些脚本的内存仍然是微不足道的。</p>\n<p>事实上，用户会发现 Redis 不移除缓存中的脚本实际上是一个好主意。比如说，对于一个和 Redis 保持持久化链接(persistent connection)的程序来说，它可以确信，执行过一次的脚本会一直保留在内存当中，因此它可以在 pipline中使用EVALSHA命令而不必担心因为找不到所需的脚本而产生错误。</p>\n<h4 id=\"script命令\"><a href=\"#script命令\" class=\"headerlink\" title=\"script命令\"></a>script命令</h4><p>Redis提供了以下几个SCRIPT命令，用于对脚本子系统(scripting subsystem)进行控制：</p>\n<p><strong>SCRIPT LOAD script</strong></p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">自2.6.0可用。</span><br/><span class=\"line\">时间复杂度：O(N) , N 为脚本的长度(以字节为单位)。</span><br/></pre></td></tr></tbody></table></figure>\n<p>说明：<br/>清除所有 Lua 脚本缓存。</p>\n<p>返回值：<br/>给定 script 的 SHA1 校验和</p>\n<p><strong>SCRIPT DEBUG YES|SYNC|NO</strong></p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">自3.2.0可用。</span><br/><span class=\"line\">时间复杂度：O(1)。</span><br/></pre></td></tr></tbody></table></figure>\n<p>说明：</p>\n<p>Redis包括一个完整的 Lua 调试器，代号 LDB，可用于使编写复杂脚本的任务更简单。在调试模式下，Redis 充当远程调试服务器，客户端 redis-cli 可以逐步执行脚本，设置断点，检查变量等 。<br/>应避免施工生产机器进行调试！</p>\n<p>LDB可以以两种模式之一启用：异步或同步。在异步模式下，服务器创建一个不阻塞的分支调试会话，并且在会话完成后，数据的所有更改都将回滚，因此可以使用相同的初始状态重新启动调试。同步调试模式在调试会话处于活动状态时阻塞服务器，并且数据集在结束后会保留所有更改。</p>\n<ul>\n<li>YES。启用Lua脚本的非阻塞异步调试（更改将被丢弃）。</li>\n<li>SYNC。启用阻止Lua脚本的同步调试（保存对数据的更改）。</li>\n<li>NO。禁用脚本调试模式。</li>\n</ul>\n<p>返回值：<br/>总是返回 OK</p>\n<p><strong>SCRIPT FLUSH</strong></p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">自2.6.0可用。</span><br/><span class=\"line\">时间复杂度：O(N) ， N 为缓存中脚本的数量。</span><br/></pre></td></tr></tbody></table></figure>\n<p>说明：<br/>清除所有 Lua 脚本缓存。</p>\n<p>返回值：<br/>总是返回 OK</p>\n<p><em>SCRIPT EXISTS sha1 [sha1 …]</em></p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">自2.6.0可用。</span><br/><span class=\"line\">时间复杂度：O(N) , N 为给定的 SHA1 校验和的数量。</span><br/></pre></td></tr></tbody></table></figure>\n<p>说明：</p>\n<p>给定一个或多个脚本的 SHA1 校验和，返回一个包含 0 和 1 的列表，表示校验和所指定的脚本是否已经被保存在缓存当中。</p>\n<p>返回值：</p>\n<p>一个列表，包含 0 和 1 ，前者表示脚本不存在于缓存，后者表示脚本已经在缓存里面了。</p>\n<p>列表中的元素和给定的 SHA1 校验和保持对应关系，比如列表的第三个元素的值就表示第三个 SHA1 校验和所指定的脚本在缓存中的状态。</p>\n<p><em>SCRIPT KILL</em></p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">自2.6.0可用。</span><br/><span class=\"line\">时间复杂度：O(1)。</span><br/></pre></td></tr></tbody></table></figure>\n<p>说明：<br/>杀死当前正在运行的 Lua 脚本，当且仅当这个脚本没有执行过任何写操作时，这个命令才生效。</p>\n<p>这个命令主要用于终止运行时间过长的脚本，比如一个因为 BUG 而发生无限 loop 的脚本，诸如此类。</p>\n<p>SCRIPT KILL 执行之后，当前正在运行的脚本会被杀死，执行这个脚本的客户端会从 EVAL 命令的阻塞当中退出，并收到一个错误作为返回值。</p>\n<p>另一方面，假如当前正在运行的脚本已经执行过写操作，那么即使执行 SCRIPT KILL ，也无法将它杀死，因为这是违反 Lua 脚本的原子性执行原则的。在这种情况下，唯一可行的办法是使用 SHUTDOWN NOSAVE 命令，通过停止整个 Redis 进程来停止脚本的运行，并防止不完整(half-written)的信息被写入数据库中。</p>\n<p>返回值：</p>\n<p>执行成功返回 OK ，否则返回一个错误。</p>\n<p>SCRIPT相关样例:</p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/><span class=\"line\">9</span><br/><span class=\"line\">10</span><br/><span class=\"line\">11</span><br/><span class=\"line\">12</span><br/><span class=\"line\">13</span><br/><span class=\"line\">14</span><br/><span class=\"line\">15</span><br/><span class=\"line\">16</span><br/><span class=\"line\">17</span><br/><span class=\"line\">18</span><br/><span class=\"line\">19</span><br/><span class=\"line\">20</span><br/><span class=\"line\">21</span><br/><span class=\"line\">22</span><br/><span class=\"line\">23</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"># 加载一个脚本到缓存</span><br/><span class=\"line\">127.0.0.1:8379&gt; SCRIPT LOAD &#34;return redis.call(&#39;SET&#39;,KEYS[1],ARGV[1])&#34;</span><br/><span class=\"line\">&#34;cf63a54c34e159e75e5a3fe4794bb2ea636ee005&#34;</span><br/><span class=\"line\"># EVALSHA 在后面会讲解，这里就是调用一个脚本缓冲</span><br/><span class=\"line\">127.0.0.1:8379&gt; EVALSHA cf63a54c34e159e75e5a3fe4794bb2ea636ee005 1 ttestScript evalSHATest</span><br/><span class=\"line\">OK</span><br/><span class=\"line\">127.0.0.1:8379&gt; GET ttestScript</span><br/><span class=\"line\">&#34;evalSHATest&#34;</span><br/><span class=\"line\">127.0.0.1:8379&gt; SCRIPT EXISTS cf63a54c34e159e75e5a3fe4794bb2ea636ee005</span><br/><span class=\"line\">1) (integer) 1</span><br/><span class=\"line\"># 这里有三个 SHA 第一第三是随便输入的，检测是否存在脚本缓存</span><br/><span class=\"line\">127.0.0.1:8379&gt; SCRIPT EXISTS  nonsha cf63a54c34e159e75e5a3fe4794bb2ea636ee005 abc</span><br/><span class=\"line\">1) (integer) 0</span><br/><span class=\"line\">2) (integer) 1</span><br/><span class=\"line\">3) (integer) 0</span><br/><span class=\"line\"># 清空脚本缓存</span><br/><span class=\"line\">127.0.0.1:8379&gt; SCRIPT FLUSH</span><br/><span class=\"line\">OK</span><br/><span class=\"line\">127.0.0.1:8379&gt; SCRIPT EXISTS cf63a54c34e159e75e5a3fe4794bb2ea636ee005</span><br/><span class=\"line\">1) (integer) 0</span><br/><span class=\"line\"># 清除脚本缓存后再次执行就找不到该脚本了</span><br/><span class=\"line\">127.0.0.1:8379&gt; SCRIPT KILL</span><br/><span class=\"line\">(error) NOTBUSY No scripts in execution right now.</span><br/></pre></td></tr></tbody></table></figure>\n<h2 id=\"redis-lua脚本注意\"><a href=\"#redis-lua脚本注意\" class=\"headerlink\" title=\"redis lua脚本注意\"></a>redis lua脚本注意</h2><h4 id=\"纯函数限制\"><a href=\"#纯函数限制\" class=\"headerlink\" title=\"纯函数限制\"></a>纯函数限制</h4><p>在编写脚本方面，脚本应该被写成纯函数(pure function)。也就脚本应该具有以下属性：</p>\n<p>对于同样的数据集输入，给定相同的参数，脚本执行的 Redis 写命令总是相同的。脚本执行的操作不能依赖于任何隐藏(非显式)数据，不能依赖于脚本在执行过程中、或脚本在不同执行时期之间可能变更的状态，并且它也不能依赖于任何来自 I/O 设备的外部输入。<br/>使用系统时间(system time)，调用像 RANDOMKEY 那样的随机命令，或者使用 Lua 的随机数生成器，类似以上的这些操作，都会造成脚本的求值无法每次都得出同样的结果。</p>\n<p>为了确保脚本符合上面所说的属性，redis做了以下工作：</p>\n<p><strong>Lua 没有访问系统时间或者其他内部状态的命令</strong></p>\n<ul>\n<li><p>Redis 会返回一个错误，阻止这样的脚本运行： 这些脚本在执行随机命令之后(比如 RANDOMKEY 、 SRANDMEMBER 或 TIME 等)，还会执行可以修改数据集的 Redis 命令。如果脚本只是执行只读操作，那么就没有这一限制。注意，随机命令并不一定就指那些带 RAND 字眼的命令，任何带有非确定性的命令都会被认为是随机命令，比如 TIME 命令就是这方面的一个很好的例子。</p>\n</li>\n<li><p>每当从 Lua 脚本中调用那些返回无序元素的命令时，执行命令所得的数据在返回给 Lua 之前会先执行一个静默(slient)的字典序排序(lexicographical sorting)。举个例子，因为 Redis 的 Set 保存的是无序的元素，所以在 Redis 命令行客户端中直接执行 SMEMBERS ，返回的元素是无序的，但是，假如在脚本中执行 redis.call(“smembers”, KEYS[1]) ，那么返回的总是排过序的元素。</p>\n</li>\n<li><p>对 Lua 的伪随机数生成函数 math.random 和 math.randomseed 进行修改，使得每次在运行新脚本的时候，总是拥有同样的 seed 值。这意味着，每次运行脚本时，只要不使用 math.randomseed，那么 math.random 产生的随机数序列总是相同的。</p>\n</li>\n</ul>\n<p><strong>redis lua脚本中不允许存在function</strong></p>\n<p>执行以下函数会报错</p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">function fun()</span><br/><span class=\"line\">  --- 业务逻辑</span><br/><span class=\"line\">end</span><br/></pre></td></tr></tbody></table></figure>\n<p><strong>全局变量保护</strong></p>\n<p>为了防止不必要的数据泄漏进Lua环境， Redis脚本不允许创建全局变量。如果一个脚本需要在多次执行之间维持某种状态，它应该使用 Redis key 来进行状态保存。</p>\n<p>企图在脚本中访问一个全局变量(不论这个变量是否存在)将引起脚本停止， EVAL 命令会返回一个错误：</p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:8379&gt; EVAL &#34;website=&#39;coderknock.com&#39;&#34; 0</span><br/><span class=\"line\">(error) ERR Error running script (call to f_ad03e14e835e9880720cd43db8062256c089cd79): @enable_strict_lua:8: user_script:1: Script attempted to create global variable &#39;website&#39;</span><br/></pre></td></tr></tbody></table></figure>\n<ul>\n<li>避免引入全局变量的一个诀窍是：将脚本中用到的所有变量都使用 local 关键字定义为局部变量。</li>\n</ul>\n<h4 id=\"redis-lua依赖库\"><a href=\"#redis-lua依赖库\" class=\"headerlink\" title=\"redis lua依赖库\"></a>redis lua依赖库</h4><p>Redis 内置的 Lua 解释器加载了以下 Lua 库：<br/>base，table，string，math，debug，cjson，cmsgpack</p>\n<p>其中 cjson 库可以让 Lua 以非常快的速度处理 JSON 数据，除此之外，其他别的都是 Lua 的标准库。<br/>每个 Redis 实例都保证会加载上面列举的库，从而确保每个 Redis 脚本的运行环境都是相同的。<br/>下面展示cjson 的使用，Lua 脚本如下：</p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/><span class=\"line\">9</span><br/><span class=\"line\">10</span><br/><span class=\"line\">11</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">local json = cjson</span><br/><span class=\"line\">local str = &#39;{&#34;key1&#34;:&#34;value1&#34;}&#39;</span><br/><span class=\"line\"># 反列化</span><br/><span class=\"line\">local j = json.decode(str)</span><br/><span class=\"line\">for k, v in pairs(j) do</span><br/><span class=\"line\">    print(k, v)</span><br/><span class=\"line\">end</span><br/><span class=\"line\"></span><br/><span class=\"line\">j[&#39;key2&#39;] = &#39;value2&#39;</span><br/><span class=\"line\"># 序列化</span><br/><span class=\"line\">return json.encode(j)</span><br/></pre></td></tr></tbody></table></figure>\n<p>执行脚本:</p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">sudo /home/redis-5.0.3/src/redis-cli -p 8379 --eval ~/cjson_lua.lua</span><br/><span class=\"line\"># 返回</span><br/><span class=\"line\">&#34;{&#34;key1&#34;:&#34;value1&#34;,&#34;key2&#34;:&#34;value2&#34;}&#34;</span><br/></pre></td></tr></tbody></table></figure>\n<h4 id=\"脚本散发日志\"><a href=\"#脚本散发日志\" class=\"headerlink\" title=\"脚本散发日志\"></a>脚本散发日志</h4><p>在 Lua 脚本中，可以通过调用 redis.log 函数来写 Redis 日志(log)：</p>\n<p>redis.log(loglevel, message)</p>\n<p>其中， message 参数是一个字符串，而 loglevel 参数可以是以下任意一个值：</p>\n<p>redis.LOG_DEBUG<br/>redis.LOG_VERBOSE<br/>redis.LOG_NOTICE<br/>redis.LOG_WARNING<br/>上面的这些等级(level)和标准 Redis 日志的等级相对应。</p>\n<p>对于脚本散发(emit)的日志，只有那些和当前 Redis 实例所设置的日志等级相同或更高级的日志才会被散发。例子：</p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/><span class=\"line\">9</span><br/><span class=\"line\">10</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">local json = cjson</span><br/><span class=\"line\">local str = &#39;{&#34;key1&#34;:&#34;value1&#34;}&#39;</span><br/><span class=\"line\">local j = json.decode(str)</span><br/><span class=\"line\">for k, v in pairs(j) do</span><br/><span class=\"line\">    print(k, v)</span><br/><span class=\"line\">end</span><br/><span class=\"line\">j[&#39;key2&#39;] = &#39;value2&#39;</span><br/><span class=\"line\"># 日志打印，会在server端日志文件进行打印</span><br/><span class=\"line\">redis.log(redis.LOG_WARNING, &#34;lua脚本日志测试&#34;)</span><br/><span class=\"line\">return json.encode(j)</span><br/></pre></td></tr></tbody></table></figure>\n<h4 id=\"沙箱-sandbox-和最大执行时间\"><a href=\"#沙箱-sandbox-和最大执行时间\" class=\"headerlink\" title=\"沙箱(sandbox)和最大执行时间\"></a>沙箱(sandbox)和最大执行时间</h4><p>脚本应该仅仅用于传递参数和对 Redis 数据进行处理，它不应该尝试去访问外部系统(比如文件系统)，或者执行任何系统调用。</p>\n<p>除此之外，脚本还有一个最大执行时间限制，它的默认值是 5 秒钟，一般正常运作的脚本通常可以在几分之几毫秒之内完成，花不了那么多时间，这个限制主要是为了防止因编程错误而造成的无限循环而设置的。</p>\n<p>最大执行时间的长短由 lua-time-limit 选项来控制(以毫秒为单位)，可以通过编辑 redis.conf 文件或者使用 CONFIG GET 和 CONFIG SET 命令来修改它。</p>\n<p>当一个脚本达到最大执行时间的时候，它并不会自动被 Redis 结束，因为 Redis 必须保证脚本执行的原子性，而中途停止脚本的运行意味着可能会留下未处理完的数据在数据集(data set)里面。</p>\n<p>因此，当脚本运行的时间超过最大执行时间后，以下动作会被执行：</p>\n<ul>\n<li>Redis 记录一个脚本正在超时运行</li>\n<li>Redis 开始重新接受其他客户端的命令请求，但是只有 SCRIPT KILL 和 SHUTDOWN NOSAVE 两个命令会被处理，对于其他命令请求， Redis 服务器只是简单地返回 BUSY 错误。</li>\n<li>可以使用 SCRIPT KILL 命令将一个仅执行只读命令的脚本杀死，因为只读命令并不修改数据，因此杀死这个脚本并不破坏数据的完整性</li>\n<li>如果脚本已经执行过写命令，那么唯一允许执行的操作就是 SHUTDOWN NOSAVE ，它通过停止服务器来阻止当前数据集写入磁盘</li>\n</ul>\n<h4 id=\"pipeline上下文-context-中的-EVALSHA\"><a href=\"#pipeline上下文-context-中的-EVALSHA\" class=\"headerlink\" title=\"pipeline上下文(context)中的 EVALSHA\"></a>pipeline上下文(context)中的 EVALSHA</h4><p>在 pipeline 请求的上下文中使用 EVALSHA 命令时，要特别小心，因为在 pipeline 中，必须保证命令的执行顺序。</p>\n<p>一旦在 pipeline 中因为 EVALSHA 命令而发生 NOSCRIPT 错误，那么这个 pipeline 就再也没有办法重新执行了，否则的话，命令的执行顺序就会被打乱。</p>\n<p>为了防止出现以上所说的问题，客户端库实现应该实施以下的其中一项措施：</p>\n<ul>\n<li>总是在 pipeline 中使用 EVAL 命令</li>\n<li>检查 pipeline 中要用到的所有命令，找到其中的 EVAL 命令，并使用 SCRIPT EXISTS 命令检查要用到的脚本是不是全都已经保存在缓存里面了。如果所需的全部脚本都可以在缓存里找到，那么就可以放心地将所有 EVAL 命令改成 EVALSHA 命令，否则的话，就要在pipeline 的顶端(top)将缺少的脚本用 SCRIPT LOAD 命令加上去。</li>\n</ul>\n<p>知识点介绍参考资料：<br/><a href=\"https://redis.io/commands/eval\" target=\"_blank\" rel=\"noopener noreferrer\">redis官方资料</a><br/><a href=\"https://segmentfault.com/a/1190000009811453#articleHeader1\" target=\"_blank\" rel=\"noopener noreferrer\">redis lua脚本资料</a><br/><a href=\"https://redisbook.readthedocs.io/en/latest/feature/scripting.html\" target=\"_blank\" rel=\"noopener noreferrer\">redis lua脚本原理</a></p>\n<h2 id=\"通过例子学习redis-lua使用\"><a href=\"#通过例子学习redis-lua使用\" class=\"headerlink\" title=\"通过例子学习redis lua使用\"></a>通过例子学习redis lua使用</h2><p>通过一个业务场景来展示redis lua脚本的使用，业务场景如下：<br/>redis string存储如下用户对象：</p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/><span class=\"line\">9</span><br/><span class=\"line\">10</span><br/><span class=\"line\">11</span><br/><span class=\"line\">12</span><br/><span class=\"line\">13</span><br/><span class=\"line\">14</span><br/><span class=\"line\">15</span><br/><span class=\"line\">16</span><br/><span class=\"line\">17</span><br/><span class=\"line\">18</span><br/><span class=\"line\">19</span><br/><span class=\"line\">20</span><br/><span class=\"line\">21</span><br/><span class=\"line\">22</span><br/><span class=\"line\">23</span><br/><span class=\"line\">24</span><br/><span class=\"line\">25</span><br/><span class=\"line\">26</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">key：user_1</span><br/><span class=\"line\">value:</span><br/><span class=\"line\">{</span><br/><span class=\"line\">  &#34;id&#34;: 1,</span><br/><span class=\"line\">  &#34;name&#34;: &#34;zhangsan&#34;,</span><br/><span class=\"line\">  &#34;age&#34;: 25,</span><br/><span class=\"line\">  &#34;email&#34;: &#34;zhangsan@redis.com&#34;</span><br/><span class=\"line\">}</span><br/><span class=\"line\"></span><br/><span class=\"line\">key:user_2</span><br/><span class=\"line\">value:</span><br/><span class=\"line\">{</span><br/><span class=\"line\">  &#34;id&#34;: 2,</span><br/><span class=\"line\">  &#34;name&#34;: &#34;lisi&#34;,</span><br/><span class=\"line\">  &#34;age&#34;: 10,</span><br/><span class=\"line\">  &#34;email&#34;: &#34;lisi@redis.com&#34;</span><br/><span class=\"line\">}</span><br/><span class=\"line\"></span><br/><span class=\"line\">key:user_3</span><br/><span class=\"line\">value:</span><br/><span class=\"line\">{</span><br/><span class=\"line\">  &#34;id&#34;: 3,</span><br/><span class=\"line\">  &#34;name&#34;: &#34;wangwu&#34;,</span><br/><span class=\"line\">  &#34;age&#34;: 30,</span><br/><span class=\"line\">  &#34;email&#34;: &#34;wangwu@redis.com&#34;</span><br/><span class=\"line\">}</span><br/></pre></td></tr></tbody></table></figure>\n<p>通过redis lua实现一次性读取多个指定用户信息， 即通过指定user_1,user_2可以一次性返回用户列表数据。并转化为json数据输出</p>\n<p><strong>基础数据导入</strong></p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:8379&gt; set user_1 &#39;{&#34;id&#34;:1,&#34;name&#34;:&#34;zhangsan&#34;,&#34;age&#34;:25,&#34;email&#34;:&#34;zhangsan@redis.com&#34;}&#39;</span><br/><span class=\"line\">OK</span><br/><span class=\"line\">127.0.0.1:8379&gt; set user_2 &#39;{&#34;id&#34;:2,&#34;name&#34;:&#34;lisi&#34;,&#34;age&#34;:10,&#34;email&#34;:&#34;lisi@redis.com&#34;}&#39;</span><br/><span class=\"line\">OK</span><br/><span class=\"line\">127.0.0.1:8379&gt; set user_3 &#39;{&#34;id&#34;:3,&#34;name&#34;:&#34;wangwu&#34;,&#34;age&#34;:30,&#34;email&#34;:&#34;wangwu@redis.com&#34;}&#39;</span><br/><span class=\"line\">OK</span><br/><span class=\"line\">127.0.0.1:8379&gt; get user_1</span><br/><span class=\"line\">&#34;{&#34;id&#34;:1,&#34;name&#34;:&#34;zhangsan&#34;,&#34;age&#34;:25,&#34;email&#34;:&#34;zhangsan@redis.com&#34;}&#34;</span><br/></pre></td></tr></tbody></table></figure>\n<p><strong>脚本设计</strong></p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/><span class=\"line\">9</span><br/><span class=\"line\">10</span><br/><span class=\"line\">11</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">local json = cjson</span><br/><span class=\"line\">local user_map = {}</span><br/><span class=\"line\">for i, k in pairs(KEYS) do</span><br/><span class=\"line\">    -- 从redis获取数据</span><br/><span class=\"line\">    local str = redis.call(&#39;GET&#39;, k)</span><br/><span class=\"line\">    -- json反序列化</span><br/><span class=\"line\">    local user = json.decode(str)</span><br/><span class=\"line\">    user_map[k] = user</span><br/><span class=\"line\">end</span><br/><span class=\"line\">-- json序列化</span><br/><span class=\"line\">return json.encode(user_map)</span><br/></pre></td></tr></tbody></table></figure>\n<p><strong>脚本执行以及输出</strong></p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\">-- debug方式执行功能</span><br/><span class=\"line\">[yongssu@l-ddr1.vc.dev.cn0 ~]$ sudo /home//redis-5.0.3/src/redis-cli -p 8379 --ldb --eval redis_lua.lua user_1 user_2</span><br/><span class=\"line\">&#34;{&#34;user_1&#34;:{&#34;id&#34;:1,&#34;age&#34;:25,&#34;name&#34;:&#34;zhangsan&#34;,&#34;email&#34;:&#34;zhangsan@redis.com&#34;},&#34;user_2&#34;:{&#34;id&#34;:2,&#34;age&#34;:10,&#34;name&#34;:&#34;lisi&#34;,&#34;email&#34;:&#34;lisi@redis.com&#34;}}&#34;</span><br/><span class=\"line\">-- 正常方式执行</span><br/><span class=\"line\">[yongssu@l-ddr1.vc.dev.cn0 ~]$ sudo /home/redis-5.0.3/src/redis-cli -p 8379 --eval redis_lua.lua user_1 user_2</span><br/><span class=\"line\">&#34;{&#34;user_1&#34;:{&#34;id&#34;:1,&#34;age&#34;:25,&#34;name&#34;:&#34;zhangsan&#34;,&#34;email&#34;:&#34;zhangsan@redis.com&#34;},&#34;user_2&#34;:{&#34;id&#34;:2,&#34;age&#34;:10,&#34;name&#34;:&#34;lisi&#34;,&#34;email&#34;:&#34;lisi@redis.com&#34;}}&#34;</span><br/></pre></td></tr></tbody></table></figure>","text":"redis lua简介Lua 脚本功能是Reids2.6版本的最大亮点， 通过内嵌对Lua环境的支持，Redis解决了长久以来不能高效地处理CAS（check-and-set）命令的缺点，并且可以通过组合使用多个命令，轻松实现以前很难实现或者不能高效实现的模式。 基本命令EVAL...","link":"","photos":[],"count_time":{"symbolsCount":"12k","symbolsTime":"11 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#redis-lua%E7%AE%80%E4%BB%8B\"><span class=\"toc-text\">redis lua简介</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4\"><span class=\"toc-text\">基本命令</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#EVAL%E4%B8%8EEVALSHA\"><span class=\"toc-text\">EVAL与EVALSHA</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#redis-call-%E4%B8%8Eredis-pcall\"><span class=\"toc-text\">redis.call()与redis.pcall()</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#redis-lua%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E6%98%A0%E5%B0%84\"><span class=\"toc-text\">redis lua数据类型映射</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Helper%E5%87%BD%E6%95%B0%E8%BF%94%E5%9B%9ERedis%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">Helper函数返回Redis类型</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#script%E8%84%9A%E6%9C%AC%E7%BC%93%E5%AD%98\"><span class=\"toc-text\">script脚本缓存</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#script%E5%91%BD%E4%BB%A4\"><span class=\"toc-text\">script命令</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#redis-lua%E8%84%9A%E6%9C%AC%E6%B3%A8%E6%84%8F\"><span class=\"toc-text\">redis lua脚本注意</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%BA%AF%E5%87%BD%E6%95%B0%E9%99%90%E5%88%B6\"><span class=\"toc-text\">纯函数限制</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#redis-lua%E4%BE%9D%E8%B5%96%E5%BA%93\"><span class=\"toc-text\">redis lua依赖库</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%84%9A%E6%9C%AC%E6%95%A3%E5%8F%91%E6%97%A5%E5%BF%97\"><span class=\"toc-text\">脚本散发日志</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%B2%99%E7%AE%B1-sandbox-%E5%92%8C%E6%9C%80%E5%A4%A7%E6%89%A7%E8%A1%8C%E6%97%B6%E9%97%B4\"><span class=\"toc-text\">沙箱(sandbox)和最大执行时间</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#pipeline%E4%B8%8A%E4%B8%8B%E6%96%87-context-%E4%B8%AD%E7%9A%84-EVALSHA\"><span class=\"toc-text\">pipeline上下文(context)中的 EVALSHA</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%80%9A%E8%BF%87%E4%BE%8B%E5%AD%90%E5%AD%A6%E4%B9%A0redis-lua%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">通过例子学习redis lua使用</span></a></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"TeX的家族：LaTeX， pdfTeX， XeTeX， LuaTeX和ConTeXt","uid":"4f3b427795036a345051a70800a946ba","slug":"zl/2016-01-01-560_TeX的家族：LaTeX， pdfTeX， XeTeX， LuaTeX和ConTeXt","date":"2024-04-03T03:47:35.820Z","updated":"2024-04-03T03:47:35.821Z","comments":true,"path":"api/articles/zl/2016-01-01-560_TeX的家族：LaTeX， pdfTeX， XeTeX， LuaTeX和ConTeXt.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"最近这段时间一直在研究LaTeX，但是一直被各种各样的词汇搞到晕头转向，后来找到了两篇文章，文章中对于各种名词的解释比较到位，并从TeX的发展讲解了整个历史，其中一个作者更是绘制出了整个家族树，对于理解TeX的历史很有帮助，奈何两篇文章都是英文，这么好的文章应该分享给国内的朋友们...","link":"","photos":[],"count_time":{"symbolsCount":"3.5k","symbolsTime":"3 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Ubuntu 16.04 安装 Lua","uid":"b846e9031168232c457a5aa39f3aa147","slug":"zl/2016-01-01-556_Ubuntu 16.04 安装 Lua","date":"2024-04-03T03:47:35.819Z","updated":"2024-04-03T03:47:35.819Z","comments":true,"path":"api/articles/zl/2016-01-01-556_Ubuntu 16.04 安装 Lua.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"在 Linux 系统上使用以下命令编译安装 Lua： curl -R -O http://www.lua.org/ftp/lua-5.3.3.tar.gz tar zxf lua-5.3.3.tar.gz cd lua-5.3.3 make linux test 安装 make编...","link":"","photos":[],"count_time":{"symbolsCount":"1.8k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}