{"title":"lua基础学习","uid":"0413f102a34fef56ad449f1f49401157","slug":"zl/2016-01-01-379_lua基础学习","date":"2024-04-03T03:47:35.664Z","updated":"2024-04-03T03:47:35.668Z","comments":true,"path":"api/articles/zl/2016-01-01-379_lua基础学习.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<p>lua基础学习<br/></p>\n<h2 id=\"lua数据类型\"><a href=\"#lua数据类型\" class=\"headerlink\" title=\"lua数据类型\"></a>lua数据类型</h2><p>八大基本数据类型<br/>nil（空），boolean（布尔），number（数字），string（字符串），userdata(自定义类型），function（函数），thread（线程），table（表）</p>\n<h1 id=\"lua与C-交互\"><a href=\"#lua与C-交互\" class=\"headerlink\" title=\"lua与C++交互\"></a>lua与C++交互</h1><p><img src=\"http://www.cnblogs.com/sifenkesi/p/3876745.html\" alt=\"lua中调用C函数\"/><br/><img src=\"https://my.oschina.net/xlplbo/blog/314956\" alt=\"C/C++和Lua是如何进行通信的\"/></p>\n<h2 id=\"lua-State状态机\"><a href=\"#lua-State状态机\" class=\"headerlink\" title=\"lua_State状态机\"></a>lua_State状态机</h2><p>lua_State主要是管理一个lua虚拟机的执行环境, 一个lua虚拟机可以有多个执行环境。Lua虚拟机通过维护这样一个虚拟栈来实现两种之间的通信，lua_State定义如下：<br/></p><figure class=\"highlight c\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/><span class=\"line\">9</span><br/><span class=\"line\">10</span><br/><span class=\"line\">11</span><br/><span class=\"line\">12</span><br/><span class=\"line\">13</span><br/><span class=\"line\">14</span><br/><span class=\"line\">15</span><br/><span class=\"line\">16</span><br/><span class=\"line\">17</span><br/><span class=\"line\">18</span><br/><span class=\"line\">19</span><br/><span class=\"line\">20</span><br/><span class=\"line\">21</span><br/><span class=\"line\">22</span><br/><span class=\"line\">23</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span>  {</span></span><br/><span class=\"line\">  CommonHeader;</span><br/><span class=\"line\">  lu_byte status;</span><br/><span class=\"line\">  StkId top;  </span><br/><span class=\"line\">  global_State *l_G;</span><br/><span class=\"line\">  CallInfo *ci;  <span class=\"comment\">/* call info for current function */</span></span><br/><span class=\"line\">  <span class=\"keyword\">const</span> Instruction *oldpc;  <span class=\"comment\">/* last pc traced */</span></span><br/><span class=\"line\">  StkId stack_last;  <span class=\"comment\">/* last free slot in the stack */</span></span><br/><span class=\"line\">  StkId <span class=\"built_in\">stack</span>;  <span class=\"comment\">/* stack base */</span></span><br/><span class=\"line\">  <span class=\"keyword\">int</span> stacksize;</span><br/><span class=\"line\">  <span class=\"keyword\">unsigned</span> <span class=\"keyword\">short</span> nny;  <span class=\"comment\">/* number of non-yieldable calls in stack */</span></span><br/><span class=\"line\">  <span class=\"keyword\">unsigned</span> <span class=\"keyword\">short</span> nCcalls;  <span class=\"comment\">/* number of nested C calls */</span></span><br/><span class=\"line\">  lu_byte hookmask;</span><br/><span class=\"line\">  lu_byte allowhook;</span><br/><span class=\"line\">  <span class=\"keyword\">int</span> basehookcount;</span><br/><span class=\"line\">  <span class=\"keyword\">int</span> hookcount;</span><br/><span class=\"line\">  lua_Hook hook;</span><br/><span class=\"line\">  GCObject *openupval;  <span class=\"comment\">/* list of open upvalues in this stack */</span></span><br/><span class=\"line\">  GCObject *gclist;</span><br/><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">lua_longjmp</span> *<span class=\"title\">errorJmp</span>;</span>  <span class=\"comment\">/* current error recover point */</span></span><br/><span class=\"line\">  <span class=\"keyword\">ptrdiff_t</span> errfunc;  <span class=\"comment\">/* current error handling function (stack index) */</span></span><br/><span class=\"line\">  CallInfo base_ci;  <span class=\"comment\">/* CallInfo for first level (C calling Lua) */</span></span><br/><span class=\"line\">};</span><br/></pre></td></tr></tbody></table></figure><p></p>\n<h2 id=\"数据类型转换\"><a href=\"#数据类型转换\" class=\"headerlink\" title=\"数据类型转换\"></a>数据类型转换</h2><p>C/C++和Lua拥有不同的数据类型，要实现两者之间的数据通信怎么办？Lua虚拟机提供Lua_State这样一种数据结构。任何一种数据从C/C++传入Lua虚拟机中，Lua都会将这类数据转换为一种通用的结构lua_TValue，并且将数据复制一份，将其压入虚拟栈中。lua_TValue定义如下：<br/></p><figure class=\"highlight c\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/><span class=\"line\">9</span><br/><span class=\"line\">10</span><br/><span class=\"line\">11</span><br/><span class=\"line\">12</span><br/><span class=\"line\">13</span><br/><span class=\"line\">14</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">lua_TValue</span> {</span></span><br/><span class=\"line\">  TValuefields;</span><br/><span class=\"line\">};</span><br/><span class=\"line\"></span><br/><span class=\"line\"></span><br/><span class=\"line\">    <span class=\"keyword\">union</span> { <span class=\"class\"><span class=\"keyword\">struct</span> {</span> Value v__; <span class=\"keyword\">int</span> tt__; } i; <span class=\"keyword\">double</span> d__; } u</span><br/><span class=\"line\"></span><br/><span class=\"line\"><span class=\"keyword\">union</span> Value {</span><br/><span class=\"line\">  GCObject *gc;    <span class=\"comment\">/* collectable objects */</span></span><br/><span class=\"line\">  <span class=\"keyword\">void</span> *p;         <span class=\"comment\">/* light userdata */</span></span><br/><span class=\"line\">  <span class=\"keyword\">int</span> b;           <span class=\"comment\">/* booleans */</span></span><br/><span class=\"line\">  lua_CFunction f; <span class=\"comment\">/* light C functions */</span></span><br/><span class=\"line\">  numfield         <span class=\"comment\">/* numbers */</span></span><br/><span class=\"line\">};</span><br/></pre></td></tr></tbody></table></figure><p></p>\n<p> Lua有自己的GC，C/C++由自己申请和释放内存，所以两者之间的内存管理是独立的。从C/C++中传递数据到Lua虚拟机会发生数据拷贝，从Lua虚拟机中传递出来是直接从虚拟栈中取值或者地址，所以数据从虚拟栈中pop之后，是否依然是有效引用需要额外注意。</p>\n<h1 id=\"lua垃圾收集机制\"><a href=\"#lua垃圾收集机制\" class=\"headerlink\" title=\"lua垃圾收集机制\"></a>lua垃圾收集机制</h1><h1 id=\"热更新\"><a href=\"#热更新\" class=\"headerlink\" title=\"热更新\"></a>热更新</h1><p>热更新也叫不停机更新，是在游戏服务器运行期间对游戏进行更新。实现不停机修正bug、修改游戏数据等操作。也可以这样讲：一辆车以时速150km跑着，突然爆胎了，然后司机告诉你，我不停车，你去把轮胎换了</p>\n<h2 id=\"热更新原理\"><a href=\"#热更新原理\" class=\"headerlink\" title=\"热更新原理\"></a>热更新原理</h2><p>第一种：<br/>lua中的require会阻止多次加载相同的模块。所以当需要更新系统的时候，要卸载掉响应的模块。（把package.loaded里对应模块名下设置为nil，以保证下次require重新加载）并把全局表中的对应的模块表置 nil 。同时把数据记录在专用的全局表下，并用 local 去引用它。初始化这些数据的时候，首先应该检查他们是否被初始化过了。这样来保证数据不被更新过程重置。<br/></p><figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">reloadUp</span><span class=\"params\">(module_name)</span></span></span><br/><span class=\"line\">    <span class=\"built_in\">package</span>.<span class=\"built_in\">loaded</span>[modulename] = <span class=\"literal\">nil</span></span><br/><span class=\"line\">    <span class=\"built_in\">require</span>(modulename)</span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/></pre></td></tr></tbody></table></figure><p></p>\n<p>这种做法简单粗暴，虽然能完成热更新，但是问题很多，旧的引用的模块无法得到更新，这种程度的热更新显然不能满足现在的游戏开发需求。</p>\n<p>第二种：<br/></p><figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br/><span class=\"line\">2</span><br/><span class=\"line\">3</span><br/><span class=\"line\">4</span><br/><span class=\"line\">5</span><br/><span class=\"line\">6</span><br/><span class=\"line\">7</span><br/><span class=\"line\">8</span><br/><span class=\"line\">9</span><br/><span class=\"line\">10</span><br/><span class=\"line\">11</span><br/><span class=\"line\">12</span><br/><span class=\"line\">13</span><br/></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">reloadUp</span><span class=\"params\">(module_name)</span></span></span><br/><span class=\"line\">    <span class=\"keyword\">local</span> old_module = <span class=\"built_in\">_G</span>[module_name]</span><br/><span class=\"line\"></span><br/><span class=\"line\">    <span class=\"built_in\">package</span>.<span class=\"built_in\">loaded</span>[module_name] = <span class=\"literal\">nil</span></span><br/><span class=\"line\">    <span class=\"built_in\">require</span> (module_name)</span><br/><span class=\"line\"></span><br/><span class=\"line\">    <span class=\"keyword\">local</span> new_module = <span class=\"built_in\">_G</span>[module_name]</span><br/><span class=\"line\">    <span class=\"keyword\">for</span> k, v <span class=\"keyword\">in</span> <span class=\"built_in\">pairs</span>(new_module) <span class=\"keyword\">do</span></span><br/><span class=\"line\">        old_module[k] = v</span><br/><span class=\"line\">    <span class=\"keyword\">end</span></span><br/><span class=\"line\"></span><br/><span class=\"line\">    <span class=\"built_in\">package</span>.<span class=\"built_in\">loaded</span>[module_name] = old_module</span><br/><span class=\"line\"><span class=\"keyword\">end</span></span><br/></pre></td></tr></tbody></table></figure><p></p>","text":"lua基础学习 lua数据类型八大基本数据类型nil（空），boolean（布尔），number（数字），string（字符串），userdata(自定义类型），function（函数），thread（线程），table（表） lua与C++交互 lua_State状态机lua_...","link":"","photos":[],"count_time":{"symbolsCount":"2.4k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#lua%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">lua数据类型</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#lua%E4%B8%8EC-%E4%BA%A4%E4%BA%92\"><span class=\"toc-text\">lua与C++交互</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#lua-State%E7%8A%B6%E6%80%81%E6%9C%BA\"><span class=\"toc-text\">lua_State状态机</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2\"><span class=\"toc-text\">数据类型转换</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#lua%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E6%9C%BA%E5%88%B6\"><span class=\"toc-text\">lua垃圾收集机制</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%83%AD%E6%9B%B4%E6%96%B0\"><span class=\"toc-text\">热更新</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%83%AD%E6%9B%B4%E6%96%B0%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">热更新原理</span></a></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Linux 下 lua 开发环境安装及安装 luafilesystem","uid":"8f4c30a76f8d788c178eb45d61a32358","slug":"zl/2016-01-01-380_Linux 下 lua 开发环境安装及安装 luafilesystem","date":"2024-04-03T03:47:35.668Z","updated":"2024-04-03T03:47:35.669Z","comments":true,"path":"api/articles/zl/2016-01-01-380_Linux 下 lua 开发环境安装及安装 luafilesystem.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"火云邪神语录：天下武功，无坚不破，唯快不破！Nginx 的看家本领就是速度，Lua 的拿手好戏亦是速度，这两者的结合在速度上无疑有基因上的优势。 最近一直再折腾这个，干脆就稍微整理下。以防后面继续跳坑！ 安装： 1.先安装 lua 的相关依赖安装 C 开发环境由于 gcc 包需要...","link":"","photos":[],"count_time":{"symbolsCount":"2.8k","symbolsTime":"3 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"基于COM组件接口ICMLuaUtil的BypassUAC","uid":"7db197bf46894f90ba498dec9a89d5fd","slug":"zl/2016-01-01-378_基于COM组件接口ICMLuaUtil的BypassUAC","date":"2024-04-03T03:47:35.663Z","updated":"2024-04-03T03:47:35.664Z","comments":true,"path":"api/articles/zl/2016-01-01-378_基于COM组件接口ICMLuaUtil的BypassUAC.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"lfish 提权原理 COM提升名称（COM Elevation Moniker）技术允许运行在用户账户控制下的应用程序用提升权限的方法来激活COM类，以提升COM接口权限。同时，ICMLuaUtil接口提供了ShellExec方法来执行命令，创建指定进程。 因此，我们可以利用C...","link":"","photos":[],"count_time":{"symbolsCount":"7.2k","symbolsTime":"7 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua文章","slug":"lua文章","count":1133,"path":"api/tags/lua文章.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}