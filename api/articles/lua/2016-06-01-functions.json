{"title":"Lua函数","uid":"4b8da2e6835e8f700ba371a83ecbe6ab","slug":"lua/2016-06-01-functions","date":"2024-03-14T07:45:09.091Z","updated":"2024-03-27T03:57:02.202Z","comments":true,"path":"api/articles/lua/2016-06-01-functions.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<h1 id=\"lua-函数\"><a class=\"markdownIt-Anchor\" href=\"#lua-函数\"></a> Lua 函数</h1>\n<p>函数用于将一组语句组合起来完成一个任务。你可以将你的代码分割到不同的函数中。如何将你的代码分到不同的函数中完全由你自己决定，不过一般会按照逻辑功能进行划分，每个函数都执行一个特定的任务。</p>\n<p>在 Lua 中提供了大量的内置函数供我们使用。例如，print() 函数用于将输入的参数输出到终端。</p>\n<p>函数往往也被称作方法，子例程或过程等等。</p>\n<h2 id=\"函数定义\"><a class=\"markdownIt-Anchor\" href=\"#函数定义\"></a> 函数定义</h2>\n<p>Lua 中函数定义的语法如下所示：</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">optional_function_scope <span class=\"token keyword\">function</span> <span class=\"token function\">function_name</span><span class=\"token punctuation\">(</span> argument1<span class=\"token punctuation\">,</span> argument2<span class=\"token punctuation\">,</span> argument3<span class=\"token punctuation\">...</span><span class=\"token punctuation\">,</span> argumentn<span class=\"token punctuation\">)</span>\nfunction_body\n<span class=\"token keyword\">return</span> result_params_comma_separated\n<span class=\"token keyword\">end</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>Lua 中函数定义包括函数头和函数名两部分。如下列出函数的所有部分：</p>\n<ul>\n\t<li>可选的函数作用域：你可以使用关键字 local 限制函数的作用域，你也可以忽略此部分而使用默认值。函数作用域默认是全局。</li>\n\t<li>函数名：函数的真正名称。函数名与函数的参数列表一起被称为函数签名。</li>\n\t<li>参数：一个参数就一个占位符一样。函数调用时，把值传递给参数。这个值被称之为实际参数或直参数。参数列表指参数的类型，顺序与数量。参数是可选的，一个函数可以没有参数。</li>\n\t<li>函数体：函数体是代码语句集合，定义了函数的功能。</li>\n\t<li>返回：在 Lua 中，可以使用 return 关键字同时返回多返回值，每个返回值之间使用逗号分隔。</li>\n</ul>  \n<h2 id=\"示例\"><a class=\"markdownIt-Anchor\" href=\"#示例\"></a> 示例</h2>\n<p>下面是函数 max() 源代码。此函数接受两个参数 num1 与 num2，返回两个输入参数的最大值。</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\"><span class=\"token comment\">--[[ function returning the max between two numbers --]]</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>num1<span class=\"token punctuation\">,</span> num2<span class=\"token punctuation\">)</span>\n\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num1 <span class=\"token operator\">></span> num2<span class=\"token punctuation\">)</span> <span class=\"token keyword\">then</span>\n      result <span class=\"token operator\">=</span> num1<span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">else</span>\n      result <span class=\"token operator\">=</span> num2<span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">end</span>\n\n   <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span> \n<span class=\"token keyword\">end</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"函数参数\"><a class=\"markdownIt-Anchor\" href=\"#函数参数\"></a> 函数参数</h2>\n<p>如果函数需要用到参数，则它必须声明接受参数值的变量。这些被声明的变量被称为函数的形式参数或简称形参。</p>\n<p>函数的形参与函数中其它局部变量一样，在函数的入口处被创建，函数结束时被销毁。</p>\n<h2 id=\"调用函数\"><a class=\"markdownIt-Anchor\" href=\"#调用函数\"></a> 调用函数</h2>\n<p>创建函数的时候，我们已经定义了函数做什么。接下来，我们就可以调用函数来完成已定义的任务或功能。</p>\n<p>当程序中调用一个函数时，程序的控制转移到被调用的函数中。被调用的函数执行定义的任务；当 return 语句被执行或者到达函数末尾时，程序的控制回到主程序中。</p>\n<p>调用函数的方法很简单，你只需要将函数要求的参数传递给函数就可以实现函数的调用。如果函数有返回值，你也可以将函数的返回值存储下来。如下如示：</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\"><span class=\"token keyword\">function</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>num1<span class=\"token punctuation\">,</span> num2<span class=\"token punctuation\">)</span>\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num1 <span class=\"token operator\">></span> num2<span class=\"token punctuation\">)</span> <span class=\"token keyword\">then</span>\n      result <span class=\"token operator\">=</span> num1<span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">else</span>\n      result <span class=\"token operator\">=</span> num2<span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">end</span>\n\n   <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span> \n<span class=\"token keyword\">end</span>\n\n<span class=\"token comment\">-- 调用函数</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The maximum of the two numbers is \"</span><span class=\"token punctuation\">,</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The maximum of the two numbers is \"</span><span class=\"token punctuation\">,</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>执行上面的代码，可以得到如下的输出结果：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">The maximum of the two numbers is \t<span class=\"token number\">10</span>\nThe maximum of the two numbers is \t<span class=\"token number\">6</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h2 id=\"赋值与传递函数\"><a class=\"markdownIt-Anchor\" href=\"#赋值与传递函数\"></a> 赋值与传递函数</h2>\n<p>在 Lua 语言中，我们可以将函数赋值给一个变量，也可以将函数作为参数传递给另外一个函数。下面是赋值传递函数的一个例子：</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">myprint <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>param<span class=\"token punctuation\">)</span>\n   <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"This is my print function -   ##\"</span><span class=\"token punctuation\">,</span>param<span class=\"token punctuation\">,</span><span class=\"token string\">\"##\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>num1<span class=\"token punctuation\">,</span>num2<span class=\"token punctuation\">,</span>functionPrint<span class=\"token punctuation\">)</span>\n   result <span class=\"token operator\">=</span> num1 <span class=\"token operator\">+</span> num2\n   <span class=\"token function\">functionPrint</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span>\n<span class=\"token function\">myprint</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span>myprint<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>执行上面的代码，可以得到如下的输出结果：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">This is my print <span class=\"token keyword\">function</span> -   <span class=\"token comment\">##\t10\t##</span>\nThis is my print <span class=\"token keyword\">function</span> -   <span class=\"token comment\">##\t7\t##</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h2 id=\"变参函数\"><a class=\"markdownIt-Anchor\" href=\"#变参函数\"></a> 变参函数</h2>\n<p>在 Lua 语言中，使用 … 作为参数可以创建参数个数可变的函数，即变参函数。我们可以使用下面的这个例子来理解变参函数的概念。下面的这个例子中函数返回输入参数的平均值：</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\"><span class=\"token keyword\">function</span> <span class=\"token function\">average</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">...</span><span class=\"token punctuation\">)</span>\n   result <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n   <span class=\"token keyword\">local</span> arg<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">...</span><span class=\"token punctuation\">&#125;</span>\n   <span class=\"token keyword\">for</span> i<span class=\"token punctuation\">,</span>v <span class=\"token keyword\">in</span> <span class=\"token function\">ipairs</span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>\n      result <span class=\"token operator\">=</span> result <span class=\"token operator\">+</span> v\n   <span class=\"token keyword\">end</span>\n   <span class=\"token keyword\">return</span> result<span class=\"token operator\">/</span><span class=\"token operator\">#</span>arg\n<span class=\"token keyword\">end</span>\n\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The average is\"</span><span class=\"token punctuation\">,</span><span class=\"token function\">average</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>执行上面的代码，可以得到如下的输出结果：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">The average is\t<span class=\"token number\">5.5</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>","text":" Lua 函数 函数用于将一组语句组合起来完成一个任务。你可以将你的代码分割到不同的函数中。如何将你的代码分到不同的函数中完全由你自己决定，不过一般会按照逻辑功能进行划分，每个函数都执行一个特定的任务。 在 Lua 中提供了大量的内置函数供我们使用。例如，print() 函数用于...","link":"","photos":[],"count_time":{"symbolsCount":"2.2k","symbolsTime":"2 mins."},"categories":[{"name":"lua_guide","slug":"lua-guide","count":34,"path":"api/categories/lua-guide.json"}],"tags":[{"name":"lua","slug":"lua","count":124,"path":"api/tags/lua.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#lua-%E5%87%BD%E6%95%B0\"><span class=\"toc-text\"> Lua 函数</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%87%BD%E6%95%B0%E5%AE%9A%E4%B9%89\"><span class=\"toc-text\"> 函数定义</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B\"><span class=\"toc-text\"> 示例</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0\"><span class=\"toc-text\"> 函数参数</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%B0%83%E7%94%A8%E5%87%BD%E6%95%B0\"><span class=\"toc-text\"> 调用函数</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%B5%8B%E5%80%BC%E4%B8%8E%E4%BC%A0%E9%80%92%E5%87%BD%E6%95%B0\"><span class=\"toc-text\"> 赋值与传递函数</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8F%98%E5%8F%82%E5%87%BD%E6%95%B0\"><span class=\"toc-text\"> 变参函数</span></a></li></ol></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Lua协程","uid":"bce3027296f15638c976f1ebef15c96b","slug":"lua/2016-06-01-coroutines","date":"2024-03-14T07:45:09.091Z","updated":"2024-03-27T03:18:43.430Z","comments":true,"path":"api/articles/lua/2016-06-01-coroutines.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":" Lua 协程 概述 协程具有协同的性质，它允许两个或多个方法以某种可控的方式协同工作。在任何一个时刻，都只有一个协程在运行，只有当正在运行的协程主动挂起时它的执行才会被挂起（暂停）。 上面的定义可能看上去比较模糊。接下来让我讲得很清楚一点，假设我们有两个方法，一个是主程序方法，...","link":"","photos":[],"count_time":{"symbolsCount":"3.4k","symbolsTime":"3 mins."},"categories":[{"name":"lua_guide","slug":"lua-guide","count":34,"path":"api/categories/lua-guide.json"}],"tags":[{"name":"lua","slug":"lua","count":124,"path":"api/tags/lua.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"概述","uid":"2656993cf43ed1aa35c9954d6baa5550","slug":"lua/2016-06-01-overview","date":"2024-03-14T07:45:09.091Z","updated":"2024-03-14T07:45:09.091Z","comments":true,"path":"api/articles/lua/2016-06-01-overview.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":" 概述 Lua 是用 C 语言开发的可扩展的轻量级编程语言。它起源于 1993 年由 Roberto lerusalimschy,Luiz Henrique de Figueiredo 与 Waddemar Celes 领导的一个内部项目。 设计者的初衷是希望 Lua 可以成为一...","link":"","photos":[],"count_time":{"symbolsCount":946,"symbolsTime":"1 mins."},"categories":[{"name":"lua_guide","slug":"lua-guide","count":34,"path":"api/categories/lua-guide.json"}],"tags":[{"name":"lua","slug":"lua","count":124,"path":"api/tags/lua.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}