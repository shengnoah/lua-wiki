{"title":"Lua操作系统工具库","uid":"690a2272c904046df2d9d8b8e3328a46","slug":"lua/2016-06-01-operating-system-facilities","date":"2024-03-14T07:45:09.085Z","updated":"2024-03-27T04:17:53.267Z","comments":true,"path":"api/articles/lua/2016-06-01-operating-system-facilities.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<h1 id=\"lua-操作系统工具库\"><a class=\"markdownIt-Anchor\" href=\"#lua-操作系统工具库\"></a> Lua 操作系统工具库</h1>\n<p>在很多应用中，我们都需要访问到操作系统级别的函数，操作系统库就给我们提供了这样的工具。下面的列表给出操作系统工具包提供的方法：</p>\n<table>\n\t<tr>\n\t\t<th>S.N.</th>\n\t\t<th>函数与功能</th>\n\t</tr>\n\t<tr>\n\t\t<td>1</td>\n\t\t<td>os.clock()：以秒为单位返回程序运行所用 CPU 时间的近似值。</td>\n\t</tr>\n\t<tr>\n\t\t<td>2</td>\n\t\t<td>os.date([format[,time]])：返回时间字符串或包含时间的表，时间按指定格式格式化。</td>\n\t</tr>\n\t<tr>\n\t\t<td>3</td>\n\t\t<td>os.difftime(t2,t1)：返回从 t1 时刻至 t2 时刻经历的时间。在 POSIX，windows，及其它某些系统中，该值就是 t2-t1。</td>\n\t</tr>\n\t<tr>\n\t\t<td>4</td>\n\t\t<td>os.execute([command])：该函数等价于 ANSI C 中的 system 函数。传递的参数 command 由操作系统的 shell 执行。如果命令成功结束，则返回的第一个值为 true，否则为 nil。</td>\n\t</tr>\n\t<tr>\n\t\t<td>5</td>\n\t\t<td>os.exit([code[,close]])：调用 ANSI C 的 exit 函数，结束程序。如果 code 为　true, 则返回状态为 EXIT_SUCESS；若 code 为 false,则返回状态为 EXIT_FAILURE。如果 code 为数值，则返回状态也就为该数值。</td>\n\t</tr>\n\t<tr>\n\t\t<td>6</td>\n\t\t<td>os.getenv(varname)：返回进程的环境变量 varname 的值，如果此环境变量没有定义则返回 nil。</td>\n\t</tr>\n\t<tr>\n\t\t<td>7</td>\n\t\t<td>os.remove(filename)：删除文件（或 POSIX 系统中的空目录）。如果函数失败，则返回 nil 以及描述错误的字符串与错误代码。</td>\n\t</tr>\n\t<tr>\n\t\t<td>8</td>\n\t\t<td>os.rename(oldname,newname)：重命名文件或目录。如果函数失败，则返回 nil 以及描述错误的字符串与错误代码。</td>\n\t</tr>\n\t<tr>\n\t\t<td>9</td>\n\t\t<td>os.setlocale(locale[,category])：设置程序当前的地区（locale），locale 是一个与操作系统相关的字符串。category 是一个可选的字符串，描述设置更改的范围，包括: all，collate，ctype，monetary，numeric，time。默认为 all。函数返回新地区的名称，如果函数调用失败则返回 nil。</td>\n\t</tr>\n\t<tr>\n\t\t<td>10</td>\n\t\t<td>os.time([table])：无参数时，返回当前时间；传入参数时，则返回指定参数表示的日期和时间。传入的参数必须包含以下的域:年、月、日。时（默认 12）、分（默认 0）、秒（默认 0）、isdst（默认 nil） 四个域是可选的。</td>\n\t</tr>\n\t<tr>\n\t\t<td>11</td>\n\t\t<td>os.tmpname()：返回一个可作为临时文件名的字符串。这个临时文件必须显式地打开，使用结束时也必须显式地删除。</td>\n\t</tr>\n</table>\n<h2 id=\"常用的-os-函数\"><a class=\"markdownIt-Anchor\" href=\"#常用的-os-函数\"></a> 常用的 OS 函数</h2>\n<p>示例如下：</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\"><span class=\"token comment\">-- 格式化日期</span>\nio<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The date is \"</span><span class=\"token punctuation\">,</span> os<span class=\"token punctuation\">.</span><span class=\"token function\">date</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%m/%d/%Y\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">-- 日期与时间</span>\nio<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The date and time is \"</span><span class=\"token punctuation\">,</span> os<span class=\"token punctuation\">.</span><span class=\"token function\">date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">-- 时间</span>\nio<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The OS time is \"</span><span class=\"token punctuation\">,</span> os<span class=\"token punctuation\">.</span><span class=\"token function\">time</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">-- 等待一段时间</span>\n<span class=\"token keyword\">for</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1000000</span> <span class=\"token keyword\">do</span>\n<span class=\"token keyword\">end</span>\n\n<span class=\"token comment\">-- Lua 启动的时长</span>\nio<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Lua started before \"</span><span class=\"token punctuation\">,</span> os<span class=\"token punctuation\">.</span><span class=\"token function\">clock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>执行上面的程序，我们可以得到如下的输出结果：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">The <span class=\"token function\">date</span> is 01/25/2014\nThe <span class=\"token function\">date</span> and <span class=\"token function\">time</span> is 01/25/14 07:38:40\nThe OS <span class=\"token function\">time</span> is <span class=\"token number\">1390615720</span>\nLua started before <span class=\"token number\">0.013</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>上面的例子只是简单的说明了一下操作系统相关函数的使用，实际开发过程中，可以根据实际情况使用所有函数。可以多做一些练习熟悉上面所列出的函数。</p>\n","text":" Lua 操作系统工具库 在很多应用中，我们都需要访问到操作系统级别的函数，操作系统库就给我们提供了这样的工具。下面的列表给出操作系统工具包提供的方法： S.N. 函数与功能 1 os.clock()：以秒为单位返回程序运行所用 CPU 时间的近似值。 2 os.date([fo...","link":"","photos":[],"count_time":{"symbolsCount":"1.7k","symbolsTime":"2 mins."},"categories":[{"name":"lua_guide","slug":"lua-guide","count":34,"path":"api/categories/lua-guide.json"}],"tags":[{"name":"lua","slug":"lua","count":124,"path":"api/tags/lua.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#lua-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%B7%A5%E5%85%B7%E5%BA%93\"><span class=\"toc-text\"> Lua 操作系统工具库</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%B8%B8%E7%94%A8%E7%9A%84-os-%E5%87%BD%E6%95%B0\"><span class=\"toc-text\"> 常用的 OS 函数</span></a></li></ol></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Lua中的 if...else 语句","uid":"90762206aba1aa8a729d07e471d48c2c","slug":"lua/2016-06-01-if-else-if-statement","date":"2024-03-14T07:45:09.085Z","updated":"2024-03-27T03:40:10.911Z","comments":true,"path":"api/articles/lua/2016-06-01-if-else-if-statement.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":" Lua 中的 if…else 语句 如果 if 语句后面跟上 else 语句，那么条件为假时就执行 else 语句的代码。 语法 Lua 语言中 if…else 语句的语法如下所示： if(boolean_expression) then --[ 如何条件为真，则执行此处代码。...","link":"","photos":[],"count_time":{"symbolsCount":"1.6k","symbolsTime":"1 mins."},"categories":[{"name":"lua_guide","slug":"lua-guide","count":34,"path":"api/categories/lua-guide.json"}],"tags":[{"name":"lua","slug":"lua","count":124,"path":"api/tags/lua.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Lua数据库访问","uid":"5593d949c022c9556ceb62d288c587d5","slug":"lua/2016-06-01-database-access","date":"2024-03-14T07:45:09.084Z","updated":"2024-03-27T04:20:42.980Z","comments":true,"path":"api/articles/lua/2016-06-01-database-access.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":" Lua 数据库访问 简单的数据操作，我们用文件就可以处理。但是，某些时候文件操作存在性能、扩展性等问题。这时候，我们就需要使用数据库。LuaSQL 是一个提供数据库操作的库，它支持多种 SQL 数据库的操作。包括： SQLite MySQL ODBC 在本教程中，我们会讲解用 ...","link":"","photos":[],"count_time":{"symbolsCount":"5.9k","symbolsTime":"5 mins."},"categories":[{"name":"lua_guide","slug":"lua-guide","count":34,"path":"api/categories/lua-guide.json"}],"tags":[{"name":"lua","slug":"lua","count":124,"path":"api/tags/lua.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}