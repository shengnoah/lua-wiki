{"title":"Lua错误处理","uid":"8fa5391aad4ba0aa8b3b2333eb0ffb7d","slug":"lua/2016-06-01-error-handling","date":"2024-03-14T07:45:09.085Z","updated":"2024-03-27T04:17:06.148Z","comments":true,"path":"api/articles/lua/2016-06-01-error-handling.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<h1 id=\"lua-错误处理\"><a class=\"markdownIt-Anchor\" href=\"#lua-错误处理\"></a> Lua 错误处理</h1>\n<h2 id=\"为什么需要错误处理机制\"><a class=\"markdownIt-Anchor\" href=\"#为什么需要错误处理机制\"></a> 为什么需要错误处理机制</h2>\n<p>在真实的系统中程序往往非常复杂，它们经常涉及到文件操作、数据库事务操作或网络服务调用等，这个时候错误处理就显得非常重要。不关注错误处理可能在处理诸如涉密或金融交易这些业务时造成重大的损失。<br />\n无论什么时候，程序开发都要求小心地做好错误处理工作。在 Lua 中错误可以被分为两类：</p>\n<ul>\n\t<li>语法错误</li>\n\t<li>运行时错误</li>\n</ul>\n<h2 id=\"语法错误\"><a class=\"markdownIt-Anchor\" href=\"#语法错误\"></a> 语法错误</h2>\n<p>语法错误是由于不正确的使用各种程序语法造成的，比如错误的使用操作符或表达式。下面即是一个语法错误的例子：</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">a <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>正如你知道的那样，单个等号与双等号是完全不一样的。二者之间随意的替换就导致语法错误。一个等号表示的是赋值，而双等号表示比较。类似地，下面这一小段代码中也存在语法错误：</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\"><span class=\"token keyword\">for</span> a<span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span>\n   <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>执行上面的这段程序，我们会得到如下的输出结果：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">lua: test2.lua:2: <span class=\"token string\">'do'</span> expected near <span class=\"token string\">'print'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>语法错误相比于运行时错误更容易处理，因为 Lua 解释器可以更精确的定位到语法错误的位置。由上面的错误，我们可以容易就知道，在 print 语句前添加 do 语句就可以了，这是 Lua 语法结构所要求的。</p>\n<h2 id=\"运行时错误\"><a class=\"markdownIt-Anchor\" href=\"#运行时错误\"></a> 运行时错误</h2>\n<p>对于运行时错误，虽然程序也能成功运行，但是程序运行过程中可能因为错误的输入或者错误的使用函数而导致运行过程中产生错误。下面的例子显示了运行时错误如何产生的：</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\"><span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span>\n   <span class=\"token keyword\">return</span> a<span class=\"token operator\">+</span>b\n<span class=\"token keyword\">end</span>\n\n<span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>当我们尝试生成(build)上面的程序，程序可以正常的生成和运行。但是一旦运行后，立马出现下面的运行时错误。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">lua: test2.lua:2: attempt to perform arithmetic on <span class=\"token builtin class-name\">local</span> <span class=\"token string\">'b'</span> <span class=\"token punctuation\">(</span>a nil value<span class=\"token punctuation\">)</span>\nstack traceback:\n\ttest2.lua:2: <span class=\"token keyword\">in</span> <span class=\"token keyword\">function</span> <span class=\"token string\">'add'</span>\n\ttest2.lua:5: <span class=\"token keyword\">in</span> main chunk\n\t<span class=\"token punctuation\">[</span>C<span class=\"token punctuation\">]</span>: ?<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>这个运行时错误是由于没有正确的为 add 函数传入参数导致的，由于没有为 b 传入值，所有 b 的值为 nil 从而导致在进行加法运算时出错。</p>\n<h2 id=\"assert-and-error-函数\"><a class=\"markdownIt-Anchor\" href=\"#assert-and-error-函数\"></a> Assert and Error 函数</h2>\n<p>我们经常用到 assert 和 error 两个函数处理错误。下面是一个简单的例子。</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\"><span class=\"token keyword\">local</span> <span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span>\n   <span class=\"token function\">assert</span><span class=\"token punctuation\">(</span><span class=\"token function\">type</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"number\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"a is not a number\"</span><span class=\"token punctuation\">)</span>\n   <span class=\"token function\">assert</span><span class=\"token punctuation\">(</span><span class=\"token function\">type</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"number\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"b is not a number\"</span><span class=\"token punctuation\">)</span>\n   <span class=\"token keyword\">return</span> a<span class=\"token operator\">+</span>b\n<span class=\"token keyword\">end</span>\n<span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>执行上面的程序，我们会得到如下的输出结果：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">lua: test2.lua:3: b is not a number\nstack traceback:\n\t<span class=\"token punctuation\">[</span>C<span class=\"token punctuation\">]</span>: <span class=\"token keyword\">in</span> <span class=\"token keyword\">function</span> <span class=\"token string\">'assert'</span>\n\ttest2.lua:3: <span class=\"token keyword\">in</span> <span class=\"token keyword\">function</span> <span class=\"token string\">'add'</span>\n\ttest2.lua:6: <span class=\"token keyword\">in</span> main chunk\n\t<span class=\"token punctuation\">[</span>C<span class=\"token punctuation\">]</span>: ?<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>error(message [,level]) 函数会结束调用自己的函数，并将 message 作为错误信息返回调用者(译注:保护模式下才会返回调用者，一般情况会结束程序运行并在控制终端输出错误信息)。error 函数本身从不返回。一般地，error 函数会在消息前附上错误位置信息。级别(level) 参数指定错误发生的位置。若其值为 1(默认值)，返回的错误的位置是 error 函数被调用的位置。若为 2, 返回的错误位置为调用 error 函数的函数被调用的位置，依次类推。将 level 参数的值设为 0 就不再需要在消息前增加额外的位置信息了。</p>\n<h2 id=\"pcall-与-xpcall\"><a class=\"markdownIt-Anchor\" href=\"#pcall-与-xpcall\"></a> pcall 与 xpcall</h2>\n<p>在 Lua 中，为了避免使用抛出错误和处理错误，我们需要用到 pcall 和 xpcall 函数来处理异常。<br />\n使用 pcall(f,arg1,…) 函数可以使用保护模式调用一个函数。如果函数 f 中发生了错误， 它并不会抛出一个错误，而是返回错误的状态。使用的 pcall 函数的方法如下所示：</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\"><span class=\"token keyword\">function</span> <span class=\"token function\">myfunction</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n   n <span class=\"token operator\">=</span> n<span class=\"token operator\">/</span><span class=\"token keyword\">nil</span>\n<span class=\"token keyword\">end</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token function\">pcall</span><span class=\"token punctuation\">(</span>myfunction<span class=\"token punctuation\">)</span> <span class=\"token keyword\">then</span>\n   <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Success\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">else</span>\n\t<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Failure\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>执行上面的程序，我们可以得到如下的输出结果：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">Failure<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>xpcall(f,err) 函数调用函数 f 同时为其设置了错误处理方法 err，并返回调用函数的状态。任何发生在函数 f 中的错误都不会传播，而是由 xpcall 函数捕获错误并调用错误处理函数 err，传入的参数即是错误对象本身。xpcall 的使用示例如下：</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\"><span class=\"token keyword\">function</span> <span class=\"token function\">myfunction</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n   n <span class=\"token operator\">=</span> n<span class=\"token operator\">/</span><span class=\"token keyword\">nil</span>\n<span class=\"token keyword\">end</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">myerrorhandler</span><span class=\"token punctuation\">(</span> err <span class=\"token punctuation\">)</span>\n   <span class=\"token function\">print</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"ERROR:\"</span><span class=\"token punctuation\">,</span> err <span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span>\n\nstatus <span class=\"token operator\">=</span> <span class=\"token function\">xpcall</span><span class=\"token punctuation\">(</span> myfunction<span class=\"token punctuation\">,</span> myerrorhandler <span class=\"token punctuation\">)</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span> status<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>执行上面的程序，我们可以得到如下的输出结果：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">ERROR:\ttest2.lua:2: attempt to perform arithmetic on global <span class=\"token string\">'n'</span> <span class=\"token punctuation\">(</span>a nil value<span class=\"token punctuation\">)</span>\n<span class=\"token boolean\">false</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>作为程序开发人员，在程序中正确合理地处理错误是非常重要的。正确地处理错误可以保证发生意外情况不会影响到程序用户的使用。</p>\n","text":" Lua 错误处理 为什么需要错误处理机制 在真实的系统中程序往往非常复杂，它们经常涉及到文件操作、数据库事务操作或网络服务调用等，这个时候错误处理就显得非常重要。不关注错误处理可能在处理诸如涉密或金融交易这些业务时造成重大的损失。 无论什么时候，程序开发都要求小心地做好错误处理...","link":"","photos":[],"count_time":{"symbolsCount":"2.4k","symbolsTime":"2 mins."},"categories":[{"name":"lua_guide","slug":"lua-guide","count":34,"path":"api/categories/lua-guide.json"}],"tags":[{"name":"lua","slug":"lua","count":124,"path":"api/tags/lua.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#lua-%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86\"><span class=\"toc-text\"> Lua 错误处理</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%BA%E4%BB%80%E4%B9%88%E9%9C%80%E8%A6%81%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86%E6%9C%BA%E5%88%B6\"><span class=\"toc-text\"> 为什么需要错误处理机制</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%AF%AD%E6%B3%95%E9%94%99%E8%AF%AF\"><span class=\"toc-text\"> 语法错误</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%BF%90%E8%A1%8C%E6%97%B6%E9%94%99%E8%AF%AF\"><span class=\"toc-text\"> 运行时错误</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#assert-and-error-%E5%87%BD%E6%95%B0\"><span class=\"toc-text\"> Assert and Error 函数</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#pcall-%E4%B8%8E-xpcall\"><span class=\"toc-text\"> pcall 与 xpcall</span></a></li></ol></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Lua基本语法","uid":"9b97fd5c58ceb41de2e73474e4dfb1f8","slug":"lua/2016-06-01-basic-syntax","date":"2024-03-14T07:45:09.085Z","updated":"2024-03-27T04:15:20.778Z","comments":true,"path":"api/articles/lua/2016-06-01-basic-syntax.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":" 基本语法 Lua 学起来非常简单。现在，让我们开始创建我们的第一个 Lua 程序吧！ 第一个 Lua 程序 Lua 提供交互式编程模式。在这个模式下，你可以一条一条地输入命令，然后立即就可以得到结果。你可以在 shell 中使用 lua -i 或者 lua 命令启动。输入命令后...","link":"","photos":[],"count_time":{"symbolsCount":"2.8k","symbolsTime":"3 mins."},"categories":[{"name":"lua_guide","slug":"lua-guide","count":34,"path":"api/categories/lua-guide.json"}],"tags":[{"name":"lua","slug":"lua","count":124,"path":"api/tags/lua.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Lua中的 if...else 语句","uid":"90762206aba1aa8a729d07e471d48c2c","slug":"lua/2016-06-01-if-else-if-statement","date":"2024-03-14T07:45:09.085Z","updated":"2024-03-27T03:40:10.911Z","comments":true,"path":"api/articles/lua/2016-06-01-if-else-if-statement.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":" Lua 中的 if…else 语句 如果 if 语句后面跟上 else 语句，那么条件为假时就执行 else 语句的代码。 语法 Lua 语言中 if…else 语句的语法如下所示： if(boolean_expression) then --[ 如何条件为真，则执行此处代码。...","link":"","photos":[],"count_time":{"symbolsCount":"1.6k","symbolsTime":"1 mins."},"categories":[{"name":"lua_guide","slug":"lua-guide","count":34,"path":"api/categories/lua-guide.json"}],"tags":[{"name":"lua","slug":"lua","count":124,"path":"api/tags/lua.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}