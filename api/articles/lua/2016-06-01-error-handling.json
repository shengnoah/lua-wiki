{"title":"Lua错误处理","uid":"8fa5391aad4ba0aa8b3b2333eb0ffb7d","slug":"lua/2016-06-01-error-handling","date":"2024-03-14T06:15:59.724Z","updated":"2024-03-14T06:15:59.724Z","comments":true,"path":"api/articles/lua/2016-06-01-error-handling.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":null,"content":"<h1 id=\"Lua-错误处理\"><a href=\"#Lua-错误处理\" class=\"headerlink\" title=\"Lua 错误处理\"></a>Lua 错误处理</h1><h2 id=\"为什么需要错误处理机制\"><a href=\"#为什么需要错误处理机制\" class=\"headerlink\" title=\"为什么需要错误处理机制\"></a>为什么需要错误处理机制</h2><p>在真实的系统中程序往往非常复杂，它们经常涉及到文件操作、数据库事务操作或网络服务调用等，这个时候错误处理就显得非常重要。不关注错误处理可能在处理诸如涉密或金融交易这些业务时造成重大的损失。<br>无论什么时候，程序开发都要求小心地做好错误处理工作。在 Lua 中错误可以被分为两类：  </p>\n<ul>\n    <li>语法错误</li>\n    <li>运行时错误</li>\n</ul>\n\n<h2 id=\"语法错误\"><a href=\"#语法错误\" class=\"headerlink\" title=\"语法错误\"></a>语法错误</h2><p>语法错误是由于不正确的使用各种程序语法造成的，比如错误的使用操作符或表达式。下面即是一个语法错误的例子：  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a == 2</span><br><span class=\"line\">```  </span><br><span class=\"line\"></span><br><span class=\"line\">正如你知道的那样，单个等号与双等号是完全不一样的。二者之间随意的替换就导致语法错误。一个等号表示的是赋值，而双等号表示比较。类似地，下面这一小段代码中也存在语法错误：  </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>for a= 1,10<br>   print(a)<br>end</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">执行上面的这段程序，我们会得到如下的输出结果：  </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>lua: test2.lua:2: ‘do’ expected near ‘print’</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">语法错误相比于运行时错误更容易处理，因为 Lua 解释器可以更精确的定位到语法错误的位置。由上面的错误，我们可以容易就知道，在 print 语句前添加 do 语句就可以了，这是 Lua 语法结构所要求的。  </span><br><span class=\"line\"></span><br><span class=\"line\">## 运行时错误  </span><br><span class=\"line\"></span><br><span class=\"line\">对于运行时错误，虽然程序也能成功运行，但是程序运行过程中可能因为错误的输入或者错误的使用函数而导致运行过程中产生错误。下面的例子显示了运行时错误如何产生的：  </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>function add(a,b)<br>   return a+b<br>end</p>\n<p>add(10)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">当我们尝试生成(build)上面的程序，程序可以正常的生成和运行。但是一旦运行后，立马出现下面的运行时错误。  </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>lua: test2.lua:2: attempt to perform arithmetic on local ‘b’ (a nil value)<br>stack traceback:<br>    test2.lua:2: in function ‘add’<br>    test2.lua:5: in main chunk<br>    [C]: ?</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">这个运行时错误是由于没有正确的为 add 函数传入参数导致的，由于没有为 b 传入值，所有 b 的值为 nil 从而导致在进行加法运算时出错。  </span><br><span class=\"line\"></span><br><span class=\"line\">## Assert and Error 函数  </span><br><span class=\"line\"></span><br><span class=\"line\">我们经常用到 assert 和 error 两个函数处理错误。下面是一个简单的例子。  </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>local function add(a,b)<br>   assert(type(a) == “number”, “a is not a number”)<br>   assert(type(b) == “number”, “b is not a number”)<br>   return a+b<br>end<br>add(10)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">执行上面的程序，我们会得到如下的输出结果：  </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>lua: test2.lua:3: b is not a number<br>stack traceback:<br>    [C]: in function ‘assert’<br>    test2.lua:3: in function ‘add’<br>    test2.lua:6: in main chunk<br>    [C]: ?</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">error(message [,level]) 函数会结束调用自己的函数，并将 message 作为错误信息返回调用者(译注:保护模式下才会返回调用者，一般情况会结束程序运行并在控制终端输出错误信息)。error 函数本身从不返回。一般地，error 函数会在消息前附上错误位置信息。级别(level) 参数指定错误发生的位置。若其值为 1(默认值)，返回的错误的位置是 error 函数被调用的位置。若为 2, 返回的错误位置为调用 error 函数的函数被调用的位置，依次类推。将 level 参数的值设为 0 就不再需要在消息前增加额外的位置信息了。  </span><br><span class=\"line\"></span><br><span class=\"line\">## pcall 与 xpcall　　</span><br><span class=\"line\"></span><br><span class=\"line\">在 Lua 中，为了避免使用抛出错误和处理错误，我们需要用到 pcall 和 xpcall 函数来处理异常。  </span><br><span class=\"line\">使用 pcall(f,arg1,...) 函数可以使用保护模式调用一个函数。如果函数 f 中发生了错误， 它并不会抛出一个错误，而是返回错误的状态。使用的 pcall 函数的方法如下所示：  </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>function myfunction ()<br>   n = n/nil<br>end</p>\n<p>if pcall(myfunction) then<br>   print(“Success”)<br>else<br>    print(“Failure”)<br>end</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">执行上面的程序，我们可以得到如下的输出结果：  </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>Failure</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">xpcall(f,err) 函数调用函数 f 同时为其设置了错误处理方法 err，并返回调用函数的状态。任何发生在函数 f 中的错误都不会传播，而是由 xpcall 函数捕获错误并调用错误处理函数 err，传入的参数即是错误对象本身。xpcall 的使用示例如下：  </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>function myfunction ()<br>   n = n/nil<br>end</p>\n<p>function myerrorhandler( err )<br>   print( “ERROR:”, err )<br>end</p>\n<p>status = xpcall( myfunction, myerrorhandler )<br>print( status)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">执行上面的程序，我们可以得到如下的输出结果：  </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>ERROR:    test2.lua:2: attempt to perform arithmetic on global ‘n’ (a nil value)<br>false</p>\n<pre><code>\n作为程序开发人员，在程序中正确合理地处理错误是非常重要的。正确地处理错误可以保证发生意外情况不会影响到程序用户的使用。\n</code></pre>\n","text":"Lua 错误处理为什么需要错误处理机制在真实的系统中程序往往非常复杂，它们经常涉及到文件操作、数据库事务操作或网络服务调用等，这个时候错误处理就显得非常重要。不关注错误处理可能在处理诸如涉密或金融交易这些业务时造成重大的损失。无论什么时候，程序开发都要求小心地做好错误处理工作。在...","link":"","photos":[],"count_time":{"symbolsCount":"2.5k","symbolsTime":"2 mins."},"categories":[{"name":"lua_guide","slug":"lua-guide","count":68,"path":"api/categories/lua-guide.json"}],"tags":[{"name":"lua","slug":"lua","count":153,"path":"api/tags/lua.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Lua-%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86\"><span class=\"toc-text\">Lua 错误处理</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%BA%E4%BB%80%E4%B9%88%E9%9C%80%E8%A6%81%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86%E6%9C%BA%E5%88%B6\"><span class=\"toc-text\">为什么需要错误处理机制</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%AF%AD%E6%B3%95%E9%94%99%E8%AF%AF\"><span class=\"toc-text\">语法错误</span></a></li></ol></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Lua判断","uid":"d6286a3606fee451e0f5f2e41e7f6205","slug":"lua/2016-06-01-decision-making","date":"2024-03-14T06:15:59.724Z","updated":"2024-03-14T06:15:59.724Z","comments":true,"path":"api/articles/lua/2016-06-01-decision-making.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":[],"text":"决策决策结构要求程序开发人员设置一个或多测试或计算条件。如果条件计算结果为真，则执行一个或多个语句；如果条件为假，则执行另外的语句。 下面是大多数程序语言中的决策结构的一般形式： Lua 语言中所有布尔真和非 nil 值都当作真；把所有的布尔假和 nil 作为假。请注意，Lua ...","link":"","photos":[],"count_time":{"symbolsCount":451,"symbolsTime":"1 mins."},"categories":[{"name":"lua_guide","slug":"lua-guide","count":68,"path":"api/categories/lua-guide.json"}],"tags":[{"name":"lua","slug":"lua","count":153,"path":"api/tags/lua.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Lua运行环境","uid":"1c92a7bccc4e1c860aee5220573c9c25","slug":"lua/2016-06-01-environment","date":"2024-03-14T06:15:59.724Z","updated":"2024-03-14T06:15:59.724Z","comments":true,"path":"api/articles/lua/2016-06-01-environment.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":null,"text":"Lua 运行环境本地环境搭建在本地搭建 Lua 编程语言的开发运行环境，你需要在你的计算机上安装如下三个软件：(1) 文本编辑器。(2) Lua 解释器。（3）Lua 编译器。 文本编辑器文本编辑器用来编辑你的程序代码。有如下几款常用的文本编辑器软件：Windows notepa...","link":"","photos":[],"count_time":{"symbolsCount":"2k","symbolsTime":"2 mins."},"categories":[{"name":"lua_guide","slug":"lua-guide","count":68,"path":"api/categories/lua-guide.json"}],"tags":[{"name":"lua","slug":"lua","count":153,"path":"api/tags/lua.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}