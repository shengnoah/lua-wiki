{"title":"Lua数据库访问","uid":"5593d949c022c9556ceb62d288c587d5","slug":"lua/2016-06-01-database-access","date":"2024-03-14T07:45:09.084Z","updated":"2024-03-27T04:20:42.980Z","comments":true,"path":"api/articles/lua/2016-06-01-database-access.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<h1 id=\"lua-数据库访问\"><a class=\"markdownIt-Anchor\" href=\"#lua-数据库访问\"></a> Lua 数据库访问</h1>\n<p>简单的数据操作，我们用文件就可以处理。但是，某些时候文件操作存在性能、扩展性等问题。这时候，我们就需要使用数据库。LuaSQL 是一个提供数据库操作的库，它支持多种 SQL 数据库的操作。包括：</p>\n<ul>\n\t<li>SQLite</li>\n\t<li>MySQL</li>\n\t<li>ODBC</li>\n</ul>  \n在本教程中，我们会讲解用 Lua 语言对 MySQL 数据库与 SQLite 数据库进行操作。这些操作具有一般性，它们也可以移植到其它类型 SQL 数据库中。首先让我们看一下如何操作 MySQL 数据库。  \n<h2 id=\"mysql-数据库环境设置\"><a class=\"markdownIt-Anchor\" href=\"#mysql-数据库环境设置\"></a> MySQL 数据库环境设置</h2>\n<p>为了下面的例子可以正确演示，我们需要首先初始化数据库设置。我们假设你已经完成了如下的工作：</p>\n<ul>\n\t<li>安装 MySQL 数据库，使用默认用户名 root， 默认密码为： 123456。</li>\n\t<li>已经创建数据库 test。</li>\n\t<li>已经阅读过关于 MySQL 的基本教程，并掌握了 MySQL 的基本知识。</li>\n</ul>  \n<h2 id=\"导入-mysql\"><a class=\"markdownIt-Anchor\" href=\"#导入-mysql\"></a> 导入 MySQL</h2>\n<p>假设你已经安装配置正确了，那么我们可以使用 require 语句导入 sqlite 库。安装过程中会产生一个存储数据相关文件的目录 libsql。</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">mysql <span class=\"token operator\">=</span> require <span class=\"token string\">\"luasql.mysql\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>我们可以通过 mysql 变量访问 luasql.mysql 中的 mysql 表，该表中存存储数据库操作相关的函数。</p>\n<h3 id=\"建立连接\"><a class=\"markdownIt-Anchor\" href=\"#建立连接\"></a> 建立连接</h3>\n<p>先初始化 MySQL 的环境，再建立一个连接。如下所示：</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\"><span class=\"token keyword\">local</span> env  <span class=\"token operator\">=</span> mysql<span class=\"token punctuation\">.</span><span class=\"token function\">mysql</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">local</span> conn <span class=\"token operator\">=</span> env<span class=\"token punctuation\">:</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token string\">'test'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'123456'</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>上面的程序会与已存在的 MySQL 数据库 test 建立连接。</p>\n<h3 id=\"执行函数\"><a class=\"markdownIt-Anchor\" href=\"#执行函数\"></a> 执行函数</h3>\n<p>LuaSQL 库中有一个 execute 函数，此函数可以完成所有数据加操作，包括创建、插入、更新等操作。其语法如下所示：</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">conn<span class=\"token punctuation\">:</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token string\">[[ 'MySQLSTATEMENT' ]]</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>执行上面的语句这前，我们需要保证与 MySQL 数据库的连接 conn 是打开的，同时将 MySQLSTATEMENT 更改为合法的 SQL 语句。</p>\n<h3 id=\"创建表\"><a class=\"markdownIt-Anchor\" href=\"#创建表\"></a> 创建表</h3>\n<p>下面的示例演示如何创建一个数据库表。例子中为表创建了两个属性分别为 id 和 name，其类型分别为整数和 vchar。</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">mysql <span class=\"token operator\">=</span> require <span class=\"token string\">\"luasql.mysql\"</span>\n\n<span class=\"token keyword\">local</span> env  <span class=\"token operator\">=</span> mysql<span class=\"token punctuation\">.</span><span class=\"token function\">mysql</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">local</span> conn <span class=\"token operator\">=</span> env<span class=\"token punctuation\">:</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token string\">'test'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'123456'</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>env<span class=\"token punctuation\">,</span>conn<span class=\"token punctuation\">)</span>\n\nstatus<span class=\"token punctuation\">,</span>errorString <span class=\"token operator\">=</span> conn<span class=\"token punctuation\">:</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token string\">[[CREATE TABLE sample2 (id INTEGER, name TEXT);]]</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">,</span>errorString <span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>运行上面的程序后，数据库中创建了一个表 sample，该表有两列，属性名分别为 id 和 name。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">MySQL environment <span class=\"token punctuation\">(</span>004BB178<span class=\"token punctuation\">)</span>\tMySQL connection <span class=\"token punctuation\">(</span>004BE3C8<span class=\"token punctuation\">)</span>\n<span class=\"token number\">0</span>\tnil<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>如果发生错误，则函数将返回一个错误消息，成功执行则返回 nil。下面是错误消息的一个例子：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">LuaSQL: Error executing query. MySQL: You have an error <span class=\"token keyword\">in</span> your SQL syntax<span class=\"token punctuation\">;</span> check the manual that corresponds to your MySQL server version <span class=\"token keyword\">for</span> the right syntax to use near <span class=\"token string\">'\"id INTEGER, name TEXT)'</span> at line <span class=\"token number\">1</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"插入语句\"><a class=\"markdownIt-Anchor\" href=\"#插入语句\"></a> 插入语句</h3>\n<p>ＭySQL 插入语句的示例如下所示：</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">conn<span class=\"token punctuation\">:</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token string\">[[INSERT INTO sample values('11','Raj')]]</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"更新语句\"><a class=\"markdownIt-Anchor\" href=\"#更新语句\"></a> 更新语句</h3>\n<p>ＭySQL 更新语句的示例如下所示：</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">conn<span class=\"token punctuation\">:</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token string\">[[UPDATE sample3 SET name='John' where id ='12']]</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"删除语句\"><a class=\"markdownIt-Anchor\" href=\"#删除语句\"></a> 删除语句</h3>\n<p>ＭySQL 删除语句的示例如下所示：</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">conn<span class=\"token punctuation\">:</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token string\">[[DELETE from sample3 where id ='12']]</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"查找语句\"><a class=\"markdownIt-Anchor\" href=\"#查找语句\"></a> 查找语句</h3>\n<p>成功查找返回后，我们需要循环遍历返回的所有行以取得我们需要的数据。查找语句的示例如下：</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">cursor<span class=\"token punctuation\">,</span>errorString <span class=\"token operator\">=</span> conn<span class=\"token punctuation\">:</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token string\">[[select * from sample]]</span><span class=\"token punctuation\">)</span>\nrow <span class=\"token operator\">=</span> cursor<span class=\"token punctuation\">:</span><span class=\"token function\">fetch</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"a\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">while</span> row <span class=\"token keyword\">do</span>\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Id: %s, Name: %s\"</span><span class=\"token punctuation\">,</span> row<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> row<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">-- reusing the table of results</span>\n  row <span class=\"token operator\">=</span> cursor<span class=\"token punctuation\">:</span><span class=\"token function\">fetch</span> <span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">,</span> <span class=\"token string\">\"a\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>上面的代码中，我们先打开了一个 MySQL 连接。通过 execute 函数返回的游标(cursor)，我们可以使用游标遍历返回的表，取得我们查找的数据。</p>\n<h3 id=\"完整示例\"><a class=\"markdownIt-Anchor\" href=\"#完整示例\"></a> 完整示例</h3>\n<p>下面这个例子用到了所有上面提到的数据的操作函数，请看下面这个完整的例子：</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">mysql <span class=\"token operator\">=</span> require <span class=\"token string\">\"luasql.mysql\"</span>\n\n<span class=\"token keyword\">local</span> env  <span class=\"token operator\">=</span> mysql<span class=\"token punctuation\">.</span><span class=\"token function\">mysql</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">local</span> conn <span class=\"token operator\">=</span> env<span class=\"token punctuation\">:</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token string\">'test'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'123456'</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>env<span class=\"token punctuation\">,</span>conn<span class=\"token punctuation\">)</span>\n\nstatus<span class=\"token punctuation\">,</span>errorString <span class=\"token operator\">=</span> conn<span class=\"token punctuation\">:</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token string\">[[CREATE TABLE sample3 (id INTEGER, name TEXT)]]</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">,</span>errorString <span class=\"token punctuation\">)</span>\n\nstatus<span class=\"token punctuation\">,</span>errorString <span class=\"token operator\">=</span> conn<span class=\"token punctuation\">:</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token string\">[[INSERT INTO sample3 values('12','Raj')]]</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">,</span>errorString <span class=\"token punctuation\">)</span>\n\ncursor<span class=\"token punctuation\">,</span>errorString <span class=\"token operator\">=</span> conn<span class=\"token punctuation\">:</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token string\">[[select * from sample3]]</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>cursor<span class=\"token punctuation\">,</span>errorString<span class=\"token punctuation\">)</span>\n\nrow <span class=\"token operator\">=</span> cursor<span class=\"token punctuation\">:</span><span class=\"token function\">fetch</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"a\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">while</span> row <span class=\"token keyword\">do</span>\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Id: %s, Name: %s\"</span><span class=\"token punctuation\">,</span> row<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> row<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  row <span class=\"token operator\">=</span> cursor<span class=\"token punctuation\">:</span><span class=\"token function\">fetch</span> <span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">,</span> <span class=\"token string\">\"a\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span>\n<span class=\"token comment\">-- close everything</span>\ncursor<span class=\"token punctuation\">:</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nconn<span class=\"token punctuation\">:</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>运行上面的程序，我们可以得到如下的输出结果：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">MySQL environment <span class=\"token punctuation\">(</span>0037B178<span class=\"token punctuation\">)</span>\tMySQL connection <span class=\"token punctuation\">(</span>0037EBA8<span class=\"token punctuation\">)</span>\n<span class=\"token number\">0</span>\tnil\n<span class=\"token number\">1</span>\tnil\nMySQL cursor <span class=\"token punctuation\">(</span>003778A8<span class=\"token punctuation\">)</span>\tnil\nId: <span class=\"token number\">12</span>, Name: Raj<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"执行事务\"><a class=\"markdownIt-Anchor\" href=\"#执行事务\"></a> 执行事务</h2>\n<p>事务是数据库中保证数据一致性的一种机制。事务有以下四个性质：</p>\n<ul>\n\t<li>原子性：一个事务要么全部执行要么全部不执行。</li>\n\t<li>一致性：事务开始前数据库是一致状态，事务结束后数据库状态也应该是一致的。</li>\n\t<li>隔离性：多个事务并发访问时，事务之间是隔离的，一个事务的中间状态不能被其它事务可见。</li>\n\t<li>持久性： 在事务完成以后，该事务所对数据库所做的更改便持久的保存在数据库之中，并不会被回滚。</li>\t\n</ul>\n事务以 START_TRANSACTION 开始，以 提交（commit）或 回滚（rollback）语句结束。  \n<h3 id=\"事务开始\"><a class=\"markdownIt-Anchor\" href=\"#事务开始\"></a> 事务开始</h3>\n<p>为了初始化一个事务，我们需要先打开一个 MySQL 连接，再执行如下的语句：</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">conn<span class=\"token punctuation\">:</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token string\">[[START TRANSACTION;]]</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"事务回滚\"><a class=\"markdownIt-Anchor\" href=\"#事务回滚\"></a> 事务回滚</h3>\n<p>当需要取消事务执行时，我们需要执行如下的语句回滚至更改前的状态。</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">conn<span class=\"token punctuation\">:</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token string\">[[ROLLBACK;]]</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"提交事务\"><a class=\"markdownIt-Anchor\" href=\"#提交事务\"></a> 提交事务</h3>\n<p>开始执行事务后，我们需要使用 commit 语句提交完成的修改内容。</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">conn<span class=\"token punctuation\">:</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token string\">[[COMMIT;]]</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>前面我们已经了解了 MySQL 的基本知识。接下来，我们将解释一下基本的  SQL 操作。请记住事务的概念，虽然我们在 SQLite3 中我们不在解释它，但是它的概念在 SQLite3 中同样适用。</p>\n<h2 id=\"导入-sqlite\"><a class=\"markdownIt-Anchor\" href=\"#导入-sqlite\"></a> 导入 SQLite</h2>\n<p>假设你已经安装配置正确了，那么就可以使用 require 语句导入 sqlite 库。安装过程中会产生一个存储数据相关文件的目录 libsql。</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">sqlite3 <span class=\"token operator\">=</span> require <span class=\"token string\">\"luasql.sqlite3\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>通过 sqlite3 变量可以访问提供的所有数据库操作相关函数。</p>\n<h3 id=\"建立连接-2\"><a class=\"markdownIt-Anchor\" href=\"#建立连接-2\"></a> 建立连接</h3>\n<p>我们先初始化 sqlite 环境，然后为该环境创建一个连接。语法如下：</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\"><span class=\"token keyword\">local</span> env  <span class=\"token operator\">=</span> sqlite3<span class=\"token punctuation\">.</span><span class=\"token function\">sqlite3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">local</span> conn <span class=\"token operator\">=</span> env<span class=\"token punctuation\">:</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mydb.sqlite'</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>上面的代码会与一个 sqlite 文件建立连接，如果文件不存在则创建新的 sqlite 文件并与该新文件建立连接。</p>\n<h3 id=\"执行函数-2\"><a class=\"markdownIt-Anchor\" href=\"#执行函数-2\"></a> 执行函数</h3>\n<p>LuaSQL 库中有一个 execute 函数，此函数可以完成所有数据加操作，包括创建、插入、更新等操作。其语法如下所示：</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">conn<span class=\"token punctuation\">:</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token string\">[[ 'SQLite3STATEMENT' ]]</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>执行上面的语句这前，我们需要保证与 MySQL 数据库的连接 conn 是打开的，同时将 SQLite3STATEMENT 更改为合法的 SQL 语句。</p>\n<h3 id=\"创建表-2\"><a class=\"markdownIt-Anchor\" href=\"#创建表-2\"></a> 创建表</h3>\n<p>下面的示例演示如何创建一个数据库表。例子中为表创建了两个属性分别为 id 和 name，其类型分别为整数和 vchar。</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">sqlite3 <span class=\"token operator\">=</span> require <span class=\"token string\">\"luasql.sqlite3\"</span>\n\n<span class=\"token keyword\">local</span> env  <span class=\"token operator\">=</span> sqlite3<span class=\"token punctuation\">.</span><span class=\"token function\">sqlite3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">local</span> conn <span class=\"token operator\">=</span> env<span class=\"token punctuation\">:</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mydb.sqlite'</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>env<span class=\"token punctuation\">,</span>conn<span class=\"token punctuation\">)</span>\n\nstatus<span class=\"token punctuation\">,</span>errorString <span class=\"token operator\">=</span> conn<span class=\"token punctuation\">:</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token string\">[[CREATE TABLE sample ('id' INTEGER, 'name' TEXT)]]</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">,</span>errorString <span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>运行上面的程序后，数据库中创建了一个表 sample，该表有两列，属性名分别为 id 和 name。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">SQLite3 environment <span class=\"token punctuation\">(</span>003EC918<span class=\"token punctuation\">)</span>\tSQLite3 connection <span class=\"token punctuation\">(</span>00421F08<span class=\"token punctuation\">)</span>\n<span class=\"token number\">0</span>\tnil<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>如果发生错误，则函数将而一个错误消息；若成功执行则返回 nil。下面是错误消息的一个例子：</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">LuaSQL<span class=\"token punctuation\">:</span> unrecognized token<span class=\"token punctuation\">:</span> <span class=\"token string\">\"\"</span><span class=\"token string\">'id'</span> INTEGER<span class=\"token punctuation\">,</span> <span class=\"token string\">'name'</span> TEXT<span class=\"token punctuation\">)</span>\"<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"插入语句-2\"><a class=\"markdownIt-Anchor\" href=\"#插入语句-2\"></a> 插入语句</h3>\n<p>插入语句的示例如下所示：</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">conn<span class=\"token punctuation\">:</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token string\">[[INSERT INTO sample values('11','Raj')]]</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"查找语句-2\"><a class=\"markdownIt-Anchor\" href=\"#查找语句-2\"></a> 查找语句</h3>\n<p>查找返回后，我们需要循环遍历每行以取得我们需要的数据。查找语句的示例如下：</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">cursor<span class=\"token punctuation\">,</span>errorString <span class=\"token operator\">=</span> conn<span class=\"token punctuation\">:</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token string\">[[select * from sample]]</span><span class=\"token punctuation\">)</span>\nrow <span class=\"token operator\">=</span> cursor<span class=\"token punctuation\">:</span><span class=\"token function\">fetch</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"a\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">while</span> row <span class=\"token keyword\">do</span>\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Id: %s, Name: %s\"</span><span class=\"token punctuation\">,</span> row<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> row<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">-- reusing the table of results</span>\n  row <span class=\"token operator\">=</span> cursor<span class=\"token punctuation\">:</span><span class=\"token function\">fetch</span> <span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">,</span> <span class=\"token string\">\"a\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>上面的代码中，我们先打开了一个 sqlite3 连接。通过 execute 函数返回的游标(cursor)，我们可以遍历返回的表，以取得我们查找的数据。</p>\n<h3 id=\"完整示例-2\"><a class=\"markdownIt-Anchor\" href=\"#完整示例-2\"></a> 完整示例</h3>\n<p>下面这个例子用到了所有上面提到的数据的操作函数，请看下面这个完整的例子：</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">sqlite3 <span class=\"token operator\">=</span> require <span class=\"token string\">\"luasql.sqlite3\"</span>\n\n<span class=\"token keyword\">local</span> env  <span class=\"token operator\">=</span> sqlite3<span class=\"token punctuation\">.</span><span class=\"token function\">sqlite3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">local</span> conn <span class=\"token operator\">=</span> env<span class=\"token punctuation\">:</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mydb.sqlite'</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>env<span class=\"token punctuation\">,</span>conn<span class=\"token punctuation\">)</span>\n\nstatus<span class=\"token punctuation\">,</span>errorString <span class=\"token operator\">=</span> conn<span class=\"token punctuation\">:</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token string\">[[CREATE TABLE sample ('id' INTEGER, 'name' TEXT)]]</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">,</span>errorString <span class=\"token punctuation\">)</span>\n\nstatus<span class=\"token punctuation\">,</span>errorString <span class=\"token operator\">=</span> conn<span class=\"token punctuation\">:</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token string\">[[INSERT INTO sample values('1','Raj')]]</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">,</span>errorString <span class=\"token punctuation\">)</span>\n\ncursor<span class=\"token punctuation\">,</span>errorString <span class=\"token operator\">=</span> conn<span class=\"token punctuation\">:</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token string\">[[select * from sample]]</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>cursor<span class=\"token punctuation\">,</span>errorString<span class=\"token punctuation\">)</span>\n\nrow <span class=\"token operator\">=</span> cursor<span class=\"token punctuation\">:</span><span class=\"token function\">fetch</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"a\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">while</span> row <span class=\"token keyword\">do</span>\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Id: %s, Name: %s\"</span><span class=\"token punctuation\">,</span> row<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> row<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  row <span class=\"token operator\">=</span> cursor<span class=\"token punctuation\">:</span><span class=\"token function\">fetch</span> <span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">,</span> <span class=\"token string\">\"a\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span>\n<span class=\"token comment\">-- close everything</span>\ncursor<span class=\"token punctuation\">:</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nconn<span class=\"token punctuation\">:</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nenv<span class=\"token punctuation\">:</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>运行上面的程序，我们可以得到如下的输出结果：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">SQLite3 environment <span class=\"token punctuation\">(</span>005EC918<span class=\"token punctuation\">)</span>\tSQLite3 connection <span class=\"token punctuation\">(</span>005E77B0<span class=\"token punctuation\">)</span>\n<span class=\"token number\">0</span>\tnil\n<span class=\"token number\">1</span>\tnil\nSQLite3 cursor <span class=\"token punctuation\">(</span>005E9200<span class=\"token punctuation\">)</span>\tnil\nId: <span class=\"token number\">1</span>, Name: Raj<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>使用 libsql 库我们可以执行所有的数据库操作。所以，看完这些例子后，请自己多做一些练习。</p>\n","text":" Lua 数据库访问 简单的数据操作，我们用文件就可以处理。但是，某些时候文件操作存在性能、扩展性等问题。这时候，我们就需要使用数据库。LuaSQL 是一个提供数据库操作的库，它支持多种 SQL 数据库的操作。包括： SQLite MySQL ODBC 在本教程中，我们会讲解用 ...","link":"","photos":[],"count_time":{"symbolsCount":"5.9k","symbolsTime":"5 mins."},"categories":[{"name":"lua_guide","slug":"lua-guide","count":34,"path":"api/categories/lua-guide.json"}],"tags":[{"name":"lua","slug":"lua","count":124,"path":"api/tags/lua.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#lua-%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BF%E9%97%AE\"><span class=\"toc-text\"> Lua 数据库访问</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#mysql-%E6%95%B0%E6%8D%AE%E5%BA%93%E7%8E%AF%E5%A2%83%E8%AE%BE%E7%BD%AE\"><span class=\"toc-text\"> MySQL 数据库环境设置</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AF%BC%E5%85%A5-mysql\"><span class=\"toc-text\"> 导入 MySQL</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%BB%BA%E7%AB%8B%E8%BF%9E%E6%8E%A5\"><span class=\"toc-text\"> 建立连接</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%89%A7%E8%A1%8C%E5%87%BD%E6%95%B0\"><span class=\"toc-text\"> 执行函数</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%9B%E5%BB%BA%E8%A1%A8\"><span class=\"toc-text\"> 创建表</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%8F%92%E5%85%A5%E8%AF%AD%E5%8F%A5\"><span class=\"toc-text\"> 插入语句</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%9B%B4%E6%96%B0%E8%AF%AD%E5%8F%A5\"><span class=\"toc-text\"> 更新语句</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%A0%E9%99%A4%E8%AF%AD%E5%8F%A5\"><span class=\"toc-text\"> 删除语句</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%9F%A5%E6%89%BE%E8%AF%AD%E5%8F%A5\"><span class=\"toc-text\"> 查找语句</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%8C%E6%95%B4%E7%A4%BA%E4%BE%8B\"><span class=\"toc-text\"> 完整示例</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%89%A7%E8%A1%8C%E4%BA%8B%E5%8A%A1\"><span class=\"toc-text\"> 执行事务</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BA%8B%E5%8A%A1%E5%BC%80%E5%A7%8B\"><span class=\"toc-text\"> 事务开始</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BA%8B%E5%8A%A1%E5%9B%9E%E6%BB%9A\"><span class=\"toc-text\"> 事务回滚</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%8F%90%E4%BA%A4%E4%BA%8B%E5%8A%A1\"><span class=\"toc-text\"> 提交事务</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AF%BC%E5%85%A5-sqlite\"><span class=\"toc-text\"> 导入 SQLite</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%BB%BA%E7%AB%8B%E8%BF%9E%E6%8E%A5-2\"><span class=\"toc-text\"> 建立连接</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%89%A7%E8%A1%8C%E5%87%BD%E6%95%B0-2\"><span class=\"toc-text\"> 执行函数</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%9B%E5%BB%BA%E8%A1%A8-2\"><span class=\"toc-text\"> 创建表</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%8F%92%E5%85%A5%E8%AF%AD%E5%8F%A5-2\"><span class=\"toc-text\"> 插入语句</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%9F%A5%E6%89%BE%E8%AF%AD%E5%8F%A5-2\"><span class=\"toc-text\"> 查找语句</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%8C%E6%95%B4%E7%A4%BA%E4%BE%8B-2\"><span class=\"toc-text\"> 完整示例</span></a></li></ol></li></ol></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Lua操作系统工具库","uid":"690a2272c904046df2d9d8b8e3328a46","slug":"lua/2016-06-01-operating-system-facilities","date":"2024-03-14T07:45:09.085Z","updated":"2024-03-27T04:17:53.267Z","comments":true,"path":"api/articles/lua/2016-06-01-operating-system-facilities.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":" Lua 操作系统工具库 在很多应用中，我们都需要访问到操作系统级别的函数，操作系统库就给我们提供了这样的工具。下面的列表给出操作系统工具包提供的方法： S.N. 函数与功能 1 os.clock()：以秒为单位返回程序运行所用 CPU 时间的近似值。 2 os.date([fo...","link":"","photos":[],"count_time":{"symbolsCount":"1.7k","symbolsTime":"2 mins."},"categories":[{"name":"lua_guide","slug":"lua-guide","count":34,"path":"api/categories/lua-guide.json"}],"tags":[{"name":"lua","slug":"lua","count":124,"path":"api/tags/lua.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Lua垃圾回收机制","uid":"a34942b7e84e08a52441ea25cc5475d6","slug":"lua/2016-06-01-garbage-collection","date":"2024-03-14T07:45:09.084Z","updated":"2024-03-27T03:37:48.800Z","comments":true,"path":"api/articles/lua/2016-06-01-garbage-collection.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":" Lua 垃圾回收机制 Lua 通过特定算法的垃圾回收机制实现自动内存管理。由于自动内存管理机制的存在，作为程序开发人员： 不需要关心对象的内存分配问题。 不再使用对象时，除了将引用它的变量设为 nil，不需要主动释放对象。 Lua 的垃圾回收器会不断运行去收集不再被 Lua 程...","link":"","photos":[],"count_time":{"symbolsCount":"1.7k","symbolsTime":"2 mins."},"categories":[{"name":"lua_guide","slug":"lua-guide","count":34,"path":"api/categories/lua-guide.json"}],"tags":[{"name":"lua","slug":"lua","count":124,"path":"api/tags/lua.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}