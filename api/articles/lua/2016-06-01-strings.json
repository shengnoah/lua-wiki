{"title":"Lua字符串","uid":"cedbdf206a63ba0896535fb39f386996","slug":"lua/2016-06-01-strings","date":"2024-03-14T07:45:09.089Z","updated":"2024-03-27T04:02:38.632Z","comments":true,"path":"api/articles/lua/2016-06-01-strings.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<h1 id=\"lua-字符串\"><a class=\"markdownIt-Anchor\" href=\"#lua-字符串\"></a> Lua 字符串</h1>\n<p>字符串就是一个由字符或控制字符组成的序列。字符串可以用以下三种方式任意一种进行初始化。</p>\n<ul>\n\t<li>单引号字符串</li>\n\t<li>双引号字符串</li>\n\t<li>[[和]]之间的字符串</li>\n</ul>  \n<p>上面三种初始化方式的示例如下：</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">string1 <span class=\"token operator\">=</span> <span class=\"token string\">\"Lua\"</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\\"String 1 is\\\"\"</span><span class=\"token punctuation\">,</span>string1<span class=\"token punctuation\">)</span>\nstring2 <span class=\"token operator\">=</span> <span class=\"token string\">'Tutorial'</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"String 2 is\"</span><span class=\"token punctuation\">,</span>string2<span class=\"token punctuation\">)</span>\n\nstring3 <span class=\"token operator\">=</span> <span class=\"token string\">[[\"Lua Tutorial\"]]</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"String 3 is\"</span><span class=\"token punctuation\">,</span>string3<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>运行上面的程序，我们可以得到如下的输出结果：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token string\">\"String 1\"</span> is\tLua\nString <span class=\"token number\">2</span> is\tTutorial\nString <span class=\"token number\">3</span> is\t<span class=\"token string\">\"Lua Tutorial\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>字符串中转义字符用于改变字符的一般正常的解释。在上面的例子中，输出双引号（“”）的时候，我们使用的是 &quot;。下表列出了转义序列及相应的使用方法：</p>\n<table>\n\t<tr>\n\t\t<th>转义序列</th>\n\t\t<th>用法</th>\n\t</tr>\n\t<tr>\n\t\t<td>\\a</td>\n\t\t<td>响铃</td>\n\t</tr>\n\t<tr>\n\t\t<td>\\b</td>\n\t\t<td>退格</td>\n\t</tr>\n\t<tr>\n\t\t<td>\\f</td>\n\t\t<td>换页</td>\n\t</tr>\n\t<tr>\n\t\t<td>\\n</td>\n\t\t<td>换行</td>\n\t</tr>\n\t<tr>\n\t\t<td>\\r</td>\n\t\t<td>回车</td>\n\t</tr>\n\t<tr>\n\t\t<td>\\t</td>\n\t\t<td>制表符</td>\n\t</tr>\n\t<tr>\n\t\t<td>\\v</td>\n\t\t<td>垂直制表符</td>\n\t</tr>\n\t<tr>\n\t\t<td>\\\\</td>\n\t\t<td>反斜线</td>\n\t</tr>\n\t<tr>\n\t\t<td>\\\"</td>\n\t\t<td>双引号</td>\n\t</tr>\n\t<tr>\n\t\t<td>\\'</td>\n\t\t<td>单引号</td>\n\t</tr>\n\t<tr>\n\t\t<td>\\[</td>\n\t\t<td>左方括号</td>\n\t</tr>\n\t<tr>\n\t\t<td>\\]</td>\n\t\t<td>右方括号</td>\n\t</tr>\n</table>\n<h2 id=\"字符串操作\"><a class=\"markdownIt-Anchor\" href=\"#字符串操作\"></a> 字符串操作</h2>\n<p>Lua 支持如下的字符串操作方法：</p>\n<table>\n\t<tr>\n\t\t<th>S.N.</th>\n\t\t<th>函数及其功能</th>\n\t</tr>\n\t<tr>\n\t\t<td>1</td>\n\t\t<td>string.upper(argument):将输入参数全部字符转换为大写并返回。</td>\n\t</tr>\n\t<tr>\n\t\t<td>2</td>\n\t\t<td>string.lower(argument):将输入参数全部字符转换为小写并返回。</td>\n\t</tr>\n\t<tr>\n\t\t<td>3</td>\n\t\t<td>string.gsub(maingString,findString,replaceString):将 mainString 中的所有 findString 用 replaceString 替换并返回结果。</td>\n\t</tr>\n\t<tr>\n\t\t<td>4</td>\n\t\t<td>string.strfind(mainString,findString,optionalStartIndex,optionalEndIndex):在主字符串中查找 findString 并返回 findString 在主字符串中的开始和结束位置，若查找失败则返回 nil。</td>\n\t</tr>\n\t<tr>\n\t\t<td>5</td>\n\t\t<td>string.reverse(arg):将输入字符串颠倒并返回。</td>\n\t</tr>\n\t<tr>\n\t\t<td>6</td>\n\t\t<td>string.format(...):返回格式化后的字符串。</td>\n\t</tr>\n\t<tr>\n\t\t<td>7</td>\n\t\t<td>string.char(arg) 和 string.byte(arg):前者返回输出参数的所代表的字符，后者返回输入参数（字符）的数值。</td>\n\t</tr>\n\t<tr>\n\t\t<td>8</td>\n\t\t<td>string.len(arg):返回输入字符串的长度。</td>\n\t</tr>\n\t<tr>\n\t\t<td>9</td>\n\t\t<td>string.rep(string,n): 将输入字符串 string 重复 n　次后的新字符串返回。</td>\n\t</tr>\n\t<tr>\n\t\t<td>10</td>\n\t\t<td>..:连接两个字符串。</td>\n\t</tr>\n</table>\n<p>接下来我们用一些例子来讲解如何使用上面这些函数。</p>\n<h2 id=\"大小写操作函数\"><a class=\"markdownIt-Anchor\" href=\"#大小写操作函数\"></a> 大小写操作函数</h2>\n<p>下面的代码将字符串中字符全部转换成大写或小写：</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">string1 <span class=\"token operator\">=</span> <span class=\"token string\">\"Lua\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">.</span><span class=\"token function\">upper</span><span class=\"token punctuation\">(</span>string1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">.</span><span class=\"token function\">lower</span><span class=\"token punctuation\">(</span>string1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>执行上面的代码可以得到如下的输出结果：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">LUA\nlua<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h2 id=\"替换子串\"><a class=\"markdownIt-Anchor\" href=\"#替换子串\"></a> 替换子串</h2>\n<p>用一个字符串替换字符串的某子串的示例代码如下：</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">string <span class=\"token operator\">=</span> <span class=\"token string\">\"Lua Tutorial\"</span>\n<span class=\"token comment\">-- 替换字符串</span>\nnewstring <span class=\"token operator\">=</span> string<span class=\"token punctuation\">.</span><span class=\"token function\">gsub</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">,</span><span class=\"token string\">\"Tutorial\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Language\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The new string is\"</span><span class=\"token punctuation\">,</span>newstring<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>执行上面的代码可以得到如下的输出结果：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">The new string is\tLua Language<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h2 id=\"查找与颠倒\"><a class=\"markdownIt-Anchor\" href=\"#查找与颠倒\"></a> 查找与颠倒</h2>\n<p>查找一个子串的索引与颠倒一个字符串函数的示例代码如下所示：</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">string <span class=\"token operator\">=</span> <span class=\"token string\">\"Lua Tutorial\"</span>\n<span class=\"token comment\">-- 替换字符串</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">,</span><span class=\"token string\">\"Tutorial\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nreversedString <span class=\"token operator\">=</span> string<span class=\"token punctuation\">.</span><span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">)</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The new string is\"</span><span class=\"token punctuation\">,</span>reversedString<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>执行上面的代码可以得到如下的输出结果：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token number\">5</span>\t<span class=\"token number\">12</span>\nThe new string is\tlairotuT auL<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h2 id=\"格式化字符串\"><a class=\"markdownIt-Anchor\" href=\"#格式化字符串\"></a> 格式化字符串</h2>\n<p>在编程过程中，我们经常需要将字符串以某种格式输出。此时，你就可以使用 string.format 函数格式化你的输出内容。如下所示：</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">string1 <span class=\"token operator\">=</span> <span class=\"token string\">\"Lua\"</span>\nstring2 <span class=\"token operator\">=</span> <span class=\"token string\">\"Tutorial\"</span>\nnumber1 <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\nnumber2 <span class=\"token operator\">=</span> <span class=\"token number\">20</span>\n<span class=\"token comment\">-- 基本字符串格式</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Basic formatting %s %s\"</span><span class=\"token punctuation\">,</span>string1<span class=\"token punctuation\">,</span>string2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">-- 日期格式化</span>\ndate <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> month <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> year <span class=\"token operator\">=</span> <span class=\"token number\">2014</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Date formatting %02d/%02d/%03d\"</span><span class=\"token punctuation\">,</span> date<span class=\"token punctuation\">,</span> month<span class=\"token punctuation\">,</span> year<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">-- 符点数格式化</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%.4f\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token operator\">/</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>执行上面的代码可以得到如下的输出结果：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">Basic formatting Lua Tutorial\nDate formatting 02/01/2014\n<span class=\"token number\">0.3333</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"字符与字节表示\"><a class=\"markdownIt-Anchor\" href=\"#字符与字节表示\"></a> 字符与字节表示</h2>\n<p>字节表示函数用于将字符的内部表示转换为字符表示，而字符表示函数正好相反。 示例代码如下：</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\"><span class=\"token comment\">-- 字节转换</span>\n<span class=\"token comment\">-- 第一个字符</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">.</span><span class=\"token function\">byte</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Lua\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">-- 第三个字符</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">.</span><span class=\"token function\">byte</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Lua\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">-- 倒数第一个字符</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">.</span><span class=\"token function\">byte</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Lua\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">-- 第二个字符</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">.</span><span class=\"token function\">byte</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Lua\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">-- 倒数第二个字符</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">.</span><span class=\"token function\">byte</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Lua\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">-- 内部 ASCII 字值转换为字符</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">.</span><span class=\"token function\">char</span><span class=\"token punctuation\">(</span><span class=\"token number\">97</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>执行上面的代码可以得到如下的输出结果：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token number\">76</span>\n<span class=\"token number\">97</span>\n<span class=\"token number\">97</span>\n<span class=\"token number\">117</span>\n<span class=\"token number\">117</span>\na<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"其它常用函数\"><a class=\"markdownIt-Anchor\" href=\"#其它常用函数\"></a> 其它常用函数</h2>\n<p>其它常用的字符串处理函数包括字符串连接，字符串长度函数以及重复字符串多次的函数。它们的使用方法示例如下：</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">string1 <span class=\"token operator\">=</span> <span class=\"token string\">\"Lua\"</span>\nstring2 <span class=\"token operator\">=</span> <span class=\"token string\">\"Tutorial\"</span>\n<span class=\"token comment\">-- 用 .. 连接两个字符串</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Concatenated string\"</span><span class=\"token punctuation\">,</span>string1<span class=\"token operator\">..</span>string2<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">-- 字符串的长度</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Length of string1 is \"</span><span class=\"token punctuation\">,</span>string<span class=\"token punctuation\">.</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span>string1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">-- 重复字符串</span>\nrepeatedString <span class=\"token operator\">=</span> string<span class=\"token punctuation\">.</span><span class=\"token function\">rep</span><span class=\"token punctuation\">(</span>string1<span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>repeatedString<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>执行上面的代码可以得到如下的输出结果：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">Concatenated string\tLuaTutorial\nLength of string1 is \t<span class=\"token number\">3</span>\nLuaLuaLua<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>","text":" Lua 字符串 字符串就是一个由字符或控制字符组成的序列。字符串可以用以下三种方式任意一种进行初始化。 单引号字符串 双引号字符串 [[和]]之间的字符串 上面三种初始化方式的示例如下： string1 = \"Lua\" print(\"\\\"String 1 is\\\"\",strin...","link":"","photos":[],"count_time":{"symbolsCount":"3.1k","symbolsTime":"3 mins."},"categories":[{"name":"lua_guide","slug":"lua-guide","count":34,"path":"api/categories/lua-guide.json"}],"tags":[{"name":"lua","slug":"lua","count":124,"path":"api/tags/lua.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#lua-%E5%AD%97%E7%AC%A6%E4%B8%B2\"><span class=\"toc-text\"> Lua 字符串</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\"> 字符串操作</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%A4%A7%E5%B0%8F%E5%86%99%E6%93%8D%E4%BD%9C%E5%87%BD%E6%95%B0\"><span class=\"toc-text\"> 大小写操作函数</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%9B%BF%E6%8D%A2%E5%AD%90%E4%B8%B2\"><span class=\"toc-text\"> 替换子串</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%9F%A5%E6%89%BE%E4%B8%8E%E9%A2%A0%E5%80%92\"><span class=\"toc-text\"> 查找与颠倒</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2\"><span class=\"toc-text\"> 格式化字符串</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AD%97%E7%AC%A6%E4%B8%8E%E5%AD%97%E8%8A%82%E8%A1%A8%E7%A4%BA\"><span class=\"toc-text\"> 字符与字节表示</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%85%B6%E5%AE%83%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0\"><span class=\"toc-text\"> 其它常用函数</span></a></li></ol></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Lua中的嵌套 if 语句","uid":"5244c371e170ba321efd30c500d79562","slug":"lua/2016-06-01-nested-if-statement","date":"2024-03-14T07:45:09.089Z","updated":"2024-03-14T07:45:09.089Z","comments":true,"path":"api/articles/lua/2016-06-01-nested-if-statement.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"#Lua 中的嵌套 if 语句 在 Lua 语言中，你可以合法的嵌套使用 if-else 语句。这也就是说，你可以在一个 if 或 if-else 语句内再使用一个 if 或 if-else 语句。 ##语法 嵌套 if 语句的语法规则如下： if( boolean_expres...","link":"","photos":[],"count_time":{"symbolsCount":723,"symbolsTime":"1 mins."},"categories":[{"name":"lua_guide","slug":"lua-guide","count":34,"path":"api/categories/lua-guide.json"}],"tags":[{"name":"lua","slug":"lua","count":124,"path":"api/tags/lua.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Lua的变量","uid":"00031c756df5944ae03766354a37e479","slug":"lua/2016-06-01-variables","date":"2024-03-14T07:45:09.089Z","updated":"2024-03-27T04:03:54.470Z","comments":true,"path":"api/articles/lua/2016-06-01-variables.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":" 变量 变量就是给一块内存区域赋予的一个名字。变量使得在程序中就可以修改或读取相应的内存区域中的内容。它可以代表各种不同类型的值，包括函数与表。 变量的名字由字母、数字与下划线组成。它必须是字母或下划线开头。由于 Lua 是字母大小写敏感的，所以大写字母与小写字母是不一样的。Lu...","link":"","photos":[],"count_time":{"symbolsCount":"1.7k","symbolsTime":"2 mins."},"categories":[{"name":"lua_guide","slug":"lua-guide","count":34,"path":"api/categories/lua-guide.json"},{"name":"LUA教程","slug":"lua-guide/LUA教程","count":2,"path":"api/categories/lua-guide/LUA教程.json"}],"tags":[{"name":"LUA教程","slug":"LUA教程","count":4,"path":"api/tags/LUA教程.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}