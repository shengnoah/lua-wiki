{"title":"Lua标准库","uid":"fa374b256846497ad36372533ba9888a","slug":"lua/2016-06-01-standard-libraries","date":"2024-03-14T06:15:59.726Z","updated":"2024-03-14T06:15:59.726Z","comments":true,"path":"api/articles/lua/2016-06-01-standard-libraries.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":null,"content":"<h1 id=\"Lua-标准库\"><a href=\"#Lua-标准库\" class=\"headerlink\" title=\"Lua 标准库\"></a>Lua 标准库</h1><p>Lua 标准库利用 C 语言 API 实现并提供了丰富的函数，它们内置于 Lua 语言中。该标准库不仅可以提供 Lua 语言内服务，还能提供外部服务，比如文件或数据库的操作。  </p>\n<p>这些标准库使用标准的 C API 接口实现，它们作为独立的 C 语言模块提供给使用者。主要包括以下的内容：</p>\n<ul>\n    <li>基本库，包括协程子库</li>\n    <li>模块库</li>\n    <li>字符串操作</li>\n    <li>表操作</li>\n    <li>数学计算库</li>\n    <li>文件输入与输出</li>\n    <li>操作系统工具库</li>\n    <li>调试工具库</li>\n</ul>\n\n<h2 id=\"基本库\"><a href=\"#基本库\" class=\"headerlink\" title=\"基本库\"></a>基本库</h2><p>在本教程中，我们已经在很多地方都使用了基本库的内容。下面的表中列出了相关的函数与链接。  </p>\n<table>\n    <tr>\n        <th>S.N.</th>\n        <th>库或者方法</th>\n    </tr>\n    <tr>\n        <td>1</td>\n        <td>错误处理库，包括错误处理函数，比如 assert，error等，详见<a href=\"./error-handling.md\">错误处理</a>。</td>\n    </tr>\n    <tr>\n        <td>2</td>\n        <td>内存管理，包括与垃圾回收相关的自动内存管理的内容，详见<a href=\"./garbage-collection.md\">垃圾回收</a>。</td>\n    </tr>\n    <tr>\n        <td>3</td>\n        <td>dofile([filename])，打开指定文件，并将文件内容作为代码执行。如果没有传入参数，则函数执行标准输入的内容。错误会传递至函数调用者。</td>\n    </tr>\n    <tr>\n        <td>4</td>\n        <td>_G，全局变量，它存储全局的环境。Lua 本身不使用此变量。</td>\n    </tr>\n    <tr>\n        <td>5</td>\n        <td>getfenv([f])，返回指定函数使用的当前环境（作用域），可以通过函数名或栈深度值指定函数。 1 表示调用 getfenv 的函数。如果传入的参数不是函数或者 f 为 0,则返回全局环境。f 的默认值为 1。</td>\n    </tr>\n    <tr>\n        <td>6</td>\n        <td>getmetatable(object)：如果对象没有元表，则返回 nil。如果对象的元表有 __metable 域，则返回该值；否则返回对象的元表。</td>\n    </tr>\n    <tr>\n        <td>7</td>\n        <td>ipairs(t)，用于遍历表，此函数返回三个值：next 函数，表 t, 以及 0。</td>\n    </tr>\n    <tr>\n        <td>8</td>\n        <td>load(func[,chunkname])，使用函数 func 加载一个块（代码块），每次调用func必须返回与先前的结果连接后的字符串</td>\n    </tr>\n    <tr>\n        <td>9</td>\n        <td>loadfile([filename]),与 load 函数相似，此函数从文件中或标准输入（没指定文件名时）读入代码块。</td>\n    </tr>\n    <tr>\n        <td>10</td>\n        <td>loadstring(string,[,chunkname])，与 load 类似，从指定字符串中获得代码块。</td>\n    </tr>\n    <tr>\n        <td>11</td>\n        <td>next(table[,index])，此函数用于遍历表结构。第一参数为表，第二个参数是一个索引值。返回值为指定索引的下一个索引与相关的值。</td>\n    </tr>\n    <tr>\n        <td>12</td>\n        <td>pairs(t),用于遍历表，此函数返回三个值：next 函数，表 t, 以及 nil。</td>\n    </tr>\n    <tr>\n        <td>13</td>\n        <td>print(...)，打印输出传入参数。</td>\n    </tr>\n    <tr>\n        <td>14</td>\n        <td>rawequal(v1,v2)，判断 v1 与 v2 是否相等，不会调用任何元方法。返回布尔值。</td>\n    </tr>\n    <tr>\n        <td>15</td>\n        <td>rawget(table,index)，返回 table[index]，不会调用元方法。table 必须是表，索引可以是任何值。</td>\n    </tr>\n    <tr>\n        <td>16</td>\n        <td>rawset(table,index,value)，等价于 table[index] = value，但是不会调用元方法。函数返回表。</td>\n    </tr>\n    <tr>\n        <td>17</td>\n        <td>select(index,...)，如果 index 为数字n,那么 select 返回它的第 n 个可变实参，否则只能为字符串 \"#\",这样select会返回变长参数的总数。</td>\n    </tr>\n    <tr>\n        <td>18</td>\n        <td>setfenv(f,table)，设置指定函数的作用域。可以通过函数名或栈深度值指定函数。 1 表示调用 setfenv 的函数。返回值为指定函数。特别地，如果 f 为 0，则改变当前线程的运行环境，这时候函数无返回值。</td>\n    </tr>\n    <tr>\n        <td>19</td>\n        <td>setmetatable(table,metatable)，设置指定表的元表（不能从 Lua 中改变其它类型的元表，其它类型的元表只能从 C 语言中修改）。如果 metatable 为 nil，则删除表的元表；如果原来的元表有 __metatable 域，则出错。函数返回 table。 </td>\n    </tr>\n    <tr>\n        <td>20</td>\n        <td>tonumber(e[,base])，将参数转换为数值。如果参数本身已经是数值或者是可以转换为数值的字符串，则 tonumber 返回数值，否则返回 nil。</td>\n    </tr>\n    <tr>\n        <td>21</td>\n        <td>tostring(e)，将传递的实参以合理的格式转换为字符串。精确控制字符串的转换可以使用 string.format 函数。</td>\n    </tr>\n    <tr>\n        <td>22</td>\n        <td>type(v)，以字符串的形式返回输入参数的类型。该函数的返回值可以取字符串：nil，number，string，boolean，table，function，thread，userdata。</td>\n    </tr>\n    <tr>\n        <td>23</td>\n        <td>unpack(list[,i[,j]])，从指定的表中返回元素。</td>\n    </tr>\n    <tr>\n        <td>24</td>\n        <td>_VERSION，存储当前解释器版本信息的全局变量。该变量当前存储的内容为：Lua 5.1。（译注：与解释器版本有关）</td>\n    </tr>\n    <tr>\n        <td>25</td>\n        <td>协程库，包括协程相关的函数，详见<a href=\"./coroutines.md\">协程</a></td>\n    </tr>\n</table>\n\n<h2 id=\"模块库\"><a href=\"#模块库\" class=\"headerlink\" title=\"模块库\"></a>模块库</h2><p>模块库提供了加载模块的基本函数。它在全局作用域内提供了 require 函数。其它的函数都是通过包管理的模块库提供的。详细内容请参见<a href=\"./modules.md\">模块</a>。</p>\n<h2 id=\"字符串操作库\"><a href=\"#字符串操作库\" class=\"headerlink\" title=\"字符串操作库\"></a>字符串操作库</h2><p>详细内容请参见<a href=\"./strings.md\">字符串</a>。</p>\n<h2 id=\"表操作库\"><a href=\"#表操作库\" class=\"headerlink\" title=\"表操作库\"></a>表操作库</h2><p>详细内容请参见<a href=\"./tables.md\">表</a>。</p>\n<h2 id=\"数学函数库\"><a href=\"#数学函数库\" class=\"headerlink\" title=\"数学函数库\"></a>数学函数库</h2><p>详细内容请参见<a href=\"./math-library.md\">数学函数库</a>。 </p>\n<h2 id=\"文件-IO-库\"><a href=\"#文件-IO-库\" class=\"headerlink\" title=\"文件 IO 库\"></a>文件 IO 库</h2><p>详细内容请参见<a href=\"./file-io.md\">文件 IO</a>。 </p>\n<h2 id=\"操作系统工具库\"><a href=\"#操作系统工具库\" class=\"headerlink\" title=\"操作系统工具库\"></a>操作系统工具库</h2><p>详细内容请参见<a href=\"./operating-system-facilities.md\">操作系统工具库</a>。 </p>\n<h2 id=\"调试工具库\"><a href=\"#调试工具库\" class=\"headerlink\" title=\"调试工具库\"></a>调试工具库</h2><p>详细内容请参见<a href=\"./debugging.md\">调试</a>。 </p>\n","text":"Lua 标准库Lua 标准库利用 C 语言 API 实现并提供了丰富的函数，它们内置于 Lua 语言中。该标准库不仅可以提供 Lua 语言内服务，还能提供外部服务，比如文件或数据库的操作。 这些标准库使用标准的 C API 接口实现，它们作为独立的 C 语言模块提供给使用者。主要...","link":"","photos":[],"count_time":{"symbolsCount":"2.8k","symbolsTime":"3 mins."},"categories":[{"name":"lua_guide","slug":"lua-guide","count":68,"path":"api/categories/lua-guide.json"}],"tags":[{"name":"lua","slug":"lua","count":153,"path":"api/tags/lua.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Lua-%E6%A0%87%E5%87%86%E5%BA%93\"><span class=\"toc-text\">Lua 标准库</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E6%9C%AC%E5%BA%93\"><span class=\"toc-text\">基本库</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%A8%A1%E5%9D%97%E5%BA%93\"><span class=\"toc-text\">模块库</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%93%8D%E4%BD%9C%E5%BA%93\"><span class=\"toc-text\">字符串操作库</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%A1%A8%E6%93%8D%E4%BD%9C%E5%BA%93\"><span class=\"toc-text\">表操作库</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%95%B0%E5%AD%A6%E5%87%BD%E6%95%B0%E5%BA%93\"><span class=\"toc-text\">数学函数库</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%96%87%E4%BB%B6-IO-%E5%BA%93\"><span class=\"toc-text\">文件 IO 库</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%B7%A5%E5%85%B7%E5%BA%93\"><span class=\"toc-text\">操作系统工具库</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7%E5%BA%93\"><span class=\"toc-text\">调试工具库</span></a></li></ol></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Lua表","uid":"038bf88a1c7598385fc79ad2a48f60ba","slug":"lua/2016-06-01-tables","date":"2024-03-14T06:15:59.726Z","updated":"2024-03-14T06:15:59.726Z","comments":true,"path":"api/articles/lua/2016-06-01-tables.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":null,"text":"Lua 表在 Lua 语言中，表是唯一可以用来创建不同数据类型的数据结构，比如常见的数组和字典都是用表来创建的。 Lua 语言中经常到关联数组这种数据类型，它不仅可以用数值作为索引值，除了 nil 以外的字符串同样可以作为其索引。表没有固定的大小，当数据量增加时表会自动增大。 L...","link":"","photos":[],"count_time":{"symbolsCount":"4k","symbolsTime":"4 mins."},"categories":[{"name":"lua_guide","slug":"lua-guide","count":68,"path":"api/categories/lua-guide.json"}],"tags":[{"name":"lua","slug":"lua","count":153,"path":"api/tags/lua.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Lua的变量","uid":"00031c756df5944ae03766354a37e479","slug":"lua/2016-06-01-variables","date":"2024-03-14T06:15:59.726Z","updated":"2024-03-14T06:15:59.726Z","comments":true,"path":"api/articles/lua/2016-06-01-variables.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":null,"text":"变量变量就是给一块内存区域赋予的一个名字。变量使得在程序中就可以修改或读取相应的内存区域中的内容。它可以代表各种不同类型的值，包括函数与表。 变量的名字由字母、数字与下划线组成。它必须是字母或下划线开头。由于 Lua 是字母大小写敏感的，所以大写字母与小写字母是不一样的。Lua ...","link":"","photos":[],"count_time":{"symbolsCount":"1.9k","symbolsTime":"2 mins."},"categories":[{"name":"lua_guide","slug":"lua-guide","count":68,"path":"api/categories/lua-guide.json"},{"name":"LUA教程","slug":"lua-guide/LUA教程","count":4,"path":"api/categories/lua-guide/LUA教程.json"}],"tags":[{"name":"LUA教程","slug":"LUA教程","count":8,"path":"api/tags/LUA教程.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}