{"title":"Lua模块","uid":"795dd91f8815508a13e65b7151fdf68c","slug":"lua/2016-06-01-modules","date":"2024-03-14T07:45:09.088Z","updated":"2024-03-14T07:45:09.088Z","comments":true,"path":"api/articles/lua/2016-06-01-modules.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":null,"content":"<h1>Lua 模块</h1>\n<h2 id=\"什么是模块？\">什么是模块？</h2>\n<p>Lua 中的模块与库的概念相似，每个模块都有一个全局唯一名字，并且每个模块都包含一个表。使用一个模块时，可以使用 require 加载模块。模块中可以包括函数和变量，所有这些函数和变量被表存储于模块的表中。模块中的表的功能类似于命名空间，用于隔离不同模块中的相同的变量名。在使用模块的时候，我们应该遵守模块定义的规范，在 require 加载模块时返回模块中的包含函数和变量的表对象。</p>\n<h2 id=\"Lua-模块的特别之处\">Lua 模块的特别之处</h2>\n<p>模块中表的使用使得我们可在绝大多数情况下可以像操作其它表一样操作模块。由于 Lua 语言允许对模块本身进行操作，所以 Lua 也就具备了许多其它语言需要特殊机制才能实现的特殊性质。例如，这种自由的表操作机制使得编程人员可以用多种方法调用模块中的函数。下面的例子演示了其中的一些方法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- 假设我们有一个板块 printFormatter</span><br><span class=\"line\">-- 该模块有一个函数 simpleFormat(arg)</span><br><span class=\"line\">-- 方法 1</span><br><span class=\"line\">require &quot;printFormatter&quot;</span><br><span class=\"line\">printFormatter.simpleFormat(&quot;test&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">-- 方法 2</span><br><span class=\"line\">local formatter = require &quot;printFormatter&quot;</span><br><span class=\"line\">formatter.simpleFormat(&quot;test&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">-- 方法 3</span><br><span class=\"line\">require &quot;printFormatter&quot;</span><br><span class=\"line\">local formatterFunction = printFormatter.simpleFormat</span><br><span class=\"line\">formatterFunction(&quot;test&quot;)</span><br><span class=\"line\">```  </span><br><span class=\"line\"></span><br><span class=\"line\">从上面的例子中可以看出，Lua 不需要任何额外的代码就可以实现非常灵活的编程技巧。  </span><br><span class=\"line\"></span><br><span class=\"line\">## require 函数  </span><br><span class=\"line\"></span><br><span class=\"line\">Lua 提供了一个高层次抽象的函数 require，使用这个函数可以加载所有需要的模块。在设计之初，这个函数就被设计的尽可能的简单，以避免加载模块时需要太多的模块信息。require 函数加载模块时把所有模块都只当作一段定义了变量的代码（事实上是一些函数或者包含函数的表）而已，完全不需要更多的模块信息。  </span><br><span class=\"line\"></span><br><span class=\"line\">## 示例  </span><br><span class=\"line\"></span><br><span class=\"line\">让我们看一下面这个例子。在这个例子中，我们定义了模块 mymath,在这个模块中定义一些数学函数，并将该模块存储于 mymath.lua 文件中。具体内容如下：  </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>local mymath =  {}<br>\nfunction mymath.add(a,b)<br>\nprint(a+b)<br>\nend</p>\n<p>function mymath.sub(a,b)<br>\nprint(a-b)<br>\nend</p>\n<p>function mymath.mul(a,b)<br>\nprint(a*b)<br>\nend</p>\n<p>function mymath.div(a,b)<br>\nprint(a/b)<br>\nend</p>\n<p>return mymath</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">接下来，我们在另一个文件　moduletutorial.lua 文件中访问这个模块。具体代码如下所示：  </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>mymathmodule = require(“mymath”)<br>\nmymathmodule.add(10,20)<br>\nmymathmodule.sub(30,20)<br>\nmymathmodule.mul(10,20)<br>\nmymathmodule.div(30,20)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">运行这段代码这前，我们需要将两个 lua 源代码文件放在同一目录下，或者把模块代码文件放在包路径下（这种情况需要额外的配置）。运行上面的代码，可以得到如下的输出结果：  </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>30<br>\n10<br>\n200<br>\n1.5</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">## 注意事项  </span><br><span class=\"line\"></span><br><span class=\"line\">&lt;ul&gt;</span><br><span class=\"line\">\t&lt;li&gt;把模块和待运行的文件放在相同的目录下。&lt;/li&gt;</span><br><span class=\"line\">\t&lt;li&gt;模块的名称与文件名称相同。&lt;/li&gt;</span><br><span class=\"line\">\t&lt;li&gt;为 require 函数返回模块（在模块中使用 return 命令返回存储了函数和变量的表）。尽管有其它的模块实现的方式，但是建议您使用上面的实现方法。&lt;/li&gt;</span><br><span class=\"line\">&lt;/ul&gt;  </span><br><span class=\"line\"></span><br><span class=\"line\">## 更老的实现模块的方法 </span><br><span class=\"line\"></span><br><span class=\"line\">下面，我们将用 package.seall 这种比较老的方法重新实现上面的例子。这种实现方法主要用于 Lua 5.1 或 5.2 版本。使用这种方式实现模块的代码如下所示：  </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>module(“mymath”, package.seeall)</p>\n<p>function mymath.add(a,b)<br>\nprint(a+b)<br>\nend</p>\n<p>function mymath.sub(a,b)<br>\nprint(a-b)<br>\nend</p>\n<p>function mymath.mul(a,b)<br>\nprint(a*b)<br>\nend</p>\n<p>function mymath.div(a,b)<br>\nprint(a/b)<br>\nend</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">使用此模块的代码如下所示：  </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>require(“mymath”)<br>\nmymath.add(10,20)<br>\nmymath.sub(30,20)<br>\nmymath.mul(10,20)<br>\nmymath.div(30,20)</p>\n<pre><code>\n当我们运行这段代码，我们会得到与前面相同的输出结果。但是建议你不要使用这种方式，因为普遍认为这种方式不及新的方法安全。许多用到 Lua 语言的 SDK 都已经不再使用这种方式定义模块，例如, Corna SDK。</code></pre>\n","text":"Lua 模块 什么是模块？ Lua 中的模块与库的概念相似，每个模块都有一个全局唯一名字，并且每个模块都包含一个表。使用一个模块时，可以使用 require 加载模块。模块中可以包括函数和变量，所有这些函数和变量被表存储于模块的表中。模块中的表的功能类似于命名空间，用于隔离不同模...","link":"","photos":[],"count_time":{"symbolsCount":"2.3k","symbolsTime":"2 mins."},"categories":[{"name":"lua_guide","slug":"lua-guide","count":34,"path":"api/categories/lua-guide.json"}],"tags":[{"name":"lua","slug":"lua","count":124,"path":"api/tags/lua.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\"><span class=\"toc-text\">Lua 模块</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BB%80%E4%B9%88%E6%98%AF%E6%A8%A1%E5%9D%97%EF%BC%9F\"><span class=\"toc-text\">什么是模块？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Lua-%E6%A8%A1%E5%9D%97%E7%9A%84%E7%89%B9%E5%88%AB%E4%B9%8B%E5%A4%84\"><span class=\"toc-text\">Lua 模块的特别之处</span></a></li></ol></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"2016-06-01-TOC","uid":"d774f91f96abd1bb1c7fd97a15cf6621","slug":"lua/2016-06-01-TOC","date":"2024-03-14T07:45:09.088Z","updated":"2024-03-14T07:45:09.088Z","comments":true,"path":"api/articles/lua/2016-06-01-TOC.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":null,"text":"2016-06-01-TOC lua 基础 概述 permalink: /lua_guide/TOC/ 运行环境 基本语法 变量 日期类型 操作符 循环 决策 函数 字符串 数组 迭代器 表 模块 元表 协程 文件 I/O 错误处理 lua 进阶 调试 垃圾回收机制 面向对象 W...","link":"","photos":[],"count_time":{"symbolsCount":169,"symbolsTime":"1 mins."},"categories":[{"name":"教程","slug":"教程","count":1,"path":"api/categories/教程.json"}],"tags":[{"name":"lua","slug":"lua","count":124,"path":"api/tags/lua.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"repeat...until 循环","uid":"17f717e08ff041fef49c1fa8a71c5669","slug":"lua/2016-06-01-repeat-until","date":"2024-03-14T07:45:09.088Z","updated":"2024-03-14T07:45:09.088Z","comments":true,"path":"api/articles/lua/2016-06-01-repeat-until.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":null,"text":"#repeat…until 循环 与 for 和 while 循环中先检测条件再决定是否执行循环不同，repeat…until 先执行循环再检测条件判断是否再次执行。 除了 repeat…until 循环一定会执行一次之外，repeat…until 与 while 循环很相似。 ...","link":"","photos":[],"count_time":{"symbolsCount":596,"symbolsTime":"1 mins."},"categories":[{"name":"lua_guide","slug":"lua-guide","count":34,"path":"api/categories/lua-guide.json"}],"tags":[{"name":"lua","slug":"lua","count":124,"path":"api/tags/lua.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}