{"title":"Lua表","uid":"038bf88a1c7598385fc79ad2a48f60ba","slug":"lua/2016-06-01-tables","date":"2024-03-14T07:45:09.086Z","updated":"2024-03-27T03:27:00.412Z","comments":true,"path":"api/articles/lua/2016-06-01-tables.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<h1 id=\"lua-表\"><a class=\"markdownIt-Anchor\" href=\"#lua-表\"></a> Lua 表</h1>\n<p>在 Lua 语言中，表是唯一可以用来创建不同数据类型的数据结构，比如常见的数组和字典都是用表来创建的。 Lua 语言中经常到关联数组这种数据类型，它不仅可以用数值作为索引值，除了 nil 以外的字符串同样可以作为其索引。表没有固定的大小，当数据量增加时表会自动增大。</p>\n<p>Lua 语言中的各种结构表示都用到了表，包括包（package）的表示。当我们使用方法 string.format 时，我们用到的其实是包 string 中的方法 format。</p>\n<h2 id=\"使用表\"><a class=\"markdownIt-Anchor\" href=\"#使用表\"></a> 使用表</h2>\n<p>表被称之为对象，它既不是值也不是变量。Lua 用构造表达式 {} 创建一个空表。需要注意的是，在存储表的变量和表本身之间没有什么固定的对应关系（译注：一个表可以被不同的变量引用，一个变量也可以随时改变其所引用的表对象）。</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\"><span class=\"token comment\">--简单的表初始化</span>\nmytable <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">--简单的表赋值</span>\nmytable<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span> <span class=\"token string\">\"Lua\"</span>\n\n<span class=\"token comment\">--移除引用</span>\nmytable <span class=\"token operator\">=</span> <span class=\"token keyword\">nil</span>\n<span class=\"token comment\">-- lua 的垃圾回收机制负责回收内存空间</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>当我们有一个拥有一系列元素的表时，如果我们将其赋值给 b。那么 a 和 b 都会引用同一个表对象(a 先引用该表)，指向相同的内存空间。而不会再单独为 b 分配内存空间。即使给变量 a 赋值 nil，我们仍然可以用变量 b 访问表本身。如果已经没有变量引用表时，Lua　语言垃圾回收机制负责回收不再使用的内存以被重复使用。</p>\n<p>下面的示例代码使用到了上面提到的表的特性。</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\"><span class=\"token comment\">-- 声明空表</span>\nmytable <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Type of mytable is \"</span><span class=\"token punctuation\">,</span><span class=\"token function\">type</span><span class=\"token punctuation\">(</span>mytable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\nmytable<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span> <span class=\"token string\">\"Lua\"</span>\nmytable<span class=\"token punctuation\">[</span><span class=\"token string\">\"wow\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Tutorial\"</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mytable Element at index 1 is \"</span><span class=\"token punctuation\">,</span> mytable<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mytable Element at index wow is \"</span><span class=\"token punctuation\">,</span> mytable<span class=\"token punctuation\">[</span><span class=\"token string\">\"wow\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">-- alternatetable 与 mytable 引用相同的表</span>\nalternatetable <span class=\"token operator\">=</span> mytable\n\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"alternatetable Element at index 1 is \"</span><span class=\"token punctuation\">,</span> alternatetable<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mytable Element at index wow is \"</span><span class=\"token punctuation\">,</span> alternatetable<span class=\"token punctuation\">[</span><span class=\"token string\">\"wow\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\nalternatetable<span class=\"token punctuation\">[</span><span class=\"token string\">\"wow\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"I changed it\"</span>\n\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mytable Element at index wow is \"</span><span class=\"token punctuation\">,</span> mytable<span class=\"token punctuation\">[</span><span class=\"token string\">\"wow\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">-- 只是变量被释放，表本身没有被释放</span>\nalternatetable <span class=\"token operator\">=</span> <span class=\"token keyword\">nil</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"alternatetable is \"</span><span class=\"token punctuation\">,</span> alternatetable<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">-- mytable 仍然可以访问</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mytable Element at index wow is \"</span><span class=\"token punctuation\">,</span> mytable<span class=\"token punctuation\">[</span><span class=\"token string\">\"wow\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\nmytable <span class=\"token operator\">=</span> <span class=\"token keyword\">nil</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mytable is \"</span><span class=\"token punctuation\">,</span> mytable<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>执行上面的代码，我们可以得到如下的输出结果：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">Type of mytable is \ttable\nmytable Element at index <span class=\"token number\">1</span> is \tLua\nmytable Element at index wow is \tTutorial\nalternatetable Element at index <span class=\"token number\">1</span> is \tLua\nmytable Element at index wow is \tTutorial\nmytable Element at index wow is \tI changed it\nalternatetable is \tnil\nmytable Element at index wow is \tI changed it\nmytable is \tnil<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"表的操作函数\"><a class=\"markdownIt-Anchor\" href=\"#表的操作函数\"></a> 表的操作函数</h2>\n<p>下面的表中列出了 Lua 语言内置的表操作函数，具体内容如下所示：</p>\n<table>\n\t<tr>\n\t\t<th>S.N.</th>\n\t\t<th>方法与作用</th>\n\t</tr>\n\t<tr>\n\t\t<td>1</td>\n\t\t<td>table.concat(table[, sep [, i[,j]]]): 根据指定的参数合并表中的字符串。具体用法参考下面的示例。</td>\n\t</tr>\n\t<tr>\n\t\t<td>2</td>\n\t\t<td>table.insert(table,[pos,]value):在表中指定位置插入一个值。</td>\n\t</tr>\n\t<tr>\n\t\t<td>3</td>\n\t\t<td>table.maxn(table)：返回表中最大的数值索引。</td>\n\t</tr>\n\t<tr>\n\t\t<td>4</td>\n\t\t<td>table.remove(table[,pos]):从表中移出指定的值。</td>\n\t</tr>\t<tr>\n\t\t<td>5</td>\n\t\t<td>table.sort(table[,comp]):根据指定的（可选）比较方法对表进行排序操作。</td>\n\t</tr>\n</table>  \n<p>让我们一起看一些上述函数使用的例子。</p>\n<h3 id=\"表连接操作\"><a class=\"markdownIt-Anchor\" href=\"#表连接操作\"></a> 表连接操作</h3>\n<p>我们可以使用表连接操作连接表中的元素，如下所示。</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">fruits <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"banana\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"orange\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"apple\"</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">-- 返回表中字符串连接后的结果</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Concatenated string \"</span><span class=\"token punctuation\">,</span>table<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>fruits<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">--用字符串连接</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Concatenated string \"</span><span class=\"token punctuation\">,</span>table<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>fruits<span class=\"token punctuation\">,</span><span class=\"token string\">\", \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">--基于索引连接 fruits </span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Concatenated string \"</span><span class=\"token punctuation\">,</span>table<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>fruits<span class=\"token punctuation\">,</span><span class=\"token string\">\", \"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>执行上面的代码，我们可以得到如下的输出结果：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">Concatenated string \tbananaorangeapple\nConcatenated string \tbanana, orange, apple\nConcatenated string \torange, apple<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"插入与移出操作\"><a class=\"markdownIt-Anchor\" href=\"#插入与移出操作\"></a> 插入与移出操作</h3>\n<p>插入和移除表中元素是对表最常见的操作。使用方法如下所示：</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">fruits <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"banana\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"orange\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"apple\"</span><span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">-- 在 fruits 的末尾插入一种水果</span>\ntable<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>fruits<span class=\"token punctuation\">,</span><span class=\"token string\">\"mango\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Fruit at index 4 is \"</span><span class=\"token punctuation\">,</span>fruits<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">-- 在索引 2 的位置插入一种水果</span>\ntable<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>fruits<span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"grapes\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Fruit at index 2 is \"</span><span class=\"token punctuation\">,</span>fruits<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The maximum elements in table is\"</span><span class=\"token punctuation\">,</span>table<span class=\"token punctuation\">.</span><span class=\"token function\">maxn</span><span class=\"token punctuation\">(</span>fruits<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The last element is\"</span><span class=\"token punctuation\">,</span>fruits<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\ntable<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>fruits<span class=\"token punctuation\">)</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The previous last element is\"</span><span class=\"token punctuation\">,</span>fruits<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>执行上面的代码，我们可以得到如下的输出结果：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">Fruit at index <span class=\"token number\">4</span> is \tmango\nFruit at index <span class=\"token number\">2</span> is \tgrapes\nThe maximum elements <span class=\"token keyword\">in</span> table is\t<span class=\"token number\">5</span>\nThe last element is\tmango\nThe previous last element is\tnil<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"表排序操作\"><a class=\"markdownIt-Anchor\" href=\"#表排序操作\"></a> 表排序操作</h3>\n<p>在程序开发过程中，常常有对表排序的需求。 sort 函数默认使用字母表对表中的元素进行排序（可以通过提供比较函数改变排序策略）。示例代码如下：</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">fruits <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"banana\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"orange\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"apple\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"grapes\"</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">for</span> k<span class=\"token punctuation\">,</span>v <span class=\"token keyword\">in</span> <span class=\"token function\">ipairs</span><span class=\"token punctuation\">(</span>fruits<span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">,</span>v<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span>\ntable<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>fruits<span class=\"token punctuation\">)</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sorted table\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> k<span class=\"token punctuation\">,</span>v <span class=\"token keyword\">in</span> <span class=\"token function\">ipairs</span><span class=\"token punctuation\">(</span>fruits<span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">,</span>v<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>执行上面的代码，我们可以得到如下的输出结果：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token number\">1</span>\tbanana\n<span class=\"token number\">2</span>\torange\n<span class=\"token number\">3</span>\tapple\n<span class=\"token number\">4</span>\tgrapes\nsorted table\n<span class=\"token number\">1</span>\tapple\n<span class=\"token number\">2</span>\tbanana\n<span class=\"token number\">3</span>\tgrapes\n<span class=\"token number\">4</span>\torange<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>","text":" Lua 表 在 Lua 语言中，表是唯一可以用来创建不同数据类型的数据结构，比如常见的数组和字典都是用表来创建的。 Lua 语言中经常到关联数组这种数据类型，它不仅可以用数值作为索引值，除了 nil 以外的字符串同样可以作为其索引。表没有固定的大小，当数据量增加时表会自动增大。...","link":"","photos":[],"count_time":{"symbolsCount":"3.5k","symbolsTime":"3 mins."},"categories":[{"name":"lua_guide","slug":"lua-guide","count":34,"path":"api/categories/lua-guide.json"}],"tags":[{"name":"lua","slug":"lua","count":124,"path":"api/tags/lua.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#lua-%E8%A1%A8\"><span class=\"toc-text\"> Lua 表</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8%E8%A1%A8\"><span class=\"toc-text\"> 使用表</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%A1%A8%E7%9A%84%E6%93%8D%E4%BD%9C%E5%87%BD%E6%95%B0\"><span class=\"toc-text\"> 表的操作函数</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%A1%A8%E8%BF%9E%E6%8E%A5%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\"> 表连接操作</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%8F%92%E5%85%A5%E4%B8%8E%E7%A7%BB%E5%87%BA%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\"> 插入与移出操作</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%A1%A8%E6%8E%92%E5%BA%8F%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\"> 表排序操作</span></a></li></ol></li></ol></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Lua元表","uid":"0498ed7eca93166bac9cec9951eb31df","slug":"lua/2016-06-01-metatables","date":"2024-03-14T07:45:09.086Z","updated":"2024-03-27T04:13:10.462Z","comments":true,"path":"api/articles/lua/2016-06-01-metatables.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":" Lua 元表 正如其名，元表也是表。不过，将元表与表相关联后，我们就可以通过设置元表的键和相关方法来改变表的行为。元方法的功能十分强大，使用元方法可以实现很多的功能，比如： 修改表的操作符功能或为操作符添加新功能（译注：如果您学过 C++ 之类的面向对象的语言，应该比较好理解，...","link":"","photos":[],"count_time":{"symbolsCount":"3.9k","symbolsTime":"4 mins."},"categories":[{"name":"lua_guide","slug":"lua-guide","count":34,"path":"api/categories/lua-guide.json"}],"tags":[{"name":"LUA教程","slug":"LUA教程","count":4,"path":"api/tags/LUA教程.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Table复制","uid":"f35637f6fb4f2abf97cdd32ce0593fe7","slug":"lua/luatest/Table复制","date":"2024-03-14T07:45:09.086Z","updated":"2024-03-14T07:45:09.086Z","comments":true,"path":"api/articles/lua/luatest/Table复制.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":" Table复制 构造一个lua table变量，然后对这个变量在调用函数进行制和专递。 可以使用以下代码构造一个Lua table变量，并调用函数进行传递： -- 构造一个Lua table变量 local myTable = &#123; name = \"John\", age...","link":"","photos":[],"count_time":{"symbolsCount":"1.8k","symbolsTime":"2 mins."},"categories":[{"name":"Lua","slug":"Lua","count":2,"path":"api/categories/Lua.json"}],"tags":[{"name":"lua","slug":"lua","count":124,"path":"api/tags/lua.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}