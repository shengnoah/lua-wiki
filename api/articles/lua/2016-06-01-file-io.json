{"title":"Lua文件I/O","uid":"7cdf9755b9d268215aaceca81f7a3596","slug":"lua/2016-06-01-file-io","date":"2024-03-14T06:15:59.724Z","updated":"2024-03-14T06:15:59.724Z","comments":true,"path":"api/articles/lua/2016-06-01-file-io.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":null,"content":"<h1 id=\"Lua-文件-I-O\"><a href=\"#Lua-文件-I-O\" class=\"headerlink\" title=\"Lua 文件 I/O\"></a>Lua 文件 I/O</h1><p>Lua 的 IO 库用于读取或操作文件。Lua IO 库提供两类文件操作，它们分别是隐式文件描述符(implict file descriptors)和显式文件描述符(explicit file descriptors)。</p>\n<p>在接下来的例子的，我们会用到一个示例文件 test.lua，文件内容如下：  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- sample test.lua</span><br><span class=\"line\">-- sample2 test.lua</span><br><span class=\"line\">```  </span><br><span class=\"line\"></span><br><span class=\"line\">简单的打开文件操作可以用如下的语句完成。  </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>file = io.open (filename [, mode])</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">可选的打开文件的模式如下表所示。  </span><br><span class=\"line\"></span><br><span class=\"line\">&lt;table&gt;</span><br><span class=\"line\">\t&lt;tr&gt;</span><br><span class=\"line\">\t\t&lt;th&gt;模式&lt;/th&gt;</span><br><span class=\"line\">\t\t&lt;th&gt;描述&lt;/th&gt;</span><br><span class=\"line\">\t&lt;/tr&gt;</span><br><span class=\"line\">\t&lt;tr&gt;</span><br><span class=\"line\">\t\t&lt;td&gt;&quot;r&quot;&lt;/td&gt;</span><br><span class=\"line\">\t\t&lt;td&gt;只读模式，这也是对已存在的文件的默认打开模式。&lt;/td&gt;</span><br><span class=\"line\">\t&lt;/tr&gt;</span><br><span class=\"line\">\t&lt;tr&gt;</span><br><span class=\"line\">\t\t&lt;td&gt;&quot;w&quot;&lt;/td&gt;</span><br><span class=\"line\">\t\t&lt;td&gt;可写模式，允许修改已经存在的文件和创建新文件。&lt;/td&gt;</span><br><span class=\"line\">\t&lt;/tr&gt;</span><br><span class=\"line\">\t&lt;tr&gt;</span><br><span class=\"line\">\t\t&lt;td&gt;&quot;a&quot;&lt;/td&gt;</span><br><span class=\"line\">\t\t&lt;td&gt;追加模式，对于已存的文件允许追加新内容，但不允许修改原有内容，同时也可以创建新文件。&lt;/td&gt;</span><br><span class=\"line\">\t&lt;/tr&gt;</span><br><span class=\"line\">\t&lt;tr&gt;</span><br><span class=\"line\">\t\t&lt;td&gt;&quot;r+&quot;&lt;/td&gt;</span><br><span class=\"line\">\t\t&lt;td&gt;读写模式打开已存的在文件。&lt;/td&gt;</span><br><span class=\"line\">\t&lt;/tr&gt;</span><br><span class=\"line\">\t&lt;tr&gt;</span><br><span class=\"line\">\t\t&lt;td&gt;&quot;w+&quot;&lt;/td&gt;</span><br><span class=\"line\">\t\t&lt;td&gt;如果文件已存在则删除文件中数据；若文件不存在则新建文件。读写模式打开。&lt;/td&gt;</span><br><span class=\"line\">\t&lt;/tr&gt;</span><br><span class=\"line\">\t&lt;tr&gt;</span><br><span class=\"line\">\t\t&lt;td&gt;&quot;a+&quot;&lt;/td&gt;</span><br><span class=\"line\">\t\t&lt;td&gt;以可读的追加模式打开已存在文件，若文件不存在则新建文件。&lt;/td&gt;</span><br><span class=\"line\">\t&lt;/tr&gt;</span><br><span class=\"line\">&lt;/table&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">## 隐式文件描述符  </span><br><span class=\"line\"></span><br><span class=\"line\">隐式文件描述符使用标准输入输出模式或者使用单个输入文件和输出文件。使用隐匿文件描述符的示例代码如下：  </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>– 只读模式打开文件<br>file = io.open(“test.lua”, “r”)</p>\n<p>– 将 test.lua 设置为默认输入文件<br>io.input(file)</p>\n<p>–打印输出文件的第一行<br>print(io.read())</p>\n<p>– 关闭打开的文件<br>io.close(file)</p>\n<p>– 以追加模式打开文件<br>file = io.open(“test.lua”, “a”)</p>\n<p>– 将 test.lua 设置为默认的输出文件<br>io.output(file)</p>\n<p>– 将内容追加到文件最后一行<br>io.write(“– End of the test.lua file”)</p>\n<p>– 关闭打开的文件<br>io.close(file)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">执行上面的程序，我们可以看到输出了 test.lua 文件的第一行。在本例中，输出的结果为：  </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ul>\n<li>Sample test.lua<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">输出的内容是 test.lua 文件中的第一行。“-- End of the test.lua file” 他会被追加到 test.lua 文件的最后一行。  </span><br><span class=\"line\"></span><br><span class=\"line\">从上面的例子中，你可以看到隐式的描述述如何使用 io.&quot;x&quot;  方法与文件系统交互。上面的例子使用 io.read() 函数时没有使用可选参数。此函数的可选参数包括：  </span><br><span class=\"line\"></span><br><span class=\"line\">&lt;table&gt;</span><br><span class=\"line\">\t&lt;tr&gt;</span><br><span class=\"line\">\t\t&lt;th&gt;模式&lt;/th&gt;</span><br><span class=\"line\">\t\t&lt;th&gt;描述&lt;/th&gt;</span><br><span class=\"line\">\t&lt;/tr&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;tr&gt;</span><br><span class=\"line\">\t\t&lt;td&gt;&quot;*n&quot;&lt;/td&gt;</span><br><span class=\"line\">\t\t&lt;td&gt;从文件当前位置读入一个数字，如果该位置不为数字则返回 nil。&lt;/td&gt;</span><br><span class=\"line\">\t&lt;/tr&gt;</span><br><span class=\"line\">\t&lt;tr&gt;</span><br><span class=\"line\">\t\t&lt;td&gt;&quot;*a&quot;&lt;/td&gt;</span><br><span class=\"line\">\t\t&lt;td&gt;读入从当前文件指针位置开始的整个文件内容。&lt;/td&gt;</span><br><span class=\"line\">\t&lt;/tr&gt;</span><br><span class=\"line\">\t&lt;tr&gt;</span><br><span class=\"line\">\t\t&lt;td&gt;&quot;*i&quot;&lt;/td&gt;</span><br><span class=\"line\">\t\t&lt;td&gt;读入当前行。&lt;/td&gt;</span><br><span class=\"line\">\t&lt;/tr&gt;</span><br><span class=\"line\">\t&lt;tr&gt;</span><br><span class=\"line\">\t\t&lt;td&gt;number&lt;/td&gt;</span><br><span class=\"line\">\t\t&lt;td&gt;读入指定字节数的内容。&lt;/td&gt;</span><br><span class=\"line\">\t&lt;/tr&gt;</span><br><span class=\"line\">&lt;/table&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">另外一些常用的方法：</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;ul&gt;</span><br><span class=\"line\">\t&lt;li&gt;io.tmpfile():返回一个可读写的临时文件，程序结束时该文件被自动删除。&lt;/li&gt;</span><br><span class=\"line\">\t&lt;li&gt;io.type(file):检测输入参数是否为可用的文件句柄。返回 &quot;file&quot; 表示一个打开的句柄；“closed file” 表示已关闭的句柄；nil 表示不是文件句柄。&lt;/li&gt;</span><br><span class=\"line\">\t&lt;li&gt;io.flush():清空输出缓冲区。&lt;/li&gt;</span><br><span class=\"line\">\t&lt;li&gt;io.lines(optional file name): 返回一个通用循环迭代器以遍历文件，每次调用将获得文件中的一行内容,当到文件尾时，将返回nil。若显示提供了文件句柄，则结束时自动关闭文件；使用默认文件时，结束时不会自动关闭文件。&lt;/li&gt;</span><br><span class=\"line\">&lt;/ul&gt;  </span><br><span class=\"line\"></span><br><span class=\"line\">## 显示文件描述符  </span><br><span class=\"line\"></span><br><span class=\"line\">我们也会经常用到显示文件描述符，因为它允许我们同时操作多个文件。这些函数与隐式文件描述符非常相似，只不过我们在这儿使用 file:function_name 而不是使用 io.function_name 而已。下面的例子使用显示文件描述符实现了与前面例子中完全相同的功能。  </span><br><span class=\"line\">　</span><br></pre></td></tr></table></figure></li>\n<li><ul>\n<li>只读模式打开文件<br>file = io.open(“test.lua”, “r”)</li>\n</ul>\n</li>\n</ul>\n<p>– 输出文件的第一行<br>print(file:read())</p>\n<p>– 关闭打开的文件<br>file:close()</p>\n<p>– 以追加模式打开文件<br>file = io.open(“test.lua”, “a”)</p>\n<p>– 添加内容到文件的尾行<br>file:write(“–test”)</p>\n<p>– 关闭打开的文件<br>file:close()</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">执行上面的程序，我们可以得到与前面使用隐式文件描述符类似的输出结果：  </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>– Sample test.lua</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">在显式文件描述符中，打开文件的描述与读文件时的参数与隐式文件描述中的完全相同。另外的常用方法包括：</span><br><span class=\"line\">&lt;ul&gt;</span><br><span class=\"line\">\t&lt;li&gt;file:seek(option whence,option offset)：此函数用于移动文件指针至新的位置。参数 whence 可以设置为 “set”，&quot;cur&quot;,&quot;end&quot;，offset 为一个偏移量值，描述相对位置。如果第一个参数为 &quot;set&quot;，则相对位置从文件开始处开始计算；如果第一个参数为 &quot;cur&quot;，则相对位置从文件当前位置处开始计算； 如果第一个参数为 &quot;end&quot;，则相对位置从文件末尾处开始计算。函数的参数默认值分别为 &quot;cur&quot; 和 ０，因此不传递参数调用此函数可以获得文件的当前位置。&lt;/li&gt;</span><br><span class=\"line\">\t&lt;li&gt;file:flush()：清空输出缓冲区。&lt;/li&gt;</span><br><span class=\"line\">\t&lt;li&gt;io.lines(optional file name)：提供一个循环迭代器以遍历文件，如果指定了文件名则当遍历结束后将自动关闭该文件；若使用默认文件，则遍历结束后不会自动关闭文件。&lt;/li&gt;</span><br><span class=\"line\">&lt;/ul&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">下面的例子演示 seek 函数的使用方法。它将文件指针从文件末尾向前移动 25。并使用 read 函数从该位置出输出剩余的文件内容。  </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>– Opens a file in read<br>file = io.open(“test.lua”, “r”)</p>\n<p>file:seek(“end”,-25)<br>print(file:read(“*a”))</p>\n<p>– closes the opened file<br>file:close()</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">执行上的面的程序，你可以得到类似下面的输出结果：  </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p> sample2 test.lua<br>–test</p>\n<pre><code>\n你还可以尝试不同的参数了解更多的 Lua 文件操作方法。\n</code></pre>\n","text":"Lua 文件 I/OLua 的 IO 库用于读取或操作文件。Lua IO 库提供两类文件操作，它们分别是隐式文件描述符(implict file descriptors)和显式文件描述符(explicit file descriptors)。 在接下来的例子的，我们会用到一个示例...","link":"","photos":[],"count_time":{"symbolsCount":"3.9k","symbolsTime":"4 mins."},"categories":[{"name":"lua_guide","slug":"lua-guide","count":68,"path":"api/categories/lua-guide.json"}],"tags":[{"name":"lua","slug":"lua","count":153,"path":"api/tags/lua.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Lua-%E6%96%87%E4%BB%B6-I-O\"><span class=\"toc-text\">Lua 文件 I&#x2F;O</span></a></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Lua游戏开发","uid":"0574a789cafc1558adcaaf40b641bfb0","slug":"lua/2016-06-01-game-programming","date":"2024-03-14T06:15:59.724Z","updated":"2024-03-14T06:15:59.724Z","comments":true,"path":"api/articles/lua/2016-06-01-game-programming.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":null,"text":"Lua 游戏开发Lua 语言因其结构和语法的简洁性而在各类游戏引擎中被广泛使用。游戏对图形画面要求非常苛刻，这无疑需消耗大量的内存空间，而这些内存空间的管理是非常棘手的问题。Lua 语言有自动的垃圾回收机制，这种自动化的内存管理机制也使得 Lua 受到游戏引擎开发者的青睐。著名的...","link":"","photos":[],"count_time":{"symbolsCount":"2k","symbolsTime":"2 mins."},"categories":[{"name":"lua_guide","slug":"lua-guide","count":68,"path":"api/categories/lua-guide.json"}],"tags":[{"name":"lua","slug":"lua","count":153,"path":"api/tags/lua.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"如何查看Linux的RPM安装包安装文件的目录","uid":"48abcf7000096b713f7adec4c94e4012","slug":"linux/如何查看Linux的RPM安装包安装文件的目录","date":"2024-03-14T06:15:59.723Z","updated":"2024-03-14T06:15:59.723Z","comments":true,"path":"api/articles/linux/如何查看Linux的RPM安装包安装文件的目录.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":null,"text":"如何查看Linux的RPM安装包安装文件的目录如何查看Linux的RPM安装包安装文件的目录 要查看Linux上RPM安装包的安装文件目录，可以使用以下命令： 列出已安装的RPM包： 1rpm -qa 查找特定RPM包的安装目录： 1rpm -ql &lt;package_nam...","link":"","photos":[],"count_time":{"symbolsCount":209,"symbolsTime":"1 mins."},"categories":[{"name":"AIGC","slug":"AIGC","count":119,"path":"api/categories/AIGC.json"},{"name":"weibo","slug":"AIGC/weibo","count":59,"path":"api/categories/AIGC/weibo.json"}],"tags":[{"name":"weibo","slug":"weibo","count":62,"path":"api/tags/weibo.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}