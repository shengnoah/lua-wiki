{"title":"Lua文件I/O","uid":"7cdf9755b9d268215aaceca81f7a3596","slug":"lua/2016-06-01-file-io","date":"2024-03-18T03:38:03.760Z","updated":"2024-03-18T05:47:50.287Z","comments":true,"path":"api/articles/lua/2016-06-01-file-io.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<h1 id=\"lua-文件-io\"><a class=\"markdownIt-Anchor\" href=\"#lua-文件-io\"></a> Lua 文件 I/O</h1>\n<p>Lua 的 IO 库用于读取或操作文件。Lua IO 库提供两类文件操作，它们分别是隐式文件描述符(implict file descriptors)和显式文件描述符(explicit file descriptors)。</p>\n<p>在接下来的例子的，我们会用到一个示例文件 test.lua，文件内容如下：</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\"><span class=\"token comment\">-- sample test.lua</span>\n<span class=\"token comment\">-- sample2 test.lua</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>简单的打开文件操作可以用如下的语句完成。</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">file <span class=\"token operator\">=</span> io<span class=\"token punctuation\">.</span><span class=\"token function\">open</span> <span class=\"token punctuation\">(</span>filename <span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> mode<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>可选的打开文件的模式如下表所示。</p>\n<table>\n\t<tr>\n\t\t<th>模式</th>\n\t\t<th>描述</th>\n\t</tr>\n\t<tr>\n\t\t<td>\"r\"</td>\n\t\t<td>只读模式，这也是对已存在的文件的默认打开模式。</td>\n\t</tr>\n\t<tr>\n\t\t<td>\"w\"</td>\n\t\t<td>可写模式，允许修改已经存在的文件和创建新文件。</td>\n\t</tr>\n\t<tr>\n\t\t<td>\"a\"</td>\n\t\t<td>追加模式，对于已存的文件允许追加新内容，但不允许修改原有内容，同时也可以创建新文件。</td>\n\t</tr>\n\t<tr>\n\t\t<td>\"r+\"</td>\n\t\t<td>读写模式打开已存的在文件。</td>\n\t</tr>\n\t<tr>\n\t\t<td>\"w+\"</td>\n\t\t<td>如果文件已存在则删除文件中数据；若文件不存在则新建文件。读写模式打开。</td>\n\t</tr>\n\t<tr>\n\t\t<td>\"a+\"</td>\n\t\t<td>以可读的追加模式打开已存在文件，若文件不存在则新建文件。</td>\n\t</tr>\n</table>\n<h2 id=\"隐式文件描述符\"><a class=\"markdownIt-Anchor\" href=\"#隐式文件描述符\"></a> 隐式文件描述符</h2>\n<p>隐式文件描述符使用标准输入输出模式或者使用单个输入文件和输出文件。使用隐匿文件描述符的示例代码如下：</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\"><span class=\"token comment\">-- 只读模式打开文件</span>\nfile <span class=\"token operator\">=</span> io<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test.lua\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"r\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">-- 将 test.lua 设置为默认输入文件</span>\nio<span class=\"token punctuation\">.</span><span class=\"token function\">input</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">--打印输出文件的第一行</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>io<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">-- 关闭打开的文件</span>\nio<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">-- 以追加模式打开文件</span>\nfile <span class=\"token operator\">=</span> io<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test.lua\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"a\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">-- 将 test.lua 设置为默认的输出文件</span>\nio<span class=\"token punctuation\">.</span><span class=\"token function\">output</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">-- 将内容追加到文件最后一行</span>\nio<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-- End of the test.lua file\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">-- 关闭打开的文件</span>\nio<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>执行上面的程序，我们可以看到输出了 test.lua 文件的第一行。在本例中，输出的结果为：</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\"><span class=\"token operator\">-</span> Sample test<span class=\"token punctuation\">.</span>lua<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>输出的内容是 test.lua 文件中的第一行。“-- End of the test.lua file” 他会被追加到 test.lua 文件的最后一行。</p>\n<p>从上面的例子中，你可以看到隐式的描述述如何使用 io.“x”  方法与文件系统交互。上面的例子使用 io.read() 函数时没有使用可选参数。此函数的可选参数包括：</p>\n<table>\n\t<tr>\n\t\t<th>模式</th>\n\t\t<th>描述</th>\n\t</tr>\n<pre><code>&lt;tr&gt;\n\t&lt;td&gt;&quot;*n&quot;&lt;/td&gt;\n\t&lt;td&gt;从文件当前位置读入一个数字，如果该位置不为数字则返回 nil。&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n\t&lt;td&gt;&quot;*a&quot;&lt;/td&gt;\n\t&lt;td&gt;读入从当前文件指针位置开始的整个文件内容。&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n\t&lt;td&gt;&quot;*i&quot;&lt;/td&gt;\n\t&lt;td&gt;读入当前行。&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n\t&lt;td&gt;number&lt;/td&gt;\n\t&lt;td&gt;读入指定字节数的内容。&lt;/td&gt;\n&lt;/tr&gt;\n</code></pre>\n</table>\n<p>另外一些常用的方法：</p>\n<ul>\n\t<li>io.tmpfile():返回一个可读写的临时文件，程序结束时该文件被自动删除。</li>\n\t<li>io.type(file):检测输入参数是否为可用的文件句柄。返回 \"file\" 表示一个打开的句柄；“closed file” 表示已关闭的句柄；nil 表示不是文件句柄。</li>\n\t<li>io.flush():清空输出缓冲区。</li>\n\t<li>io.lines(optional file name): 返回一个通用循环迭代器以遍历文件，每次调用将获得文件中的一行内容,当到文件尾时，将返回nil。若显示提供了文件句柄，则结束时自动关闭文件；使用默认文件时，结束时不会自动关闭文件。</li>\n</ul>  \n<h2 id=\"显示文件描述符\"><a class=\"markdownIt-Anchor\" href=\"#显示文件描述符\"></a> 显示文件描述符</h2>\n<p>我们也会经常用到显示文件描述符，因为它允许我们同时操作多个文件。这些函数与隐式文件描述符非常相似，只不过我们在这儿使用 file:function_name 而不是使用 io.function_name 而已。下面的例子使用显示文件描述符实现了与前面例子中完全相同的功能。</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\"><span class=\"token comment\">-- 只读模式打开文件</span>\nfile <span class=\"token operator\">=</span> io<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test.lua\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"r\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">-- 输出文件的第一行</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">:</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">-- 关闭打开的文件</span>\nfile<span class=\"token punctuation\">:</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">-- 以追加模式打开文件 </span>\nfile <span class=\"token operator\">=</span> io<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test.lua\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"a\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">-- 添加内容到文件的尾行</span>\nfile<span class=\"token punctuation\">:</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"--test\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">-- 关闭打开的文件</span>\nfile<span class=\"token punctuation\">:</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>执行上面的程序，我们可以得到与前面使用隐式文件描述符类似的输出结果：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">-- Sample test.lua<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>在显式文件描述符中，打开文件的描述与读文件时的参数与隐式文件描述中的完全相同。另外的常用方法包括：</p>\n<ul>\n\t<li>file:seek(option whence,option offset)：此函数用于移动文件指针至新的位置。参数 whence 可以设置为 “set”，\"cur\",\"end\"，offset 为一个偏移量值，描述相对位置。如果第一个参数为 \"set\"，则相对位置从文件开始处开始计算；如果第一个参数为 \"cur\"，则相对位置从文件当前位置处开始计算； 如果第一个参数为 \"end\"，则相对位置从文件末尾处开始计算。函数的参数默认值分别为 \"cur\" 和 ０，因此不传递参数调用此函数可以获得文件的当前位置。</li>\n\t<li>file:flush()：清空输出缓冲区。</li>\n\t<li>io.lines(optional file name)：提供一个循环迭代器以遍历文件，如果指定了文件名则当遍历结束后将自动关闭该文件；若使用默认文件，则遍历结束后不会自动关闭文件。</li>\n</ul>\n<p>下面的例子演示 seek 函数的使用方法。它将文件指针从文件末尾向前移动 25。并使用 read 函数从该位置出输出剩余的文件内容。</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\"><span class=\"token comment\">-- Opens a file in read</span>\nfile <span class=\"token operator\">=</span> io<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test.lua\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"r\"</span><span class=\"token punctuation\">)</span>\n\nfile<span class=\"token punctuation\">:</span><span class=\"token function\">seek</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"end\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token number\">25</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">:</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*a\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">-- closes the opened file</span>\nfile<span class=\"token punctuation\">:</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>执行上的面的程序，你可以得到类似下面的输出结果：</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\"> sample2 test<span class=\"token punctuation\">.</span>lua\n<span class=\"token comment\">--test</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>你还可以尝试不同的参数了解更多的 Lua 文件操作方法。</p>\n<p>测试</p>\n","text":" Lua 文件 I/O Lua 的 IO 库用于读取或操作文件。Lua IO 库提供两类文件操作，它们分别是隐式文件描述符(implict file descriptors)和显式文件描述符(explicit file descriptors)。 在接下来的例子的，我们会用到一个...","link":"","photos":[],"count_time":{"symbolsCount":"3k","symbolsTime":"3 mins."},"categories":[{"name":"lua_guide","slug":"lua-guide","count":34,"path":"api/categories/lua-guide.json"}],"tags":[{"name":"lua","slug":"lua","count":124,"path":"api/tags/lua.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#lua-%E6%96%87%E4%BB%B6-io\"><span class=\"toc-text\"> Lua 文件 I&#x2F;O</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%9A%90%E5%BC%8F%E6%96%87%E4%BB%B6%E6%8F%8F%E8%BF%B0%E7%AC%A6\"><span class=\"toc-text\"> 隐式文件描述符</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%98%BE%E7%A4%BA%E6%96%87%E4%BB%B6%E6%8F%8F%E8%BF%B0%E7%AC%A6\"><span class=\"toc-text\"> 显示文件描述符</span></a></li></ol></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"用TheHive实现SOAR","uid":"4ed59a6d992f5c41879395e6019b7e3d","slug":"sec/TheHive/用TheHive实现SOAR","date":"2024-03-18T03:38:03.761Z","updated":"2024-03-18T03:42:33.349Z","comments":true,"path":"api/articles/sec/TheHive/用TheHive实现SOAR.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":" 用TheHive实现SOAR 一、介绍 SOAR代表“安全编排、自动化和响应”，指的是一种解决方案，用于威胁领域，以更好地监控和响应安全监控工具和技术检测到的事件。随着探测恶意活动的更先进技术的发展，大多数机构正转向使用SOAR，利用自动化来有效地分析、升级和响应 analys...","link":"","photos":[],"count_time":{"symbolsCount":"3k","symbolsTime":"3 mins."},"categories":[{"name":"安全","slug":"安全","count":38,"path":"api/categories/安全.json"}],"tags":[{"name":"TheHive","slug":"TheHive","count":4,"path":"api/tags/TheHive.json"},{"name":"SOAR","slug":"SOAR","count":3,"path":"api/tags/SOAR.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"NPM安装不验证证书","uid":"89f86e30c3a6d6a03387078f75f0b28a","slug":"hexo/NPM安装不验证证书","date":"2024-03-14T11:44:30.588Z","updated":"2024-03-14T11:45:54.984Z","comments":true,"path":"api/articles/hexo/NPM安装不验证证书.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":" NPM安装不验证证书 npm config set registry https://registry.npmjs.org/\\n npm config list npm cache clean --force\\n npm config set strict-ssl false\\...","link":"","photos":[],"count_time":{"symbolsCount":264,"symbolsTime":"1 mins."},"categories":[{"name":"安全","slug":"安全","count":38,"path":"api/categories/安全.json"}],"tags":[{"name":"NPM","slug":"NPM","count":1,"path":"api/tags/NPM.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}