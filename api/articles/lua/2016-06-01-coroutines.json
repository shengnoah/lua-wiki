{"title":"Lua协程","uid":"bce3027296f15638c976f1ebef15c96b","slug":"lua/2016-06-01-coroutines","date":"2024-03-14T07:45:09.091Z","updated":"2024-03-14T07:45:09.091Z","comments":true,"path":"api/articles/lua/2016-06-01-coroutines.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":null,"content":"<h1>Lua 协程</h1>\n<h2 id=\"概述\">概述</h2>\n<p>协程具有协同的性质，它允许两个或多个方法以某种可控的方式协同工作。在任何一个时刻，都只有一个协程在运行，只有当正在运行的协程主动挂起时它的执行才会被挂起（暂停）。</p>\n<p>上面的定义可能看上去比较模糊。接下来让我讲得很清楚一点，假设我们有两个方法，一个是主程序方法，另一个是一个协程。当我们使用 resume 函数调用一个协程时，协程才开始执行。当在协程调用 yield 函数时，协程挂起执行。再次调用 resume 函数时，协程再从上次挂起的地方继续执行。这个过程一直持续到协程执行结束为止。</p>\n<h2 id=\"协程中可用的函数\">协程中可用的函数</h2>\n<p>下面的表中列出 Lua 语言为支持协程而提供的所有函数以及它们的用法。</p>\n<table>\n\t<tr>\n\t\t<th>S.N.</th>\n\t\t<th>方法和功能</th>\n\t</tr>\n\t<tr>\n\t\t<td>1</td>\n\t\t<td>coroutine.create(f):用函数 f 创建一个协程，返回 thread 类型对象。</td>\n\t</tr>\n\t<tr>\n\t\t<td>2</td>\n\t\t<td>coroutine.resume(co[,val1,...]): 传入参数（可选），重新执行协程 co。此函数返回执行状态，也可以返回其它值。</td>\n\t</tr>\n\t<tr>\n\t\t<td>3</td>\n\t\t<td>coroutine.running():返回正在运行的协程，如果在主线程中调用此函数则返回 nil。</td>\n\t</tr>\n\t<tr>\n\t\t<td>4</td>\n\t\t<td>coroutine.status(co):返回指定协程的状态，状态值允许为：正在运行(running)，正常(normal)，挂起(suspended)，结束(dead)。</td>\n\t</tr>\n\t<tr>\n\t\t<td>5</td>\n\t\t<td>coroutine.wrap(f):与前面 coroutine.create 一样，coroutine.wrap 函数也创建一个协程，与前者返回协程本身不同，后者返回一个函数。当调用该函数时，重新执行协程。</td>\n\t</tr>\n\t<tr>\n\t\t<td>6</td>\n\t\t<td>coroutine.yield(...):挂起正在执行的协程。为此函数传入的参数值作为执行协程函数 resume 的额外返回值（默认会返回协程执行状态）。</td>\n\t</tr>\n</table>\n<h2 id=\"示例\">示例</h2>\n<p>让我们通过下面的例子来理解一下协程这个概念。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">co = coroutine.create(function (value1,value2)</span><br><span class=\"line\">   local tempvar3 =10</span><br><span class=\"line\">   print(&quot;coroutine section 1&quot;, value1, value2, tempvar3)</span><br><span class=\"line\">   local tempvar1 = coroutine.yield(value1+1,value2+1)</span><br><span class=\"line\">   tempvar3 = tempvar3 + value1</span><br><span class=\"line\">   print(&quot;coroutine section 2&quot;,tempvar1 ,tempvar2, tempvar3)</span><br><span class=\"line\">   local tempvar1, tempvar2= coroutine.yield(value1+value2, value1-value2)</span><br><span class=\"line\">   tempvar3 = tempvar3 + value1</span><br><span class=\"line\">   print(&quot;coroutine section 3&quot;,tempvar1,tempvar2, tempvar3)</span><br><span class=\"line\">   return value2, &quot;end&quot;</span><br><span class=\"line\">end)</span><br><span class=\"line\"></span><br><span class=\"line\">print(&quot;main&quot;, coroutine.resume(co, 3, 2))</span><br><span class=\"line\">print(&quot;main&quot;, coroutine.resume(co, 12,14))</span><br><span class=\"line\">print(&quot;main&quot;, coroutine.resume(co, 5, 6))</span><br><span class=\"line\">print(&quot;main&quot;, coroutine.resume(co, 10, 20))</span><br><span class=\"line\">```  </span><br><span class=\"line\"></span><br><span class=\"line\">执行上面的程序，我们可以得到如下的输出结果：  </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>coroutine section 1\t3\t2\t10<br>\nmain\ttrue\t4\t3<br>\ncoroutine section 2\t12\tnil\t13<br>\nmain\ttrue\t5\t1<br>\ncoroutine section 3\t5\t6\t16<br>\nmain\ttrue\t2\tend<br>\nmain\tfalse\tcannot resume dead coroutine</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">## 上面的例子到底做了些什么呢？  </span><br><span class=\"line\"></span><br><span class=\"line\">和前面说到的一样，在例子中我们使用 resume 函数继续执行协程，用 yield 函数挂起协程。同样，从例子中也可以看出如何为执行协程的 resueme 函数返回多个值。下面我将逐步解释上面的代码。  </span><br><span class=\"line\"></span><br><span class=\"line\">&lt;ul&gt;</span><br><span class=\"line\">\t&lt;li&gt;首先，我们创建了一个协程并将其赋给变量 co。此协程允许传入两个参数。&lt;/li&gt;</span><br><span class=\"line\">\t&lt;li&gt;第一次调用函数 resume 时，协程内局部变量 value1 和 value2 的值分别为 3 和 2。&lt;/li&gt;</span><br><span class=\"line\">\t&lt;li&gt;为了便于理解，我们使用了局部变量 tempvar3 该变量被初始化为 10。由于变量 value1 的值为3，所以 tempvar3 在随后的协程调用过程中被先后更新为 13 和 16。&lt;/li&gt;</span><br><span class=\"line\">\t&lt;li&gt;第一次调用 coroutine.yield 时，为 resume 函数返回了值 4 和 3，这两个值是由传入的参数 3，2 分别加 1 后的结果，这一点可以从 yield 语句中得到证实。除了显示指定的返回值外，resume 还收到隐式的返回值 true，该值表示协程执行的状态，有 true 和 false 两个可能取值。&lt;/li&gt;</span><br><span class=\"line\">\t&lt;li&gt;上面的例子中，我们还应该关注在下一次调用 resume 时如何为协程传入参数。从例子中可以看到，coroutine.yield 函数返回后为两个变量赋值，该值即是第二次调用 resume 时传入的参数。这种参数传递的机制让可以结合前面传入的参数完成很多新的操作。&lt;/li&gt;</span><br><span class=\"line\">\t&lt;li&gt;最后，协程中所有语句执行完后，后面的调用就会返回 false 状态，同时返回 &quot;cannot resume dead coroutine&quot;消息。&lt;/li&gt;</span><br><span class=\"line\">&lt;/ul&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">## 另一个协程的示例  </span><br><span class=\"line\"></span><br><span class=\"line\">下面这例子中的协程使用 yield 函数和 resume 函数依次返回数字 1 到 5。示例中，如果没有协程对象或对象已结束（dead），则重新创建一个新的协程对象；若协程已经存在，则执行已经存在的协程。  </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>function getNumber()<br>\nlocal function getNumberHelper()<br>\nco = coroutine.create(function ()<br>\ncoroutine.yield(1)<br>\ncoroutine.yield(2)<br>\ncoroutine.yield(3)<br>\ncoroutine.yield(4)<br>\ncoroutine.yield(5)<br>\nend)<br>\nreturn co<br>\nend<br>\nif(numberHelper) then<br>\nstatus, number = coroutine.resume(numberHelper);<br>\nif coroutine.status(numberHelper) == “dead” then<br>\nnumberHelper = getNumberHelper()<br>\nstatus, number = coroutine.resume(numberHelper);<br>\nend<br>\nreturn number<br>\nelse<br>\nnumberHelper = getNumberHelper()<br>\nstatus, number = coroutine.resume(numberHelper);<br>\nreturn number<br>\nend<br>\nend<br>\nfor index = 1, 10 do<br>\nprint(index, getNumber())<br>\nend</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">执行上述的程序，我们可以得到如下的输出结果：  </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>1\t1<br>\n2\t2<br>\n3\t3<br>\n4\t4<br>\n5\t5<br>\n6\t1<br>\n7\t2<br>\n8\t3<br>\n9\t4<br>\n10\t5</p>\n<pre><code>\n大家经常会把协程和多线程编程语言中的线程进行对比，但我们要明白，协程有着与线程类似的特性，但是协程与线程的区别在于协程不能并发，任意时刻只会有一个协程执行，而线程允许并发的存在。（译注：译者认为本质上协程其是就是线程，不过是用户态的线罢了，它将调度问题交由程序开发人员手动完成。）  \n\n我们通过控制程序执行顺序以满足获取某些临时信息的需求。配合全局变量的使用，协和会变得更加的灵活方便。</code></pre>\n","text":"Lua 协程 概述 协程具有协同的性质，它允许两个或多个方法以某种可控的方式协同工作。在任何一个时刻，都只有一个协程在运行，只有当正在运行的协程主动挂起时它的执行才会被挂起（暂停）。 上面的定义可能看上去比较模糊。接下来让我讲得很清楚一点，假设我们有两个方法，一个是主程序方法，另...","link":"","photos":[],"count_time":{"symbolsCount":"3.6k","symbolsTime":"3 mins."},"categories":[{"name":"lua_guide","slug":"lua-guide","count":34,"path":"api/categories/lua-guide.json"}],"tags":[{"name":"lua","slug":"lua","count":124,"path":"api/tags/lua.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\"><span class=\"toc-text\">Lua 协程</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%A6%82%E8%BF%B0\"><span class=\"toc-text\">概述</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8D%8F%E7%A8%8B%E4%B8%AD%E5%8F%AF%E7%94%A8%E7%9A%84%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">协程中可用的函数</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B\"><span class=\"toc-text\">示例</span></a></li></ol></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Break语句","uid":"1e07952645adeb0063307933aff99e35","slug":"lua/2016-06-01-break","date":"2024-03-14T07:45:09.091Z","updated":"2024-03-14T07:45:09.091Z","comments":true,"path":"api/articles/lua/2016-06-01-break.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":null,"text":"#break 语句 程序在解释执行过程中，在循环内遇到 break 语句时，循环将立即结束。程序将循环语句的下一条语句开始执行。 如果你是在嵌套循环（即，一个循环内还有一个循环语句）内使用 break 语句，break 只结束内层循环，并从该代码块后的第一条语句处开始执行。 语法...","link":"","photos":[],"count_time":{"symbolsCount":587,"symbolsTime":"1 mins."},"categories":[{"name":"lua_guide","slug":"lua-guide","count":34,"path":"api/categories/lua-guide.json"}],"tags":[{"name":"lua","slug":"lua","count":124,"path":"api/tags/lua.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Lua函数","uid":"4b8da2e6835e8f700ba371a83ecbe6ab","slug":"lua/2016-06-01-functions","date":"2024-03-14T07:45:09.091Z","updated":"2024-03-14T07:45:09.091Z","comments":true,"path":"api/articles/lua/2016-06-01-functions.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":null,"text":"Lua 函数 函数用于将一组语句组合起来完成一个任务。你可以将你的代码分割到不同的函数中。如何将你的代码分到不同的函数中完全由你自己决定，不过一般会按照逻辑功能进行划分，每个函数都执行一个特定的任务。 在 Lua 中提供了大量的内置函数供我们使用。例如，print() 函数用于将...","link":"","photos":[],"count_time":{"symbolsCount":"2.4k","symbolsTime":"2 mins."},"categories":[{"name":"lua_guide","slug":"lua-guide","count":34,"path":"api/categories/lua-guide.json"}],"tags":[{"name":"lua","slug":"lua","count":124,"path":"api/tags/lua.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}