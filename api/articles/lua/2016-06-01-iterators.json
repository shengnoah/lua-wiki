{"title":"Lua迭代器","uid":"eacf32e453764fca08d4d96ce1e78183","slug":"lua/2016-06-01-iterators","date":"2024-03-14T07:45:09.087Z","updated":"2024-03-27T04:09:26.767Z","comments":true,"path":"api/articles/lua/2016-06-01-iterators.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<h1 id=\"lua-迭代器\"><a class=\"markdownIt-Anchor\" href=\"#lua-迭代器\"></a> Lua 迭代器</h1>\n<p>迭代器是用于遍历集合或容器中元素的一种结构。在 Lua 语言中，集合往往指的是可以用来创建各种数据结构的表。比如，数组就是用表来创建的。</p>\n<h2 id=\"通用迭代器\"><a class=\"markdownIt-Anchor\" href=\"#通用迭代器\"></a> 通用迭代器</h2>\n<p>通用迭代器可以访问集合中的键值对。下面是通用迭代器的一个简单例子：</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">array <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"Lua\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Tutorial\"</span><span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">for</span> key<span class=\"token punctuation\">,</span>value <span class=\"token keyword\">in</span> <span class=\"token function\">ipairs</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">)</span> \n<span class=\"token keyword\">do</span>\n   <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>执行的上面的代码，我们可以得到如下的输出结果：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token number\">1</span>  Lua\n<span class=\"token number\">2</span>  Tutorial<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>上面的例子中使用了 Lua 提供的默认迭代器函数 ipairs。</p>\n<p>在 Lua 语言中，我们使用函数表示迭代器。根据是否在迭代器函数中是否维护状态信息，我们将迭代器分为以下两类：</p>\n<ul>\n\t<li>无状态迭代器</li>  \n\t<li>有状态迭代器</li>\n</ul>  \n<h2 id=\"无状态迭代器\"><a class=\"markdownIt-Anchor\" href=\"#无状态迭代器\"></a> 无状态迭代器</h2>\n<p>由此迭代器的名称就可以看出来，这一类的迭代器函数中不会保存任何中间状态。</p>\n<p>让我们一起来看一下下面这个例子。在这个例子中，我们用一个简单的函数创建了一个自己的迭代器。这个迭代器用以输出 n 个数的平方值。</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\"><span class=\"token keyword\">function</span> <span class=\"token function\">square</span><span class=\"token punctuation\">(</span>iteratorMaxCount<span class=\"token punctuation\">,</span>currentNumber<span class=\"token punctuation\">)</span>\n   <span class=\"token keyword\">if</span> currentNumber<span class=\"token operator\">&lt;</span>iteratorMaxCount\n   <span class=\"token keyword\">then</span>\n      currentNumber <span class=\"token operator\">=</span> currentNumber<span class=\"token operator\">+</span><span class=\"token number\">1</span>\n   <span class=\"token keyword\">return</span> currentNumber<span class=\"token punctuation\">,</span> currentNumber<span class=\"token operator\">*</span>currentNumber\n   <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span>\n\n<span class=\"token keyword\">for</span> i<span class=\"token punctuation\">,</span>n <span class=\"token keyword\">in</span> square<span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span>\n<span class=\"token keyword\">do</span>\n   <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>执行上面的代码，我们可以得到如下的输出结果：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token number\">1</span>\t<span class=\"token number\">1</span>\n<span class=\"token number\">2</span>\t<span class=\"token number\">4</span>\n<span class=\"token number\">3</span>\t<span class=\"token number\">9</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>我们可以稍微的修改一下上面的代码，使得此迭代器可以像 ipairs 那样工作。如下所示：</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\"><span class=\"token keyword\">function</span> <span class=\"token function\">square</span><span class=\"token punctuation\">(</span>iteratorMaxCount<span class=\"token punctuation\">,</span>currentNumber<span class=\"token punctuation\">)</span>\n   <span class=\"token keyword\">if</span> currentNumber<span class=\"token operator\">&lt;</span>iteratorMaxCount\n   <span class=\"token keyword\">then</span>\n      currentNumber <span class=\"token operator\">=</span> currentNumber<span class=\"token operator\">+</span><span class=\"token number\">1</span>\n   <span class=\"token keyword\">return</span> currentNumber<span class=\"token punctuation\">,</span> currentNumber<span class=\"token operator\">*</span>currentNumber\n   <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">squares</span><span class=\"token punctuation\">(</span>iteratorMaxCount<span class=\"token punctuation\">)</span>\n   <span class=\"token keyword\">return</span> square<span class=\"token punctuation\">,</span>iteratorMaxCount<span class=\"token punctuation\">,</span><span class=\"token number\">0</span>\n<span class=\"token keyword\">end</span>  \n\n<span class=\"token keyword\">for</span> i<span class=\"token punctuation\">,</span>n <span class=\"token keyword\">in</span> <span class=\"token function\">squares</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">do</span> \n\t<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>执行上面的代码，我们可以得到如下的输出结果：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token number\">1</span>\t<span class=\"token number\">1</span>\n<span class=\"token number\">2</span>\t<span class=\"token number\">4</span>\n<span class=\"token number\">3</span>\t<span class=\"token number\">9</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"有状态迭代器\"><a class=\"markdownIt-Anchor\" href=\"#有状态迭代器\"></a> 有状态迭代器</h2>\n<p>前面的例子使用的迭代器函数是不保存状态的。每次调用迭代器函数时，函数基于传入函数的第二个变量访问集合的下一个元素。在 Lua 中可以使用闭包来存储当前元素的状态。闭包通过函数调用得到变量的值。为了创建一个新的闭包，我们需创建两个函数，包括闭包函数本身和一个工厂函数，其中工厂函数用于创建闭包。</p>\n<p>下面的示例中，我们将使用闭包来创建我们的迭代器。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">array <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"Lua\"</span>, <span class=\"token string\">\"Tutorial\"</span><span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">function</span> elementIterator <span class=\"token punctuation\">(</span>collection<span class=\"token punctuation\">)</span>\n   <span class=\"token builtin class-name\">local</span> index <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n   <span class=\"token builtin class-name\">local</span> count <span class=\"token operator\">=</span> <span class=\"token comment\">#collection</span>\n   -- 返回闭包函数\n   <span class=\"token builtin class-name\">return</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      index <span class=\"token operator\">=</span> index + <span class=\"token number\">1</span>\n      <span class=\"token keyword\">if</span> index <span class=\"token operator\">&lt;=</span> count\n      <span class=\"token keyword\">then</span>\n         -- 返回迭代器的当前元素\n         <span class=\"token builtin class-name\">return</span> collection<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span>\n      end\n   end\nend\n\n<span class=\"token keyword\">for</span> <span class=\"token for-or-select variable\">element</span> <span class=\"token keyword\">in</span> elementIterator<span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">do</span>\n   print<span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span>\nend<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>执行上面的代码，我们可以得到如下的输出结果：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">Lua\nTutorial<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>上面的例子中我们可以看到，在　elementIterator 函数内定义了另外一个匿名函数。此匿名函数中使用了一个外部变量 index (译注：此变量在匿名函数之外，elementIterator 函数内)。每次内部的匿名函数被调用时，都会将 index 的值增加 1，并统计数返回的每个元素。</p>\n<p>我们可以参照上面的方法使用闭包创建一个迭代器函数。每次我们使用迭代器遍历集合时，它都可以返回多个元素。</p>\n","text":" Lua 迭代器 迭代器是用于遍历集合或容器中元素的一种结构。在 Lua 语言中，集合往往指的是可以用来创建各种数据结构的表。比如，数组就是用表来创建的。 通用迭代器 通用迭代器可以访问集合中的键值对。下面是通用迭代器的一个简单例子： array = &#123;\"Lua\", \"...","link":"","photos":[],"count_time":{"symbolsCount":"1.9k","symbolsTime":"2 mins."},"categories":[{"name":"lua_guide","slug":"lua-guide","count":34,"path":"api/categories/lua-guide.json"}],"tags":[{"name":"lua","slug":"lua","count":124,"path":"api/tags/lua.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#lua-%E8%BF%AD%E4%BB%A3%E5%99%A8\"><span class=\"toc-text\"> Lua 迭代器</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%80%9A%E7%94%A8%E8%BF%AD%E4%BB%A3%E5%99%A8\"><span class=\"toc-text\"> 通用迭代器</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%97%A0%E7%8A%B6%E6%80%81%E8%BF%AD%E4%BB%A3%E5%99%A8\"><span class=\"toc-text\"> 无状态迭代器</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%9C%89%E7%8A%B6%E6%80%81%E8%BF%AD%E4%BB%A3%E5%99%A8\"><span class=\"toc-text\"> 有状态迭代器</span></a></li></ol></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Lua中的if语句","uid":"15a63bcbcc45ec73313b8b26fa940570","slug":"lua/2016-06-01-if-statement","date":"2024-03-14T07:45:09.087Z","updated":"2024-03-14T07:45:09.087Z","comments":true,"path":"api/articles/lua/2016-06-01-if-statement.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"#Lua 中的 if 语句 if 语句包括一个布尔表达式和一个或多个语句。 ##语法 Lua 语言 if 语句的语法如下： if(boolean_expression) then --[如果布尔表达式为真，statement(s) 执行。--] end &#96;&#96;&#9...","link":"","photos":[],"count_time":{"symbolsCount":622,"symbolsTime":"1 mins."},"categories":[{"name":"lua_guide","slug":"lua-guide","count":34,"path":"api/categories/lua-guide.json"}],"tags":[{"name":"lua","slug":"lua","count":124,"path":"api/tags/lua.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"LUA的Loop循环","uid":"50b76913de0a7e15924d6b0f0dac6bf2","slug":"lua/2016-06-01-loop","date":"2024-03-14T07:45:09.087Z","updated":"2024-03-27T04:04:39.900Z","comments":true,"path":"api/articles/lua/2016-06-01-loop.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":" 循环 虽然一般情况下，语句都是顺序执行的：函数内的第一条语句先执行，然后是第二条，依次类推。 但是还是可能存在需要执行一段代码多次的情况。 为此编程语言提供各式各样的控制结构实现复杂的程序执行路径。 其中，循环语句可以让我们可以执行一条或一组语句多次。下图中所描述的是大多数语言...","link":"","photos":[],"count_time":{"symbolsCount":727,"symbolsTime":"1 mins."},"categories":[{"name":"lua_guide","slug":"lua-guide","count":34,"path":"api/categories/lua-guide.json"}],"tags":[{"name":"LUA教程","slug":"LUA教程","count":4,"path":"api/tags/LUA教程.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}