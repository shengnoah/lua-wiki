{"title":"Lua元表","uid":"0498ed7eca93166bac9cec9951eb31df","slug":"lua/2016-06-01-metatables","date":"2024-03-14T07:45:09.086Z","updated":"2024-03-27T04:13:10.462Z","comments":true,"path":"api/articles/lua/2016-06-01-metatables.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<h1 id=\"lua-元表\"><a class=\"markdownIt-Anchor\" href=\"#lua-元表\"></a> Lua 元表</h1>\n<p>正如其名，元表也是表。不过，将元表与表相关联后，我们就可以通过设置元表的键和相关方法来改变表的行为。元方法的功能十分强大，使用元方法可以实现很多的功能，比如：</p>\n<ul>\n\t<li>修改表的操作符功能或为操作符添加新功能（译注：如果您学过 C++ 之类的面向对象的语言，应该比较好理解，其实它实现的是操作的重载）。</li>\n\t<li>使用元表中的 __index 方法，我们可以实现在表中查找键不存在时转而在元表中查找键值的功能。</li>\n</ul>  \n<p>Lua 提供了两个十分重要的用来处理元表的方法，如下：</p>\n<ul>\n\t<li>setmetatable(table,metatable):此方法用于为一个表设置元表。</li>\n\t<li>getmetatable(table)：此方法用于获取表的元表对象。</li>\n</ul>  \n<p>首先，让我们看一下如何将一个表设置为另一个表的元表。示例如下：</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">mytable <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\nmymetatable <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token function\">setmetatable</span><span class=\"token punctuation\">(</span>mytable<span class=\"token punctuation\">,</span>mymetatable<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>上面的代码可以简写成如下的一行代码：</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">mytable <span class=\"token operator\">=</span> <span class=\"token function\">setmetatable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h2 id=\"__index\"><a class=\"markdownIt-Anchor\" href=\"#__index\"></a> __index</h2>\n<p>下面的例子中，我们实现了在表中查找键不存在时转而在元表中查找该键的功能：</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">mytable <span class=\"token operator\">=</span> <span class=\"token function\">setmetatable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>key1 <span class=\"token operator\">=</span> <span class=\"token string\">\"value1\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>\n  __index <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>mytable<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> key <span class=\"token operator\">==</span> <span class=\"token string\">\"key2\"</span> <span class=\"token keyword\">then</span>\n      <span class=\"token keyword\">return</span> <span class=\"token string\">\"metatablevalue\"</span>\n    <span class=\"token keyword\">else</span>\n      <span class=\"token keyword\">return</span> mytable<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">end</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>mytable<span class=\"token punctuation\">.</span>key1<span class=\"token punctuation\">,</span>mytable<span class=\"token punctuation\">.</span>key2<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>运行上面的程序，我们可以得到如下的输出结果：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">value1\tmetatablevalue<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>接下来逐步解释上面例子运行的过程：</p>\n<ul>\n\t<li>表 mytable 为 {key = \"values1\"}</li>\n\t<li>为 mytable 设置了一个元表，该元表的键 __index 存储了一个函数，我们称这个函数为元方法。</li>\n\t<li>这个元方法的工作也十分简单。它仅查找索引 “key2”,如果找到该索引值，则返回 \"metatablevalue\",否则返回 mytable 中索引对应的值。</li>\n</ul>\n<p>上面的程序同样可以简化成如下的形式：</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">mytable <span class=\"token operator\">=</span> <span class=\"token function\">setmetatable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>key1 <span class=\"token operator\">=</span> <span class=\"token string\">\"value1\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> __index <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> key2 <span class=\"token operator\">=</span> <span class=\"token string\">\"metatablevalue\"</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>mytable<span class=\"token punctuation\">.</span>key1<span class=\"token punctuation\">,</span>mytable<span class=\"token punctuation\">.</span>key2<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h2 id=\"__newindex\"><a class=\"markdownIt-Anchor\" href=\"#__newindex\"></a> __newindex</h2>\n<p>为元表添加 __newindex 后，当访问的键在表中不存在时，此时添加新键值对的行为将由此元方法（__newindex）定义。下面的例子中，如果访问的索引在表中不存在则在元表中新加该索引值（注意，是添加在另外一个表 mymetatable 中而非在原表 mytable 中。），具体代码如下(译注：请注意此处 __newindex 的值并非一个方法而是一个表。)：</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">mymetatable <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\nmytable <span class=\"token operator\">=</span> <span class=\"token function\">setmetatable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>key1 <span class=\"token operator\">=</span> <span class=\"token string\">\"value1\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> __newindex <span class=\"token operator\">=</span> mymetatable <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>mytable<span class=\"token punctuation\">.</span>key1<span class=\"token punctuation\">)</span>\n\nmytable<span class=\"token punctuation\">.</span>newkey <span class=\"token operator\">=</span> <span class=\"token string\">\"new value 2\"</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>mytable<span class=\"token punctuation\">.</span>newkey<span class=\"token punctuation\">,</span>mymetatable<span class=\"token punctuation\">.</span>newkey<span class=\"token punctuation\">)</span>\n\nmytable<span class=\"token punctuation\">.</span>key1 <span class=\"token operator\">=</span> <span class=\"token string\">\"new  value 1\"</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>mytable<span class=\"token punctuation\">.</span>key1<span class=\"token punctuation\">,</span>mymetatable<span class=\"token punctuation\">.</span>newkey1<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>执行上面的程序，我们可以得到如下的输出结果：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">value1\nnil\tnew value <span class=\"token number\">2</span>\nnew  value <span class=\"token number\">1</span>\tnil<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>可以看出，在上面的程序中，如果键存在于主表中，只会简单更新相应的键值。而如果键不在表中时，会在另外的表 mymetatable 中添加该键值对。<br />\n在接下来这个例子中，我们用 rawset 函数在相同的表（主表）中更新键值，而不再是将新的键添加到另外的表中。代码如下所示：</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">mytable <span class=\"token operator\">=</span> <span class=\"token function\">setmetatable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>key1 <span class=\"token operator\">=</span> <span class=\"token string\">\"value1\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>\n  __newindex <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>mytable<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token function\">rawset</span><span class=\"token punctuation\">(</span>mytable<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> <span class=\"token string\">\"\\\"\"</span><span class=\"token operator\">..</span>value<span class=\"token operator\">..</span><span class=\"token string\">\"\\\"\"</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">end</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\nmytable<span class=\"token punctuation\">.</span>key1 <span class=\"token operator\">=</span> <span class=\"token string\">\"new value\"</span>\nmytable<span class=\"token punctuation\">.</span>key2 <span class=\"token operator\">=</span> <span class=\"token number\">4</span>\n\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>mytable<span class=\"token punctuation\">.</span>key1<span class=\"token punctuation\">,</span>mytable<span class=\"token punctuation\">.</span>key2<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>执行上面的程序，我们可以得到如下的输出结果：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">new value\t<span class=\"token string\">\"4\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>rawset 函数设置值时不会使用元表中的 __newindex 元方法。同样的，Lua 中也存的一个 rawget 方法，该方法访问表中键值时也不会调用 __index 的元方法。</p>\n<h2 id=\"为表添加操作符行为\"><a class=\"markdownIt-Anchor\" href=\"#为表添加操作符行为\"></a> 为表添加操作符行为</h2>\n<p>使用 + 操作符完成两个表组合的方法如下所示（译注：可以看出重载的意思了）：</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">mytable <span class=\"token operator\">=</span> <span class=\"token function\">setmetatable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>\n  __add <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>mytable<span class=\"token punctuation\">,</span> newtable<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> table<span class=\"token punctuation\">.</span><span class=\"token function\">maxn</span><span class=\"token punctuation\">(</span>newtable<span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>\n      table<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>mytable<span class=\"token punctuation\">,</span> table<span class=\"token punctuation\">.</span><span class=\"token function\">maxn</span><span class=\"token punctuation\">(</span>mytable<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>newtable<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">end</span>\n    <span class=\"token keyword\">return</span> mytable\n  <span class=\"token keyword\">end</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\nsecondtable <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">&#125;</span>\n\nmytable <span class=\"token operator\">=</span> mytable <span class=\"token operator\">+</span> secondtable\n<span class=\"token keyword\">for</span> k<span class=\"token punctuation\">,</span>v <span class=\"token keyword\">in</span> <span class=\"token function\">ipairs</span><span class=\"token punctuation\">(</span>mytable<span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">,</span>v<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>执行上面的的程序，我们可以得到如下的输出结果：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token number\">1</span>\t<span class=\"token number\">1</span>\n<span class=\"token number\">2</span>\t<span class=\"token number\">2</span>\n<span class=\"token number\">3</span>\t<span class=\"token number\">3</span>\n<span class=\"token number\">4</span>\t<span class=\"token number\">4</span>\n<span class=\"token number\">5</span>\t<span class=\"token number\">5</span>\n<span class=\"token number\">6</span>\t<span class=\"token number\">6</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>元表中 __add 键用于修改加法操作符的行为。其它操作对应的元表中的键值如下表所示。</p>\n<table>\n\t<tr>\n\t\t<th>键</th>\n\t\t<th>描述</th>\n\t</tr>\n\t<tr>\n\t\t<td>__add</td>\n\t\t<td>改变加法操作符的行为。</td>\n\t</tr>\n\t<tr>\n\t\t<td>__sub</td>\n\t\t<td>改变减法操作符的行为。</td>\n\t</tr>\n\t<tr>\n\t\t<td>__mul</td>\n\t\t<td>改变乘法操作符的行为。</td>\n\t</tr>\n\t<tr>\n\t\t<td>__div</td>\n\t\t<td>改变除法操作符的行为。</td>\n\t</tr>\n\t<tr>\n\t\t<td>__mod</td>\n\t\t<td>改变模除操作符的行为。</td>\n\t</tr>\n\t<tr>\n\t\t<td>__unm</td>\n\t\t<td>改变一元减操作符的行为。</td>\n\t</tr>\n\t<tr>\n\t\t<td>__concat</td>\n\t\t<td>改变连接操作符的行为。</td>\n\t</tr>\n\t<tr>\n\t\t<td>__eq</td>\n\t\t<td>改变等于操作符的行为。</td>\n\t</tr>\n\t<tr>\n\t\t<td>__lt</td>\n\t\t<td>改变小于操作符的行为。</td>\n\t</tr>\n\t<tr>\n\t\t<td>__le</td>\n\t\t<td>改变小于等于操作符的行为。</td>\n\t</tr>\n</table>  \n<h2 id=\"__call\"><a class=\"markdownIt-Anchor\" href=\"#__call\"></a> __call</h2>\n<p>使用 __call 可以使表具有像函数一样可调用的特性。下面的例子中涉及两个表，主表 mytable 和 传入的实参表结构 newtable，程序完成两个表中值的求和。</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">mytable <span class=\"token operator\">=</span> <span class=\"token function\">setmetatable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">10</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>\n  __call <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>mytable<span class=\"token punctuation\">,</span> newtable<span class=\"token punctuation\">)</span>\n\tsum <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\t<span class=\"token keyword\">for</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> table<span class=\"token punctuation\">.</span><span class=\"token function\">maxn</span><span class=\"token punctuation\">(</span>mytable<span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>\n\t\tsum <span class=\"token operator\">=</span> sum <span class=\"token operator\">+</span> mytable<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n\t<span class=\"token keyword\">end</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> table<span class=\"token punctuation\">.</span><span class=\"token function\">maxn</span><span class=\"token punctuation\">(</span>newtable<span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>\n\t\tsum <span class=\"token operator\">=</span> sum <span class=\"token operator\">+</span> newtable<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n\t<span class=\"token keyword\">end</span>\n\t<span class=\"token keyword\">return</span> sum\n  <span class=\"token keyword\">end</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\nnewtable <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">30</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token function\">mytable</span><span class=\"token punctuation\">(</span>newtable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>运行上面的代码，我们可以得到如下的输出结果：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token number\">70</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h2 id=\"__tostring\"><a class=\"markdownIt-Anchor\" href=\"#__tostring\"></a> __tostring</h2>\n<p>要改变 print 语句的行为，我们需要用到 __tostring 元方法。下面是一个简单的例子：</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">mytable <span class=\"token operator\">=</span> <span class=\"token function\">setmetatable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>\n  __tostring <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>mytable<span class=\"token punctuation\">)</span>\n    sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    <span class=\"token keyword\">for</span> k<span class=\"token punctuation\">,</span> v <span class=\"token keyword\">in</span> <span class=\"token function\">pairs</span><span class=\"token punctuation\">(</span>mytable<span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>\n\t\tsum <span class=\"token operator\">=</span> sum <span class=\"token operator\">+</span> v\n\t<span class=\"token keyword\">end</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"The sum of values in the table is \"</span> <span class=\"token operator\">..</span> sum\n  <span class=\"token keyword\">end</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>mytable<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>运行上面的代码，我们可以得到如下的输出结果：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">The <span class=\"token function\">sum</span> of values <span class=\"token keyword\">in</span> the table is <span class=\"token number\">60</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>如果你完全掌握了元表的用法，你就可以实现很多看上面很复杂的操作。如果不使用元表，就不仅仅是看上去很复杂了，而是真的非常复杂。所以，多做一些使用元表的练习，并熟练掌握所有元表的可选项，这会让你受益匪浅。</p>\n","text":" Lua 元表 正如其名，元表也是表。不过，将元表与表相关联后，我们就可以通过设置元表的键和相关方法来改变表的行为。元方法的功能十分强大，使用元方法可以实现很多的功能，比如： 修改表的操作符功能或为操作符添加新功能（译注：如果您学过 C++ 之类的面向对象的语言，应该比较好理解，...","link":"","photos":[],"count_time":{"symbolsCount":"3.9k","symbolsTime":"4 mins."},"categories":[{"name":"lua_guide","slug":"lua-guide","count":34,"path":"api/categories/lua-guide.json"}],"tags":[{"name":"LUA教程","slug":"LUA教程","count":4,"path":"api/tags/LUA教程.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#lua-%E5%85%83%E8%A1%A8\"><span class=\"toc-text\"> Lua 元表</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#__index\"><span class=\"toc-text\"> __index</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#__newindex\"><span class=\"toc-text\"> __newindex</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%BA%E8%A1%A8%E6%B7%BB%E5%8A%A0%E6%93%8D%E4%BD%9C%E7%AC%A6%E8%A1%8C%E4%B8%BA\"><span class=\"toc-text\"> 为表添加操作符行为</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#__call\"><span class=\"toc-text\"> __call</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#__tostring\"><span class=\"toc-text\"> __tostring</span></a></li></ol></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Lua中的for循环","uid":"26bfa2ece82537ab5f6962e2d31968f1","slug":"lua/2016-06-11-for","date":"2024-03-14T07:45:09.087Z","updated":"2024-03-27T04:08:32.674Z","comments":true,"path":"api/articles/lua/2016-06-11-for.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":" Lua 中的 for 循环 for 循环控制结构可以让你高效地写出需要执行特定次数的循环代码。 语法 Lua 语言中 for 循环的语法如下： for init,max/min value, increment do statement(s) end 下面是 for 循环执行的...","link":"","photos":[],"count_time":{"symbolsCount":476,"symbolsTime":"1 mins."},"categories":[{"name":"lua_guide","slug":"lua-guide","count":34,"path":"api/categories/lua-guide.json"},{"name":"lua教程","slug":"lua-guide/lua教程","count":2,"path":"api/categories/lua-guide/lua教程.json"}],"tags":[{"name":"LUA","slug":"LUA","count":1,"path":"api/tags/LUA.json"},{"name":"abc","slug":"abc","count":1,"path":"api/tags/abc.json"},{"name":"basic","slug":"basic","count":1,"path":"api/tags/basic.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Lua表","uid":"038bf88a1c7598385fc79ad2a48f60ba","slug":"lua/2016-06-01-tables","date":"2024-03-14T07:45:09.086Z","updated":"2024-03-27T03:27:00.412Z","comments":true,"path":"api/articles/lua/2016-06-01-tables.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":" Lua 表 在 Lua 语言中，表是唯一可以用来创建不同数据类型的数据结构，比如常见的数组和字典都是用表来创建的。 Lua 语言中经常到关联数组这种数据类型，它不仅可以用数值作为索引值，除了 nil 以外的字符串同样可以作为其索引。表没有固定的大小，当数据量增加时表会自动增大。...","link":"","photos":[],"count_time":{"symbolsCount":"3.5k","symbolsTime":"3 mins."},"categories":[{"name":"lua_guide","slug":"lua-guide","count":34,"path":"api/categories/lua-guide.json"}],"tags":[{"name":"lua","slug":"lua","count":124,"path":"api/tags/lua.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}