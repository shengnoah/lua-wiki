{"title":"数组","uid":"e16187d7a3c490f96b788338bdd79d24","slug":"lua/2016-06-01-arrays","date":"2024-03-14T07:45:09.090Z","updated":"2024-03-27T03:58:48.831Z","comments":true,"path":"api/articles/lua/2016-06-01-arrays.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<h1 id=\"lua-数组\"><a class=\"markdownIt-Anchor\" href=\"#lua-数组\"></a> Lua 数组</h1>\n<p>数组是一组有序的对象排列，既可以是一维的也可以是多维的。</p>\n<p>在 Lua 语言中，数组是用整数索引表实现的。数组的大小并不固定，随着数组元素的增加，它可以动态地增加内存空间大小。</p>\n<h2 id=\"一维数组\"><a class=\"markdownIt-Anchor\" href=\"#一维数组\"></a> 一维数组</h2>\n<p>一维数组可以使用一个简单的表结构表示。可以通过一个简单循环初始化数组或者读取数组中数据。示例代码如下所示：</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">array <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"Lua\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Tutorial\"</span><span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">for</span> i<span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span> <span class=\"token keyword\">do</span>\n   <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>执行上面的代码可以得到如下的输出结果：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">nil\nLua\nTutorial<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>从上面的例子中可以看出，当我们尝试着访问数组中一个不存在的索引时，会得到 nil 值。 Lua 语言与 C 语言不同，Lua 数组的索引是从 1 开始的，而 C 语言中索引是从 0 开始的。不过呢，你也可以在索引值为 0 或小于 0 的位置创建对象。下面的代码演示了如何使用负索引值创建并初始化数组：</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">array <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">for</span> i<span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span> <span class=\"token keyword\">do</span>\n   array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i <span class=\"token operator\">*</span><span class=\"token number\">2</span>\n<span class=\"token keyword\">end</span>\n\n<span class=\"token keyword\">for</span> i <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span> <span class=\"token keyword\">do</span>\n   <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>执行上面的代码可以得到如下的输出结果：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token parameter variable\">-4</span>\n<span class=\"token parameter variable\">-2</span>\n<span class=\"token number\">0</span>\n<span class=\"token number\">2</span>\n<span class=\"token number\">4</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"多维数组\"><a class=\"markdownIt-Anchor\" href=\"#多维数组\"></a> 多维数组</h2>\n<p>多维数组有以下两种实现方式：</p>\n<ol>\n\t<li>数组的数组（译注：数组的每一个元素是一个数组）。</li>\n\t<li>修改一维数组的索引值（译注：将多维数组映射到一维数组中）。</li>\n</ol>  \n<p>使用方法一创建 3x3 的二维数组：</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\"><span class=\"token comment\">-- 初始化数组</span>\narray <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">for</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span> <span class=\"token keyword\">do</span>\n   array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n      <span class=\"token keyword\">for</span> j<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span> <span class=\"token keyword\">do</span>\n         array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i<span class=\"token operator\">*</span>j\n      <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span>\n\n<span class=\"token comment\">-- 访问数组元素</span>\n<span class=\"token keyword\">for</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span> <span class=\"token keyword\">do</span>\n   <span class=\"token keyword\">for</span> j<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span> <span class=\"token keyword\">do</span>\n      <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n   <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>执行上面的代码可以得到如下的输出结果：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token number\">1</span>\n<span class=\"token number\">2</span>\n<span class=\"token number\">3</span>\n<span class=\"token number\">2</span>\n<span class=\"token number\">4</span>\n<span class=\"token number\">6</span>\n<span class=\"token number\">3</span>\n<span class=\"token number\">6</span>\n<span class=\"token number\">9</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>通过修改数组的的索引值实现 3x3 的二维数组，示例代码如下:</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\"><span class=\"token comment\">-- 初始化数组</span>\narray <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\nmaxRows <span class=\"token operator\">=</span> <span class=\"token number\">3</span>\nmaxColumns <span class=\"token operator\">=</span> <span class=\"token number\">3</span>\n<span class=\"token keyword\">for</span> row<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>maxRows <span class=\"token keyword\">do</span>\n   <span class=\"token keyword\">for</span> col<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>maxColumns <span class=\"token keyword\">do</span>\n      array<span class=\"token punctuation\">[</span>row<span class=\"token operator\">*</span>maxColumns <span class=\"token operator\">+</span>col<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> row<span class=\"token operator\">*</span>col\n   <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span>\n\n<span class=\"token comment\">-- 访问数组元素</span>\n<span class=\"token keyword\">for</span> row<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>maxRows <span class=\"token keyword\">do</span>\n   <span class=\"token keyword\">for</span> col<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>maxColumns <span class=\"token keyword\">do</span>\n      <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">[</span>row<span class=\"token operator\">*</span>maxColumns <span class=\"token operator\">+</span>col<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n   <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>执行上面的代码可以得到如下的输出结果：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token number\">1</span>\n<span class=\"token number\">2</span>\n<span class=\"token number\">3</span>\n<span class=\"token number\">2</span>\n<span class=\"token number\">4</span>\n<span class=\"token number\">6</span>\n<span class=\"token number\">3</span>\n<span class=\"token number\">6</span>\n<span class=\"token number\">9</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>正如从上面例子中所看到的那样，数组中数据是基于索引存储的。这使得数组可以以稀疏的方式存储，这也是 Lua 矩阵的存储方式。正是因为 Lua 中不会存储 nil 值，所以 Lua　不需要使用任何特殊的技术就可以节约大量的空间，这一点在其它语言中是做不到的。</p>\n","text":" Lua 数组 数组是一组有序的对象排列，既可以是一维的也可以是多维的。 在 Lua 语言中，数组是用整数索引表实现的。数组的大小并不固定，随着数组元素的增加，它可以动态地增加内存空间大小。 一维数组 一维数组可以使用一个简单的表结构表示。可以通过一个简单循环初始化数组或者读取数...","link":"","photos":[],"count_time":{"symbolsCount":"1.4k","symbolsTime":"1 mins."},"categories":[{"name":"lua_guide","slug":"lua-guide","count":34,"path":"api/categories/lua-guide.json"},{"name":"lua教程","slug":"lua-guide/lua教程","count":2,"path":"api/categories/lua-guide/lua教程.json"}],"tags":[{"name":"lua","slug":"lua","count":124,"path":"api/tags/lua.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#lua-%E6%95%B0%E7%BB%84\"><span class=\"toc-text\"> Lua 数组</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%80%E7%BB%B4%E6%95%B0%E7%BB%84\"><span class=\"toc-text\"> 一维数组</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%A4%9A%E7%BB%B4%E6%95%B0%E7%BB%84\"><span class=\"toc-text\"> 多维数组</span></a></li></ol></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Lua标准库","uid":"fa374b256846497ad36372533ba9888a","slug":"lua/2016-06-01-standard-libraries","date":"2024-03-14T07:45:09.091Z","updated":"2024-03-14T07:45:09.092Z","comments":true,"path":"api/articles/lua/2016-06-01-standard-libraries.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":" Lua 标准库 Lua 标准库利用 C 语言 API 实现并提供了丰富的函数，它们内置于 Lua 语言中。该标准库不仅可以提供 Lua 语言内服务，还能提供外部服务，比如文件或数据库的操作。 这些标准库使用标准的 C API 接口实现，它们作为独立的 C 语言模块提供给使用者。...","link":"","photos":[],"count_time":{"symbolsCount":"2.4k","symbolsTime":"2 mins."},"categories":[{"name":"lua_guide","slug":"lua-guide","count":34,"path":"api/categories/lua-guide.json"}],"tags":[{"name":"lua","slug":"lua","count":124,"path":"api/tags/lua.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"数据类型","uid":"a760ef6d11a2d6078a812f5bc31cf898","slug":"lua/2016-06-01-data-types","date":"2024-03-14T07:45:09.090Z","updated":"2024-03-27T03:59:28.175Z","comments":true,"path":"api/articles/lua/2016-06-01-data-types.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":" 数据类型 Lua 是动态类型编程语言，变量没有类型，只有值才有类型。值可以存储在变量中，作为参数传递或者作为返回值。 尽管在 Lua 中没有变量数据类型，但是值是有类型的。下面的列表中列出了数据类型： 值类型 描述 nil 用于区分值是否有数据，nil 表示没有数据。 bool...","link":"","photos":[],"count_time":{"symbolsCount":966,"symbolsTime":"1 mins."},"categories":[{"name":"lua_guide","slug":"lua-guide","count":34,"path":"api/categories/lua-guide.json"}],"tags":[{"name":"lua","slug":"lua","count":124,"path":"api/tags/lua.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}