{"title":"Lua基本语法","uid":"9b97fd5c58ceb41de2e73474e4dfb1f8","slug":"lua/2016-06-01-basic-syntax","date":"2024-03-14T07:45:09.085Z","updated":"2024-03-27T04:15:20.778Z","comments":true,"path":"api/articles/lua/2016-06-01-basic-syntax.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<h1 id=\"基本语法\"><a class=\"markdownIt-Anchor\" href=\"#基本语法\"></a> 基本语法</h1>\n<p>Lua 学起来非常简单。现在，让我们开始创建我们的第一个 Lua 程序吧！</p>\n<h2 id=\"第一个-lua-程序\"><a class=\"markdownIt-Anchor\" href=\"#第一个-lua-程序\"></a> 第一个 Lua 程序</h2>\n<p>Lua 提供交互式编程模式。在这个模式下，你可以一条一条地输入命令，然后立即就可以得到结果。你可以在 shell 中使用 lua -i 或者 lua 命令启动。输入命令后，按下回车键，就启动了交互模式，显示如下：</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">$ lua <span class=\"token operator\">-</span>i \n$ Lua <span class=\"token number\">5.1</span><span class=\"token number\">.4</span>  <span class=\"token function\">Copyright</span> <span class=\"token punctuation\">(</span>C<span class=\"token punctuation\">)</span> <span class=\"token number\">1994</span><span class=\"token operator\">-</span><span class=\"token number\">2008</span> Lua<span class=\"token punctuation\">.</span>org<span class=\"token punctuation\">,</span> PUC<span class=\"token operator\">-</span>Rio\nquit to <span class=\"token keyword\">end</span><span class=\"token punctuation\">;</span> cd<span class=\"token punctuation\">,</span> dir <span class=\"token keyword\">and</span> edit also available<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>你可以使用如下命令打印输出：</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">$<span class=\"token operator\">></span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test\"</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>按下回车键后，你会得到如下输出结果：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token string\">'test'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h2 id=\"默认模式编辑\"><a class=\"markdownIt-Anchor\" href=\"#默认模式编辑\"></a> 默认模式编辑</h2>\n<p>使用 Lua 文件做为解释器的参数启动解释器,然后开始执行文件直到文件结束。当脚本执行结束后，解释器就不在活跃了。</p>\n<p>让我们写一个简单的 Lua 程序。所有的 Lua　文件都扩展名都是<code>.lua</code>。因此，将下面的源代码放到 test.lua 文件中。</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\"><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test\"</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>假如你已经设置好 Lua 程序的环境，用下面的命令运行程序：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ lua test.lua<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>我们会得到如下的输出结果：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">test</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>让我们尝试使用另外的方式运行 Lua 程序。下面是修改后的 test.lua 文件：</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">\\<span class=\"token operator\">#</span>!<span class=\"token operator\">/</span>usr<span class=\"token operator\">/</span><span class=\"token keyword\">local</span><span class=\"token operator\">/</span>bin<span class=\"token operator\">/</span>lua\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test\"</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>这里，我们假设你的 Lua 解释器程序在 /usr/local/bin/lua 目录下。test.lua 文件中第一行由于以 # 开始而被解释器忽略，运行这个程序可以得到如下的结果：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">chmod</span> a+rx test.lua\n$./test.lua<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>我们会得到如下的的输出结果：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">test</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>接下来让我们看一下 Lua 程序的基本结构。这样，你可以更容易理解 Lua 编程语言的基本结构单元。</p>\n<h2 id=\"lua-中的符号\"><a class=\"markdownIt-Anchor\" href=\"#lua-中的符号\"></a> Lua 中的符号</h2>\n<p>Lua 程序是由大量的符号组成的。这些符号可以分为关键字、标识符、常量、字符串常量几类。例如，下面的 Lua 语句中包含三个符号：</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">io<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello world, from \"</span><span class=\"token punctuation\">,</span>_VERSION<span class=\"token punctuation\">,</span><span class=\"token string\">\"!\\n\"</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>这三个符号分别是:</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">io<span class=\"token punctuation\">.</span><span class=\"token function\">write</span>\n<span class=\"token punctuation\">(</span>\n<span class=\"token string\">\"Hello world, from \"</span><span class=\"token punctuation\">,</span>_VERSION<span class=\"token punctuation\">,</span><span class=\"token string\">\"!\\n\"</span>\n<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"注释\"><a class=\"markdownIt-Anchor\" href=\"#注释\"></a> 注释</h3>\n<p>注释就是 Lua 程序中的帮助文档，Lua 解释器会自动忽略它们。所有注释都以 --[[ 开始，并以 --]]结束。如下所示：</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\"><span class=\"token comment\">--[[ my first program in Lua --]]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"标识符\"><a class=\"markdownIt-Anchor\" href=\"#标识符\"></a> 标识符</h3>\n<p>Lua 中标识符是识别变量、函数或者其它用户自定义项的名字。标符识总是以字母或者下划线开始，其后可以是零个或多个字母、下划线或数字。<br />\nLua 标识符中不允许出现任何标点符号，比如，@，$ 或者 %。Lua 是大小写敏感的语言，因此 Manpower 和 manpower 是 Lua 中两个不同的标识符。下面所列的是一些合法标识符的例子。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">mohd         zara      abc     move_name    a_123\nmyname50     _temp     j       a23b9        retVal\n&#96;&#96;&#96;  \n\n### 关键字  \n\n下面列表中所示的是 Lua 中一小部分保留字。这些保留字不能用作常量、变量以及任何标识符的名字。  \n\n&lt;table&gt;\n\t&lt;tr&gt;\n\t&lt;td&gt;and&lt;&#x2F;td&gt;\n\t&lt;td&gt;break&lt;&#x2F;td&gt;\n\t&lt;td&gt;do&lt;&#x2F;td&gt;\n\t&lt;td&gt;else&lt;&#x2F;td&gt;\n\t&lt;&#x2F;tr&gt;\n\t&lt;tr&gt;\n\t&lt;td&gt;elseif&lt;&#x2F;td&gt;\n\t&lt;td&gt;end&lt;&#x2F;td&gt;\n\t&lt;td&gt;false&lt;&#x2F;td&gt;\n\t&lt;td&gt;for&lt;&#x2F;td&gt;\n\t&lt;&#x2F;tr&gt;\n\t&lt;tr&gt;\n\t&lt;td&gt;function&lt;&#x2F;td&gt;\n\t&lt;td&gt;if&lt;&#x2F;td&gt;\n\t&lt;td&gt;in&lt;&#x2F;td&gt;\n\t&lt;td&gt;local&lt;&#x2F;td&gt;\n\t&lt;&#x2F;tr&gt;\n\t&lt;tr&gt;\n\t&lt;td&gt;nil&lt;&#x2F;td&gt;\n\t&lt;td&gt;not&lt;&#x2F;td&gt;\n\t&lt;td&gt;or&lt;&#x2F;td&gt;\n\t&lt;td&gt;repeat&lt;&#x2F;td&gt;\n\t&lt;&#x2F;tr&gt;\n\t&lt;tr&gt;\n\t&lt;td&gt;return&lt;&#x2F;td&gt;\n\t&lt;td&gt;then&lt;&#x2F;td&gt;\n\t&lt;td&gt;true&lt;&#x2F;td&gt;\n\t&lt;td&gt;until&lt;&#x2F;td&gt;\n\t&lt;&#x2F;tr&gt;\n\t&lt;tr&gt;\n\t&lt;td&gt;while&lt;&#x2F;td&gt;\n\t&lt;td&gt;&lt;&#x2F;td&gt;\n\t&lt;td&gt;&lt;&#x2F;td&gt;\n\t&lt;td&gt;&lt;&#x2F;td&gt;\n\t&lt;&#x2F;tr&gt;\n&lt;&#x2F;table&gt;\n\n### Lua 中的空白符  \n\n如果 Lua 程序中某一行只包含空格或者注释，那么这样的一行被称之为空行。 Lua 解释器将完全忽略这一行。  \n在 Lua 中，空白是用来描述空格、制表符、换行符和注释的术语。空白符用于将语句中的一部分与其它部分区分开，使得解释器可以语句中的一个元素，比如 int，何处结束，以及另一个元素从何处开始。因此，在下面的语句中：  \n\n&#96;&#96;&#96;lua\nlocal age<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>在 local 与 age 之间至少有一个空白符（通常是空格）,这个空白符使得解释器可以将 local 与 age 区分开。另一方面，在下面的语句中：</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">fruit <span class=\"token operator\">=</span> apples <span class=\"token operator\">+</span> oranges   <span class=\"token comment\">--get the total fruit</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>fruit 与 = 之间以及 = 与 apples 之间的空白符都是可以没有的。但是为了程序的可读性目的，建议你在它们之间使用空白符。</p>\n","text":" 基本语法 Lua 学起来非常简单。现在，让我们开始创建我们的第一个 Lua 程序吧！ 第一个 Lua 程序 Lua 提供交互式编程模式。在这个模式下，你可以一条一条地输入命令，然后立即就可以得到结果。你可以在 shell 中使用 lua -i 或者 lua 命令启动。输入命令后...","link":"","photos":[],"count_time":{"symbolsCount":"2.8k","symbolsTime":"3 mins."},"categories":[{"name":"lua_guide","slug":"lua-guide","count":34,"path":"api/categories/lua-guide.json"}],"tags":[{"name":"lua","slug":"lua","count":124,"path":"api/tags/lua.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95\"><span class=\"toc-text\"> 基本语法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E4%B8%80%E4%B8%AA-lua-%E7%A8%8B%E5%BA%8F\"><span class=\"toc-text\"> 第一个 Lua 程序</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%BB%98%E8%AE%A4%E6%A8%A1%E5%BC%8F%E7%BC%96%E8%BE%91\"><span class=\"toc-text\"> 默认模式编辑</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#lua-%E4%B8%AD%E7%9A%84%E7%AC%A6%E5%8F%B7\"><span class=\"toc-text\"> Lua 中的符号</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B3%A8%E9%87%8A\"><span class=\"toc-text\"> 注释</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%A0%87%E8%AF%86%E7%AC%A6\"><span class=\"toc-text\"> 标识符</span></a></li></ol></li></ol></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Table复制","uid":"f35637f6fb4f2abf97cdd32ce0593fe7","slug":"lua/luatest/Table复制","date":"2024-03-14T07:45:09.086Z","updated":"2024-03-14T07:45:09.086Z","comments":true,"path":"api/articles/lua/luatest/Table复制.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":" Table复制 构造一个lua table变量，然后对这个变量在调用函数进行制和专递。 可以使用以下代码构造一个Lua table变量，并调用函数进行传递： -- 构造一个Lua table变量 local myTable = &#123; name = \"John\", age...","link":"","photos":[],"count_time":{"symbolsCount":"1.8k","symbolsTime":"2 mins."},"categories":[{"name":"Lua","slug":"Lua","count":2,"path":"api/categories/Lua.json"}],"tags":[{"name":"lua","slug":"lua","count":124,"path":"api/tags/lua.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Lua错误处理","uid":"8fa5391aad4ba0aa8b3b2333eb0ffb7d","slug":"lua/2016-06-01-error-handling","date":"2024-03-14T07:45:09.085Z","updated":"2024-03-27T04:17:06.148Z","comments":true,"path":"api/articles/lua/2016-06-01-error-handling.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":" Lua 错误处理 为什么需要错误处理机制 在真实的系统中程序往往非常复杂，它们经常涉及到文件操作、数据库事务操作或网络服务调用等，这个时候错误处理就显得非常重要。不关注错误处理可能在处理诸如涉密或金融交易这些业务时造成重大的损失。 无论什么时候，程序开发都要求小心地做好错误处理...","link":"","photos":[],"count_time":{"symbolsCount":"2.4k","symbolsTime":"2 mins."},"categories":[{"name":"lua_guide","slug":"lua-guide","count":34,"path":"api/categories/lua-guide.json"}],"tags":[{"name":"lua","slug":"lua","count":124,"path":"api/tags/lua.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}