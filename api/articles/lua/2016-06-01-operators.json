{"title":"操作符","uid":"67d9d5e60b37525bc4954f8a5bb0acb9","slug":"lua/2016-06-01-operators","date":"2024-03-14T06:15:59.725Z","updated":"2024-03-14T06:15:59.726Z","comments":true,"path":"api/articles/lua/2016-06-01-operators.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":null,"content":"<h1 id=\"操作符\"><a href=\"#操作符\" class=\"headerlink\" title=\"操作符\"></a>操作符</h1><p>操作符是用于告诉解释器执行特定的数学或逻辑运算的符号。Lua 语言有丰富的内置操作符，主要包括以下几类：  </p>\n<ul>\n    <li>算术运算操作符</li>\n    <li>关系运算操作符</li>\n    <li>逻辑运算操作符</li>\n    <li>其它操作符</li>\n</ul>\n这篇教程将会依次介绍以上四类操作符。  \n\n<h2 id=\"算术去处操作符\"><a href=\"#算术去处操作符\" class=\"headerlink\" title=\"算术去处操作符\"></a>算术去处操作符</h2><p>下面的表中列出了所有 Lua 语言支持的算术运算操作符。假设 A 变量的值为 10，B 变量的值为 20，则：  </p>\n<table>\n    <tr>\n        <th>操作符</th>\n        <th>描述</th>\n        <th>示例</th>\n    </tr>\n    <tr>\n        <td>+</td>\n        <td>两个操作数据相加</td>\n        <td>A + B = 30</td>\n    </tr>\n    <tr>\n        <td>-</td>\n        <td>第一个操作数减去第二个操作数据</td>\n        <td>A - B = 10</td>\n    </tr>\n    <tr>\n        <td>*</td>\n        <td>两个操作数相乘</td>\n        <td>A * B = 200</td>\n    </tr>\n    <tr>\n        <td>%</td>\n        <td>模除操作符</td>\n        <td>A % B = 0</td>\n    </tr>\n    <tr>\n        <td>^</td>\n        <td>幂运算符</td>\n        <td>A ^ 2 = 100</td>\n    </tr>\n    <tr>\n        <td>-</td>\n        <td>一元减操作符用于取反</td>\n        <td>-A = -10</td>\n    </tr>\n</table>\n\n<h2 id=\"关系运算符\"><a href=\"#关系运算符\" class=\"headerlink\" title=\"关系运算符\"></a>关系运算符</h2><p>下面的表列出了 Lua 支持的所有关系运算符。假设 A 的值为 10，B 的值为 20，则：  </p>\n<table>\n    <tr>\n        <th>操作符</th>\n        <th>描述</th>\n        <th>示例</th>\n    </tr>\n    <tr>\n        <td>==</td>\n        <td>判断两个操作数是否相等，若相等则条件为真，否则为假。</td>\n        <td>(A == B) 为假。</td>\n    </tr>\n    <tr>\n        <td>~=</td>\n        <td>判断两个操作数是否相等，若不相等则条件为真，否则为假。</td>\n        <td>(A ~= B) 为真。</td>\n    </tr>\n    <tr>\n        <td>></td>\n        <td>如果左操作数大于右操作数则条件为真，否则条件为假。</td>\n        <td>(A > B) 为假。</td>\n    </tr>\n    <tr>\n        <td><</td>\n        <td>如果左操作数小于右操作数则条件为真，否则条件为假。</td>\n        <td>(A < B) 为真。</td>\n    </tr>\n    <tr>\n        <td>>=</td>\n        <td>如果左操作数大于或等于右操作数则条件为真，否则条件为假。</td>\n        <td>(A >= B) 为假。</td>\n    </tr>\n    <tr>\n        <td><=</td>\n        <td>如果左操作数小于或等于右操作数则条件为真，否则条件为假。</td>\n        <td>(A <= B) 为真。</td>\n    </tr>\n    \n</table>\n\n<h2 id=\"逻辑运算符\"><a href=\"#逻辑运算符\" class=\"headerlink\" title=\"逻辑运算符\"></a>逻辑运算符</h2><p>下面的表列出了 Lua 支持的所有逻辑运算符。假设 A 的值为 真（非零），B 的值为 假（零），则： </p>\n<table>\n    <tr>\n        <th>操作符</th>\n        <th>描述</th>\n        <th>示例</th>\n    </tr>\n    <tr>\n        <td>and</td>\n        <td>逻辑与运算符。如果两个操作数都非零，则条件为真。</td>\n        <td>(A and B) 为假。</td>\n    </tr>\n    <tr>\n        <td>or</td>\n        <td>逻辑或运算符。如果两个操作数中其中有一个非零，则条件为真。</td>\n        <td>(A or B) 为真。</td>\n    </tr>\n    <tr>\n        <td>not</td>\n        <td>逻辑非运算符。翻转操作数的逻辑状态。如果条件是真，则逻辑非运算符会将其变成假。</td>\n        <td>!(A and B) 为真。</td>\n    </tr>\n</table>\n\n<h2 id=\"其它操作符\"><a href=\"#其它操作符\" class=\"headerlink\" title=\"其它操作符\"></a>其它操作符</h2><p>Lua 语言还支持另外两个操作符：</p>\n<table>\n    <tr>\n        <th>操作符</th>\n        <th>描述</th>\n        <th>示例</th>\n    </tr>\n    <tr>\n        <td>..</td>\n        <td>连接两个字符串。</td>\n        <td>若 a 为 \"Hello\"，b 为 \"World\",则 a..b 返回 \"Hello World\"。</td>\n    </tr>\n    <tr>\n        <td>#</td>\n        <td>一元运算符，返回字符串或者表的长度。</td>\n        <td>#\"Hello\" 返回 5。</td>\n    </tr>\n\n</table>\n\n<h2 id=\"操作符优先级\"><a href=\"#操作符优先级\" class=\"headerlink\" title=\"操作符优先级\"></a>操作符优先级</h2><p>操作符的优先级将决定表达式中的项如何组合。这会影响到表达式的求值。一些操作符比另外一些操作符有更高的优先级。例如，乘法操作符优先级比加法操作符更高。 </p>\n<p>例如 x = 7 +3*2，这里 x 的值为 13，而不是 20。这是因为操作符 * 优级级比操作符 + 优先级更高，所以先得到 3*2 的乘积，然后再加上 7。  </p>\n<p>下面的表中，从上到下优先级递减。在每个表达式中，高优先级操作数先运算。  </p>\n<table>\n    <tr>\n        <th>分类</th>\n        <th>操作数</th>\n        <th>结合性</th>\n    </tr>\n    <tr>\n        <td>一元运算符类</td>\n        <td>not # -</td>\n        <td>从右至左</td>\n    </tr>\n    <tr>\n        <td>连接运算符</td>\n        <td>..</td>\n        <td>从右至左</td>\n    </tr>\n    <tr>\n        <td>乘除运算符类</td>\n        <td>* / %</td>\n        <td>从左至右</td>\n    </tr>\n    <tr>\n        <td>加减运算符类</td>\n        <td>+ - </td>\n        <td>从左至右</td>\n    </tr>\n    <tr>\n        <td>关系运算符类</td>\n        <td>< > <= >= == ~=</td>\n        <td>从左至右</td>\n    </tr>\n    <tr>\n        <td>等于运算符类</td>\n        <td>== ~=</td>\n        <td>从左至右</td>\n    </tr>\n    <tr>\n        <td>逻辑与运算符</td>\n        <td>and</td>\n        <td>从左至右</td>\n    </tr>\n    <tr>\n        <td>逻辑或运算符</td>\n        <td>or</td>\n        <td>从左至右</td>\n    </tr>\n\n</table>","text":"操作符操作符是用于告诉解释器执行特定的数学或逻辑运算的符号。Lua 语言有丰富的内置操作符，主要包括以下几类： 算术运算操作符 关系运算操作符 逻辑运算操作符 其它操作符 这篇教程将会依次介绍以上四类操作符。 算术去处操作符下面的表中列出了所有 Lua 语言支持的算术运算操作符。...","link":"","photos":[],"count_time":{"symbolsCount":"2.4k","symbolsTime":"2 mins."},"categories":[{"name":"lua_guide","slug":"lua-guide","count":68,"path":"api/categories/lua-guide.json"}],"tags":[{"name":"lua","slug":"lua","count":153,"path":"api/tags/lua.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%93%8D%E4%BD%9C%E7%AC%A6\"><span class=\"toc-text\">操作符</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%AE%97%E6%9C%AF%E5%8E%BB%E5%A4%84%E6%93%8D%E4%BD%9C%E7%AC%A6\"><span class=\"toc-text\">算术去处操作符</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%85%B3%E7%B3%BB%E8%BF%90%E7%AE%97%E7%AC%A6\"><span class=\"toc-text\">关系运算符</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%80%BB%E8%BE%91%E8%BF%90%E7%AE%97%E7%AC%A6\"><span class=\"toc-text\">逻辑运算符</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%85%B6%E5%AE%83%E6%93%8D%E4%BD%9C%E7%AC%A6\"><span class=\"toc-text\">其它操作符</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%93%8D%E4%BD%9C%E7%AC%A6%E4%BC%98%E5%85%88%E7%BA%A7\"><span class=\"toc-text\">操作符优先级</span></a></li></ol></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Lua循环嵌套","uid":"cce4b5e763b43300a4fad206fcb6b9e4","slug":"lua/2016-06-01-nested-loop","date":"2024-03-14T06:15:59.725Z","updated":"2024-03-14T06:15:59.725Z","comments":true,"path":"api/articles/lua/2016-06-01-nested-loop.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":null,"text":"#Lua 循环嵌套 Lua 编程语言允许使用循环嵌套。接下来这一节中将用例子来说嵌套循环的使用方法： ##语法 for 循环嵌套的语法如下： 1234567891011for init,max/min value, incrementdo for init,max/min val...","link":"","photos":[],"count_time":{"symbolsCount":754,"symbolsTime":"1 mins."},"categories":[{"name":"lua_guide","slug":"lua-guide","count":68,"path":"api/categories/lua-guide.json"}],"tags":[{"name":"lua","slug":"lua","count":153,"path":"api/tags/lua.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Lua面向对象","uid":"a1b21463fc87d45dd3b0b4f9d1ff1b21","slug":"lua/2016-06-01-object-oriented","date":"2024-03-14T06:15:59.725Z","updated":"2024-03-14T06:15:59.725Z","comments":true,"path":"api/articles/lua/2016-06-01-object-oriented.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":null,"text":"Lua 面向对象面向对象概述面向对象编程技术是目前最常用的编程技术之一。目前大量的编程语言都支持面向对象的特性： C++ Java Objective-C Smalltalk C# Ruby 面向对象的特征 类（class）：类是可以创建对象，并为状态（成员变量）提供初值及行为实...","link":"","photos":[],"count_time":{"symbolsCount":"3.9k","symbolsTime":"4 mins."},"categories":[{"name":"lua_guide","slug":"lua-guide","count":68,"path":"api/categories/lua-guide.json"}],"tags":[{"name":"lua","slug":"lua","count":153,"path":"api/tags/lua.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}