{"title":"Lua面向对象","uid":"a1b21463fc87d45dd3b0b4f9d1ff1b21","slug":"lua/2016-06-01-object-oriented","date":"2024-03-14T07:45:09.084Z","updated":"2024-03-27T04:22:36.877Z","comments":true,"path":"api/articles/lua/2016-06-01-object-oriented.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<h1 id=\"lua-面向对象\"><a class=\"markdownIt-Anchor\" href=\"#lua-面向对象\"></a> Lua 面向对象</h1>\n<h2 id=\"面向对象概述\"><a class=\"markdownIt-Anchor\" href=\"#面向对象概述\"></a> 面向对象概述</h2>\n<p>面向对象编程技术是目前最常用的编程技术之一。目前大量的编程语言都支持面向对象的特性：</p>\n<ul>\n\t<li>C++</li>\n\t<li>Java</li>\n\t<li>Objective-C</li>\n\t<li>Smalltalk</li>\n\t<li>C#</li>\n\t<li>Ruby</li>\n</ul>\n<h2 id=\"面向对象的特征\"><a class=\"markdownIt-Anchor\" href=\"#面向对象的特征\"></a> 面向对象的特征</h2>\n<ul>\n\t<li>类（class）：类是可以创建对象，并为状态（成员变量）提供初值及行为实现的可扩展模板。</li>\n\t<li>对象（objects）：对象是类的实例，每个对象都有独立的内存区域。</li>\n\t<li>继承（inheritance）：继承用于描述一个类的变量和函数被另一个类继承的行为。</li>\n\t<li>封装（encapsulation）：封装是指将数据和函数组织在一个类中。外部可以通过类的方法访问内中的数据。封装也被称之为数据抽象。</li>\n</ul>\n## Lua 中的面向对象  \n<p>在 Lua 中，我们可以使用表和函数实现面向对象。将函数和相关的数据放置于同一个表中就形成了一个对象。继承可以用元表实现，它提供了在父类中查找存在的方法和变量的机制。<br />\nLua 中的表拥有对象的特征，比如状态和独立于其值的标识。两个有相同值的对象（表）是两个不同的对象，但是一个对象在不同的时间可以拥有不同的值。与对象一样，表拥有独立于其创建者和创建位置的生命周期。</p>\n<h2 id=\"一个真实世界的例子\"><a class=\"markdownIt-Anchor\" href=\"#一个真实世界的例子\"></a> 一个真实世界的例子</h2>\n<p>面向对象已经是一个广泛使用的概念，但是你需要正确清楚地理解它。<br />\n让我们看一个数学方面的例子。我们经常需要处理各种形状，比如圆、矩形、正方形。<br />\n这些形状有一个共同的特征——面积。所以，所有其它的形状都可以从有一个公共特征——面积的基类扩展而来。每个对象都可以有它自己的特征和函数，比如矩阵有属性长、宽和面积，printArea 和 calculateArea 方法。</p>\n<h3 id=\"创建一个简单的类\"><a class=\"markdownIt-Anchor\" href=\"#创建一个简单的类\"></a> 创建一个简单的类</h3>\n<p>下面例子实现了矩阵类的三个属性：面积、长和宽。它还同时实现了输出面积的函数 printArea。</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\"><span class=\"token comment\">-- 元类</span>\nRectangle <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>area <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> length <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> breadth <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">-- 继承类的方法 new</span>\n<span class=\"token keyword\">function</span> Rectangle<span class=\"token punctuation\">:</span><span class=\"token function\">new</span> <span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">,</span>length<span class=\"token punctuation\">,</span>breadth<span class=\"token punctuation\">)</span>\n  o <span class=\"token operator\">=</span> o <span class=\"token keyword\">or</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n  <span class=\"token function\">setmetatable</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span>\n  self<span class=\"token punctuation\">.</span>__index <span class=\"token operator\">=</span> self\n  self<span class=\"token punctuation\">.</span>length <span class=\"token operator\">=</span> length <span class=\"token keyword\">or</span> <span class=\"token number\">0</span>\n  self<span class=\"token punctuation\">.</span>breadth <span class=\"token operator\">=</span> breadth <span class=\"token keyword\">or</span> <span class=\"token number\">0</span>\n  self<span class=\"token punctuation\">.</span>area <span class=\"token operator\">=</span> length<span class=\"token operator\">*</span>breadth<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> o\n<span class=\"token keyword\">end</span>\n\n<span class=\"token comment\">-- 继承类的方法 printArea</span>\n<span class=\"token keyword\">function</span> Rectangle<span class=\"token punctuation\">:</span><span class=\"token function\">printArea</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The area of Rectangle is \"</span><span class=\"token punctuation\">,</span>self<span class=\"token punctuation\">.</span>area<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"创建对象\"><a class=\"markdownIt-Anchor\" href=\"#创建对象\"></a> 创建对象</h3>\n<p>创建对象即是为类的实例分配内存空间的过程。每个对象都有自己独立的内存区域，同时还会共享类的数据。</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">r <span class=\"token operator\">=</span> Rectangle<span class=\"token punctuation\">:</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nil</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"访问属性\"><a class=\"markdownIt-Anchor\" href=\"#访问属性\"></a> 访问属性</h3>\n<p>我们可以使用点操作符访问类中属性。</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\"><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"访问成员方法\"><a class=\"markdownIt-Anchor\" href=\"#访问成员方法\"></a> 访问成员方法</h3>\n<p>使用冒号操作符可以访问对象的成员方法，如下所示：</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">r<span class=\"token punctuation\">:</span><span class=\"token function\">printArea</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>初始化阶段，调用函数为对象分配内存同时设置初值。这与其它与面向对象的语言中的构造器很相似。其实，构造器本身也就和上面的初始化代码一样，并没有什么特别之处。</p>\n<h2 id=\"完整的例子\"><a class=\"markdownIt-Anchor\" href=\"#完整的例子\"></a> 完整的例子</h2>\n<p>让我们一起看一个 Lua 实现面向对象的完整例子。</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\"><span class=\"token comment\">-- 元类</span>\nShape <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>area <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">-- 基类方法 new</span>\n<span class=\"token keyword\">function</span> Shape<span class=\"token punctuation\">:</span><span class=\"token function\">new</span> <span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">,</span>side<span class=\"token punctuation\">)</span>\n  o <span class=\"token operator\">=</span> o <span class=\"token keyword\">or</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n  <span class=\"token function\">setmetatable</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span>\n  self<span class=\"token punctuation\">.</span>__index <span class=\"token operator\">=</span> self\n  side <span class=\"token operator\">=</span> side <span class=\"token keyword\">or</span> <span class=\"token number\">0</span>\n  self<span class=\"token punctuation\">.</span>area <span class=\"token operator\">=</span> side<span class=\"token operator\">*</span>side<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> o\n<span class=\"token keyword\">end</span>\n\n<span class=\"token comment\">-- 基类方法 printArea</span>\n<span class=\"token keyword\">function</span> Shape<span class=\"token punctuation\">:</span><span class=\"token function\">printArea</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The area is \"</span><span class=\"token punctuation\">,</span>self<span class=\"token punctuation\">.</span>area<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span>\n\n<span class=\"token comment\">-- 创建对象</span>\nmyshape <span class=\"token operator\">=</span> Shape<span class=\"token punctuation\">:</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nil</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n\nmyshape<span class=\"token punctuation\">:</span><span class=\"token function\">printArea</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>运行上面的程序，我们可以得到如下的输出结果：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">The area is \t<span class=\"token number\">100</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"lua-中的继承\"><a class=\"markdownIt-Anchor\" href=\"#lua-中的继承\"></a> Lua 中的继承</h3>\n<p>继承就是从基对象扩展的过程，正如从图形扩展至矩形、正方形等等。在现实世界中，常用来共享或扩展某些共同的属性和方法。<br />\n让我们看一个简单的类扩展的例子。我们有如下的类：</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\"> <span class=\"token comment\">-- 元类</span>\nShape <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>area <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">-- 基类方法 new</span>\n<span class=\"token keyword\">function</span> Shape<span class=\"token punctuation\">:</span><span class=\"token function\">new</span> <span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">,</span>side<span class=\"token punctuation\">)</span>\n  o <span class=\"token operator\">=</span> o <span class=\"token keyword\">or</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n  <span class=\"token function\">setmetatable</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span>\n  self<span class=\"token punctuation\">.</span>__index <span class=\"token operator\">=</span> self\n  side <span class=\"token operator\">=</span> side <span class=\"token keyword\">or</span> <span class=\"token number\">0</span>\n  self<span class=\"token punctuation\">.</span>area <span class=\"token operator\">=</span> side<span class=\"token operator\">*</span>side<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> o\n<span class=\"token keyword\">end</span>\n<span class=\"token comment\">-- 基类方法 printArea</span>\n<span class=\"token keyword\">function</span> Shape<span class=\"token punctuation\">:</span><span class=\"token function\">printArea</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The area is \"</span><span class=\"token punctuation\">,</span>self<span class=\"token punctuation\">.</span>area<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>我们从上面的类中扩展出正方形类，如下所示：</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">Square <span class=\"token operator\">=</span> Shape<span class=\"token punctuation\">:</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">-- 继承类方法 new</span>\n<span class=\"token keyword\">function</span> Square<span class=\"token punctuation\">:</span><span class=\"token function\">new</span> <span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">,</span>side<span class=\"token punctuation\">)</span>\n  o <span class=\"token operator\">=</span> o <span class=\"token keyword\">or</span> Shape<span class=\"token punctuation\">:</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">,</span>side<span class=\"token punctuation\">)</span>\n  <span class=\"token function\">setmetatable</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span>\n  self<span class=\"token punctuation\">.</span>__index <span class=\"token operator\">=</span> self\n  <span class=\"token keyword\">return</span> o\n<span class=\"token keyword\">end</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"重写基类的函数\"><a class=\"markdownIt-Anchor\" href=\"#重写基类的函数\"></a> 重写基类的函数</h3>\n<p>继承类可以重写基类的方法，从而根据自己的实际情况实现功能。示例代码如下所示：</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\"><span class=\"token comment\">-- 继承方法 printArea</span>\n<span class=\"token keyword\">function</span> Square<span class=\"token punctuation\">:</span><span class=\"token function\">printArea</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The area of square is \"</span><span class=\"token punctuation\">,</span>self<span class=\"token punctuation\">.</span>area<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"继承的完整示例\"><a class=\"markdownIt-Anchor\" href=\"#继承的完整示例\"></a> 继承的完整示例</h2>\n<p>在元表的帮助下，我们可以使用新的 new 方法实现类的扩展（继承）。子类中保存了所有基类的成员变量和方法。</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\"> <span class=\"token comment\">-- Meta class</span>\nShape <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>area <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">-- Base class method new</span>\n<span class=\"token keyword\">function</span> Shape<span class=\"token punctuation\">:</span><span class=\"token function\">new</span> <span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">,</span>side<span class=\"token punctuation\">)</span>\n  o <span class=\"token operator\">=</span> o <span class=\"token keyword\">or</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n  <span class=\"token function\">setmetatable</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span>\n  self<span class=\"token punctuation\">.</span>__index <span class=\"token operator\">=</span> self\n  side <span class=\"token operator\">=</span> side <span class=\"token keyword\">or</span> <span class=\"token number\">0</span>\n  self<span class=\"token punctuation\">.</span>area <span class=\"token operator\">=</span> side<span class=\"token operator\">*</span>side<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> o\n<span class=\"token keyword\">end</span>\n<span class=\"token comment\">-- Base class method printArea</span>\n<span class=\"token keyword\">function</span> Shape<span class=\"token punctuation\">:</span><span class=\"token function\">printArea</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The area is \"</span><span class=\"token punctuation\">,</span>self<span class=\"token punctuation\">.</span>area<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span>\n\n<span class=\"token comment\">-- Creating an object</span>\nmyshape <span class=\"token operator\">=</span> Shape<span class=\"token punctuation\">:</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nil</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\nmyshape<span class=\"token punctuation\">:</span><span class=\"token function\">printArea</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nSquare <span class=\"token operator\">=</span> Shape<span class=\"token punctuation\">:</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">-- Derived class method new</span>\n<span class=\"token keyword\">function</span> Square<span class=\"token punctuation\">:</span><span class=\"token function\">new</span> <span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">,</span>side<span class=\"token punctuation\">)</span>\n  o <span class=\"token operator\">=</span> o <span class=\"token keyword\">or</span> Shape<span class=\"token punctuation\">:</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">,</span>side<span class=\"token punctuation\">)</span>\n  <span class=\"token function\">setmetatable</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span>\n  self<span class=\"token punctuation\">.</span>__index <span class=\"token operator\">=</span> self\n  <span class=\"token keyword\">return</span> o\n<span class=\"token keyword\">end</span>\n\n<span class=\"token comment\">-- Derived class method printArea</span>\n<span class=\"token keyword\">function</span> Square<span class=\"token punctuation\">:</span><span class=\"token function\">printArea</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The area of square is \"</span><span class=\"token punctuation\">,</span>self<span class=\"token punctuation\">.</span>area<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span>\n\n<span class=\"token comment\">-- Creating an object</span>\nmysquare <span class=\"token operator\">=</span> Square<span class=\"token punctuation\">:</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nil</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\nmysquare<span class=\"token punctuation\">:</span><span class=\"token function\">printArea</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nRectangle <span class=\"token operator\">=</span> Shape<span class=\"token punctuation\">:</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">-- Derived class method new</span>\n<span class=\"token keyword\">function</span> Rectangle<span class=\"token punctuation\">:</span><span class=\"token function\">new</span> <span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">,</span>length<span class=\"token punctuation\">,</span>breadth<span class=\"token punctuation\">)</span>\n  o <span class=\"token operator\">=</span> o <span class=\"token keyword\">or</span> Shape<span class=\"token punctuation\">:</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">)</span>\n  <span class=\"token function\">setmetatable</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span>\n  self<span class=\"token punctuation\">.</span>__index <span class=\"token operator\">=</span> self\n  self<span class=\"token punctuation\">.</span>area <span class=\"token operator\">=</span> length <span class=\"token operator\">*</span> breadth\n  <span class=\"token keyword\">return</span> o\n<span class=\"token keyword\">end</span>\n\n<span class=\"token comment\">-- Derived class method printArea</span>\n<span class=\"token keyword\">function</span> Rectangle<span class=\"token punctuation\">:</span><span class=\"token function\">printArea</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The area of Rectangle is \"</span><span class=\"token punctuation\">,</span>self<span class=\"token punctuation\">.</span>area<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span>\n\n<span class=\"token comment\">-- Creating an object</span>\nmyrectangle <span class=\"token operator\">=</span> Rectangle<span class=\"token punctuation\">:</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nil</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span>\nmyrectangle<span class=\"token punctuation\">:</span><span class=\"token function\">printArea</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>运行上面的程序，我们可以得到如下的输出结果：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">The area is \t<span class=\"token number\">100</span>\nThe area of square is \t<span class=\"token number\">100</span>\nThe area of Rectangle is \t<span class=\"token number\">200</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>上面的例子中，我们继承基类 Shape 创建了两个子类 Rectange 与 Square。在子类中可以重写基类提供的方法。在这个例子中，子类重写了 printArea 方法。</p>\n","text":" Lua 面向对象 面向对象概述 面向对象编程技术是目前最常用的编程技术之一。目前大量的编程语言都支持面向对象的特性： C++ Java Objective-C Smalltalk C# Ruby 面向对象的特征 类（class）：类是可以创建对象，并为状态（成员变量）提供初值及...","link":"","photos":[],"count_time":{"symbolsCount":"3.9k","symbolsTime":"4 mins."},"categories":[{"name":"lua_guide","slug":"lua-guide","count":34,"path":"api/categories/lua-guide.json"}],"tags":[{"name":"lua","slug":"lua","count":124,"path":"api/tags/lua.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#lua-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\"> Lua 面向对象</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E6%A6%82%E8%BF%B0\"><span class=\"toc-text\"> 面向对象概述</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%89%B9%E5%BE%81\"><span class=\"toc-text\"> 面向对象的特征</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%80%E4%B8%AA%E7%9C%9F%E5%AE%9E%E4%B8%96%E7%95%8C%E7%9A%84%E4%BE%8B%E5%AD%90\"><span class=\"toc-text\"> 一个真实世界的例子</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E7%B1%BB\"><span class=\"toc-text\"> 创建一个简单的类</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\"> 创建对象</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%AE%BF%E9%97%AE%E5%B1%9E%E6%80%A7\"><span class=\"toc-text\"> 访问属性</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%AE%BF%E9%97%AE%E6%88%90%E5%91%98%E6%96%B9%E6%B3%95\"><span class=\"toc-text\"> 访问成员方法</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AE%8C%E6%95%B4%E7%9A%84%E4%BE%8B%E5%AD%90\"><span class=\"toc-text\"> 完整的例子</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#lua-%E4%B8%AD%E7%9A%84%E7%BB%A7%E6%89%BF\"><span class=\"toc-text\"> Lua 中的继承</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%87%8D%E5%86%99%E5%9F%BA%E7%B1%BB%E7%9A%84%E5%87%BD%E6%95%B0\"><span class=\"toc-text\"> 重写基类的函数</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%BB%A7%E6%89%BF%E7%9A%84%E5%AE%8C%E6%95%B4%E7%A4%BA%E4%BE%8B\"><span class=\"toc-text\"> 继承的完整示例</span></a></li></ol></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Lua循环嵌套","uid":"cce4b5e763b43300a4fad206fcb6b9e4","slug":"lua/2016-06-01-nested-loop","date":"2024-03-14T07:45:09.084Z","updated":"2024-03-27T03:22:46.541Z","comments":true,"path":"api/articles/lua/2016-06-01-nested-loop.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"#Lua 循环嵌套 Lua 编程语言允许使用循环嵌套。接下来这一节中将用例子来说嵌套循环的使用方法： 语法 for 循环嵌套的语法如下： for init,max/min value, increment do for init,max/min value, increment ...","link":"","photos":[],"count_time":{"symbolsCount":722,"symbolsTime":"1 mins."},"categories":[{"name":"lua_guide","slug":"lua-guide","count":34,"path":"api/categories/lua-guide.json"}],"tags":[{"name":"lua","slug":"lua","count":124,"path":"api/tags/lua.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"","uid":"f73a8e23e6f6f669cf99c7dba8fa0722","slug":"lua/2016-06-01-Home","date":"2024-03-14T07:45:09.083Z","updated":"2024-03-14T07:45:09.084Z","comments":true,"path":"api/articles/lua/2016-06-01-Home.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"Lua基础教程 permalink: /lua_guide/Home/ ","link":"","photos":[],"count_time":{"symbolsCount":36,"symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}