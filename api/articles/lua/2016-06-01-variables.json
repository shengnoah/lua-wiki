{"title":"Lua的变量","uid":"00031c756df5944ae03766354a37e479","slug":"lua/2016-06-01-variables","date":"2024-03-14T07:45:09.089Z","updated":"2024-03-27T04:03:54.470Z","comments":true,"path":"api/articles/lua/2016-06-01-variables.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<h1 id=\"变量\"><a class=\"markdownIt-Anchor\" href=\"#变量\"></a> 变量</h1>\n<p>变量就是给一块内存区域赋予的一个名字。变量使得在程序中就可以修改或读取相应的内存区域中的内容。它可以代表各种不同类型的值，包括函数与表。</p>\n<p>变量的名字由字母、数字与下划线组成。它必须是字母或下划线开头。由于 Lua 是字母大小写敏感的，所以大写字母与小写字母是不一样的。Lua 中有八种基本值类型：</p>\n<p>在 Lua 语言中，虽然我们没有变量数据类型，但是依据变量的作用域我们可以将变量分为三类：</p>\n<ul>\n\t<li>全局变量：除非显示的声明一个局部变量，否则所有的变量都被默认当作全局变量。</li>\n\t<li>局部变量：如果我们将一个变量定义为局部变量，那么这么变量的作用域就被限制在函数内。</li>\n\t<li>表字段：这种特殊的变量可以是除了 nil 以外的所有类型，包括函数。</li>\n</ul>\n<h2 id=\"lua-变量定义\"><a class=\"markdownIt-Anchor\" href=\"#lua-变量定义\"></a> Lua 变量定义</h2>\n<p>一个变量定义就意味着告诉解释器在什么地方创建多大的一块存储空间。一个变量定义包括一个可选的类型( type )以及该类型的一个或多个变量名的列表，如下所示：</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">type variable_list<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>其中，type 是可以选择指定为 local 或者不指定使用默认值 global，variable_list 是包含一个或多个由逗号分隔的标识符名字。下面是合法变量定义的示例：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">local</span>    i, j\n<span class=\"token builtin class-name\">local</span>    i\n<span class=\"token builtin class-name\">local</span>    a,c<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>local i,j 声明定义了两个变量 i 与 j；它命令解释器创建两个名称分别为 i,j 的变量，并且将其作用域限制在局部。</p>\n<p>在声明变量的时候可以同时初始化变量（为变量赋初值）。在变量名后跟上等号和一个常量表达式就可以初始化变量。如下所示：</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">type variable_list <span class=\"token operator\">=</span> value_list<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>一些例子如下：</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\"><span class=\"token keyword\">local</span> d <span class=\"token punctuation\">,</span> f <span class=\"token operator\">=</span> <span class=\"token number\">5</span> <span class=\"token punctuation\">,</span><span class=\"token number\">10</span> <span class=\"token comment\">--声明局部变量 d，f。 </span>\nd <span class=\"token punctuation\">,</span> f <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">--声明全局变量 d，f。 </span>\nd<span class=\"token punctuation\">,</span> f <span class=\"token operator\">=</span> <span class=\"token number\">10</span>           <span class=\"token comment\">--[[声明全局变量 d，f，其中 f 的值是 nil--]]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>如果只是定义没有初始化，则静态存储变量被隐式初始化为 nil。</p>\n<h2 id=\"lua-变量声明\"><a class=\"markdownIt-Anchor\" href=\"#lua-变量声明\"></a> Lua 变量声明</h2>\n<p>正如在上面例子看到的那样，为多个变量赋值就是在变量列表后跟上值列表。例子 local d，f = 5，10 中,变量列表是 d，f，值列表是 5，10。</p>\n<p>Lua 赋值时会将第一个值赋给第一个变量，第二个值赋给第二个变量，依次类推。所以，d 的值是 5,f 的值是 10。</p>\n<h2 id=\"示例\"><a class=\"markdownIt-Anchor\" href=\"#示例\"></a> 示例</h2>\n<p>下面的示例中，变量被声明在顶部，但是它们在主函数中定义和初始化:</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\"><span class=\"token comment\">-- 变量定义:</span>\n<span class=\"token keyword\">local</span> a<span class=\"token punctuation\">,</span> b\n<span class=\"token comment\">-- 初始化</span>\na <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\nb <span class=\"token operator\">=</span> <span class=\"token number\">30</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"value of a:\"</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"value of b:\"</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">-- 交换变量的值</span>\nb<span class=\"token punctuation\">,</span> a <span class=\"token operator\">=</span> a<span class=\"token punctuation\">,</span> b\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"value of a:\"</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"value of b:\"</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span>\nf <span class=\"token operator\">=</span> <span class=\"token number\">70.0</span><span class=\"token operator\">/</span><span class=\"token number\">3.0</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"value of f\"</span><span class=\"token punctuation\">,</span> f<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>上面的代码被编译生成和执行后，会产生如下的结果：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">value of a:\t<span class=\"token number\">10</span>\nvalue of b:\t<span class=\"token number\">30</span>\nvalue of a:\t<span class=\"token number\">30</span>\nvalue of b:\t<span class=\"token number\">10</span>\nvalue of f\t<span class=\"token number\">23.333333333333</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"lua-中的左值与右值\"><a class=\"markdownIt-Anchor\" href=\"#lua-中的左值与右值\"></a> Lua 中的左值与右值</h2>\n<p>Lua　中有两种表达式：</p>\n<ul>\n\t<li>左值：引用内存位置的表达式被称之为左值表达式。左值表达式既可以出现在赋值符号的左边也可以出现在赋值符号的右边。</li>\n\t<li>右值：术语“右值”指存在内存某个位置的数据值。我们不能为右值表达式赋值，也就是说右值表达式只可能出现在赋值符号的右边，而不可能出现在赋值符号的左边。</li>\n</ul>\n变量属于左值表达式，所以它可以现在赋值符号的左边。数值常量属于右值表达式，它不能被赋值也不能出现在赋值符号的左边。下面是合法的语句：  \n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">g <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>但是，下面的语句是非法的，它会产生生成时错误：</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\"><span class=\"token number\">10</span> <span class=\"token operator\">=</span> <span class=\"token number\">20</span> <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>在 Lua 语言中，除了上面讲的这种赋值，还允许在一个赋值语句中存在多个左值表达式与多个右值表达式。如下所示：</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">g<span class=\"token punctuation\">,</span>l <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">30</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>在这个语句中，g 被赋值为 20，l 被赋值为 30。</p>\n","text":" 变量 变量就是给一块内存区域赋予的一个名字。变量使得在程序中就可以修改或读取相应的内存区域中的内容。它可以代表各种不同类型的值，包括函数与表。 变量的名字由字母、数字与下划线组成。它必须是字母或下划线开头。由于 Lua 是字母大小写敏感的，所以大写字母与小写字母是不一样的。Lu...","link":"","photos":[],"count_time":{"symbolsCount":"1.7k","symbolsTime":"2 mins."},"categories":[{"name":"lua_guide","slug":"lua-guide","count":34,"path":"api/categories/lua-guide.json"},{"name":"LUA教程","slug":"lua-guide/LUA教程","count":2,"path":"api/categories/lua-guide/LUA教程.json"}],"tags":[{"name":"LUA教程","slug":"LUA教程","count":4,"path":"api/tags/LUA教程.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%8F%98%E9%87%8F\"><span class=\"toc-text\"> 变量</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#lua-%E5%8F%98%E9%87%8F%E5%AE%9A%E4%B9%89\"><span class=\"toc-text\"> Lua 变量定义</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#lua-%E5%8F%98%E9%87%8F%E5%A3%B0%E6%98%8E\"><span class=\"toc-text\"> Lua 变量声明</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B\"><span class=\"toc-text\"> 示例</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#lua-%E4%B8%AD%E7%9A%84%E5%B7%A6%E5%80%BC%E4%B8%8E%E5%8F%B3%E5%80%BC\"><span class=\"toc-text\"> Lua 中的左值与右值</span></a></li></ol></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Lua字符串","uid":"cedbdf206a63ba0896535fb39f386996","slug":"lua/2016-06-01-strings","date":"2024-03-14T07:45:09.089Z","updated":"2024-03-27T04:02:38.632Z","comments":true,"path":"api/articles/lua/2016-06-01-strings.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":" Lua 字符串 字符串就是一个由字符或控制字符组成的序列。字符串可以用以下三种方式任意一种进行初始化。 单引号字符串 双引号字符串 [[和]]之间的字符串 上面三种初始化方式的示例如下： string1 = \"Lua\" print(\"\\\"String 1 is\\\"\",strin...","link":"","photos":[],"count_time":{"symbolsCount":"3.1k","symbolsTime":"3 mins."},"categories":[{"name":"lua_guide","slug":"lua-guide","count":34,"path":"api/categories/lua-guide.json"}],"tags":[{"name":"lua","slug":"lua","count":124,"path":"api/tags/lua.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"2016-06-01-TOC","uid":"d774f91f96abd1bb1c7fd97a15cf6621","slug":"lua/2016-06-01-TOC","date":"2024-03-14T07:45:09.088Z","updated":"2024-03-14T07:45:09.088Z","comments":true,"path":"api/articles/lua/2016-06-01-TOC.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":" 2016-06-01-TOC lua 基础 概述 permalink: /lua_guide/TOC/ 运行环境 基本语法 变量 日期类型 操作符 循环 决策 函数 字符串 数组 迭代器 表 模块 元表 协程 文件 I/O 错误处理 lua 进阶 调试 垃圾回收机制 面向对象 ...","link":"","photos":[],"count_time":{"symbolsCount":170,"symbolsTime":"1 mins."},"categories":[{"name":"教程","slug":"教程","count":1,"path":"api/categories/教程.json"}],"tags":[{"name":"lua","slug":"lua","count":124,"path":"api/tags/lua.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}