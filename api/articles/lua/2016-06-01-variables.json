{"title":"Lua的变量","uid":"00031c756df5944ae03766354a37e479","slug":"lua/2016-06-01-variables","date":"2024-03-14T06:15:59.726Z","updated":"2024-03-14T06:15:59.726Z","comments":true,"path":"api/articles/lua/2016-06-01-variables.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":null,"content":"<h1 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h1><p>变量就是给一块内存区域赋予的一个名字。变量使得在程序中就可以修改或读取相应的内存区域中的内容。它可以代表各种不同类型的值，包括函数与表。 </p>\n<p>变量的名字由字母、数字与下划线组成。它必须是字母或下划线开头。由于 Lua 是字母大小写敏感的，所以大写字母与小写字母是不一样的。Lua 中有八种基本值类型： </p>\n<p>在 Lua 语言中，虽然我们没有变量数据类型，但是依据变量的作用域我们可以将变量分为三类： </p>\n<ul>\n    <li>全局变量：除非显示的声明一个局部变量，否则所有的变量都被默认当作全局变量。</li>\n    <li>局部变量：如果我们将一个变量定义为局部变量，那么这么变量的作用域就被限制在函数内。</li>\n    <li>表字段：这种特殊的变量可以是除了 nil 以外的所有类型，包括函数。</li>\n</ul>\n\n<h2 id=\"Lua-变量定义\"><a href=\"#Lua-变量定义\" class=\"headerlink\" title=\"Lua 变量定义\"></a>Lua 变量定义</h2><p>一个变量定义就意味着告诉解释器在什么地方创建多大的一块存储空间。一个变量定义包括一个可选的类型( type )以及该类型的一个或多个变量名的列表，如下所示：  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type variable_list;</span><br><span class=\"line\">```  </span><br><span class=\"line\"></span><br><span class=\"line\">其中，type 是可以选择指定为 local 或者不指定使用默认值 global，variable_list 是包含一个或多个由逗号分隔的标识符名字。下面是合法变量定义的示例：  </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>local    i, j<br>local    i<br>local    a,c</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">local i,j 声明定义了两个变量 i 与 j；它命令解释器创建两个名称分别为 i,j 的变量，并且将其作用域限制在局部。 </span><br><span class=\"line\"> </span><br><span class=\"line\">在声明变量的时候可以同时初始化变量（为变量赋初值）。在变量名后跟上等号和一个常量表达式就可以初始化变量。如下所示：  </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>type variable_list = value_list;</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">一些例子如下：  </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>local d , f = 5 ,10 –声明局部变量 d，f。<br>d , f = 5, 10;      –声明全局变量 d，f。<br>d, f = 10           –[[声明全局变量 d，f，其中 f 的值是 nil–]]</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">如果只是定义没有初始化，则静态存储变量被隐式初始化为 nil。  </span><br><span class=\"line\"></span><br><span class=\"line\">## Lua 变量声明  </span><br><span class=\"line\"></span><br><span class=\"line\">正如在上面例子看到的那样，为多个变量赋值就是在变量列表后跟上值列表。例子 local d，f = 5，10 中,变量列表是 d，f，值列表是 5，10。 </span><br><span class=\"line\"> </span><br><span class=\"line\">Lua 赋值时会将第一个值赋给第一个变量，第二个值赋给第二个变量，依次类推。所以，d 的值是 5,f 的值是 10。  </span><br><span class=\"line\"></span><br><span class=\"line\">## 示例  </span><br><span class=\"line\"></span><br><span class=\"line\">下面的示例中，变量被声明在顶部，但是它们在主函数中定义和初始化:  </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>– 变量定义:<br>local a, b<br>– 初始化<br>a = 10<br>b = 30<br>print(“value of a:”, a)<br>print(“value of b:”, b)<br>– 交换变量的值<br>b, a = a, b<br>print(“value of a:”, a)<br>print(“value of b:”, b)<br>f = 70.0/3.0<br>print(“value of f”, f)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">上面的代码被编译生成和执行后，会产生如下的结果：  </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>value of a:    10<br>value of b:    30<br>value of a:    30<br>value of b:    10<br>value of f    23.333333333333</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">## Lua 中的左值与右值  </span><br><span class=\"line\"></span><br><span class=\"line\">Lua　中有两种表达式：  </span><br><span class=\"line\">&lt;ul&gt;</span><br><span class=\"line\">\t&lt;li&gt;左值：引用内存位置的表达式被称之为左值表达式。左值表达式既可以出现在赋值符号的左边也可以出现在赋值符号的右边。&lt;/li&gt;</span><br><span class=\"line\">\t&lt;li&gt;右值：术语“右值”指存在内存某个位置的数据值。我们不能为右值表达式赋值，也就是说右值表达式只可能出现在赋值符号的右边，而不可能出现在赋值符号的左边。&lt;/li&gt;</span><br><span class=\"line\">&lt;/ul&gt;</span><br><span class=\"line\">变量属于左值表达式，所以它可以现在赋值符号的左边。数值常量属于右值表达式，它不能被赋值也不能出现在赋值符号的左边。下面是合法的语句：  </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>g = 20</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">但是，下面的语句是非法的，它会产生生成时错误：  </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>10 = 20 </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">在 Lua 语言中，除了上面讲的这种赋值，还允许在一个赋值语句中存在多个左值表达式与多个右值表达式。如下所示：  </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>g,l = 20,30</p>\n<pre><code>\n在这个语句中，g 被赋值为 20，l 被赋值为 30。\n</code></pre>\n","text":"变量变量就是给一块内存区域赋予的一个名字。变量使得在程序中就可以修改或读取相应的内存区域中的内容。它可以代表各种不同类型的值，包括函数与表。 变量的名字由字母、数字与下划线组成。它必须是字母或下划线开头。由于 Lua 是字母大小写敏感的，所以大写字母与小写字母是不一样的。Lua ...","link":"","photos":[],"count_time":{"symbolsCount":"1.9k","symbolsTime":"2 mins."},"categories":[{"name":"lua_guide","slug":"lua-guide","count":68,"path":"api/categories/lua-guide.json"},{"name":"LUA教程","slug":"lua-guide/LUA教程","count":4,"path":"api/categories/lua-guide/LUA教程.json"}],"tags":[{"name":"LUA教程","slug":"LUA教程","count":8,"path":"api/tags/LUA教程.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%8F%98%E9%87%8F\"><span class=\"toc-text\">变量</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Lua-%E5%8F%98%E9%87%8F%E5%AE%9A%E4%B9%89\"><span class=\"toc-text\">Lua 变量定义</span></a></li></ol></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Lua标准库","uid":"fa374b256846497ad36372533ba9888a","slug":"lua/2016-06-01-standard-libraries","date":"2024-03-14T06:15:59.726Z","updated":"2024-03-14T06:15:59.726Z","comments":true,"path":"api/articles/lua/2016-06-01-standard-libraries.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":null,"text":"Lua 标准库Lua 标准库利用 C 语言 API 实现并提供了丰富的函数，它们内置于 Lua 语言中。该标准库不仅可以提供 Lua 语言内服务，还能提供外部服务，比如文件或数据库的操作。 这些标准库使用标准的 C API 接口实现，它们作为独立的 C 语言模块提供给使用者。主要...","link":"","photos":[],"count_time":{"symbolsCount":"2.8k","symbolsTime":"3 mins."},"categories":[{"name":"lua_guide","slug":"lua-guide","count":68,"path":"api/categories/lua-guide.json"}],"tags":[{"name":"lua","slug":"lua","count":153,"path":"api/tags/lua.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Lua的while循环","uid":"7132dce4b61373adb37dd9650b6cc624","slug":"lua/2016-06-01-while","date":"2024-03-14T06:15:59.726Z","updated":"2024-03-14T06:15:59.726Z","comments":true,"path":"api/articles/lua/2016-06-01-while.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":null,"text":"#Lua while 循环 在 Lua 语言中，只要 while 循环条件为真，while 语句就会一直执行，直到 while 循环条件为假为止。 #语法 Lua 语言中 while 循环的语法如下所示： 1234567891011121314151617while(condit...","link":"","photos":[],"count_time":{"symbolsCount":656,"symbolsTime":"1 mins."},"categories":[{"name":"lua_guide","slug":"lua-guide","count":68,"path":"api/categories/lua-guide.json"},{"name":"LUA教程","slug":"lua-guide/LUA教程","count":4,"path":"api/categories/lua-guide/LUA教程.json"}],"tags":[{"name":"LUA教程","slug":"LUA教程","count":8,"path":"api/tags/LUA教程.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}