{"title":"mac m1安装pyaudio","uid":"76f43e596a4b0521c7e8a04facad5994","slug":"python/mac m1安装pyaudio","date":"2024-03-14T07:45:09.040Z","updated":"2024-03-14T07:45:09.040Z","comments":true,"path":"api/articles/python/mac m1安装pyaudio.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<h1 id=\"mac-m1安装pyaudio\"><a class=\"markdownIt-Anchor\" href=\"#mac-m1安装pyaudio\"></a> mac m1安装pyaudio</h1>\n<p>下面这个问题什么原因，如何解决<br />\nDEPRECATION: --build-option and --global-option are deprecated. pip 24.0 will enforce this behaviour change. A possible replacement is to use --config-settings. Discussion can</p>\n<p>be found at <a href=\"https://github.com/pypa/pip/issues/11859\">https://github.com/pypa/pip/issues/11859</a></p>\n<p>WARNING: Implying --no-binary=:all: due to the presence of --build-option / --global-option.</p>\n<p>这个问题的原因是，–build-option 和 --global-option 这两个参数在 pip 24.0 版本中被弃用，并且在未来版本中将不再被支持。pip 建议使用 --config-settings 参数作为替代方案。这个问题的讨论可以在 <a href=\"https://github.com/pypa/pip/issues/11859\">https://github.com/pypa/pip/issues/11859</a> 找到。</p>\n<p>要解决这个问题，你可以尝试使用 --config-settings 参数来替代 --build-option 和 --global-option 参数。例如，你可以将原来的命令：</p>\n<p>pip install package_name --build-option=some_option</p>\n<p>替换为：</p>\n<p>pip install package_name --config-settings=some_option</p>\n<p>这样就可以避免出现警告信息并继续正常安装包。请注意，具体的解决方法可能会因你的实际情况而有所不同，建议参考相关讨论和文档以获得更准确的解决方案。</p>\n<p>WARNING: Implying --no-binary=:all: due to the presence of --build-option / --global-option.这句话什么意思</p>\n<p>这句话的意思是警告存在 --build-option / --global-option，因此暗示使用 --no-binary=:all:。</p>\n<p>如何将这里的python3 -m pip install pyaudio --global-option=“build_ext” --global-option=“-I/opt/homebrew/include” --global-option=“-L/opt/homebrew/lib”   中的–global-option  --build-option 换成 --no-binary=:all的形式</p>\n<p>要将–global-option和–build-option换成–no-binary=:all的形式，可以按照以下步骤进行：</p>\n<ol>\n<li class=\"lvl-3\">\n<p>将原始命令中的–global-option和–build-option删除。</p>\n</li>\n<li class=\"lvl-3\">\n<p>在pip install命令后添加–no-binary=:all。</p>\n</li>\n</ol>\n<p>最终的命令如下所示：</p>\n<p>python3 -m pip install pyaudio --no-binary=:all -I/opt/homebrew/include -L/opt/homebrew/lib</p>\n<p>如何在pip的安装过程中指定include 和lib目录</p>\n<p>在pip的安装过程中，可以通过使用<code>--global-option</code>参数来指定include和lib目录。</p>\n<p>例如，假设你想将include目录设置为<code>/usr/local/include</code>，lib目录设置为<code>/usr/local/lib</code>，你可以使用以下命令：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">pip install package_name --global-option&#x3D;build_ext --global-option&#x3D;&quot;-I&#x2F;usr&#x2F;local&#x2F;include&quot; --global-option&#x3D;&quot;-L&#x2F;usr&#x2F;local&#x2F;lib&quot;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>这将在安装package_name时将include目录设置为<code>/usr/local/include</code>，lib目录设置为<code>/usr/local/lib</code>。</p>\n<p>请注意，这些选项只适用于需要编译源代码的包。对于纯Python包，这些选项不会生效。<br />\ntorchaudio与pyaudio有什么区别</p>\n<p>Torchaudio和Pyaudio是两个用于音频处理的Python库，它们有以下区别：</p>\n<ol>\n<li class=\"lvl-3\">\n<p>Torchaudio是PyTorch生态系统中的一个模块，专注于音频数据的处理和转换。它提供了一系列用于加载、转换和操作音频数据的功能，以及用于音频特征提取和预处理的工具。而Pyaudio则是一个通用的音频处理库，可以进行录制、播放和处理音频数据。</p>\n</li>\n<li class=\"lvl-3\">\n<p>Torchaudio使用PyTorch张量作为其主要数据结构，这使得它与其他PyTorch模块（如torch.nn）无缝集成，并且可以利用GPU加速。相比之下，Pyaudio主要使用NumPy数组来表示音频数据。</p>\n</li>\n<li class=\"lvl-3\">\n<p>Torchaudio提供了一些高级功能，如语音识别（ASR）模型和声纹识别模型等预训练模型。这些模型可以直接在Torchaudio中使用，并且兼容PyTorch的训练和推理流程。而Pyaudio主要关注基本的录制、播放和处理功能，并没有内置的机器学习模型。</p>\n</li>\n<li class=\"lvl-3\">\n<p>由于Torchaudio是基于PyTorch构建的，因此它可以利用PyTorch强大的计算图和自动求导功能。这使得在使用Torchaudio进行音频信号处理时更容易实现复杂的操作和算法。</p>\n</li>\n</ol>\n<p>综上所述，Torchaudio更适合与PyTorch一起使用，用于音频数据的处理、特征提取和深度学习等任务。而Pyaudio则更适合基本的音频录制、播放和处理需求。</p>\n<p>boost和boost-python这两个软件是做什么的，作用是什么</p>\n<p>Boost是一个开源的C<ins>库集合，提供了许多通用的编程工具和数据结构，可以提高C</ins>程序的效率和可移植性。</p>\n<p>boost-python是Boost库中的一个模块，它提供了一组工具和类，用于将C++代码连接到Python解释器中。它允许开发人员在Python中使用Boost库中的功能，并且可以方便地在两种语言之间进行数据交换和函数调用。</p>\n<p>boost-python的作用是使开发人员能够更方便地将C<ins>代码集成到Python项目中，并利用C</ins>的高性能和庞大的库生态系统来加速Python应用程序的执行。</p>\n<p>下面是最有可能安装成功的安装方式。</p>\n<h3 id=\"pyaudio安装\"><a class=\"markdownIt-Anchor\" href=\"#pyaudio安装\"></a> pyaudio安装</h3>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">brew install boost \nbrew install boost<span class=\"token operator\">-</span>python\nbrew install portaudio\nbrew link portaudio<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">python <span class=\"token operator\">-</span>m pip install <span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token keyword\">global</span><span class=\"token operator\">-</span>option<span class=\"token operator\">=</span><span class=\"token string\">'build_ext'</span> <span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token keyword\">global</span><span class=\"token operator\">-</span>option<span class=\"token operator\">=</span><span class=\"token string\">'-I/opt/homebrew/Cellar/portaudio/19.7.0/include'</span> <span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token keyword\">global</span><span class=\"token operator\">-</span>option<span class=\"token operator\">=</span><span class=\"token string\">'-L/opt/homebrew/Cellar/portaudio/19.7.0/lib'</span> pyaudio<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>写一段pyaudio的python使用代码</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pyaudio\n<span class=\"token keyword\">import</span> wave<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h1 id=\"定义音频参数\"><a class=\"markdownIt-Anchor\" href=\"#定义音频参数\"></a> 定义音频参数</h1>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">CHUNK <span class=\"token operator\">=</span> <span class=\"token number\">1024</span>\nFORMAT <span class=\"token operator\">=</span> pyaudio<span class=\"token punctuation\">.</span>paInt16\nCHANNELS <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\nRATE <span class=\"token operator\">=</span> <span class=\"token number\">44100</span>\nRECORD_SECONDS <span class=\"token operator\">=</span> <span class=\"token number\">5</span>\nWAVE_OUTPUT_FILENAME <span class=\"token operator\">=</span> <span class=\"token string\">\"output.wav\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h1 id=\"初始化pyaudio对象\"><a class=\"markdownIt-Anchor\" href=\"#初始化pyaudio对象\"></a> 初始化PyAudio对象</h1>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">audio <span class=\"token operator\">=</span> pyaudio<span class=\"token punctuation\">.</span>PyAudio<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h1 id=\"打开音频流\"><a class=\"markdownIt-Anchor\" href=\"#打开音频流\"></a> 打开音频流</h1>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">stream <span class=\"token operator\">=</span> audio<span class=\"token punctuation\">.</span><span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">format</span><span class=\"token operator\">=</span>FORMAT<span class=\"token punctuation\">,</span>\n                    channels<span class=\"token operator\">=</span>CHANNELS<span class=\"token punctuation\">,</span>\n                    rate<span class=\"token operator\">=</span>RATE<span class=\"token punctuation\">,</span>\n                    <span class=\"token builtin\">input</span><span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span>\n                    frames_per_buffer<span class=\"token operator\">=</span>CHUNK<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"开始录音...\"</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">frames <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h1 id=\"录制音频数据\"><a class=\"markdownIt-Anchor\" href=\"#录制音频数据\"></a> 录制音频数据</h1>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>RATE <span class=\"token operator\">/</span> CHUNK <span class=\"token operator\">*</span> RECORD_SECONDS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    data <span class=\"token operator\">=</span> stream<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span>CHUNK<span class=\"token punctuation\">)</span>\n    frames<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"录音结束.\"</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h1 id=\"停止音频流并关闭pyaudio对象\"><a class=\"markdownIt-Anchor\" href=\"#停止音频流并关闭pyaudio对象\"></a> 停止音频流并关闭PyAudio对象</h1>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">stream<span class=\"token punctuation\">.</span>stop_stream<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nstream<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\naudio<span class=\"token punctuation\">.</span>terminate<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h1 id=\"将录制的音频数据写入到wav文件中\"><a class=\"markdownIt-Anchor\" href=\"#将录制的音频数据写入到wav文件中\"></a> 将录制的音频数据写入到WAV文件中</h1>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">wf <span class=\"token operator\">=</span> wave<span class=\"token punctuation\">.</span><span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>WAVE_OUTPUT_FILENAME<span class=\"token punctuation\">,</span> <span class=\"token string\">'wb'</span><span class=\"token punctuation\">)</span>\nwf<span class=\"token punctuation\">.</span>setnchannels<span class=\"token punctuation\">(</span>CHANNELS<span class=\"token punctuation\">)</span>\nwf<span class=\"token punctuation\">.</span>setsampwidth<span class=\"token punctuation\">(</span>audio<span class=\"token punctuation\">.</span>get_sample_size<span class=\"token punctuation\">(</span>FORMAT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nwf<span class=\"token punctuation\">.</span>setframerate<span class=\"token punctuation\">(</span>RATE<span class=\"token punctuation\">)</span>\nwf<span class=\"token punctuation\">.</span>writeframes<span class=\"token punctuation\">(</span><span class=\"token string\">b''</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>frames<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nwf<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>Mac系统安装pyaudio之后，出现了下面的问题，如何进行解决。<br />\nimport pyaudio._portaudio as pa</p>\n<p>ImportError: dlopen(/Users/shengyang1/opt/anaconda3/envs/ppocr_rosetta/lib/python3.9/site-packages/pyaudio/_portaudio.cpython-39-darwin.so, 0x0002): symbol not found in flat n</p>\n<p>amespace ‘_PaMacCore_SetupChannelMap’</p>\n<p>这个问题可能是由于缺少依赖库或者版本不兼容导致的。解决方法如下：</p>\n<ol>\n<li class=\"lvl-3\">\n<p>确保已经安装了最新版的pyaudio：使用命令<code>pip install --upgrade pyaudio</code>来更新pyaudio。</p>\n</li>\n<li class=\"lvl-3\">\n<p>检查是否安装了portaudio依赖库：在终端中运行以下命令来安装portaudio：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">brew <span class=\"token function\">install</span> portaudio<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li class=\"lvl-3\">\n<p>如果已经安装了portaudio，那么可能是版本不兼容导致的问题。尝试使用较旧的portaudio版本来解决问题。可以通过以下命令安装特定版本的portaudio：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">brew <span class=\"token function\">install</span> portaudio@19<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li class=\"lvl-3\">\n<p>如果以上方法都无效，可以尝试使用Anaconda环境中提供的pyaudio版本，以确保依赖库与系统兼容。首先，创建一个新的虚拟环境：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">conda create <span class=\"token parameter variable\">-n</span> new_env <span class=\"token assign-left variable\">python</span><span class=\"token operator\">=</span><span class=\"token number\">3.9</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>然后，激活该环境：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">conda activate new_env<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>最后，在新环境中安装pyaudio：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">pip <span class=\"token function\">install</span> pyaudio<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n</ol>\n<p>如果以上方法都无效，可能需要查找其他解决方案或者考虑使用其他音频处理库。</p>\n<p>用Python写一个PyAudio使用的小例子</p>\n<p>import pyaudio</p>\n<h1 id=\"创建音频流\"><a class=\"markdownIt-Anchor\" href=\"#创建音频流\"></a> 创建音频流</h1>\n<p>p = pyaudio.PyAudio()<br />\nstream = p.open(format=pyaudio.paInt16,<br />\nchannels=1,<br />\nrate=44100,<br />\ninput=True,<br />\nframes_per_buffer=1024)</p>\n<h1 id=\"开始录音\"><a class=\"markdownIt-Anchor\" href=\"#开始录音\"></a> 开始录音</h1>\n<p>print(“开始录音…”)<br />\nframes = []<br />\nfor i in range(0, int(44100 / 1024 * 5)):<br />\ndata = stream.read(1024)<br />\nframes.append(data)</p>\n<h1 id=\"停止录音\"><a class=\"markdownIt-Anchor\" href=\"#停止录音\"></a> 停止录音</h1>\n<p>print(“停止录音…”)<br />\nstream.stop_stream()<br />\nstream.close()<br />\np.terminate()</p>\n<h1 id=\"保存录音文件\"><a class=\"markdownIt-Anchor\" href=\"#保存录音文件\"></a> 保存录音文件</h1>\n<p>wf = wave.open(“output.wav”, “wb”)<br />\nwf.setnchannels(1)<br />\nwf.setsampwidth(p.get_sample_size(pyaudio.paInt16))<br />\nwf.setframerate(44100)<br />\nwf.writeframes(b’'.join(frames))<br />\nwf.close()</p>\n<p>print(“录音文件已保存为output.wav”)</p>\n<p>下面这个问题如何解决mpicc: line 285: x86_64-apple-darwin13.4.0-clang: command not found</p>\n<p>这个问题是由于系统找不到x86_64-apple-darwin13.4.0-clang命令而引起的。要解决这个问题，可以按照以下步骤进行操作：</p>\n<ol>\n<li class=\"lvl-3\">\n<p>确认是否已经安装了Clang编译器。可以在终端中运行<code>clang --version</code>命令来检查。</p>\n</li>\n<li class=\"lvl-3\">\n<p>如果尚未安装Clang编译器，可以通过以下方式之一进行安装：</p>\n<ul class=\"lvl-2\">\n<li class=\"lvl-5\">使用Homebrew包管理器运行<code>brew install llvm</code>命令来安装最新版本的Clang。</li>\n<li class=\"lvl-5\">下载并安装Xcode开发工具套件，其中包含了Clang编译器。</li>\n</ul>\n</li>\n<li class=\"lvl-3\">\n<p>如果已经安装了Clang编译器，请确保其路径已经正确配置。可以在终端中运行<code>which clang</code>命令来查看路径。如果路径不正确，可以通过修改环境变量或者更新系统配置文件来修复。</p>\n</li>\n<li class=\"lvl-3\">\n<p>如果以上步骤都没有解决问题，可能是因为MPI库或mpicc命令没有正确安装或配置。请检查MPI库和mpicc命令是否已正确安装，并且其路径是否正确配置。</p>\n</li>\n</ol>\n<p>通过上述步骤中的一种或多种操作，应该能够解决该问题。如果问题仍然存在，请提供更多详细信息以便进一步分析和帮助解决。</p>\n<p>pip install 时的参数–global-option，在升级之后，变成什么了<br />\n这句话是什么原因造成的 WARNING: Implying --no-binary=:all: due to the presence of --build-option / --global-option. 怎么解决这个问题</p>\n<p>在 pip 升级之后，参数 <code>--global-option</code> 变成了 <code>--options</code>.</p>\n<p>这个警告是由于同时存在 <code>--build-option</code> 或 <code>--global-option</code> 和 <code>--no-binary=:all:</code> 导致的。<code>--no-binary=:all:</code> 是一个选项，用于禁用二进制包的安装。</p>\n<p>要解决这个问题，可以尝试以下方法之一：</p>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>将 <code>--no-binary=:all:</code> 移动到参数列表的末尾。</p>\n</li>\n<li class=\"lvl-2\">\n<p>删除 <code>--build-option</code> 或 <code>--global-option</code> 参数，并将其替换为相应的选项。</p>\n</li>\n<li class=\"lvl-2\">\n<p>更新 pip 到最新版本，并查看是否有更正警告的修复。</p>\n</li>\n</ul>\n<p>python 的_PEP 517, 518是什么意思</p>\n<p>PEP 517和PEP 518是Python Enhancement Proposals（Python增强提案）中的两个提案，分别用于描述构建系统和依赖管理。</p>\n<p>PEP 517描述了一种标准的构建系统接口规范，它定义了构建工具（如pip）与项目构建过程之间的交互方式。该规范使得开发者可以使用不同的构建工具来构建和打包他们的项目，而无需对构建工具有深入了解。这样可以提高项目的可移植性和可扩展性。</p>\n<p>PEP 518则描述了一种标准的依赖管理接口规范，它定义了项目如何声明和安装其依赖项。通过使用该规范，开发者可以将项目所需的依赖项以一种统一且易于管理的方式进行声明，并使得安装这些依赖项变得更加方便。</p>\n<p>综合起来，PEP 517和PEP 518为Python社区提供了一种标准化的方式来处理构建和依赖管理，从而促进了Python生态系统中各个项目之间更加紧密和兼容的合作。</p>\n<p>pip 23在安装包时，如果告诉setup程序，指定程序使用的.h头文件，同时指定.lib的库文件的位置</p>\n<p>在安装包时，可以使用pip 23的setup.py文件来指定程序使用的.h头文件和.lib库文件的位置。在setup.py文件中，可以使用<code>include_dirs</code>参数来指定.h头文件的位置，使用<code>library_dirs</code>参数来指定.lib库文件的位置。</p>\n<p>以下是一个示例的setup.py文件：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> setuptools <span class=\"token keyword\">import</span> setup<span class=\"token punctuation\">,</span> Extension\n\next_modules <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    Extension<span class=\"token punctuation\">(</span><span class=\"token string\">'my_package'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'src/my_module.c'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> include_dirs<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">'path/to/headers'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> library_dirs<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">'path/to/libs'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> libraries<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">'my_lib'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span>\n\nsetup<span class=\"token punctuation\">(</span>\n    name<span class=\"token operator\">=</span><span class=\"token string\">'my_package'</span><span class=\"token punctuation\">,</span>\n    version<span class=\"token operator\">=</span><span class=\"token string\">'1.0'</span><span class=\"token punctuation\">,</span>\n    ext_modules<span class=\"token operator\">=</span>ext_modules<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>在上述示例中，我们定义了一个名为<code>my_package</code>的扩展模块，它包含了一个名为<code>my_module.c</code>的C源码文件。通过设置<code>include_dirs=['path/to/headers']</code>，我们告诉setup程序去寻找头文件时应该搜索的路径。通过设置<code>library_dirs=['path/to/libs']</code>，我们告诉setup程序去寻找库文件时应该搜索的路径。同时，我们还通过设置<code>libraries=['my_lib']</code>来指定需要链接的库。</p>\n<p>然后，在命令行中运行以下命令来安装包：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">pip install .<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><a href=\"http://xn--setup-bi1hg7dhwl8pyqrhxa345gvi2elhbm78ltiza.py\">这将会执行当前目录下的setup.py</a>，并安装相应的扩展模块和其他依赖项。</p>\n<p>注意：以上示例中的路径只是示意，并非实际路径，请根据实际情况进行替换。</p>\n<p>pip install 安装库的时候，如何指定头文件和库文件</p>\n<p>在使用pip安装库时，默认情况下是无法指定头文件和库文件的。pip是Python的包管理工具，主要用于安装Python包，而不涉及C/C++等其他语言的编译和链接。</p>\n<p>如果你需要指定头文件和库文件，可以考虑使用其他适合的工具，如以下几种方式：</p>\n<ol>\n<li class=\"lvl-3\">\n<p>使用conda：conda是另一个流行的包管理工具，与pip类似，但也支持跨平台安装C/C++库。可以使用conda install命令来安装包，并指定头文件和库文件路径。</p>\n</li>\n<li class=\"lvl-3\">\n<p>手动编译和安装：如果源代码提供了源码或二进制发行版，并且允许手动编译和安装，你可以下载源代码并按照项目文档中提供的步骤进行手动编译和安装。在编译过程中，你可以通过设置环境变量或命令行参数来指定头文件和库文件路径。</p>\n</li>\n<li class=\"lvl-3\">\n<p>使用系统包管理器：某些操作系统（如Linux）提供了自己的软件包管理器（如apt-get、yum等），你可以使用这些软件包管理器来安装C/C++库，并自动处理依赖关系。在使用系统包管理器时，它会自动将头文件和库文件放置在系统默认位置。</p>\n</li>\n</ol>\n<p>综上所述，pip并不适用于直接安装C/C++相关的头文件和库文件。如需更多详细信息，请参考相关工具的文档或官方网站。</p>\n<p>下面这个问题如何解决：DEPRECATION: --build-option and --global-option are deprecated. pip 24.0 will enforce this behaviour change. A possible replacement is to use --config-settings. Discussion can</p>\n<p>be found at <a href=\"https://github.com/pypa/pip/issues/11859\">https://github.com/pypa/pip/issues/11859</a></p>\n<p>怎么替换 ，设置 build_ext和对应include和lib的位置</p>\n<p>根据给出的信息，pip 24.0版本开始弃用–build-option和–global-option参数，建议使用–config-settings参数进行替换。讨论和更多信息可以在<a href=\"https://github.com/pypa/pip/issues/11859%E6%89%BE%E5%88%B0%E3%80%82\">https://github.com/pypa/pip/issues/11859找到。</a></p>\n<p>要设置build_ext并指定对应的include和lib位置，可以按照以下步骤进行操作：</p>\n<ol>\n<li class=\"lvl-3\">\n<p>确保已经安装了pip的最新版本。使用以下命令升级pip：</p>\n</li>\n</ol>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">pip install --upgrade pip<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<ol start=\"2\">\n<li class=\"lvl-3\">\n<p>使用–config-settings参数进行替换。具体步骤如下：</p>\n</li>\n</ol>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>打开终端或命令提示符窗口；</p>\n</li>\n<li class=\"lvl-2\">\n<p>运行以下命令来设置路径：</p>\n</li>\n</ul>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">pip install --config-setting build_ext:&lt;path_to_build_ext&gt; --config-setting include_dir:&lt;path_to_include_dir&gt; --config-setting lib_dir:&lt;path_to_lib_dir&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>其中，&lt;path_to_build_ext&gt;是你要设置的build_ext路径，&lt;path_to_include_dir&gt;是你要设置的include文件夹路径，&lt;path_to_lib_dir&gt;是你要设置的lib文件夹路径。</p>\n<ol start=\"3\">\n<li class=\"lvl-3\">\n<p>检查是否成功替换。可以运行以下命令来验证替换是否成功：</p>\n</li>\n</ol>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">pip config list<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>这将显示当前配置的所有参数和值。确认build_ext、include_dir和lib_dir参数与你之前设置的路径一致即可。</p>\n<p>通过按照上述步骤进行操作，应该能够成功解决所提到的问题并替换build_ext以及相应的include和lib位置。</p>\n<p>python pip 中的 build_ext是什么作用</p>\n<p>在Python的pip工具中，build_ext是一个命令选项，用于构建和编译Python扩展模块。它可以帮助用户在安装Python包时自动编译包中的C/C++扩展模块。</p>\n<p>当用户使用pip安装一个包时，如果该包包含C/C++扩展模块（通常是通过Cython或其他工具生成的），那么build_ext命令选项会被调用来构建这些扩展模块。它会自动查找和配置所需的编译器，并根据操作系统和Python版本等因素进行相应的编译和链接操作。</p>\n<p>使用build_ext命令选项可以简化扩展模块的安装过程，使得用户可以更方便地安装依赖于C/C++代码的Python包。</p>\n<p>在pip 23中如何配置 build_ext这个参数，在pip install 安装特点的安装包时</p>\n<p>在pip 23中，可以使用<code>--global-option</code>参数来配置<code>build_ext</code>选项。具体步骤如下：</p>\n<ol>\n<li class=\"lvl-3\">\n<p>打开命令行终端。</p>\n</li>\n<li class=\"lvl-3\">\n<p>使用以下命令安装特定的安装包，并配置<code>build_ext</code>选项：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">pip install &lt;package_name&gt; --global-option&#x3D;&quot;build_ext&quot; --global-option&#x3D;&quot;-&lt;build_ext_option&gt;&quot;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>其中，<code>&lt;package_name&gt;</code>是要安装的特定安装包的名称，<code>&lt;build_ext_option&gt;</code>是要配置的<code>build_ext</code>选项。</p>\n</li>\n</ol>\n<p>举例说明：</p>\n<p>假设要安装名为<code>example_package</code>的特定安装包，并配置了一个名为<code>example_option</code>的<code>build_ext</code>选项。可以使用以下命令进行安装和配置：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">pip install example_package --global-option&#x3D;&quot;build_ext&quot; --global-option&#x3D;&quot;-example_option&quot;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>这样，就可以在安装特定的安装包时配置相应的<code>build_ext</code>选项了。</p>\n<p>怎么解决下面的问题 ERROR: Cannot uninstall ‘PyAudio’. It is a distutils installed project and thus we cannot accurately determine which files belong to it which would lead to only a partial uninstall.</p>\n<p>这个错误通常发生在尝试卸载通过distutils安装的PyAudio时。这可能是因为PyAudio没有提供一个清晰的卸载规范，所以无法准确确定哪些文件属于它。</p>\n<p>为了解决这个问题，你可以尝试以下方法：</p>\n<ol>\n<li class=\"lvl-3\">\n<p>使用pip进行卸载：在命令行中运行以下命令：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">pip uninstall pyaudio<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>这将使用pip来卸载PyAudio，而不是使用distutils。</p>\n</li>\n<li class=\"lvl-3\">\n<p>手动删除文件：如果上述方法无效，你可以手动删除PyAudio的文件。首先，找到Python的安装目录（通常位于<code>C:\\PythonXX</code>或<code>/usr/lib/pythonX.X</code>），然后进入<code>Lib\\site-packages</code>目录。在此目录中搜索并删除与PyAudio相关的文件和文件夹。</p>\n</li>\n</ol>\n<p>请注意，在执行任何操作之前，请确保备份你的数据和系统以防止意外损坏。</p>\n<p>如果以上方法都无效，可能需要考虑重新安装Python，并且在安装PyAudio之前确保没有其他依赖项或冲突存在</p>\n<p>其他方法很都是无效的，最有的方法。</p>\n<p>conda install portaudio pyaudio</p>\n<p>用conda install 安装portaudio 和 pyaudio这两个包，当然前提是brew install portaudio --head<br />\n这样在conda虚拟环境中使用是没有问题了，其他.h.lib配置配置去也没用， 关键就是需要<br />\nconda install portaudio这种，不能只安装pyaudio，pyaudio要引用portaudio，如果不安装库找不到。</p>\n","text":" mac m1安装pyaudio 下面这个问题什么原因，如何解决 DEPRECATION: --build-option and --global-option are deprecated. pip 24.0 will enforce this behaviour change...","link":"","photos":[],"count_time":{"symbolsCount":"11k","symbolsTime":"10 mins."},"categories":[{"name":"AIGC","slug":"AIGC","count":117,"path":"api/categories/AIGC.json"},{"name":"weibo","slug":"AIGC/weibo","count":59,"path":"api/categories/AIGC/weibo.json"}],"tags":[{"name":"weibo","slug":"weibo","count":62,"path":"api/tags/weibo.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#mac-m1%E5%AE%89%E8%A3%85pyaudio\"><span class=\"toc-text\"> mac m1安装pyaudio</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#pyaudio%E5%AE%89%E8%A3%85\"><span class=\"toc-text\"> pyaudio安装</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%AE%9A%E4%B9%89%E9%9F%B3%E9%A2%91%E5%8F%82%E6%95%B0\"><span class=\"toc-text\"> 定义音频参数</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%88%9D%E5%A7%8B%E5%8C%96pyaudio%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\"> 初始化PyAudio对象</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%89%93%E5%BC%80%E9%9F%B3%E9%A2%91%E6%B5%81\"><span class=\"toc-text\"> 打开音频流</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%BD%95%E5%88%B6%E9%9F%B3%E9%A2%91%E6%95%B0%E6%8D%AE\"><span class=\"toc-text\"> 录制音频数据</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%81%9C%E6%AD%A2%E9%9F%B3%E9%A2%91%E6%B5%81%E5%B9%B6%E5%85%B3%E9%97%ADpyaudio%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\"> 停止音频流并关闭PyAudio对象</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%B0%86%E5%BD%95%E5%88%B6%E7%9A%84%E9%9F%B3%E9%A2%91%E6%95%B0%E6%8D%AE%E5%86%99%E5%85%A5%E5%88%B0wav%E6%96%87%E4%BB%B6%E4%B8%AD\"><span class=\"toc-text\"> 将录制的音频数据写入到WAV文件中</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%88%9B%E5%BB%BA%E9%9F%B3%E9%A2%91%E6%B5%81\"><span class=\"toc-text\"> 创建音频流</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%BC%80%E5%A7%8B%E5%BD%95%E9%9F%B3\"><span class=\"toc-text\"> 开始录音</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%81%9C%E6%AD%A2%E5%BD%95%E9%9F%B3\"><span class=\"toc-text\"> 停止录音</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%BF%9D%E5%AD%98%E5%BD%95%E9%9F%B3%E6%96%87%E4%BB%B6\"><span class=\"toc-text\"> 保存录音文件</span></a></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"conda init bash指令的作用","uid":"e610e4d512d51105e5370a7afc95aadf","slug":"python/codna/conda init bash指令的作用","date":"2024-03-14T07:45:09.041Z","updated":"2024-03-14T07:45:09.041Z","comments":true,"path":"api/articles/python/codna/conda init bash指令的作用.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":" conda init bash指令的作用 conda init bash这条指令的作用是什么，conda init bash，对那些文件做了处理了变化，有没有对.bashrc文件添加了什么内容？ &quot;conda init bash&quot;命令的作用是将conda命令...","link":"","photos":[],"count_time":{"symbolsCount":"1.1k","symbolsTime":"1 mins."},"categories":[{"name":"python","slug":"python","count":3,"path":"api/categories/python.json"},{"name":"conda","slug":"python/conda","count":1,"path":"api/categories/python/conda.json"}],"tags":[{"name":"conda","slug":"conda","count":3,"path":"api/tags/conda.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"cuDNN","uid":"95e90514163f2adead82ccfd062b2e72","slug":"python/codna/cuDNN","date":"2024-03-14T07:45:09.040Z","updated":"2024-03-14T07:45:09.040Z","comments":true,"path":"api/articles/python/codna/cuDNN.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":" cuDNN cuDNN（CUDA Deep Neural Network library）是一个用于加速深度神经网络计算的GPU加速库。它提供了高效的实现和优化，可以显著加快深度学习模型训练和推理的速度。 使用cuDNN，可以进行以下操作： 卷积神经网络（CNN）：cuDNN提...","link":"","photos":[],"count_time":{"symbolsCount":"1k","symbolsTime":"1 mins."},"categories":[{"name":"AIGC","slug":"AIGC","count":117,"path":"api/categories/AIGC.json"},{"name":"cuDNN","slug":"AIGC/cuDNN","count":1,"path":"api/categories/AIGC/cuDNN.json"}],"tags":[{"name":"cuDNN","slug":"cuDNN","count":1,"path":"api/tags/cuDNN.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}