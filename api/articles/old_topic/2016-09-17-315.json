{"title":"如何发起新 HTTP 请求","uid":"0bda74f0522febe0cd0d3ac546ef8e60","slug":"old_topic/2016-09-17-315","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T07:45:09.173Z","comments":true,"path":"api/articles/old_topic/2016-09-17-315.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<h1 id=\"如何发起新-http-请求\"><a class=\"markdownIt-Anchor\" href=\"#如何发起新-http-请求\"></a> 如何发起新 HTTP 请求</h1>\n<p>OpenResty 最主要的应用场景之一是 API Server，有别于传统 Nginx 的代理转发应用场景，API Server 中心内部有各种复杂的交易流程和判断逻辑，学会高效的与其他 HTTP Server 调用是必备基础。本文将介绍 OpenResty 中两个最常见 HTTP 接口调用方法。</p>\n<p>我们先来模拟一个接口场景，一个公共服务专门用来对外提供加了“盐” md5 计算，业务系统调用这个公共服务完成业务逻辑，用来判断请求本身是否合法。</p>\n<h3 id=\"利用-proxy_pass\"><a class=\"markdownIt-Anchor\" href=\"#利用-proxy_pass\"></a> 利用 proxy_pass</h3>\n<p>参考下面示例，利用 proxy_pass 完成 HTTP 接口访问的成熟配置+调用方法。</p>\n<pre class=\"line-numbers language-nginx\" data-language=\"nginx\"><code class=\"language-nginx\"><span class=\"token directive\"><span class=\"token keyword\">http</span></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token directive\"><span class=\"token keyword\">upstream</span> md5_server</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token directive\"><span class=\"token keyword\">server</span> 127.0.0.1:81</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\"># ①</span>\n        <span class=\"token directive\"><span class=\"token keyword\">keepalive</span> <span class=\"token number\">20</span></span><span class=\"token punctuation\">;</span>               <span class=\"token comment\"># ②</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token directive\"><span class=\"token keyword\">server</span></span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token directive\"><span class=\"token keyword\">listen</span>    <span class=\"token number\">80</span></span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token directive\"><span class=\"token keyword\">location</span> /test</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token directive\"><span class=\"token keyword\">content_by_lua_block</span></span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token directive\"><span class=\"token keyword\">ngx.req.read_body()</span>\n                local args, err = ngx.req.get_uri_args()\n\n                -- ③\n                local res = ngx.location.capture(<span class=\"token string\">'/spe_md5'</span>,</span>\n                    <span class=\"token punctuation\">&#123;</span>\n                        method = ngx.HTTP_POST,\n                        body = args.data\n                    <span class=\"token punctuation\">&#125;</span>\n                )\n\n                if 200 ~= res.status then\n                    ngx.exit(res.status)\n                end\n\n                if args.key == res.body then\n                    ngx.say(\"valid request\")\n                else\n                    ngx.say(\"invalid request\")\n                end\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token directive\"><span class=\"token keyword\">location</span> /spe_md5</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token directive\"><span class=\"token keyword\">proxy_pass</span> http://md5_server</span><span class=\"token punctuation\">;</span>   -- ④\n            <span class=\"token comment\">#For HTTP, the proxy_http_version directive should be set to “1.1” and the “Connection” </span>\n            <span class=\"token comment\">#header field should be cleared.（from:http://nginx.org/en/docs/http/ngx_http_upstream_module.html#keepalive)</span>\n            <span class=\"token directive\"><span class=\"token keyword\">proxy_http_version</span> 1.1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token directive\"><span class=\"token keyword\">proxy_set_header</span> Connection <span class=\"token string\">\"\"</span></span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token directive\"><span class=\"token keyword\">server</span></span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token directive\"><span class=\"token keyword\">listen</span>    <span class=\"token number\">81</span></span><span class=\"token punctuation\">;</span>           -- ⑤\n\n        <span class=\"token directive\"><span class=\"token keyword\">location</span> /spe_md5</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token directive\"><span class=\"token keyword\">content_by_lua_block</span></span> <span class=\"token punctuation\">&#123;</span>\n                ngx.req.read_body()\n                local data = ngx.req.get_body_data()\n                ngx.print(ngx.md5(data .. \"*&amp;^%$#$^&amp;kjtrKUYG\"))\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>重点说明：<br />\n① 上游访问地址清单(可以按需配置不同的权重规则)；<br />\n② 上游访问长连接，是否开启长连接，对整体性能影响比较大（大家可以实测一下）；<br />\n③ 接口访问通过 <code>ngx.location.capture</code> 的子查询方式发起；<br />\n④ 由于 <code>ngx.location.capture</code> 方式只能是 nginx 自身的子查询，需要借助 proxy_pass 发出 HTTP 连接信号；<br />\n⑤ 公共 API 输出服务；</p>\n<p>这里大家可以看到，借用 nginx 周边成熟组件力量，为了发起一个 HTTP 请求，我们需要绕好几个弯子，甚至还有可能踩到坑（upstream 中长连接的细节处理），显然没有足够优雅，所以我们继续看下一章节。</p>\n<h3 id=\"利用-cosocket\"><a class=\"markdownIt-Anchor\" href=\"#利用-cosocket\"></a> 利用 cosocket</h3>\n<p>立马开始我们的新篇章，给大家展示优雅的解决方式。</p>\n<pre class=\"line-numbers language-nginx\" data-language=\"nginx\"><code class=\"language-nginx\"><span class=\"token directive\"><span class=\"token keyword\">http</span></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token directive\"><span class=\"token keyword\">server</span></span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token directive\"><span class=\"token keyword\">listen</span>    <span class=\"token number\">80</span></span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token directive\"><span class=\"token keyword\">location</span> /test</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token directive\"><span class=\"token keyword\">content_by_lua_block</span></span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token directive\"><span class=\"token keyword\">ngx.req.read_body()</span>\n                local args, err = ngx.req.get_uri_args()\n\n                local http = require <span class=\"token string\">\"resty.http\"</span>   -- ①\n                local httpc = http.new()\n                local res, err = httpc:request_uri( -- ②\n                    <span class=\"token string\">\"http://127.0.0.1:81/spe_md5\"</span>,</span>\n                        <span class=\"token punctuation\">&#123;</span>\n                        method = \"POST\",\n                        body = args.data,\n                      <span class=\"token punctuation\">&#125;</span>\n                )\n\n                if 200 ~= res.status then\n                    ngx.exit(res.status)\n                end\n\n                if args.key == res.body then\n                    ngx.say(\"valid request\")\n                else\n                    ngx.say(\"invalid request\")\n                end\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token directive\"><span class=\"token keyword\">server</span></span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token directive\"><span class=\"token keyword\">listen</span>    <span class=\"token number\">81</span></span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token directive\"><span class=\"token keyword\">location</span> /spe_md5</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token directive\"><span class=\"token keyword\">content_by_lua_block</span></span> <span class=\"token punctuation\">&#123;</span>\n                ngx.req.read_body()\n                local data = ngx.req.get_body_data()\n                ngx.print(ngx.md5(data .. \"*&amp;^%$#$^&amp;kjtrKUYG\"))\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>重点解释：<br />\n① 引用 <code>resty.http</code> 库资源，它来自 github <a href=\"https://github.com/pintsized/lua-resty-http\">https://github.com/pintsized/lua-resty-http</a>。<br />\n② 参考 <code>resty-http</code> 官方 wiki 说明，我们可以知道 request_uri 函数完成了连接池、HTTP 请求等一系列动作。</p>\n<p>题外话，为什么这么简单的方法我们还要求助外部开源组件呢？其实我也觉得这个功能太基础了，真的应该集成到 OpenResty 官方包里面，只不过目前官方默认包里还没有。</p>\n<p>如果你的内部请求比较少，使用 <code>ngx.location.capture</code>+<code>proxy_pass</code> 的方式还没什么问题。但如果你的请求数量比较多，或者需要频繁的修改上游地址，那么 <code>resty.http</code>就更适合你。</p>\n<p>另外 <code>ngx.thread.*</code> 与 <code>resty.http</code> 相互结合也是很不错的玩法，推荐大家有时间研究一下。</p>\n","text":" 如何发起新 HTTP 请求 OpenResty 最主要的应用场景之一是 API Server，有别于传统 Nginx 的代理转发应用场景，API Server 中心内部有各种复杂的交易流程和判断逻辑，学会高效的与其他 HTTP Server 调用是必备基础。本文将介绍 Open...","link":"","photos":[],"count_time":{"symbolsCount":"3.9k","symbolsTime":"4 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%A6%82%E4%BD%95%E5%8F%91%E8%B5%B7%E6%96%B0-http-%E8%AF%B7%E6%B1%82\"><span class=\"toc-text\"> 如何发起新 HTTP 请求</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%A9%E7%94%A8-proxy_pass\"><span class=\"toc-text\"> 利用 proxy_pass</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%A9%E7%94%A8-cosocket\"><span class=\"toc-text\"> 利用 cosocket</span></a></li></ol></li></ol></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"cosocket.md","uid":"3c01632b3d6ff48483bb42fd53fbe2b7","slug":"old_topic/2016-09-17-313","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T07:45:09.225Z","comments":true,"path":"api/articles/old_topic/2016-09-17-313.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":" 怎样理解 cosocket todo: waiting to todo ","link":"","photos":[],"count_time":{"symbolsCount":37,"symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"简单API Server框架","uid":"00e0afc1c0a95123fda2364773b4d3e8","slug":"old_topic/2016-09-17-316","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T07:45:09.212Z","comments":true,"path":"api/articles/old_topic/2016-09-17-316.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":" 简单API Server框架 实现一个最最简单的数学计算：加、减、乘、除，给大家演示如何搭建简单的 API Server。 按照前面几章的写法，先来看看加法、减法示例代码： worker_processes 1; #nginx worker 数量 error_log logs/...","link":"","photos":[],"count_time":{"symbolsCount":"4.8k","symbolsTime":"4 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}