{"title":"如何发起新 HTTP 请求","uid":"0bda74f0522febe0cd0d3ac546ef8e60","slug":"old_topic/2016-09-17-315","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T07:45:09.173Z","comments":true,"path":"api/articles/old_topic/2016-09-17-315.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":null,"content":"<h1>如何发起新 HTTP 请求</h1>\n<p>OpenResty 最主要的应用场景之一是 API Server，有别于传统 Nginx 的代理转发应用场景，API Server 中心内部有各种复杂的交易流程和判断逻辑，学会高效的与其他 HTTP Server 调用是必备基础。本文将介绍 OpenResty 中两个最常见 HTTP 接口调用方法。</p>\n<p>我们先来模拟一个接口场景，一个公共服务专门用来对外提供加了“盐” md5 计算，业务系统调用这个公共服务完成业务逻辑，用来判断请求本身是否合法。</p>\n<h3 id=\"利用-proxy-pass\">利用 proxy_pass</h3>\n<p>参考下面示例，利用 proxy_pass 完成 HTTP 接口访问的成熟配置+调用方法。</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">http</span> &#123;</span><br><span class=\"line\">    <span class=\"section\">upstream</span> md5_server&#123;</span><br><span class=\"line\">        <span class=\"attribute\">server</span> <span class=\"number\">127.0.0.1:81</span>;        <span class=\"comment\"># ①</span></span><br><span class=\"line\">        <span class=\"attribute\">keepalive</span> <span class=\"number\">20</span>;               <span class=\"comment\"># ②</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"section\">server</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">listen</span>    <span class=\"number\">80</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"section\">location</span> /test &#123;</span><br><span class=\"line\">            <span class=\"section\">content_by_lua_block</span> &#123;</span><br><span class=\"line\">                ngx.req.read_body()</span><br><span class=\"line\">                <span class=\"attribute\">local</span> args, err = ngx.req.get_uri_args()</span><br><span class=\"line\"></span><br><span class=\"line\">                -- ③</span><br><span class=\"line\">                local res = ngx.location.capture(<span class=\"string\">&#x27;/spe_md5&#x27;</span>,</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        <span class=\"attribute\">method</span> = ngx.HTTP_POST,</span><br><span class=\"line\">                        body = args.data</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                )</span><br><span class=\"line\"></span><br><span class=\"line\">                if <span class=\"number\">200</span> ~= res.status then</span><br><span class=\"line\">                    ngx.exit(res.status)</span><br><span class=\"line\">                end</span><br><span class=\"line\"></span><br><span class=\"line\">                if args.key == res.body then</span><br><span class=\"line\">                    ngx.say(<span class=\"string\">&quot;valid request&quot;</span>)</span><br><span class=\"line\">                else</span><br><span class=\"line\">                    ngx.say(<span class=\"string\">&quot;invalid request&quot;</span>)</span><br><span class=\"line\">                end</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        location /spe_md5 &#123;</span><br><span class=\"line\">            <span class=\"attribute\">proxy_pass</span> http://md5_server;   -- ④</span><br><span class=\"line\">            <span class=\"comment\">#For HTTP, the proxy_http_version directive should be set to “1.1” and the “Connection” </span></span><br><span class=\"line\">            <span class=\"comment\">#header field should be cleared.（from:http://nginx.org/en/docs/http/ngx_http_upstream_module.html#keepalive)</span></span><br><span class=\"line\">            <span class=\"attribute\">proxy_http_version</span> <span class=\"number\">1</span>.<span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"attribute\">proxy_set_header</span> Connection <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"section\">server</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">listen</span>    <span class=\"number\">81</span>;           -- ⑤</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"section\">location</span> /spe_md5 &#123;</span><br><span class=\"line\">            <span class=\"section\">content_by_lua_block</span> &#123;</span><br><span class=\"line\">                ngx.req.read_body()</span><br><span class=\"line\">                <span class=\"attribute\">local</span> data = ngx.req.get_body_data()</span><br><span class=\"line\">                ngx.print(ngx.md5(data .. <span class=\"string\">&quot;*&amp;^%$#$^&amp;kjtrKUYG&quot;</span>))</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>重点说明：<br>\n① 上游访问地址清单(可以按需配置不同的权重规则)；<br>\n② 上游访问长连接，是否开启长连接，对整体性能影响比较大（大家可以实测一下）；<br>\n③ 接口访问通过 <code>ngx.location.capture</code> 的子查询方式发起；<br>\n④ 由于 <code>ngx.location.capture</code> 方式只能是 nginx 自身的子查询，需要借助 proxy_pass 发出 HTTP 连接信号；<br>\n⑤ 公共 API 输出服务；</p>\n<p>这里大家可以看到，借用 nginx 周边成熟组件力量，为了发起一个 HTTP 请求，我们需要绕好几个弯子，甚至还有可能踩到坑（upstream 中长连接的细节处理），显然没有足够优雅，所以我们继续看下一章节。</p>\n<h3 id=\"利用-cosocket\">利用 cosocket</h3>\n<p>立马开始我们的新篇章，给大家展示优雅的解决方式。</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">http</span> &#123;</span><br><span class=\"line\">    <span class=\"section\">server</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">listen</span>    <span class=\"number\">80</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"section\">location</span> /test &#123;</span><br><span class=\"line\">            <span class=\"section\">content_by_lua_block</span> &#123;</span><br><span class=\"line\">                ngx.req.read_body()</span><br><span class=\"line\">                <span class=\"attribute\">local</span> args, err = ngx.req.get_uri_args()</span><br><span class=\"line\"></span><br><span class=\"line\">                local http = require <span class=\"string\">&quot;resty.http&quot;</span>   -- ①</span><br><span class=\"line\">                local httpc = http.new()</span><br><span class=\"line\">                local res, err = httpc:request_uri( -- ②</span><br><span class=\"line\">                    <span class=\"string\">&quot;http://127.0.0.1:81/spe_md5&quot;</span>,</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                        <span class=\"attribute\">method</span> = <span class=\"string\">&quot;POST&quot;</span>,</span><br><span class=\"line\">                        body = args.data,</span><br><span class=\"line\">                      &#125;</span><br><span class=\"line\">                )</span><br><span class=\"line\"></span><br><span class=\"line\">                if <span class=\"number\">200</span> ~= res.status then</span><br><span class=\"line\">                    ngx.exit(res.status)</span><br><span class=\"line\">                end</span><br><span class=\"line\"></span><br><span class=\"line\">                if args.key == res.body then</span><br><span class=\"line\">                    ngx.say(<span class=\"string\">&quot;valid request&quot;</span>)</span><br><span class=\"line\">                else</span><br><span class=\"line\">                    ngx.say(<span class=\"string\">&quot;invalid request&quot;</span>)</span><br><span class=\"line\">                end</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        <span class=\"attribute\">listen</span>    <span class=\"number\">81</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"section\">location</span> /spe_md5 &#123;</span><br><span class=\"line\">            <span class=\"section\">content_by_lua_block</span> &#123;</span><br><span class=\"line\">                ngx.req.read_body()</span><br><span class=\"line\">                <span class=\"attribute\">local</span> data = ngx.req.get_body_data()</span><br><span class=\"line\">                ngx.print(ngx.md5(data .. <span class=\"string\">&quot;*&amp;^%$#$^&amp;kjtrKUYG&quot;</span>))</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>重点解释：<br>\n① 引用 <code>resty.http</code> 库资源，它来自 github <a href=\"https://github.com/pintsized/lua-resty-http\">https://github.com/pintsized/lua-resty-http</a>。<br>\n② 参考 <code>resty-http</code> 官方 wiki 说明，我们可以知道 request_uri 函数完成了连接池、HTTP 请求等一系列动作。</p>\n<p>题外话，为什么这么简单的方法我们还要求助外部开源组件呢？其实我也觉得这个功能太基础了，真的应该集成到 OpenResty 官方包里面，只不过目前官方默认包里还没有。</p>\n<p>如果你的内部请求比较少，使用 <code>ngx.location.capture</code>+<code>proxy_pass</code> 的方式还没什么问题。但如果你的请求数量比较多，或者需要频繁的修改上游地址，那么 <code>resty.http</code>就更适合你。</p>\n<p>另外 <code>ngx.thread.*</code> 与 <code>resty.http</code> 相互结合也是很不错的玩法，推荐大家有时间研究一下。</p>\n","text":"如何发起新 HTTP 请求 OpenResty 最主要的应用场景之一是 API Server，有别于传统 Nginx 的代理转发应用场景，API Server 中心内部有各种复杂的交易流程和判断逻辑，学会高效的与其他 HTTP Server 调用是必备基础。本文将介绍 OpenR...","link":"","photos":[],"count_time":{"symbolsCount":"4.1k","symbolsTime":"4 mins."},"categories":[{"name":"topic","slug":"topic","count":308,"path":"api/categories/topic.json"}],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\"><span class=\"toc-text\">如何发起新 HTTP 请求</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%A9%E7%94%A8-proxy-pass\"><span class=\"toc-text\">利用 proxy_pass</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%A9%E7%94%A8-cosocket\"><span class=\"toc-text\">利用 cosocket</span></a></li></ol></li></ol></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"helloworld","uid":"7feb1bc48352a2bd04c7a6d1cf8eb726","slug":"old_topic/2016-09-17-314","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T07:45:09.165Z","comments":true,"path":"api/articles/old_topic/2016-09-17-314.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":[],"text":"HelloWorld HelloWorld 是我们亘古不变的第一个入门程序。但是 OpenResty 不是一门编程语言，跟其他编程语言的 HelloWorld 不一样，让我们看看都有哪些不一样吧。 创建工作目录 OpenResty 安装之后就有配置文件及相关的目录的，为了工作目录...","link":"","photos":[],"count_time":{"symbolsCount":"1.7k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":308,"path":"api/categories/topic.json"}],"tags":[],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"简单API Server框架","uid":"00e0afc1c0a95123fda2364773b4d3e8","slug":"old_topic/2016-09-17-316","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T07:45:09.212Z","comments":true,"path":"api/articles/old_topic/2016-09-17-316.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":null,"text":"简单API Server框架 实现一个最最简单的数学计算：加、减、乘、除，给大家演示如何搭建简单的 API Server。 按照前面几章的写法，先来看看加法、减法示例代码： 12345678910111213141516171819202122232425262728293031...","link":"","photos":[],"count_time":{"symbolsCount":"5k","symbolsTime":"5 mins."},"categories":[{"name":"topic","slug":"topic","count":308,"path":"api/categories/topic.json"}],"tags":[],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}