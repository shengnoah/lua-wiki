{"title":"C和PYTHON的SOCKET通信","uid":"5e89e52cbdad9a5b6688281047c5f734","slug":"old_topic/2016-09-17-6","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T06:15:59.756Z","comments":true,"path":"api/articles/old_topic/2016-09-17-6.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":[],"content":"<p>作者：糖果</p>\n<p>[问题] C和python的Socket通信</p>\n<p>Socket是linux提供的基础服务,用于实现计算机间的tcp/ip协议通信。python是强大的高级解释行语言，功能抽象程度高，语法简洁功能强大。网络上有很多socket入门例子程序，都是用C语言写的，传统的CS服务器客户端演示程序。</p>\n<p>本文提供的同样是最简单的CS结构通信程序，区别是，Server用Python编写，Client用C语言编写。</p>\n<p>基础的Socket API 使用是模式化的,没有算法过程，只有配置过程。而pyhon被誉为是可以运行的伪语言，可以更好的说明Socket API的模式化使用步骤。</p>\n<p>[解决案]<br>首先列出Server端程序的Python代码，除了import和print,几乎其中的每一句都是socket API使用步骤中，不可或缺的部分。</p>\n<p>C语言使用Socket的套路几乎和python的一样，区别是，C语言本身还要考虑buf空间的申请和释放，判断socket各个步骤成功异常。还要准备hostent结构体和sockaddr结构体，进行更详细定义过程。</p>\n<p>server.py</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> socket</span><br><span class=\"line\"><span class=\"comment\">#取得一个socket对象句柄</span></span><br><span class=\"line\">s = socket.socket()                 </span><br><span class=\"line\"><span class=\"comment\">#取得主机名</span></span><br><span class=\"line\">host = socket.gethostname()                  </span><br><span class=\"line\"><span class=\"comment\">#定义端口号</span></span><br><span class=\"line\">port = <span class=\"number\">1236</span>                  </span><br><span class=\"line\"><span class=\"comment\">#将socket对象句柄，与指定的IP和Port号绑定。</span></span><br><span class=\"line\">s.bind((host, port))                  </span><br><span class=\"line\"><span class=\"comment\">#服务其开始监听数据</span></span><br><span class=\"line\">s.listen(<span class=\"number\">5</span>)                  </span><br><span class=\"line\"><span class=\"comment\">#大循环，开始堵塞式的数据读取</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"literal\">True</span>:                  </span><br><span class=\"line\">    <span class=\"comment\">#接受外部链接请求“c”其他客户机与本机链接产生的，新的通信socket句柄，“addr”表示client记得IP地址。</span></span><br><span class=\"line\">    c, addr = s.accept()                  </span><br><span class=\"line\">    <span class=\"comment\">#接受1024大的数据</span></span><br><span class=\"line\">    data = c.recv(<span class=\"number\">1024</span>)                  </span><br><span class=\"line\">    <span class=\"built_in\">print</span> data</span><br><span class=\"line\">    <span class=\"built_in\">print</span> <span class=\"string\">&#x27;Got connection from:&#x27;</span>, addr, data</span><br><span class=\"line\">    <span class=\"comment\">#相应链接，把一条英文信息返回给client</span></span><br><span class=\"line\">    c.send(<span class=\"string\">&#x27;Thank you for connecting:&#x27;</span>)                 </span><br><span class=\"line\">    <span class=\"comment\">#关闭socket链接</span></span><br><span class=\"line\">    c.close()                 </span><br></pre></td></tr></table></figure>\n\n<p>运行服务器端程序：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python server.py</span><br></pre></td></tr></table></figure>\n\n<p><span style=\"color:red\">“坑”提示：代码“c, addr = s.accept()”中，c和addr之间的符号是”, “逗号，输入时请注意！</span></p>\n<br>\n\n<p>client.c<br>下面是一段c语言的客户端程序。<br>一般来说，需要对“hostent”和“sockaddr_in”进行解释，还有对socket, recv, connect,send等API接口参数含义的介绍。就不介绍了，直接在系统里man一下API吧，或是发挥一下自己想象力，然后代码实践，再看文档求证一下吧！因为API不用背，需要动态的理解。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;errno.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;netdb.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/types.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;netinet/in.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/socket.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> PORT 1236</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> BUFFER_SIZE 1024</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span>** argv)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> sock_fd, recvbytes;</span><br><span class=\"line\">  <span class=\"type\">char</span> buf[BUFFER_SIZE];</span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">hostent</span> *<span class=\"title\">host</span>;</span></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sockaddr_in</span> <span class=\"title\">serv_addr</span>;</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (argc &lt; <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>, <span class=\"string\">&quot;Please enter the server&#x27;s hostname!\\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">exit</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> ((host=gethostbyname(argv[<span class=\"number\">1</span>]))== <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">    herror(<span class=\"string\">&quot;get host b name error!&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> ((sock_fd = socket(AF_INET, SOCK_STREAM, <span class=\"number\">0</span>)) == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">    perror(<span class=\"string\">&quot;Create socket error!&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">exit</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  serv_addr.sin_family = AF_INET;</span><br><span class=\"line\">  serv_addr.sin_port = htons(PORT);</span><br><span class=\"line\">  serv_addr.sin_addr = *((<span class=\"keyword\">struct</span> in_addr*)host-&gt;h_addr);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;hostname:%s&quot;</span>, host-&gt;h_addr);</span><br><span class=\"line\"></span><br><span class=\"line\">  bzero(&amp;(serv_addr.sin_zero), <span class=\"number\">8</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (connect(sock_fd, (<span class=\"keyword\">struct</span> sockaddr* )&amp;serv_addr, <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">struct</span> sockaddr)) == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">    perror(<span class=\"string\">&quot;connect error&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (send(sock_fd, <span class=\"string\">&quot;spring&quot;</span>, <span class=\"number\">8</span>,<span class=\"number\">0</span>) == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">    perror(<span class=\"string\">&quot;send error!&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> ((recvbytes = recv(sock_fd, buf, BUFFER_SIZE, <span class=\"number\">0</span>)) == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">    perror(<span class=\"string\">&quot;recv error!&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">exit</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  buf[recvbytes] = <span class=\"string\">&#x27;\\0&#x27;</span>;</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Received:%s&quot;</span>, buf);</span><br><span class=\"line\">  close(sock_fd);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p>编译客户端程序：<br>[code]gcc -o client client.c[/code]<br>运行客户端程序：<br>[code]./client 127.0.0.1[/code]</p>\n<p><span style=\"color:red\">“坑”提示:C语言程序中的<br>“if ((recvbytes = recv(sock_fd, buf, BUFFER_SIZE, 0)) == -1) ”这句，不要写成：“if (recvbytes = recv(sock_fd, buf, BUFFER_SIZE, 0) == -1)”</span> </p>\n<br>\n\n<p>以上的C语言client程序，几乎等同于如下python的client代码。<br>结合上面的python服务器端的程序注释，下面的client端程序几乎不需要解释。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> socket</span><br><span class=\"line\">s = socket.socket()</span><br><span class=\"line\">host = socket.gethostname()</span><br><span class=\"line\">port = <span class=\"number\">1236</span></span><br><span class=\"line\">s.connect((host, port))</span><br><span class=\"line\">s.send(<span class=\"built_in\">bytes</span>(<span class=\"string\">&quot;python&quot;</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span> s.recv(<span class=\"number\">1024</span>)</span><br><span class=\"line\">s.close()</span><br></pre></td></tr></table></figure>\n\n<p>[尾声]<br>socket的API使用相对很简单，于Linux下的打开关闭读写文件类似。而socket API的使用，是建立在对TCP/IP基本概念了解的基础上，至少要了解主机和端口号的概念。项目中几乎不会用这么简单的代码，下一篇介绍select基础，基础原理哥附身。</p>\n<p>谨以此文，献给大姐！献给想不起API的青春,再见青春，再见的永远的故乡！峰哥护体。</p>\n<p>[赠送内容]<br><img src=\"http://up.2cto.com/2011/1123/20111123055456302.jpg\" alt=\"TCP状态机\" /> </p>\n<p>下面是python之间进行UDP通信：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> socket  </span><br><span class=\"line\">  </span><br><span class=\"line\">address = (<span class=\"string\">&#x27;127.0.0.1&#x27;</span>, <span class=\"number\">1812</span>)  </span><br><span class=\"line\">s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)  </span><br><span class=\"line\">s.bind(address)  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"literal\">True</span>:  </span><br><span class=\"line\">    data, addr = s.recvfrom(<span class=\"number\">2048</span>)  </span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> data:  </span><br><span class=\"line\">        <span class=\"built_in\">print</span> <span class=\"string\">&quot;client has exist&quot;</span>  </span><br><span class=\"line\">        <span class=\"keyword\">break</span>  </span><br><span class=\"line\">    <span class=\"built_in\">print</span> <span class=\"string\">&quot;received:&quot;</span>, data, <span class=\"string\">&quot;from&quot;</span>, addr  </span><br><span class=\"line\">  </span><br><span class=\"line\">s.close()  </span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> socket  </span><br><span class=\"line\">  </span><br><span class=\"line\">address = (<span class=\"string\">&#x27;127.0.0.1&#x27;</span>, <span class=\"number\">1812</span>)  </span><br><span class=\"line\">s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"literal\">True</span>:  </span><br><span class=\"line\">    msg = raw_input()  </span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> msg:  </span><br><span class=\"line\">        <span class=\"keyword\">break</span>  </span><br><span class=\"line\">    s.sendto(msg, address)  </span><br><span class=\"line\">  </span><br><span class=\"line\">s.close()  </span><br></pre></td></tr></table></figure>\n\n\n<p>下面是python之间进行TCP通信：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">tcpServer</span>():   </span><br><span class=\"line\">    srvsock = socket.socket( socket.AF_INET, socket.SOCK_STREAM)   </span><br><span class=\"line\">    srvsock.bind((<span class=\"string\">&#x27;&#x27;</span>, <span class=\"number\">1812</span>))   </span><br><span class=\"line\">    srvsock.listen(<span class=\"number\">5</span>)   </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:   </span><br><span class=\"line\">        clisock, (remoteHost, remotePort) = srvsock.accept()   </span><br><span class=\"line\">        <span class=\"built_in\">print</span> <span class=\"string\">&quot;[%s:%s] connected&quot;</span> % (remoteHost, remotePort)   </span><br><span class=\"line\">        <span class=\"comment\">#do something on the clisock   </span></span><br><span class=\"line\">        clisock.close()   </span><br><span class=\"line\">  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:   </span><br><span class=\"line\">    tcpServer()  </span><br><span class=\"line\"> </span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">tcpClient</span>():   </span><br><span class=\"line\">    clisock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)   </span><br><span class=\"line\">    clisock.connect((<span class=\"string\">&#x27;localhost&#x27;</span>, <span class=\"number\">1812</span>))   </span><br><span class=\"line\">    <span class=\"comment\">#I/O on this clisock   </span></span><br><span class=\"line\">    <span class=\"comment\">#clisock.send(&quot;&quot;)   </span></span><br><span class=\"line\">    <span class=\"comment\">#dat = clisock.recv(len)   </span></span><br><span class=\"line\">       </span><br><span class=\"line\">    <span class=\"built_in\">print</span> dat   </span><br><span class=\"line\">       </span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:   </span><br><span class=\"line\">    tcpClient()  </span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p>注释：个人劳动成果，转载使用请注明本文作者及出处链接，谢谢合作！</p>\n","text":"作者：糖果 [问题] C和python的Socket通信 Socket是linux提供的基础服务,用于实现计算机间的tcp/ip协议通信。python是强大的高级解释行语言，功能抽象程度高，语法简洁功能强大。网络上有很多socket入门例子程序，都是用C语言写的，传统的CS服务器...","link":"","photos":[],"count_time":{"symbolsCount":"5.1k","symbolsTime":"5 mins."},"categories":[{"name":"topic","slug":"topic","count":308,"path":"api/categories/topic.json"}],"tags":[{"name":"lua","slug":"lua","count":153,"path":"api/tags/lua.json"}],"toc":"","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"开源一览","uid":"503704190843bf2a46548f05306fa34f","slug":"old_topic/2016-09-17-58","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T06:15:59.756Z","comments":true,"path":"api/articles/old_topic/2016-09-17-58.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":null,"text":"Hy’shttps://hy.readthedocs.org/en/latest/ memcachedhttp://memcached.org/ libeventhttp://libevent.org/ libevent for pythonhttps://github.com/...","link":"","photos":[],"count_time":{"symbolsCount":305,"symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":308,"path":"api/categories/topic.json"}],"tags":[{"name":"lua","slug":"lua","count":153,"path":"api/tags/lua.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"十部国外经典算法著作","uid":"6705e8206cf0cbe8dfed2f6418924ac7","slug":"old_topic/2016-09-17-56","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T06:15:59.756Z","comments":true,"path":"api/articles/old_topic/2016-09-17-56.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":null,"text":"1、《Fundamentals of Data Structures》（Horowitz and Sartaj Sahni著）——中文译名《数据结构基础》2、《Practical Data Structures in C++ 》（Bryan Flamig著）——中文译名（数据结构...","link":"","photos":[],"count_time":{"symbolsCount":787,"symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":308,"path":"api/categories/topic.json"}],"tags":[{"name":"lua","slug":"lua","count":153,"path":"api/tags/lua.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}