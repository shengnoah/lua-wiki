{"title":"如何在Lapis中响应POST,GET方法","uid":"2bf41dddbaf54ce129f68a67d1688ceb","slug":"old_topic/2016-09-17-230","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T07:45:09.171Z","comments":true,"path":"api/articles/old_topic/2016-09-17-230.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":null,"content":"<p>by 糖果</p>\n<h3>How do I respond to GET, POST, DELETE or other HTTP verbs?</h3> \n如何响应GET,, POST, DELETE等动作。\n<blockquote>The respond_to action decorator function gives a basic framework for running different code depending on the HTTP method.</blockquote> \n<p>在同一个路由中响应类似get,post这种用户请求，关键是要使用respond_to这个装饰器。</p>\n<blockquote>try_to_login is a hypothetical functions, and not regularly globally available</blockquote> \n<p>try_to_login,只是一个假的，用说明可能会调用的驱动函数。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">local lapis = require(&quot;lapis&quot;)</span><br><span class=\"line\">local app = lapis.Application()</span><br><span class=\"line\">local respond_to = require(&quot;lapis.application&quot;).respond_to</span><br><span class=\"line\"></span><br><span class=\"line\">app:match(&quot;/&quot;, respond_to(&#123;</span><br><span class=\"line\">  -- do common setup</span><br><span class=\"line\">  before = function(self)</span><br><span class=\"line\">    if self.session.current_user then</span><br><span class=\"line\">      self:write(&#123; redirect_to = &quot;/&quot; &#125;)</span><br><span class=\"line\">    end</span><br><span class=\"line\">  end,</span><br><span class=\"line\">  -- render the view</span><br><span class=\"line\">  GET = function(self)</span><br><span class=\"line\">    return &#123; render = true &#125;</span><br><span class=\"line\">  end,</span><br><span class=\"line\">  -- handle the form submission</span><br><span class=\"line\">  POST = function(self)</span><br><span class=\"line\">    self.session.current_user =</span><br><span class=\"line\">      try_to_login(self.params.username, self.params.password)</span><br><span class=\"line\"></span><br><span class=\"line\">    return &#123; redirect_to = &quot;/&quot; &#125;</span><br><span class=\"line\">  end</span><br><span class=\"line\">&#125;))</span><br></pre></td></tr></table></figure>\n<p>在一个函数里声明了三个闭包函数，before、GET、POST，其中的GET,POST函数就是用来响应不同的类型请求。</p>\n","text":"by 糖果 How do I respond to GET, POST, DELETE or other HTTP verbs? 如何响应GET,, POST, DELETE等动作。 The respond_to action decorator function gives a...","link":"","photos":[],"count_time":{"symbolsCount":"1.1k","symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":308,"path":"api/categories/topic.json"}],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">How do I respond to GET, POST, DELETE or other HTTP verbs?</span></a></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Lua web framework Lapis(日文版)","uid":"4da29ce129daf83f615c694be3984fda","slug":"old_topic/2016-09-17-231","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T07:45:09.164Z","comments":true,"path":"api/articles/old_topic/2016-09-17-231.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":null,"text":"Lua web framework Lapis 前记： 这篇的原文，原文是一篇很老的文章，一直以来也没有翻译。原文其实是有配置的，下面只是其中的一小段。 正文： Lua web framework Lapis LuaのWeb Frameworkの需要はほとんどないと思いますが、L...","link":"","photos":[],"count_time":{"symbolsCount":877,"symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":308,"path":"api/categories/topic.json"}],"tags":[],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"ES（Elasticsearch）常用操作与Python客户端","uid":"e623d764e660785c48cbd0cf5044deb0","slug":"old_topic/2016-09-17-232","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T07:45:09.232Z","comments":true,"path":"api/articles/old_topic/2016-09-17-232.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":null,"text":"ES常用操作 之前老板本的ES使用的创建索引的指令已经失效了。 123456curl -X PUT &#x27;http://127.0.0.1:9200/testcase/&#x27; -d &#x27; index: number_of_shards:3 number_of_...","link":"","photos":[],"count_time":{"symbolsCount":"2.3k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":308,"path":"api/categories/topic.json"}],"tags":[],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}