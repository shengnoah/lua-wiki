{"title":"Python的List和C++的Vector的对比","uid":"62ab39d0bc32c5ce1245ceed42efb629","slug":"old_topic/2016-09-17-14","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T07:45:09.190Z","comments":true,"path":"api/articles/old_topic/2016-09-17-14.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<p>作者：糖果</p>\n<p>简单的对比了一下Python的List和C<ins>的Vector操作，用Python代替C</ins>的<br />\n注释。</p>\n<p>另外推荐一个在线的编译器，<a href=\"http://codepad.org\">codepad.org</a>。</p>\n<p>1.定义数据</p>\n<h5>Python</h5>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">candyList &#x3D; [&quot;Red Candy&quot;, &quot;Green Candy&quot;, &quot;Blue Candy&quot;, &quot;Yello Candy&quot;]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h5>C++</h5>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">vector&lt;string&gt; candyList;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>2.增加元素</p>\n<h5>Python</h5>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">candyList.append(&quot;Append Candy&quot;)\ncandyList.insert(1, &quot;Insert Candy&quot;)\ncandyList.extend([&quot;Extend Candy Front&quot;, &quot;Extend Candy Background&quot;])\ncandyList &#x3D; candyList + [&quot;Add Candy Front&quot;, &quot;Add Candy Background&quot;]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h5>C++</h5>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">candyList.push_back(&quot;Red Candy&quot;);\ncandyList.push_back(&quot;Green Candy&quot;);\ncandyList.push_back(&quot;Blue Candy&quot;);\ncandyList.push_back(&quot;Yellow Candy&quot;);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>3.删除元素</p>\n<h5>Python</h5>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">candyList.pop()\ncandyList.remove(&quot;Insert Candy&quot;)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h5>C++</h5>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">candyList.pop_back();\ncandyList.erase(candyList.begin(), candyList.begin()+1);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>4.查找</p>\n<h5>Python</h5> \n<pre class=\"line-numbers language-none\"><code class=\"language-none\">candy &#x3D; candyList[3]\ncandy &#x3D; candyList[-1]\ncandy &#x3D; candyList[-3]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h5>C++</h5> \n<pre class=\"line-numbers language-none\"><code class=\"language-none\">candyList.at(0);\nvector&lt;string&gt;::iterator it &#x3D; candyList.begin() + 1;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h3>字典</h3> \n<p>5.定义</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">candyMap &#x3D; &#123;&quot;Red&quot;:&quot;R&quot;, &quot;Green&quot;:&quot;G&quot;, &quot;Blue&quot;:&quot;B&quot;&#125;\nmap &#x3D; [&quot;%s&#x3D;%s&quot; % (k,v) for k,v in candyMap.items()]\ncolor &#x3D; candyMap[&quot;Red&quot;]\ncandyMap.keys()\ncandyMap.values()\ncandyMap.items()<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>6.连接分割</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">str &#x3D; &quot;;&quot;.join([&quot;%s&#x3D;%s&quot; % (k,v) for k,v in candyMap.items()])\n\ncandyList &#x3D; str.split(&quot;;&quot;)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>7.过滤器<br />\ncount()是查找元素在list中的位置下标值。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">[elem for elem in candyList if candyList.count(elem) &#x3D;&#x3D; 1]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>8.遍历</p>\n<h5>Python</h5> \n<pre class=\"line-numbers language-none\"><code class=\"language-none\">len(candyList)\nlist &#x3D; [elem for elem in candyList]\nlist &#x3D; [elem for elem in candyList if len(elem) &gt; 9]\n\ncandyList &#x3D; [&quot;red&quot;, &quot;green&quot;, &quot;blue&quot;]\nfor elem in range(len(candyList)):\n        print candyList[elem]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h5>C++</h5> \n<pre class=\"line-numbers language-none\"><code class=\"language-none\">for (int i&#x3D;0; i &lt; candyList.size(); i++) &#123;\n     cout &lt;&lt; candyList.at(i) &lt;&lt; endl;\n&#125;\n\nfor (vector&lt;string&gt;::iterator it &#x3D; candyList.begin(); it !&#x3D; candyList.end(); ++it) &#123;\n     cout &lt;&lt; *it &lt;&lt; endl;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">#include&lt;iostream&gt;\n#include&lt;vector&gt;\nusing namespace std;\nint main(int argc, char** argv) &#123;\n        vector&lt;string&gt; candyList;\n        candyList.push_back(&quot;Green Candy&quot;);\n        candyList.push_back(&quot;Blue Candy&quot;);\n        candyList.push_back(&quot;Yellow Candy&quot;);\n\n        for (int i&#x3D;0; i &lt; candyList.size(); i++) &#123;\n                cout &lt;&lt; candyList.at(i) &lt;&lt; endl;\n        &#125;\n\n        vector&lt;string&gt;::iterator it;\n        candyList.erase(candyList.begin(), candyList.begin()+1);\n        candyList.pop_back();   \n        cout &lt;&lt; &quot;###SPLIT###&quot; &lt;&lt; endl;\n        for (vector&lt;string&gt;::iterator it &#x3D; candyList.begin(); it !&#x3D; candyList.end(); ++it) &#123;\n                cout &lt;&lt; *it &lt;&lt; endl;\n        &#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>[后记]<br />\nPython里的join和split很好用，一般的算法原型，完全可以先用python写出来，然后再改成C++，为什么这么干？</p>\n<p>注释：个人劳动成果，转载使用请注明本文作者及出处链接，谢谢合作！</p>\n","text":"作者：糖果 简单的对比了一下Python的List和C的Vector操作，用Python代替C的 注释。 另外推荐一个在线的编译器，codepad.org。 1.定义数据 Python candyList &#x3D; [&quot;Red Candy&quot;, &quot;...","link":"","photos":[],"count_time":{"symbolsCount":"3.1k","symbolsTime":"3 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua","slug":"lua","count":124,"path":"api/tags/lua.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\"><span class=\"toc-text\">Python</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\"><span class=\"toc-text\">C++</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\"><span class=\"toc-text\">Python</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\"><span class=\"toc-text\">C++</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\"><span class=\"toc-text\">Python</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\"><span class=\"toc-text\">C++</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\"><span class=\"toc-text\">Python</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\"><span class=\"toc-text\">C++</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">字典</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\"><span class=\"toc-text\">Python</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\"><span class=\"toc-text\">C++</span></a></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"OPENRESTY 中的简易HTTP加密","uid":"ceeda26fcc5b2c890a2ed530be0ef341","slug":"old_topic/2016-09-17-136","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T07:45:09.165Z","comments":true,"path":"api/articles/old_topic/2016-09-17-136.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"需求 速度快； 可逆； 容易实现，不存在语言障碍； 思考 将一个任意内容的字符串作为密钥，从明文中取等长字符串，逐字节将明文和密钥进行异或计算，得到密文。循环处理整个明文，得到完整密文。对密文进行同样的运算即可解密。 算法 local bit = require(\"bit\") -...","link":"","photos":[],"count_time":{"symbolsCount":"1.4k","symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua","slug":"lua","count":124,"path":"api/tags/lua.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"最简单的LUA随机数生成","uid":"cbbd7e228645caa3cfb0dd345f9fe075","slug":"old_topic/2016-09-17-139","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T07:45:09.190Z","comments":true,"path":"api/articles/old_topic/2016-09-17-139.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"[code] math.randomseed(os.time()) for i=1, 5 do print(math.random()) end [/code] ","link":"","photos":[],"count_time":{"symbolsCount":81,"symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua","slug":"lua","count":124,"path":"api/tags/lua.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}