{"title":"Python的List和C++的Vector的对比","uid":"62ab39d0bc32c5ce1245ceed42efb629","slug":"old_topic/2016-09-17-14","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T06:15:59.735Z","comments":true,"path":"api/articles/old_topic/2016-09-17-14.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":null,"content":"<p>作者：糖果</p>\n<p>简单的对比了一下Python的List和C++的Vector操作，用Python代替C++的<br>注释。</p>\n<p>另外推荐一个在线的编译器，codepad.org。</p>\n<p>1.定义数据</p>\n<h5>Python</h5>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">candyList = [&quot;Red Candy&quot;, &quot;Green Candy&quot;, &quot;Blue Candy&quot;, &quot;Yello Candy&quot;]</span><br></pre></td></tr></table></figure>\n\n\n\n<h5>C++</h5>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vector&lt;string&gt; candyList;</span><br></pre></td></tr></table></figure>\n\n<p>2.增加元素</p>\n<h5>Python</h5>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">candyList.append(&quot;Append Candy&quot;)</span><br><span class=\"line\">candyList.insert(1, &quot;Insert Candy&quot;)</span><br><span class=\"line\">candyList.extend([&quot;Extend Candy Front&quot;, &quot;Extend Candy Background&quot;])</span><br><span class=\"line\">candyList = candyList + [&quot;Add Candy Front&quot;, &quot;Add Candy Background&quot;]</span><br></pre></td></tr></table></figure>\n\n<h5>C++</h5>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">candyList.push_back(&quot;Red Candy&quot;);</span><br><span class=\"line\">candyList.push_back(&quot;Green Candy&quot;);</span><br><span class=\"line\">candyList.push_back(&quot;Blue Candy&quot;);</span><br><span class=\"line\">candyList.push_back(&quot;Yellow Candy&quot;);</span><br></pre></td></tr></table></figure>\n\n\n<p>3.删除元素</p>\n<h5>Python</h5>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">candyList.pop()</span><br><span class=\"line\">candyList.remove(&quot;Insert Candy&quot;)</span><br></pre></td></tr></table></figure>\n\n<h5>C++</h5>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">candyList.pop_back();</span><br><span class=\"line\">candyList.erase(candyList.begin(), candyList.begin()+1);</span><br></pre></td></tr></table></figure>\n\n<p>4.查找</p>\n<h5>Python</h5> \n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">candy = candyList[3]</span><br><span class=\"line\">candy = candyList[-1]</span><br><span class=\"line\">candy = candyList[-3]</span><br></pre></td></tr></table></figure>\n\n<h5>C++</h5> \n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">candyList.at(0);</span><br><span class=\"line\">vector&lt;string&gt;::iterator it = candyList.begin() + 1;</span><br></pre></td></tr></table></figure>\n\n<h3>字典</h3> \n\n<p>5.定义</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">candyMap = &#123;&quot;Red&quot;:&quot;R&quot;, &quot;Green&quot;:&quot;G&quot;, &quot;Blue&quot;:&quot;B&quot;&#125;</span><br><span class=\"line\">map = [&quot;%s=%s&quot; % (k,v) for k,v in candyMap.items()]</span><br><span class=\"line\">color = candyMap[&quot;Red&quot;]</span><br><span class=\"line\">candyMap.keys()</span><br><span class=\"line\">candyMap.values()</span><br><span class=\"line\">candyMap.items()</span><br></pre></td></tr></table></figure>\n\n<p>6.连接分割</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">str = &quot;;&quot;.join([&quot;%s=%s&quot; % (k,v) for k,v in candyMap.items()])</span><br><span class=\"line\"></span><br><span class=\"line\">candyList = str.split(&quot;;&quot;)</span><br></pre></td></tr></table></figure>\n\n\n<p>7.过滤器<br>count()是查找元素在list中的位置下标值。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[elem for elem in candyList if candyList.count(elem) == 1]</span><br></pre></td></tr></table></figure>\n\n\n<p>8.遍历</p>\n<h5>Python</h5> \n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">len(candyList)</span><br><span class=\"line\">list = [elem for elem in candyList]</span><br><span class=\"line\">list = [elem for elem in candyList if len(elem) &gt; 9]</span><br><span class=\"line\"></span><br><span class=\"line\">candyList = [&quot;red&quot;, &quot;green&quot;, &quot;blue&quot;]</span><br><span class=\"line\">for elem in range(len(candyList)):</span><br><span class=\"line\">        print candyList[elem]</span><br></pre></td></tr></table></figure>\n\n<h5>C++</h5> \n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for (int i=0; i &lt; candyList.size(); i++) &#123;</span><br><span class=\"line\">     cout &lt;&lt; candyList.at(i) &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">for (vector&lt;string&gt;::iterator it = candyList.begin(); it != candyList.end(); ++it) &#123;</span><br><span class=\"line\">     cout &lt;&lt; *it &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include&lt;iostream&gt;</span><br><span class=\"line\">#include&lt;vector&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\">int main(int argc, char** argv) &#123;</span><br><span class=\"line\">        vector&lt;string&gt; candyList;</span><br><span class=\"line\">        candyList.push_back(&quot;Green Candy&quot;);</span><br><span class=\"line\">        candyList.push_back(&quot;Blue Candy&quot;);</span><br><span class=\"line\">        candyList.push_back(&quot;Yellow Candy&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">        for (int i=0; i &lt; candyList.size(); i++) &#123;</span><br><span class=\"line\">                cout &lt;&lt; candyList.at(i) &lt;&lt; endl;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        vector&lt;string&gt;::iterator it;</span><br><span class=\"line\">        candyList.erase(candyList.begin(), candyList.begin()+1);</span><br><span class=\"line\">        candyList.pop_back();   </span><br><span class=\"line\">        cout &lt;&lt; &quot;###SPLIT###&quot; &lt;&lt; endl;</span><br><span class=\"line\">        for (vector&lt;string&gt;::iterator it = candyList.begin(); it != candyList.end(); ++it) &#123;</span><br><span class=\"line\">                cout &lt;&lt; *it &lt;&lt; endl;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p>[后记]<br>Python里的join和split很好用，一般的算法原型，完全可以先用python写出来，然后再改成C++，为什么这么干？</p>\n<p>注释：个人劳动成果，转载使用请注明本文作者及出处链接，谢谢合作！</p>\n","text":"作者：糖果 简单的对比了一下Python的List和C++的Vector操作，用Python代替C++的注释。 另外推荐一个在线的编译器，codepad.org。 1.定义数据 Python 1candyList = [&quot;Red Candy&quot;, &quot;G...","link":"","photos":[],"count_time":{"symbolsCount":"3k","symbolsTime":"3 mins."},"categories":[{"name":"topic","slug":"topic","count":308,"path":"api/categories/topic.json"}],"tags":[{"name":"lua","slug":"lua","count":153,"path":"api/tags/lua.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\"><span class=\"toc-text\">Python</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\"><span class=\"toc-text\">C++</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\"><span class=\"toc-text\">Python</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\"><span class=\"toc-text\">C++</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\"><span class=\"toc-text\">Python</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\"><span class=\"toc-text\">C++</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\"><span class=\"toc-text\">Python</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\"><span class=\"toc-text\">C++</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">字典</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\"><span class=\"toc-text\">Python</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\"><span class=\"toc-text\">C++</span></a></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"最简单的LUA随机数生成","uid":"cbbd7e228645caa3cfb0dd345f9fe075","slug":"old_topic/2016-09-17-139","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T06:15:59.735Z","comments":true,"path":"api/articles/old_topic/2016-09-17-139.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":null,"text":"[code]math.randomseed(os.time())for i=1, 5 do print(math.random())end [/code] ","link":"","photos":[],"count_time":{"symbolsCount":78,"symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":308,"path":"api/categories/topic.json"}],"tags":[{"name":"lua","slug":"lua","count":153,"path":"api/tags/lua.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Openresty的ngx_http_lua_balancer代码下载","uid":"d52502bd5958725397262906a370cd45","slug":"old_topic/2016-09-17-140","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T06:15:59.735Z","comments":true,"path":"api/articles/old_topic/2016-09-17-140.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":null,"text":"Openresty代码下载，已经替换过了ngx_http_lua_balancer模块： 点击链接下载： ","link":"","photos":[],"count_time":{"symbolsCount":53,"symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":308,"path":"api/categories/topic.json"}],"tags":[{"name":"lua","slug":"lua","count":153,"path":"api/tags/lua.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}