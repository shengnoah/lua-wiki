{"title":"LUA模拟面向对象：类与对象","uid":"85a31f98ce1faec97b54316baed59b3d","slug":"old_topic/2016-09-17-180","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T06:15:59.738Z","comments":true,"path":"api/articles/old_topic/2016-09-17-180.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":null,"content":"<p>首先还是向大家介绍一下国产LUA框架Vanilla。<br>这次我们来看看Vanilla中如何用Lua 模拟面向对象编程。实现主要是使用lua的setemetatable特性来实现的。下面程序大体的处理流程是：</p>\n<p>类和对象创建流程：<br>1.创建一个Controller在类模板程序。<br>2.在Controller:new方法里，创建返回一个实例对象instance(lua table)，对象使用Controller的函数接口，做为对象实例产生的“类”模板。<br>3.使用new方法的形参，传递新建立对象的属性数据，成员变量。</p>\n<p>[code]<br>local Controller = {}</p>\n<p>function Controller:new(app_config, tst_val)<br>        local instance = {<br>                app_config = app_config,<br>                tst_val = tst_val<br>        }<br>        setmetatable(instance, {__index = self})<br>        return instance<br>end</p>\n<p>function Controller:display(view_tpl, values)<br>end</p>\n<p>function Controller:getTestField()<br>        return self.tst_val<br>end</p>\n<p>return Controller<br>[/code]</p>\n<p>测试类文件的流程：<br>1.用require引入contorller类定义文件。<br>2.创建对象初始化要使用的数据结构：config, val。<br>3.调用Controller类模板的new方法，创建新的对象实例，传入需要形参。<br>4.使用新创建的对象实例的getTestFiled()接口方法，返回我们在第三步传入的测试字符串：“test value”<br>5.输出返回值，确认是否与传入的数据一致。</p>\n<p>[code]<br>Controller = require “controller”</p>\n<p>local config = { ip=”127.0.0.1”, port=”8080” }<br>local val = “test value”</p>\n<p>local obj_instance = Controller:new(config, val)<br>local ret = obj_instance:getTestField()<br>print(ret)</p>\n<p>[/code]</p>\n<p>作者：糖果</p>\n<p>PS:转载到其它平台请注明作者姓名及原文链接，请勿用于商业用途。</p>\n<p><a href=\"https://github.com/idevz/vanilla\">https://github.com/idevz/vanilla</a></p>\n","text":"首先还是向大家介绍一下国产LUA框架Vanilla。这次我们来看看Vanilla中如何用Lua 模拟面向对象编程。实现主要是使用lua的setemetatable特性来实现的。下面程序大体的处理流程是： 类和对象创建流程：1.创建一个Controller在类模板程序。2.在Con...","link":"","photos":[],"count_time":{"symbolsCount":"1.1k","symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":308,"path":"api/categories/topic.json"}],"tags":[],"toc":"","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"nil、null与ngx.null","uid":"834bce8a4e8450443d18797324bd3ee0","slug":"old_topic/2016-09-17-178","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T06:15:59.738Z","comments":true,"path":"api/articles/old_topic/2016-09-17-178.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":null,"text":"问题概述 今天第一次在nginx+lua架构下，写了个需要操作Redis的后台接口，该接口的功能主要是接受客户端的json格式的post请求，实现对保存在redis中的任务插入、删除、查询等。虽然nginx，lua等都是刚接触，但这几个接口还是顺风顺水的坐下来了，不能忘了感谢春哥...","link":"","photos":[],"count_time":{"symbolsCount":"3.6k","symbolsTime":"3 mins."},"categories":[{"name":"topic","slug":"topic","count":308,"path":"api/categories/topic.json"}],"tags":[],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"如何用Lua取得ASCII表中的字符","uid":"4f367eaf18737796ed26e3985923aa72","slug":"old_topic/2016-09-17-181","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T06:15:59.738Z","comments":true,"path":"api/articles/old_topic/2016-09-17-181.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":null,"text":"比如我们要显示ASCII表中的”a”，我们可以使用如下代码： 1print(string.char(97))","link":"","photos":[],"count_time":{"symbolsCount":54,"symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":308,"path":"api/categories/topic.json"}],"tags":[],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}