{"title":"Lua中ipair和pair关键字的区别是什么？","uid":"9898726b61c279db4684cd03b2a439c0","slug":"old_topic/2016-09-17-151","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T07:45:09.210Z","comments":true,"path":"api/articles/old_topic/2016-09-17-151.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<p>ipair是从key=1，开始累加，遇到val是nil就结束循环。<br />\npair输出的结果和table定义的顺序是一致的(非数组不保证与声明的顺序一致)。</p>\n<p>pairs()可以遍历整个table，即包括数组及非数组部分。<br />\nipairs()函数用于遍历table中的数组部分。</p>\n<p>i= integer ,integer key</p>\n<h3>1:使用ipair循环</h3> \n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\"><span class=\"token keyword\">local</span> tt <span class=\"token operator\">=</span>  \n<span class=\"token punctuation\">&#123;</span>  \n    <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"test3\"</span><span class=\"token punctuation\">,</span>  \n    <span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"test4\"</span><span class=\"token punctuation\">,</span>  \n    <span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"test5\"</span>  \n<span class=\"token punctuation\">&#125;</span>  \n\n<span class=\"token keyword\">for</span> i<span class=\"token punctuation\">,</span>v <span class=\"token keyword\">in</span> <span class=\"token function\">ipairs</span><span class=\"token punctuation\">(</span>tt<span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>    \n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span> tt<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">)</span>  \n<span class=\"token keyword\">end</span> \n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>运行结果：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">test3<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3>2:使用pair循环</h3> \n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\"><span class=\"token keyword\">local</span> tt <span class=\"token operator\">=</span>  \n<span class=\"token punctuation\">&#123;</span>  \n    <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"test3\"</span><span class=\"token punctuation\">,</span>  \n    <span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"test4\"</span><span class=\"token punctuation\">,</span>  \n    <span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"test5\"</span>  \n<span class=\"token punctuation\">&#125;</span>  \n\n<span class=\"token keyword\">for</span> i<span class=\"token punctuation\">,</span>v <span class=\"token keyword\">in</span> <span class=\"token function\">pairs</span><span class=\"token punctuation\">(</span>tt<span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>    \n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span> tt<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">)</span>  \n<span class=\"token keyword\">end</span> \n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>运行结果：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">test3\ntest4\ntest5<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>怎么解决，数组里，某个元素是nil后面就不遍历的问题：</p>\n<p>@ms2008老师的方案如下：</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">\nlocal t <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> nil<span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">for</span> k<span class=\"token punctuation\">,</span>v in <span class=\"token function\">ipairs</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"in\"</span><span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">,</span>v<span class=\"token punctuation\">)</span>\nend\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"=============\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token char\">'#'</span><span class=\"token punctuation\">,</span> <span class=\"token function\">unpack</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>\n    local param <span class=\"token operator\">=</span> <span class=\"token function\">select</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> <span class=\"token function\">unpack</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>    \n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>param<span class=\"token punctuation\">)</span>\nend\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>在讨论ipair和pair的过程中，触发了另外一个问题，就是对lua的map型table按照Map的value，而不是key进行排序，对key的排序lua有sort方法提供支持，而对value的排序是没有的，下面提供了一个对value进行排序的演示算法，是用MoonScript实现的排序算法，应用在反描模块中，对指定用户port访问量的大小进行排序：</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">class GUtils \n  @mapsort<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span>board<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span>\n    b_len <span class=\"token operator\">=</span> <span class=\"token number\">0</span> \n    <span class=\"token keyword\">for</span> k<span class=\"token punctuation\">,</span>v <span class=\"token keyword\">in</span> <span class=\"token function\">pairs</span><span class=\"token punctuation\">(</span>board<span class=\"token punctuation\">)</span>\n      b_len <span class=\"token operator\">=</span> b_len <span class=\"token operator\">+</span> <span class=\"token number\">1</span> \n\n    a1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n    a2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n\n    i <span class=\"token operator\">=</span> <span class=\"token number\">0</span> \n    <span class=\"token keyword\">for</span> k<span class=\"token punctuation\">,</span>v <span class=\"token keyword\">in</span> <span class=\"token function\">pairs</span><span class=\"token punctuation\">(</span>board<span class=\"token punctuation\">)</span>\n      i <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span> \n      a1<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> k \n      a2<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> v \n\n    <span class=\"token keyword\">for</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> b_len\n       max <span class=\"token operator\">=</span> a2<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n       <span class=\"token keyword\">for</span> j <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> b_len \n         <span class=\"token keyword\">if</span> a2<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> max \n           tmp <span class=\"token operator\">=</span> a2<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span>\n           a2<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> max \n           a2<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> tmp \n           max <span class=\"token operator\">=</span> tmp \n           tmp1 <span class=\"token operator\">=</span> a1<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span>\n           a1<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span>  <span class=\"token operator\">=</span> a1<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n           a1<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> tmp1\n\n    ret <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">for</span> k<span class=\"token punctuation\">,</span>v <span class=\"token keyword\">in</span> <span class=\"token function\">ipairs</span><span class=\"token punctuation\">(</span>a1<span class=\"token punctuation\">)</span> \n      ret<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>a1<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> a2<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> ret \n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>下面是纯lua实现，而不是用moonc编译的上面的.moon文件：</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\"><span class=\"token keyword\">local</span> board <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> \n  <span class=\"token punctuation\">[</span><span class=\"token string\">'0.0.0.1'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token string\">'0.0.0.5'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token string\">'0.0.0.3'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token string\">'0.0.0.2'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token string\">'0.0.0.9'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token string\">'0.0.0.3'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token string\">'0.0.0.6'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">6</span> \n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">local</span> mapsort\nmapsort <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>board<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">local</span> b_len <span class=\"token operator\">=</span> <span class=\"token number\">0</span> \n  <span class=\"token keyword\">for</span> k<span class=\"token punctuation\">,</span> v <span class=\"token keyword\">in</span> <span class=\"token function\">pairs</span><span class=\"token punctuation\">(</span>board<span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>\n    b_len <span class=\"token operator\">=</span> b_len <span class=\"token operator\">+</span> <span class=\"token number\">1</span> \n  <span class=\"token keyword\">end</span> \n  <span class=\"token keyword\">local</span> a1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">&#125;</span> \n  <span class=\"token keyword\">local</span> a2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">&#125;</span> \n  <span class=\"token keyword\">local</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span> \n  <span class=\"token keyword\">for</span> k<span class=\"token punctuation\">,</span> v <span class=\"token keyword\">in</span> <span class=\"token function\">pairs</span><span class=\"token punctuation\">(</span>board<span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>\n    i <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span> \n    a1<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> k \n    a2<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> v \n  <span class=\"token keyword\">end</span> \n\n  <span class=\"token keyword\">for</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> b_len <span class=\"token keyword\">do</span>\n    <span class=\"token keyword\">local</span> max <span class=\"token operator\">=</span> a2<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">for</span> j <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> b_len <span class=\"token keyword\">do</span>\n      <span class=\"token keyword\">if</span> a2<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> max <span class=\"token keyword\">then</span>\n        <span class=\"token keyword\">local</span> tmp <span class=\"token operator\">=</span> a2<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span>\n        a2<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> max \n        a2<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> tmp\n        max <span class=\"token operator\">=</span> tmp\n        <span class=\"token keyword\">local</span> tmp1 <span class=\"token operator\">=</span> a1<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span>\n        a1<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a1<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n        a1<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> tmp1\n      <span class=\"token keyword\">end</span>\n    <span class=\"token keyword\">end</span>\n  <span class=\"token keyword\">end</span>\n  <span class=\"token keyword\">local</span> ret <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">for</span> k<span class=\"token punctuation\">,</span> v <span class=\"token keyword\">in</span> <span class=\"token function\">ipairs</span><span class=\"token punctuation\">(</span>a1<span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>\n    ret<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n      a1<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      a2<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">end</span>\n  <span class=\"token keyword\">return</span> ret\n<span class=\"token keyword\">end</span>\n\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"########\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">local</span> ret <span class=\"token operator\">=</span> <span class=\"token function\">mapsort</span><span class=\"token punctuation\">(</span>board<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> k<span class=\"token punctuation\">,</span> v <span class=\"token keyword\">in</span> <span class=\"token function\">ipairs</span><span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> ret<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>","text":"ipair是从key=1，开始累加，遇到val是nil就结束循环。 pair输出的结果和table定义的顺序是一致的(非数组不保证与声明的顺序一致)。 pairs()可以遍历整个table，即包括数组及非数组部分。 ipairs()函数用于遍历table中的数组部分。 i= in...","link":"","photos":[],"count_time":{"symbolsCount":"2.5k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">1:使用ipair循环</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">2:使用pair循环</span></a></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Lua的转义符号“%”","uid":"40c3b450ff372f1daa99baee2e917fc2","slug":"old_topic/2016-09-17-150","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T07:45:09.232Z","comments":true,"path":"api/articles/old_topic/2016-09-17-150.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"作者：糖果 Lua有些符号在用户字符替换的时候，可能会发生转义。 今天群里的一位小伙伴，就需要到类似的问题，比如说要将字符串中的’（‘变成’['。 解答问题的伙伴给出如下代码： a = '123.(456)' c = string.gsub(a, '%(', '[') print...","link":"","photos":[],"count_time":{"symbolsCount":255,"symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"LUA的WEB开发框架Vanilla","uid":"087f4f77da99a0fec1375818d3495ed6","slug":"old_topic/2016-09-17-153","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T07:45:09.163Z","comments":true,"path":"api/articles/old_topic/2016-09-17-153.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"作者：糖果 图片：vanilla_logo.jpg 这次我们介绍的框架和以往有些不同，最大的不同是，这是介绍的是一个国产Openresty Lua WEB框架，名字叫做Vanilia 我们先简单的安装，和创建一个建工的工程，然后分析一下项目的源码。 我们假定用户用系统是cento...","link":"","photos":[],"count_time":{"symbolsCount":552,"symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}