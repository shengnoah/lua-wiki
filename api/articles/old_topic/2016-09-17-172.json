{"title":"Lua代码风格指南（代码规范参考）","uid":"a2becc30bdee919f8734dc94a8f8ee13","slug":"old_topic/2016-09-17-172","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T06:15:59.737Z","comments":true,"path":"api/articles/old_topic/2016-09-17-172.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":null,"content":"<h3>写代码也有风格？</h3> \n\n<p>当然，写代码就跟写文章一样，每个人或多或少都有自己的风格。不同的语言也就像不同的文体一样，也有自己的独特的风格。Lua是一门脚本语言，写起来轻松惬意，但不代表它没有属于自己的风格指南。</p>\n<p>好的代码风格基于可读性和一致性。代码更多的时间是给人看的，如果思考好了结构和逻辑，写代码的过程其实很快。风格的一致性也很重要，这样可以减少复杂度和理解成本。养成一种良好的代码风格会形成一种良好写代码习惯，这种习惯会使编码事半功倍。</p>\n<p>下文将从命名，作用域，模块，注释和惯用法（精巧用法）等方面来说明Lua的代码风格，文章的最后会附上一些参考资料的链接以供读者拓展阅读。</p>\n<h3>命名</h3> \n\n<p>最好的代码是自说明代码，这种代码不需要多余的注释，其本身便具备了描述作者意图的信息。一种好的命名风格是自说明代码的基础。</p>\n<h3>命名法</h3> \n\n<h4>驼峰命名法</h4> \n\n<p>小驼峰式命名法：第一个单字以小写字母开始；第二个单字的首字母大写，例如：firstName、lastName。<br>大驼峰式命名法：每一个单字的首字母都采用大写字母，例如：FirstName、LastName、CamelCase，也被称为Pascal命名法。</p>\n<h4>下划线命名法</h4> \n\n<p>小下划线命名法：所有字母均为小写，例如登录按钮：login_btn。<br>大下划线命名法：所有字母均为大写，常见于常量，例如：最小间隔时间MIN_GAP_TIME。<br>采用驼峰法或者下划线法都不太重要，重要的是你采用了自己喜欢的一种命名法，然后一直保持下去。</p>\n<h3>变量名长度</h3> \n\n<p>通常作用域范围更大的变量名要比作用域范围更小的变量名具有更多的描述信息。例如：i经常用于循环中充当计数变量，而将其作为全局变量使用容易导致诸多问题。</p>\n<h3>变量命名</h3> \n\n<p>对于变量（包括函数），小驼峰式命名法或小下划线命名法是一个好选择。比如：curSpeed表示当前速度，canDrop表示是否能掉落等等。</p>\n<p>对于布尔值型的变量，通常前缀加上is可以方便理解，比如isRemoved比Removed更加能表示这是一个布尔值变量。</p>\n<p>Lua中有一种特殊的变量名：_，常用来表示可以被忽略的、不会使用到的变量，常使用在循环中。</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- `_`表示表的键可以被忽略，只在循环内使用表中的值`v`</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> _,v <span class=\"keyword\">in</span> <span class=\"built_in\">ipairs</span>(t) <span class=\"keyword\">do</span> <span class=\"built_in\">print</span>(v) <span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<p>在表的循环中和函数参数列表中，i常表示ipairs下的数组下标，k常表示pairs下的键，v常表示对应的值，t则表示表。</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> k,v <span class=\"keyword\">in</span> <span class=\"built_in\">pairs</span>(t) <span class=\"keyword\">do</span> ... <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i,v <span class=\"keyword\">in</span> <span class=\"built_in\">ipairs</span>(t) <span class=\"keyword\">do</span> ... <span class=\"keyword\">end</span></span><br><span class=\"line\">mt.<span class=\"built_in\">__newindex</span> = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(t, k, v)</span></span> ... <span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<h3>常数命名</h3> \n\n<p>Lua里没有严格的常数定义标识符，所以对于常数的命名格外重要。</p>\n<p>常数一般采用大下划线命名法。这样每个字母都大写，十分醒目，且各个单词都用下划线分割，便于阅读。</p>\n<p>比如：MAX_SPEED表示最大速度，IS_SHOW_DEBUG_ERROR_MSG表示是否显示报错消息等等。</p>\n<h3>类名</h3> \n\n<p>为了不与变量名和常数名混淆，类名通常使用大驼峰式命名法，即首字母大写。比如：TouchManager表示触摸管理器类。</p>\n<h3>包和模块名</h3> \n\n<p>包名和模块名通常很短，并且全部小写，单词间并没有下划线区分。比如：文件读取库名为lfs，表示Lua File System；XML解析库名为lxp，表示Lua XML Parser等等。</p>\n<h3>文件名</h3> \n\n<p>通常为了不与类名混淆，对于文件名，经常使用小驼峰式命名法或小下划线命名法。</p>\n<h3>作用域</h3> \n\n<p>Lua的作用域以关键字end进行标识。</p>\n<p>对于变量，有一条原则：在一切能使用local修饰的情况下，使用local进行修饰。</p>\n<p>因为不用local修饰的变量会自动变成全局变量。全局变量十分危险，很容易被篡改而不知道在哪里被篡改了，这很容易导致顽固的bug出现。并且全局变量的处理速度也比局部变量的速度要慢很多。</p>\n<p>所以，尽可能的用local来修饰变量。</p>\n<p>有时候，用do .. end可以用来明确限定局部变量的作用域。</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">local</span> v</span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">  <span class=\"keyword\">local</span> x = u2*v3-u3*v2</span><br><span class=\"line\">  <span class=\"keyword\">local</span> y = u3*v1-u1*v3</span><br><span class=\"line\">  <span class=\"keyword\">local</span> z = u1*v2-u2*v1</span><br><span class=\"line\">  v = &#123;x,y,z&#125;</span><br><span class=\"line\"><span class=\"keyword\">end</span> <span class=\"comment\">-- x,y,z的作用域结束，被系统清理</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">local</span> count</span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">  <span class=\"keyword\">local</span> x = <span class=\"number\">0</span></span><br><span class=\"line\">  count = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span> x = x + <span class=\"number\">1</span>; <span class=\"keyword\">return</span> x <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span> <span class=\"comment\">-- x的作用域结束，被系统清理</span></span><br></pre></td></tr></table></figure>\n<h3>模块</h3> \n\n<p>Lua中有一个叫module的公有函数，此函数的作用是将一组变量和函数打包在一个模块名下，便于其他文件require。但是这个函数受到了诸多的指责，原因是其会创建一个公共变量，并且这个公共变量中的所有细节都会暴露出来。这其实十分不符合面向对象的规范。</p>\n<p>以下有一种办法可以避免这个问题，即不采用module函数进行打包。</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- hello/mytest.lua</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">local</span> M = &#123;&#125; <span class=\"comment\">-- 私有变量</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">local</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span><span class=\"params\">()</span></span> <span class=\"built_in\">print</span>(<span class=\"number\">123</span>) <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">M.test1</span><span class=\"params\">()</span></span> test() <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">M.test2</span><span class=\"params\">()</span></span> M.test1(); M.test1() <span class=\"keyword\">end</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">return</span> M <span class=\"comment\">-- 关键</span></span><br></pre></td></tr></table></figure>\n<p>以下是导入此模块的方法。</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">local</span> MT = <span class=\"built_in\">require</span> <span class=\"string\">&quot;hello.mytest&quot;</span></span><br><span class=\"line\">MT.test2()</span><br></pre></td></tr></table></figure>\n<p>Lua内没有类这个变量类型，但是通过Lua的metatable可以轻松实现类的继承，多态等等特性。关于Lua中类的实现原理，请参考我之前写的这篇博客：Lua中实现类的原理。</p>\n<h3>注释</h3> \n\n<p>通常在–前加上一个空格。</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"literal\">nil</span>  <span class=\"comment\">-- not found    (建议)</span></span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"literal\">nil</span>  <span class=\"comment\">--not found     (不建议)</span></span><br></pre></td></tr></table></figure>\n<p>注释通常用在函数接口，或者复杂，精巧的逻辑上。</p>\n<p>对于接口的注释，可以按照javadoc类似的来写。</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- Deletes a session.</span></span><br><span class=\"line\"><span class=\"comment\">-- @param id Session identification.</span></span><br><span class=\"line\"><span class=\"comment\">-------------------------------------</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">delete</span> <span class=\"params\">(id)</span></span></span><br><span class=\"line\">    <span class=\"built_in\">assert</span> (check_id (id))</span><br><span class=\"line\">    <span class=\"built_in\">remove</span> (filename (id))</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<h3>惯用法（精巧用法）</h3> \n\n<p>尽可能使用local修饰变量（重要的事情要说三遍！）</p>\n<h4>原因：</h4> \n\n<p>使用local的变量会在作用域结束时释放其内存<br>使用local的变量会比全局变量的存取更快<br>全局变量会污染全局的命名空间，可能会导致诡异的bug出现<br>直接判断真假值</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 不推荐</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> obj ~= <span class=\"literal\">nil</span> <span class=\"keyword\">and</span> willBreak == <span class=\"literal\">false</span> <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"comment\">-- ...</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">-- 推荐</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> obj <span class=\"keyword\">and</span> <span class=\"keyword\">not</span> willBreak <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"comment\">-- ...</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<h4>原因：</h4> Lua在逻辑判断时将所有非false和nil的逻辑判断视为真，反之视为假，不需要再与布尔值和nil进行比对。\n\n<p>但是，在需要对false和nil进行区分时，需要写明==：obj == nil和obj == false。</p>\n<h3>默认参数的实现</h3> \n\n<p>范式：param = param or defaultValue</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setName</span><span class=\"params\">(name)</span></span></span><br><span class=\"line\">    name = name <span class=\"keyword\">or</span> <span class=\"string\">&#x27;noName&#x27;</span></span><br><span class=\"line\">    <span class=\"comment\">-- ...</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<p>原因：or会在第一次为true的时候断路，返回其判断的最后一个值。所以当name为空时，name or ‘noName’返回为’noName’，这会将name的值自动设置为noName。</p>\n<h4>一行代码实现表的拷贝</h4> \n\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">u = &#123;<span class=\"built_in\">unpack</span>(t)&#125;</span><br></pre></td></tr></table></figure>\n<p>需要注意的是此法在表内条目大于2000时会失效。</p>\n<p>一行代码判断表是否为空</p>\n<p>用#t == 0并不能判断表是否为空，因为#预算符会忽略所有不连续的数字下标和非数字下标。</p>\n<h4>正确做法是：</h4> \n\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"built_in\">next</span>(t) == <span class=\"literal\">nil</span> <span class=\"keyword\">then</span> </span><br><span class=\"line\">    <span class=\"comment\">-- 表为空</span></span><br><span class=\"line\">    <span class=\"comment\">-- ...</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<p>因为表的键可能为false，所以必须与nil比较，而不直接使用~next(t)来判断表是否空。</p>\n<p>更快的插入代码</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 更慢，不推荐</span></span><br><span class=\"line\"><span class=\"built_in\">table</span>.<span class=\"built_in\">insert</span>(t, value) </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">-- 更快，推荐</span></span><br><span class=\"line\">t[#t+<span class=\"number\">1</span>] = value </span><br></pre></td></tr></table></figure>\n<p>原因：[]和#避免了高层的函数调用开销。</p>\n<h3>参考资料</h3> \n\n<p>这篇文章是基于Lua Style Guide而来。</p>\n<p>语言的风格大致是通用的，在Python里，有一种叫pythonic的代码风格，详见：让你的python代码更加pythonic。</p>\n<p>对于任何程序员，我都力荐《代码大全》这本书。在里面，你可以找到十分完备的从设计，架构到具体编码，注释，到团队协作等等相关的引导。</p>\n<p>还有几本书：《程序员修炼之道》，《高效程序员的45个习惯》，《重构》。它们可以作为《代码大全》的补集存在。</p>\n<p>关于《高效程序员的45个习惯》这本书，我进行了总结和提炼，阅读之前不妨看看这篇读书笔记。</p>\n<p>编辑：糖果</p>\n<p>作者：<a href=\"http://wuzhiwei.net/\" target=\"_blank\">Tim’s Blog</a></p>\n","text":"写代码也有风格？ 当然，写代码就跟写文章一样，每个人或多或少都有自己的风格。不同的语言也就像不同的文体一样，也有自己的独特的风格。Lua是一门脚本语言，写起来轻松惬意，但不代表它没有属于自己的风格指南。 好的代码风格基于可读性和一致性。代码更多的时间是给人看的，如果思考好了结构和...","link":"","photos":[],"count_time":{"symbolsCount":"3.9k","symbolsTime":"4 mins."},"categories":[{"name":"topic","slug":"topic","count":308,"path":"api/categories/topic.json"}],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">写代码也有风格？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">命名</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">命名法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\"><span class=\"toc-text\">驼峰命名法</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\"><span class=\"toc-text\">下划线命名法</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">变量名长度</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">变量命名</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">常数命名</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">类名</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">包和模块名</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">文件名</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">作用域</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">模块</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">注释</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">惯用法（精巧用法）</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\"><span class=\"toc-text\">原因：</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\"><span class=\"toc-text\">原因：</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">默认参数的实现</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\"><span class=\"toc-text\">一行代码实现表的拷贝</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\"><span class=\"toc-text\">正确做法是：</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">参考资料</span></a></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"为何巴西人能做出 Lua 这种出彩的东西？","uid":"f81311e15bc564f4e3d4ae96d3d0048c","slug":"old_topic/2016-09-17-170","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T06:15:59.737Z","comments":true,"path":"api/articles/old_topic/2016-09-17-170.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":null,"text":"著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。作者：冯东链接：http://www.zhihu.com/question/24596411/answer/36516759来源：知乎 再推荐一次这本书：Coding Places: Software Pract...","link":"","photos":[],"count_time":{"symbolsCount":"1.3k","symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":308,"path":"api/categories/topic.json"}],"tags":[],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"项目","uid":"ae4d85e0c91441200158f7ee6ba4f723","slug":"old_topic/2016-09-17-173","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T06:15:59.737Z","comments":true,"path":"api/articles/old_topic/2016-09-17-173.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":null,"text":"Java版本的ＨＴＴＰ访问客户端(curl) Nginx NP Dashboard Openresty Windows版 gbc-core","link":"","photos":[],"count_time":{"symbolsCount":104,"symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":308,"path":"api/categories/topic.json"}],"tags":[],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}