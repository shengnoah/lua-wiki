{"title":"Lua Lapis安装与项目创建","uid":"a7008d71061814b111858c062823c704","slug":"old_topic/2016-09-17-128","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T07:45:09.183Z","comments":true,"path":"api/articles/old_topic/2016-09-17-128.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":null,"content":"<p>Lapis是程序员leafo写的一个lua语言的WEB框架，目前已经发布了1.3版本。要求的服务器开发环境是Openresty，而且支持moonscript,这个moonscript语言类似于Javascript的coffescript。起到的作用是，可以用简短moonscript实现你的任务，然后通过翻译程序把moonscript翻译成lua语言。</p>\n<p>Lapis还提供了命令行工具，用来管理nginx实例的启动，关闭，重新加载。</p>\n<p>1.安装luarocks.</p>\n<p>在Lua语言生态工具中，有一个类似于Python的Pip一样的引用管理工具，叫做Luarocks。这个工具可以方便的安装，目前在Lua世界中很多的软件包。而如果正好使用的Linux是Ubuntu系统，使用sudo apt-get install luarocks就可以安装Luarocks了。</p>\n<p>2.Lapis的安装:</p>\n<p>当在Linux系统上安装完luarocks之后，使用如下命令就可以安装lapis:</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">luarocks install lapis</span><br></pre></td></tr></table></figure>\n<p>因为lapis是在有openresty基础上运行，我们假设现在openresty已经安装好了。而lapis提供了命令行程序，提供了快捷的方式创建nginx工程实例和配置文件，并且可以通过lapis命令行，管理服务。</p>\n<p>3.创建工程。</p>\n<p>lapis命令行的名字是“lapis”</p>\n<p>我们在shell环境下运行lapis命令航工具。</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lapis help</span><br></pre></td></tr></table></figure>\n<p>这条命令显示lapis都有哪些子功能，首先我们先用命令创建一个lua的WEB工程。</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lapis new</span><br></pre></td></tr></table></figure>\n<p>命令执行后，会在当前目录创建一个空应用，会生成三个文件。</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.moon</span><br><span class=\"line\"></span><br><span class=\"line\">mime.types</span><br><span class=\"line\"></span><br><span class=\"line\">nginx.conf</span><br></pre></td></tr></table></figure>\n<p>app.moon是自动生成的一个moonscript脚本，可以通过程序翻译成lua程序。</p>\n<p>mime.types是文件类型描述汇集，会在nginx.conf中include包含进去。</p>\n<p>nginx.conf就是典型的nginx配置文件。</p>\n<p>目前这个阶段可能最需要讲的一下就是nginx.conf文件。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">worker_processes $&#123;&#123;NUM_WORKERS&#125;&#125;;error_log stderr notice;daemon off;</span><br><span class=\"line\"></span><br><span class=\"line\">events &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  worker_connections 1024;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">http &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  include mime.types;</span><br><span class=\"line\"></span><br><span class=\"line\">  server &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    listen $&#123;&#123;PORT&#125;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    lua_code_cache $&#123;&#123;CODE_CACHE&#125;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      default_type text/html;</span><br><span class=\"line\"></span><br><span class=\"line\">      content_by_lua &#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">        require(&quot;lapis&quot;).serve(&quot;app&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">      &#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    location /static/ &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      alias static/;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    location /favicon.ico &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      alias static/favicon.ico;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">include mime.types；</span><br></pre></td></tr></table></figure>\n<p>就是引用mime类型文件之前已经说了。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">listen $&#123;&#123;PORT&#125;&#125;;</span><br></pre></td></tr></table></figure>\n<p>定义监听的端口， PORT变量的设置，会在之后说明，如果在config文件中设置PORT变量。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lua_code_cache $&#123;&#123;CODE_CACHE&#125;&#125;;</span><br></pre></td></tr></table></figure>\n<p>code cache的设置也是可以在config文件中配置的。lua_code_cache 设定成on，每次编辑修改lua程序的时候，服务会自动的重载入，这在调试环境下也很有用，省去的重启的麻烦。</p>\n<p>剩下的就是三个路由</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location / &#123;</span><br></pre></td></tr></table></figure>\n<p>这是一个根路由，输入网址后第一个被定为到的页面处理定义。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">content_by_lua &#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">       require(&quot;lapis&quot;).serve(&quot;app&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">     &#x27;;</span><br></pre></td></tr></table></figure>\n<p>这就话就是lua lapis程序的入口，location“/”的意思，你只要是输入服务器的IP：PORT,而不指定其他任何后缀，比如：127.0.0.1/，都会调用执行lapis应用（简单说，任何的请求都会执行app.lua脚本，只要在nginx.conf没有同名locate定义。），就是当前工程目录下app.lua的脚本。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location /static/ &#123;</span><br></pre></td></tr></table></figure>\n<p>这定义了工程静态文件的位置，用于存放CSS,image,js等静态文件的位置。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location /favicon.ico &#123;</span><br></pre></td></tr></table></figure>\n<p>这是一个图片，输入127.0.0.1/favicon.ico,就会在浏览器中显示出。设定我们的服务在前台运行。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">error_log stderr notice;</span><br></pre></td></tr></table></figure>\n<p>这是在设定，log输出重定向输出到屏幕上。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">daemon off;</span><br></pre></td></tr></table></figure>\n<p>这么设定对程序员调试很有用，而在实际的生产环境中，可以关掉此选项。配置文件基本注释完了。启动服务。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lapis server</span><br></pre></td></tr></table></figure>\n<p>用这条命令来启动一个ningx实例服务，用当前的目录的nginx.conf.lapis会在下面的目录，去搜索openresty的nginx执行文件。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;/usr/local/openresty/nginx/sbin/&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">&quot;/usr/local/opt/openresty/bin/&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">&quot;/usr/sbin/&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">&quot;&quot;</span><br></pre></td></tr></table></figure>\n<p>停止服务，用ctrl + c，或是使用命令</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lapis term</span><br></pre></td></tr></table></figure>\n<p>作者：糖果</p>\n<p>PS:转载到其它平台请注明作者姓名及原文链接。</p>\n","text":"Lapis是程序员leafo写的一个lua语言的WEB框架，目前已经发布了1.3版本。要求的服务器开发环境是Openresty，而且支持moonscript,这个moonscript语言类似于Javascript的coffescript。起到的作用是，可以用简短moonscrip...","link":"","photos":[],"count_time":{"symbolsCount":"2.7k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":308,"path":"api/categories/topic.json"}],"tags":[{"name":"lua","slug":"lua","count":124,"path":"api/tags/lua.json"}],"toc":"","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"LUA FAQ","uid":"a7f454cd8b8cc1ba699e660a76d25326","slug":"old_topic/2016-09-17-133","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T07:45:09.179Z","comments":true,"path":"api/articles/old_topic/2016-09-17-133.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":null,"text":"LUA FAQ Lua判断空表的正确姿势 Lua中ipair和pair关键字的区别是什么？ Lua的转义符号“%” Nginx用户权限(文件读写时候应该注意到的问题) 关于 OPENRESTY 的两三事 NGINX配置初始化过程 OPENRESTY 中的简易HTTP加密 ","link":"","photos":[],"count_time":{"symbolsCount":137,"symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":308,"path":"api/categories/topic.json"}],"tags":[{"name":"lua","slug":"lua","count":124,"path":"api/tags/lua.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"NGINX配置初始化过程","uid":"e77113c5554b3f904d7fab1c518f6770","slug":"old_topic/2016-09-17-134","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T07:45:09.213Z","comments":true,"path":"api/articles/old_topic/2016-09-17-134.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":[],"text":"nginx解析配置文件，将解析出来得配置存放在ngx_cycle_s的conf_ctx中，conf_ctx是个四级指针，因为保存这些配置需要context，而这些context是有层级关系，最终的配置结构如图： 图片：27767798_1370416906jegE.png htt...","link":"","photos":[],"count_time":{"symbolsCount":"4.6k","symbolsTime":"4 mins."},"categories":[{"name":"topic","slug":"topic","count":308,"path":"api/categories/topic.json"}],"tags":[{"name":"lua","slug":"lua","count":124,"path":"api/tags/lua.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}