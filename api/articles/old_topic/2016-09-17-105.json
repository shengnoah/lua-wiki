{"title":"Lapis安装与项目创建","uid":"91b599411eb2c81aa42989cad4814460","slug":"old_topic/2016-09-17-105","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T07:45:09.227Z","comments":true,"path":"api/articles/old_topic/2016-09-17-105.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":null,"content":"<p>Lapis是程序员leaf写的一个lua语言的WEB框架，目前已经发布了1.3版本。要求的服务器开发环境是Openresty，而且支持moonscript,这个moonscript语言类似于Javascript的coffescript。起到的作用是，可以用简短moonscript实现你的任务，然后通过翻译程序把moonscript翻译成lua语言。</p>\n<p>Lapis还提供了命令行工具，用来管理nginx实例的启动，关闭，重新加载。</p>\n<p>1.安装luarocks.</p>\n<p>在Lua语言生态工具中，有一个类似于Python的Pip一样的引用管理工具，叫做Luarocks。这个工具可以方便的安装，目前在Lua世界中很多的软件包。而如果正好使用的Linux是Ubuntu系统，使用sudo apt-get install luarocks就可以安装Luarocks了。</p>\n<p>2.Lapis的安装:</p>\n<p>当在Linux系统上安装完luarocks之后，使用如下命令就可以安装lapis:</p>\n<p>luarocks install lapis</p>\n<p>因为lapis是在有openresty基础上运行，我们假设现在openresty已经安装好了。而lapis提供了命令行程序，提供了快捷的方式创建nginx工程实例和配置文件，并且可以通过lapis命令行，管理服务。</p>\n<p>3.创建工程。</p>\n<p>lapis命令行的名字是“lapis”</p>\n<p>我们在shell环境下运行lapis命令航工具。</p>\n<p>lapis help</p>\n<p>这条命令显示lapis都有哪些子功能，首先我们先用命令创建一个lua的WEB工程。</p>\n<p>lapis new</p>\n<p>命令执行后，会在当前目录创建一个空应用，会生成三个文件。</p>\n<p>app.moon</p>\n<p>mime.types</p>\n<p>nginx.conf</p>\n<p>app.moon是自动生成的一个moonscript脚本，可以通过程序翻译成lua程序。</p>\n<p>mime.types是文件类型描述汇集，会在nginx.conf中include包含进去。</p>\n<p>nginx.conf就是典型的nginx配置文件。</p>\n<p>目前这个阶段可能最需要讲的一下就是nginx.conf文件。<br>\n[code]<br>\nworker_processes $;error_log stderr notice;daemon off;</p>\n<p>events {</p>\n<p>worker_connections 1024;}</p>\n<p>http {</p>\n<p>include mime.types;</p>\n<p>server {</p>\n<pre><code>listen $&#123;&#123;PORT&#125;&#125;;\n\nlua_code_cache $&#123;&#123;CODE_CACHE&#125;&#125;;\n\nlocation / &#123;\n\n  default_type text/html;\n\n  content_by_lua '\n\n    require(&quot;lapis&quot;).serve(&quot;app&quot;)\n\n  ';\n\n&#125;\n\nlocation /static/ &#123;\n\n  alias static/;\n\n&#125;\n\nlocation /favicon.ico &#123;\n\n  alias static/favicon.ico;\n\n&#125;\n</code></pre>\n<p>}}<br>\n[/code]<br>\ninclude mime.types；就是引用mime类型文件之前已经说了。</p>\n<p>listen $;</p>\n<p>定义监听的端口， PORT变量的设置，会在之后说明，如果在config文件中设置PORT变量。</p>\n<p>lua_code_cache $;</p>\n<p>code cache的设置也是可以在config文件中配置的。lua_code_cache 设定成on，每次编辑修改lua程序的时候，服务会自动的重载入，这在调试环境下也很有用，省去的重启的麻烦。</p>\n<p>剩下的就是三个路由</p>\n<p>location / {</p>\n<p>这是一个根路由，输入网址后第一个被定为到的页面处理定义。</p>\n<p>content_by_lua ’</p>\n<pre><code>    require(&quot;lapis&quot;).serve(&quot;app&quot;)\n\n  ';\n</code></pre>\n<p>这就话就是lua lapis程序的入口，location“/”的意思，你只要是输入服务器的IP：PORT,而不指定其他任何后缀，比如：127.0.0.1/，都会调用执行lapis应用（简单说，任何的请求都会执行app.lua脚本，只要在nginx.conf没有同名locate定义。），就是当前工程目录下app.lua的脚本。</p>\n<p>location /static/ {</p>\n<p>这定义了工程静态文件的位置，用于存放CSS,image,js等静态文件的位置。</p>\n<p>location /favicon.ico {</p>\n<p>这是一个图片，输入127.0.0.1/favicon.ico,就会在浏览器中显示出。设定我们的服务在前台运行。</p>\n<p>error_log stderr notice;</p>\n<p>这是在设定，log输出重定向输出到屏幕上。</p>\n<p>daemon off;</p>\n<p>这么设定对程序员调试很有用，而在实际的生产环境中，可以关掉此选项。配置文件基本注释完了。启动服务。</p>\n<p>lapis server</p>\n<p>用这条命令来启动一个ningx实例服务，用当前的目录的nginx.conf.lapis会在下面的目录，去搜索openresty的nginx执行文件。</p>\n<p>“/usr/local/openresty/nginx/sbin/”</p>\n<p>“/usr/local/opt/openresty/bin/”</p>\n<p>“/usr/sbin/”</p>\n<p>“”</p>\n<p>停止服务，用ctrl + c，或是使用命令lapis term 。</p>\n<p>作者：糖果</p>\n<p>PS:转载到其它平台请注明作者姓名及原文链接。</p>\n","text":"Lapis是程序员leaf写的一个lua语言的WEB框架，目前已经发布了1.3版本。要求的服务器开发环境是Openresty，而且支持moonscript,这个moonscript语言类似于Javascript的coffescript。起到的作用是，可以用简短moonscript...","link":"","photos":[],"count_time":{"symbolsCount":"2.4k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":308,"path":"api/categories/topic.json"}],"tags":[{"name":"lua","slug":"lua","count":124,"path":"api/tags/lua.json"}],"toc":"","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"如何创建部署WSGI类型的（Django, Tornado, Flask）Python应用","uid":"834dc1c98ae0dfc3f6c8b6dfa350a594","slug":"old_topic/2016-09-17-110","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T07:45:09.207Z","comments":true,"path":"api/articles/old_topic/2016-09-17-110.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":null,"text":"作者：糖果 第一部分：安装必要工具。 1.因为这是部署Python开发环境，所以安装pip可以简化一些软件的安装过程。（PIP对应Lua的luarocks） 1sudo apt-get install python-pip 安装三个Python框架 123sudo pip ins...","link":"","photos":[],"count_time":{"symbolsCount":"2.1k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":308,"path":"api/categories/topic.json"}],"tags":[{"name":"lua","slug":"lua","count":124,"path":"api/tags/lua.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"《Lua游戏AI开发指南 --- Lua调用C/C++函数》","uid":"e724a88ffa1659f5de4d93477c189f2b","slug":"old_topic/2016-09-17-111","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T07:45:09.230Z","comments":true,"path":"api/articles/old_topic/2016-09-17-111.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":null,"text":"作者：糖果 Exposing C++ functions to Lua takes place through a process called function binding. Any bound functions exposed to Lua become accessi...","link":"","photos":[],"count_time":{"symbolsCount":"3.5k","symbolsTime":"3 mins."},"categories":[{"name":"topic","slug":"topic","count":308,"path":"api/categories/topic.json"}],"tags":[{"name":"lua","slug":"lua","count":124,"path":"api/tags/lua.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}