{"title":"Lapis安装与项目创建","uid":"91b599411eb2c81aa42989cad4814460","slug":"old_topic/2016-09-17-105","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-18T05:30:32.435Z","comments":true,"path":"api/articles/old_topic/2016-09-17-105.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<p>Lapis是程序员leaf写的一个lua语言的WEB框架，目前已经发布了1.3版本。要求的服务器开发环境是Openresty，而且支持moonscript,这个moonscript语言类似于Javascript的coffescript。起到的作用是，可以用简短moonscript实现你的任务，然后通过翻译程序把moonscript翻译成lua语言。</p>\n<p>Lapis还提供了命令行工具，用来管理nginx实例的启动，关闭，重新加载。</p>\n<p>1.安装luarocks.</p>\n<p>在Lua语言生态工具中，有一个类似于Python的Pip一样的引用管理工具，叫做Luarocks。这个工具可以方便的安装，目前在Lua世界中很多的软件包。而如果正好使用的Linux是Ubuntu系统，使用sudo apt-get install luarocks就可以安装Luarocks了。</p>\n<p>2.Lapis的安装:</p>\n<p>当在Linux系统上安装完luarocks之后，使用如下命令就可以安装lapis:</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">luarocks install lapis<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>因为lapis是在有openresty基础上运行，我们假设现在openresty已经安装好了。而lapis提供了命令行程序，提供了快捷的方式创建nginx工程实例和配置文件，并且可以通过lapis命令行，管理服务。</p>\n<p>3.创建工程。</p>\n<p>lapis命令行的名字是“lapis”</p>\n<p>我们在shell环境下运行lapis命令航工具。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">lapis help<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>这条命令显示lapis都有哪些子功能，首先我们先用命令创建一个lua的WEB工程。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">lapis new<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>命令执行后，会在当前目录创建一个空应用，会生成三个文件。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">app.moon\n\nmime.types\n\nnginx.conf<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>app.moon是自动生成的一个moonscript脚本，可以通过程序翻译成lua程序。</p>\n<p>mime.types是文件类型描述汇集，会在nginx.conf中include包含进去。</p>\n<p>nginx.conf就是典型的nginx配置文件。</p>\n<p>目前这个阶段可能最需要讲的一下就是nginx.conf文件。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">\nworker_processes <span class=\"token variable\">$&#123;&#123;NUM_WORKERS&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>error_log stderr notice<span class=\"token punctuation\">;</span>daemon off<span class=\"token punctuation\">;</span>\n\nevents <span class=\"token punctuation\">&#123;</span>\n\n  worker_connections <span class=\"token number\">1024</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n\nhttp <span class=\"token punctuation\">&#123;</span>\n\n  include mime.types<span class=\"token punctuation\">;</span>\n\n  server <span class=\"token punctuation\">&#123;</span>\n\n    listen <span class=\"token variable\">$&#123;&#123;PORT&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    \n    lua_code_cache <span class=\"token variable\">$&#123;&#123;CODE_CACHE&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    \n    location / <span class=\"token punctuation\">&#123;</span>\n    \n      default_type text/html<span class=\"token punctuation\">;</span>\n    \n      content_by_lua <span class=\"token string\">'\n    \n        require(\"lapis\").serve(\"app\")\n    \n      '</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token punctuation\">&#125;</span>\n    \n    location /static/ <span class=\"token punctuation\">&#123;</span>\n    \n      <span class=\"token builtin class-name\">alias</span> static/<span class=\"token punctuation\">;</span>\n    \n    <span class=\"token punctuation\">&#125;</span>\n    \n    location /favicon.ico <span class=\"token punctuation\">&#123;</span>\n    \n      <span class=\"token builtin class-name\">alias</span> static/favicon.ico<span class=\"token punctuation\">;</span>\n    \n    <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>include mime.types；就是引用mime类型文件之前已经说了。</p>\n<p>listen $;</p>\n<p>定义监听的端口， PORT变量的设置，会在之后说明，如果在config文件中设置PORT变量。</p>\n<p>lua_code_cache $;</p>\n<p>code cache的设置也是可以在config文件中配置的。lua_code_cache 设定成on，每次编辑修改lua程序的时候，服务会自动的重载入，这在调试环境下也很有用，省去的重启的麻烦。</p>\n<p>剩下的就是三个路由</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">location / <span class=\"token punctuation\">&#123;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>这是一个根路由，输入网址后第一个被定为到的页面处理定义。</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">content_by_lua '\n\n       <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"lapis\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">serve</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"app\"</span><span class=\"token punctuation\">)</span>\n   \n     '<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>这就话就是lua lapis程序的入口，location“/”的意思，你只要是输入服务器的IP：PORT,而不指定其他任何后缀，比如：127.0.0.1/，都会调用执行lapis应用（简单说，任何的请求都会执行app.lua脚本，只要在nginx.conf没有同名locate定义。），就是当前工程目录下app.lua的脚本。</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">location <span class=\"token operator\">/</span>static<span class=\"token operator\">/</span> <span class=\"token punctuation\">&#123;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>这定义了工程静态文件的位置，用于存放CSS,image,js等静态文件的位置。</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">location <span class=\"token operator\">/</span>favicon<span class=\"token punctuation\">.</span><span class=\"token function\">ico</span> <span class=\"token punctuation\">&#123;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>这是一个图片，输入127.0.0.1/favicon.ico,就会在浏览器中显示出。设定我们的服务在前台运行。</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">error_log stderr notice<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>这是在设定，log输出重定向输出到屏幕上。</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">daemon off<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>这么设定对程序员调试很有用，而在实际的生产环境中，可以关掉此选项。配置文件基本注释完了。启动服务。</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">lapis server<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>用这条命令来启动一个ningx实例服务，用当前的目录的nginx.conf.lapis会在下面的目录，去搜索openresty的nginx执行文件。</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">\n<span class=\"token string\">\"/usr/local/openresty/nginx/sbin/\"</span>\n\n<span class=\"token string\">\"/usr/local/opt/openresty/bin/\"</span>\n\n<span class=\"token string\">\"/usr/sbin/\"</span>\n\n<span class=\"token string\">\"\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>停止服务，用ctrl + c，或是使用命令lapis term 。</p>\n<p>作者：糖果</p>\n<p>PS:转载到其它平台请注明作者姓名及原文链接。</p>\n","text":"Lapis是程序员leaf写的一个lua语言的WEB框架，目前已经发布了1.3版本。要求的服务器开发环境是Openresty，而且支持moonscript,这个moonscript语言类似于Javascript的coffescript。起到的作用是，可以用简短moonscript...","link":"","photos":[],"count_time":{"symbolsCount":"2.5k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua","slug":"lua","count":124,"path":"api/tags/lua.json"},{"name":"lapis","slug":"lapis","count":3,"path":"api/tags/lapis.json"}],"toc":"","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Lua的WEB开发框架Lapis","uid":"b4445ca5bb585105ce99f8d1e2a341b6","slug":"old_topic/2016-09-17-104","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T07:45:09.220Z","comments":true,"path":"api/articles/old_topic/2016-09-17-104.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"在过去的一段时间里，使用Lua语言开发WEB程序。原因是因为我们需要写一个WEB的防火系统，其中的一个实现方案是 Openresty＋lua的方案。 Openresty是一种高性能的WEB服务器程序，和Nginx有着很深的渊源，简单的理解的就是Openresty 使用了Nginx...","link":"","photos":[],"count_time":{"symbolsCount":"1.8k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua","slug":"lua","count":124,"path":"api/tags/lua.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Lua功能模块之“加密”","uid":"70c113f1b89df0b719f9ae169720a491","slug":"old_topic/2016-09-17-106","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-27T03:32:32.355Z","comments":true,"path":"api/articles/old_topic/2016-09-17-106.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"作者：糖果 在Lua开发的世界中，有很多开源的模块，分布在一些网站（比如开普勒项目），github上，有的都已经配置好了，可以向python的pip工具一样，只不过在lua世界中使用luarocks安装工具快速的安装。 我们在开发的工作中，难免要对一些数据进行加密处理，而加密模块...","link":"","photos":[],"count_time":{"symbolsCount":"2.5k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua","slug":"lua","count":124,"path":"api/tags/lua.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}