{"title":"在Heroku云上部署Lua应用","uid":"2707eecc13e3136ac3d2044a4e3fff26","slug":"old_topic/2016-09-17-223","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T07:45:09.208Z","comments":true,"path":"api/articles/old_topic/2016-09-17-223.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":null,"content":"<p>在Heroku云上部署Lua应用</p>\n<p>Running Lua on Heroku</p>\n<p>Posted February 05, 2012 by leafo (@moonscript)</p>\n<blockquote>Since the release of Heroku’s Cedar platform they've opened up the opportunity for users to run web applications on any stack. Using something called a buildpack we can describe a template for deploying any kind of application. I saw this as a great opportunity to try using Lua on a cloud hosting platform (for free).</blockquote> \n<p>因为Heroku发布的Cedar平台，开放了为用户运行任意web应用的栈技术支持，buildpack使我们可以用模板来描述任意类型的应用部署，关键的是这东西,在云上运行lua还免费。</p>\n<blockquote>I put together heroku-buildpack-lua, a buildpack containing Lua 5.1 andLuaRocks (a Lua package manager) enable you to quickly deploy Lua along with any required dependencies that can be found on theLuaRocks server.</blockquote> \n<p>我做了一个heroku-buidlparck-lua的构建包，包里有lua 5.1和luarocks（LUA包管理器），充许你快速的部署一个lua程序，并且任何相关的依赖，都可以在LuaRocsks服务器上找到。</p>\n<blockquote>Here’s a tutorial on getting a very simple app running:</blockquote> \n下面的是运行一个简单app的教程。\n<p>Feb 12 2012 — I’ve updated the buildpack and this post to simplify the process.</p>\n<blockquote> \n1.Creating An App\n2.Describing Dependencies\n3.Creating A Web Server\n4.Deploying The Web Server\n5.What’s Next?\n</blockquote> \n<p>1.创建APP<br>\n2.描述依赖<br>\n3.创建一个WEB服务器<br>\n4.部署WEB服务器<br>\n5.后续</p>\n<h3>1.创建APP</h3> \nCreating An App\n<blockquote>Assuming you've installed heroku we start by creating a new app:</blockquote> \n<p>假设你已经安装了heroku,我们就开始创建一个应用。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ heroku create --stack cedar --buildpack </span><br><span class=\"line\">http://github.com/leafo/heroku-buildpack-lua.git</span><br></pre></td></tr></table></figure>\n<blockquote>Clone the repository it created and we're ready to begin. (stark-dust-4830 was the randomly generated name of my app, replace it with yours.)</blockquote> \n<p>克隆分支，创建后我们开始读取。(stark-dust-4830是一个随机生成app名称)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git clone git@heroku.com:stark-dusk-4830.git</span><br><span class=\"line\">$cd stark-dust-4830</span><br></pre></td></tr></table></figure>\n<h3>2.描述依赖</h3> \nDescribing Dependencies\n<blockquote>Heroku manages a collection of app servers for us, called web dynos in their terminology. Each application server must expose itself to the outside world. This is done by running a web server on the dyno.</blockquote>  \n<p>Heroku为我们管理服务器上的应用集合， 术语叫做web dynos，每个应用服务必须对外界暴露自己，这是运行在dyno上的WEB服务。</p>\n<blockquote>The Xavante project is simple web server written in Lua with a couple dependencies.</blockquote> \nXavate project是一个简单的用lua弄的web服务，两依赖。\n<blockquote>Using LuaRocks bundled in the Lua buildpack, we can easily install Xavante and all its dependencies. We describe the dependencies of our Lua project by creating a rockspec for it.</blockquote> \n<p>LuaRocks被绑定在lua级的buidlpack中， 我们可以很容易的安装Xavante和所有她的依赖， 我们创建一个rockkspec的文件来描述我们lua工程的依赖。</p>\n<blockquote>A rockspec is a special Lua file ending in .rockspec that describes meta-data about a Lua module. This meta-data includes things like the project name, the maintainer. It also holds any dependencies and how to build the module.</blockquote> \n<p>rockspeck是一个特殊的扩名是.rockspec的lua文件，描述关于lua模块的头信息，这个头信息包括了像项目名、维护者，甚至任何的关于如何创建模块的所需的依赖信息。</p>\n<blockquote>The Lua buildpack understands the rockspec format, but only looks at the dependencies. Thus, for simplicity we'll only define the dependencies.\nGo ahead and create app.rockspec and place inside of it:</blockquote> \n<p>Lua的构建包知道rockspec的格式，但是只能是依赖，我们的只能定义依赖，以下是之前创建的app.rockspec的内容。</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- app.rockspec</span></span><br><span class=\"line\">dependencies = &#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;xavante&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>Xavante will be our only dependency. We're going to keep this tutorial short and leave out the web frameworks. Xavante’s API is flexible enough that it functions as a makeshift framework.</blockquote> \n<p>Xavante 是我们唯一的依赖，我们这教程不使用lua web框架。Xavante的API很灵活，是够应付一般函数的简易框架。</p>\n<blockquote>If you commit and push, you'll see the buildpack fetch and build all the dependencies. There will be a lot of output, don’t be be concerned.</blockquote> \n<p>如果你提交了代码，会看到build会取得重建所有的依赖，会有很多的输出，可无视。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git add app.rockspec</span><br><span class=\"line\">$ git commit -m &quot;init&quot;$ git push origin master</span><br></pre></td></tr></table></figure>\n<p>…</p>\n<p>-----&gt; Heroku receiving push<br>\n-----&gt; Fetching custom buildpack… done<br>\n-----&gt; Lua app detected<br>\n-----&gt; Copying lua to bin<br>\n-----&gt; Installing packages<br>\nInstalling <a href=\"http://www.luarocks.org/repositories/rocks/xavante-2.2.1-1.all.rock\">http://www.luarocks.org/repositories/rocks/xavante-2.2.1-1.all.rock</a>…</p>\n<p>… output truncated …</p>\n<p>-----&gt; Discovering process types<br>\nProcfile declares types -&gt; (none)<br>\n-----&gt; Compiled slug size is 292K<br>\n-----&gt; Launching… done, v5<br>\n<a href=\"http://stark-dusk-4830.herokuapp.com\">http://stark-dusk-4830.herokuapp.com</a> deployed to</p>\n<blockquote>Heroku</blockquote> \n<blockquote>Our dependencies work, but we still haven’t set up a web server. This we'll do by writing some Lua.</blockquote> \n<p>依赖配置好了，但还需要配置web服务器，那我们就用lua写点啥。</p>\n<h3>3.创建WEB服务</h3> \nCreating A Web Server\n<blockquote>We'll use Xavante’s programmatic API to create and run our server through a simple Lua script\n<p>Create a file, web.lua, and place in it:</p>\n</blockquote> \n<p>我们用Xavnate的可编程API来创建和运行我们的简单的lua脚本。创建一个web.lua文件。</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- web.lua</span></span><br><span class=\"line\"><span class=\"built_in\">require</span><span class=\"string\">&quot;xavante&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">require</span><span class=\"string\">&quot;xavante.filehandler&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">port =...</span><br><span class=\"line\"></span><br><span class=\"line\">xavante.HTTP &#123;</span><br><span class=\"line\">  server = &#123; host =<span class=\"string\">&quot;*&quot;</span>, port =<span class=\"built_in\">tonumber</span>(port) &#125;,</span><br><span class=\"line\">  defaultHost = &#123;</span><br><span class=\"line\">    rules = &#123;</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"built_in\">match</span> =<span class=\"string\">&quot;/$&quot;</span>,</span><br><span class=\"line\">        with =<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(req, res)</span></span></span><br><span class=\"line\">          res.headers[<span class=\"string\">&quot;Content-type&quot;</span>] =<span class=\"string\">&quot;text/html&quot;</span></span><br><span class=\"line\">          res.content =<span class=\"string\">&quot;hello world, the time is: &quot;</span>..<span class=\"built_in\">os</span>.<span class=\"built_in\">date</span>()</span><br><span class=\"line\">          <span class=\"keyword\">return</span> res</span><br><span class=\"line\">        <span class=\"keyword\">end</span></span><br><span class=\"line\">      &#125;, &#123;</span><br><span class=\"line\">        <span class=\"built_in\">match</span> =<span class=\"string\">&quot;.&quot;</span>,</span><br><span class=\"line\">        with = xavante.filehandler,</span><br><span class=\"line\">        params = &#123; baseDir =<span class=\"string\">&quot;static/&quot;</span> &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">xavante.start()</span><br></pre></td></tr></table></figure>\n<blockquote>In this file we create a web server with two simple rules. If you go to the path / then we say hello and show the time. Otherwise, we default to trying to serve files from the static/ directory in our app.</blockquote> \n<p>在这个文件，我们创建一个web服务和两个简单的规则。当你访问路径’/'时，会显示 'say hello’的字样，并且显示时间信息，另外静态文件是放在当前app的static目录 。</p>\n<blockquote>Go ahead and create the static/ directory now, and put something inside of it like a favicon or a html file.</blockquote> \n<p>继续，创建的 static目录 ，现在就可以把放一些图标和html文件放到里面。</p>\n<blockquote>If you have Xavante installed locally, we can test the app. (where 5000 is a port to bind to)</blockquote> \n<p>如果Xavante被安装在本地，我们测下APP。（绑定的端口是5000）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ lua web.lua 5000</span><br><span class=\"line\">Xavante started on port(s) 5000</span><br></pre></td></tr></table></figure>\n<blockquote>If not, go on to the next step.</blockquote> \n如果不是，进入下一步。\n<h3>4.部署 Web Server</h3> \nDeploying The Web Server\n<blockquote>Now that all the required code is written, the only thing left to do is to tell Heroku how to start it.</blockquote> \n<p>现在所有的代码都写了，接下来唯一要做的是告诉Heroku如何开始。</p>\n<blockquote>Heroku uses something called a Procfile to list the commands needed to start things like web severs and workers. We only need a single web server.</blockquote> \nHeroku使用了一个叫Procfile的文件，列出了web server要执行的命令任务，我们只需要一个单独的web 服务。\n<blockquote>Create a file called Procfile and place inside of it:</blockquote> \n创建一个procfile文件。\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">web: lua web.lua $PORT</span><br></pre></td></tr></table></figure>\n<blockquote>Now we're ready to deploy. Commit and push once again.</blockquote> \n开始部署，再一次上传代码。\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git commit -a -m &quot;...&quot;$ git push origin master</span><br></pre></td></tr></table></figure>\n<blockquote>We can check and see if our app is running by typing into the console:</blockquote> \n使用命令行检查我们正在运行的app。\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ heroku ps</span><br></pre></td></tr></table></figure>\n<blockquote>You'll probably see nothing running! It’s because we deployed before without a Procfile. Tell Heroku to start up our web server:</blockquote> \n<p>你也看到了，什么都没运行！ 因为之前的部署没有Procfile文件，来告诉Heroku是如何启动web服务的。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ heroku scale web=1</span><br><span class=\"line\">Scaling web processes... done, now running 1</span><br><span class=\"line\"></span><br><span class=\"line\">$ heroku ps</span><br><span class=\"line\">Process  State       Command                </span><br><span class=\"line\">-------  ----------  ---------------------  </span><br><span class=\"line\">web.1    up for 16s  bin/lua web.lua $PORT</span><br></pre></td></tr></table></figure>\n<blockquote>If you still see nothing running you'll have to debug. Run heroku logs to see if anything failed.</blockquote> \n如果你还是看到什么也没运行，执行一下heroku logs，看一下有什么错误发生。\n<blockquote>Now our web server is running, navigate to the url of the app to see it live.\nDon’t forget to try out some of the static files you included.</blockquote> \n<p>此刻我们的Web服务在运行了，跳到的Url 证明app在运行中，别忘了测试一下static目录下的文件。</p>\n<h3>5.后续</h3> \nWhat’s Next?\n<blockquote>What we've created here is fairly primitive. There are a lot of opportunities for expanding:</blockquote> \n<p>这篇比较糙，后续还有很多可以展开的题目 。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span>Use a Lua web framework like Orbit\nTalk to a SQL database with LuaSQL\nTalk to Redis with redis-lua\nTalk to CouchDB with luachia\nMake a website in MoonScript</blockquote> \n<p>使用Orbit 这种Lua WEB框架。探讨SQL数据库和LuaSQL<br>\n探讨Redis和redis-lua<br>\n探讨CouchDB和luachia<br>\n使用Moonscript创建站点。</p>\n<blockquote>It’s also worth reading the the Lua buildpack’s README because it explains how and where Lua and it’s packages are installed.</blockquote> \n<p>更多有价值的信息可以看buildpack里面的README文件， 里面解释了lua和对应包是如何被安装的。</p>\n<p><a href=\"http://leafo.net\">leafo.net</a> 2015 · Generated Fri Apr 8 14:00:07 2016 by Sitegen</p>\n<p>翻译：糖果</p>\n<p><a href=\"http://lua.ren/topic/223/%E5%9C%A8heroku%E5%9C%A8%E8%BF%90%E8%A1%8Clua\" target=\"_blank\">Lua On Heroku</a></p>\n","text":"在Heroku云上部署Lua应用 Running Lua on Heroku Posted February 05, 2012 by leafo (@moonscript) Since the release of Heroku’s Cedar platform they've ...","link":"","photos":[],"count_time":{"symbolsCount":"7.8k","symbolsTime":"7 mins."},"categories":[{"name":"topic","slug":"topic","count":308,"path":"api/categories/topic.json"}],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">1.创建APP</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">2.描述依赖</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">3.创建WEB服务</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">4.部署 Web Server</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">5.后续</span></a></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"vim 可视化模式（visual模式）","uid":"27034822c77be4d440dd0177169f41b5","slug":"old_topic/2016-09-17-222","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T07:45:09.231Z","comments":true,"path":"api/articles/old_topic/2016-09-17-222.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":null,"text":"为了便于选取文本，VIM 引入了可视(Visual)模式。 要选取一段文本，首先将光标移到段首，在普通模式下按 v 进入可视模式，然后把光标移到段末。 需要注意，光标所在字符是包含在选区中的 。 v 进入字符可视化模式 V 进入行可视化模式 Ctrl+v 进入块可视化模式块选择 ...","link":"","photos":[],"count_time":{"symbolsCount":"1.2k","symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":308,"path":"api/categories/topic.json"}],"tags":[],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Lapis的数据库查询分页功能","uid":"4a3d58a7b2640de2406b2e1d53c042d1","slug":"old_topic/2016-09-17-224","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T07:45:09.175Z","comments":true,"path":"api/articles/old_topic/2016-09-17-224.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":null,"text":"作者：leafo 翻译：糖果 Pagination分页 Using the paginated method on models we can easily paginate through a query that might otherwise return many res...","link":"","photos":[],"count_time":{"symbolsCount":"4.6k","symbolsTime":"4 mins."},"categories":[{"name":"topic","slug":"topic","count":308,"path":"api/categories/topic.json"}],"tags":[],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}