{"title":"MoonScript官方文档","uid":"99aa8520e0bab428f7fc88038d56c646","slug":"old_topic/2016-09-17-369","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T06:15:59.753Z","comments":true,"path":"api/articles/old_topic/2016-09-17-369.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":null,"content":"<p>我本人写的中文版的MoonScript文档，直接看官方文档其实，还是会不得要领。后面的英文部分，就是官方的，前面是中文自己写的。</p>\n<p>国内用MoonScript的用户相对比较少，作者leafo创作了moonscript，另外还用moonscript创作的一个lua web框架：lapis。估计moonscript想在国内普及还需要一段路要走。</p>\n<p>Coffescript是一种中间的脚本，可以把这种脚本翻译成JavaScript。而MoonScript，是可以翻译成lua语言的中间脚本。<br>本文简单的介绍的：</p>\n<ol>\n<li>如何在VIM中，实现MoonScript语法高亮。  </li>\n<li>如何简单的编译MoonScript脚本。</li>\n</ol>\n<h2 id=\"1-安装MoonScript\"><a href=\"#1-安装MoonScript\" class=\"headerlink\" title=\"1.安装MoonScript\"></a>1.安装MoonScript</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo luarocks install moonscript</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-创建-moon源文件-app-moon\"><a href=\"#2-创建-moon源文件-app-moon\" class=\"headerlink\" title=\"2.创建.moon源文件 # app.moon\"></a>2.创建.moon源文件 # <strong>app.moon</strong></h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lapis = require &quot;lapis&quot;   </span><br><span class=\"line\">class extends lapis.Application   </span><br><span class=\"line\">  &quot;/&quot;: =&gt; </span><br><span class=\"line\">&quot;Welcome to Lapis #&#123;require &quot;lapis.version&quot;&#125;!&quot; </span><br></pre></td></tr></table></figure>\n\n<h1 id=\"3-安装MoonScript语法高亮的插件。-3-1-下载vim的bundle插件管理程序。\"><a href=\"#3-安装MoonScript语法高亮的插件。-3-1-下载vim的bundle插件管理程序。\" class=\"headerlink\" title=\"3.安装MoonScript语法高亮的插件。 # **3-1.下载vim的bundle插件管理程序。\"></a>3.安装MoonScript语法高亮的插件。 # **3-1.下载vim的bundle插件管理程序。</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone VundleVim/Vundle.vim ~/.vim/bundle/vundle</span><br></pre></td></tr></table></figure>\n\n<p><strong>3-2.创建.vimrc配置文件。</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim ~/.vimrc</span><br></pre></td></tr></table></figure>\n\n<p><strong>3-3. 编辑.vimrc文件内容。</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set nocompatible                                                                                                                      </span><br><span class=\"line\">filetype off                                                                                                                          </span><br><span class=\"line\">set rtp+=~/.vim/bundle/vundle/                                                                                                        </span><br><span class=\"line\">call vundle#rc()                                                                                                                                      </span><br><span class=\"line\">Bundle &#x27;leafo/moonscript-vim&#x27;                                                                                                         </span><br><span class=\"line\">syntax enable </span><br></pre></td></tr></table></figure>\n<p><strong>3-4.进入VIM，安装bundle插件。</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim +BundleInstall</span><br></pre></td></tr></table></figure>\n<p><strong>3-5.翻译成lua脚本,并运行。</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">moonc app.moon</span><br><span class=\"line\">lua app.lua</span><br></pre></td></tr></table></figure>\n\n<p><strong>按照如上步骤操作后:</strong></p>\n<ol>\n<li><p>可以用moonc命令翻译.moon脚本到.lua脚步。 </p>\n</li>\n<li><p>vim支持moonscript的语法高亮检查。</p>\n</li>\n</ol>\n<p><strong>Moonscript与OO面向对象:</strong><br>讲MoonScript不能不提她对OO面向对像的支持，下面简单介绍一下MoonScirpt面像对像的 特性。对向函数与变量的封装，MoonScirpt的函数定义有其独特的地方是。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">foo = -&gt;</span><br><span class=\"line\">    print &quot;foo&quot;</span><br><span class=\"line\">foo()    --函数调用</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>上面是无参数函数调用，没有形参，下面是加入形参的函数声明：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">foo(x, y) =&gt;</span><br><span class=\"line\">   return x + y</span><br><span class=\"line\">ret = foo 1,5</span><br></pre></td></tr></table></figure>\n\n<p>MoonScript的函数调用，可以不使用(),省着去括号。<br>接下来，用类封装函数和成员表量，用一个单根继承两类做说明。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class CandyLab </span><br><span class=\"line\">    @metadata: &quot;Candy Lab&quot;</span><br><span class=\"line\">class Candy extends CandyLab</span><br><span class=\"line\">  @name: &quot;Candy&quot;</span><br><span class=\"line\">  @value: &quot;From CandyLab&quot;</span><br><span class=\"line\">  @func1: =&gt;</span><br><span class=\"line\">        print @name</span><br><span class=\"line\">        print @value + 6</span><br><span class=\"line\">        print &quot;func1&quot;</span><br><span class=\"line\">  @func2: (x, y) =&gt;</span><br><span class=\"line\">        print x + y</span><br><span class=\"line\">        return x + y</span><br><span class=\"line\">  @func3: =&gt;</span><br><span class=\"line\">        print &quot;ok&quot;</span><br><span class=\"line\">        print &quot;#&#123;@metadata&#125;&quot;</span><br></pre></td></tr></table></figure>\n\n<p>MoonScirpt的对象变量和函数可能直接在外部调用：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Candy\\func1!</span><br><span class=\"line\">ret = Candy\\func2 1,5 </span><br><span class=\"line\">Candy\\func3!</span><br></pre></td></tr></table></figure>\n\n<p>在Candy类中的func3，直接引用的父类的变量metadata,另一个比较独特的地方是，用!表 示调用无参函数。MoonScript的类继承关键还是与Java接近extends。<br>下面是没有继承关系的两个类之间的函数调用与变量引用，而在引用的过程中有一个特别 一点的表量类型声明，就是Table类型。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class CandyLab </span><br><span class=\"line\">    endpoints: 1</span><br><span class=\"line\">    tbl_url: &#123;</span><br><span class=\"line\">             url_1:&quot;http://host.com/1&quot;,</span><br><span class=\"line\">             url_2:&quot;http://host.com/2&quot;,</span><br><span class=\"line\">             url_3:&quot;http://host.com/3&quot;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">class Candy</span><br><span class=\"line\">    @func1: =&gt;</span><br><span class=\"line\">        print(Common.endpoints)  </span><br><span class=\"line\">        print(type(Common.tbl_url[&quot;ur1_1&quot;]))</span><br></pre></td></tr></table></figure>\n\n<p>上面的操作是直接在Candy类中调用CandyLab的变量，其实就是没有权限访问。MoonScript 的OO特性比较常用如上，MoonScript这些特性，如果用来做Web开发，效率相对Lua来说还是 高的，而目前用MoonScript实现的最大的一个项目就是Lua框架Lapis，接下来可以看看Lapis 中是如何使用MoonScript的特性的。</p>\n<p><strong>作者：糖果</strong><br><strong>PS:转载到其它平台请注明作者姓名及原文链接，请勿用于商业用途。</strong></p>\n<p>{<br>  target: “reference/standard_lib”<br>  template: “reference”<br>  title: “Standard Library”<br>  short_name: “stdlib”<br>}</p>\n<p>The MoonScript installation comes with a small kernel of functions that can be<br>used to perform various common things.</p>\n<p>The entire library is currently contained in a single object. We can bring this<br><code>moon</code> object into scope by requiring <code>&quot;moon&quot;</code>.</p>\n<figure class=\"highlight moon\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">moon = <span class=\"built_in\">require</span> <span class=\"string\">&quot;moon&quot;</span></span><br><span class=\"line\"><span class=\"comment\">-- `moon.p` is the debug printer</span></span><br><span class=\"line\">moon.p &#123; <span class=\"name\">hello</span>: <span class=\"string\">&quot;world&quot;</span> &#125;</span><br></pre></td></tr></table></figure>\n\n<p>If you prefer to just inject all of the functions into the current scope, you<br>can require <code>&quot;moon.all&quot;</code> instead. The following has the same effect as above:</p>\n<figure class=\"highlight moon\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">require</span> <span class=\"string\">&quot;moon.all&quot;</span></span><br><span class=\"line\">p &#123; <span class=\"name\">hello</span>: <span class=\"string\">&quot;world&quot;</span> &#125;</span><br></pre></td></tr></table></figure>\n\n<p>All of the functions are compatible with Lua in addition to MoonScript, but<br>some of them only make sense in the context of MoonScript.</p>\n<h1 id=\"MoonScript-Standard-Library\"><a href=\"#MoonScript-Standard-Library\" class=\"headerlink\" title=\"MoonScript Standard Library\"></a>MoonScript Standard Library</h1><p>This is an overview of all the included functions.<br>All of the examples assume that the standard library has been included with<br><code>require &quot;moon.all&quot;</code>.</p>\n<h2 id=\"Printing-Functions\"><a href=\"#Printing-Functions\" class=\"headerlink\" title=\"Printing Functions\"></a>Printing Functions</h2><h3 id=\"p-arg\"><a href=\"#p-arg\" class=\"headerlink\" title=\"p(arg)\"></a><code>p(arg)</code></h3><p>Prints a formatted version of an object. Excellent for inspecting the contents<br>of a table.</p>\n<h2 id=\"Table-Functions\"><a href=\"#Table-Functions\" class=\"headerlink\" title=\"Table Functions\"></a>Table Functions</h2><h3 id=\"run-with-scope-fn-scope-args\"><a href=\"#run-with-scope-fn-scope-args\" class=\"headerlink\" title=\"run_with_scope(fn, scope, [args...])\"></a><code>run_with_scope(fn, scope, [args...])</code></h3><p>Mutates the environment of function <code>fn</code> and runs the function with any extra<br>arguments in <code>args...</code>. Returns the result of the function.</p>\n<p>The environment of the function is set to a new table whose metatable will use<br><code>scope</code> to look up values. <code>scope</code> must be a table. If <code>scope</code> does not have an<br>entry for a value, it will fall back on the original environment.</p>\n<figure class=\"highlight moon\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">my_env = &#123;</span><br><span class=\"line\">  <span class=\"name\">secret_function</span>: <span class=\"function\">-&gt;</span> <span class=\"built_in\">print</span> <span class=\"string\">&quot;shhh this is secret&quot;</span></span><br><span class=\"line\">  <span class=\"name\">say_hi</span>: <span class=\"function\">-&gt;</span> <span class=\"built_in\">print</span> <span class=\"string\">&quot;hi there!&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">say_hi</span> = -&gt;</span> <span class=\"built_in\">print</span> <span class=\"string\">&quot;I am a closure&quot;</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">fn</span> = -&gt;</span></span><br><span class=\"line\">  secret_function!</span><br><span class=\"line\">  say_hi!</span><br><span class=\"line\"></span><br><span class=\"line\">run_with_scope fn, my_env</span><br></pre></td></tr></table></figure>\n\n\n<p>Note that any closure values will always take precedence against global name<br>lookups in the environment. In the example above, the <code>say_hi</code> in the<br>environment has been shadowed by the local variable <code>say_hi</code>.</p>\n<h3 id=\"defaultbl-tbl-fn\"><a href=\"#defaultbl-tbl-fn\" class=\"headerlink\" title=\"defaultbl([tbl,] fn)\"></a><code>defaultbl([tbl,] fn)</code></h3><p>Sets the <code>__index</code> of table <code>tbl</code> to use the function <code>fn</code> to generate table<br>values when a missing key is looked up.</p>\n<h3 id=\"extend-arg1-arg2-rest\"><a href=\"#extend-arg1-arg2-rest\" class=\"headerlink\" title=\"extend(arg1, arg2, [rest...])\"></a><code>extend(arg1, arg2, [rest...])</code></h3><p>Chains together a series of tables by their metatable’s <code>__index</code> property.<br>Overwrites the metatable of all objects except for the last with a new table<br>whose <code>__index</code> is set to the next table.</p>\n<p>Returns the first argument.</p>\n<figure class=\"highlight moon\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = &#123; <span class=\"name\">hello</span>: <span class=\"string\">&quot;world&quot;</span> &#125;</span><br><span class=\"line\">b = &#123; <span class=\"name\">okay</span>: <span class=\"string\">&quot;sure&quot;</span> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">extend a, b</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span> a.okay</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"copy-tbl\"><a href=\"#copy-tbl\" class=\"headerlink\" title=\"copy(tbl)\"></a><code>copy(tbl)</code></h3><p>Creates a shallow copy of a table, equivalent to:</p>\n<figure class=\"highlight moon\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">copy</span> = <span class=\"params\">(arg)</span> -&gt;</span> &#123;k,v <span class=\"keyword\">for</span> k,v <span class=\"keyword\">in</span> <span class=\"built_in\">pairs</span> self&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Class-Object-Functions\"><a href=\"#Class-Object-Functions\" class=\"headerlink\" title=\"Class/Object Functions\"></a>Class/Object Functions</h2><h3 id=\"is-object-value\"><a href=\"#is-object-value\" class=\"headerlink\" title=\"is_object(value)\"></a><code>is_object(value)</code></h3><p>Returns true if <code>value</code> is an instance of a MoonScript class, false otherwise.</p>\n<h3 id=\"type-value\"><a href=\"#type-value\" class=\"headerlink\" title=\"type(value)\"></a><code>type(value)</code></h3><p>If <code>value</code> is an instance of a MoonScript class, then return it’s class object.<br>Otherwise, return the result of calling Lua’s type method.</p>\n<figure class=\"highlight moon\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyClass</span></span></span><br><span class=\"line\">  <span class=\"literal\">nil</span></span><br><span class=\"line\"></span><br><span class=\"line\">x = MyClass!</span><br><span class=\"line\"><span class=\"built_in\">assert</span> <span class=\"built_in\">type</span>(x) == MyClass</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"bind-methods-obj\"><a href=\"#bind-methods-obj\" class=\"headerlink\" title=\"bind_methods(obj)\"></a><code>bind_methods(obj)</code></h3><p>Takes an instance of an object, returns a proxy to the object whose methods can<br>be called without providing self as the first argument.</p>\n<figure class=\"highlight moon\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">obj = SomeClass!</span><br><span class=\"line\"></span><br><span class=\"line\">bound_obj = bind_methods obj</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- following have the same effect</span></span><br><span class=\"line\">obj\\hello!</span><br><span class=\"line\">bound_obj.hello!</span><br></pre></td></tr></table></figure>\n\n<p>It lazily creates and stores in the proxy table the bound methods when they<br>are first called.</p>\n<h3 id=\"mixin-obj-class-args\"><a href=\"#mixin-obj-class-args\" class=\"headerlink\" title=\"mixin(obj, class, [args...])\"></a><code>mixin(obj, class, [args...])</code></h3><p>Copies the methods of a class <code>cls</code> into the table <code>obj</code>, then calls the<br>constructor of the class with the <code>obj</code> as the receiver.</p>\n<p>In this example we add the functionality of <code>First</code> to an instance of <code>Second</code><br>without ever instancing <code>First</code>.</p>\n<figure class=\"highlight moon\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">First</span></span></span><br><span class=\"line\">  <span class=\"name\">new</span>: <span class=\"function\"><span class=\"params\">(@var)</span> =&gt;</span></span><br><span class=\"line\">  <span class=\"name\">show_var</span>: <span class=\"function\">=&gt;</span> <span class=\"built_in\">print</span> <span class=\"string\">&quot;var is:&quot;</span>, @var</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Second</span></span></span><br><span class=\"line\">  <span class=\"name\">new</span>: <span class=\"function\">=&gt;</span></span><br><span class=\"line\">    mixin self, First, <span class=\"string\">&quot;hi&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">a = Second!</span><br><span class=\"line\">a\\show_var!</span><br></pre></td></tr></table></figure>\n\n<p>Be weary of name collisions when mixing in other classes, names will be<br>overwritten.</p>\n<h3 id=\"mixin-object-obj-other-obj-method-names\"><a href=\"#mixin-object-obj-other-obj-method-names\" class=\"headerlink\" title=\"mixin_object(obj, other_obj, method_names)\"></a><code>mixin_object(obj, other_obj, method_names)</code></h3><p>Inserts into <code>obj</code> methods from <code>other_obj</code> whose names are listed in<br><code>method_names</code>. The inserted methods are bound methods that will run with<br><code>other_obj</code> as the receiver.</p>\n<figure class=\"highlight moon\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">List</span> </span></span><br><span class=\"line\">  <span class=\"name\">add</span>: <span class=\"function\"><span class=\"params\">(item)</span> =&gt;</span> <span class=\"built_in\">print</span> <span class=\"string\">&quot;adding to&quot;</span>, self</span><br><span class=\"line\">  <span class=\"name\">remove</span>: <span class=\"function\"><span class=\"params\">(item)</span> =&gt;</span> <span class=\"built_in\">print</span> <span class=\"string\">&quot;removing from&quot;</span>, self</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Encapsulation</span></span></span><br><span class=\"line\">  <span class=\"name\">new</span>: <span class=\"function\">=&gt;</span></span><br><span class=\"line\">    @list = List!</span><br><span class=\"line\">    mixin_object self, @list, &#123;<span class=\"string\">&quot;add&quot;</span>, <span class=\"string\">&quot;remove&quot;</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">e = Encapsulation!</span><br><span class=\"line\">e.add <span class=\"string\">&quot;something&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"mixin-table-a-b-names\"><a href=\"#mixin-table-a-b-names\" class=\"headerlink\" title=\"mixin_table(a, b, [names])\"></a><code>mixin_table(a, b, [names])</code></h3><p>Copies the elements of table <code>b</code> into table <code>a</code>. If names is provided, then<br>only those names are copied.</p>\n<h2 id=\"Misc-Functions\"><a href=\"#Misc-Functions\" class=\"headerlink\" title=\"Misc Functions\"></a>Misc Functions</h2><h3 id=\"fold-items-fn\"><a href=\"#fold-items-fn\" class=\"headerlink\" title=\"fold(items, fn)\"></a><code>fold(items, fn)</code></h3><p>Calls function <code>fn</code> repeatedly with the accumulated value and the current value<br>by iterating over <code>items</code>. The accumulated value is the result of the last call<br>to <code>fn</code>, or, in the base case, the first value. The current value is the value<br>being iterated over starting with the second item.</p>\n<p><code>items</code> is a normal array table.</p>\n<p>For example, to sum all numbers in a list:</p>\n<figure class=\"highlight moon\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">numbers = &#123;<span class=\"number\">4</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>&#125;</span><br><span class=\"line\">sum = fold numbers, <span class=\"function\"><span class=\"params\">(a,b)</span> -&gt;</span> a + b</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Debug-Functions\"><a href=\"#Debug-Functions\" class=\"headerlink\" title=\"Debug Functions\"></a>Debug Functions</h2><h3 id=\"debug-upvalue-fn-key-value\"><a href=\"#debug-upvalue-fn-key-value\" class=\"headerlink\" title=\"debug.upvalue(fn, key[, value])\"></a><code>debug.upvalue(fn, key[, value])</code></h3><p>Gets or sets the value of an upvalue for a function by name.</p>\n","text":"我本人写的中文版的MoonScript文档，直接看官方文档其实，还是会不得要领。后面的英文部分，就是官方的，前面是中文自己写的。 国内用MoonScript的用户相对比较少，作者leafo创作了moonscript，另外还用moonscript创作的一个lua web框架：lap...","link":"","photos":[],"count_time":{"symbolsCount":"8.1k","symbolsTime":"7 mins."},"categories":[{"name":"topic","slug":"topic","count":308,"path":"api/categories/topic.json"}],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-%E5%AE%89%E8%A3%85MoonScript\"><span class=\"toc-text\">1.安装MoonScript</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-%E5%88%9B%E5%BB%BA-moon%E6%BA%90%E6%96%87%E4%BB%B6-app-moon\"><span class=\"toc-text\">2.创建.moon源文件 # app.moon</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#3-%E5%AE%89%E8%A3%85MoonScript%E8%AF%AD%E6%B3%95%E9%AB%98%E4%BA%AE%E7%9A%84%E6%8F%92%E4%BB%B6%E3%80%82-3-1-%E4%B8%8B%E8%BD%BDvim%E7%9A%84bundle%E6%8F%92%E4%BB%B6%E7%AE%A1%E7%90%86%E7%A8%8B%E5%BA%8F%E3%80%82\"><span class=\"toc-text\">3.安装MoonScript语法高亮的插件。 # **3-1.下载vim的bundle插件管理程序。</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#MoonScript-Standard-Library\"><span class=\"toc-text\">MoonScript Standard Library</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Printing-Functions\"><span class=\"toc-text\">Printing Functions</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#p-arg\"><span class=\"toc-text\">p(arg)</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Table-Functions\"><span class=\"toc-text\">Table Functions</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#run-with-scope-fn-scope-args\"><span class=\"toc-text\">run_with_scope(fn, scope, [args...])</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#defaultbl-tbl-fn\"><span class=\"toc-text\">defaultbl([tbl,] fn)</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#extend-arg1-arg2-rest\"><span class=\"toc-text\">extend(arg1, arg2, [rest...])</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#copy-tbl\"><span class=\"toc-text\">copy(tbl)</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Class-Object-Functions\"><span class=\"toc-text\">Class&#x2F;Object Functions</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#is-object-value\"><span class=\"toc-text\">is_object(value)</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#type-value\"><span class=\"toc-text\">type(value)</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#bind-methods-obj\"><span class=\"toc-text\">bind_methods(obj)</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#mixin-obj-class-args\"><span class=\"toc-text\">mixin(obj, class, [args...])</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#mixin-object-obj-other-obj-method-names\"><span class=\"toc-text\">mixin_object(obj, other_obj, method_names)</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#mixin-table-a-b-names\"><span class=\"toc-text\">mixin_table(a, b, [names])</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Misc-Functions\"><span class=\"toc-text\">Misc Functions</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#fold-items-fn\"><span class=\"toc-text\">fold(items, fn)</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Debug-Functions\"><span class=\"toc-text\">Debug Functions</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#debug-upvalue-fn-key-value\"><span class=\"toc-text\">debug.upvalue(fn, key[, value])</span></a></li></ol></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Moonscript与HTML模板","uid":"ea8283997977848c6827a1a83f28911d","slug":"old_topic/2016-09-17-366","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T06:15:59.752Z","comments":true,"path":"api/articles/old_topic/2016-09-17-366.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":null,"text":"作者：糖果 Moonscript与HTML模板 Lapis框架可以用Moonscript直接编程，Moonscript可以将需要模板系统对于的网页输出，一揽子的都在Moonscript中用代码实现，可以看leaof.net/lapis下最典型的官方例子，其实DB的相关操作也可以在...","link":"","photos":[],"count_time":{"symbolsCount":"2.6k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":308,"path":"api/categories/topic.json"}],"tags":[],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"MoonScript for GrayLog","uid":"bace4a0f855ab931a94c6323590dcc00","slug":"old_topic/2016-09-17-368","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T06:15:59.753Z","comments":true,"path":"api/articles/old_topic/2016-09-17-368.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":null,"text":"GrayLog REST API Wrapper for Moonscript 此程序是Graylog REST对外提供的API的一个Moonscript的Wrapper封装，把REST接口提供的数据服务，变成通过函数调用的方式取得相应REST接口返回的数据。 下面是一个实际的基...","link":"","photos":[],"count_time":{"symbolsCount":"1.7k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":308,"path":"api/categories/topic.json"}],"tags":[],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}