{"title":"用RESTY-HTTP实现Graylog的Widget更新与查询","uid":"07e149df00baf09dc3d8d5e82a638745","slug":"old_topic/2016-09-17-350","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T07:45:09.177Z","comments":true,"path":"api/articles/old_topic/2016-09-17-350.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<p>作者：糖果</p>\n<p>MoonScript for GrayLog是之前写的一个基于Lapis与Simple HTTP的Graylog日志查询SDK，<br />\n支持Stream查询，最近为了做自动化分析，加入了新的接口中调用功能，加入了对Dashboard<br />\nwidgets和更新与查询，通过这个程序，实现一些反扫逻辑。</p>\n<pre class=\"highlight\"><code class=\"lua\">\n    @putRequest:(req_url, data) =&gt;\n        http = <span class=\"hljs-built_in\">require</span> <span class=\"hljs-string\">&quot;resty.http&quot;</span>\n        httpc = http.new()\n        metadata = &#123;\n          method:<span class=\"hljs-string\">&quot;PUT&quot;</span>,\n          body: data,\n          headers: <span class=\"hljs-built_in\">self</span>.headers_info\n        &#125;\n\n        res, err = httpc\\request_uri(req_url, metadata)\n\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> res\n          ngx.say(<span class=\"hljs-string\">&quot;failed to request: &quot;</span>, err)\n          <span class=\"hljs-keyword\">return</span>\n        <span class=\"hljs-keyword\">return</span> res.body\n\n\n    @updateWidget: (dashboardId, widgetId,jsonBody) =&gt;\n        errList = &#123;&#125;\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">type</span>(dashboardId) == <span class=\"hljs-string\">&#x27;nil&#x27;</span>\n            <span class=\"hljs-built_in\">table</span>.<span class=\"hljs-built_in\">insert</span>(errList, <span class=\"hljs-string\">&quot;dashboard id is nil\\n&quot;</span>)\n\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">type</span>(widgetId) == <span class=\"hljs-string\">&#x27;nil&#x27;</span>\n            <span class=\"hljs-built_in\">table</span>.<span class=\"hljs-built_in\">insert</span>(errList, <span class=\"hljs-string\">&quot;widget id is nil\\n&quot;</span>)\n\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">type</span>(jsonBody) == <span class=\"hljs-string\">&#x27;nil&#x27;</span>\n            <span class=\"hljs-built_in\">table</span>.<span class=\"hljs-built_in\">insert</span>(errList, <span class=\"hljs-string\">&quot;json body is nil\\n&quot;</span>)\n\n        num = <span class=\"hljs-built_in\">table</span>.<span class=\"hljs-built_in\">getn</span>(errList) \n        <span class=\"hljs-keyword\">if</span> num &gt; <span class=\"hljs-number\">0</span> \n            <span class=\"hljs-keyword\">return</span> errList\n\n\n        url = <span class=\"hljs-string\">&quot;http://&quot;</span>..<span class=\"hljs-built_in\">self</span>.host..<span class=\"hljs-string\">&quot;:&quot;</span>..<span class=\"hljs-built_in\">self</span>.port\n        req_url = url..<span class=\"hljs-string\">&#x27;/dashboards/&#x27;</span>..dashboardId..<span class=\"hljs-string\">&#x27;/widgets/&#x27;</span>..widgetId\n\n        <span class=\"hljs-built_in\">self</span>.headers_info = &#123;\n            <span class=\"hljs-string\">&#x27;Authorization&#x27;</span>: <span class=\"hljs-built_in\">self</span>.auth, \n            <span class=\"hljs-string\">&#x27;Accept&#x27;</span>: <span class=\"hljs-string\">&#x27;*/*&#x27;</span>,\n            <span class=\"hljs-string\">&#x27;Content-Type&#x27;</span>:<span class=\"hljs-string\">&#x27;application/json&#x27;</span>\n        &#125;\n\n        <span class=\"hljs-built_in\">self</span>\\putRequest req_url, jsonBody\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>\n\n\n    @getRequest:(req_url) =&gt;\n        http = <span class=\"hljs-built_in\">require</span> <span class=\"hljs-string\">&quot;resty.http&quot;</span>\n        httpc = http.new()\n        metadata = &#123;\n          method:<span class=\"hljs-string\">&quot;GET&quot;</span>,\n          headers: <span class=\"hljs-built_in\">self</span>.headers_info\n        &#125;\n\n        res, err = httpc\\request_uri(req_url, metadata)\n\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> res\n          ngx.say(<span class=\"hljs-string\">&quot;failed to request: &quot;</span>, err)\n          <span class=\"hljs-keyword\">return</span>\n\n        ngx.<span class=\"hljs-built_in\">status</span> = res.<span class=\"hljs-built_in\">status</span>\n        <span class=\"hljs-keyword\">return</span> res.body\n\n\n    @getWidgetValue: (dashboardId, widgetId) =&gt;\n        errList = &#123;&#125;\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">type</span>(dashboardId) == <span class=\"hljs-string\">&#x27;nil&#x27;</span>\n            <span class=\"hljs-built_in\">table</span>.<span class=\"hljs-built_in\">insert</span>(errList, <span class=\"hljs-string\">&quot;dashboard id is nil\\n&quot;</span>)\n\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">type</span>(widgetId) == <span class=\"hljs-string\">&#x27;nil&#x27;</span>\n            <span class=\"hljs-built_in\">table</span>.<span class=\"hljs-built_in\">insert</span>(errList, <span class=\"hljs-string\">&quot;widget id is nil\\n&quot;</span>)\n\n        num = <span class=\"hljs-built_in\">table</span>.<span class=\"hljs-built_in\">getn</span>(errList) \n        <span class=\"hljs-keyword\">if</span> num &gt; <span class=\"hljs-number\">0</span> \n            <span class=\"hljs-keyword\">return</span> errList\n\n        url = <span class=\"hljs-string\">&quot;http://&quot;</span>..<span class=\"hljs-built_in\">self</span>.host..<span class=\"hljs-string\">&quot;:&quot;</span>..<span class=\"hljs-built_in\">self</span>.port\n        req_url = url..<span class=\"hljs-string\">&#x27;/dashboards/&#x27;</span>..dashboardId..<span class=\"hljs-string\">&#x27;/widgets/&#x27;</span>..widgetId..<span class=\"hljs-string\">&#x27;/value&#x27;</span>\n\n        <span class=\"hljs-built_in\">self</span>.headers_info = &#123;\n            <span class=\"hljs-string\">&#x27;Authorization&#x27;</span>: <span class=\"hljs-built_in\">self</span>.auth, \n            <span class=\"hljs-string\">&#x27;Accept&#x27;</span>: <span class=\"hljs-string\">&#x27;application/json&#x27;</span>,\n        &#125;\n\n        ret = <span class=\"hljs-built_in\">self</span>\\getRequest req_url\n        <span class=\"hljs-keyword\">return</span> ret\n        \n</code></pre>\n<p>这次没有使用过去端末加JSON数据请求的方式，把simple http换成了RESTY-HTTP,项目名改<br />\n了，叫“Finder”。</p>\n<p>本文请不要用于商业目地，非商业转载请署名原作者与原文链接。<br />\n<a href=\"https://www.moonscript.cn/openresty/resty-http-for-graylog/\">https://www.moonscript.cn/openresty/resty-http-for-graylog/</a></p>\n","text":"作者：糖果 MoonScript for GrayLog是之前写的一个基于Lapis与Simple HTTP的Graylog日志查询SDK， 支持Stream查询，最近为了做自动化分析，加入了新的接口中调用功能，加入了对Dashboard widgets和更新与查询，通过这个程序...","link":"","photos":[],"count_time":{"symbolsCount":"2.9k","symbolsTime":"3 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[],"toc":"","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"ENV的C语言实现","uid":"03eb1b6e42f3161910ec1f1a5c8f6a96","slug":"old_topic/2016-09-17-341","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T07:45:09.154Z","comments":true,"path":"api/articles/old_topic/2016-09-17-341.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"env的实现，就是下面一小段的C语言实现。 #include &lt;stdio.h> extern char**environ; int main () &#123; char**var; char *str; for (var =environ;*var !=NULL;++v...","link":"","photos":[],"count_time":{"symbolsCount":218,"symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Lapis框架的常用处理方法","uid":"193d30d1b1f932871a7703a692d3a8f9","slug":"old_topic/2016-09-17-351","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T07:45:09.152Z","comments":true,"path":"api/articles/old_topic/2016-09-17-351.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"作者：糖果 在Lapis中处理GET、POST、PUT。 import respond_to from require \"lapis.application\" class App extends lapis.Application @enable \"etlua\" \"/login\"...","link":"","photos":[],"count_time":{"symbolsCount":"1.1k","symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}