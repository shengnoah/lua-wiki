{"title":"用RESTY-HTTP实现Graylog的Widget更新与查询","uid":"07e149df00baf09dc3d8d5e82a638745","slug":"old_topic/2016-09-17-350","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T07:45:09.177Z","comments":true,"path":"api/articles/old_topic/2016-09-17-350.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":null,"content":"<p>作者：糖果</p>\n<p>MoonScript for GrayLog是之前写的一个基于Lapis与Simple HTTP的Graylog日志查询SDK，支持Stream查询，最近为了做自动化分析，加入了新的接口中调用功能，加入了对Dashboard<br>\nwidgets和更新与查询，通过这个程序，实现一些反扫逻辑。</p>\n<pre><code class=\"language-lua\">\n    @putRequest:(req_url, data) =&gt;\n        http = require &quot;resty.http&quot;\n        httpc = http.new()\n        metadata = &#123;\n          method:&quot;PUT&quot;,\n          body: data,\n          headers: self.headers_info\n        &#125;\n\n        res, err = httpc\\request_uri(req_url, metadata)\n\n        if not res\n          ngx.say(&quot;failed to request: &quot;, err)\n          return\n        return res.body\n\n\n    @updateWidget: (dashboardId, widgetId,jsonBody) =&gt;\n        errList = &#123;&#125;\n        if type(dashboardId) == 'nil'\n            table.insert(errList, &quot;dashboard id is nil\\n&quot;)\n\n        if type(widgetId) == 'nil'\n            table.insert(errList, &quot;widget id is nil\\n&quot;)\n\n        if type(jsonBody) == 'nil'\n            table.insert(errList, &quot;json body is nil\\n&quot;)\n\n        num = table.getn(errList) \n        if num &gt; 0 \n            return errList\n\n\n        url = &quot;http://&quot;..self.host..&quot;:&quot;..self.port\n        req_url = url..'/dashboards/'..dashboardId..'/widgets/'..widgetId\n\n        self.headers_info = &#123;\n            'Authorization': self.auth, \n            'Accept': '*/*',\n            'Content-Type':'application/json'\n        &#125;\n\n        self\\putRequest req_url, jsonBody\n        return 1\n\n\n    @getRequest:(req_url) =&gt;\n        http = require &quot;resty.http&quot;\n        httpc = http.new()\n        metadata = &#123;\n          method:&quot;GET&quot;,\n          headers: self.headers_info\n        &#125;\n\n        res, err = httpc\\request_uri(req_url, metadata)\n\n        if not res\n          ngx.say(&quot;failed to request: &quot;, err)\n          return\n\n        ngx.status = res.status\n        return res.body\n\n\n    @getWidgetValue: (dashboardId, widgetId) =&gt;\n        errList = &#123;&#125;\n        if type(dashboardId) == 'nil'\n            table.insert(errList, &quot;dashboard id is nil\\n&quot;)\n\n        if type(widgetId) == 'nil'\n            table.insert(errList, &quot;widget id is nil\\n&quot;)\n\n        num = table.getn(errList) \n        if num &gt; 0 \n            return errList\n\n        url = &quot;http://&quot;..self.host..&quot;:&quot;..self.port\n        req_url = url..'/dashboards/'..dashboardId..'/widgets/'..widgetId..'/value'\n\n        self.headers_info = &#123;\n            'Authorization': self.auth, \n            'Accept': 'application/json',\n        &#125;\n\n        ret = self\\getRequest req_url\n        return ret\n        \n</code></pre>\n<p>这次没有使用过去端末加JSON数据请求的方式，把simple http换成了RESTY-HTTP,项目名改了，叫“Finder”。</p>\n<p>本文请不要用于商业目地，非商业转载请署名原作者与原文链接。<br>\n<a href=\"https://www.moonscript.cn/openresty/resty-http-for-graylog/\">https://www.moonscript.cn/openresty/resty-http-for-graylog/</a></p>\n","text":"作者：糖果 MoonScript for GrayLog是之前写的一个基于Lapis与Simple HTTP的Graylog日志查询SDK，支持Stream查询，最近为了做自动化分析，加入了新的接口中调用功能，加入了对Dashboard widgets和更新与查询，通过这个程序，...","link":"","photos":[],"count_time":{"symbolsCount":"2.8k","symbolsTime":"3 mins."},"categories":[{"name":"topic","slug":"topic","count":308,"path":"api/categories/topic.json"}],"tags":[],"toc":"","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"从实现角度看Openresty + LUA = WAF","uid":"4b277b3bf21c49d9a15db633f740d15e","slug":"old_topic/2016-09-17-347","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T07:45:09.211Z","comments":true,"path":"api/articles/old_topic/2016-09-17-347.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":[],"text":"作者：糖果 1.WAF存在形态 WAF就是WEB防火墙，Nginx Lua和Openresty的出现，让基于LUA开发的WAF更有可能。对所有会造成安全威胁的HTTP请求数据，都应该成为安全检查策略应该关注的内容，笼统上来讲OR WAF的式样要求的输入数据，就是可以在WEB服务器...","link":"","photos":[],"count_time":{"symbolsCount":"2.1k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":308,"path":"api/categories/topic.json"}],"tags":[],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Lapis框架的基本库模板","uid":"35d8b592c5b982bc1f18037d6c818306","slug":"old_topic/2016-09-17-352","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T07:45:09.223Z","comments":true,"path":"api/articles/old_topic/2016-09-17-352.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":null,"text":"作者：糖果 MoonScript库模板代码： 1234567891011121314local *configs = &#123;&#125;config = (env, fn) -&gt; print(env, fn) return 1setmetatable &#123; :...","link":"","photos":[],"count_time":{"symbolsCount":"2.4k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":308,"path":"api/categories/topic.json"}],"tags":[],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}