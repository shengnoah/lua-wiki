{"title":"Openresty OOM 臭虫","uid":"90f8068c136a1c725371f517843fe478","slug":"old_topic/2016-09-17-376","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T06:15:59.754Z","comments":true,"path":"api/articles/old_topic/2016-09-17-376.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":null,"content":"<h3 id=\"Openresty-OOM-臭虫\"><a href=\"#Openresty-OOM-臭虫\" class=\"headerlink\" title=\"Openresty OOM 臭虫\"></a>Openresty OOM 臭虫</h3><p>最近我在线上改变了一个的 Nginx 配置，导致 OOM（Out of Memory） killer 在 Nginx 加载新配置的过程中 杀死了 Nginx 进程。这是添加到配置中的行：</p>\n<pre><code>lua_ssl_trusted_certificate /etc/ssl/certs/ca-certificates.crt;\n</code></pre>\n<p>在这篇文章中，我将会阐述我是如何找出这个问题的根本原因、记录在这个过程中现学现用的工具。这篇文章内容细节非常琐碎。在进行深入阅读前，先列下使用的软件栈：</p>\n<ul>\n<li>Openssl <code>1.0.2j</code></li>\n<li>OS:<code>Ubuntu Trusty with Linux 3.19.0-80-generic</code></li>\n<li>Nginx:<code>Openresty bundle 1.11.2</code></li>\n<li>glibc:<code>Ubuntu EGLIBC 2.19-0ubuntu6.9</code></li>\n</ul>\n<p>我们从 OOM Killer 开始。它是一个 Linux 内核函数，当内核不能分配更多的内存空间的时候它将会被触发。OOM Killer 的任务是探测哪一个进程是对系统危害最大（参考<a href=\"https://linux-mm.org/OOM_Killer\"> https://linux-mm.org/OOM_Killer</a>,获取更多关于坏评分是如何计算出来的信息），一旦检测出来，将会杀死进程、释放内存。也就是说我遇到的情况是 ，Nginx 是在申请越来越多的内存，最终内核申请内存失败并且触发OOM Killer，杀死 Nginx 进程。</p>\n<p>到此为止，现在让我们看看当 Nginx 重新加载配置的时候做了什么。可以使用 <code>strace</code> 进行跟踪。这是一个非常棒的工具，能在不用阅读源码的情况下查看程序正在做什么。</p>\n<p>在我这里，执行：</p>\n<pre><code>sudo strace -p `cat /var/run/nginx.pid` -f\n</code></pre>\n<p>接着</p>\n<pre><code>sudo /etc/inid.t/nginx reload\n</code></pre>\n<p><code>-f</code> 选项告诉 <code>strace</code> 也要对子进程进行跟踪。 在<a href=\"http://jvns.ca/zines/#strace-zine.\">http://jvns.ca/zines/#strace-zine.</a>你能看到一个对<code>strace</code>非常好的评价。下面是一个非常有趣的片段，执行完<code>strace</code>后输出的：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">[pid 31774] open(&quot;/etc/ssl/certs/ca-certificates.crt&quot;, O_RDONLY) = 5</span><br><span class=\"line\">[pid 31774] fstat(5, &#123;st_mode=S_IFREG|0644, st_size=274340, ...&#125;) = 0</span><br><span class=\"line\">[pid 31774] mmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7f6dc8266000</span><br><span class=\"line\">[pid 31774] read(5, &quot;-----BEGIN CERTIFICATE-----\\nMIIH&quot;..., 4096) = 4096</span><br><span class=\"line\">[pid 31774] read(5, &quot;WIm\\nfQwng4/F9tqgaHtPkl7qpHMyEVNE&quot;..., 4096) = 4096</span><br><span class=\"line\">[pid 31774] read(5, &quot;Ktmyuy/uE5jF66CyCU3nuDuP/jVo23Ee&quot;..., 4096) = 4096</span><br><span class=\"line\">...&lt;stripped for clarity&gt;...</span><br><span class=\"line\">[pid 31774] read(5, &quot;MqAw\\nhi5odHRwOi8vd3d3Mi5wdWJsaWM&quot;..., 4096) = 4096</span><br><span class=\"line\">[pid 31774] read(5, &quot;dc/BGZFjz+iokYi5Q1K7\\ngLFViYsx+tC&quot;..., 4096) = 4096</span><br><span class=\"line\">[pid 31774] brk(0x26d3000)              = 0x26b2000</span><br><span class=\"line\">[pid 31774] mmap(NULL, 1048576, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7f6c927c3000</span><br><span class=\"line\">[pid 31774] read(5, &quot;/lmci3Zt1/GiSw0r/wty2p5g0I6QNcZ4&quot;..., 4096) = 4096</span><br><span class=\"line\">[pid 31774] read(5, &quot;iv9kuXclVzDAGySj4dzp30d8tbQk\\nCAU&quot;..., 4096) = 4096</span><br><span class=\"line\">...&lt;stripped for clarity&gt;...</span><br><span class=\"line\">[pid 31774] read(5, &quot;ye8\\nFVdMpEbB4IMeDExNH08GGeL5qPQ6&quot;..., 4096) = 4096</span><br><span class=\"line\">[pid 31774] read(5, &quot;VVNUIEVs\\nZWt0cm9uaWsgU2VydGlmaWt&quot;..., 4096) = 4004</span><br><span class=\"line\">[pid 31774] read(5, &quot;&quot;, 4096)           = 0</span><br><span class=\"line\">[pid 31774] close(5)                    = 0</span><br><span class=\"line\">[pid 31774] munmap(0x7f6dc8266000, 4096) = 0</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>这段重复了很多次！有两行非常有意思。</p>\n<pre><code>open(&quot;/etc/ssl/certs/ca-certificates.crt&quot;, O_RDONLY) = 5\n</code></pre>\n<p>这行意味着是跟修改的配置（上面提到的修改）有关的操作，</p>\n<pre><code>mmap(NULL, 1048576, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7f6c927c3000\n</code></pre>\n<p>这行意味着在<code>read</code>过程中间请求内核分配 1M 内存空间。</p>\n<p>在 <code>strace</code> 的输出中，另一个有意思的细节是分配的内存从来没有执行<code>munmap</code>进行释放。注意在调用<code>close</code>后<code>0x7f6dc8266000</code>才被传入<code>munmap</code>。</p>\n<p>这些事实让我相信 ，当设置<code>lua_ssl_trusted_certificate</code>这条指令后，Nginx 发生了 内存泄露（尽管我对底层调试几乎没有任何经验）。什么？Nginx 发生了内存泄露，难道那还不让人兴奋？！不要这么兴奋。</p>\n<p>为了找出是Nginx 的哪个组件发生了内存泄露，我决定使用 <code>gdb</code>。如果编译程序的时候打开了调试符号选项，<code>gdb</code>将会非常有用。如上所述，我使用的是 Nginx Openresty 套件， 需要使用下面的命令开启调试符号选项重新编译：</p>\n<pre><code>~/openresty-1.11.2.2 $ ./configure -j2 --with-debug --with-openssl=../openssl-1.0.2j/ --with-openssl-opt=&quot;-d no-asm -g3 -O0 -fno-omit-frame-pointer -fno-inline-functions&quot;\n</code></pre>\n<p><code>--with-openssl-opt=&quot;-d no-asm -g3 -O0 -fno-omit-frame-pointer -fno-inline-functions&quot;</code> 确保 OpenSSL 编译的时候也开启调试符号信息。现在已经在Openresty的可执行程序中带有了调试符号信息，能通过<code>gdb</code>启动运行、找到上面提到的触发<code>mmap</code>的具体的调用函数。</p>\n<p>首先我们需要启动<code>gdb</code>调试 Openresty 可执行程序：</p>\n<pre><code>sudo gdb `which openresty`\n</code></pre>\n<p>这个命令将打开<code>gdb</code>命令行，像下面这样：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">GNU gdb (Ubuntu 7.7.1-0ubuntu5~14.04.2) 7.7.1</span><br><span class=\"line\">Copyright (C) 2014 Free Software Foundation, Inc.</span><br><span class=\"line\">License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;</span><br><span class=\"line\">This is free software: you are free to change and redistribute it.</span><br><span class=\"line\">There is NO WARRANTY, to the extent permitted by law.  Type &quot;show copying&quot;</span><br><span class=\"line\">and &quot;show warranty&quot; for details.</span><br><span class=\"line\">This GDB was configured as &quot;x86_64-linux-gnu&quot;.</span><br><span class=\"line\">Type &quot;show configuration&quot; for configuration details.</span><br><span class=\"line\">For bug reporting instructions, please see:</span><br><span class=\"line\">&lt;http://www.gnu.org/software/gdb/bugs/&gt;.</span><br><span class=\"line\">Find the GDB manual and other documentation resources online at:</span><br><span class=\"line\">&lt;http://www.gnu.org/software/gdb/documentation/&gt;.</span><br><span class=\"line\">For help, type &quot;help&quot;.</span><br><span class=\"line\">Type &quot;apropos word&quot; to search for commands related to &quot;word&quot;...</span><br><span class=\"line\">Reading symbols from /usr/local/openresty/bin/openresty...done.</span><br><span class=\"line\">(gdb)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>接下来，设置程序的命令行参数</p>\n<pre><code>(gdb) set args -p `pwd` -c nginx.conf\n</code></pre>\n<p>这将使<code>gdb</code>在启动 Opneresty/Nginx 的时候把给出的命令行参数传递过去。接着配置断点，使其能够暂停程序到某一个文件的某一行或者是某一个函数。因为我想找出在<code>open</code>打开信任的验证文件后，那个令人奇怪的<code>mmap</code>的调用者，所以我首先添加了一个断点在</p>\n<pre><code>open(&quot;/etc/ssl/certs/ca-certificates.crt&quot;, O_RDONLY) = 5\n</code></pre>\n<p>断点设置如下：</p>\n<pre><code>break open if strcmp($rdi, &quot;/etc/ssl/certs/ca-certificates.crt&quot;) == 0\n</code></pre>\n<p>如果你先前没有了解过gdb，gdb 是非常棒的工具，可以使用它添加一个自定义的条件来创建复杂的断点。这里我们告诉<code>gdb</code>暂停程序，如果<code>open</code>函数被调用并且<code>rdi</code>寄存器指向的数据是 <code>/etc/ssl/certs/ca-certificates.crt</code> 。我不知道是否还有更好的方式，<!-- 但是我是在观察了多次发现这种添加条件断点的方式 -->我是在反复尝试后，发现<code>open</code>函数的第一个参数（文件路径）保存在了<code>rdi</code>寄存器，所以才会如此设置断点。现在告诉<code>gdb</code>运行程序：</p>\n<pre><code>(gdb) run\n</code></pre>\n<p>第一次出现<code>open(&quot;/etc/ssl/certs/ca-certificates.crt&quot;, O_RDONLY)</code>调用时，<code>gdb</code>将会暂停程序执行。现在我们可以使用其他的<code>gdb</code>辅助命令观察此刻程序的内部状态。下面是程序执行到断点的时候的内部状态：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">Breakpoint 1, open64 () at ../sysdeps/unix/syscall-template.S:81</span><br><span class=\"line\">81  ../sysdeps/unix/syscall-template.S: No such file or directory.</span><br><span class=\"line\">(gdb) bt</span><br><span class=\"line\">#0  open64 () at ../sysdeps/unix/syscall-template.S:81</span><br><span class=\"line\">#1  0x00007ffff6a3dec8 in _IO_file_open (is32not64=8, read_write=8, prot=438, posix_mode=&lt;optimized out&gt;, filename=0x7fffffffdb00 &quot;\\346\\f\\362\\367\\377\\177&quot;, fp=0x7ffff7f28a10) at fileops.c:228</span><br><span class=\"line\">#2  _IO_new_file_fopen (fp=fp@entry=0x7ffff7f28a10, filename=filename@entry=0x7ffff7f20ce6 &quot;/etc/ssl/certs/ca-certificates.crt&quot;, mode=&lt;optimized out&gt;, mode@entry=0x6fb62d &quot;r&quot;, is32not64=is32not64@entry=1) at fileops.c:333</span><br><span class=\"line\">#3  0x00007ffff6a323d4 in __fopen_internal (filename=0x7ffff7f20ce6 &quot;/etc/ssl/certs/ca-certificates.crt&quot;, mode=0x6fb62d &quot;r&quot;, is32=1) at iofopen.c:90</span><br><span class=\"line\">#4  0x00000000005b3fd2 in file_fopen (filename=0x7ffff7f20ce6 &quot;/etc/ssl/certs/ca-certificates.crt&quot;, mode=0x6fb62d &quot;r&quot;) at bss_file.c:164</span><br><span class=\"line\">#5  0x00000000005b3fff in BIO_new_file (filename=0x7ffff7f20ce6 &quot;/etc/ssl/certs/ca-certificates.crt&quot;, mode=0x6fb62d &quot;r&quot;) at bss_file.c:172</span><br><span class=\"line\">#6  0x00000000005e8ad3 in X509_load_cert_crl_file (ctx=0x7ffff7f289e0, file=0x7ffff7f20ce6 &quot;/etc/ssl/certs/ca-certificates.crt&quot;, type=1) at by_file.c:251</span><br><span class=\"line\">#7  0x00000000005e8626 in by_file_ctrl (ctx=0x7ffff7f289e0, cmd=1, argp=0x7ffff7f20ce6 &quot;/etc/ssl/certs/ca-certificates.crt&quot;, argl=1, ret=0x0) at by_file.c:115</span><br><span class=\"line\">#8  0x00000000005e5747 in X509_LOOKUP_ctrl (ctx=0x7ffff7f289e0, cmd=1, argc=0x7ffff7f20ce6 &quot;/etc/ssl/certs/ca-certificates.crt&quot;, argl=1, ret=0x0) at x509_lu.c:120</span><br><span class=\"line\">#9  0x00000000005dd5c1 in X509_STORE_load_locations (ctx=0x7ffff7f28750, file=0x7ffff7f20ce6 &quot;/etc/ssl/certs/ca-certificates.crt&quot;, path=0x0) at x509_d2.c:94</span><br><span class=\"line\">#10 0x0000000000546e22 in SSL_CTX_load_verify_locations (ctx=0x7ffff7f27fd0, CAfile=0x7ffff7f20ce6 &quot;/etc/ssl/certs/ca-certificates.crt&quot;, CApath=0x0) at ssl_lib.c:3231</span><br><span class=\"line\">#11 0x0000000000477d94 in ngx_ssl_trusted_certificate (cf=cf@entry=0x7fffffffe150, ssl=0x7ffff7f27a78, cert=cert@entry=0x7ffff7f22f20, depth=&lt;optimized out&gt;) at src/event/ngx_event_openssl.c:687</span><br><span class=\"line\">#12 0x00000000004f0a1b in ngx_http_lua_set_ssl (llcf=0x7ffff7f22ef8, cf=0x7fffffffe150) at ../ngx_lua-0.10.7/src/ngx_http_lua_module.c:1240</span><br><span class=\"line\">#13 ngx_http_lua_merge_loc_conf (cf=0x7fffffffe150, parent=0x7ffff7f15808, child=0x7ffff7f22ef8) at ../ngx_lua-0.10.7/src/ngx_http_lua_module.c:1158</span><br><span class=\"line\">#14 0x000000000047e2b1 in ngx_http_merge_servers (cmcf=&lt;optimized out&gt;, cmcf=&lt;optimized out&gt;, ctx_index=&lt;optimized out&gt;, module=&lt;optimized out&gt;, cf=&lt;optimized out&gt;) at src/http/ngx_http.c:599</span><br><span class=\"line\">#15 ngx_http_block (cf=0x7fffffffe150, cmd=0x0, conf=0x1b6) at src/http/ngx_http.c:269</span><br><span class=\"line\">#16 0x0000000000460b5b in ngx_conf_handler (last=1, cf=0x7fffffffe150) at src/core/ngx_conf_file.c:427</span><br><span class=\"line\">#17 ngx_conf_parse (cf=cf@entry=0x7fffffffe150, filename=filename@entry=0x7ffff7f0b9e8) at src/core/ngx_conf_file.c:283</span><br><span class=\"line\">#18 0x000000000045e2f1 in ngx_init_cycle (old_cycle=old_cycle@entry=0x7fffffffe300) at src/core/ngx_cycle.c:274</span><br><span class=\"line\">#19 0x000000000044cef4 in main (argc=&lt;optimized out&gt;, argv=&lt;optimized out&gt;) at src/core/nginx.c:276</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<p>真令人兴奋，<code>gdb</code>向我们展示了完整的函数调用栈及参数！查看此刻寄存器中的数据，可以用 <code>info registers</code>命令。为了更好的理解调用栈，我查看了一下 <code>Nginx</code>的内部工作流程（我记得Openresty仅仅是组装了一些额外的模块的Nginx）。Nginx 内部所有的（除了Nginx 核心）都被实现为模块，这些模块注册 handlers 和 filters。Nginx 的配置文件主要有三个主要的块组成，分别是main、server、location。<br>假设您的自定义Nginx模块引入了一个新的配置指令，那么您还需要注册一个处理程序（handler）来处理该指令的配置的值。因此整个过程如下 Nginx 解析配置文件，每一个配置部分解析后就会调用注册的相应处理程序。下面是<code>lua-nginx-module</code>（Openresty Nginx 组件的核心模块）的实现：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">ngx_http_module_t</span> ngx_http_lua_module_ctx = &#123;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">if</span> (NGX_HTTP_LUA_HAVE_MMAP_SBRK)                                            \\</span></span><br><span class=\"line\"><span class=\"meta\">    &amp;&amp; (NGX_LINUX)                                                           \\</span></span><br><span class=\"line\"><span class=\"meta\">    &amp;&amp; !(NGX_HTTP_LUA_HAVE_CONSTRUCTOR)</span></span><br><span class=\"line\">    ngx_http_lua_pre_config,          <span class=\"comment\">/*  preconfiguration */</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">else</span></span></span><br><span class=\"line\">    <span class=\"literal\">NULL</span>,                             <span class=\"comment\">/*  preconfiguration */</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\">    ngx_http_lua_init,                <span class=\"comment\">/*  postconfiguration */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    ngx_http_lua_create_main_conf,    <span class=\"comment\">/*  create main configuration */</span></span><br><span class=\"line\">    ngx_http_lua_init_main_conf,      <span class=\"comment\">/*  init main configuration */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    ngx_http_lua_create_srv_conf,     <span class=\"comment\">/*  create server configuration */</span></span><br><span class=\"line\">    ngx_http_lua_merge_srv_conf,      <span class=\"comment\">/*  merge server configuration */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    ngx_http_lua_create_loc_conf,     <span class=\"comment\">/*  create location configuration */</span></span><br><span class=\"line\">    ngx_http_lua_merge_loc_conf       <span class=\"comment\">/*  merge location configuration */</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<p>这里是 Nginx 模块注册的处理程序。从注释中你也可以看到，Nginx 解析出来一个 location 配置 就会调用 <code>ngx_http_lua_merge_loc_conf </code> 将配置和 main 块合并。回到我们的上面的<code>gdb</code>输出,可以看到<code>#13</code>就是这个函数调用。默认情况下对于每一个 location 块配置这个函数将会被调用。通过<a href=\"https://github.com/openresty/lua-nginx-module/blob/master/src/ngx_http_lua_module.c#L1093\">源码</a>我们可以看到这个函数直接去读去配置值、继承server中的配置条目、设置默认值。如果设置了<code>lua_ssl_trusted_certificate </code>指令，可以看到其中调用了<code>ngx_http_lua_set_ssl</code>,在其内部又调用了Nginx SSL 模块的 <code>ngx_ssl_trusted_certificate</code>。<code>ngx_ssl_trusted_certificate</code> 是一个非常简单的函数，对于给定的配置块（一个location 块），设置SSL 环境(context)的验证深度，调用另外一个 OpenSSL API 加载验证文件（还有一些错误处理）。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">0649 ngx_int_t</span><br><span class=\"line\">0650 ngx_ssl_trusted_certificate(ngx_conf_t *cf, ngx_ssl_t *ssl, ngx_str_t *cert,</span><br><span class=\"line\">0651     ngx_int_t depth)</span><br><span class=\"line\">0652 &#123;</span><br><span class=\"line\">0653     SSL_CTX_set_verify_depth(ssl-&gt;ctx, depth);</span><br><span class=\"line\">0654 </span><br><span class=\"line\">0655     if (cert-&gt;len == 0) &#123;</span><br><span class=\"line\">0656         return NGX_OK;</span><br><span class=\"line\">0657     &#125;</span><br><span class=\"line\">0658 </span><br><span class=\"line\">0659     if (ngx_conf_full_name(cf-&gt;cycle, cert, 1) != NGX_OK) &#123;</span><br><span class=\"line\">0660         return NGX_ERROR;</span><br><span class=\"line\">0661     &#125;</span><br><span class=\"line\">0662 </span><br><span class=\"line\">0663     if (SSL_CTX_load_verify_locations(ssl-&gt;ctx, (char *) cert-&gt;data, NULL)</span><br><span class=\"line\">0664         == 0)</span><br><span class=\"line\">0665     &#123;</span><br><span class=\"line\">0666         ngx_ssl_error(NGX_LOG_EMERG, ssl-&gt;log, 0,</span><br><span class=\"line\">0667                       &quot;SSL_CTX_load_verify_locations(\\&quot;%s\\&quot;) failed&quot;,</span><br><span class=\"line\">0668                       cert-&gt;data);</span><br><span class=\"line\">0669         return NGX_ERROR;</span><br><span class=\"line\">0670     &#125;</span><br><span class=\"line\">0671 </span><br><span class=\"line\">0672     /*</span><br><span class=\"line\">0673      * SSL_CTX_load_verify_locations() may leave errors in the error queue</span><br><span class=\"line\">0674      * while returning success</span><br><span class=\"line\">0675      */</span><br><span class=\"line\">0676 </span><br><span class=\"line\">0677     ERR_clear_error();</span><br><span class=\"line\">0678 </span><br><span class=\"line\">0679     return NGX_OK;</span><br><span class=\"line\">0680 &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>Nginx SSL 模块的完整代码在<a href=\"http://lxr.nginx.org/source/src/event/ngx_event_openssl.c\">这里</a>能找到。</p>\n<p>现在我们已经走到调用栈的一半了，并且走出了 Nginx的世界。下一个函数调用是<code>SSL_CTX_load_verify_locations</code>，来自于 OpenSSL。程序在这里程序打开了信任的验证文件，并且暂停。接下来将会读取文件（根据上面的<code>strace</code>输出）。</p>\n<p>由于我最初的目的就是找出是谁调用了令人奇怪的<code>mmap</code> 调用，很自然的下一个断点就是:</p>\n<pre><code>(gdb) b mmap\n</code></pre>\n<p><code>b</code>是<code>break</code>的简写。<code>(gdb) c</code>将会继续程序的执行。程序暂停在了下一个断点：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">Breakpoint 3, mmap64 () at ../sysdeps/unix/syscall-template.S:81</span><br><span class=\"line\">81  ../sysdeps/unix/syscall-template.S: No such file or directory.</span><br><span class=\"line\">(gdb) bt</span><br><span class=\"line\">#0  mmap64 () at ../sysdeps/unix/syscall-template.S:81</span><br><span class=\"line\">#1  0x00007ffff6a44ad2 in sysmalloc (av=0x7ffff6d82760 &lt;main_arena&gt;, nb=48) at malloc.c:2495</span><br><span class=\"line\">#2  _int_malloc (av=0x7ffff6d82760 &lt;main_arena&gt;, bytes=40) at malloc.c:3800</span><br><span class=\"line\">#3  0x00007ffff6a466c0 in __GI___libc_malloc (bytes=40) at malloc.c:2891</span><br><span class=\"line\">#4  0x000000000057d829 in default_malloc_ex (num=40, file=0x6f630f &quot;a_object.c&quot;, line=350) at mem.c:79</span><br><span class=\"line\">#5  0x000000000057deb9 in CRYPTO_malloc (num=40, file=0x6f630f &quot;a_object.c&quot;, line=350) at mem.c:346</span><br><span class=\"line\">&lt;internal OpenSSL function calls stripped for clarity&gt;</span><br><span class=\"line\">#30 0x000000000065e2f7 in PEM_X509_INFO_read_bio (bp=0x7ffff7f28c50, sk=0x0, cb=0x0, u=0x0) at pem_info.c:248</span><br><span class=\"line\">#31 0x00000000005e8b22 in X509_load_cert_crl_file (ctx=0x7ffff7f289e0, file=0x7ffff7f20ce6 &quot;/etc/ssl/certs/ca-certificates.crt&quot;, type=1) at by_file.c:256</span><br><span class=\"line\">#32 0x00000000005e8626 in by_file_ctrl (ctx=0x7ffff7f289e0, cmd=1, argp=0x7ffff7f20ce6 &quot;/etc/ssl/certs/ca-certificates.crt&quot;, argl=1, ret=0x0) at by_file.c:115</span><br><span class=\"line\">#33 0x00000000005e5747 in X509_LOOKUP_ctrl (ctx=0x7ffff7f289e0, cmd=1, argc=0x7ffff7f20ce6 &quot;/etc/ssl/certs/ca-certificates.crt&quot;, argl=1, ret=0x0) at x509_lu.c:120</span><br><span class=\"line\">#34 0x00000000005dd5c1 in X509_STORE_load_locations (ctx=0x7ffff7f28750, file=0x7ffff7f20ce6 &quot;/etc/ssl/certs/ca-certificates.crt&quot;, path=0x0) at x509_d2.c:94</span><br><span class=\"line\">#35 0x0000000000546e22 in SSL_CTX_load_verify_locations (ctx=0x7ffff7f27fd0, CAfile=0x7ffff7f20ce6 &quot;/etc/ssl/certs/ca-certificates.crt&quot;, CApath=0x0) at ssl_lib.c:3231</span><br><span class=\"line\">#36 0x0000000000477d94 in ngx_ssl_trusted_certificate (cf=cf@entry=0x7fffffffe150, ssl=0x7ffff7f27a78, cert=cert@entry=0x7ffff7f22f20, depth=&lt;optimized out&gt;) at src/event/ngx_event_openssl.c:687</span><br><span class=\"line\">#37 0x00000000004f0a1b in ngx_http_lua_set_ssl (llcf=0x7ffff7f22ef8, cf=0x7fffffffe150) at ../ngx_lua-0.10.7/src/ngx_http_lua_module.c:1240</span><br><span class=\"line\">#38 ngx_http_lua_merge_loc_conf (cf=0x7fffffffe150, parent=0x7ffff7f15808, child=0x7ffff7f22ef8) at ../ngx_lua-0.10.7/src/ngx_http_lua_module.c:1158</span><br><span class=\"line\">#39 0x000000000047e2b1 in ngx_http_merge_servers (cmcf=&lt;optimized out&gt;, cmcf=&lt;optimized out&gt;, ctx_index=&lt;optimized out&gt;, module=&lt;optimized out&gt;, cf=&lt;optimized out&gt;) at src/http/ngx_http.c:599</span><br><span class=\"line\">&lt;Nginx function calls stripped for clarity&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>此刻我异常兴奋。我“发现”了一个OpenSSL内存泄露！带着异常兴奋的情绪，我开始阅读理解 上个世纪90年代就开发的 OpenSSL 的<a href=\"https://github.com/openssl/openssl/blob/master/crypto/x509/by_file.c#L2\">代码</a>。如此高兴，接下来的几天几夜去理解这写函数并且试图找到我非常确定的函数中的内存泄露。看了许多给 OpenSSL 的内存泄露bug（尤其是和上面这个函数相关的）后，我信心大增，因此我有花了几天几夜去捉这个臭虫！</p>\n<p>基本上这些函数做的事情是 首先打开受信任的证书文件，分配缓冲（4096字节），从文件中读取 4KB 内容到缓冲区，解密数据，转换成 OpenSSL 的内部表示，保存到给定的SSL context的<a href=\"https://github.com/openssl/openssl/blob/75e314f2d573d4f984ff6a371be7a4966bf5f4c5/crypto/x509/by_file.c#L211\">证书存储区</a>（这个属于一个 location 块上下文环境）。因此以后无论何时，在这个<code>location</code>块中，当Nginx需要验证SSL 客户端证书的时候，都将会调用OpneSSL 中的<code>SSL_get_verify_result</code>传递开始保存保存的 SSL context。接着那个函数将会使用已经加载的和内部初始化的受信任证书验证客户端。</p>\n<p>这就是日日夜夜学习的那些所有的事情如何在一起工作的收获，但是没有发现一个bug。</p>\n<p>也了解到<code>mmap</code>是被在<code>CRYPTO_malloc </code>触发的<code>malloc</code>调用的，<code>CRYPTO_malloc</code>是另一个OpenSSL 函数，用来扩展证书存储大小，使其可以适应解密和内部初始化的证书数据。现在我已经知道究竟发生了什么，其不会释放所分配的内存，因为OpenSSL在这个进程生命周期中的后面可能会使用。</p>\n<p><strong>但是这个主要的问题 ，当lua_ssl_trusted_certificate  指令配置后，为什 么 Nginx 消耗的内存增长如此之快，还是一个谜。</strong> </p>\n<p>从我手中掌握的已有数据来看是每个 location 块中的 <code>mmap</code>导致了这个问题。现在我决定提出 Openresty/Nginx 中的相关代码，用相同的 OpenSSL API 写一个独立C程序加载配置文件。</p>\n<p>反复调用模拟多个 location 块（我这里是5000个）:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">#include &lt;unistd.h&gt;</span><br><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">#include &lt;stdlib.h&gt;</span><br><span class=\"line\">#include &lt;sys/types.h&gt;</span><br><span class=\"line\">#include &lt;stdint.h&gt;</span><br><span class=\"line\">#include &lt;sys/mman.h&gt;</span><br><span class=\"line\">#include &lt;openssl/ssl.h&gt;</span><br><span class=\"line\">#include &lt;malloc.h&gt;</span><br><span class=\"line\">#include &lt;unistd.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">void read_cert() &#123;</span><br><span class=\"line\">        const char ca_bundlestr[] = &quot;/etc/ssl/certs/ca-certificates.crt&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">        BIO               *outbio = NULL;</span><br><span class=\"line\">        int ret;</span><br><span class=\"line\"></span><br><span class=\"line\">        SSL_CTX *ctx;</span><br><span class=\"line\"></span><br><span class=\"line\">        outbio  = BIO_new_fp(stdout, BIO_NOCLOSE);</span><br><span class=\"line\"></span><br><span class=\"line\">        SSL_library_init();</span><br><span class=\"line\">        SSL_load_error_strings();</span><br><span class=\"line\">        OpenSSL_add_all_algorithms();</span><br><span class=\"line\"></span><br><span class=\"line\">        ctx = SSL_CTX_new(SSLv23_method());</span><br><span class=\"line\"></span><br><span class=\"line\">        SSL_CTX_set_mode(ctx, SSL_MODE_RELEASE_BUFFERS);</span><br><span class=\"line\">        SSL_CTX_set_mode(ctx, SSL_MODE_NO_AUTO_CHAIN);</span><br><span class=\"line\">        SSL_CTX_set_read_ahead(ctx, 1);</span><br><span class=\"line\"></span><br><span class=\"line\">        ret = SSL_CTX_load_verify_locations(ctx, ca_bundlestr, NULL);</span><br><span class=\"line\">        if (ret == 0)</span><br><span class=\"line\">                BIO_printf(outbio, &quot;SSL_CTX_load_verify_locations failed&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">        BIO_free_all(outbio);</span><br><span class=\"line\">        SSL_CTX_free(ctx);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">int main() &#123;</span><br><span class=\"line\">        int i = 0;</span><br><span class=\"line\">        for (i = 0; i &lt; 5000; i++) &#123;</span><br><span class=\"line\">                read_cert();</span><br><span class=\"line\">                //malloc_trim(0);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        malloc_stats();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>如果我能解决这里的问题，我就能解决 Openresty/Nginx 中的问题，由于这是等价于原问题的。但是猜猜发生了什么，<code>strace</code> 的输出跟我预期的不同！</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">read(3, &quot;fqaEQn6/Ip3Xep1fvj1KcExJW4C+FEaG&quot;..., 4096) = 4096</span><br><span class=\"line\">read(3, &quot;IYWxvemF0Yml6dG9u\\nc2FnaSBLZnQuMR&quot;..., 4096) = 4096</span><br><span class=\"line\">read(3, &quot;nVz\\naXR2YW55a2lhZG8xHjAcBgkqhkiG&quot;..., 4096) = 4096</span><br><span class=\"line\">read(3, &quot;A\\nMIIBCgKCAQEAy0+zAJs9Nt350Ulqax&quot;..., 4096) = 4096</span><br><span class=\"line\">read(3, &quot;MRAwDgYDVQQHEwdDYXJhY2FzMRkwFwYD&quot;..., 4096) = 4096</span><br><span class=\"line\">read(3, &quot;OR1YqI0JDs3G3eicJlcZaLDQP9nL9bFq&quot;..., 4096) = 4096</span><br><span class=\"line\">read(3, &quot;E7zelaTfi5m+rJsziO+1ga8bxiJTyPbH&quot;..., 4096) = 4096</span><br><span class=\"line\">read(3, &quot;Xtdj182d6UajtLF8HVj71lODqV0D1VNk&quot;..., 4096) = 4096</span><br><span class=\"line\">read(3, &quot;AAOCAQ8AMIIBCgKCAQEAt49VcdKA3Xtp&quot;..., 4096) = 4096</span><br><span class=\"line\">brk(0x1cfb000)                          = 0x1cfb000</span><br><span class=\"line\">read(3, &quot;396gwpEWoGQRS0S8Hvbn+mPeZqx2pHGj&quot;..., 4096) = 4096</span><br><span class=\"line\">read(3, &quot;QYwDwYDVR0T\\nAQH/BAUwAwEB/zANBgkq&quot;..., 4096) = 4096</span><br><span class=\"line\">read(3, &quot;ETzsemQUHS\\nv4ilf0X8rLiltTMMgsT7B&quot;..., 4096) = 4096</span><br><span class=\"line\">read(3, &quot;wVU3RhYXQgZGVyIE5lZGVybGFuZGVuMS&quot;..., 4096) = 4096</span><br><span class=\"line\">read(3, &quot;N/uLicFZ8WJ/X7NfZTD4p7dN\\ndloedl4&quot;..., 4096) = 4096</span><br><span class=\"line\">read(3, &quot;fzDtgUx3M2FIk5xt/JxXrAaxrqTi3iSS&quot;..., 4096) = 4096</span><br><span class=\"line\">read(3, &quot;sO+wmETRIjfaAKxojAuuK\\nHDp2KntWFh&quot;..., 4096) = 4096</span><br><span class=\"line\">read(3, &quot;8z+uJGaYRo2aWNkkijzb2GShROfyQcsi&quot;..., 4096) = 4096</span><br><span class=\"line\">read(3, &quot;CydAXFJy3SuCvkychVSa1ZC+N\\n8f+mQA&quot;..., 4096) = 4096</span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><code>brk</code> 调用后面没有 <code>mmap</code> 调用，内存消耗也没有按照超出预期的增长！</p>\n<p>好吧，我现在非常恼火也想放弃。但是我我的好奇心没让我放弃。我决定了解更多的关于内存分配如何工作的。</p>\n<p>通常来说当程序中申请更多的内存的时候会调用glibc中的<code>malloc</code>(或者改版)。对于用户空间的程序，<code>glibc</code>抽象了很多内存管理的工作、提供了一个使用虚拟内存的 API 。</p>\n<p>默认情况下，当一个程序调用<code>malloc</code>的申请更多的堆上内存时候，将会使用<code>brk</code>申请需要的内存空间。如果堆上有洞，brk将不能正常工作。</p>\n<p>现在假设你有1G的堆上内存空闲空间。在上面直接创建一个洞，可以使用mmap指定具体地址A 这种方式，指定内存空间大小。这样mmap就会从堆上的内存地址A开始，申请指定大小的内存空间。</p>\n<p>但是因为程序中断点还在堆开始的地方,这时如果使用<code>sbrk</code>函数申请的B &gt; A 字节大小的内存空间，此次请求将会失败，因为<code>brk</code>尝试申请的一部分内存区域已经被分配（洞）。这时候<code>malloc</code>会使用<code>mmap</code>代替申请内存空间。</p>\n<p>因为<code>mmap</code>调用代价非常高，为了降低其调用次数，malloc 申请 1M内存即使申请分配的内存不足1M。<a href=\"https://code.woboq.org/userspace/glibc/malloc/malloc.c.html#406\">https://code.woboq.org/userspace/glibc/malloc/malloc.c.html#406</a> 注释文档中也有记载。你会发现上面的输出日志中，令人奇怪的<code>mmap</code>调用申请1048576字节内存，正好是1M–当brk失败后，<code>malloc</code>使用此默认值去调用mmap。</p>\n<p>高潮来了！！！把这些线索放一起。一个明显的猜想是 <strong><code>brk</code> 调用后面是mmap调用在Openresty 上下文环境中，但是在独立的c中却不是，因为 Openresty 在配置文件加载之前 在某个地方创建了一个洞。</strong> </p>\n<p>这不难验证，使用grep 命令在PRs,issus和<a href=\"https://github.com/openresty/lua-nginx-module\">lua-nginx-module</a>源码中查找。最后发现Luajit 需要工作在低地址空间获得更高的效率，这是为什么<code>lua-nginx-module</code>那群家伙决定在程序开始执行之前执行下面这段代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if (sbrk(0) &lt; (void *) 0x40000000LL) &#123;</span><br><span class=\"line\">    mmap(ngx_align_ptr(sbrk(0), getpagesize()), 1, PROT_READ,</span><br><span class=\"line\">         MAP_FIXED|MAP_PRIVATE|MAP_ANON, -1, 0);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p>完整代码可以在<a href=\"https://github.com/openresty/lua-nginx-module/blob/37e5362088bd659e318aae568b268719bd0d6707/src/ngx_http_lua_module.c#L1291\">仓库</a>中找到。现在我还没太弄明白这段代码是如何让luajit拥有低地址空间的（如果有人能在评论里面解释清楚，我将非常感激），但是这确实是导致这个问题的代码。</p>\n<p>为了证明，我拷贝出来这段代码到我的 独立 C 程序中：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/types.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdint.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/mman.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;openssl/ssl.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;malloc.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> ngx_align_ptr(p, a) \\</span></span><br><span class=\"line\"><span class=\"meta\">        (u_char *) (((uintptr_t) (p) + ((uintptr_t) a - 1)) &amp; ~((uintptr_t) a - 1))</span></span><br><span class=\"line\"></span><br><span class=\"line\">ngx_http_lua_limit_data_segment(<span class=\"type\">void</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (sbrk(<span class=\"number\">0</span>) &lt; (<span class=\"type\">void</span> *) <span class=\"number\">0x40000000</span>LL) &#123;</span><br><span class=\"line\">                mmap(ngx_align_ptr(sbrk(<span class=\"number\">0</span>), getpagesize()), <span class=\"number\">1</span>, PROT_READ,</span><br><span class=\"line\">                                MAP_FIXED|MAP_PRIVATE|MAP_ANON, <span class=\"number\">-1</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">read_cert</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">const</span> <span class=\"type\">char</span> ca_bundlestr[] = <span class=\"string\">&quot;/etc/ssl/certs/ca-certificates.crt&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        BIO               *outbio = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> ret;</span><br><span class=\"line\"></span><br><span class=\"line\">        SSL_CTX *ctx;</span><br><span class=\"line\"></span><br><span class=\"line\">        outbio  = BIO_new_fp(<span class=\"built_in\">stdout</span>, BIO_NOCLOSE);</span><br><span class=\"line\"></span><br><span class=\"line\">        SSL_library_init();</span><br><span class=\"line\">        SSL_load_error_strings();</span><br><span class=\"line\">        OpenSSL_add_all_algorithms();</span><br><span class=\"line\"></span><br><span class=\"line\">        ctx = SSL_CTX_new(SSLv23_method());</span><br><span class=\"line\"></span><br><span class=\"line\">        SSL_CTX_set_mode(ctx, SSL_MODE_RELEASE_BUFFERS);</span><br><span class=\"line\">        SSL_CTX_set_mode(ctx, SSL_MODE_NO_AUTO_CHAIN);</span><br><span class=\"line\">        SSL_CTX_set_read_ahead(ctx, <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        ret = SSL_CTX_load_verify_locations(ctx, ca_bundlestr, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ret == <span class=\"number\">0</span>)</span><br><span class=\"line\">                BIO_printf(outbio, <span class=\"string\">&quot;SSL_CTX_load_verify_locations failed&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        BIO_free_all(outbio);</span><br><span class=\"line\">        SSL_CTX_free(ctx);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        ngx_http_lua_limit_data_segment();</span><br><span class=\"line\">        <span class=\"type\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5000</span>; i++) &#123;</span><br><span class=\"line\">                read_cert();</span><br><span class=\"line\">                <span class=\"comment\">//malloc_trim(0);</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        malloc_stats();</span><br><span class=\"line\">        usleep(<span class=\"number\">1000</span> * <span class=\"number\">60</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<p>当我编译运行这段程序的时候，通过<code>strace</code>我能看到和Openresty环境中相同的行为。为了更进一步的确认，我编辑Opneresty的源码、注释掉<code>ngx_http_lua_limit_data_segment</code>、重新编译运行，内存增长的现象没有发生。</p>\n<p>搞定！！！</p>\n<p>上面就是我这次的收获。根据这次结果，我提交了一个<a href=\"https://github.com/openresty/lua-nginx-module/issues/1005\">issue</a>。当你有很多的location 块的时候，这真的会成为一个问题。例如加入你有一个很大的 Nginx 配置文件，里面有超过4k 个location 块，然后你加入了<code>lua_ssl_trusted_certificate</code>指令到 mian 配置块，然后当你 reload/restart/start Nginx 的时候，内存消耗将会增长到~4G(4k * 1MB)并且不会释放。</p>\n<p><a href=\"http://blog.soul11201.com/notes/translate/2017/03/25/translate-nginx-oom.html\">原文</a></p>\n<p><a href=\"http://www.elvinefendi.com/2017/03/07/my-experience-with-lua-nginx-openssl-strace-gdb-glibc-and-linux-vm.html\">原文链接</a></p>\n<p><strong>在<a href=\"https://github.com/openresty/lua-nginx-module/blob/37e5362088bd659e318aae568b268719bd0d6707/src/ngx_http_lua_module.c#L1294\">lua-nginx-module</a> 中，一个内存相关的黑魔法导致冗余的大内存分配。</strong></p>\n","text":"Openresty OOM 臭虫最近我在线上改变了一个的 Nginx 配置，导致 OOM（Out of Memory） killer 在 Nginx 加载新配置的过程中 杀死了 Nginx 进程。这是添加到配置中的行： lua_ssl_trusted_certificate /e...","link":"","photos":[],"count_time":{"symbolsCount":"20k","symbolsTime":"19 mins."},"categories":[{"name":"topic","slug":"topic","count":308,"path":"api/categories/topic.json"}],"tags":[{"name":"lua","slug":"lua","count":153,"path":"api/tags/lua.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Openresty-OOM-%E8%87%AD%E8%99%AB\"><span class=\"toc-text\">Openresty OOM 臭虫</span></a></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Nginx+Lua返回JSON类型数据","uid":"054f428f76705613481e9cfa45f6bed2","slug":"old_topic/2016-09-17-377","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T06:15:59.754Z","comments":true,"path":"api/articles/old_topic/2016-09-17-377.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":null,"text":"作者：糖果 Nginx返回JSON数据，一种是直接在配置文件里设置，一种是通过Lua代码封装完成，讲Nginx中执行Lua返回JSON的关键，一个用API函数ngx.say，同时配合json.encode对JSON格式的字符串进行编码，然后设定响应头信息的类型。 Nginx Co...","link":"","photos":[],"count_time":{"symbolsCount":"2.9k","symbolsTime":"3 mins."},"categories":[{"name":"topic","slug":"topic","count":308,"path":"api/categories/topic.json"}],"tags":[{"name":"lua","slug":"lua","count":153,"path":"api/tags/lua.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Blues框架如何取得请求者的Rquest信息","uid":"5eeea6ebd87d9454a6342cbab6e0f1fc","slug":"old_topic/2016-09-17-378","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T06:15:59.754Z","comments":true,"path":"api/articles/old_topic/2016-09-17-378.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":null,"text":"Blues框架如何取得请求者的Rquest信息 在request.lua下引用nginx.lua这个lazytable库。 123456789101112131415161718192021local params = require &quot;nginx&quot;funct...","link":"","photos":[],"count_time":{"symbolsCount":"1k","symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":308,"path":"api/categories/topic.json"}],"tags":[{"name":"lua","slug":"lua","count":153,"path":"api/tags/lua.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}