{"title":"防止 SQL 注入","uid":"8da56c97a3037418bdb94143c7040828","slug":"old_topic/2016-09-17-324","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T07:45:09.158Z","comments":true,"path":"api/articles/old_topic/2016-09-17-324.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<h1 id=\"防止-sql-注入\"><a class=\"markdownIt-Anchor\" href=\"#防止-sql-注入\"></a> 防止 SQL 注入</h1>\n<p>所谓 SQL 注入，就是通过把 SQL 命令插入到 Web 表单提交或输入域名或页面请求的查询字符串，最终达到欺骗服务器执行恶意的 SQL 命令。具体来说，它是利用现有应用程序，将（恶意）的 SQL 命令注入到后台数据库引擎执行的能力，它可以通过在 Web 表单中输入（恶意）SQL 语句得到一个存在安全漏洞的网站上的数据库，而不是按照设计者意图去执行 SQL 语句。比如先前的很多影视网站泄露 VIP 会员密码大多就是通过 Web 表单递交查询字符暴出的，这类表单特别容易受到 SQL 注入式攻击。</p>\n<h3 id=\"sql-注入例子\"><a class=\"markdownIt-Anchor\" href=\"#sql-注入例子\"></a> SQL 注入例子</h3>\n<p>下面给了一个完整的可复现的 SQL 注入例子，实际上注入的 SQL 语句写法有很多，下例是比较简单的。</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">location <span class=\"token operator\">/</span><span class=\"token function\">test</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">content_by_lua_block</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">local</span> mysql <span class=\"token operator\">=</span> require <span class=\"token string\">\"resty.mysql\"</span>\n        <span class=\"token keyword\">local</span> db<span class=\"token punctuation\">,</span> err <span class=\"token operator\">=</span> mysql<span class=\"token punctuation\">:</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> db <span class=\"token keyword\">then</span>\n            ngx<span class=\"token punctuation\">.</span><span class=\"token function\">say</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"failed to instantiate mysql: \"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span>\n        <span class=\"token keyword\">end</span>\n\n        db<span class=\"token punctuation\">:</span><span class=\"token function\">set_timeout</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">-- 1 sec</span>\n\n        <span class=\"token keyword\">local</span> ok<span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">,</span> errno<span class=\"token punctuation\">,</span> sqlstate <span class=\"token operator\">=</span> db<span class=\"token punctuation\">:</span><span class=\"token function\">connect</span><span class=\"token punctuation\">&#123;</span>\n            host <span class=\"token operator\">=</span> <span class=\"token string\">\"127.0.0.1\"</span><span class=\"token punctuation\">,</span>\n            port <span class=\"token operator\">=</span> <span class=\"token number\">3306</span><span class=\"token punctuation\">,</span>\n            database <span class=\"token operator\">=</span> <span class=\"token string\">\"ngx_test\"</span><span class=\"token punctuation\">,</span>\n            user <span class=\"token operator\">=</span> <span class=\"token string\">\"ngx_test\"</span><span class=\"token punctuation\">,</span>\n            password <span class=\"token operator\">=</span> <span class=\"token string\">\"ngx_test\"</span><span class=\"token punctuation\">,</span>\n            max_packet_size <span class=\"token operator\">=</span> <span class=\"token number\">1024</span> <span class=\"token operator\">*</span> <span class=\"token number\">1024</span> <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> ok <span class=\"token keyword\">then</span>\n            ngx<span class=\"token punctuation\">.</span><span class=\"token function\">say</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"failed to connect: \"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">,</span> <span class=\"token string\">\": \"</span><span class=\"token punctuation\">,</span> errno<span class=\"token punctuation\">,</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">,</span> sqlstate<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span>\n        <span class=\"token keyword\">end</span>\n\n        ngx<span class=\"token punctuation\">.</span><span class=\"token function\">say</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"connected to mysql.\"</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">local</span> res<span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">,</span> errno<span class=\"token punctuation\">,</span> sqlstate <span class=\"token operator\">=</span>\n            db<span class=\"token punctuation\">:</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"drop table if exists cats\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> res <span class=\"token keyword\">then</span>\n            ngx<span class=\"token punctuation\">.</span><span class=\"token function\">say</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bad result: \"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">,</span> <span class=\"token string\">\": \"</span><span class=\"token punctuation\">,</span> errno<span class=\"token punctuation\">,</span> <span class=\"token string\">\": \"</span><span class=\"token punctuation\">,</span> sqlstate<span class=\"token punctuation\">,</span> <span class=\"token string\">\".\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span>\n        <span class=\"token keyword\">end</span>\n\n        res<span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">,</span> errno<span class=\"token punctuation\">,</span> sqlstate <span class=\"token operator\">=</span>\n            db<span class=\"token punctuation\">:</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"create table cats \"</span>\n                     <span class=\"token operator\">..</span> <span class=\"token string\">\"(id serial primary key, \"</span>\n                     <span class=\"token operator\">..</span> <span class=\"token string\">\"name varchar(5))\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> res <span class=\"token keyword\">then</span>\n            ngx<span class=\"token punctuation\">.</span><span class=\"token function\">say</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bad result: \"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">,</span> <span class=\"token string\">\": \"</span><span class=\"token punctuation\">,</span> errno<span class=\"token punctuation\">,</span> <span class=\"token string\">\": \"</span><span class=\"token punctuation\">,</span> sqlstate<span class=\"token punctuation\">,</span> <span class=\"token string\">\".\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span>\n        <span class=\"token keyword\">end</span>\n\n        ngx<span class=\"token punctuation\">.</span><span class=\"token function\">say</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"table cats created.\"</span><span class=\"token punctuation\">)</span>\n\n        res<span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">,</span> errno<span class=\"token punctuation\">,</span> sqlstate <span class=\"token operator\">=</span>\n            db<span class=\"token punctuation\">:</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"insert into cats (name) \"</span>\n                     <span class=\"token operator\">..</span> <span class=\"token string\">\"values (\\'Bob\\'),(\\'\\'),(null)\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> res <span class=\"token keyword\">then</span>\n            ngx<span class=\"token punctuation\">.</span><span class=\"token function\">say</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bad result: \"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">,</span> <span class=\"token string\">\": \"</span><span class=\"token punctuation\">,</span> errno<span class=\"token punctuation\">,</span> <span class=\"token string\">\": \"</span><span class=\"token punctuation\">,</span> sqlstate<span class=\"token punctuation\">,</span> <span class=\"token string\">\".\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span>\n        <span class=\"token keyword\">end</span>\n\n        ngx<span class=\"token punctuation\">.</span><span class=\"token function\">say</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>affected_rows<span class=\"token punctuation\">,</span> <span class=\"token string\">\" rows inserted into table cats \"</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"(last insert id: \"</span><span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">.</span>insert_id<span class=\"token punctuation\">,</span> <span class=\"token string\">\")\"</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\">-- 这里有 SQL 注入（后面的 drop 操作）</span>\n        <span class=\"token keyword\">local</span> req_id <span class=\"token operator\">=</span> <span class=\"token string\">[[1'; drop table cats;--]]</span>\n        res<span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">,</span> errno<span class=\"token punctuation\">,</span> sqlstate <span class=\"token operator\">=</span>\n            db<span class=\"token punctuation\">:</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">[[select * from cats where id = '%s']]</span><span class=\"token punctuation\">,</span> req_id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> res <span class=\"token keyword\">then</span>\n            ngx<span class=\"token punctuation\">.</span><span class=\"token function\">say</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bad result: \"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">,</span> <span class=\"token string\">\": \"</span><span class=\"token punctuation\">,</span> errno<span class=\"token punctuation\">,</span> <span class=\"token string\">\": \"</span><span class=\"token punctuation\">,</span> sqlstate<span class=\"token punctuation\">,</span> <span class=\"token string\">\".\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span>\n        <span class=\"token keyword\">end</span>\n\n        <span class=\"token keyword\">local</span> cjson <span class=\"token operator\">=</span> require <span class=\"token string\">\"cjson\"</span>\n        ngx<span class=\"token punctuation\">.</span><span class=\"token function\">say</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"result: \"</span><span class=\"token punctuation\">,</span> cjson<span class=\"token punctuation\">.</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\">-- 再次查询，table 被删</span>\n        res<span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">,</span> errno<span class=\"token punctuation\">,</span> sqlstate <span class=\"token operator\">=</span>\n            db<span class=\"token punctuation\">:</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token string\">[[select * from cats where id = 1]]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> res <span class=\"token keyword\">then</span>\n            ngx<span class=\"token punctuation\">.</span><span class=\"token function\">say</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bad result: \"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">,</span> <span class=\"token string\">\": \"</span><span class=\"token punctuation\">,</span> errno<span class=\"token punctuation\">,</span> <span class=\"token string\">\": \"</span><span class=\"token punctuation\">,</span> sqlstate<span class=\"token punctuation\">,</span> <span class=\"token string\">\".\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span>\n        <span class=\"token keyword\">end</span>\n\n        db<span class=\"token punctuation\">:</span><span class=\"token function\">set_keepalive</span><span class=\"token punctuation\">(</span><span class=\"token number\">10000</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>其他变种，大家可以自行爬行搜索引擎了解。</p>\n<h3 id=\"openresty-中如何规避\"><a class=\"markdownIt-Anchor\" href=\"#openresty-中如何规避\"></a> OpenResty 中如何规避</h3>\n<p>其实大家可以大概网络爬行一下看看如何解决 SQL 注入，可以发现实现方法很多，比如替换各种关键字等。在 OpenResty 中，其实就简单很多了，只需要对输入参数进行一层过滤即可。</p>\n<p>对于 MySQL ，可以调用 <code>ndk.set_var.set_quote_sql_str</code> ，进行一次过滤即可。</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\"><span class=\"token comment\">-- for MySQL</span>\n<span class=\"token keyword\">local</span> req_id <span class=\"token operator\">=</span> <span class=\"token string\">[[1'; drop table cats;--]]</span>\nres<span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">,</span> errno<span class=\"token punctuation\">,</span> sqlstate <span class=\"token operator\">=</span>\n    db<span class=\"token punctuation\">:</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">[[select * from cats where id = '%s']]</span><span class=\"token punctuation\">,</span>\n    ndk<span class=\"token punctuation\">.</span>set_var<span class=\"token punctuation\">.</span><span class=\"token function\">set_quote_sql_str</span><span class=\"token punctuation\">(</span>req_id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> res <span class=\"token keyword\">then</span>\n    ngx<span class=\"token punctuation\">.</span><span class=\"token function\">say</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bad result: \"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">,</span> <span class=\"token string\">\": \"</span><span class=\"token punctuation\">,</span> errno<span class=\"token punctuation\">,</span> <span class=\"token string\">\": \"</span><span class=\"token punctuation\">,</span> sqlstate<span class=\"token punctuation\">,</span> <span class=\"token string\">\".\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span>\n<span class=\"token keyword\">end</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>如果恰巧你使用的是 PostgreSQL ，调用 <code>ndk.set_var.set_quote_pgsql_str</code> 过滤输入变量。读者这时候可以再次把这段代码放到刚刚的示例代码中，如果您可以得到下面的错误，恭喜您，以正确的姿势防止 SQL 注入。</p>\n<pre><code>bad result: You have an error in your SQL syntax; check the manual that\ncorresponds to your MySQL server version for the right syntax to use near\n'1\\'; drop table cats;--''' at line 1: 1064: 42000.\n</code></pre>\n","text":" 防止 SQL 注入 所谓 SQL 注入，就是通过把 SQL 命令插入到 Web 表单提交或输入域名或页面请求的查询字符串，最终达到欺骗服务器执行恶意的 SQL 命令。具体来说，它是利用现有应用程序，将（恶意）的 SQL 命令注入到后台数据库引擎执行的能力，它可以通过在 Web ...","link":"","photos":[],"count_time":{"symbolsCount":"3.5k","symbolsTime":"3 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E9%98%B2%E6%AD%A2-sql-%E6%B3%A8%E5%85%A5\"><span class=\"toc-text\"> 防止 SQL 注入</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#sql-%E6%B3%A8%E5%85%A5%E4%BE%8B%E5%AD%90\"><span class=\"toc-text\"> SQL 注入例子</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#openresty-%E4%B8%AD%E5%A6%82%E4%BD%95%E8%A7%84%E9%81%BF\"><span class=\"toc-text\"> OpenResty 中如何规避</span></a></li></ol></li></ol></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Mac OS X 平台安装","uid":"dbbe8ecea366b89ee238486a58b71f70","slug":"old_topic/2016-09-17-323","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T07:45:09.232Z","comments":true,"path":"api/articles/old_topic/2016-09-17-323.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":" Mac OS X 平台安装 源码包准备 我们首先要在官网下载OpenResty的源码包。官网上会提供很多的版本，各个版本有什么不同也会有说明，我们可以按需选择下载。笔者选择下载的源码包 ngx_openresty-1.9.7.1.tar.gz。 相关库的安装 将这些相关库安装到...","link":"","photos":[],"count_time":{"symbolsCount":"1.5k","symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"输出响应体","uid":"9aa16bf014a426133910ab8bd80b8292","slug":"old_topic/2016-09-17-325","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T07:45:09.182Z","comments":true,"path":"api/articles/old_topic/2016-09-17-325.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":" 输出响应体 HTTP响应报文分为三个部分： 响应行 响应头 响应体 对于 HTTP 响应体的输出，在 OpenResty 中调用 ngx.say 或 ngx.print 即可。经过查看官方 wiki ，这两者都是输出响应体，区别是 ngx.say 会对输出响应体多输出一个 \\n...","link":"","photos":[],"count_time":{"symbolsCount":"2.6k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}