{"title":"Dynamic scoping in Lua","uid":"2f003d0017b1d37a480d2ac6c15521d5","slug":"old_topic/2016-09-17-244","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T07:45:09.160Z","comments":true,"path":"api/articles/old_topic/2016-09-17-244.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":null,"content":"<p>作者：leafo</p>\n<p><a href=\"http://leafo.net/guides/dynamic-scoping-in-lua.html\" target=\"_blank\">原文连接：</a></p>\n<p>准备翻译这篇文章。</p>\n<p>What is dyanmic scoping<br>\nAn example<br>\nImplementing dynamic scoping<br>\nWhen to use dynamic scoping</p>\n<p>What is dyanmic scoping</p>\n<p>Dynamic scoping is a programming language paradigm that you don’t typically see. The scoping that most programmers are used to is called lexical scoping. It’s found in Lua and many other languages. Lexical scoping is the dominant choice for a reason: it’s easy to reason about and understand just by looking at the code. We can see what variables are in scope just by looking at the structure of the text in our editor. Scoping controls how a variable’s value is resolved.</p>\n<p>Dynamic scoping does not care how the code is written, but instead how it executes. Each time a new function is executed, a new scope is pushed onto the stack. This scope is typically stored with the function’s call stack. When a variable is referenced in the function, the scope in each call stack is checked to see if it provides the value.</p>\n<p>An example</p>\n<p>Using the syntax dynamic(var) to represent a dynamic scope variable lookup:</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">local</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">make_printer</span><span class=\"params\">()</span></span></span><br><span class=\"line\">  <span class=\"keyword\">local</span> a = <span class=\"number\">100</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Lexical scoping:&quot;</span>, a)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Dynamic scoping:&quot;</span>, dynamic(a))</span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">local</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">run_func</span><span class=\"params\">(fn)</span></span></span><br><span class=\"line\">  <span class=\"keyword\">local</span> a = <span class=\"number\">200</span></span><br><span class=\"line\">  fn()</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">local</span> print_a = make_printer()</span><br><span class=\"line\"></span><br><span class=\"line\">run_func(print_a)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>– prints:<br>\n– Lexical scoping: 100<br>\n– Dynamic scoping: 200<br>\nIn this example we’re priting a variable named a with each of the scoping styles. With lexical scoping it’s very easy to see that we’ve created a closure on the variable a. That variable is bound to the scope of print_a because the way the code blocks have been written nest the scopes.</p>\n<p>With dynamic scoping things are a bit different. Each entry in the callstack represents a different scope to check for the variable a. Because there is no a defined in the function referencing it, we traverse up the call stack to find a declared variable. It’s found in the body of run_func, where the value is 200.</p>\n<p>The usefulness of this scoping may not be immediately clear. It may seem very error prone because the value of the variable we’re requesting can come from any caller’s stack, even code that we haven’t event written.</p>\n<p>The power of dynamic scoping is that we can inspect the calling context to control the behavior of our functions.</p>\n<p>Implementing dynamic scoping</p>\n<p>We can implement dynamic scoping fairly easily in Lua through the debug library. We’ll mimic the example above with a function called dynamic that takes the name of a variable, as a string, to look up dynamically.</p>\n<p>In Implementing setfenv in Lua 5.2, 5.3, and above we discovered how we could use debug.getupvalue to implement setfenv. For dynamic scoping we’ll rely on the debug.getlocal function.</p>\n<p>The signature of getlocal is debug.getlocal ([thread,] level, local). In this example we’re not concerned with the thread so we’ll focus on level and local.</p>\n<p>level is an integer that represents how many levels up the call stack we want to look for the variable we’re searching for.<br>\nlocal is the index of that local variable we want to resolve, starting at 1.<br>\nThe return value of this function is either nil if nothing was found, or the name and value of the variable.</p>\n<p>To find a local variable in an higher up scope, we just need to keep incrementing level and querying each local variable by its numeric index until we find the matching name. Here’s the implementation:</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dynamic</span><span class=\"params\">(name)</span></span></span><br><span class=\"line\">  <span class=\"keyword\">local</span> level = <span class=\"number\">2</span></span><br><span class=\"line\">  <span class=\"comment\">-- iterate over </span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> <span class=\"literal\">true</span> <span class=\"keyword\">do</span></span><br><span class=\"line\">    <span class=\"keyword\">local</span> i = <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"comment\">-- iterate over each local by index</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"literal\">true</span> <span class=\"keyword\">do</span></span><br><span class=\"line\">      <span class=\"keyword\">local</span> found_name, found_val = <span class=\"built_in\">debug</span>.<span class=\"built_in\">getlocal</span>(level, i)</span><br><span class=\"line\">      <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> found_name <span class=\"keyword\">then</span> <span class=\"keyword\">break</span> <span class=\"keyword\">end</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> found_name == name <span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> found_val</span><br><span class=\"line\">      <span class=\"keyword\">end</span></span><br><span class=\"line\">      i = i + <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\">    level = level + <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<p>Now we can rewrite the example from the top of the post to use this function:</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">local</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">make_printer</span><span class=\"params\">()</span></span></span><br><span class=\"line\">  <span class=\"keyword\">local</span> a = <span class=\"number\">100</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Lexical scoping:&quot;</span>, a)</span><br><span class=\"line\">    <span class=\"comment\">-- notice we pass in &quot;a&quot; here</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Dynamic scoping:&quot;</span>, dynamic(<span class=\"string\">&quot;a&quot;</span>))</span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">local</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">run_func</span><span class=\"params\">(fn)</span></span></span><br><span class=\"line\">  <span class=\"keyword\">local</span> a = <span class=\"number\">200</span></span><br><span class=\"line\">  fn()</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">local</span> print_a = make_printer()</span><br><span class=\"line\"></span><br><span class=\"line\">run_func(print_a)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>When to use dynamic scoping</p>\n<p>In the general case, it’s probably best to avoid dynamic scoping since it makes code harder to understand at a glance. In any case, there are some situations where dynamic scoping is useful.</p>\n<p>DSLs, where terseness is important, can benefit from dynamic scoping by using the implicit context of function calls to make arguments available that haven’t been explicitly passed. A basic example would be removing the need to pass self as an argument if it can be fetched from the containing scope.</p>\n","text":"作者：leafo 原文连接： 准备翻译这篇文章。 What is dyanmic scoping An example Implementing dynamic scoping When to use dynamic scoping What is dyanmic scoping...","link":"","photos":[],"count_time":{"symbolsCount":"4.7k","symbolsTime":"4 mins."},"categories":[{"name":"topic","slug":"topic","count":308,"path":"api/categories/topic.json"}],"tags":[],"toc":"","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"SCSS的PHP编译程序SCSSPHP","uid":"81ed100fdd2c30055bc0890be02c4788","slug":"old_topic/2016-09-17-242","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T07:45:09.217Z","comments":true,"path":"api/articles/old_topic/2016-09-17-242.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":null,"text":"作者：糖果 SCSS是用于生成CSS的，leafo老哥，实现了一个php版本的项目叫：SCSSPHP 这个项目在他的leafo.net的项目中有使用，配合sitegen使用，生成静态网站。下面是直接引用了他的项目的 Readme http://leafo.github.io/sc...","link":"","photos":[],"count_time":{"symbolsCount":"1.6k","symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":308,"path":"api/categories/topic.json"}],"tags":[],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"SAE上用Git部署Laravel5","uid":"87ad0835fe7e01f9e6199a2d7f96fa18","slug":"old_topic/2016-09-17-243","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T07:45:09.224Z","comments":true,"path":"api/articles/old_topic/2016-09-17-243.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":null,"text":"作者：糖果 有好心人做了Laravel在SAE的移植工作。我 fork了一下， 本向导入到coding.net里，因为原作者的主分支在github，所有就在github上fork一个分支。 Laravel on SAE SAE很久以前也开起了git部署功能，所以现在在SAE部署一...","link":"","photos":[],"count_time":{"symbolsCount":748,"symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":308,"path":"api/categories/topic.json"}],"tags":[],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}