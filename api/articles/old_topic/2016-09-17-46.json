{"title":"Python和C++混合使用QML开发GUI","uid":"0cb9b7f667542d54e27810e7e909c462","slug":"old_topic/2016-09-17-46","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T07:45:09.196Z","comments":true,"path":"api/articles/old_topic/2016-09-17-46.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":null,"content":"<p>作者：糖果</p>\n<p>pyqt和qml结合的中文资很少，在baidu上搜索，基本上就是浪费时间。在国外的blog上，有零星的几篇，但是介绍好的少。在stackoverflow上看到一篇关于pyside，发现pyside，发现pyside果然给力，那就开始我们的pyside游戏之旅吧。</p>\n<p>【编辑器】目前的编辑环境是，Eclipse+PyDev, Erics, QtCreator这三个工具一起使用。用前两者进PY代码编辑，用QtCreator进行QML编辑和设计。</p>\n<p>【概要】用PyQt,C++,QML实现一个简单但的文本输入框值得取得和设置。从编码角度来看，我们需要在Python中调用QML的function方法，并通过参数传递把python中设定的变量值给QML.需要在QML中调用Python定义的函数方法，并把QML中InputText的Text值传递给Python.无论控件和业务逻辑多复杂都是如此。</p>\n<h3>Python代码</h3> \n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"keyword\">from</span> PySide <span class=\"keyword\">import</span> QtCore, QtDeclarative,  QtGui</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">QtInterface</span>(QtCore.QObject):</span><br><span class=\"line\">    signaller_in_txt = QtCore.Signal(<span class=\"built_in\">str</span>)</span><br><span class=\"line\">    signaller_out_txt = QtCore.Signal()</span><br><span class=\"line\">    </span><br><span class=\"line\">     <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        QtCore.QObject.__init__(self)</span><br><span class=\"line\">        self.in_txt = <span class=\"string\">&quot;test&quot;</span></span><br></pre></td></tr></table></figure>\n<pre><code> #@的这种声明方式，会在后面的部分介绍，并且参考链接中，有一篇文也介绍的很清晰。\n\n #这是一个不带参数的Slot函数。                \n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@QtCore.Slot()</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">getInputText</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">    <span class=\"built_in\">print</span> self.in_txt        </span><br></pre></td></tr></table></figure>\n<pre><code> #这个一个带参数的Slot函数，我们就是利用这个参数，在QML中，调用这个函数，并把InputText的text值发送过来，并且在函数中，打印出这个传递值。\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@QtCore.Slot(<span class=\"params\"><span class=\"built_in\">str</span></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">setInputText</span>(<span class=\"params\">self, text</span>):</span><br><span class=\"line\">    <span class=\"built_in\">print</span> text</span><br></pre></td></tr></table></figure>\n<pre><code> #在updateValues函数中，通过信号发射，调用QML中的function函数，并将对控件的设置值，传递过去。信号变量声明，在类中，和与对应的QML函数简历毁掉联系，是在main函数中完成的。\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">updateValues</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\"><span class=\"comment\">#        self.signaller_in_txt.emit(str(self.in_txt))</span></span><br><span class=\"line\">        self.signaller_out_txt.emit()</span><br></pre></td></tr></table></figure>\n<p>MainView是主要View视图，继承了基类，QDeclarativeView，继承了最大化，最小话和关闭窗体的机能。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MainView</span>(QtDeclarative.QDeclarativeView):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self,  parent=<span class=\"literal\">None</span></span>):</span><br><span class=\"line\">          <span class=\"comment\">#构造父类</span></span><br><span class=\"line\">        <span class=\"built_in\">super</span>( MainView,  self).__init__(parent)</span><br><span class=\"line\">          <span class=\"comment\">#设定窗体Title内容</span></span><br><span class=\"line\">        self.setWindowTitle(<span class=\"string\">&quot;Counter&quot;</span>)</span><br><span class=\"line\">          <span class=\"comment\">#设定与本地QML关联</span></span><br><span class=\"line\">        self.setSource( QtCore.QUrl.fromLocalFile(<span class=\"string\">&#x27;abc.qml&#x27;</span>))</span><br><span class=\"line\">          <span class=\"comment\">#设定窗体尺寸变化的模式，继承了父类的模式</span></span><br><span class=\"line\">        self.setResizeMode( QtDeclarative.QDeclarativeView.SizeRootObjectToView)</span><br></pre></td></tr></table></figure>\n<p>创建一个QtGui的应用实例</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">qApplication = QtGui.QApplication(sys.argv)</span><br><span class=\"line\">#主视图创建</span><br><span class=\"line\">window = MainView()</span><br><span class=\"line\">#显示主视图</span><br><span class=\"line\">window.show()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#取得用于解析QML的类实例</span><br><span class=\"line\">qcontext = window.rootContext()</span><br><span class=\"line\">interface = QtInterface()</span><br><span class=\"line\">#将用户自己的QtObject子类和窗体类建立连接</span><br><span class=\"line\">qcontext.setContextProperty(<span class=\"string\">&quot;qInterface&quot;</span>,  interface)</span><br><span class=\"line\"></span><br><span class=\"line\">#将信号和QML函数建立映射关联。</span><br><span class=\"line\">interface.signaller_score_a.connect(window.rootObject().updateScoreA)</span><br><span class=\"line\">interface.signaller_in_txt.connect(window.rootObject().updateInText)</span><br><span class=\"line\">interface.signaller_out_txt.connect(window.rootObject().getInTxt)</span><br><span class=\"line\"></span><br><span class=\"line\">#退出应用</span><br><span class=\"line\">sys.<span class=\"built_in\">exit</span>(qApplication.exec_())</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3>QML代码</h3> \n<p>QML语言基本UI元素的描述信息和功能函数，QML本身可以通过自己的函数定义执行来完成一定程度上功能，完全和背后的语言（C++,Python）脱离关系。而且在很多的平台上使用，甚至包括移动平台，可以和我的WEB服务器很好的链接，传递数据。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import QtQuick 1.1</span><br><span class=\"line\"></span><br><span class=\"line\">Rectangle &#123;</span><br><span class=\"line\">    id: rectangle1</span><br><span class=\"line\">    width: 480</span><br><span class=\"line\">    height: 272</span><br><span class=\"line\"></span><br><span class=\"line\">    gradient: Gradient &#123;</span><br><span class=\"line\">        GradientStop &#123;</span><br><span class=\"line\">            id: gradientStop1</span><br><span class=\"line\">            position: 0</span><br><span class=\"line\">            color: &quot;#ffffff&quot;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        GradientStop &#123;</span><br><span class=\"line\">            position: 1</span><br><span class=\"line\">            color: &quot;#abc09f&quot;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    //UML中的函数，要通过emit发射信号调用。</span><br><span class=\"line\">    function updateInText(string) &#123;</span><br><span class=\"line\">        in_txt.text = string</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    function updateIn() &#123;</span><br><span class=\"line\">        in_txt.text = &quot;ozzy&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    //在Python中，通过emit调用getInTxt函数</span><br><span class=\"line\">    function getInTxt() &#123;</span><br><span class=\"line\">         //console.log基本就是JavaScript的用法。</span><br><span class=\"line\">        console.log(&quot;debug&quot;)</span><br><span class=\"line\">        return (in_txt.text)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    Text &#123;</span><br><span class=\"line\">        id: score_a</span><br><span class=\"line\">        x: 150</span><br><span class=\"line\">        y: 74</span><br><span class=\"line\">        width: 131</span><br><span class=\"line\">        height: 48</span><br><span class=\"line\">        text: qsTr(&quot;Text&quot;)</span><br><span class=\"line\">        verticalAlignment: Text.AlignVCenter</span><br><span class=\"line\">        font.pixelSize: 12</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    MouseArea &#123;</span><br><span class=\"line\">        id: a_scored</span><br><span class=\"line\">        x: 303</span><br><span class=\"line\">        y: 200</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    Rectangle &#123;</span><br><span class=\"line\">        id: team_a</span><br><span class=\"line\">        x: 150</span><br><span class=\"line\">        y: 148</span><br><span class=\"line\">        width: 127</span><br><span class=\"line\">        height: 46</span><br><span class=\"line\">        color: &quot;#4e3a3a&quot;</span><br><span class=\"line\">        radius: 10</span><br><span class=\"line\"></span><br><span class=\"line\">        TextInput &#123;</span><br><span class=\"line\">            id: team_a_txt</span><br><span class=\"line\">            x: 24</span><br><span class=\"line\">            y: 13</span><br><span class=\"line\">            width: 80</span><br><span class=\"line\">            height: 20</span><br><span class=\"line\">            text: qsTr(&quot;A&quot;)</span><br><span class=\"line\">            selectionColor: &quot;#316cc4&quot;</span><br><span class=\"line\">            horizontalAlignment: TextInput.AlignHCenter</span><br><span class=\"line\">            font.pixelSize: 12</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        MouseArea &#123;</span><br><span class=\"line\">            id: team_a_score_ma</span><br><span class=\"line\">            x: 1</span><br><span class=\"line\">            y: 0</span><br><span class=\"line\">            width: 126</span><br><span class=\"line\">            height: 46</span><br><span class=\"line\">            onClicked: &#123;</span><br><span class=\"line\">                qInterface.aScored()</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    TextInput &#123;</span><br><span class=\"line\">        id: in_txt</span><br><span class=\"line\">        x: 345</span><br><span class=\"line\">        y: 67</span><br><span class=\"line\">        width: 80</span><br><span class=\"line\">        height: 20</span><br><span class=\"line\">        text: qsTr(&quot;InputText&quot;)</span><br><span class=\"line\">        selectionColor: &quot;#316cc4&quot;</span><br><span class=\"line\">        font.pixelSize: 12</span><br><span class=\"line\"></span><br><span class=\"line\">        MouseArea &#123;</span><br><span class=\"line\">            id: in_txt_ma</span><br><span class=\"line\">            x: -17</span><br><span class=\"line\">            y: 77</span><br><span class=\"line\">            width: 115</span><br><span class=\"line\">            height: 57</span><br><span class=\"line\">            z: 2</span><br><span class=\"line\">          //直接在MouseArea中添加对应的事件处理</span><br><span class=\"line\">            onClicked: &#123;</span><br><span class=\"line\">               //qInterface是在Python中建立的映射关系，通过这个对象实例，就可以直接调用Python中的函数方法，并且可以传递参数               </span><br><span class=\"line\">                qInterface.setInputText(in_txt.text)</span><br><span class=\"line\">     //下面的这个函数被注释掉了，因为getText()是一个C++写的方法</span><br><span class=\"line\">     //console.log(qInterface.getText())</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    Rectangle &#123;</span><br><span class=\"line\">        id: get_in_text</span><br><span class=\"line\">        x: 322</span><br><span class=\"line\">        y: 148</span><br><span class=\"line\">        width: 127</span><br><span class=\"line\">        height: 46</span><br><span class=\"line\">        color: &quot;#4e3a3a&quot;</span><br><span class=\"line\">        radius: 10</span><br><span class=\"line\"></span><br><span class=\"line\">        Text &#123;</span><br><span class=\"line\">            id: text1</span><br><span class=\"line\">            x: 38</span><br><span class=\"line\">            y: 15</span><br><span class=\"line\">            width: 40</span><br><span class=\"line\">            height: 16</span><br><span class=\"line\">            text: qsTr(&quot;Enter&quot;)</span><br><span class=\"line\">            font.pixelSize: 12</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3>C++代码</h3> \n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifndef</span> LOGIN_H</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> LOGIN_H</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;QObject&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Login</span>: <span class=\"keyword\">public</span> QObject</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Q_OBJECT</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">     <span class=\"comment\">//Q_INVOKABLE关键字，可以让QML直接调用C++方法。相当于 濮阳天python中的@QtCore.Slot()</span></span><br><span class=\"line\">     <span class=\"function\">Q_INVOKABLE QString <span class=\"title\">getText</span><span class=\"params\">(<span class=\"type\">void</span>)</span> <span class=\"type\">const</span></span>;</span><br><span class=\"line\">    <span class=\"built_in\">Login</span>(QObject *parent = <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">virtual</span> ~<span class=\"built_in\">Login</span>();</span><br><span class=\"line\">signals:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">setInputText</span><span class=\"params\">(<span class=\"type\">const</span> QString &amp;s)</span></span>;</span><br><span class=\"line\"><span class=\"keyword\">public</span> slots: </span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">setText</span><span class=\"params\">(<span class=\"type\">const</span> QString &amp;s)</span></span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span> <span class=\"comment\">// LOGIN_H</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;login.h&quot;</span></span></span><br><span class=\"line\">Login::<span class=\"built_in\">Login</span>(QObject *parent)</span><br><span class=\"line\">      :<span class=\"built_in\">QObject</span>(parent)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    QObject::<span class=\"built_in\">connect</span>(<span class=\"keyword\">this</span>, <span class=\"built_in\">SIGNAL</span>(<span class=\"built_in\">setInputText</span>(QString)), <span class=\"keyword\">this</span>, <span class=\"built_in\">SLOT</span>(<span class=\"built_in\">setText</span>(QString)));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    Login::~<span class=\"built_in\">Login</span>() &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\">QString <span class=\"title\">LS::getText</span><span class=\"params\">(<span class=\"type\">void</span>)</span> <span class=\"type\">const</span></span></span><br><span class=\"line\"><span class=\"function\">  </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">&quot;from C++ Code&quot;</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">LS::setText</span><span class=\"params\">(<span class=\"type\">const</span> QString &amp;s)</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">qDebug</span>(<span class=\"string\">&quot;this is string.&quot;</span>);</span><br><span class=\"line\">      <span class=\"built_in\">qDebug</span>(<span class=\"string\">&quot;%s&quot;</span>, s.<span class=\"built_in\">toLocal8Bit</span>().<span class=\"built_in\">data</span>());</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n【后记】\n<p>上面的代码可以看到，PyQt和C<ins>公用一个QML代码，QML几乎不变（不是几乎，就是一样的）。PyQT(PySide)更适应快速开发。用C</ins>实现性能要求比较高的共同部分，则更有优势。</p>\n<p>Python中QML调用Python函数，只要把python的函数声明为@QtCore.Slot<br>\nPython调用QML函数，需要定义信号和connect QML的函数。C<ins>是，UML调用C</ins>函数，只要把C<ins>函数声明过为Q_INVOKABLE。C</ins>调用QML函数，需要声明Signal和Connect Slot函数。这点Python和C++的流程保持一致。</p>\n<p>【参考】</p>\n<ol>\n<li class=\"lvl-3\">\n<p><a href=\"http://qt-project.org/wiki/PySide\">PytSide</a></p>\n</li>\n<li class=\"lvl-3\">\n<p><a href=\"http://thierry-xing.iteye.com/blog/1387855\">在QML中使用JavaScript和Sqlite</a></p>\n</li>\n<li class=\"lvl-3\">\n<p><a href=\"http://huangchunquanmaker.blog.163.com/blog/static/107408483201104101331193/\">关于QML中调用qt类中的信号，槽，成员函数,属性做记录</a></p>\n</li>\n<li class=\"lvl-3\">\n<p><a href=\"http://blog.chinaunix.net/uid-12664992-id-129937.html\">Connecting Qt signal to QML function</a></p>\n</li>\n<li class=\"lvl-3\">\n<p><a href=\"http://ar.newsmth.net/thread-8f2dbaba27a86d-1.html\">@符号在python中的作用</a></p>\n</li>\n<li class=\"lvl-3\">\n<p><a href=\"http://qt-project.org/wiki/Filling-and-reading-QML-UI-forms-from-Python\">Filling and reading QML UI forms from python.</a></p>\n</li>\n</ol>\n","text":"作者：糖果 pyqt和qml结合的中文资很少，在baidu上搜索，基本上就是浪费时间。在国外的blog上，有零星的几篇，但是介绍好的少。在stackoverflow上看到一篇关于pyside，发现pyside，发现pyside果然给力，那就开始我们的pyside游戏之旅吧。 【编...","link":"","photos":[],"count_time":{"symbolsCount":"6.8k","symbolsTime":"6 mins."},"categories":[{"name":"topic","slug":"topic","count":308,"path":"api/categories/topic.json"}],"tags":[{"name":"lua","slug":"lua","count":153,"path":"api/tags/lua.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Python代码</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">QML代码</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">C++代码</span></a></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"通过进程信息，检查内存泄露。","uid":"bc51e73d376d390e21ec280bce3ba4f7","slug":"old_topic/2016-09-17-5","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T07:45:09.224Z","comments":true,"path":"api/articles/old_topic/2016-09-17-5.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":null,"text":"作者：糖果 【问题】寻找内存泄露，有时是一件困难的事情。代码的内存申请和释放动作不配对，或是在并发环境下，时序变换的异常，都会引起的内存泄露，即使从core dump回溯调用栈，也未必能找到快速内存的泄露点。 某些嵌入式系统，对制造方式有特殊的限制，不允许使用智能指针或是STL库...","link":"","photos":[],"count_time":{"symbolsCount":"1.2k","symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":308,"path":"api/categories/topic.json"}],"tags":[{"name":"lua","slug":"lua","count":153,"path":"api/tags/lua.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"SWIFT之旅","uid":"588827ea99547898fdc61cb9e0f76523","slug":"old_topic/2016-09-17-53","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T07:45:09.205Z","comments":true,"path":"api/articles/old_topic/2016-09-17-53.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":null,"text":"对于一个新语言的第一个程序来说，比较传统的搞法是，在屏幕上，打印一行”hello,word” 。看看swift吧，一行语句就能搞定。 println(“Hello, world”) 如果你之前玩过C或是Objective-C, Swift的这种语法你可能眼熟。这一行代码就完成了这...","link":"","photos":[],"count_time":{"symbolsCount":"13k","symbolsTime":"12 mins."},"categories":[{"name":"topic","slug":"topic","count":308,"path":"api/categories/topic.json"}],"tags":[{"name":"lua","slug":"lua","count":153,"path":"api/tags/lua.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}