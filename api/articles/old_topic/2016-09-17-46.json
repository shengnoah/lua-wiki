{"title":"Python和C++混合使用QML开发GUI","uid":"0cb9b7f667542d54e27810e7e909c462","slug":"old_topic/2016-09-17-46","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T07:45:09.196Z","comments":true,"path":"api/articles/old_topic/2016-09-17-46.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<p>作者：糖果</p>\n<p>pyqt和qml结合的中文资很少，在baidu上搜索，基本上就是浪费时间。在国外的blog上，有零星的几篇，但是介绍好的少。在stackoverflow上看到一篇关于pyside，发现pyside，发现pyside果然给力，那就开始我们的pyside游戏之旅吧。</p>\n<p>【编辑器】<br />\n目前的编辑环境是，Eclipse+PyDev, Erics, QtCreator这三个工具一起使用。用前两者进PY代码编辑，用QtCreator进行QML编辑和设计。</p>\n<p>【概要】<br />\n用PyQt,C++,QML实现一个简单但的文本输入框值得取得和设置。从编码角度来看，我们需要在Python中调用QML的function方法，并通过参数传递把python中设定的变量值给QML.需要在QML中调用Python定义的函数方法，并把QML中InputText的Text值传递给Python.无论控件和业务逻辑多复杂都是如此。</p>\n<h3>Python代码</h3> \n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> sys\n<span class=\"token keyword\">from</span> PySide <span class=\"token keyword\">import</span> QtCore<span class=\"token punctuation\">,</span> QtDeclarative<span class=\"token punctuation\">,</span>  QtGui\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">QtInterface</span><span class=\"token punctuation\">(</span>QtCore<span class=\"token punctuation\">.</span>QObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    signaller_in_txt <span class=\"token operator\">=</span> QtCore<span class=\"token punctuation\">.</span>Signal<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span>\n    signaller_out_txt <span class=\"token operator\">=</span> QtCore<span class=\"token punctuation\">.</span>Signal<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    \n     <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        QtCore<span class=\"token punctuation\">.</span>QObject<span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>in_txt <span class=\"token operator\">=</span> <span class=\"token string\">\"test\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre><code> #@的这种声明方式，会在后面的部分介绍，并且参考链接中，有一篇文也介绍的很清晰。\n\n #这是一个不带参数的Slot函数。                \n</code></pre>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token decorator annotation punctuation\">@QtCore<span class=\"token punctuation\">.</span>Slot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">getInputText</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span> self<span class=\"token punctuation\">.</span>in_txt        <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<pre><code> #这个一个带参数的Slot函数，我们就是利用这个参数，在QML中，调用这个函数，并把InputText的text值发送过来，并且在函数中，打印出这个传递值。\n</code></pre>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token decorator annotation punctuation\">@QtCore<span class=\"token punctuation\">.</span>Slot</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">setInputText</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span> text<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<pre><code> #在updateValues函数中，通过信号发射，调用QML中的function函数，并将对控件的设置值，传递过去。信号变量声明，在类中，和与对应的QML函数简历毁掉联系，是在main函数中完成的。\n</code></pre>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">    <span class=\"token keyword\">def</span> <span class=\"token function\">updateValues</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n<span class=\"token comment\">#        self.signaller_in_txt.emit(str(self.in_txt))</span>\n        self<span class=\"token punctuation\">.</span>signaller_out_txt<span class=\"token punctuation\">.</span>emit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>MainView是主要View视图，继承了基类，QDeclarativeView，继承了最大化，最小话和关闭窗体的机能。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MainView</span><span class=\"token punctuation\">(</span>QtDeclarative<span class=\"token punctuation\">.</span>QDeclarativeView<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>  parent<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n          <span class=\"token comment\">#构造父类</span>\n        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span> MainView<span class=\"token punctuation\">,</span>  self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">)</span>\n          <span class=\"token comment\">#设定窗体Title内容</span>\n        self<span class=\"token punctuation\">.</span>setWindowTitle<span class=\"token punctuation\">(</span><span class=\"token string\">\"Counter\"</span><span class=\"token punctuation\">)</span>\n          <span class=\"token comment\">#设定与本地QML关联</span>\n        self<span class=\"token punctuation\">.</span>setSource<span class=\"token punctuation\">(</span> QtCore<span class=\"token punctuation\">.</span>QUrl<span class=\"token punctuation\">.</span>fromLocalFile<span class=\"token punctuation\">(</span><span class=\"token string\">'abc.qml'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n          <span class=\"token comment\">#设定窗体尺寸变化的模式，继承了父类的模式</span>\n        self<span class=\"token punctuation\">.</span>setResizeMode<span class=\"token punctuation\">(</span> QtDeclarative<span class=\"token punctuation\">.</span>QDeclarativeView<span class=\"token punctuation\">.</span>SizeRootObjectToView<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>创建一个QtGui的应用实例</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">qApplication <span class=\"token operator\">=</span> QtGui<span class=\"token punctuation\">.</span><span class=\"token function\">QApplication</span><span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">)</span>\n#主视图创建\nwindow <span class=\"token operator\">=</span> <span class=\"token function\">MainView</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n#显示主视图\nwindow<span class=\"token punctuation\">.</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\n#取得用于解析QML的类实例\nqcontext <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span><span class=\"token function\">rootContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\ninterface <span class=\"token operator\">=</span> <span class=\"token function\">QtInterface</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n#将用户自己的QtObject子类和窗体类建立连接\nqcontext<span class=\"token punctuation\">.</span><span class=\"token function\">setContextProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"qInterface\"</span><span class=\"token punctuation\">,</span>  interface<span class=\"token punctuation\">)</span>\n\n#将信号和QML函数建立映射关联。\ninterface<span class=\"token punctuation\">.</span>signaller_score_a<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span><span class=\"token function\">rootObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>updateScoreA<span class=\"token punctuation\">)</span>\ninterface<span class=\"token punctuation\">.</span>signaller_in_txt<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span><span class=\"token function\">rootObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>updateInText<span class=\"token punctuation\">)</span>\ninterface<span class=\"token punctuation\">.</span>signaller_out_txt<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span><span class=\"token function\">rootObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>getInTxt<span class=\"token punctuation\">)</span>\n\n#退出应用\nsys<span class=\"token punctuation\">.</span><span class=\"token function\">exit</span><span class=\"token punctuation\">(</span>qApplication<span class=\"token punctuation\">.</span><span class=\"token function\">exec_</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3>QML代码</h3> \n<p>QML语言基本UI元素的描述信息和功能函数，QML本身可以通过自己的函数定义执行来完成一定程度上功能，完全和背后的语言（C++,Python）脱离关系。而且在很多的平台上使用，甚至包括移动平台，可以和我的WEB服务器很好的链接，传递数据。</p>\n<pre class=\"line-numbers language-htmll\" data-language=\"htmll\"><code class=\"language-htmll\">import QtQuick 1.1\n\nRectangle &#123;\n    id: rectangle1\n    width: 480\n    height: 272\n\n    gradient: Gradient &#123;\n        GradientStop &#123;\n            id: gradientStop1\n            position: 0\n            color: &quot;#ffffff&quot;\n        &#125;\n\n        GradientStop &#123;\n            position: 1\n            color: &quot;#abc09f&quot;\n        &#125;\n    &#125;\n    &#x2F;&#x2F;UML中的函数，要通过emit发射信号调用。\n    function updateInText(string) &#123;\n        in_txt.text &#x3D; string\n    &#125;\n\n    function updateIn() &#123;\n        in_txt.text &#x3D; &quot;ozzy&quot;\n    &#125;\n    &#x2F;&#x2F;在Python中，通过emit调用getInTxt函数\n    function getInTxt() &#123;\n         &#x2F;&#x2F;console.log基本就是JavaScript的用法。\n        console.log(&quot;debug&quot;)\n        return (in_txt.text)\n    &#125;\n\n\n    Text &#123;\n        id: score_a\n        x: 150\n        y: 74\n        width: 131\n        height: 48\n        text: qsTr(&quot;Text&quot;)\n        verticalAlignment: Text.AlignVCenter\n        font.pixelSize: 12\n    &#125;\n\n    MouseArea &#123;\n        id: a_scored\n        x: 303\n        y: 200\n    &#125;\n\n    Rectangle &#123;\n        id: team_a\n        x: 150\n        y: 148\n        width: 127\n        height: 46\n        color: &quot;#4e3a3a&quot;\n        radius: 10\n\n        TextInput &#123;\n            id: team_a_txt\n            x: 24\n            y: 13\n            width: 80\n            height: 20\n            text: qsTr(&quot;A&quot;)\n            selectionColor: &quot;#316cc4&quot;\n            horizontalAlignment: TextInput.AlignHCenter\n            font.pixelSize: 12\n        &#125;\n\n        MouseArea &#123;\n            id: team_a_score_ma\n            x: 1\n            y: 0\n            width: 126\n            height: 46\n            onClicked: &#123;\n                qInterface.aScored()\n            &#125;\n        &#125;\n    &#125;\n\n    TextInput &#123;\n        id: in_txt\n        x: 345\n        y: 67\n        width: 80\n        height: 20\n        text: qsTr(&quot;InputText&quot;)\n        selectionColor: &quot;#316cc4&quot;\n        font.pixelSize: 12\n\n        MouseArea &#123;\n            id: in_txt_ma\n            x: -17\n            y: 77\n            width: 115\n            height: 57\n            z: 2\n          &#x2F;&#x2F;直接在MouseArea中添加对应的事件处理\n            onClicked: &#123;\n               &#x2F;&#x2F;qInterface是在Python中建立的映射关系，通过这个对象实例，就可以直接调用Python中的函数方法，并且可以传递参数               \n                qInterface.setInputText(in_txt.text)\n     &#x2F;&#x2F;下面的这个函数被注释掉了，因为getText()是一个C++写的方法\n     &#x2F;&#x2F;console.log(qInterface.getText())\n            &#125;\n        &#125;\n\n    &#125;\n\n    Rectangle &#123;\n        id: get_in_text\n        x: 322\n        y: 148\n        width: 127\n        height: 46\n        color: &quot;#4e3a3a&quot;\n        radius: 10\n\n        Text &#123;\n            id: text1\n            x: 38\n            y: 15\n            width: 40\n            height: 16\n            text: qsTr(&quot;Enter&quot;)\n            font.pixelSize: 12\n        &#125;\n    &#125;\n&#125;\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3>C++代码</h3> \n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">#ifndef LOGIN_H\n#define LOGIN_H\n\n\n#include &lt;QObject&gt;\n\nclass Login: public QObject\n&#123;\n    Q_OBJECT\npublic:\n     &#x2F;&#x2F;Q_INVOKABLE关键字，可以让QML直接调用C++方法。相当于 濮阳天python中的@QtCore.Slot()\n     Q_INVOKABLE QString getText(void) const;\n    Login(QObject *parent &#x3D; 0);\n    virtual ~Login();\nsignals:\n    void setInputText(const QString &amp;s);\npublic slots: \n    void setText(const QString &amp;s);\n&#125;;\n#endif &#x2F;&#x2F; LOGIN_H\n\n#include &quot;login.h&quot;\nLogin::Login(QObject *parent)\n      :QObject(parent)\n  &#123;\n    QObject::connect(this, SIGNAL(setInputText(QString)), this, SLOT(setText(QString)));\n  &#125;\n\n    Login::~Login() &#123;\n    &#125;\n\n  QString LS::getText(void) const\n  &#123;\n      return &quot;from C++ Code&quot;;\n  &#125;\n  void LS::setText(const QString &amp;s) &#123;\n      qDebug(&quot;this is string.&quot;);\n      qDebug(&quot;%s&quot;, s.toLocal8Bit().data());\n  &#125;\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n【后记】\n<p>上面的代码可以看到，PyQt和C<ins>公用一个QML代码，QML几乎不变（不是几乎，就是一样的）。PyQT(PySide)更适应快速开发。用C</ins>实现性能要求比较高的共同部分，则更有优势。</p>\n<p>Python中QML调用Python函数，只要把python的函数声明为@QtCore.Slot<br />\nPython调用QML函数，需要定义信号和connect QML的函数。C<ins>是，UML调用C</ins>函数，只要把C<ins>函数声明过为Q_INVOKABLE。C</ins>调用QML函数，需要声明Signal和Connect Slot函数。这点Python和C++的流程保持一致。</p>\n<p>【参考】</p>\n<ol>\n<li class=\"lvl-3\">\n<p><a href=\"http://qt-project.org/wiki/PySide\">PytSide</a></p>\n</li>\n<li class=\"lvl-3\">\n<p><a href=\"http://thierry-xing.iteye.com/blog/1387855\">在QML中使用JavaScript和Sqlite</a></p>\n</li>\n<li class=\"lvl-3\">\n<p><a href=\"http://huangchunquanmaker.blog.163.com/blog/static/107408483201104101331193/\">关于QML中调用qt类中的信号，槽，成员函数,属性做记录</a></p>\n</li>\n<li class=\"lvl-3\">\n<p><a href=\"http://blog.chinaunix.net/uid-12664992-id-129937.html\">Connecting Qt signal to QML function</a></p>\n</li>\n<li class=\"lvl-3\">\n<p><a href=\"http://ar.newsmth.net/thread-8f2dbaba27a86d-1.html\">@符号在python中的作用</a></p>\n</li>\n<li class=\"lvl-3\">\n<p><a href=\"http://qt-project.org/wiki/Filling-and-reading-QML-UI-forms-from-Python\">Filling and reading QML UI forms from python.</a></p>\n</li>\n</ol>\n","text":"作者：糖果 pyqt和qml结合的中文资很少，在baidu上搜索，基本上就是浪费时间。在国外的blog上，有零星的几篇，但是介绍好的少。在stackoverflow上看到一篇关于pyside，发现pyside，发现pyside果然给力，那就开始我们的pyside游戏之旅吧。 【编...","link":"","photos":[],"count_time":{"symbolsCount":"6.7k","symbolsTime":"6 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua","slug":"lua","count":124,"path":"api/tags/lua.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Python代码</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">QML代码</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">C++代码</span></a></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Ragel for Ruby","uid":"f0e002a5a85356fc1129dc9430639179","slug":"old_topic/2016-09-17-45","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T07:45:09.189Z","comments":true,"path":"api/articles/old_topic/2016-09-17-45.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"发现Ragel的语言支持列表里没有列出Python,在已经列出的语言选一个，就选了Ruby. linux上本身自带，又装了一个windows版本。 http://rubyforge.org/frs/?group_id=167&amp;release_id=28426 比较靠谱的R...","link":"","photos":[],"count_time":{"symbolsCount":739,"symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua","slug":"lua","count":124,"path":"api/tags/lua.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"DIV+CSS","uid":"21c5fcf79f3b2d72db7be480f2522eaa","slug":"old_topic/2016-09-17-47","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T07:45:09.200Z","comments":true,"path":"api/articles/old_topic/2016-09-17-47.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"【概要】 选择Python做全栈解决方案，但是希望前段简单一些，可以向QML一样被重复的利用。选择用DIV+CSS控制页面的元素，一步步的构建社区。 将JQuery融入进来。本篇太简单，其他内容之后带入。 [code] #div1 { font-style: italic; te...","link":"","photos":[],"count_time":{"symbolsCount":"1.3k","symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua","slug":"lua","count":124,"path":"api/tags/lua.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}