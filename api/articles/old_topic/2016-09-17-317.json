{"title":"获取请求 body","uid":"61064bea0a023b51846839ff3c2e6c07","slug":"old_topic/2016-09-17-317","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T07:45:09.234Z","comments":true,"path":"api/articles/old_topic/2016-09-17-317.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":null,"content":"<h1>获取请求 body</h1>\n<p>在 Nginx 的典型应用场景中，几乎都是只读取 HTTP 头即可，例如负载均衡、正反向代理等场景。但是对于 API Server 或者 Web Application ，对 body 可以说就比较敏感了。由于 OpenResty 基于 Nginx ，所以天然的对请求 body 的读取细节与其他成熟 Web 框架有些不同。</p>\n<h3 id=\"最简单的-“Hello-”\">最简单的 “Hello ****”</h3>\n<p>我们先来构造最简单的一个请求，POST 一个名字给服务端，服务端应答一个 “Hello ****”。</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">http</span> &#123;</span><br><span class=\"line\">    <span class=\"section\">server</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">listen</span>    <span class=\"number\">80</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"section\">location</span> /test &#123;</span><br><span class=\"line\">            <span class=\"section\">content_by_lua_block</span> &#123;</span><br><span class=\"line\">                <span class=\"attribute\">local</span> data = ngx.req.get_body_data()</span><br><span class=\"line\">                ngx.say(<span class=\"string\">&quot;hello &quot;</span>, data)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>测试结果：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜  ~  curl 127.0.0.1/test -d jack</span><br><span class=\"line\">hello nil</span><br></pre></td></tr></table></figure>\n<p>大家可以看到 data 部分获取为空，如果你熟悉其他 web 开发框架，估计立刻就觉得 OpenResty 弱爆了。查阅一下官方 wiki 我们很快知道，原来我们还需要添加指令 lua_need_request_body 。究其原因，主要是 Nginx 诞生之初主要是为了解决负载均衡情况，而这种情况，是不需要读取 body 就可以决定负载策略的，所以这个点对于 API Server 和 Web Application 开发的同学有点怪。</p>\n<p>参看下面例子：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">http</span> &#123;</span><br><span class=\"line\">    <span class=\"section\">server</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">listen</span>    <span class=\"number\">80</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 默认读取 body</span></span><br><span class=\"line\">        <span class=\"attribute\">lua_need_request_body</span> <span class=\"literal\">on</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"section\">location</span> /test &#123;</span><br><span class=\"line\">            <span class=\"section\">content_by_lua_block</span> &#123;</span><br><span class=\"line\">                <span class=\"attribute\">local</span> data = ngx.req.get_body_data()</span><br><span class=\"line\">                ngx.say(<span class=\"string\">&quot;hello &quot;</span>, data)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>再次测试，符合我们预期：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜  ~  curl 127.0.0.1/test -d jack</span><br><span class=\"line\">hello jack</span><br></pre></td></tr></table></figure>\n<p>如果你只是某个接口需要读取 body（并非全局行为），那么这时候也可以显示调用 ngx.req.read_body() 接口，参看下面示例：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">http</span> &#123;</span><br><span class=\"line\">    <span class=\"section\">server</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">listen</span>    <span class=\"number\">80</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"section\">location</span> /test &#123;</span><br><span class=\"line\">            <span class=\"section\">content_by_lua_block</span> &#123;</span><br><span class=\"line\">                ngx.req.read_body()</span><br><span class=\"line\">                <span class=\"attribute\">local</span> data = ngx.req.get_body_data()</span><br><span class=\"line\">                ngx.say(<span class=\"string\">&quot;hello &quot;</span>, data)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"body-偶尔读取不到？\">body 偶尔读取不到？</h3>\n<p>ngx.req.get_body_data() 读请求体，会偶尔出现读取不到直接返回 nil 的情况。</p>\n<p>如果请求体尚未被读取，请先调用 <a href=\"#ngxreqread_body\">ngx.req.read_body</a> (或打开 <a href=\"#lua_need_request_body\">lua_need_request_body</a> 选项强制本模块读取请求体，此方法不推荐）。</p>\n<p>如果请求体已经被存入临时文件，请使用 <a href=\"#ngxreqget_body_file\">ngx.req.get_body_file</a> 函数代替。</p>\n<p>如需要强制在内存中保存请求体，请设置 <a href=\"http://nginx.org/en/docs/http/ngx_http_core_module.html#client_body_buffer_size\">client_body_buffer_size</a> 和 <a href=\"http://nginx.org/en/docs/http/ngx_http_core_module.html#client_max_body_size\">client_max_body_size</a> 为同样大小。</p>\n<p>参考下面代码：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">http</span> &#123;</span><br><span class=\"line\">    <span class=\"section\">server</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">listen</span>    <span class=\"number\">80</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 强制请求 body 到临时文件中（仅仅为了演示）</span></span><br><span class=\"line\">        <span class=\"attribute\">client_body_in_file_only</span> <span class=\"literal\">on</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"section\">location</span> /test &#123;</span><br><span class=\"line\">            <span class=\"section\">content_by_lua_block</span> &#123;</span><br><span class=\"line\">                <span class=\"attribute\">function</span> getFile(file_name)</span><br><span class=\"line\">                    local f = assert(io.open(file_name, <span class=\"string\">&#x27;r&#x27;</span>))</span><br><span class=\"line\">                    local string = f:read(<span class=\"string\">&quot;*all&quot;</span>)</span><br><span class=\"line\">                    f:close()</span><br><span class=\"line\">                    return string</span><br><span class=\"line\">                end</span><br><span class=\"line\"></span><br><span class=\"line\">                ngx.req.read_body()</span><br><span class=\"line\">                local data = ngx.req.get_body_data()</span><br><span class=\"line\">                if nil == data then</span><br><span class=\"line\">                    local file_name = ngx.req.get_body_file()</span><br><span class=\"line\">                    ngx.say(<span class=\"string\">&quot;&gt;&gt; temp file: &quot;</span>, file_name)</span><br><span class=\"line\">                    if file_name then</span><br><span class=\"line\">                        data = getFile(file_name)</span><br><span class=\"line\">                    end</span><br><span class=\"line\">                end</span><br><span class=\"line\"></span><br><span class=\"line\">                ngx.say(<span class=\"string\">&quot;hello &quot;</span>, data)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>测试结果：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜  ~  <span class=\"attribute\">curl</span> <span class=\"number\">127.0.0.1</span>/test -d jack</span><br><span class=\"line\">&gt;&gt; temp file: /Users/rain/Downloads/nginx/client_body_temp/<span class=\"number\">0000000018</span></span><br><span class=\"line\">hello jack</span><br></pre></td></tr></table></figure>\n<p>由于 Nginx 是为了解决负载均衡场景诞生的，所以它默认是不读取 body 的行为，会对 API Server 和 Web Application 场景造成一些影响。根据需要正确读取、丢弃 body 对 OpenResty 开发是至关重要的。</p>\n","text":"获取请求 body 在 Nginx 的典型应用场景中，几乎都是只读取 HTTP 头即可，例如负载均衡、正反向代理等场景。但是对于 API Server 或者 Web Application ，对 body 可以说就比较敏感了。由于 OpenResty 基于 Nginx ，所以天然...","link":"","photos":[],"count_time":{"symbolsCount":"3.1k","symbolsTime":"3 mins."},"categories":[{"name":"topic","slug":"topic","count":308,"path":"api/categories/topic.json"}],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\"><span class=\"toc-text\">获取请求 body</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%9C%80%E7%AE%80%E5%8D%95%E7%9A%84-%E2%80%9CHello-%E2%80%9D\"><span class=\"toc-text\">最简单的 “Hello ****”</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#body-%E5%81%B6%E5%B0%94%E8%AF%BB%E5%8F%96%E4%B8%8D%E5%88%B0%EF%BC%9F\"><span class=\"toc-text\">body 偶尔读取不到？</span></a></li></ol></li></ol></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"获取 uri 参数","uid":"d5ff1ed8ad9b9d2c1a73f4d27ebd5027","slug":"old_topic/2016-09-17-318","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T07:45:09.197Z","comments":true,"path":"api/articles/old_topic/2016-09-17-318.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":null,"text":"获取 uri 参数 上一章节，主要介绍了一下如何使用不同 location 进行协作，对 location 进行糅合，往往都是要需要参数的二次调整。如何正确获取传递参数、设置参数，就是你的必修课了。本章目的是给出在 OpenResty 的世界中，我们如何正确获取、设置 uri 参...","link":"","photos":[],"count_time":{"symbolsCount":"2.4k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":308,"path":"api/categories/topic.json"}],"tags":[],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"环境搭建","uid":"4180c84379ce1a0a588121e5cfa4f15f","slug":"old_topic/2016-09-17-319","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T07:45:09.201Z","comments":true,"path":"api/articles/old_topic/2016-09-17-319.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":null,"text":"环境搭建 实践的前提是搭建环境，本节的几个小节将介绍在几种常见操作平台上 OpenResty 的安装。 为了降低用户安装门槛，对于不同系统安装，部分章节存在比较大的重复内容。读者只需要选择自己需要的平台并尝试安装即可。除了 windows 版本是以二进制发行，其他平台由于系统自身...","link":"","photos":[],"count_time":{"symbolsCount":238,"symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":308,"path":"api/categories/topic.json"}],"tags":[],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}