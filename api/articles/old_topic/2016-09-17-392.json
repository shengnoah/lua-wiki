{"title":"libpcap监听网络端口数据","uid":"1da6405cfff3883466e411939e823d07","slug":"old_topic/2016-09-17-392","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T07:45:09.162Z","comments":true,"path":"api/articles/old_topic/2016-09-17-392.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":null,"content":"<p>下面的代码是监听本机源80地址流出的数据， 并以字符的形式打印出来。</p>\n<p>代码：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;pcap.h&gt;</span>  </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;time.h&gt;</span>  </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span>  </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span>  </span></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">getPacket</span><span class=\"params\">(u_char * arg, <span class=\"type\">const</span> <span class=\"keyword\">struct</span> pcap_pkthdr * pkthdr, <span class=\"type\">const</span> u_char * packet)</span>  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">  <span class=\"type\">int</span> * id = (<span class=\"type\">int</span> *)arg;  </span><br><span class=\"line\">    </span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;id: %d\\n&quot;</span>, ++(*id));  </span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Packet length: %d\\n&quot;</span>, pkthdr-&gt;len);  </span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Number of bytes: %d\\n&quot;</span>, pkthdr-&gt;caplen);  </span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Recieved time: %s&quot;</span>, ctime((<span class=\"type\">const</span> <span class=\"type\">time_t</span> *)&amp;pkthdr-&gt;ts.tv_sec));   </span><br><span class=\"line\">    </span><br><span class=\"line\">  <span class=\"type\">int</span> i;  </span><br><span class=\"line\">  <span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>; i&lt;pkthdr-&gt;len; ++i)  </span><br><span class=\"line\">  &#123;   </span><br><span class=\"line\">    <span class=\"comment\">//printf(&quot; %02x&quot;, packet[i]);  </span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot; %c&quot;</span>, packet[i]);  </span><br><span class=\"line\">    <span class=\"keyword\">if</span>( (i + <span class=\"number\">1</span>) % <span class=\"number\">16</span> == <span class=\"number\">0</span> )   </span><br><span class=\"line\">    &#123;   </span><br><span class=\"line\">        <span class=\"comment\">//printf(&quot;\\n&quot;);  </span></span><br><span class=\"line\">    &#125;   </span><br><span class=\"line\">  &#125;   </span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">//printf(&quot;%s\\n&quot;, packet);</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n\\n&quot;</span>);  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span>  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">  <span class=\"type\">char</span> errBuf[PCAP_ERRBUF_SIZE], * devStr;  </span><br><span class=\"line\">    </span><br><span class=\"line\">  <span class=\"comment\">/* get a device */</span>  </span><br><span class=\"line\">  <span class=\"comment\">//devStr = pcap_lookupdev(errBuf);  </span></span><br><span class=\"line\">  devStr = <span class=\"string\">&quot;eth1&quot;</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">  <span class=\"keyword\">if</span>(devStr)  </span><br><span class=\"line\">  &#123;   </span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;success: device: %s\\n&quot;</span>, devStr);  </span><br><span class=\"line\">  &#125;   </span><br><span class=\"line\">  <span class=\"keyword\">else</span>  </span><br><span class=\"line\">  &#123;   </span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;error: %s\\n&quot;</span>, errBuf);  </span><br><span class=\"line\">    <span class=\"built_in\">exit</span>(<span class=\"number\">1</span>);  </span><br><span class=\"line\">  &#125;   </span><br><span class=\"line\">    </span><br><span class=\"line\">  <span class=\"comment\">/* open a device, wait until a packet arrives */</span>  </span><br><span class=\"line\">  <span class=\"type\">pcap_t</span> * device = pcap_open_live(devStr, <span class=\"number\">65535</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, errBuf);  </span><br><span class=\"line\">    </span><br><span class=\"line\">  <span class=\"keyword\">if</span>(!device)  </span><br><span class=\"line\">  &#123;   </span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;error: pcap_open_live(): %s\\n&quot;</span>, errBuf);  </span><br><span class=\"line\">    <span class=\"built_in\">exit</span>(<span class=\"number\">1</span>);  </span><br><span class=\"line\">  &#125;   </span><br><span class=\"line\">    </span><br><span class=\"line\">  <span class=\"comment\">/* construct a filter */</span>  </span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">bpf_program</span> <span class=\"title\">filter</span>;</span>  </span><br><span class=\"line\">  pcap_compile(device, &amp;filter, <span class=\"string\">&quot;src port 80&quot;</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>);  </span><br><span class=\"line\">  <span class=\"comment\">//pcap_compile(device, &amp;filter, &quot;dst port 80&quot;, 1, 0);  </span></span><br><span class=\"line\">  pcap_setfilter(device, &amp;filter);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* wait loop forever */</span></span><br><span class=\"line\">  <span class=\"type\">int</span> id = <span class=\"number\">0</span>;</span><br><span class=\"line\">  pcap_loop(device, <span class=\"number\">-1</span>, getPacket, (u_char*)&amp;id);</span><br><span class=\"line\"></span><br><span class=\"line\">  pcap_close(device);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>编译：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gcc test.c -o test -lpcap</span><br></pre></td></tr></table></figure>","text":"下面的代码是监听本机源80地址流出的数据， 并以字符的形式打印出来。 代码： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455...","link":"","photos":[],"count_time":{"symbolsCount":"2k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":308,"path":"api/categories/topic.json"}],"tags":[{"name":"lua","slug":"lua","count":153,"path":"api/tags/lua.json"}],"toc":"","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"windump与graylog","uid":"a97a619732554d0e595f9f947fc0b0aa","slug":"old_topic/2016-09-17-391","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T07:45:09.230Z","comments":true,"path":"api/articles/old_topic/2016-09-17-391.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":null,"text":"抓取流量最流行的工具就是Wireshark,在Windows上Wireshark的GUI界面很酷，但对于在linux和mac用惯了tcpdump用户来说，用命令行的tcpdump更直接便捷。Windows上有没有类似tcpdump的抓包工具呢？答案是有的，就是windump，底层...","link":"","photos":[],"count_time":{"symbolsCount":805,"symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":308,"path":"api/categories/topic.json"}],"tags":[{"name":"lua","slug":"lua","count":153,"path":"api/tags/lua.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"C调用LUA","uid":"4a5cc773e0399b5ad7bd2f2bfa7a3e83","slug":"old_topic/2016-09-17-393","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T07:45:09.169Z","comments":true,"path":"api/articles/old_topic/2016-09-17-393.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":null,"text":"通过一个简单的例子，看C是如何调用LUA的，这样将原有C处理数据的逻辑用LUA来做，省去了编译C的过程。 代码，如下： 12345678910111213141516171819202122232425262728293031323334#include &lt;stdio.h&...","link":"","photos":[],"count_time":{"symbolsCount":774,"symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":308,"path":"api/categories/topic.json"}],"tags":[{"name":"lua","slug":"lua","count":153,"path":"api/tags/lua.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}