{"title":"《Lua游戏AI开发指南 --- Lua调用C/C++函数》","uid":"e724a88ffa1659f5de4d93477c189f2b","slug":"old_topic/2016-09-17-111","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T07:45:09.230Z","comments":true,"path":"api/articles/old_topic/2016-09-17-111.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<p>作者：糖果</p>\n<blockquote>\nExposing C++ functions to Lua takes place through a process called function binding. Any bound functions exposed to Lua become accessible either as a global function or as a function available through a package. Packages in Lua are similar to namespaces in C++ and are implemented as a global table within Lua.\n</blockquote>\n<p>通过暴漏C<ins>函数给Lua的过程，叫做函数绑定。任何绑定函数暴漏给Lua成为一个可访问的全局函数，或是作为可用的包函数。Lua中的Packages(包)类似于C</ins>中的命名空间，作为一个类似全局表被实现的。</p>\n<blockquote>\nFunction binding \n<p>Any function exposed to Lua must fit the lua_CFunction declaration. A lua_CFunction declaration takes in the Lua virtual machine and returns the number of return values pushed onto the Lua stack:</p>\n</blockquote> \n<p>Function binding(函数绑定)</p>\n<p>任何函数暴漏给Lua对应的必须要有lua_CFunction声明。lua_CFunction声明取得Lua虚拟机和返回数字的返回到栈上。</p>\n<p>lua.h</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">int</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>lua_CFunction<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>lua_State <span class=\"token operator\">*</span>L<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>例如，C++的GetRadius函数暴漏在沙盒中，是被定义在LuaScriptBingdings.h头文件中的，如下：</p>\n<p>LuaScriptBindings.h</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">Lua_Script_AgentGetRadius</span><span class=\"token punctuation\">(</span>lua_State<span class=\"token operator\">*</span> luaVM<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<blockquote>\nThe actual function implementation is defined within the LuaScriptBindings.cpp file and contains the code for retrieving and pushing values back to the stack. The GetRadius function expects an agent pointer as the first and only parameter from Lua and returns the radius of the agent. The Lua_Script_AgentGetRadius function first checks the stack for the expected parameter count and then retrieves the userdata off the stack through a helper function within the AgentUtilities class. An additional helper function performs the actual work of calculating the agent’s radius and pushes the value back onto the stack:\n</blockquote>\n实际的函数实现是别定义在LuaScriptBindings.cpp文件中，和接受与推送值入栈的代码。GetRadius函数期待\n<p>一个&quot;agent&quot;指针作为唯一的一个从lua来的参数，并且将&quot;agent&quot;返回。Lua_Script_AgentGetRadius函数首先检查栈中期待的参数个数和接受的“userdata”（用户数据） 通过AgentUilities类中的助手函数出栈。另外的一个助手函数执行实际的agent半径计算工作，然后将值入栈。</p>\n<p>LuaScriptBindings.cpp</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">Lua_Script_AgentGetRadius</span><span class=\"token punctuation\">(</span>lua_State<span class=\"token operator\">*</span> luaVM<span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">&#123;</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">lua_gettop</span><span class=\"token punctuation\">(</span>luaVM<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">&#123;</span>\n\nAgent<span class=\"token operator\">*</span> <span class=\"token keyword\">const</span> agent <span class=\"token operator\">=</span> AgentUtilities<span class=\"token operator\">::</span><span class=\"token function\">GetAgent</span><span class=\"token punctuation\">(</span>\n\nluaVM<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">return</span> AgentUtilities<span class=\"token operator\">::</span><span class=\"token function\">PushRadius</span><span class=\"token punctuation\">(</span>luaVM<span class=\"token punctuation\">,</span> agent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\nTo bind the function to Lua, we define a constant array that maps the function’s name within Lua to the C function that should be called. The array of function mappings must always end with a null luaL_Reg type struct. Lua uses a null luaL_Reg type struct as a terminator when processing the function map:\n</blockquote>\n<p>绑定函数到Lua，我们定义了一个常量数组映射，从Lua中的函数名称和应该被调用的C函数。这个函数数组映射，比如总是一个以null结尾的Lual_Reg类型的结构体。当处理函数map时，Lua使用null做为luaL_Reg类型结构的结束标记。</p>\n<p>AgentUtilities.cpp</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">const</span> luaL_Reg AgentFunctions<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span>\n\n<span class=\"token punctuation\">&#123;</span>\n\n<span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"GetRadius\"</span><span class=\"token punctuation\">,</span> Lua_Script_AgentGetRadius <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\n<span class=\"token punctuation\">&#123;</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span> <span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\nThe actual function binding to the Lua virtual machine takes place in the luaL_register helper function. The register function binds the table of function names to their corresponding C callback function. The package name is specified at this step and will be associated with each function within the mapping:\n</blockquote>\n<p>实际的函数绑定虚拟机发生在luaL_register助手函数。 助手函数绑定了函数名table表，到他们对应C回调函数。包名在这一步指定，并且在映射中关联到每个函数。</p>\n<p>AgentUtilities.cpp</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> AgentUtilities<span class=\"token operator\">::</span><span class=\"token function\">BindVMFunctions</span><span class=\"token punctuation\">(</span>lua_State<span class=\"token operator\">*</span> <span class=\"token keyword\">const</span> luaVM<span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">&#123;</span>\n\n<span class=\"token function\">luaL_register</span><span class=\"token punctuation\">(</span>luaVM<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Agent\"</span><span class=\"token punctuation\">,</span> AgentFunctions<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>Note（注意）</p>\n<blockquote>\nIf NULL is passed in as the package name, Lua requires that a table be at the top of the Lua stack. Lua will add the C functions to the Lua table at the top of the stack.\n</blockquote>\n如果包名传成空，Lua会从栈顶导入映射表。Lua会添加C函数到栈顶的Lua table表中。\n<p>本文译自David Young《Lua游戏AI开发指南》一书。</p>\n<p>PS:转载到其它平台请注明作者姓名及原文链接。</p>\n","text":"作者：糖果 Exposing C++ functions to Lua takes place through a process called function binding. Any bound functions exposed to Lua become accessi...","link":"","photos":[],"count_time":{"symbolsCount":"3.4k","symbolsTime":"3 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua","slug":"lua","count":124,"path":"api/tags/lua.json"}],"toc":"","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"如何创建部署WSGI类型的（Django, Tornado, Flask）Python应用","uid":"834dc1c98ae0dfc3f6c8b6dfa350a594","slug":"old_topic/2016-09-17-110","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T07:45:09.207Z","comments":true,"path":"api/articles/old_topic/2016-09-17-110.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"作者：糖果 第一部分：安装必要工具。 1.因为这是部署Python开发环境，所以安装pip可以简化一些软件的安装过程。（PIP对应Lua的luarocks） sudo apt-get install python-pip 安装三个Python框架 sudo pip install...","link":"","photos":[],"count_time":{"symbolsCount":"2k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua","slug":"lua","count":124,"path":"api/tags/lua.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"《Lua游戏AI开发指南 --- C/C++中调用Lua函数》","uid":"878333f17299242d2af5675db3efb934","slug":"old_topic/2016-09-17-112","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T07:45:09.162Z","comments":true,"path":"api/articles/old_topic/2016-09-17-112.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"C/C++ calling Lua functions The sandbox hooks into the Lua script through three predefined global Lua functions: Sandbox_Initialize, Sandbox...","link":"","photos":[],"count_time":{"symbolsCount":"3.4k","symbolsTime":"3 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua","slug":"lua","count":124,"path":"api/tags/lua.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}