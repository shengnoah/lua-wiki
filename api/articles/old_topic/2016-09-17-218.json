{"title":"Luabit的位运算简介","uid":"b420dcba79befee8d1737be19f072a96","slug":"old_topic/2016-09-17-218","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T07:45:09.199Z","comments":true,"path":"api/articles/old_topic/2016-09-17-218.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<p>作者：糖果</p>\n<h3>Luabit的位运算</h3> \n<p>Lua提供了bit库，可以对变量数据进行位运算，在某些应有场景，我们得确需要在lua中对数据进行位移，或是进行“与，或，非”，进制转换等操作。</p>\n<p>例如有这么一种较典型的情况，我们用一个32位的整数表示RGB颜色,32位整数，被分为4个部分，每个部分8bit, 8bit可表示的10进制数的范围是0~255。</p>\n<p>我们现在有一组RGB的颜色值: Alpha通道=8, R=4, G=2, B=1</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">下面是,二进制表示：\nAlpha    Red      Green    Blue\n00001000 00000100 00000010 00000001\n第四组    第三组    第二组    第一组\n\n\n下面是,十六进制表示：\nAlpha   Red    Green   Blue\n0x08    0x04   0x02    0x01\n第四组   第三组  第二组  第一组\n\n\n下面是,十进制表示：\n134480385<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>我们现在要作的是把整数&quot;134480385&quot;的“4组”“8bit”数据截取出来。<br />\n思路和C语言二进制运算是一样，首先是“4组“每”8bit“的数据，都移动到”第一组的“位置，每一组不需要移位，然后是，第次移位后和0x000000FF这个数进行&quot;AND&quot;运算，清空前24位数据，保留最后的8位bit数据。</p>\n<p><strong>需要分解的原始数据：</strong></p>\n<blockquote>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\"><span class=\"token keyword\">local</span> num <span class=\"token operator\">=</span> bit<span class=\"token punctuation\">.</span><span class=\"token function\">tobit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x08040201</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n</blockquote> \n<p><strong>第一组Blue数据的取得：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">8        4        2        1\nAlpha    Red      Green    Blue\n00001000 00000100 00000010 00000001\n第四组    第三组    第二组    第一组<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>第一组的数据，不需要移位操作，直接将数据与&quot;0x000000FF&quot;进行”与“运算。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">8        4        2        1\nAlpha    Red      Green    Blue\n00001000 00000100 00000010 00000001\nAnd（与运算）\n00000000 00000000 00000000 11111111\n结果（1）\n00000000 00000000 00000000 00000001\n第四组    第三组    第二组    第一组<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\"><span class=\"token keyword\">local</span> t_num <span class=\"token operator\">=</span> num\n<span class=\"token keyword\">local</span> blue <span class=\"token operator\">=</span> bit<span class=\"token punctuation\">.</span><span class=\"token function\">band</span><span class=\"token punctuation\">(</span>t_num<span class=\"token punctuation\">,</span> <span class=\"token number\">0x000000ff</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"blue:\"</span><span class=\"token operator\">..</span>blue<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n</blockquote> \n<p><strong>第二组Green数据的取得：</strong><br />\n第二组Green数据，需要先右移8位，然后，才能与&quot;0x000000FF&quot;进行”与“运算。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">8        4        2        1\nAlpha    Red      Green    Blue\n00001000 00000100 00000010 00000001\nRShift(右移8位，左边空位补零)\n00000000 00001000 00000100 00000010 \nAnd（与运算）\n00000000 00000000 00000000 11111111\n结果（2）\n00000000 00000000 00000000 00000010\n第四组    第三组    第二组    第一组<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\"><span class=\"token keyword\">local</span> t_num <span class=\"token operator\">=</span> bit<span class=\"token punctuation\">.</span><span class=\"token function\">rshift</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">local</span> green <span class=\"token operator\">=</span> bit<span class=\"token punctuation\">.</span><span class=\"token function\">band</span><span class=\"token punctuation\">(</span>t_num<span class=\"token punctuation\">,</span> <span class=\"token number\">0x000000ff</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"green:\"</span><span class=\"token operator\">..</span>green<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n</blockquote>\n<p><strong>第三组Red数据的取得：</strong><br />\n第三组Red数据，需要先右移16位，然后，才能与&quot;0x000000FF&quot;进行”与“运算。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">8        4        2        1\nAlpha    Red      Green    Blue\n00001000 00000100 00000010 00000001\nRShift(右移16位，左边空位补零)\n00000000 00000000 00001000 00000100 \nAnd（与运算）\n00000000 00000000 00000000 11111111\n结果（4）\n00000000 00000000 00000000 00000100\n第四组    第三组    第二组    第一组<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>第四组Alpha数据的取得：</strong><br />\n第四组Alpha数据，需要先右移24位，然后，才能与&quot;0x000000FF&quot;进行”与“运算。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">8        4        2        1\nAlpha    Red      Green    Blue\n00001000 00000100 00000010 00000001\nRShift(右移24位，左边空位补零)\n00000000 00000000 00000000 00001000 \nAnd（与运算）\n00000000 00000000 00000000 11111111\n结果（8）\n00000000 00000000 00000000 00001000\n第四组    第三组    第二组    第一组<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>最后，取得四组数据的值：</strong>  Alpha通道=8, R=4, G=2, B=1</p>\n<h3>下面是Lua代码：</h3> \n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\"><span class=\"token keyword\">local</span> bit <span class=\"token operator\">=</span> require <span class=\"token string\">\"bit\"</span>\n<span class=\"token keyword\">local</span> num <span class=\"token operator\">=</span> bit<span class=\"token punctuation\">.</span><span class=\"token function\">tobit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x08040201</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">--第一组Blue数据的取得：</span>\n<span class=\"token keyword\">local</span> t_num <span class=\"token operator\">=</span> num\n<span class=\"token keyword\">local</span> blue <span class=\"token operator\">=</span> bit<span class=\"token punctuation\">.</span><span class=\"token function\">band</span><span class=\"token punctuation\">(</span>t_num<span class=\"token punctuation\">,</span> <span class=\"token number\">0x000000ff</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"blue:\"</span><span class=\"token operator\">..</span>blue<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">--第二组Green数据的取得：</span>\n<span class=\"token keyword\">local</span> t_num <span class=\"token operator\">=</span> bit<span class=\"token punctuation\">.</span><span class=\"token function\">rshift</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">local</span> green <span class=\"token operator\">=</span> bit<span class=\"token punctuation\">.</span><span class=\"token function\">band</span><span class=\"token punctuation\">(</span>t_num<span class=\"token punctuation\">,</span> <span class=\"token number\">0x000000ff</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"green:\"</span><span class=\"token operator\">..</span>green<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">--第三组Red数据的取得：</span>\n<span class=\"token keyword\">local</span> t_num <span class=\"token operator\">=</span> bit<span class=\"token punctuation\">.</span><span class=\"token function\">rshift</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">local</span> red <span class=\"token operator\">=</span> bit<span class=\"token punctuation\">.</span><span class=\"token function\">band</span><span class=\"token punctuation\">(</span>t_num<span class=\"token punctuation\">,</span> <span class=\"token number\">0x000000ff</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"red:\"</span><span class=\"token operator\">..</span>red<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">--第四组Alpha数据的取得：</span>\n<span class=\"token keyword\">local</span> t_num <span class=\"token operator\">=</span> bit<span class=\"token punctuation\">.</span><span class=\"token function\">rshift</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">,</span> <span class=\"token number\">24</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">local</span> alpha <span class=\"token operator\">=</span> bit<span class=\"token punctuation\">.</span><span class=\"token function\">band</span><span class=\"token punctuation\">(</span>t_num<span class=\"token punctuation\">,</span> <span class=\"token number\">0x000000ff</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"alpha:\"</span><span class=\"token operator\">..</span>alpha<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>下面是Luabit常用函数：</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\"><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token punctuation\">[</span><span class=\"token string\">\"band\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">:</span> 0055B430<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token string\">\"rshift\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">:</span> 0055B530<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token string\">\"bor\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">:</span> 0055B470<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token string\">\"bnot\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">:</span> 0055B3F0<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token string\">\"bswap\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">:</span> 0055B3B0<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token string\">\"bxor\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">:</span> 0055B4B0<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token string\">\"tobit\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">:</span> 0055B390<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token string\">\"ror\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">:</span> 00559C98<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token string\">\"lshift\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">:</span> 0055B4F0<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token string\">\"tohex\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">:</span> 0055B610<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token string\">\"rol\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">:</span> 0055B5B0<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token string\">\"arshift\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">:</span> 0055B570<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>PS:转载到其它平台请注明作者姓名及原文链接，请勿用于商业用途。<br />\nLUA.REN<br />\n<a href=\"http://www.lua.ren\">http://www.lua.ren</a></p>\n","text":"作者：糖果 Luabit的位运算 Lua提供了bit库，可以对变量数据进行位运算，在某些应有场景，我们得确需要在lua中对数据进行位移，或是进行“与，或，非”，进制转换等操作。 例如有这么一种较典型的情况，我们用一个32位的整数表示RGB颜色,32位整数，被分为4个部分，每个部分...","link":"","photos":[],"count_time":{"symbolsCount":"3.3k","symbolsTime":"3 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Luabit的位运算</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">下面是Lua代码：</span></a></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"使用Pages服务创建静态博客(上)","uid":"a8389061bbd1e9023a83242f7e76acdb","slug":"old_topic/2016-09-17-215","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T07:45:09.159Z","comments":true,"path":"api/articles/old_topic/2016-09-17-215.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"作者：糖果 Coding.net同样提供了类似github的pages的功能， 这样就可以使用pages服务创建静态博客。 创建步骤： 配置本地git环境。 本地创建目录结构和静态文件。 初始化本地目录为git工程，创建本地分支，并上传文件。 启动配置coding上的pages，...","link":"","photos":[],"count_time":{"symbolsCount":"1.8k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Sublime的LUA和Openresty插件。","uid":"270916a1da291606f4da9f2bca1552a5","slug":"old_topic/2016-09-17-219","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T07:45:09.195Z","comments":true,"path":"api/articles/old_topic/2016-09-17-219.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"作者：糖果 下面是两个补全插件，在Sublime中可以很好的补全LUA代码和OpenResty的API。 Lua插件 installation Openresty的补全 ","link":"","photos":[],"count_time":{"symbolsCount":85,"symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}