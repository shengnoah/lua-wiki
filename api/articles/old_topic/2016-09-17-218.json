{"title":"Luabit的位运算简介","uid":"b420dcba79befee8d1737be19f072a96","slug":"old_topic/2016-09-17-218","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T06:15:59.741Z","comments":true,"path":"api/articles/old_topic/2016-09-17-218.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":null,"content":"<p>作者：糖果</p>\n<h3>Luabit的位运算</h3> \n\n<p>Lua提供了bit库，可以对变量数据进行位运算，在某些应有场景，我们得确需要在lua中对数据进行位移，或是进行“与，或，非”，进制转换等操作。</p>\n<p>例如有这么一种较典型的情况，我们用一个32位的整数表示RGB颜色,32位整数，被分为4个部分，每个部分8bit, 8bit可表示的10进制数的范围是0~255。</p>\n<p>我们现在有一组RGB的颜色值: Alpha通道=8, R=4, G=2, B=1</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">下面是,二进制表示：</span><br><span class=\"line\">Alpha    Red      Green    Blue</span><br><span class=\"line\">00001000 00000100 00000010 00000001</span><br><span class=\"line\">第四组    第三组    第二组    第一组</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">下面是,十六进制表示：</span><br><span class=\"line\">Alpha   Red    Green   Blue</span><br><span class=\"line\">0x08    0x04   0x02    0x01</span><br><span class=\"line\">第四组   第三组  第二组  第一组</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">下面是,十进制表示：</span><br><span class=\"line\">134480385</span><br></pre></td></tr></table></figure>\n\n<p>我们现在要作的是把整数”134480385”的“4组”“8bit”数据截取出来。<br>思路和C语言二进制运算是一样，首先是“4组“每”8bit“的数据，都移动到”第一组的“位置，每一组不需要移位，然后是，第次移位后和0x000000FF这个数进行”AND”运算，清空前24位数据，保留最后的8位bit数据。</p>\n<p><strong>需要分解的原始数据：</strong> </p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">local</span> num = bit.tobit(<span class=\"number\">0x08040201</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(num)</span><br></pre></td></tr></table></figure></blockquote> \n\n\n\n<p><strong>第一组Blue数据的取得：</strong> </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">8        4        2        1</span><br><span class=\"line\">Alpha    Red      Green    Blue</span><br><span class=\"line\">00001000 00000100 00000010 00000001</span><br><span class=\"line\">第四组    第三组    第二组    第一组</span><br></pre></td></tr></table></figure>\n\n<p>第一组的数据，不需要移位操作，直接将数据与”0x000000FF”进行”与“运算。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">8        4        2        1</span><br><span class=\"line\">Alpha    Red      Green    Blue</span><br><span class=\"line\">00001000 00000100 00000010 00000001</span><br><span class=\"line\">And（与运算）</span><br><span class=\"line\">00000000 00000000 00000000 11111111</span><br><span class=\"line\">结果（1）</span><br><span class=\"line\">00000000 00000000 00000000 00000001</span><br><span class=\"line\">第四组    第三组    第二组    第一组</span><br></pre></td></tr></table></figure>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">local</span> t_num = num</span><br><span class=\"line\"><span class=\"keyword\">local</span> blue = bit.band(t_num, <span class=\"number\">0x000000ff</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;blue:&quot;</span>..blue)</span><br></pre></td></tr></table></figure></blockquote> \n\n<p><strong>第二组Green数据的取得：</strong><br>第二组Green数据，需要先右移8位，然后，才能与”0x000000FF”进行”与“运算。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">8        4        2        1</span><br><span class=\"line\">Alpha    Red      Green    Blue</span><br><span class=\"line\">00001000 00000100 00000010 00000001</span><br><span class=\"line\">RShift(右移8位，左边空位补零)</span><br><span class=\"line\">00000000 00001000 00000100 00000010 </span><br><span class=\"line\">And（与运算）</span><br><span class=\"line\">00000000 00000000 00000000 11111111</span><br><span class=\"line\">结果（2）</span><br><span class=\"line\">00000000 00000000 00000000 00000010</span><br><span class=\"line\">第四组    第三组    第二组    第一组</span><br></pre></td></tr></table></figure>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">local</span> t_num = bit.rshift(num, <span class=\"number\">8</span>)</span><br><span class=\"line\"><span class=\"keyword\">local</span> green = bit.band(t_num, <span class=\"number\">0x000000ff</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;green:&quot;</span>..green)</span><br></pre></td></tr></table></figure></blockquote>\n\n<p><strong>第三组Red数据的取得：</strong><br>第三组Red数据，需要先右移16位，然后，才能与”0x000000FF”进行”与“运算。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">8        4        2        1</span><br><span class=\"line\">Alpha    Red      Green    Blue</span><br><span class=\"line\">00001000 00000100 00000010 00000001</span><br><span class=\"line\">RShift(右移16位，左边空位补零)</span><br><span class=\"line\">00000000 00000000 00001000 00000100 </span><br><span class=\"line\">And（与运算）</span><br><span class=\"line\">00000000 00000000 00000000 11111111</span><br><span class=\"line\">结果（4）</span><br><span class=\"line\">00000000 00000000 00000000 00000100</span><br><span class=\"line\">第四组    第三组    第二组    第一组</span><br></pre></td></tr></table></figure>\n\n\n<p><strong>第四组Alpha数据的取得：</strong><br>第四组Alpha数据，需要先右移24位，然后，才能与”0x000000FF”进行”与“运算。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">8        4        2        1</span><br><span class=\"line\">Alpha    Red      Green    Blue</span><br><span class=\"line\">00001000 00000100 00000010 00000001</span><br><span class=\"line\">RShift(右移24位，左边空位补零)</span><br><span class=\"line\">00000000 00000000 00000000 00001000 </span><br><span class=\"line\">And（与运算）</span><br><span class=\"line\">00000000 00000000 00000000 11111111</span><br><span class=\"line\">结果（8）</span><br><span class=\"line\">00000000 00000000 00000000 00001000</span><br><span class=\"line\">第四组    第三组    第二组    第一组</span><br></pre></td></tr></table></figure>\n\n<p><strong>最后，取得四组数据的值：</strong>  Alpha通道=8, R=4, G=2, B=1</p>\n<h3>下面是Lua代码：</h3> \n\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">local</span> bit = <span class=\"built_in\">require</span> <span class=\"string\">&quot;bit&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">local</span> num = bit.tobit(<span class=\"number\">0x08040201</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(num)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--第一组Blue数据的取得：</span></span><br><span class=\"line\"><span class=\"keyword\">local</span> t_num = num</span><br><span class=\"line\"><span class=\"keyword\">local</span> blue = bit.band(t_num, <span class=\"number\">0x000000ff</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;blue:&quot;</span>..blue)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--第二组Green数据的取得：</span></span><br><span class=\"line\"><span class=\"keyword\">local</span> t_num = bit.rshift(num, <span class=\"number\">8</span>)</span><br><span class=\"line\"><span class=\"keyword\">local</span> green = bit.band(t_num, <span class=\"number\">0x000000ff</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;green:&quot;</span>..green)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--第三组Red数据的取得：</span></span><br><span class=\"line\"><span class=\"keyword\">local</span> t_num = bit.rshift(num, <span class=\"number\">16</span>)</span><br><span class=\"line\"><span class=\"keyword\">local</span> red = bit.band(t_num, <span class=\"number\">0x000000ff</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;red:&quot;</span>..red)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--第四组Alpha数据的取得：</span></span><br><span class=\"line\"><span class=\"keyword\">local</span> t_num = bit.rshift(num, <span class=\"number\">24</span>)</span><br><span class=\"line\"><span class=\"keyword\">local</span> alpha = bit.band(t_num, <span class=\"number\">0x000000ff</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;alpha:&quot;</span>..alpha)</span><br></pre></td></tr></table></figure>\n\n\n<p>下面是Luabit常用函数：</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    [<span class=\"string\">&quot;band&quot;</span>] = <span class=\"function\"><span class=\"keyword\">function</span>: 0055<span class=\"title\">B430</span>,</span></span><br><span class=\"line\"><span class=\"function\">    [&quot;<span class=\"title\">rshift</span>&quot;] = <span class=\"title\">function</span>: 0055<span class=\"title\">B530</span>,</span></span><br><span class=\"line\"><span class=\"function\">    [&quot;<span class=\"title\">bor</span>&quot;] = <span class=\"title\">function</span>: 0055<span class=\"title\">B470</span>,</span></span><br><span class=\"line\"><span class=\"function\">    [&quot;<span class=\"title\">bnot</span>&quot;] = <span class=\"title\">function</span>: 0055<span class=\"title\">B3F0</span>,</span></span><br><span class=\"line\"><span class=\"function\">    [&quot;<span class=\"title\">bswap</span>&quot;] = <span class=\"title\">function</span>: 0055<span class=\"title\">B3B0</span>,</span></span><br><span class=\"line\"><span class=\"function\">    [&quot;<span class=\"title\">bxor</span>&quot;] = <span class=\"title\">function</span>: 0055<span class=\"title\">B4B0</span>,</span></span><br><span class=\"line\"><span class=\"function\">    [&quot;<span class=\"title\">tobit</span>&quot;] = <span class=\"title\">function</span>: 0055<span class=\"title\">B390</span>,</span></span><br><span class=\"line\"><span class=\"function\">    [&quot;<span class=\"title\">ror</span>&quot;] = <span class=\"title\">function</span>: 00559<span class=\"title\">C98</span>,</span></span><br><span class=\"line\"><span class=\"function\">    [&quot;<span class=\"title\">lshift</span>&quot;] = <span class=\"title\">function</span>: 0055<span class=\"title\">B4F0</span>,</span></span><br><span class=\"line\"><span class=\"function\">    [&quot;<span class=\"title\">tohex</span>&quot;] = <span class=\"title\">function</span>: 0055<span class=\"title\">B610</span>,</span></span><br><span class=\"line\"><span class=\"function\">    [&quot;<span class=\"title\">rol</span>&quot;] = <span class=\"title\">function</span>: 0055<span class=\"title\">B5B0</span>,</span></span><br><span class=\"line\"><span class=\"function\">    [&quot;<span class=\"title\">arshift</span>&quot;] = <span class=\"title\">function</span>: 0055<span class=\"title\">B570</span>,</span></span><br><span class=\"line\"><span class=\"function\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n\n<p>PS:转载到其它平台请注明作者姓名及原文链接，请勿用于商业用途。<br>LUA.REN<br><a href=\"http://www.lua.ren/\">http://www.lua.ren</a></p>\n","text":"作者：糖果 Luabit的位运算 Lua提供了bit库，可以对变量数据进行位运算，在某些应有场景，我们得确需要在lua中对数据进行位移，或是进行“与，或，非”，进制转换等操作。 例如有这么一种较典型的情况，我们用一个32位的整数表示RGB颜色,32位整数，被分为4个部分，每个部分...","link":"","photos":[],"count_time":{"symbolsCount":"3.5k","symbolsTime":"3 mins."},"categories":[{"name":"topic","slug":"topic","count":308,"path":"api/categories/topic.json"}],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">Luabit的位运算</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">下面是Lua代码：</span></a></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"使用Pages服务创建静态博客(下)---部署Jekyll静态站","uid":"708c3ab643b3760bed43ade6e846877c","slug":"old_topic/2016-09-17-217","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T06:15:59.741Z","comments":true,"path":"api/articles/old_topic/2016-09-17-217.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":[],"text":"作者：糖果 上一篇我们在Coding.net上部署了Pages服务，但是展示的页面比较单一，这次我们使用Jekyll工程生成一个相对完整的静态网站。 概要步骤如下： 1.安装较新的Ruby开发环境。 2.安装Jekyll。 3.创建工程。 4.上传代码。 5.确认站点。 1.安装...","link":"","photos":[],"count_time":{"symbolsCount":"1.2k","symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":308,"path":"api/categories/topic.json"}],"tags":[],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"OpenResty中文社区ORChina上线","uid":"196dea8989620545d3f5d9c787f58f7a","slug":"old_topic/2016-09-17-220","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T06:15:59.741Z","comments":true,"path":"api/articles/old_topic/2016-09-17-220.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":null,"text":"最新LOR社区，小范围上线社区站， http://www.orchina.org ， 还有一个另外的域名是 http://orc.black 这是饭总用LOR框架写的，如果你用过ruby-china， 会发现这网站的前端和rubychina的很像, 大家可以注册个账号，上去测试一...","link":"","photos":[],"count_time":{"symbolsCount":297,"symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":308,"path":"api/categories/topic.json"}],"tags":[],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}