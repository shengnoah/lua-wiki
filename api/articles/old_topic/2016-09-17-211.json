{"title":"LUA WEB架框LOR基础简介","uid":"e465db6ba9cb253a17d5f94de4f683b9","slug":"old_topic/2016-09-17-211","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T07:45:09.152Z","comments":true,"path":"api/articles/old_topic/2016-09-17-211.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":[],"content":"<p>作者：糖果</p>\n<p>LOR是最近国内的LUA WEB开发框架，目前已经发布到了0.3版，昨天晚上作者分享了他的初始设计图， 在QQ群里发的。</p>\n<p>最开始的时候，lor是借鉴vanilla的，之后作者转向设计，开始向expressjs靠拢。</p>\n<p>目前来看的，lor非常引人关注的是lor的路由设计。</p>\n<p>主要的几人文件。</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lor.index -&gt; </span><br><span class=\"line\">lor.lib.lor-&gt;</span><br><span class=\"line\">lor.lib.application-&gt;</span><br><span class=\"line\">lor.lib.router.router-&gt;</span><br><span class=\"line\">lor.lib.router.layer-&gt;</span><br><span class=\"line\">lor.lib.router.router-&gt;</span><br><span class=\"line\">lor.lib.utils.path_to_regexp</span><br></pre></td></tr></table></figure>\n<p>LOR的Application里的函数除了Http常用方法(get、post、put、delete)是通过循环定义的，共它的函数都是显示声明的。</p>\n<p>Applicaton里有InitMethod方法循环定义的。</p>\n<p>下面是选出一些代码片段，来简述这个实现。</p>\n<p>定义一个有支持子函数的列表：</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">local</span> supported_http_methods = &#123;</span><br><span class=\"line\">get = <span class=\"literal\">true</span>, <span class=\"comment\">-- work well</span></span><br><span class=\"line\">put = <span class=\"literal\">true</span>, <span class=\"comment\">-- no test</span></span><br><span class=\"line\">patch = <span class=\"literal\">true</span>, <span class=\"comment\">-- no test</span></span><br><span class=\"line\">delete = <span class=\"literal\">true</span>, <span class=\"comment\">-- no test</span></span><br><span class=\"line\">trace = <span class=\"literal\">true</span>, <span class=\"comment\">-- no test</span></span><br><span class=\"line\">all = <span class=\"literal\">true</span> <span class=\"comment\">-- todo:</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>循环定义函数：</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">app:initMethod</span><span class=\"params\">()</span></span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> http_method, _ <span class=\"keyword\">in</span> <span class=\"built_in\">pairs</span>(supported_http_methods) <span class=\"keyword\">do</span></span><br><span class=\"line\">        <span class=\"built_in\">self</span>[http_method] = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(self, path, fn)</span></span></span><br><span class=\"line\">            <span class=\"built_in\">debug</span>(<span class=\"string\">&quot;\\napp:&quot;</span> .. http_method, <span class=\"string\">&quot;start init&quot;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">local</span> route = <span class=\"built_in\">self</span>.router:route(<span class=\"built_in\">path</span>)</span><br><span class=\"line\">            route[http_method](route, fn)</span><br><span class=\"line\">            <span class=\"built_in\">debug</span>(<span class=\"string\">&quot;app:&quot;</span> .. http_method, <span class=\"string\">&quot;end init\\n&quot;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">self</span></span><br><span class=\"line\">        <span class=\"keyword\">end</span></span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<p>这个关键的声明关键字是：self[函数数] = function(函数参数) end</p>\n<p>我们用最小化的一个lua对象来描述这个过程。</p>\n<p>app应属于框架的代码。</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">local</span> app = &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">app:new</span><span class=\"params\">()</span></span></span><br><span class=\"line\">    <span class=\"keyword\">local</span> instance = &#123;&#125;</span><br><span class=\"line\">    instance.m = <span class=\"number\">100</span></span><br><span class=\"line\">    instance.n = <span class=\"number\">500</span></span><br><span class=\"line\">    <span class=\"built_in\">setmetatable</span>(instance, &#123;</span><br><span class=\"line\">        <span class=\"built_in\">__index</span> = <span class=\"built_in\">self</span>,</span><br><span class=\"line\">        <span class=\"built_in\">__call</span> = <span class=\"built_in\">self</span>.handle</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    instance:initMethod()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> instance</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">app:handle</span><span class=\"params\">(req, res, callback)</span></span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(req)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(res)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(callback)</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">app:output</span><span class=\"params\">(path, fn)</span></span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;##################&quot;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"built_in\">path</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(fn)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;###################&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">app:initMethod</span><span class=\"params\">()</span></span></span><br><span class=\"line\">    <span class=\"built_in\">self</span>[<span class=\"string\">&quot;get&quot;</span>] = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;app:get&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">return</span> app</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>下面是对象的调用：</p>\n<p>这个对象调用，就是平时写的web代码，不属于框架，是普通的应用框架写的web程序。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app = require&quot;app&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">local obj = app:new()</span><br><span class=\"line\">obj:output(&quot;/test&quot;,</span><br><span class=\"line\">function(req, res)</span><br><span class=\"line\">      print(&quot;abc&quot;)</span><br><span class=\"line\">      print(req, res)</span><br><span class=\"line\">end</span><br><span class=\"line\">)</span><br><span class=\"line\">obj:handle(&quot;abc&quot;,&quot;efg&quot;,&quot;hij&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">--每个get的函数的调用，都触发一次路由的判断</span><br><span class=\"line\">--后面的时序，是lor核心 app:get-&gt;router-&gt;layer-&gt;route</span><br><span class=\"line\">--注意一下,request数据，函数形参req的填充时机</span><br><span class=\"line\">obj:get(&quot;/index&quot;,</span><br><span class=\"line\">function(req, res)</span><br><span class=\"line\">end</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<p>一般每次用户的url请求，都会触发以下时序<br>\napp:new  -&gt;app:initMethod-&gt;app:get-&gt;route[http_method]</p>\n<p>router-&gt;layer-&gt;route的时序，接下来放几张，饭总的原始设计图：</p>\n<p>图片：reqres.jpg<br>\n<img src=\"http://orchina-blog.stor.sinaapp.com/1453647389.jpg\" alt=\"reqres.jpg\" /></p>\n<p>还有几张设计图，在后续的文章中加入。</p>\n<p>PS:转载到其它平台请注明作者姓名及原文链接，请勿用于商业用途。</p>\n","text":"作者：糖果 LOR是最近国内的LUA WEB开发框架，目前已经发布到了0.3版，昨天晚上作者分享了他的初始设计图， 在QQ群里发的。 最开始的时候，lor是借鉴vanilla的，之后作者转向设计，开始向expressjs靠拢。 目前来看的，lor非常引人关注的是lor的路由设计。...","link":"","photos":[],"count_time":{"symbolsCount":"2.5k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":308,"path":"api/categories/topic.json"}],"tags":[],"toc":"","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"2015年国产LUA WEB框架一览","uid":"0091fba8ffac5443fa18d009f43bac53","slug":"old_topic/2016-09-17-208","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T07:45:09.201Z","comments":true,"path":"api/articles/old_topic/2016-09-17-208.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":null,"text":"2015年国产LUA WEB框架一览 国内框架 Vanilla LOR SingeLUA 国外框架： Lapis Gin 概况 现在是2016年的开始， 这次想说说LUA国内外的WEB框架，国内开发者的开发框架。据平时的观察，国内做LUA的WEB框架的目前知道的有3到4个，有3个...","link":"","photos":[],"count_time":{"symbolsCount":"1.3k","symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":308,"path":"api/categories/topic.json"}],"tags":[],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"ConcurrentLua","uid":"8f06b9deb34ffdfee8f8030a216bc228","slug":"old_topic/2016-09-17-213","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T07:45:09.216Z","comments":true,"path":"api/articles/old_topic/2016-09-17-213.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":null,"text":"介绍 ConcurrentLua 是一个无共享异步消息传递模型的实现.该模型来自Erlang语言. 她改编了Erlang的并发元素并整合进Lua里. ConcurrentLua的一个核心元素是 process(进程).一个进程是一个轻量级虚拟机 线程,扮演和操作系统的进程同样的角...","link":"","photos":[],"count_time":{"symbolsCount":"10k","symbolsTime":"9 mins."},"categories":[{"name":"topic","slug":"topic","count":308,"path":"api/categories/topic.json"}],"tags":[],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}