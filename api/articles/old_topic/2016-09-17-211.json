{"title":"LUA WEB架框LOR基础简介","uid":"e465db6ba9cb253a17d5f94de4f683b9","slug":"old_topic/2016-09-17-211","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T07:45:09.152Z","comments":true,"path":"api/articles/old_topic/2016-09-17-211.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<p>作者：糖果</p>\n<p>LOR是最近国内的LUA WEB开发框架，目前已经发布到了0.3版，昨天晚上作者分享了他的初始设计图， 在QQ群里发的。</p>\n<p>最开始的时候，lor是借鉴vanilla的，之后作者转向设计，开始向expressjs靠拢。</p>\n<p>目前来看的，lor非常引人关注的是lor的路由设计。</p>\n<p>主要的几人文件。</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">lor<span class=\"token punctuation\">.</span>index <span class=\"token operator\">-</span><span class=\"token operator\">></span> \nlor<span class=\"token punctuation\">.</span>lib<span class=\"token punctuation\">.</span>lor<span class=\"token operator\">-</span><span class=\"token operator\">></span>\nlor<span class=\"token punctuation\">.</span>lib<span class=\"token punctuation\">.</span>application<span class=\"token operator\">-</span><span class=\"token operator\">></span>\nlor<span class=\"token punctuation\">.</span>lib<span class=\"token punctuation\">.</span>router<span class=\"token punctuation\">.</span>router<span class=\"token operator\">-</span><span class=\"token operator\">></span>\nlor<span class=\"token punctuation\">.</span>lib<span class=\"token punctuation\">.</span>router<span class=\"token punctuation\">.</span>layer<span class=\"token operator\">-</span><span class=\"token operator\">></span>\nlor<span class=\"token punctuation\">.</span>lib<span class=\"token punctuation\">.</span>router<span class=\"token punctuation\">.</span>router<span class=\"token operator\">-</span><span class=\"token operator\">></span>\nlor<span class=\"token punctuation\">.</span>lib<span class=\"token punctuation\">.</span>utils<span class=\"token punctuation\">.</span>path_to_regexp<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>LOR的Application里的函数除了Http常用方法(get、post、put、delete)是通过循环定义的，共它的函数都是显示声明的。</p>\n<p>Applicaton里有InitMethod方法循环定义的。</p>\n<p>下面是选出一些代码片段，来简述这个实现。</p>\n<p>定义一个有支持子函数的列表：</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\"><span class=\"token keyword\">local</span> supported_http_methods <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\nget <span class=\"token operator\">=</span> <span class=\"token keyword\">true</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">-- work well</span>\nput <span class=\"token operator\">=</span> <span class=\"token keyword\">true</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">-- no test</span>\npatch <span class=\"token operator\">=</span> <span class=\"token keyword\">true</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">-- no test</span>\ndelete <span class=\"token operator\">=</span> <span class=\"token keyword\">true</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">-- no test</span>\ntrace <span class=\"token operator\">=</span> <span class=\"token keyword\">true</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">-- no test</span>\nall <span class=\"token operator\">=</span> <span class=\"token keyword\">true</span> <span class=\"token comment\">-- todo:</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>循环定义函数：</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\"><span class=\"token keyword\">function</span> app<span class=\"token punctuation\">:</span><span class=\"token function\">initMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> http_method<span class=\"token punctuation\">,</span> _ <span class=\"token keyword\">in</span> <span class=\"token function\">pairs</span><span class=\"token punctuation\">(</span>supported_http_methods<span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>\n        self<span class=\"token punctuation\">[</span>http_method<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">,</span> fn<span class=\"token punctuation\">)</span>\n            <span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\napp:\"</span> <span class=\"token operator\">..</span> http_method<span class=\"token punctuation\">,</span> <span class=\"token string\">\"start init\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">local</span> route <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>router<span class=\"token punctuation\">:</span><span class=\"token function\">route</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span>\n            route<span class=\"token punctuation\">[</span>http_method<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>route<span class=\"token punctuation\">,</span> fn<span class=\"token punctuation\">)</span>\n            <span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"app:\"</span> <span class=\"token operator\">..</span> http_method<span class=\"token punctuation\">,</span> <span class=\"token string\">\"end init\\n\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> self\n        <span class=\"token keyword\">end</span>\n    <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>这个关键的声明关键字是：self[函数数] = function(函数参数) end</p>\n<p>我们用最小化的一个lua对象来描述这个过程。</p>\n<p>app应属于框架的代码。</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">\n<span class=\"token keyword\">local</span> app <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">function</span> app<span class=\"token punctuation\">:</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">local</span> instance <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n    instance<span class=\"token punctuation\">.</span>m <span class=\"token operator\">=</span> <span class=\"token number\">100</span>\n    instance<span class=\"token punctuation\">.</span>n <span class=\"token operator\">=</span> <span class=\"token number\">500</span>\n    <span class=\"token function\">setmetatable</span><span class=\"token punctuation\">(</span>instance<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>\n        __index <span class=\"token operator\">=</span> self<span class=\"token punctuation\">,</span>\n        __call <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>handle\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\n    instance<span class=\"token punctuation\">:</span><span class=\"token function\">initMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> instance\n<span class=\"token keyword\">end</span>\n\n\n<span class=\"token keyword\">function</span> app<span class=\"token punctuation\">:</span><span class=\"token function\">handle</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> callback<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>callback<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span>\n\n<span class=\"token keyword\">function</span> app<span class=\"token punctuation\">:</span><span class=\"token function\">output</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> fn<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"##################\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"###################\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span>\n\n<span class=\"token keyword\">function</span> app<span class=\"token punctuation\">:</span><span class=\"token function\">initMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    self<span class=\"token punctuation\">[</span><span class=\"token string\">\"get\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"app:get\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span>\n\n<span class=\"token keyword\">return</span> app\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>下面是对象的调用：</p>\n<p>这个对象调用，就是平时写的web代码，不属于框架，是普通的应用框架写的web程序。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">app &#x3D; require&quot;app&quot;\n\nlocal obj &#x3D; app:new()\nobj:output(&quot;&#x2F;test&quot;,\nfunction(req, res)\n      print(&quot;abc&quot;)\n      print(req, res)\nend\n)\nobj:handle(&quot;abc&quot;,&quot;efg&quot;,&quot;hij&quot;)\n\n--每个get的函数的调用，都触发一次路由的判断\n--后面的时序，是lor核心 app:get-&gt;router-&gt;layer-&gt;route\n--注意一下,request数据，函数形参req的填充时机\nobj:get(&quot;&#x2F;index&quot;,\nfunction(req, res)\nend\n)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>一般每次用户的url请求，都会触发以下时序<br />\napp:new  -&gt;app:initMethod-&gt;app:get-&gt;route[http_method]</p>\n<p>router-&gt;layer-&gt;route的时序，接下来放几张，饭总的原始设计图：</p>\n<p>图片：reqres.jpg<br />\n<img src=\"http://orchina-blog.stor.sinaapp.com/1453647389.jpg\" alt=\"reqres.jpg\" /></p>\n<p>还有几张设计图，在后续的文章中加入。</p>\n<p>PS:转载到其它平台请注明作者姓名及原文链接，请勿用于商业用途。</p>\n","text":"作者：糖果 LOR是最近国内的LUA WEB开发框架，目前已经发布到了0.3版，昨天晚上作者分享了他的初始设计图， 在QQ群里发的。 最开始的时候，lor是借鉴vanilla的，之后作者转向设计，开始向expressjs靠拢。 目前来看的，lor非常引人关注的是lor的路由设计。...","link":"","photos":[],"count_time":{"symbolsCount":"2.4k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[],"toc":"","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Openresty的非典型安装","uid":"bb30e03d07b81113ffb361e7f94598db","slug":"old_topic/2016-09-17-212","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T07:45:09.223Z","comments":true,"path":"api/articles/old_topic/2016-09-17-212.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"作者：糖果 Openresty也安装了很多遍整理一下安装过程。 上来先更新一下系统 sudo yum update 安装Openresty安装需要的依赖： sudo yum install -y gcc gcc-c++ readline-devel pcre-devel open...","link":"","photos":[],"count_time":{"symbolsCount":556,"symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Select 网络API","uid":"4565b99fae7d71a23c039a81b59544a8","slug":"old_topic/2016-09-17-21","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T07:45:09.182Z","comments":true,"path":"api/articles/old_topic/2016-09-17-21.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"【问题】select,poll,epoll的区别是什么？ select的并发处理是源于BSD系统的支持，poll是商业公司的unix版本SystemV 提供支持。epoll是在Linux 2.5+开始支持的。就像message queue都有BSD和SystemV版本的API。s...","link":"","photos":[],"count_time":{"symbolsCount":"3.7k","symbolsTime":"3 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua","slug":"lua","count":124,"path":"api/tags/lua.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}