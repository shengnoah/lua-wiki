{"title":"MoonScript Command Line.","uid":"b4e10a2e9208e3bffc49bf639e841080","slug":"old_topic/2016-09-17-370","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T06:15:59.753Z","comments":true,"path":"api/articles/old_topic/2016-09-17-370.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":null,"content":"<p>{<br>  target: “reference/command_line”<br>  template: “reference”<br>  title: “Command Line Tools”<br>  short_name: “command_line”<br>}</p>\n<h1 id=\"Command-Line-Tools\"><a href=\"#Command-Line-Tools\" class=\"headerlink\" title=\"Command Line Tools\"></a>Command Line Tools</h1><p>Two tools are installed with MoonScript, <code>moon</code> and <code>moonc</code>.</p>\n<p><code>moonc</code> is for compiling MoonScript code to Lua.<br><code>moon</code> is for running MoonScript code directly.</p>\n<h2 id=\"moon\"><a href=\"#moon\" class=\"headerlink\" title=\"moon\"></a><code>moon</code></h2><p><code>moon</code> can be used to run MoonScript files directly from the command line,<br>without needing a separate compile step. All MoonScript files are compiled in<br>memory as they are executed.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ moon my_script.moon</span><br></pre></td></tr></table></figure>\n\n<p>Any MoonScript files that are required will also be compiled on demand as they<br>are loaded.</p>\n<p>When an error occurs during runtime, the stack trace is rewritten to give line<br>numbers from the original <code>.moon</code> file.</p>\n<p>If you want to disable <a href=\"#error_rewriting\">error rewriting</a>, you can pass the<br><code>-d</code> flag. A full list of flags can be seen by passing the <code>-h</code> or <code>--help</code><br>flag.</p>\n<h3 id=\"Error-Rewriting\"><a href=\"#Error-Rewriting\" class=\"headerlink\" title=\"Error Rewriting\"></a>Error Rewriting</h3><p>Runtime errors are given special attention when running code using the <code>moon</code><br>command line tool. Because code is written in MoonScript but executed as Lua,<br>errors that happen during runtime report Lua line numbers. This can make<br>debugging less than ideal.</p>\n<p>In order to solve this problem MoonScript builds up a table of line number<br>mappings, allowing the runtime to calculate what line of MoonScript generated<br>the line of Lua that triggered the error.</p>\n<p>Consider the following file with a bug (note the invalid <code>z</code> variable):</p>\n<figure class=\"highlight moon\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">add_numbers</span> = <span class=\"params\">(x,y)</span> -&gt;</span> x + z  <span class=\"comment\">-- 1</span></span><br><span class=\"line\"><span class=\"built_in\">print</span> add_numbers <span class=\"number\">10</span>,<span class=\"number\">0</span>        <span class=\"comment\">-- 2</span></span><br></pre></td></tr></table></figure>\n\n<p>The following error is generated:</p>\n<pre><code>moon: scrap.moon:1(3): attempt to perform arithmetic on global &#39;z&#39; (a nil value)\nstack traceback:\n  scrap.moon:1(3): in function &#39;add_numbers&#39;\n  scrap.moon:2(5): in main chunk\n</code></pre>\n<p>Notice how next to the file name there are two numbers. The first number is the<br>rewritten line number. The number in the parentheses is the original Lua line<br>number.</p>\n<p>The error in this example is being reported on line 1 of the <code>moon</code> file, which<br>corresponds to line 3 of the generated Lua code. The entire stack trace is rewritten in<br>addition to the error message.</p>\n<h3 id=\"Code-Coverage\"><a href=\"#Code-Coverage\" class=\"headerlink\" title=\"Code Coverage\"></a>Code Coverage</h3><p><code>moon</code> lets you run a MoonScript file while keeping track of which lines<br>are executed with the <code>-c</code> flag.</p>\n<p>For example, consider the following <code>.moon</code> file:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- test.moon</span><br><span class=\"line\">first = -&gt;</span><br><span class=\"line\">  print &quot;hello&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">second = -&gt;</span><br><span class=\"line\">  print &quot;world&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">first!</span><br></pre></td></tr></table></figure>\n\n<p>We can execute and get a glance of which lines ran:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ moon -c test.moon</span><br></pre></td></tr></table></figure>\n\n<p>The following output is produced:</p>\n<pre><code>------| @cool.moon\n     1| -- test.moon\n*    2| first = -&gt;\n*    3|   print &quot;hello&quot;\n     4|\n*    5| second = -&gt;\n     6|   print &quot;world&quot;\n     7|\n*    8| first!\n     9|\n</code></pre>\n<p>The star next to the line means that it was executed. Blank lines are not<br>considered when running so by default they don’t get marked as executed.</p>\n<h2 id=\"moonc\"><a href=\"#moonc\" class=\"headerlink\" title=\"moonc\"></a><code>moonc</code></h2><p><code>moonc</code> is used for transforming MoonScript files into Lua files.<br>It takes a list of files, compiles them all, and creates the associated <code>.lua</code><br>files in the same directories.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ moonc my_script1.moon my_script2.moon ...</span><br></pre></td></tr></table></figure>\n\n<p>You can control where the compiled files are put using the <code>-t</code> flag, followed<br>by a directory.</p>\n<p><code>moonc</code> can also take a directory as an argument, and it will recursively scan<br>for all MoonScript files and compile them.</p>\n<p><code>moonc</code> can write to standard out by passing the <code>-p</code> flag.</p>\n<p>The <code>-w</code> flag can be used to enable watch mode. <code>moonc</code> will stay running, and<br>watch for changes to the input files. If any of them change then they will be<br>compiled automatically.</p>\n<p>A full list of flags can be seen by passing the <code>-h</code> or <code>--help</code> flag.</p>\n<h3 id=\"Linter\"><a href=\"#Linter\" class=\"headerlink\" title=\"Linter\"></a>Linter</h3><p><code>moonc</code> contains a <a href=\"http://en.wikipedia.org/wiki/Lint_(software)\">lint</a> tool for statically detecting potential problems<br>with code. The linter has two tests: detects accessed global variables,<br>detect unused declared variables. If the linter detects any issues with a file,<br>the program will exit with a status of <code>1</code>.</p>\n<p>You can execute the linter with the <code>-l</code> flag. When the linting flag is<br>provided only linting takes place and no compiled code is generated.</p>\n<p>The linter is compatible with the watch mode (see above) for automatic linting.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">moonc -l file1.moon file2.moon</span><br></pre></td></tr></table></figure>\n\n<p>Like when compiling, you can also pass a directory as a command line argument<br>to recursively process all the <code>.moon</code> files.</p>\n<h4 id=\"Global-Variable-Checking\"><a href=\"#Global-Variable-Checking\" class=\"headerlink\" title=\"Global Variable Checking\"></a>Global Variable Checking</h4><p>It’s considered good practice to avoid using global variables and create local<br>variables for all the values referenced. A good case for not using global<br>variables is that you can analyize the code ahead of time without the need to<br>execute it to find references to undeclared variables.</p>\n<p>MoonScript makes it difficult to declare global variables by forcing you to be<br>explicit with the <code>export</code> keyword, so it’s a good candidate for doing this<br>kind of linting.</p>\n<p>Consider the following program with a typo: (<code>my_number</code> is spelled wrong as<br><code>my_nmuber</code> in the function)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- lint_example.moon</span><br><span class=\"line\">my_number = 1234</span><br><span class=\"line\"></span><br><span class=\"line\">some_function = -&gt;</span><br><span class=\"line\">  -- a contrived example with a small chance to pass</span><br><span class=\"line\">  if math.random() &lt; 0.01</span><br><span class=\"line\">    my_nmuber + 10</span><br><span class=\"line\"></span><br><span class=\"line\">some_function!</span><br></pre></td></tr></table></figure>\n\n<p>Although there is a bug in this code, it rarely happens during execution. It’s<br>more likely to be missed during development and cause problems in the future.</p>\n<p>Running the linter immediately identifies the problem:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ moonc -l lint_example.moon</span><br></pre></td></tr></table></figure>\n\n<p>Outputs:</p>\n<pre><code>./lint_example.moon\n\nline 7: accessing global `my_nmuber`\n==================================\n&gt;         my_nmuber + 10\n</code></pre>\n<h4 id=\"Global-Variable-Whitelist\"><a href=\"#Global-Variable-Whitelist\" class=\"headerlink\" title=\"Global Variable Whitelist\"></a>Global Variable Whitelist</h4><p>In most circumstances it’s impossible to avoid using some global variables. For<br>example, to access any of the built in modules or functions you typically<br>access them globally.</p>\n<p>For this reason a global variable whitelist is used. It’s a list of global<br>variables that are allowed to be used. A default whitelist is provided that<br>contains all of Lua’s built in functions and modules.</p>\n<p>You can create your own entires in the whitelist as well. For example, the<br>testing framework <a href=\"http://olivinelabs.com/busted\">Busted</a> uses a collection of<br>global functions (like <code>describe</code>, <code>before_each</code>, <code>setup</code>) to make writing<br>tests easy.</p>\n<p>It would be nice if we could allow all of those global functions to be called<br>for <code>.moon</code> files located in the <code>spec/</code> directory. We can do that by creating<br>a <code>lint_config</code> file.</p>\n<p><code>lint_config</code> is a regular MoonScript or Lua file that provides configuration<br>for the linter. One of those settings is <code>whitelist_globals</code>.</p>\n<p>To create a configuration for Busted we might do something like this:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- lint_config.moon</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  whitelist_globals: &#123;</span><br><span class=\"line\">    [&quot;spec/&quot;]: &#123;</span><br><span class=\"line\">      &quot;it&quot;, &quot;describe&quot;, &quot;setup&quot;, &quot;teardown&quot;,</span><br><span class=\"line\">      &quot;before_each&quot;, &quot;after_each&quot;, &quot;pending&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Compile the file:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ moonc lint_config.moon</span><br></pre></td></tr></table></figure>\n\n<p>Then run the linter on your entire project:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ moonc -l .</span><br></pre></td></tr></table></figure>\n\n<p>The whitelisted global references in <code>spec/</code> will no longer raise notices.</p>\n<p>The <code>whitelist_globals</code> property of the <code>lint_config</code> is a table where the keys<br>are Lua patterns that match file names, and the values are an array of globals<br>that are allowed.</p>\n<p>Multiple patterns in <code>whitelist_globals</code> can match a single file, the union of<br>the allowed globals will be used when linting that file.</p>\n<h4 id=\"Unused-Variable-Assigns\"><a href=\"#Unused-Variable-Assigns\" class=\"headerlink\" title=\"Unused Variable Assigns\"></a>Unused Variable Assigns</h4><p>Sometimes when debugging, refactoring, or just developing, you might leave<br>behind stray assignments that aren’t actually necessary for the execution of<br>your code. It’s good practice to clean them up to avoid any potential confusion<br>they might cause.</p>\n<p>The unused assignment detector keeps track of any variables that are assigned,<br>and if they aren’t accessed in within their available scope, they are reported<br>as an error.</p>\n<p>Given the following code:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a, b = 1, 2</span><br><span class=\"line\">print &quot;hello&quot;, a</span><br></pre></td></tr></table></figure>\n\n<p>The linter will identify the problem:</p>\n<pre><code>./lint_example.moon\n\nline 1: assigned but unused `b`\n===============================\n&gt; a, b = 1, 2\n</code></pre>\n<p>Sometimes you need a name to assign to even though you know it will never be<br>accessed.  The linter will treat <code>_</code> as a special name that’s allowed to be<br>written to but never accessed:</p>\n<p>The following code would not produce any lint errors:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">item = &#123;123, &quot;shoe&quot;, &quot;brown&quot;, 123&#125;</span><br><span class=\"line\">_, name, _, count = unpack item</span><br><span class=\"line\">print name, count</span><br></pre></td></tr></table></figure>\n\n","text":"{ target: “reference/command_line” template: “reference” title: “Command Line Tools” short_name: “command_line”} Command Line ToolsTwo tools...","link":"","photos":[],"count_time":{"symbolsCount":"8k","symbolsTime":"7 mins."},"categories":[{"name":"topic","slug":"topic","count":308,"path":"api/categories/topic.json"}],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Command-Line-Tools\"><span class=\"toc-text\">Command Line Tools</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#moon\"><span class=\"toc-text\">moon</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Error-Rewriting\"><span class=\"toc-text\">Error Rewriting</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Code-Coverage\"><span class=\"toc-text\">Code Coverage</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#moonc\"><span class=\"toc-text\">moonc</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Linter\"><span class=\"toc-text\">Linter</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Global-Variable-Checking\"><span class=\"toc-text\">Global Variable Checking</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Global-Variable-Whitelist\"><span class=\"toc-text\">Global Variable Whitelist</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Unused-Variable-Assigns\"><span class=\"toc-text\">Unused Variable Assigns</span></a></li></ol></li></ol></li></ol></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Django超级简单的MVC实例","uid":"b886d3e0a930ce8de7df46cdd311c487","slug":"old_topic/2016-09-17-37","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T06:15:59.753Z","comments":true,"path":"api/articles/old_topic/2016-09-17-37.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":null,"text":"【前言】写一遍django的入门例子，基于MVC设计模式，本程序有输入，处理，输出。开始用django搬运互联网上的数据。简单介绍一下什么是MVC模式。MVC就是把程序成分3部分职责。 【MVC】V(View)：系统的界面，django中就是网页。UI部分，用于接受用户的数据，输...","link":"","photos":[],"count_time":{"symbolsCount":"3.2k","symbolsTime":"3 mins."},"categories":[{"name":"topic","slug":"topic","count":308,"path":"api/categories/topic.json"}],"tags":[{"name":"lua","slug":"lua","count":153,"path":"api/tags/lua.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"善良比聪明重要---亚马逊 CEO 杰夫·贝佐斯（Jeff Bezos）在母校普林斯顿大学演讲","uid":"80b2bfed22c13e124acdd5132be472fa","slug":"old_topic/2016-09-17-373","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T06:15:59.753Z","comments":true,"path":"api/articles/old_topic/2016-09-17-373.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":null,"text":"2010 年，亚马逊 CEO 杰夫·贝佐斯（Jeff Bezos）在母校普林斯顿大学的毕业典礼上，勉励年轻人，善用自己的天赋，做出对的选择。因为，「人生到头来，我们的选择，决定了我们是什么样的人。」 以下是 Bezos 演讲内容： As a kid, I spent my sum...","link":"","photos":[],"count_time":{"symbolsCount":"9.6k","symbolsTime":"9 mins."},"categories":[{"name":"topic","slug":"topic","count":308,"path":"api/categories/topic.json"}],"tags":[{"name":"lua","slug":"lua","count":153,"path":"api/tags/lua.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}