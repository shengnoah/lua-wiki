{"title":"MoonScript Command Line.","uid":"b4e10a2e9208e3bffc49bf639e841080","slug":"old_topic/2016-09-17-370","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T07:45:09.172Z","comments":true,"path":"api/articles/old_topic/2016-09-17-370.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<p>{<br />\ntarget: “reference/command_line”<br />\ntemplate: “reference”<br />\ntitle: “Command Line Tools”<br />\nshort_name: “command_line”<br />\n}</p>\n<h1 id=\"command-line-tools\"><a class=\"markdownIt-Anchor\" href=\"#command-line-tools\"></a> Command Line Tools</h1>\n<p>Two tools are installed with MoonScript, <code>moon</code> and <code>moonc</code>.</p>\n<p><code>moonc</code> is for compiling MoonScript code to Lua.<br />\n<code>moon</code> is for running MoonScript code directly.</p>\n<h2 id=\"moon\"><a class=\"markdownIt-Anchor\" href=\"#moon\"></a> <code>moon</code></h2>\n<p><code>moon</code> can be used to run MoonScript files directly from the command line,<br />\nwithout needing a separate compile step. All MoonScript files are compiled in<br />\nmemory as they are executed.</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ moon my_script.moon<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>Any MoonScript files that are required will also be compiled on demand as they<br />\nare loaded.</p>\n<p>When an error occurs during runtime, the stack trace is rewritten to give line<br />\nnumbers from the original <code>.moon</code> file.</p>\n<p>If you want to disable <a href=\"#error_rewriting\">error rewriting</a>, you can pass the<br />\n<code>-d</code> flag. A full list of flags can be seen by passing the <code>-h</code> or <code>--help</code><br />\nflag.</p>\n<h3 id=\"error-rewriting\"><a class=\"markdownIt-Anchor\" href=\"#error-rewriting\"></a> Error Rewriting</h3>\n<p>Runtime errors are given special attention when running code using the <code>moon</code><br />\ncommand line tool. Because code is written in MoonScript but executed as Lua,<br />\nerrors that happen during runtime report Lua line numbers. This can make<br />\ndebugging less than ideal.</p>\n<p>In order to solve this problem MoonScript builds up a table of line number<br />\nmappings, allowing the runtime to calculate what line of MoonScript generated<br />\nthe line of Lua that triggered the error.</p>\n<p>Consider the following file with a bug (note the invalid <code>z</code> variable):</p>\n<pre class=\"line-numbers language-moonscript\" data-language=\"moonscript\"><code class=\"language-moonscript\">add_numbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> x <span class=\"token operator\">+</span> z  <span class=\"token comment\">-- 1</span>\n<span class=\"token function\">print</span> add_numbers <span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span>        <span class=\"token comment\">-- 2</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>The following error is generated:</p>\n<pre><code>moon: scrap.moon:1(3): attempt to perform arithmetic on global 'z' (a nil value)\nstack traceback:\n  scrap.moon:1(3): in function 'add_numbers'\n  scrap.moon:2(5): in main chunk\n</code></pre>\n<p>Notice how next to the file name there are two numbers. The first number is the<br />\nrewritten line number. The number in the parentheses is the original Lua line<br />\nnumber.</p>\n<p>The error in this example is being reported on line 1 of the <code>moon</code> file, which<br />\ncorresponds to line 3 of the generated Lua code. The entire stack trace is rewritten in<br />\naddition to the error message.</p>\n<h3 id=\"code-coverage\"><a class=\"markdownIt-Anchor\" href=\"#code-coverage\"></a> Code Coverage</h3>\n<p><code>moon</code> lets you run a MoonScript file while keeping track of which lines<br />\nare executed with the <code>-c</code> flag.</p>\n<p>For example, consider the following <code>.moon</code> file:</p>\n<pre class=\"line-numbers language-moononly\" data-language=\"moononly\"><code class=\"language-moononly\">-- test.moon\nfirst &#x3D; -&gt;\n  print &quot;hello&quot;\n\nsecond &#x3D; -&gt;\n  print &quot;world&quot;\n\nfirst!<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>We can execute and get a glance of which lines ran:</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ moon <span class=\"token parameter variable\">-c</span> test.moon<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>The following output is produced:</p>\n<pre><code>------| @cool.moon\n     1| -- test.moon\n*    2| first = -&gt;\n*    3|   print &quot;hello&quot;\n     4|\n*    5| second = -&gt;\n     6|   print &quot;world&quot;\n     7|\n*    8| first!\n     9|\n</code></pre>\n<p>The star next to the line means that it was executed. Blank lines are not<br />\nconsidered when running so by default they don’t get marked as executed.</p>\n<h2 id=\"moonc\"><a class=\"markdownIt-Anchor\" href=\"#moonc\"></a> <code>moonc</code></h2>\n<p><code>moonc</code> is used for transforming MoonScript files into Lua files.<br />\nIt takes a list of files, compiles them all, and creates the associated <code>.lua</code><br />\nfiles in the same directories.</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ moonc my_script1.moon my_script2.moon <span class=\"token punctuation\">..</span>.<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>You can control where the compiled files are put using the <code>-t</code> flag, followed<br />\nby a directory.</p>\n<p><code>moonc</code> can also take a directory as an argument, and it will recursively scan<br />\nfor all MoonScript files and compile them.</p>\n<p><code>moonc</code> can write to standard out by passing the <code>-p</code> flag.</p>\n<p>The <code>-w</code> flag can be used to enable watch mode. <code>moonc</code> will stay running, and<br />\nwatch for changes to the input files. If any of them change then they will be<br />\ncompiled automatically.</p>\n<p>A full list of flags can be seen by passing the <code>-h</code> or <code>--help</code> flag.</p>\n<h3 id=\"linter\"><a class=\"markdownIt-Anchor\" href=\"#linter\"></a> Linter</h3>\n<p><code>moonc</code> contains a <a href=\"http://en.wikipedia.org/wiki/Lint_(software)\">lint</a> tool for statically detecting potential problems<br />\nwith code. The linter has two tests: detects accessed global variables,<br />\ndetect unused declared variables. If the linter detects any issues with a file,<br />\nthe program will exit with a status of <code>1</code>.</p>\n<p>You can execute the linter with the <code>-l</code> flag. When the linting flag is<br />\nprovided only linting takes place and no compiled code is generated.</p>\n<p>The linter is compatible with the watch mode (see above) for automatic linting.</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">moonc <span class=\"token parameter variable\">-l</span> file1.moon file2.moon<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>Like when compiling, you can also pass a directory as a command line argument<br />\nto recursively process all the <code>.moon</code> files.</p>\n<h4 id=\"global-variable-checking\"><a class=\"markdownIt-Anchor\" href=\"#global-variable-checking\"></a> Global Variable Checking</h4>\n<p>It’s considered good practice to avoid using global variables and create local<br />\nvariables for all the values referenced. A good case for not using global<br />\nvariables is that you can analyize the code ahead of time without the need to<br />\nexecute it to find references to undeclared variables.</p>\n<p>MoonScript makes it difficult to declare global variables by forcing you to be<br />\nexplicit with the <code>export</code> keyword, so it’s a good candidate for doing this<br />\nkind of linting.</p>\n<p>Consider the following program with a typo: (<code>my_number</code> is spelled wrong as<br />\n<code>my_nmuber</code> in the function)</p>\n<pre class=\"line-numbers language-moononly\" data-language=\"moononly\"><code class=\"language-moononly\">-- lint_example.moon\nmy_number &#x3D; 1234\n\nsome_function &#x3D; -&gt;\n  -- a contrived example with a small chance to pass\n  if math.random() &lt; 0.01\n    my_nmuber + 10\n\nsome_function!<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>Although there is a bug in this code, it rarely happens during execution. It’s<br />\nmore likely to be missed during development and cause problems in the future.</p>\n<p>Running the linter immediately identifies the problem:</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ moonc <span class=\"token parameter variable\">-l</span> lint_example.moon<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>Outputs:</p>\n<pre><code>./lint_example.moon\n\nline 7: accessing global `my_nmuber`\n==================================\n&gt; \t\tmy_nmuber + 10\n</code></pre>\n<h4 id=\"global-variable-whitelist\"><a class=\"markdownIt-Anchor\" href=\"#global-variable-whitelist\"></a> Global Variable Whitelist</h4>\n<p>In most circumstances it’s impossible to avoid using some global variables. For<br />\nexample, to access any of the built in modules or functions you typically<br />\naccess them globally.</p>\n<p>For this reason a global variable whitelist is used. It’s a list of global<br />\nvariables that are allowed to be used. A default whitelist is provided that<br />\ncontains all of Lua’s built in functions and modules.</p>\n<p>You can create your own entires in the whitelist as well. For example, the<br />\ntesting framework <a href=\"http://olivinelabs.com/busted\">Busted</a> uses a collection of<br />\nglobal functions (like <code>describe</code>, <code>before_each</code>, <code>setup</code>) to make writing<br />\ntests easy.</p>\n<p>It would be nice if we could allow all of those global functions to be called<br />\nfor <code>.moon</code> files located in the <code>spec/</code> directory. We can do that by creating<br />\na <code>lint_config</code> file.</p>\n<p><code>lint_config</code> is a regular MoonScript or Lua file that provides configuration<br />\nfor the linter. One of those settings is <code>whitelist_globals</code>.</p>\n<p>To create a configuration for Busted we might do something like this:</p>\n<pre class=\"line-numbers language-moononly\" data-language=\"moononly\"><code class=\"language-moononly\">-- lint_config.moon\n&#123;\n  whitelist_globals: &#123;\n    [&quot;spec&#x2F;&quot;]: &#123;\n      &quot;it&quot;, &quot;describe&quot;, &quot;setup&quot;, &quot;teardown&quot;,\n      &quot;before_each&quot;, &quot;after_each&quot;, &quot;pending&quot;\n    &#125;\n  &#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>Compile the file:</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ moonc lint_config.moon<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>Then run the linter on your entire project:</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ moonc <span class=\"token parameter variable\">-l</span> <span class=\"token builtin class-name\">.</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>The whitelisted global references in <code>spec/</code> will no longer raise notices.</p>\n<p>The <code>whitelist_globals</code> property of the <code>lint_config</code> is a table where the keys<br />\nare Lua patterns that match file names, and the values are an array of globals<br />\nthat are allowed.</p>\n<p>Multiple patterns in <code>whitelist_globals</code> can match a single file, the union of<br />\nthe allowed globals will be used when linting that file.</p>\n<h4 id=\"unused-variable-assigns\"><a class=\"markdownIt-Anchor\" href=\"#unused-variable-assigns\"></a> Unused Variable Assigns</h4>\n<p>Sometimes when debugging, refactoring, or just developing, you might leave<br />\nbehind stray assignments that aren’t actually necessary for the execution of<br />\nyour code. It’s good practice to clean them up to avoid any potential confusion<br />\nthey might cause.</p>\n<p>The unused assignment detector keeps track of any variables that are assigned,<br />\nand if they aren’t accessed in within their available scope, they are reported<br />\nas an error.</p>\n<p>Given the following code:</p>\n<pre class=\"line-numbers language-moononly\" data-language=\"moononly\"><code class=\"language-moononly\">a, b &#x3D; 1, 2\nprint &quot;hello&quot;, a<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>The linter will identify the problem:</p>\n<pre><code>./lint_example.moon\n\nline 1: assigned but unused `b`\n===============================\n&gt; a, b = 1, 2\n</code></pre>\n<p>Sometimes you need a name to assign to even though you know it will never be<br />\naccessed.  The linter will treat <code>_</code> as a special name that’s allowed to be<br />\nwritten to but never accessed:</p>\n<p>The following code would not produce any lint errors:</p>\n<pre class=\"line-numbers language-moononly\" data-language=\"moononly\"><code class=\"language-moononly\">item &#x3D; &#123;123, &quot;shoe&quot;, &quot;brown&quot;, 123&#125;\n_, name, _, count &#x3D; unpack item\nprint name, count<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n","text":"{ target: “reference/command_line” template: “reference” title: “Command Line Tools” short_name: “command_line” } Command Line Tools Two too...","link":"","photos":[],"count_time":{"symbolsCount":"8k","symbolsTime":"7 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#command-line-tools\"><span class=\"toc-text\"> Command Line Tools</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#moon\"><span class=\"toc-text\"> moon</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#error-rewriting\"><span class=\"toc-text\"> Error Rewriting</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#code-coverage\"><span class=\"toc-text\"> Code Coverage</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#moonc\"><span class=\"toc-text\"> moonc</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#linter\"><span class=\"toc-text\"> Linter</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#global-variable-checking\"><span class=\"toc-text\"> Global Variable Checking</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#global-variable-whitelist\"><span class=\"toc-text\"> Global Variable Whitelist</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#unused-variable-assigns\"><span class=\"toc-text\"> Unused Variable Assigns</span></a></li></ol></li></ol></li></ol></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Django超级简单的MVC实例","uid":"b886d3e0a930ce8de7df46cdd311c487","slug":"old_topic/2016-09-17-37","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T07:45:09.193Z","comments":true,"path":"api/articles/old_topic/2016-09-17-37.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"【前言】 写一遍django的入门例子，基于MVC设计模式，本程序有输入，处理，输出。开始用django搬运互联网上的数据。简单介绍一下什么是MVC模式。MVC就是把程序成分3部分职责。 【MVC】 V(View)：系统的界面，django中就是网页。UI部分，用于接受用户的数据...","link":"","photos":[],"count_time":{"symbolsCount":"3k","symbolsTime":"3 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua","slug":"lua","count":124,"path":"api/tags/lua.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"MoonScript API","uid":"718dd50cb1bd8b8045cdc3956cf5b840","slug":"old_topic/2016-09-17-371","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T07:45:09.164Z","comments":true,"path":"api/articles/old_topic/2016-09-17-371.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"{ target: “reference/api” template: “reference” title: “Compiler API” short_name: “api” } MoonScript Compiler API Autocompiling with the moo...","link":"","photos":[],"count_time":{"symbolsCount":"4.2k","symbolsTime":"4 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}