{"title":"Threading的Timer是否可以被wait和communicate阻塞","uid":"1f0e7f34ab02983eb011a2f068cfda64","slug":"old_topic/2016-09-17-268","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T06:15:59.745Z","comments":true,"path":"api/articles/old_topic/2016-09-17-268.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":null,"content":"<p>作者：糖果</p>\n<p>测试的内容是将Timer的使用和Popen的使用混合在一起，测试当wait()和communicate()被调用时，是否会阻塞主进程的Timer。</p>\n<p>找到Timer在Python2.7里的源码位置：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># The timer class was contributed by Itamar Shtull-Trauring</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">Timer</span>(<span class=\"params\">*args, **kwargs</span>):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;Factory function to create a Timer object.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    Timers call a function after a specified number of seconds:</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">        t = Timer(30.0, f, args=[], kwargs=&#123;&#125;)</span></span><br><span class=\"line\"><span class=\"string\">        t.start()</span></span><br><span class=\"line\"><span class=\"string\">        t.cancel()     # stop the timer&#x27;s action if it&#x27;s still waiting</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> _Timer(*args, **kwargs)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">_Timer</span>(<span class=\"title class_ inherited__\">Thread</span>):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;Call a function after a specified number of seconds:</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">            t = Timer(30.0, f, args=[], kwargs=&#123;&#125;)</span></span><br><span class=\"line\"><span class=\"string\">            t.start()</span></span><br><span class=\"line\"><span class=\"string\">            t.cancel()     # stop the timer&#x27;s action if it&#x27;s still waiting</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> _Timer(*args, **kwargs)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">_Timer</span>(<span class=\"title class_ inherited__\">Thread</span>):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;Call a function after a specified number of seconds:</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">            t = Timer(30.0, f, args=[], kwargs=&#123;&#125;)</span></span><br><span class=\"line\"><span class=\"string\">            t.start()</span></span><br><span class=\"line\"><span class=\"string\">            t.cancel()     # stop the timer&#x27;s action if it&#x27;s still waiting</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, interval, function, args=[], kwargs=&#123;&#125;</span>):</span><br><span class=\"line\">        Thread.__init__(self)</span><br><span class=\"line\">        self.interval = interval</span><br><span class=\"line\">        self.function = function</span><br><span class=\"line\">        self.args = args</span><br><span class=\"line\">        self.kwargs = kwargs</span><br><span class=\"line\">        self.finished = Event()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">cancel</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;Stop the timer if it hasn&#x27;t finished yet&quot;&quot;&quot;</span></span><br><span class=\"line\">        self.finished.<span class=\"built_in\">set</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">run</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.finished.wait(self.interval)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> self.finished.is_set():</span><br><span class=\"line\">            self.function(*self.args, **self.kwargs)</span><br><span class=\"line\">        self.finished.<span class=\"built_in\">set</span>()</span><br></pre></td></tr></table></figure>\n\n\n<p>Timer重要作用还是“倒计时”执行某个函数，最多支持4个入参。</p>\n<p>看一下communicate的源码，多少能看出他和wait()的关系。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">communicate</span>(<span class=\"params\">self, <span class=\"built_in\">input</span>=<span class=\"literal\">None</span></span>):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;Interact with process: Send data to stdin.  Read data from</span></span><br><span class=\"line\"><span class=\"string\">    stdout and stderr, until end-of-file is reached.  Wait for</span></span><br><span class=\"line\"><span class=\"string\">    process to terminate.  The optional input argument should be a</span></span><br><span class=\"line\"><span class=\"string\">    string to be sent to the child process, or None, if no data</span></span><br><span class=\"line\"><span class=\"string\">    should be sent to the child.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    communicate() returns a tuple (stdout, stderr).&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># Optimization: If we are only using one pipe, or no pipe at</span></span><br><span class=\"line\">    <span class=\"comment\"># all, using select() or threads is unnecessary.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> [self.stdin, self.stdout, self.stderr].count(<span class=\"literal\">None</span>) &gt;= <span class=\"number\">2</span>:</span><br><span class=\"line\">        stdout = <span class=\"literal\">None</span></span><br><span class=\"line\">        stderr = <span class=\"literal\">None</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> self.stdin:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"built_in\">input</span>:</span><br><span class=\"line\">                <span class=\"keyword\">try</span>:</span><br><span class=\"line\">                    self.stdin.write(<span class=\"built_in\">input</span>)</span><br><span class=\"line\">                <span class=\"keyword\">except</span> IOError <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> e.errno != errno.EPIPE <span class=\"keyword\">and</span> e.errno != errno.EINVAL:</span><br><span class=\"line\">                        <span class=\"keyword\">raise</span></span><br><span class=\"line\">            self.stdin.close()</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> self.stdout:</span><br><span class=\"line\">            stdout = _eintr_retry_call(self.stdout.read)</span><br><span class=\"line\">            self.stdout.close()</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> self.stderr:</span><br><span class=\"line\">            stderr = _eintr_retry_call(self.stderr.read)</span><br><span class=\"line\">            self.stderr.close()</span><br><span class=\"line\">        self.wait()</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (stdout, stderr)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> self._communicate(<span class=\"built_in\">input</span>)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">_communicate</span>(<span class=\"params\">self, <span class=\"built_in\">input</span></span>):</span><br><span class=\"line\">    stdout = <span class=\"literal\">None</span> <span class=\"comment\"># Return</span></span><br><span class=\"line\">    stderr = <span class=\"literal\">None</span> <span class=\"comment\"># Return</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> self.stdout:</span><br><span class=\"line\">        stdout = []</span><br><span class=\"line\">        stdout_thread = threading.Thread(target=self._readerthread,</span><br><span class=\"line\">                                         args=(self.stdout, stdout))</span><br><span class=\"line\">        stdout_thread.setDaemon(<span class=\"literal\">True</span>)</span><br><span class=\"line\">        stdout_thread.start()</span><br><span class=\"line\">    <span class=\"keyword\">if</span> self.stderr:</span><br><span class=\"line\">        stderr = []</span><br><span class=\"line\">        stderr_thread = threading.Thread(target=self._readerthread,</span><br><span class=\"line\">                                         args=(self.stderr, stderr))</span><br><span class=\"line\">        stderr_thread.setDaemon(<span class=\"literal\">True</span>)</span><br><span class=\"line\">        stderr_thread.start()</span><br><span class=\"line\">    <span class=\"keyword\">if</span> self.stdin:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">input</span> <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">            <span class=\"keyword\">try</span>:</span><br><span class=\"line\">                self.stdin.write(<span class=\"built_in\">input</span>)</span><br><span class=\"line\">            <span class=\"keyword\">except</span> IOError <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> e.errno != errno.EPIPE:</span><br><span class=\"line\">                    <span class=\"keyword\">raise</span></span><br><span class=\"line\">        self.stdin.close()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> self.stdout:</span><br><span class=\"line\">        stdout_thread.join()</span><br><span class=\"line\">    <span class=\"keyword\">if</span> self.stderr:</span><br><span class=\"line\">        stderr_thread.join()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># All data exchanged.  Translate lists into strings.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> stdout <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">        stdout = stdout[<span class=\"number\">0</span>]</span><br><span class=\"line\">    <span class=\"keyword\">if</span> stderr <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">        stderr = stderr[<span class=\"number\">0</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># Translate newlines, if requested.  We cannot let the file</span></span><br><span class=\"line\">    <span class=\"comment\"># object do the translation: It is based on stdio, which is</span></span><br><span class=\"line\">    <span class=\"comment\"># impossible to combine with select (unless forcing no</span></span><br><span class=\"line\">    <span class=\"comment\"># buffering).</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> self.universal_newlines <span class=\"keyword\">and</span> <span class=\"built_in\">hasattr</span>(file, <span class=\"string\">&#x27;newlines&#x27;</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> stdout:</span><br><span class=\"line\">            stdout = self._translate_newlines(stdout)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> stderr:</span><br><span class=\"line\">            stderr = self._translate_newlines(stderr)</span><br><span class=\"line\"></span><br><span class=\"line\">    self.wait()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (stdout, stderr)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>区别就是前面对stdout和stdout处理，最后调用了wait()。</p>\n<p>下面这个程序，是一个用Timer循环调用自己的程序，并且调用函数时，用args函数给被调用函数传参。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">CandyLab</span>(<span class=\"params\">a,b</span>):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(a,b)</span><br><span class=\"line\">        <span class=\"built_in\">print</span> <span class=\"string\">&quot;CandyLab&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">Orchina</span>():</span><br><span class=\"line\">        <span class=\"built_in\">print</span> <span class=\"string\">&quot;Orchina&quot;</span></span><br><span class=\"line\">        t = Timer( <span class=\"number\">1</span>, Orchina);</span><br><span class=\"line\">        t.start()</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\"></span><br><span class=\"line\">t = Timer( <span class=\"number\">1</span>, CandyLab, args=(<span class=\"string\">&quot;valueA&quot;</span>,<span class=\"string\">&quot;valueB&quot;</span>));</span><br><span class=\"line\">t.start()</span><br></pre></td></tr></table></figure>\n\n<p>Timer在定义调用函数后，当执行t.start()时， timer进入倒时间状态，这个时间是在形参中指定的，下面这段代码中Orchina这个函数是在starty调用后的10秒时间后，被调用，而t.start()调用后，不会阻塞计数，还会继续调用后面的函数。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">Orchina</span>():</span><br><span class=\"line\">        <span class=\"built_in\">print</span> <span class=\"string\">&quot;Orchina&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\"></span><br><span class=\"line\">t = Timer( <span class=\"number\">10</span>, Orchina);</span><br><span class=\"line\">t.start()</span><br></pre></td></tr></table></figure>\n\n\n<p>只有当主要的运行t.cancel函数时，计时才会被取消，定时期停止，CandyLab函数也不会被执行。</p>\n<p>进一步的简单的实例代码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">from</span> threading <span class=\"keyword\">import</span> Thread, Timer</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">CandyLab</span>():</span><br><span class=\"line\">        <span class=\"built_in\">print</span> <span class=\"string\">&quot;CandyLab&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">Orchina</span>():</span><br><span class=\"line\">        <span class=\"built_in\">print</span> <span class=\"string\">&quot;Orchina&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\"></span><br><span class=\"line\">t = Timer( <span class=\"number\">10</span>, CandyLab);</span><br><span class=\"line\">t.start()</span><br><span class=\"line\">Orchina()</span><br><span class=\"line\">time.sleep(<span class=\"number\">3</span>)</span><br><span class=\"line\">t.cancel()</span><br></pre></td></tr></table></figure>\n\n<p>运行结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Orchina</span><br></pre></td></tr></table></figure>\n\n<p>不会立刻执行CanyLab(),正常执行CandyLab()这个函数需要10秒的时间，从t.start()执行时开始记时，程序不柱塞等10秒执行CanyLab()，是按顺序立刻的执行t.start()后面的语句，Orchina()显示输出”Orchina”, 等3秒结束10秒记时，t.cancel()执行后，CanyLab（）这个函数，之后就不会被执行了。</p>\n<p>如果没有sleep3秒后的t.cancel操作，在10秒钟记时完毕时，CandyLab()这个函数会被执行。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">from</span> threading <span class=\"keyword\">import</span> Thread, Timer</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">CandyLab</span>():</span><br><span class=\"line\">        <span class=\"built_in\">print</span> <span class=\"string\">&quot;CandyLab&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">Orchina</span>():</span><br><span class=\"line\">        <span class=\"built_in\">print</span> <span class=\"string\">&quot;Orchina&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\"></span><br><span class=\"line\">t = Timer( <span class=\"number\">10</span>, CandyLab);</span><br><span class=\"line\">t.start()</span><br><span class=\"line\">Orchina()</span><br></pre></td></tr></table></figure>\n<p>结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Orchina</span><br><span class=\"line\">CandyLab</span><br></pre></td></tr></table></figure>\n\n\n<p>还有一种情况就是循环的调用自己，当满足某个条件时，再进行t.cancel的取消动作。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">CandyLab</span>():</span><br><span class=\"line\">        <span class=\"built_in\">print</span> <span class=\"string\">&quot;CandyLab&quot;</span></span><br><span class=\"line\">        t = Timer( <span class=\"number\">1</span>, CandyLab);</span><br><span class=\"line\">        t.start()</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\"></span><br><span class=\"line\">CandyLab()</span><br></pre></td></tr></table></figure>\n<p>结果：<br>就是循环输出</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CandyLab</span><br><span class=\"line\">CandyLab</span><br><span class=\"line\">CandyLab</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n\n<p>下面是Timer调用函数进传参，用到了args函数：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">CandyLab</span>(<span class=\"params\">a,b</span>):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(a,b)</span><br><span class=\"line\">        <span class=\"built_in\">print</span> <span class=\"string\">&quot;CandyLab&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">Orchina</span>():</span><br><span class=\"line\">        <span class=\"built_in\">print</span> <span class=\"string\">&quot;Orchina&quot;</span></span><br><span class=\"line\">        t = Timer( <span class=\"number\">1</span>, Orchina);</span><br><span class=\"line\">        t.start()</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\"></span><br><span class=\"line\">t = Timer( <span class=\"number\">1</span>, CandyLab, args=(<span class=\"string\">&quot;valueA&quot;</span>,<span class=\"string\">&quot;valueB&quot;</span>));</span><br><span class=\"line\">t.start()</span><br></pre></td></tr></table></figure>\n\n<p>输出结果是：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(&#x27;valueA&#x27;, &#x27;valueB&#x27;)</span><br><span class=\"line\">CandyLab</span><br></pre></td></tr></table></figure>\n\n<p>下面我们将Timer和SubProcess混合使用：<br>Timer不在subprocess.py里，是在threading.py中，wait()在阻塞主进程时，会不会阻塞Timer.</p>\n<p>先看一下 os.system和os.popen的区别，os.system是直接执行相应的系统命令，把输出结果返回到标准输出上，返回值就是一个表示调用状态的整数，而os.popen调用是返回的是一个对象，对象持出管道中输出的内容，而不是直接输出到stdout上。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\">ret = os.popen(<span class=\"string\">&#x27;ls&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span> ret.read()</span><br><span class=\"line\"></span><br><span class=\"line\">ret = os.system(<span class=\"string\">&#x27;ls&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span> ret </span><br></pre></td></tr></table></figure>\n\n<p>看一下os.py中popen2的源码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">popen2</span>(<span class=\"params\">cmd, mode=<span class=\"string\">&quot;t&quot;</span>, bufsize=-<span class=\"number\">1</span></span>):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;Execute the shell command &#x27;cmd&#x27; in a sub-process.  On UNIX, &#x27;cmd&#x27;</span></span><br><span class=\"line\"><span class=\"string\">    may be a sequence, in which case arguments will be passed directly to</span></span><br><span class=\"line\"><span class=\"string\">    the program without shell intervention (as with os.spawnv()).  If &#x27;cmd&#x27;</span></span><br><span class=\"line\"><span class=\"string\">    is a string it will be passed to the shell (as with os.system()). If</span></span><br><span class=\"line\"><span class=\"string\">    &#x27;bufsize&#x27; is specified, it sets the buffer size for the I/O pipes.  The</span></span><br><span class=\"line\"><span class=\"string\">    file objects (child_stdin, child_stdout) are returned.&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">import</span> warnings</span><br><span class=\"line\">    msg = <span class=\"string\">&quot;os.popen2 is deprecated.  Use the subprocess module.&quot;</span></span><br><span class=\"line\">    warnings.warn(msg, DeprecationWarning, stacklevel=<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">import</span> subprocess</span><br><span class=\"line\">    PIPE = subprocess.PIPE</span><br><span class=\"line\">    p = subprocess.Popen(cmd, shell=<span class=\"built_in\">isinstance</span>(cmd, basestring),</span><br><span class=\"line\">                         bufsize=bufsize, stdin=PIPE, stdout=PIPE,</span><br><span class=\"line\">                         close_fds=<span class=\"literal\">True</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> p.stdin, p.stdout</span><br><span class=\"line\">__all__.append(<span class=\"string\">&quot;popen2&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>通过源码可以看出来， 其内部调用的还是subprocess.Popen，既然是这样，在某些<br>场合其实不用再去调用subprocess，直接调用os.popen也是可以的方案之一。</p>\n<p>接下来，我们就看subproces中的Popen, subprocess中，已经对Popen这个类有了很<br>多的注释，下面是原文：</p>\n<p>class Popen(args, bufsize=0, executable=None,<br>            stdin=None, stdout=None, stderr=None,<br>            preexec_fn=None, close_fds=False, shell=False,<br>            cwd=None, env=None, universal_newlines=False,<br>            startupinfo=None, creationflags=0):</p>\n<p>Arguments are:</p>\n<p>args should be a string, or a sequence of program arguments.  The<br>program to execute is normally the first item in the args sequence or<br>string, but can be explicitly set by using the executable argument.</p>\n<p>On UNIX, with shell=False (default): In this case, the Popen class<br>uses os.execvp() to execute the child program.  args should normally<br>be a sequence.  A string will be treated as a sequence with the string<br>as the only item (the program to execute).</p>\n<p>On UNIX, with shell=True: If args is a string, it specifies the<br>command string to execute through the shell.  If args is a sequence,<br>the first item specifies the command string, and any additional items<br>will be treated as additional shell arguments.</p>\n<p>从调用时序上来看，在声明Popen对象时，在__init__函数就调用了_execute_child<br>函数， 而_execute_child函数，靠的就是用 os.execvp() 来调用子程序。</p>\n<p>我们节选一下Popen的代码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Popen</span>(<span class=\"title class_ inherited__\">object</span>):</span><br><span class=\"line\">    _child_created = <span class=\"literal\">False</span>  <span class=\"comment\"># Set here since __del__ checks it</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, args, bufsize=<span class=\"number\">0</span>, executable=<span class=\"literal\">None</span>,</span></span><br><span class=\"line\"><span class=\"params\">                 stdin=<span class=\"literal\">None</span>, stdout=<span class=\"literal\">None</span>, stderr=<span class=\"literal\">None</span>,</span></span><br><span class=\"line\"><span class=\"params\">                 preexec_fn=<span class=\"literal\">None</span>, close_fds=<span class=\"literal\">False</span>, shell=<span class=\"literal\">False</span>,</span></span><br><span class=\"line\"><span class=\"params\">                 cwd=<span class=\"literal\">None</span>, env=<span class=\"literal\">None</span>, universal_newlines=<span class=\"literal\">False</span>,</span></span><br><span class=\"line\"><span class=\"params\">                 startupinfo=<span class=\"literal\">None</span>, creationflags=<span class=\"number\">0</span></span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;Create new Popen instance.&quot;&quot;&quot;</span></span><br><span class=\"line\">        _cleanup()</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> <span class=\"built_in\">isinstance</span>(bufsize, (<span class=\"built_in\">int</span>, long)):</span><br><span class=\"line\">            <span class=\"keyword\">raise</span> TypeError(<span class=\"string\">&quot;bufsize must be an integer&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> mswindows:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> preexec_fn <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">                <span class=\"keyword\">raise</span> ValueError(<span class=\"string\">&quot;preexec_fn is not supported on Windows &quot;</span></span><br><span class=\"line\">                                 <span class=\"string\">&quot;platforms&quot;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> close_fds <span class=\"keyword\">and</span> (stdin <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">None</span> <span class=\"keyword\">or</span> stdout <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">None</span> <span class=\"keyword\">or</span></span><br><span class=\"line\">                              stderr <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">None</span>):</span><br><span class=\"line\">                <span class=\"keyword\">raise</span> ValueError(<span class=\"string\">&quot;close_fds is not supported on Windows &quot;</span></span><br><span class=\"line\">                                 <span class=\"string\">&quot;platforms if you redirect stdin/stdout/stderr&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"comment\"># POSIX</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> startupinfo <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">                <span class=\"keyword\">raise</span> ValueError(<span class=\"string\">&quot;startupinfo is only supported on Windows &quot;</span></span><br><span class=\"line\">                                 <span class=\"string\">&quot;platforms&quot;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> creationflags != <span class=\"number\">0</span>:</span><br><span class=\"line\">                <span class=\"keyword\">raise</span> ValueError(<span class=\"string\">&quot;creationflags is only supported on Windows &quot;</span></span><br><span class=\"line\">                                 <span class=\"string\">&quot;platforms&quot;</span>)</span><br><span class=\"line\">        self.stdin = <span class=\"literal\">None</span></span><br><span class=\"line\">        self.stdout = <span class=\"literal\">None</span></span><br><span class=\"line\">        self.stderr = <span class=\"literal\">None</span></span><br><span class=\"line\">        self.pid = <span class=\"literal\">None</span></span><br><span class=\"line\">        self.returncode = <span class=\"literal\">None</span></span><br><span class=\"line\">        self.universal_newlines = universal_newlines</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        (p2cread, p2cwrite,</span><br><span class=\"line\">         c2pread, c2pwrite,</span><br><span class=\"line\">         errread, errwrite), to_close = self._get_handles(stdin, stdout, stderr)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            self._execute_child(args, executable, preexec_fn, close_fds,</span><br><span class=\"line\">                                cwd, env, universal_newlines,</span><br><span class=\"line\">                                startupinfo, creationflags, shell, to_close,</span><br><span class=\"line\">                                p2cread, p2cwrite,</span><br><span class=\"line\">                                c2pread, c2pwrite,</span><br><span class=\"line\">                                errread, errwrite)</span><br><span class=\"line\">        <span class=\"keyword\">except</span> Exception:</span><br><span class=\"line\">            <span class=\"comment\"># Preserve original exception in case os.close raises.</span></span><br><span class=\"line\">            exc_type, exc_value, exc_trace = sys.exc_info()</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">for</span> fd <span class=\"keyword\">in</span> to_close:</span><br><span class=\"line\">                <span class=\"keyword\">try</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> mswindows:</span><br><span class=\"line\">                        fd.Close()</span><br><span class=\"line\">                    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                        os.close(fd)</span><br><span class=\"line\">                <span class=\"keyword\">except</span> EnvironmentError:</span><br><span class=\"line\">                    <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">raise</span> exc_type, exc_value, exc_trace</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> mswindows:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> p2cwrite <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">                p2cwrite = msvcrt.open_osfhandle(p2cwrite.Detach(), <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> c2pread <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">                c2pread = msvcrt.open_osfhandle(c2pread.Detach(), <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> errread <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">                errread = msvcrt.open_osfhandle(errread.Detach(), <span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> p2cwrite <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">            self.stdin = os.fdopen(p2cwrite, <span class=\"string\">&#x27;wb&#x27;</span>, bufsize)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> c2pread <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> universal_newlines:</span><br><span class=\"line\">                self.stdout = os.fdopen(c2pread, <span class=\"string\">&#x27;rU&#x27;</span>, bufsize)</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                self.stdout = os.fdopen(c2pread, <span class=\"string\">&#x27;rb&#x27;</span>, bufsize)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> errread <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> universal_newlines:</span><br><span class=\"line\">                self.stderr = os.fdopen(errread, <span class=\"string\">&#x27;rU&#x27;</span>, bufsize)</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                self.stderr = os.fdopen(errread, <span class=\"string\">&#x27;rb&#x27;</span>, bufsize)</span><br></pre></td></tr></table></figure>\n\n<p>然后是在_execute_child函数中调用os.execvp() </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">_execute_child</span>(<span class=\"params\">self, args, executable, preexec_fn, close_fds,</span></span><br><span class=\"line\"><span class=\"params\">                   cwd, env, universal_newlines,</span></span><br><span class=\"line\"><span class=\"params\">                   startupinfo, creationflags, shell, to_close,</span></span><br><span class=\"line\"><span class=\"params\">                   p2cread, p2cwrite,</span></span><br><span class=\"line\"><span class=\"params\">                   c2pread, c2pwrite,</span></span><br><span class=\"line\"><span class=\"params\">                   errread, errwrite</span>):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;Execute program (POSIX version)&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">isinstance</span>(args, types.StringTypes):</span><br><span class=\"line\">        args = [args]</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        args = <span class=\"built_in\">list</span>(args)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> shell:</span><br><span class=\"line\">        args = [<span class=\"string\">&quot;/bin/sh&quot;</span>, <span class=\"string\">&quot;-c&quot;</span>] + args</span><br><span class=\"line\">        <span class=\"keyword\">if</span> executable:</span><br><span class=\"line\">            args[<span class=\"number\">0</span>] = executable</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> executable <span class=\"keyword\">is</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">        executable = args[<span class=\"number\">0</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">_close_in_parent</span>(<span class=\"params\">fd</span>):</span><br><span class=\"line\">        os.close(fd)</span><br><span class=\"line\">        to_close.remove(fd)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># For transferring possible exec failure from child to parent</span></span><br><span class=\"line\">    <span class=\"comment\"># The first char specifies the exception type: 0 means</span></span><br><span class=\"line\">    <span class=\"comment\"># OSError, 1 means some other error.</span></span><br><span class=\"line\">    errpipe_read, errpipe_write = self.pipe_cloexec()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            gc_was_enabled = gc.isenabled()</span><br><span class=\"line\">            <span class=\"comment\"># Disable gc to avoid bug where gc -&gt; file_dealloc -&gt;</span></span><br><span class=\"line\">            <span class=\"comment\"># write to stderr -&gt; hang.  http://bugs.python.org/issue1336</span></span><br><span class=\"line\">            gc.disable()</span><br><span class=\"line\">            <span class=\"keyword\">try</span>:</span><br><span class=\"line\">                self.pid = os.fork()</span><br><span class=\"line\">            <span class=\"keyword\">except</span>:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> gc_was_enabled:</span><br><span class=\"line\">                    gc.enable()</span><br><span class=\"line\">                <span class=\"keyword\">raise</span></span><br><span class=\"line\">            self._child_created = <span class=\"literal\">True</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> self.pid == <span class=\"number\">0</span>:</span><br><span class=\"line\">                <span class=\"comment\"># Child</span></span><br><span class=\"line\">                <span class=\"keyword\">try</span>:</span><br><span class=\"line\">                    <span class=\"comment\"># Close parent&#x27;s pipe ends</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> p2cwrite <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">                        os.close(p2cwrite)</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> c2pread <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">                        os.close(c2pread)</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> errread <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">                        os.close(errread)</span><br><span class=\"line\">                    os.close(errpipe_read)</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"comment\"># When duping fds, if there arises a situation</span></span><br><span class=\"line\">                    <span class=\"comment\"># where one of the fds is either 0, 1 or 2, it</span></span><br><span class=\"line\">                    <span class=\"comment\"># is possible that it is overwritten (#12607).</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> c2pwrite == <span class=\"number\">0</span>:</span><br><span class=\"line\">                        c2pwrite = os.dup(c2pwrite)</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> errwrite == <span class=\"number\">0</span> <span class=\"keyword\">or</span> errwrite == <span class=\"number\">1</span>:</span><br><span class=\"line\">                        errwrite = os.dup(errwrite)</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"comment\"># Dup fds for child</span></span><br><span class=\"line\">                    <span class=\"keyword\">def</span> <span class=\"title function_\">_dup2</span>(<span class=\"params\">a, b</span>):</span><br><span class=\"line\">                        <span class=\"comment\"># dup2() removes the CLOEXEC flag but</span></span><br><span class=\"line\">                        <span class=\"comment\"># we must do it ourselves if dup2()</span></span><br><span class=\"line\">                        <span class=\"comment\"># would be a no-op (issue #10806).</span></span><br><span class=\"line\">                        <span class=\"keyword\">if</span> a == b:</span><br><span class=\"line\">                            self._set_cloexec_flag(a, <span class=\"literal\">False</span>)</span><br><span class=\"line\">                        <span class=\"keyword\">elif</span> a <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">                            os.dup2(a, b)</span><br><span class=\"line\">                    _dup2(p2cread, <span class=\"number\">0</span>)</span><br><span class=\"line\">                    _dup2(c2pwrite, <span class=\"number\">1</span>)</span><br><span class=\"line\">                    _dup2(errwrite, <span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"comment\"># Close pipe fds.  Make sure we don&#x27;t close the</span></span><br><span class=\"line\">                    <span class=\"comment\"># same fd more than once, or standard fds.</span></span><br><span class=\"line\">                    closed = &#123; <span class=\"literal\">None</span> &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">for</span> fd <span class=\"keyword\">in</span> [p2cread, c2pwrite, errwrite]:</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> fd <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> closed <span class=\"keyword\">and</span> fd &gt; <span class=\"number\">2</span>:</span><br><span class=\"line\">                            os.close(fd)</span><br><span class=\"line\">                            closed.add(fd)</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> cwd <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">                        os.chdir(cwd)</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> preexec_fn:</span><br><span class=\"line\">                        preexec_fn()</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"comment\"># Close all other fds, if asked for - after</span></span><br><span class=\"line\">                    <span class=\"comment\"># preexec_fn(), which may open FDs.</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> close_fds:</span><br><span class=\"line\">                        self._close_fds(but=errpipe_write)</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> env <span class=\"keyword\">is</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">                        os.execvp(executable, args)</span><br><span class=\"line\">                    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                        os.execvpe(executable, args, env)</span><br><span class=\"line\">                <span class=\"keyword\">except</span>:</span><br><span class=\"line\">                    exc_type, exc_value, tb = sys.exc_info()</span><br><span class=\"line\">                    <span class=\"comment\"># Save the traceback and attach it to the exception object</span></span><br><span class=\"line\">                    exc_lines = traceback.format_exception(exc_type,</span><br><span class=\"line\">                                                           exc_value,</span><br><span class=\"line\">                                                           tb)</span><br><span class=\"line\">                    exc_value.child_traceback = <span class=\"string\">&#x27;&#x27;</span>.join(exc_lines)</span><br><span class=\"line\">                    os.write(errpipe_write, pickle.dumps(exc_value))</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\"># This exitcode won&#x27;t be reported to applications, so it</span></span><br><span class=\"line\">                <span class=\"comment\"># really doesn&#x27;t matter what we return.</span></span><br><span class=\"line\">                os._exit(<span class=\"number\">255</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\"># Parent</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> gc_was_enabled:</span><br><span class=\"line\">                gc.enable()</span><br><span class=\"line\">        <span class=\"keyword\">finally</span>:</span><br><span class=\"line\">            <span class=\"comment\"># be sure the FD is closed no matter what</span></span><br><span class=\"line\">            os.close(errpipe_write)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># Wait for exec to fail or succeed; possibly raising exception</span></span><br><span class=\"line\">        <span class=\"comment\"># Exception limited to 1M</span></span><br><span class=\"line\">        data = _eintr_retry_call(os.read, errpipe_read, <span class=\"number\">1048576</span>)</span><br><span class=\"line\">    <span class=\"keyword\">finally</span>:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> p2cread <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">None</span> <span class=\"keyword\">and</span> p2cwrite <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">            _close_in_parent(p2cread)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> c2pwrite <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">None</span> <span class=\"keyword\">and</span> c2pread <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">            _close_in_parent(c2pwrite)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> errwrite <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">None</span> <span class=\"keyword\">and</span> errread <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">            _close_in_parent(errwrite)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># be sure the FD is closed no matter what</span></span><br><span class=\"line\">        os.close(errpipe_read)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> data != <span class=\"string\">&quot;&quot;</span>:</span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            _eintr_retry_call(os.waitpid, self.pid, <span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"keyword\">except</span> OSError <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> e.errno != errno.ECHILD:</span><br><span class=\"line\">                <span class=\"keyword\">raise</span></span><br><span class=\"line\">        child_exception = pickle.loads(data)</span><br><span class=\"line\">        <span class=\"keyword\">raise</span> child_exception</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>最后我们模拟工程中的一段代码，测度wait()子程序，把主程序阻塞，会不会影响主进程的timer的计时：</p>\n<p>先一个subprocess.Popen</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> shlex</span><br><span class=\"line\">cmd_str=<span class=\"string\">&#x27;ps -aux&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">#p=subprocess.Popen(args)</span></span><br><span class=\"line\">p=subprocess.Popen(args,shell=<span class=\"literal\">True</span>,stdout=subprocess.PIPE)</span><br><span class=\"line\">out=p.stdout.readlines()</span><br><span class=\"line\"><span class=\"built_in\">print</span> out</span><br></pre></td></tr></table></figure>\n\n<p>在Popen初始形加，加入stdout的定义，所有命令行输出的文本会被定向到PIPE管道中。<br>通过下面实际的例子，观察程序的结果：<br>一种是timer是否能提示结束子程序，另一种是communicate是否能阻塞timer。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> shlex</span><br><span class=\"line\"><span class=\"keyword\">from</span> threading <span class=\"keyword\">import</span> Timer</span><br><span class=\"line\"><span class=\"keyword\">import</span> subprocess</span><br><span class=\"line\">cmd_str=<span class=\"string\">&#x27;ps -aux&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">CandyLab</span>(<span class=\"params\">p</span>):</span><br><span class=\"line\">        <span class=\"built_in\">print</span> <span class=\"string\">&quot;CandyLab&quot;</span></span><br><span class=\"line\">        p.terminate()</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">Orchina</span>():</span><br><span class=\"line\">        <span class=\"built_in\">print</span> <span class=\"string\">&quot;Orchina&quot;</span></span><br><span class=\"line\">        t = Timer( <span class=\"number\">1</span>, Orchina);</span><br><span class=\"line\">        t.start()</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\"></span><br><span class=\"line\">p=subprocess.Popen(<span class=\"string\">&quot;python popentst.py&quot;</span>,shell=<span class=\"literal\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">t = Timer( <span class=\"number\">3</span>, CandyLab, args=(p,));</span><br><span class=\"line\">t.start()</span><br><span class=\"line\">p.communicate()</span><br><span class=\"line\">t.cancel</span><br></pre></td></tr></table></figure>\n\n<p>popentst.py</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\">time.sleep(<span class=\"number\">5</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span> <span class=\"string\">&quot;sleep&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>test.py</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> shlex</span><br><span class=\"line\"><span class=\"keyword\">from</span> threading <span class=\"keyword\">import</span> Timer</span><br><span class=\"line\"><span class=\"keyword\">import</span> subprocess</span><br><span class=\"line\">cmd_str=<span class=\"string\">&#x27;ps -aux&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">CandyLab</span>(<span class=\"params\">p</span>):</span><br><span class=\"line\">        <span class=\"built_in\">print</span> <span class=\"string\">&quot;CandyLab&quot;</span></span><br><span class=\"line\">        <span class=\"comment\">#p.terminate()</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">Orchina</span>():</span><br><span class=\"line\">        <span class=\"built_in\">print</span> <span class=\"string\">&quot;Orchina&quot;</span></span><br><span class=\"line\">        t = Timer( <span class=\"number\">1</span>, Orchina);</span><br><span class=\"line\">        t.start()</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\"></span><br><span class=\"line\">p=subprocess.Popen(<span class=\"string\">&quot;python popentst.py&quot;</span>,shell=<span class=\"literal\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">t = Timer( <span class=\"number\">1</span>, CandyLab, args=(p,));</span><br><span class=\"line\">t.start()</span><br><span class=\"line\">p.communicate()</span><br><span class=\"line\">t.cancel</span><br></pre></td></tr></table></figure>\n\n<p>Timer的时间比Sleep设置的时间短，如果阻塞timer，子程序的print应该先打印出来，结果没有。<br>无论是commicate()还是wait()都是不能阻塞timer的，想用timer提前结束一个子程序，也要经过处理。</p>\n<p>Timer直接关联的类是Event,然后是Conditon，之后是Lock，太长不分析，本篇的最初的测试目地已经达到了。</p>\n","text":"作者：糖果 测试的内容是将Timer的使用和Popen的使用混合在一起，测试当wait()和communicate()被调用时，是否会阻塞主进程的Timer。 找到Timer在Python2.7里的源码位置： 12345678910111213141516171819202122...","link":"","photos":[],"count_time":{"symbolsCount":"20k","symbolsTime":"18 mins."},"categories":[{"name":"topic","slug":"topic","count":308,"path":"api/categories/topic.json"}],"tags":[],"toc":"","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"关于Linux环境变量命令ENV","uid":"074f77a9b17de10d6ce47d49abfb9adf","slug":"old_topic/2016-09-17-267","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T06:15:59.745Z","comments":true,"path":"api/articles/old_topic/2016-09-17-267.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":null,"text":"这个测试有几种入口，export，或是用户请求url，我们先从本地做测试，然后搭建一个bshell的CGI环境。 12export testcase=ls\\;lseval ret=$testcase 我们看一下C实现 123456789#include &lt;stdio.h&g...","link":"","photos":[],"count_time":{"symbolsCount":325,"symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":308,"path":"api/categories/topic.json"}],"tags":[],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"ORC索引页显示的Lapis实现","uid":"d2259f558f383bf9636ac7b5a9eaea5a","slug":"old_topic/2016-09-17-269","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T06:15:59.745Z","comments":true,"path":"api/articles/old_topic/2016-09-17-269.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":[],"text":"作者：糖果 ORC是是用LOR框架完成的，这次尝试实现用Lapis来实现，ORC索引页面的显示， 国为ORC是后端前端分开的， 实际上后端只要根据用输入返回按接口定义的JSON数据就好。 这个实验会涉及到几个最学用的点： 1.简单的用SQL对业务表进行left join，这个和语...","link":"","photos":[],"count_time":{"symbolsCount":"9.3k","symbolsTime":"8 mins."},"categories":[{"name":"topic","slug":"topic","count":308,"path":"api/categories/topic.json"}],"tags":[],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}