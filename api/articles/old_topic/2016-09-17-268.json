{"title":"Threading的Timer是否可以被wait和communicate阻塞","uid":"1f0e7f34ab02983eb011a2f068cfda64","slug":"old_topic/2016-09-17-268","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T07:45:09.193Z","comments":true,"path":"api/articles/old_topic/2016-09-17-268.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<p>作者：糖果</p>\n<p>测试的内容是将Timer的使用和Popen的使用混合在一起，测试当wait()和communicate()被调用时，是否会阻塞主进程的Timer。</p>\n<p>找到Timer在Python2.7里的源码位置：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># The timer class was contributed by Itamar Shtull-Trauring</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">Timer</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"Factory function to create a Timer object.\n\n    Timers call a function after a specified number of seconds:\n\n        t = Timer(30.0, f, args=[], kwargs=&#123;&#125;)\n        t.start()\n        t.cancel()     # stop the timer's action if it's still waiting\n\n    \"\"\"</span>\n    <span class=\"token keyword\">return</span> _Timer<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">_Timer</span><span class=\"token punctuation\">(</span>Thread<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"Call a function after a specified number of seconds:\n\n            t = Timer(30.0, f, args=[], kwargs=&#123;&#125;)\n            t.start()\n            t.cancel()     # stop the timer's action if it's still waiting\n\n    \"\"\"</span>\n\n    <span class=\"token keyword\">return</span> _Timer<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">_Timer</span><span class=\"token punctuation\">(</span>Thread<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"Call a function after a specified number of seconds:\n\n            t = Timer(30.0, f, args=[], kwargs=&#123;&#125;)\n            t.start()\n            t.cancel()     # stop the timer's action if it's still waiting\n\n    \"\"\"</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> interval<span class=\"token punctuation\">,</span> function<span class=\"token punctuation\">,</span> args<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> kwargs<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        Thread<span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>interval <span class=\"token operator\">=</span> interval\n        self<span class=\"token punctuation\">.</span>function <span class=\"token operator\">=</span> function\n        self<span class=\"token punctuation\">.</span>args <span class=\"token operator\">=</span> args\n        self<span class=\"token punctuation\">.</span>kwargs <span class=\"token operator\">=</span> kwargs\n        self<span class=\"token punctuation\">.</span>finished <span class=\"token operator\">=</span> Event<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">cancel</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"Stop the timer if it hasn't finished yet\"\"\"</span>\n        self<span class=\"token punctuation\">.</span>finished<span class=\"token punctuation\">.</span><span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>finished<span class=\"token punctuation\">.</span>wait<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>interval<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> self<span class=\"token punctuation\">.</span>finished<span class=\"token punctuation\">.</span>is_set<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>function<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>self<span class=\"token punctuation\">.</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>self<span class=\"token punctuation\">.</span>kwargs<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>finished<span class=\"token punctuation\">.</span><span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>Timer重要作用还是“倒计时”执行某个函数，最多支持4个入参。</p>\n<p>看一下communicate的源码，多少能看出他和wait()的关系。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">\n<span class=\"token keyword\">def</span> <span class=\"token function\">communicate</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token builtin\">input</span><span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"Interact with process: Send data to stdin.  Read data from\n    stdout and stderr, until end-of-file is reached.  Wait for\n    process to terminate.  The optional input argument should be a\n    string to be sent to the child process, or None, if no data\n    should be sent to the child.\n\n    communicate() returns a tuple (stdout, stderr).\"\"\"</span>\n\n    <span class=\"token comment\"># Optimization: If we are only using one pipe, or no pipe at</span>\n    <span class=\"token comment\"># all, using select() or threads is unnecessary.</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span>self<span class=\"token punctuation\">.</span>stdin<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>stdout<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>stderr<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">(</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span>\n        stdout <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n        stderr <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n        <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>stdin<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n                    self<span class=\"token punctuation\">.</span>stdin<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">except</span> IOError <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span>\n                    <span class=\"token keyword\">if</span> e<span class=\"token punctuation\">.</span>errno <span class=\"token operator\">!=</span> errno<span class=\"token punctuation\">.</span>EPIPE <span class=\"token keyword\">and</span> e<span class=\"token punctuation\">.</span>errno <span class=\"token operator\">!=</span> errno<span class=\"token punctuation\">.</span>EINVAL<span class=\"token punctuation\">:</span>\n                        <span class=\"token keyword\">raise</span>\n            self<span class=\"token punctuation\">.</span>stdin<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">elif</span> self<span class=\"token punctuation\">.</span>stdout<span class=\"token punctuation\">:</span>\n            stdout <span class=\"token operator\">=</span> _eintr_retry_call<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>stdout<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">)</span>\n            self<span class=\"token punctuation\">.</span>stdout<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">elif</span> self<span class=\"token punctuation\">.</span>stderr<span class=\"token punctuation\">:</span>\n            stderr <span class=\"token operator\">=</span> _eintr_retry_call<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>stderr<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">)</span>\n            self<span class=\"token punctuation\">.</span>stderr<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>wait<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>stdout<span class=\"token punctuation\">,</span> stderr<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>_communicate<span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">_communicate</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    stdout <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span> <span class=\"token comment\"># Return</span>\n    stderr <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span> <span class=\"token comment\"># Return</span>\n\n    <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>stdout<span class=\"token punctuation\">:</span>\n        stdout <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n        stdout_thread <span class=\"token operator\">=</span> threading<span class=\"token punctuation\">.</span>Thread<span class=\"token punctuation\">(</span>target<span class=\"token operator\">=</span>self<span class=\"token punctuation\">.</span>_readerthread<span class=\"token punctuation\">,</span>\n                                         args<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>stdout<span class=\"token punctuation\">,</span> stdout<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        stdout_thread<span class=\"token punctuation\">.</span>setDaemon<span class=\"token punctuation\">(</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n        stdout_thread<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>stderr<span class=\"token punctuation\">:</span>\n        stderr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n        stderr_thread <span class=\"token operator\">=</span> threading<span class=\"token punctuation\">.</span>Thread<span class=\"token punctuation\">(</span>target<span class=\"token operator\">=</span>self<span class=\"token punctuation\">.</span>_readerthread<span class=\"token punctuation\">,</span>\n                                         args<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>stderr<span class=\"token punctuation\">,</span> stderr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        stderr_thread<span class=\"token punctuation\">.</span>setDaemon<span class=\"token punctuation\">(</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n        stderr_thread<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>stdin<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> <span class=\"token builtin\">input</span> <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n                self<span class=\"token punctuation\">.</span>stdin<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">except</span> IOError <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">if</span> e<span class=\"token punctuation\">.</span>errno <span class=\"token operator\">!=</span> errno<span class=\"token punctuation\">.</span>EPIPE<span class=\"token punctuation\">:</span>\n                    <span class=\"token keyword\">raise</span>\n        self<span class=\"token punctuation\">.</span>stdin<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>stdout<span class=\"token punctuation\">:</span>\n        stdout_thread<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>stderr<span class=\"token punctuation\">:</span>\n        stderr_thread<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># All data exchanged.  Translate lists into strings.</span>\n    <span class=\"token keyword\">if</span> stdout <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n        stdout <span class=\"token operator\">=</span> stdout<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">if</span> stderr <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n        stderr <span class=\"token operator\">=</span> stderr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n\n    <span class=\"token comment\"># Translate newlines, if requested.  We cannot let the file</span>\n    <span class=\"token comment\"># object do the translation: It is based on stdio, which is</span>\n    <span class=\"token comment\"># impossible to combine with select (unless forcing no</span>\n    <span class=\"token comment\"># buffering).</span>\n    <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>universal_newlines <span class=\"token keyword\">and</span> <span class=\"token builtin\">hasattr</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">file</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'newlines'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> stdout<span class=\"token punctuation\">:</span>\n            stdout <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>_translate_newlines<span class=\"token punctuation\">(</span>stdout<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> stderr<span class=\"token punctuation\">:</span>\n            stderr <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>_translate_newlines<span class=\"token punctuation\">(</span>stderr<span class=\"token punctuation\">)</span>\n\n    self<span class=\"token punctuation\">.</span>wait<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>stdout<span class=\"token punctuation\">,</span> stderr<span class=\"token punctuation\">)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>区别就是前面对stdout和stdout处理，最后调用了wait()。</p>\n<p>下面这个程序，是一个用Timer循环调用自己的程序，并且调用函数时，用args函数给被调用函数传参。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">CandyLab</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span> <span class=\"token string\">\"CandyLab\"</span>\n        <span class=\"token keyword\">return</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">Orchina</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span> <span class=\"token string\">\"Orchina\"</span>\n        t <span class=\"token operator\">=</span> Timer<span class=\"token punctuation\">(</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> Orchina<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        t<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span>\n\nt <span class=\"token operator\">=</span> Timer<span class=\"token punctuation\">(</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> CandyLab<span class=\"token punctuation\">,</span> args<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"valueA\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"valueB\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nt<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>Timer在定义调用函数后，当执行t.start()时， timer进入倒时间状态，这个时间是在形参中指定的，下面这段代码中Orchina这个函数是在starty调用后的10秒时间后，被调用，而t.start()调用后，不会阻塞计数，还会继续调用后面的函数。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">Orchina</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span> <span class=\"token string\">\"Orchina\"</span>\n        <span class=\"token keyword\">return</span>\n\nt <span class=\"token operator\">=</span> Timer<span class=\"token punctuation\">(</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> Orchina<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nt<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>只有当主要的运行t.cancel函数时，计时才会被取消，定时期停止，CandyLab函数也不会被执行。</p>\n<p>进一步的简单的实例代码：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> time\n<span class=\"token keyword\">from</span> threading <span class=\"token keyword\">import</span> Thread<span class=\"token punctuation\">,</span> Timer\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">CandyLab</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span> <span class=\"token string\">\"CandyLab\"</span>\n        <span class=\"token keyword\">return</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">Orchina</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span> <span class=\"token string\">\"Orchina\"</span>\n        <span class=\"token keyword\">return</span>\n\nt <span class=\"token operator\">=</span> Timer<span class=\"token punctuation\">(</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> CandyLab<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nt<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nOrchina<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\ntime<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\nt<span class=\"token punctuation\">.</span>cancel<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>运行结果：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">Orchina<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>不会立刻执行CanyLab(),正常执行CandyLab()这个函数需要10秒的时间，从t.start()执行时开始记时，程序不柱塞等10秒执行CanyLab()，是按顺序立刻的执行t.start()后面的语句，Orchina()显示输出&quot;Orchina&quot;, 等3秒结束10秒记时，t.cancel()执行后，CanyLab（）这个函数，之后就不会被执行了。</p>\n<p>如果没有sleep3秒后的t.cancel操作，在10秒钟记时完毕时，CandyLab()这个函数会被执行。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> time\n<span class=\"token keyword\">from</span> threading <span class=\"token keyword\">import</span> Thread<span class=\"token punctuation\">,</span> Timer\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">CandyLab</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span> <span class=\"token string\">\"CandyLab\"</span>\n        <span class=\"token keyword\">return</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">Orchina</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span> <span class=\"token string\">\"Orchina\"</span>\n        <span class=\"token keyword\">return</span>\n\nt <span class=\"token operator\">=</span> Timer<span class=\"token punctuation\">(</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> CandyLab<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nt<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nOrchina<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>结果：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">Orchina\nCandyLab<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>还有一种情况就是循环的调用自己，当满足某个条件时，再进行t.cancel的取消动作。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">\n<span class=\"token keyword\">def</span> <span class=\"token function\">CandyLab</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span> <span class=\"token string\">\"CandyLab\"</span>\n        t <span class=\"token operator\">=</span> Timer<span class=\"token punctuation\">(</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> CandyLab<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        t<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span>\n\nCandyLab<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>结果：<br />\n就是循环输出</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">CandyLab\nCandyLab\nCandyLab\n...<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>下面是Timer调用函数进传参，用到了args函数：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">CandyLab</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span> <span class=\"token string\">\"CandyLab\"</span>\n        <span class=\"token keyword\">return</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">Orchina</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span> <span class=\"token string\">\"Orchina\"</span>\n        t <span class=\"token operator\">=</span> Timer<span class=\"token punctuation\">(</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> Orchina<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        t<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span>\n\nt <span class=\"token operator\">=</span> Timer<span class=\"token punctuation\">(</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> CandyLab<span class=\"token punctuation\">,</span> args<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"valueA\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"valueB\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nt<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>输出结果是：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">(&#39;valueA&#39;, &#39;valueB&#39;)\nCandyLab<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>下面我们将Timer和SubProcess混合使用：<br />\nTimer不在subprocess.py里，是在threading.py中，wait()在阻塞主进程时，会不会阻塞Timer.</p>\n<p>先看一下 os.system和os.popen的区别，os.system是直接执行相应的系统命令，把输出结果返回到标准输出上，返回值就是一个表示调用状态的整数，而os.popen调用是返回的是一个对象，对象持出管道中输出的内容，而不是直接输出到stdout上。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> os\nret <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>popen<span class=\"token punctuation\">(</span><span class=\"token string\">'ls'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span> ret<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nret <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>system<span class=\"token punctuation\">(</span><span class=\"token string\">'ls'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span> ret <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>看一下os.py中popen2的源码：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">popen2</span><span class=\"token punctuation\">(</span>cmd<span class=\"token punctuation\">,</span> mode<span class=\"token operator\">=</span><span class=\"token string\">\"t\"</span><span class=\"token punctuation\">,</span> bufsize<span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"Execute the shell command 'cmd' in a sub-process.  On UNIX, 'cmd'\n    may be a sequence, in which case arguments will be passed directly to\n    the program without shell intervention (as with os.spawnv()).  If 'cmd'\n    is a string it will be passed to the shell (as with os.system()). If\n    'bufsize' is specified, it sets the buffer size for the I/O pipes.  The\n    file objects (child_stdin, child_stdout) are returned.\"\"\"</span>\n    <span class=\"token keyword\">import</span> warnings\n    msg <span class=\"token operator\">=</span> <span class=\"token string\">\"os.popen2 is deprecated.  Use the subprocess module.\"</span>\n    warnings<span class=\"token punctuation\">.</span>warn<span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">,</span> DeprecationWarning<span class=\"token punctuation\">,</span> stacklevel<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">import</span> subprocess\n    PIPE <span class=\"token operator\">=</span> subprocess<span class=\"token punctuation\">.</span>PIPE\n    p <span class=\"token operator\">=</span> subprocess<span class=\"token punctuation\">.</span>Popen<span class=\"token punctuation\">(</span>cmd<span class=\"token punctuation\">,</span> shell<span class=\"token operator\">=</span><span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>cmd<span class=\"token punctuation\">,</span> <span class=\"token builtin\">basestring</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                         bufsize<span class=\"token operator\">=</span>bufsize<span class=\"token punctuation\">,</span> stdin<span class=\"token operator\">=</span>PIPE<span class=\"token punctuation\">,</span> stdout<span class=\"token operator\">=</span>PIPE<span class=\"token punctuation\">,</span>\n                         close_fds<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> p<span class=\"token punctuation\">.</span>stdin<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">.</span>stdout\n__all__<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token string\">\"popen2\"</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>通过源码可以看出来， 其内部调用的还是subprocess.Popen，既然是这样，在某些<br />\n场合其实不用再去调用subprocess，直接调用os.popen也是可以的方案之一。</p>\n<p>接下来，我们就看subproces中的Popen, subprocess中，已经对Popen这个类有了很<br />\n多的注释，下面是原文：</p>\n<p>class Popen(args, bufsize=0, executable=None,<br />\nstdin=None, stdout=None, stderr=None,<br />\npreexec_fn=None, close_fds=False, shell=False,<br />\ncwd=None, env=None, universal_newlines=False,<br />\nstartupinfo=None, creationflags=0):</p>\n<p>Arguments are:</p>\n<p>args should be a string, or a sequence of program arguments.  The<br />\nprogram to execute is normally the first item in the args sequence or<br />\nstring, but can be explicitly set by using the executable argument.</p>\n<p>On UNIX, with shell=False (default): In this case, the Popen class<br />\nuses os.execvp() to execute the child program.  args should normally<br />\nbe a sequence.  A string will be treated as a sequence with the string<br />\nas the only item (the program to execute).</p>\n<p>On UNIX, with shell=True: If args is a string, it specifies the<br />\ncommand string to execute through the shell.  If args is a sequence,<br />\nthe first item specifies the command string, and any additional items<br />\nwill be treated as additional shell arguments.</p>\n<p>从调用时序上来看，在声明Popen对象时，在__init__函数就调用了_execute_child<br />\n函数， 而_execute_child函数，靠的就是用 os.execvp() 来调用子程序。</p>\n<p>我们节选一下Popen的代码：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Popen</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    _child_created <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span>  <span class=\"token comment\"># Set here since __del__ checks it</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">,</span> bufsize<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> executable<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span>\n                 stdin<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> stdout<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> stderr<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span>\n                 preexec_fn<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> close_fds<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> shell<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span>\n                 cwd<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> env<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> universal_newlines<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span>\n                 startupinfo<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> creationflags<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"Create new Popen instance.\"\"\"</span>\n        _cleanup<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>bufsize<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">long</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">raise</span> TypeError<span class=\"token punctuation\">(</span><span class=\"token string\">\"bufsize must be an integer\"</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">if</span> mswindows<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> preexec_fn <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">raise</span> ValueError<span class=\"token punctuation\">(</span><span class=\"token string\">\"preexec_fn is not supported on Windows \"</span>\n                                 <span class=\"token string\">\"platforms\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span> close_fds <span class=\"token keyword\">and</span> <span class=\"token punctuation\">(</span>stdin <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token boolean\">None</span> <span class=\"token keyword\">or</span> stdout <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token boolean\">None</span> <span class=\"token keyword\">or</span>\n                              stderr <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">raise</span> ValueError<span class=\"token punctuation\">(</span><span class=\"token string\">\"close_fds is not supported on Windows \"</span>\n                                 <span class=\"token string\">\"platforms if you redirect stdin/stdout/stderr\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            <span class=\"token comment\"># POSIX</span>\n            <span class=\"token keyword\">if</span> startupinfo <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">raise</span> ValueError<span class=\"token punctuation\">(</span><span class=\"token string\">\"startupinfo is only supported on Windows \"</span>\n                                 <span class=\"token string\">\"platforms\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span> creationflags <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">raise</span> ValueError<span class=\"token punctuation\">(</span><span class=\"token string\">\"creationflags is only supported on Windows \"</span>\n                                 <span class=\"token string\">\"platforms\"</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>stdin <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n        self<span class=\"token punctuation\">.</span>stdout <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n        self<span class=\"token punctuation\">.</span>stderr <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n        self<span class=\"token punctuation\">.</span>pid <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n        self<span class=\"token punctuation\">.</span>returncode <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n        self<span class=\"token punctuation\">.</span>universal_newlines <span class=\"token operator\">=</span> universal_newlines\n\n\n        <span class=\"token punctuation\">(</span>p2cread<span class=\"token punctuation\">,</span> p2cwrite<span class=\"token punctuation\">,</span>\n         c2pread<span class=\"token punctuation\">,</span> c2pwrite<span class=\"token punctuation\">,</span>\n         errread<span class=\"token punctuation\">,</span> errwrite<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> to_close <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>_get_handles<span class=\"token punctuation\">(</span>stdin<span class=\"token punctuation\">,</span> stdout<span class=\"token punctuation\">,</span> stderr<span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>_execute_child<span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">,</span> executable<span class=\"token punctuation\">,</span> preexec_fn<span class=\"token punctuation\">,</span> close_fds<span class=\"token punctuation\">,</span>\n                                cwd<span class=\"token punctuation\">,</span> env<span class=\"token punctuation\">,</span> universal_newlines<span class=\"token punctuation\">,</span>\n                                startupinfo<span class=\"token punctuation\">,</span> creationflags<span class=\"token punctuation\">,</span> shell<span class=\"token punctuation\">,</span> to_close<span class=\"token punctuation\">,</span>\n                                p2cread<span class=\"token punctuation\">,</span> p2cwrite<span class=\"token punctuation\">,</span>\n                                c2pread<span class=\"token punctuation\">,</span> c2pwrite<span class=\"token punctuation\">,</span>\n                                errread<span class=\"token punctuation\">,</span> errwrite<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">except</span> Exception<span class=\"token punctuation\">:</span>\n            <span class=\"token comment\"># Preserve original exception in case os.close raises.</span>\n            exc_type<span class=\"token punctuation\">,</span> exc_value<span class=\"token punctuation\">,</span> exc_trace <span class=\"token operator\">=</span> sys<span class=\"token punctuation\">.</span>exc_info<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n            <span class=\"token keyword\">for</span> fd <span class=\"token keyword\">in</span> to_close<span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n                    <span class=\"token keyword\">if</span> mswindows<span class=\"token punctuation\">:</span>\n                        fd<span class=\"token punctuation\">.</span>Close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                        os<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">except</span> EnvironmentError<span class=\"token punctuation\">:</span>\n                    <span class=\"token keyword\">pass</span>\n\n            <span class=\"token keyword\">raise</span> exc_type<span class=\"token punctuation\">,</span> exc_value<span class=\"token punctuation\">,</span> exc_trace\n\n        <span class=\"token keyword\">if</span> mswindows<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> p2cwrite <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n                p2cwrite <span class=\"token operator\">=</span> msvcrt<span class=\"token punctuation\">.</span>open_osfhandle<span class=\"token punctuation\">(</span>p2cwrite<span class=\"token punctuation\">.</span>Detach<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span> c2pread <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n                c2pread <span class=\"token operator\">=</span> msvcrt<span class=\"token punctuation\">.</span>open_osfhandle<span class=\"token punctuation\">(</span>c2pread<span class=\"token punctuation\">.</span>Detach<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span> errread <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n                errread <span class=\"token operator\">=</span> msvcrt<span class=\"token punctuation\">.</span>open_osfhandle<span class=\"token punctuation\">(</span>errread<span class=\"token punctuation\">.</span>Detach<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">if</span> p2cwrite <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>stdin <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>fdopen<span class=\"token punctuation\">(</span>p2cwrite<span class=\"token punctuation\">,</span> <span class=\"token string\">'wb'</span><span class=\"token punctuation\">,</span> bufsize<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> c2pread <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> universal_newlines<span class=\"token punctuation\">:</span>\n                self<span class=\"token punctuation\">.</span>stdout <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>fdopen<span class=\"token punctuation\">(</span>c2pread<span class=\"token punctuation\">,</span> <span class=\"token string\">'rU'</span><span class=\"token punctuation\">,</span> bufsize<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                self<span class=\"token punctuation\">.</span>stdout <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>fdopen<span class=\"token punctuation\">(</span>c2pread<span class=\"token punctuation\">,</span> <span class=\"token string\">'rb'</span><span class=\"token punctuation\">,</span> bufsize<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> errread <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> universal_newlines<span class=\"token punctuation\">:</span>\n                self<span class=\"token punctuation\">.</span>stderr <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>fdopen<span class=\"token punctuation\">(</span>errread<span class=\"token punctuation\">,</span> <span class=\"token string\">'rU'</span><span class=\"token punctuation\">,</span> bufsize<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                self<span class=\"token punctuation\">.</span>stderr <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>fdopen<span class=\"token punctuation\">(</span>errread<span class=\"token punctuation\">,</span> <span class=\"token string\">'rb'</span><span class=\"token punctuation\">,</span> bufsize<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>然后是在_execute_child函数中调用os.execvp()</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">_execute_child</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">,</span> executable<span class=\"token punctuation\">,</span> preexec_fn<span class=\"token punctuation\">,</span> close_fds<span class=\"token punctuation\">,</span>\n                   cwd<span class=\"token punctuation\">,</span> env<span class=\"token punctuation\">,</span> universal_newlines<span class=\"token punctuation\">,</span>\n                   startupinfo<span class=\"token punctuation\">,</span> creationflags<span class=\"token punctuation\">,</span> shell<span class=\"token punctuation\">,</span> to_close<span class=\"token punctuation\">,</span>\n                   p2cread<span class=\"token punctuation\">,</span> p2cwrite<span class=\"token punctuation\">,</span>\n                   c2pread<span class=\"token punctuation\">,</span> c2pwrite<span class=\"token punctuation\">,</span>\n                   errread<span class=\"token punctuation\">,</span> errwrite<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"Execute program (POSIX version)\"\"\"</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">,</span> types<span class=\"token punctuation\">.</span>StringTypes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        args <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>args<span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        args <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">if</span> shell<span class=\"token punctuation\">:</span>\n        args <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"/bin/sh\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"-c\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> args\n        <span class=\"token keyword\">if</span> executable<span class=\"token punctuation\">:</span>\n            args<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> executable\n\n    <span class=\"token keyword\">if</span> executable <span class=\"token keyword\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n        executable <span class=\"token operator\">=</span> args<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">_close_in_parent</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        os<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">)</span>\n        to_close<span class=\"token punctuation\">.</span>remove<span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># For transferring possible exec failure from child to parent</span>\n    <span class=\"token comment\"># The first char specifies the exception type: 0 means</span>\n    <span class=\"token comment\"># OSError, 1 means some other error.</span>\n    errpipe_read<span class=\"token punctuation\">,</span> errpipe_write <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>pipe_cloexec<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n            gc_was_enabled <span class=\"token operator\">=</span> gc<span class=\"token punctuation\">.</span>isenabled<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token comment\"># Disable gc to avoid bug where gc -> file_dealloc -></span>\n            <span class=\"token comment\"># write to stderr -> hang.  http://bugs.python.org/issue1336</span>\n            gc<span class=\"token punctuation\">.</span>disable<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n                self<span class=\"token punctuation\">.</span>pid <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>fork<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">except</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">if</span> gc_was_enabled<span class=\"token punctuation\">:</span>\n                    gc<span class=\"token punctuation\">.</span>enable<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">raise</span>\n            self<span class=\"token punctuation\">.</span>_child_created <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\n            <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>pid <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n                <span class=\"token comment\"># Child</span>\n                <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n                    <span class=\"token comment\"># Close parent's pipe ends</span>\n                    <span class=\"token keyword\">if</span> p2cwrite <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n                        os<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span>p2cwrite<span class=\"token punctuation\">)</span>\n                    <span class=\"token keyword\">if</span> c2pread <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n                        os<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span>c2pread<span class=\"token punctuation\">)</span>\n                    <span class=\"token keyword\">if</span> errread <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n                        os<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span>errread<span class=\"token punctuation\">)</span>\n                    os<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span>errpipe_read<span class=\"token punctuation\">)</span>\n\n                    <span class=\"token comment\"># When duping fds, if there arises a situation</span>\n                    <span class=\"token comment\"># where one of the fds is either 0, 1 or 2, it</span>\n                    <span class=\"token comment\"># is possible that it is overwritten (#12607).</span>\n                    <span class=\"token keyword\">if</span> c2pwrite <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n                        c2pwrite <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>dup<span class=\"token punctuation\">(</span>c2pwrite<span class=\"token punctuation\">)</span>\n                    <span class=\"token keyword\">if</span> errwrite <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token keyword\">or</span> errwrite <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n                        errwrite <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>dup<span class=\"token punctuation\">(</span>errwrite<span class=\"token punctuation\">)</span>\n\n                    <span class=\"token comment\"># Dup fds for child</span>\n                    <span class=\"token keyword\">def</span> <span class=\"token function\">_dup2</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                        <span class=\"token comment\"># dup2() removes the CLOEXEC flag but</span>\n                        <span class=\"token comment\"># we must do it ourselves if dup2()</span>\n                        <span class=\"token comment\"># would be a no-op (issue #10806).</span>\n                        <span class=\"token keyword\">if</span> a <span class=\"token operator\">==</span> b<span class=\"token punctuation\">:</span>\n                            self<span class=\"token punctuation\">.</span>_set_cloexec_flag<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> <span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span>\n                        <span class=\"token keyword\">elif</span> a <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n                            os<span class=\"token punctuation\">.</span>dup2<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span>\n                    _dup2<span class=\"token punctuation\">(</span>p2cread<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n                    _dup2<span class=\"token punctuation\">(</span>c2pwrite<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n                    _dup2<span class=\"token punctuation\">(</span>errwrite<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\n                    <span class=\"token comment\"># Close pipe fds.  Make sure we don't close the</span>\n                    <span class=\"token comment\"># same fd more than once, or standard fds.</span>\n                    closed <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token boolean\">None</span> <span class=\"token punctuation\">&#125;</span>\n                    <span class=\"token keyword\">for</span> fd <span class=\"token keyword\">in</span> <span class=\"token punctuation\">[</span>p2cread<span class=\"token punctuation\">,</span> c2pwrite<span class=\"token punctuation\">,</span> errwrite<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                        <span class=\"token keyword\">if</span> fd <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span> closed <span class=\"token keyword\">and</span> fd <span class=\"token operator\">></span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span>\n                            os<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">)</span>\n                            closed<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">)</span>\n\n                    <span class=\"token keyword\">if</span> cwd <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n                        os<span class=\"token punctuation\">.</span>chdir<span class=\"token punctuation\">(</span>cwd<span class=\"token punctuation\">)</span>\n\n                    <span class=\"token keyword\">if</span> preexec_fn<span class=\"token punctuation\">:</span>\n                        preexec_fn<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n                    <span class=\"token comment\"># Close all other fds, if asked for - after</span>\n                    <span class=\"token comment\"># preexec_fn(), which may open FDs.</span>\n                    <span class=\"token keyword\">if</span> close_fds<span class=\"token punctuation\">:</span>\n                        self<span class=\"token punctuation\">.</span>_close_fds<span class=\"token punctuation\">(</span>but<span class=\"token operator\">=</span>errpipe_write<span class=\"token punctuation\">)</span>\n\n                    <span class=\"token keyword\">if</span> env <span class=\"token keyword\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n                        os<span class=\"token punctuation\">.</span>execvp<span class=\"token punctuation\">(</span>executable<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span>\n                    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                        os<span class=\"token punctuation\">.</span>execvpe<span class=\"token punctuation\">(</span>executable<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">,</span> env<span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">except</span><span class=\"token punctuation\">:</span>\n                    exc_type<span class=\"token punctuation\">,</span> exc_value<span class=\"token punctuation\">,</span> tb <span class=\"token operator\">=</span> sys<span class=\"token punctuation\">.</span>exc_info<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token comment\"># Save the traceback and attach it to the exception object</span>\n                    exc_lines <span class=\"token operator\">=</span> traceback<span class=\"token punctuation\">.</span>format_exception<span class=\"token punctuation\">(</span>exc_type<span class=\"token punctuation\">,</span>\n                                                           exc_value<span class=\"token punctuation\">,</span>\n                                                           tb<span class=\"token punctuation\">)</span>\n                    exc_value<span class=\"token punctuation\">.</span>child_traceback <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>exc_lines<span class=\"token punctuation\">)</span>\n                    os<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span>errpipe_write<span class=\"token punctuation\">,</span> pickle<span class=\"token punctuation\">.</span>dumps<span class=\"token punctuation\">(</span>exc_value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n                <span class=\"token comment\"># This exitcode won't be reported to applications, so it</span>\n                <span class=\"token comment\"># really doesn't matter what we return.</span>\n                os<span class=\"token punctuation\">.</span>_exit<span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span>\n\n            <span class=\"token comment\"># Parent</span>\n            <span class=\"token keyword\">if</span> gc_was_enabled<span class=\"token punctuation\">:</span>\n                gc<span class=\"token punctuation\">.</span>enable<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">finally</span><span class=\"token punctuation\">:</span>\n            <span class=\"token comment\"># be sure the FD is closed no matter what</span>\n            os<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span>errpipe_write<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># Wait for exec to fail or succeed; possibly raising exception</span>\n        <span class=\"token comment\"># Exception limited to 1M</span>\n        data <span class=\"token operator\">=</span> _eintr_retry_call<span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">,</span> errpipe_read<span class=\"token punctuation\">,</span> <span class=\"token number\">1048576</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">finally</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> p2cread <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token boolean\">None</span> <span class=\"token keyword\">and</span> p2cwrite <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n            _close_in_parent<span class=\"token punctuation\">(</span>p2cread<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> c2pwrite <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token boolean\">None</span> <span class=\"token keyword\">and</span> c2pread <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n            _close_in_parent<span class=\"token punctuation\">(</span>c2pwrite<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> errwrite <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token boolean\">None</span> <span class=\"token keyword\">and</span> errread <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n            _close_in_parent<span class=\"token punctuation\">(</span>errwrite<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># be sure the FD is closed no matter what</span>\n        os<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span>errpipe_read<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">if</span> data <span class=\"token operator\">!=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n            _eintr_retry_call<span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>waitpid<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>pid<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">except</span> OSError <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> e<span class=\"token punctuation\">.</span>errno <span class=\"token operator\">!=</span> errno<span class=\"token punctuation\">.</span>ECHILD<span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">raise</span>\n        child_exception <span class=\"token operator\">=</span> pickle<span class=\"token punctuation\">.</span>loads<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">raise</span> child_exception\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>最后我们模拟工程中的一段代码，测度wait()子程序，把主程序阻塞，会不会影响主进程的timer的计时：</p>\n<p>先一个subprocess.Popen</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">\n<span class=\"token keyword\">import</span> shlex\ncmd_str<span class=\"token operator\">=</span><span class=\"token string\">'ps -aux'</span>\n<span class=\"token comment\">#p=subprocess.Popen(args)</span>\np<span class=\"token operator\">=</span>subprocess<span class=\"token punctuation\">.</span>Popen<span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">,</span>shell<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span>stdout<span class=\"token operator\">=</span>subprocess<span class=\"token punctuation\">.</span>PIPE<span class=\"token punctuation\">)</span>\nout<span class=\"token operator\">=</span>p<span class=\"token punctuation\">.</span>stdout<span class=\"token punctuation\">.</span>readlines<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span> out<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>在Popen初始形加，加入stdout的定义，所有命令行输出的文本会被定向到PIPE管道中。<br />\n通过下面实际的例子，观察程序的结果：<br />\n一种是timer是否能提示结束子程序，另一种是communicate是否能阻塞timer。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> shlex\n<span class=\"token keyword\">from</span> threading <span class=\"token keyword\">import</span> Timer\n<span class=\"token keyword\">import</span> subprocess\ncmd_str<span class=\"token operator\">=</span><span class=\"token string\">'ps -aux'</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">CandyLab</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span> <span class=\"token string\">\"CandyLab\"</span>\n        p<span class=\"token punctuation\">.</span>terminate<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">Orchina</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span> <span class=\"token string\">\"Orchina\"</span>\n        t <span class=\"token operator\">=</span> Timer<span class=\"token punctuation\">(</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> Orchina<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        t<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span>\n\np<span class=\"token operator\">=</span>subprocess<span class=\"token punctuation\">.</span>Popen<span class=\"token punctuation\">(</span><span class=\"token string\">\"python popentst.py\"</span><span class=\"token punctuation\">,</span>shell<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n\nt <span class=\"token operator\">=</span> Timer<span class=\"token punctuation\">(</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> CandyLab<span class=\"token punctuation\">,</span> args<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nt<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\np<span class=\"token punctuation\">.</span>communicate<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nt<span class=\"token punctuation\">.</span>cancel<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><a href=\"http://popentst.py\">popentst.py</a></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> time\ntime<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span> <span class=\"token string\">\"sleep\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p><a href=\"http://test.py\">test.py</a></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> shlex\n<span class=\"token keyword\">from</span> threading <span class=\"token keyword\">import</span> Timer\n<span class=\"token keyword\">import</span> subprocess\ncmd_str<span class=\"token operator\">=</span><span class=\"token string\">'ps -aux'</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">CandyLab</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span> <span class=\"token string\">\"CandyLab\"</span>\n        <span class=\"token comment\">#p.terminate()</span>\n        <span class=\"token keyword\">return</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">Orchina</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span> <span class=\"token string\">\"Orchina\"</span>\n        t <span class=\"token operator\">=</span> Timer<span class=\"token punctuation\">(</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> Orchina<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        t<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span>\n\np<span class=\"token operator\">=</span>subprocess<span class=\"token punctuation\">.</span>Popen<span class=\"token punctuation\">(</span><span class=\"token string\">\"python popentst.py\"</span><span class=\"token punctuation\">,</span>shell<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n\nt <span class=\"token operator\">=</span> Timer<span class=\"token punctuation\">(</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> CandyLab<span class=\"token punctuation\">,</span> args<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nt<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\np<span class=\"token punctuation\">.</span>communicate<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nt<span class=\"token punctuation\">.</span>cancel<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>Timer的时间比Sleep设置的时间短，如果阻塞timer，子程序的print应该先打印出来，结果没有。<br />\n无论是commicate()还是wait()都是不能阻塞timer的，想用timer提前结束一个子程序，也要经过处理。</p>\n<p>Timer直接关联的类是Event,然后是Conditon，之后是Lock，太长不分析，本篇的最初的测试目地已经达到了。</p>\n","text":"作者：糖果 测试的内容是将Timer的使用和Popen的使用混合在一起，测试当wait()和communicate()被调用时，是否会阻塞主进程的Timer。 找到Timer在Python2.7里的源码位置： # The timer class was contributed b...","link":"","photos":[],"count_time":{"symbolsCount":"19k","symbolsTime":"17 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[],"toc":"","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"关于Linux环境变量命令ENV","uid":"074f77a9b17de10d6ce47d49abfb9adf","slug":"old_topic/2016-09-17-267","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T07:45:09.226Z","comments":true,"path":"api/articles/old_topic/2016-09-17-267.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"这个测试有几种入口，export，或是用户请求url，我们先从本地做测试，然后搭建一个bshell的CGI环境。 export testcase=ls\\;ls eval ret=$testcase 我们看一下C实现 #include &lt;stdio.h> extern cha...","link":"","photos":[],"count_time":{"symbolsCount":305,"symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"ORC索引页显示的Lapis实现","uid":"d2259f558f383bf9636ac7b5a9eaea5a","slug":"old_topic/2016-09-17-269","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T07:45:09.204Z","comments":true,"path":"api/articles/old_topic/2016-09-17-269.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"作者：糖果 ORC是是用LOR框架完成的，这次尝试实现用Lapis来实现，ORC索引页面的显示， 国为ORC是后端前端分开的， 实际上后端只要根据用输入返回按接口定义的JSON数据就好。 这个实验会涉及到几个最学用的点： 1.简单的用SQL对业务表进行left join，这个和语...","link":"","photos":[],"count_time":{"symbolsCount":"8.4k","symbolsTime":"8 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}