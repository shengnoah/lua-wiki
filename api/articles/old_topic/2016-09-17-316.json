{"title":"简单API Server框架","uid":"00e0afc1c0a95123fda2364773b4d3e8","slug":"old_topic/2016-09-17-316","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T07:45:09.212Z","comments":true,"path":"api/articles/old_topic/2016-09-17-316.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<h1 id=\"简单api-server框架\"><a class=\"markdownIt-Anchor\" href=\"#简单api-server框架\"></a> 简单API Server框架</h1>\n<p>实现一个最最简单的数学计算：加、减、乘、除，给大家演示如何搭建简单的 API Server。</p>\n<p>按照前面几章的写法，先来看看加法、减法示例代码：</p>\n<pre class=\"line-numbers language-nginx\" data-language=\"nginx\"><code class=\"language-nginx\"><span class=\"token directive\"><span class=\"token keyword\">worker_processes</span>  <span class=\"token number\">1</span></span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">#nginx worker 数量</span>\n<span class=\"token directive\"><span class=\"token keyword\">error_log</span> logs/error.log</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">#指定错误日志文件路径</span>\n<span class=\"token directive\"><span class=\"token keyword\">events</span></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token directive\"><span class=\"token keyword\">worker_connections</span> <span class=\"token number\">1024</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token directive\"><span class=\"token keyword\">http</span></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token directive\"><span class=\"token keyword\">server</span></span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token directive\"><span class=\"token keyword\">listen</span> <span class=\"token number\">80</span></span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\"># 加法</span>\n        <span class=\"token directive\"><span class=\"token keyword\">location</span> /addition</span> <span class=\"token punctuation\">&#123;</span>\n           <span class=\"token directive\"><span class=\"token keyword\">content_by_lua_block</span></span> <span class=\"token punctuation\">&#123;</span>\n                local args = ngx.req.get_uri_args()\n                ngx.say(args.a + args.b)\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token comment\"># 减法</span>\n        <span class=\"token directive\"><span class=\"token keyword\">location</span> /subtraction</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token directive\"><span class=\"token keyword\">content_by_lua_block</span></span> <span class=\"token punctuation\">&#123;</span>\n                local args = ngx.req.get_uri_args()\n                ngx.say(args.a - args.b)\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token comment\"># 乘法</span>\n        <span class=\"token directive\"><span class=\"token keyword\">location</span> /multiplication</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token directive\"><span class=\"token keyword\">content_by_lua_block</span></span> <span class=\"token punctuation\">&#123;</span>\n                local args = ngx.req.get_uri_args()\n                ngx.say(args.a * args.b)\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token comment\"># 除法</span>\n        <span class=\"token directive\"><span class=\"token keyword\">location</span> /division</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token directive\"><span class=\"token keyword\">content_by_lua_block</span></span> <span class=\"token punctuation\">&#123;</span>\n                local args = ngx.req.get_uri_args()\n                ngx.say(args.a / args.b)\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>代码写多了一眼就可以看出来，这么简单的加减乘除，居然写了这么长，而且还要对每个 API 都写一个 location ，作为有追求的人士，怎能容忍这种代码风格？</p>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>首先是需要把这些 location 合并；</p>\n</li>\n<li class=\"lvl-2\">\n<p>其次是这些接口的实现放到独立文件中，保持 nginx 配置文件的简洁；</p>\n</li>\n</ul>\n<p>基于这两点要求，可以改成下面的版本，看上去有那么几分模样的样子：</p>\n<blockquote>\n<p>nginx.conf 内容：</p>\n</blockquote>\n<pre class=\"line-numbers language-nginx\" data-language=\"nginx\"><code class=\"language-nginx\"><span class=\"token directive\"><span class=\"token keyword\">worker_processes</span>  <span class=\"token number\">1</span></span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">#nginx worker 数量</span>\n<span class=\"token directive\"><span class=\"token keyword\">error_log</span> logs/error.log</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">#指定错误日志文件路径</span>\n<span class=\"token directive\"><span class=\"token keyword\">events</span></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token directive\"><span class=\"token keyword\">worker_connections</span> <span class=\"token number\">1024</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token directive\"><span class=\"token keyword\">http</span></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\"># 设置默认 lua 搜索路径，添加 lua 路径</span>\n    <span class=\"token comment\"># 此处写相对路径时，对启动 nginx 的路径有要求，必须在 nginx 目录下启动，require 找不到</span>\n    <span class=\"token comment\"># comm.param 绝对路径当然也没问题，但是不可移植，因此应使用变量 $prefix 或 </span>\n    <span class=\"token comment\"># $&#123;prefix&#125;，OR 会替换为 nginx 的 prefix path。</span>\n    \n    <span class=\"token comment\"># lua_package_path 'lua/?.lua;/blah/?.lua;;';</span>\n    <span class=\"token directive\"><span class=\"token keyword\">lua_package_path</span> <span class=\"token string\">'<span class=\"token variable\">$prefix</span>/lua/?.lua;/blah/?.lua;;'</span>\n\n    <span class=\"token comment\"># 对于开发研究，可以对代码 cache 进行关闭，这样不必每次都重新加载 nginx。</span>\n    lua_code_cache <span class=\"token boolean\">off</span></span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token directive\"><span class=\"token keyword\">server</span></span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token directive\"><span class=\"token keyword\">listen</span> <span class=\"token number\">80</span></span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\"># 在代码路径中使用nginx变量</span>\n        <span class=\"token comment\"># 注意： nginx var 的变量一定要谨慎，否则将会带来非常大的风险</span>\n        <span class=\"token directive\"><span class=\"token keyword\">location</span> ~ ^/api/([-_a-zA-Z0-9/]+)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\"># 准入阶段完成参数验证</span>\n            <span class=\"token directive\"><span class=\"token keyword\">access_by_lua_file</span>  lua/access_check.lua</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">#内容生成阶段</span>\n            <span class=\"token directive\"><span class=\"token keyword\">content_by_lua_file</span> lua/<span class=\"token variable\">$1</span>.lua</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>其他文件内容：</p>\n</blockquote>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\"><span class=\"token comment\">--========== &#123;$prefix&#125;/lua/addition.lua</span>\n<span class=\"token keyword\">local</span> args <span class=\"token operator\">=</span> ngx<span class=\"token punctuation\">.</span>req<span class=\"token punctuation\">.</span><span class=\"token function\">get_uri_args</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nngx<span class=\"token punctuation\">.</span><span class=\"token function\">say</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">.</span>a <span class=\"token operator\">+</span> args<span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">--========== &#123;$prefix&#125;/lua/subtraction.lua</span>\n<span class=\"token keyword\">local</span> args <span class=\"token operator\">=</span> ngx<span class=\"token punctuation\">.</span>req<span class=\"token punctuation\">.</span><span class=\"token function\">get_uri_args</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nngx<span class=\"token punctuation\">.</span><span class=\"token function\">say</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">.</span>a <span class=\"token operator\">-</span> args<span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">--========== &#123;$prefix&#125;/lua/multiplication.lua</span>\n<span class=\"token keyword\">local</span> args <span class=\"token operator\">=</span> ngx<span class=\"token punctuation\">.</span>req<span class=\"token punctuation\">.</span><span class=\"token function\">get_uri_args</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nngx<span class=\"token punctuation\">.</span><span class=\"token function\">say</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">.</span>a <span class=\"token operator\">*</span> args<span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">--========== &#123;$prefix&#125;/lua/division.lua</span>\n<span class=\"token keyword\">local</span> args <span class=\"token operator\">=</span> ngx<span class=\"token punctuation\">.</span>req<span class=\"token punctuation\">.</span><span class=\"token function\">get_uri_args</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nngx<span class=\"token punctuation\">.</span><span class=\"token function\">say</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">.</span>a <span class=\"token operator\">/</span> args<span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>既然对外提供的是 API Server，作为一个服务端程序员，怎么可以容忍输入参数不检查呢？万一对方送过来的不是数字或者为空，这些都要过滤掉嘛。参数检查过滤的方法是统一，在这几个 API 中如何共享这个方法呢？这时候就需要 Lua 模块来完成了。</p>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>使用统一的公共模块，完成参数验证；</p>\n</li>\n<li class=\"lvl-2\">\n<p>验证入口最好也统一，不要分散在不同地方；</p>\n</li>\n</ul>\n<blockquote>\n<p>nginx.conf 内容：</p>\n</blockquote>\n<pre class=\"line-numbers language-nginx\" data-language=\"nginx\"><code class=\"language-nginx\"><span class=\"token directive\"><span class=\"token keyword\">worker_processes</span>  <span class=\"token number\">1</span></span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">#nginx worker 数量</span>\n<span class=\"token directive\"><span class=\"token keyword\">error_log</span> logs/error.log</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">#指定错误日志文件路径</span>\n<span class=\"token directive\"><span class=\"token keyword\">events</span></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token directive\"><span class=\"token keyword\">worker_connections</span> <span class=\"token number\">1024</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token directive\"><span class=\"token keyword\">http</span></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token directive\"><span class=\"token keyword\">server</span></span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token directive\"><span class=\"token keyword\">listen</span> <span class=\"token number\">80</span></span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\"># 在代码路径中使用nginx变量</span>\n        <span class=\"token comment\"># 注意： nginx var 的变量一定要谨慎，否则将会带来非常大的风险</span>\n        <span class=\"token directive\"><span class=\"token keyword\">location</span> ~ ^/api/([-_a-zA-Z0-9/]+)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token directive\"><span class=\"token keyword\">access_by_lua_file</span>  lua/access_check.lua</span><span class=\"token punctuation\">;</span>\n            <span class=\"token directive\"><span class=\"token keyword\">content_by_lua_file</span> lua/<span class=\"token variable\">$1</span>.lua</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>新增文件内容：</p>\n</blockquote>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\"><span class=\"token comment\">--========== &#123;$prefix&#125;/lua/comm/param.lua</span>\n<span class=\"token keyword\">local</span> _M <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">-- 对输入参数逐个进行校验，只要有一个不是数字类型，则返回 false</span>\n<span class=\"token keyword\">function</span> _M<span class=\"token punctuation\">.</span><span class=\"token function\">is_number</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">...</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">local</span> arg <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">...</span><span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">local</span> num\n    <span class=\"token keyword\">for</span> _<span class=\"token punctuation\">,</span>v <span class=\"token keyword\">in</span> <span class=\"token function\">ipairs</span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>\n        num <span class=\"token operator\">=</span> <span class=\"token function\">tonumber</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> <span class=\"token keyword\">nil</span> <span class=\"token operator\">==</span> num <span class=\"token keyword\">then</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">false</span>\n        <span class=\"token keyword\">end</span>\n    <span class=\"token keyword\">end</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">true</span>\n<span class=\"token keyword\">end</span>\n\n<span class=\"token keyword\">return</span> _M\n\n<span class=\"token comment\">--========== &#123;$prefix&#125;/lua/access_check.lua</span>\n<span class=\"token keyword\">local</span> param<span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"comm.param\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">local</span> args <span class=\"token operator\">=</span> ngx<span class=\"token punctuation\">.</span>req<span class=\"token punctuation\">.</span><span class=\"token function\">get_uri_args</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> param<span class=\"token punctuation\">.</span><span class=\"token function\">is_number</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">)</span> <span class=\"token keyword\">then</span>\n    ngx<span class=\"token punctuation\">.</span><span class=\"token function\">exit</span><span class=\"token punctuation\">(</span>ngx<span class=\"token punctuation\">.</span>HTTP_BAD_REQUEST<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span>\n<span class=\"token keyword\">end</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>看看curl测试结果吧：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$  nginx  <span class=\"token function\">curl</span> <span class=\"token string\">'127.0.0.1:80/api/addition?a=1'</span>\n<span class=\"token operator\">&lt;</span>html<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>head<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span>title<span class=\"token operator\">></span><span class=\"token number\">400</span> Bad Request<span class=\"token operator\">&lt;</span>/title<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span>/head<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>body <span class=\"token assign-left variable\">bgcolor</span><span class=\"token operator\">=</span><span class=\"token string\">\"white\"</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>center<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span>h<span class=\"token operator\"><span class=\"token file-descriptor important\">1</span>></span><span class=\"token number\">400</span> Bad Request<span class=\"token operator\">&lt;</span>/h<span class=\"token operator\"><span class=\"token file-descriptor important\">1</span>></span><span class=\"token operator\">&lt;</span>/center<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>hr<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span>center<span class=\"token operator\">></span>openresty/1.9.3.<span class=\"token operator\"><span class=\"token file-descriptor important\">1</span>&lt;</span>/center<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>/body<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>/html<span class=\"token operator\">></span>\n$  nginx  <span class=\"token function\">curl</span> <span class=\"token string\">'127.0.0.1:80/api/addition?a=1&amp;b=3'</span>\n<span class=\"token number\">4</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>基本是按照预期执行的。参数不全、错误时，会提示400错误。正常处理，可以返回预期结果。</p>\n<p>来整体看一下目前的目录关系：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">.\n├── conf\n│   ├── nginx.conf\n├── logs\n│   ├── error.log\n│   └── nginx.pid\n├── lua\n│   ├── access_check.lua\n│   ├── addition.lua\n│   ├── subtraction.lua\n│   ├── multiplication.lua\n│   ├── division.lua\n│   └── comm\n│       └── param.lua\n└── sbin\n    └── nginx<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>怎么样，有点 magic 的味道不？其实你的接口越是规范，有固定规律可寻，那么 OpenResty 就总是很容易能找到适合你的位置。当然这里你也可以把 <code>access_check.lua</code> 内容分别复制到加、减、乘、除实现的四个 Lua 文件中，肯定也是能用的。这里只是为了给大家提供更多的玩法，需要的时候可以有更多的选择。</p>\n<p>本章目的是搭建一个简单API Server，记住这绝对不是终极版本。这里面还有很多需要进一步去考虑的地方，但是作为最基本的框架已经有了。</p>\n","text":" 简单API Server框架 实现一个最最简单的数学计算：加、减、乘、除，给大家演示如何搭建简单的 API Server。 按照前面几章的写法，先来看看加法、减法示例代码： worker_processes 1; #nginx worker 数量 error_log logs/...","link":"","photos":[],"count_time":{"symbolsCount":"4.8k","symbolsTime":"4 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%AE%80%E5%8D%95api-server%E6%A1%86%E6%9E%B6\"><span class=\"toc-text\"> 简单API Server框架</span></a></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"如何发起新 HTTP 请求","uid":"0bda74f0522febe0cd0d3ac546ef8e60","slug":"old_topic/2016-09-17-315","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T07:45:09.173Z","comments":true,"path":"api/articles/old_topic/2016-09-17-315.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":" 如何发起新 HTTP 请求 OpenResty 最主要的应用场景之一是 API Server，有别于传统 Nginx 的代理转发应用场景，API Server 中心内部有各种复杂的交易流程和判断逻辑，学会高效的与其他 HTTP Server 调用是必备基础。本文将介绍 Open...","link":"","photos":[],"count_time":{"symbolsCount":"3.9k","symbolsTime":"4 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"获取请求 body","uid":"61064bea0a023b51846839ff3c2e6c07","slug":"old_topic/2016-09-17-317","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T07:45:09.234Z","comments":true,"path":"api/articles/old_topic/2016-09-17-317.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":" 获取请求 body 在 Nginx 的典型应用场景中，几乎都是只读取 HTTP 头即可，例如负载均衡、正反向代理等场景。但是对于 API Server 或者 Web Application ，对 body 可以说就比较敏感了。由于 OpenResty 基于 Nginx ，所以天...","link":"","photos":[],"count_time":{"symbolsCount":"3k","symbolsTime":"3 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}