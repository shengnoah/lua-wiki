{"title":"用Django构建REST网页服务","uid":"b3a6fb6eb4424ca7a4f65fdb6f39a8d3","slug":"old_topic/2016-09-17-247","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T07:45:09.228Z","comments":true,"path":"api/articles/old_topic/2016-09-17-247.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<p>作者:糖果</p>\n<p>Django的高版本自身提供了很好REST服务组件和方便的库,Djano REST Framework提供了一个现成的方案，可以将对外的REST服务，与类似Mysql的数据存储建立有机关联，直接与ORM一起使用就更便利。</p>\n<p>JSONRenderer和JSONParser提供了方便的JSON解析和响应服务。不过用这些库意味着要按装的新包，对版本和环境可能也有要求，所以，要想在更低的Django版本下支持JSON数据接收和响应，就不要使用这些高级的库，而是直接使用老的API。</p>\n<p>如果用Lua来解析和响应JSON，也是同样方便的，关于这些json数据的存储也有很多的选择， mysql,ES,mongo都可以，甚至在SAE上，用kvdb也没有问题。</p>\n<p>下面是Django 1.5.x支持的实现。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token decorator annotation punctuation\">@csrf_exempt</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">testcase</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> request<span class=\"token punctuation\">.</span>method <span class=\"token operator\">==</span> <span class=\"token string\">'POST'</span><span class=\"token punctuation\">:</span>\n            receive_data <span class=\"token operator\">=</span> json<span class=\"token punctuation\">.</span>loads<span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">)</span>\n            phone <span class=\"token operator\">=</span> receive_data<span class=\"token punctuation\">[</span><span class=\"token string\">'phone'</span><span class=\"token punctuation\">]</span>\n            <span class=\"token keyword\">return</span> HttpResponse<span class=\"token punctuation\">(</span>json<span class=\"token punctuation\">.</span>dumps<span class=\"token punctuation\">(</span>receive_data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> content_type<span class=\"token operator\">=</span><span class=\"token string\">\"application/json\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">except</span><span class=\"token punctuation\">:</span> \n        <span class=\"token keyword\">import</span> sys \n        info <span class=\"token operator\">=</span> <span class=\"token string\">\"%s || %s\"</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>exc_info<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> sys<span class=\"token punctuation\">.</span>exc_info<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> HttpResponse<span class=\"token punctuation\">(</span><span class=\"token string\">\"Parse JSON data error!\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> HttpResponse<span class=\"token punctuation\">(</span><span class=\"token string\">\"Building  JSON REST Web Service!\"</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>因为django使用的了中间件django.middleware.csrf.CsrfViewMiddleware，对要测试的函数需要加上@csrf_exempt装饰器，不然会报警。</p>\n<p>需要引用下面的包：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>views<span class=\"token punctuation\">.</span>decorators<span class=\"token punctuation\">.</span>csrf <span class=\"token keyword\">import</span> csrf_exempt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>对于”testcase“这个方法说，主要用做的处理就两件事，一是接收用户传过的JSON数据，另一个处理，就是直接再把这个数据，依JSON数据形式传回给用户，中途并没有对JSON做过任何的操作。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> json\nreceive_data <span class=\"token operator\">=</span> json<span class=\"token punctuation\">.</span>loads<span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>如果是POST类型的请求，JSON数据，主要取得的API是request.body,在1.5.x较高的版本中，用的是这个，也可以用另外一个等价的API是raw_post_data，这是一个旧的接口，虽然可以执行，但会给出警告信息。</p>\n<p>净raw数据解析成json，主要靠的函数是json.loads(request.body).</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">receive_data <span class=\"token operator\">=</span> json<span class=\"token punctuation\">.</span>loads<span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">)</span>\nphone <span class=\"token operator\">=</span> receive_data<span class=\"token punctuation\">[</span><span class=\"token string\">'phone'</span><span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>接口返回json数据时要指明一下mime类型。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">return</span> HttpResponse<span class=\"token punctuation\">(</span>json<span class=\"token punctuation\">.</span>dumps<span class=\"token punctuation\">(</span>receive_data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> content_type<span class=\"token operator\">=</span><span class=\"token string\">\"application/json\"</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>就是这个比较简单的就可以实现json数据的接收和返回。</p>\n<p>可以简单的用curl测试一下，这个接口：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">curl <span class=\"token operator\">-</span>b <span class=\"token string\">\"key=value\"</span> http<span class=\"token punctuation\">:</span><span class=\"token operator\">//</span><span class=\"token number\">127.0</span><span class=\"token number\">.0</span><span class=\"token number\">.1</span><span class=\"token operator\">/</span>json<span class=\"token operator\">/</span> <span class=\"token operator\">-</span>d<span class=\"token string\">'&#123;\"phone\":\"15811111111\" ,\"identity\":\"xxx\", \"credit\":\"xxx\"&#125;'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>这接口的圈复杂度其实不高，主要要测试的就三个分支，基本都有Message输出。</p>\n<p><a href=\"https://github.com/shengnoah/django_json_rest\" target=\"_blank\">源码地址:</a></p>\n","text":"作者:糖果 Django的高版本自身提供了很好REST服务组件和方便的库,Djano REST Framework提供了一个现成的方案，可以将对外的REST服务，与类似Mysql的数据存储建立有机关联，直接与ORM一起使用就更便利。 JSONRenderer和JSONParser...","link":"","photos":[],"count_time":{"symbolsCount":"1.7k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[],"toc":"","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"程序员如何选择机械键盘","uid":"63f91faf649dc18cb1abcbe76e9b1360","slug":"old_topic/2016-09-17-246","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T07:45:09.206Z","comments":true,"path":"api/articles/old_topic/2016-09-17-246.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"作者： 糖果 “一，最好不要机械键盘，我没有听噪声的癖好，但如果有声音不是很大的，求推荐。 二，键程不用很大，有反馈的感觉就好，像笔记本键盘一样。 三，按键稳定，你不能手指放上面晃一晃按键就跟着你跑(夸张说法。。) 四，能素一点就素一点，这个是次要的，比如某些游戏键盘那样，灯光四...","link":"","photos":[],"count_time":{"symbolsCount":"3.6k","symbolsTime":"3 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"一条AWK命令统计出Ningx访问LOG中的状态数据","uid":"35ed74a52ffa4508c72ebfa9a93f778d","slug":"old_topic/2016-09-17-248","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T07:45:09.196Z","comments":true,"path":"api/articles/old_topic/2016-09-17-248.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"作者：糖果 下面是脚本代码： cat access_log.log | awk &#39;&#123;print $7&#125;&#39; | sort | uniq -c","link":"","photos":[],"count_time":{"symbolsCount":87,"symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}