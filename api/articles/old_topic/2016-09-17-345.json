{"title":"Openresty定时器ngx.timer通过Redis的pubsub进行通信","uid":"9e3061a0f19c04425ccac351efe5e0da","slug":"old_topic/2016-09-17-345","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T07:45:09.166Z","comments":true,"path":"api/articles/old_topic/2016-09-17-345.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":null,"content":"<p>做一个小实验：</p>\n<p>先打开一个redis-cli, 监听所有事件：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt;  config set notify-keyspace-events KEA </span><br><span class=\"line\">127.0.0.1:6379&gt; psubscribe __key*@0__:* </span><br></pre></td></tr></table></figure>\n<p>再开一个redis-cli,进行publish与subscribe操作：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; publish chatroom &quot;123&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt; publish chatroom &quot;abc&quot;</span><br></pre></td></tr></table></figure>\n<p>然于，打开一个python redis client进行subscribe:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">r = redis.StrictRedis(host=&#x27;localhost&#x27;, port=6379, db=0, password=&#x27;candylab.net&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">ps = rc.pubsub()</span><br><span class=\"line\"></span><br><span class=\"line\">ps.subscribe(&#x27;chatroom&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">for item in ps.listen():  </span><br><span class=\"line\">    if item[&#x27;type&#x27;] == &#x27;message&#x27;:  </span><br><span class=\"line\">        print item[&#x27;data&#x27;]  </span><br></pre></td></tr></table></figure>\n<p><a href=\"https://github.com/andymccurdy/redis-py\">Python Redis客户端</a></p>\n<p><a href=\"https://github.com/nrk/redis-lua\">LUA Redis客户端</a></p>\n<p><a href=\"https://github.com/hoisie/redis\">LUA Redis客户端</a></p>\n<p>实际上我们是可以，在OpenResty的定时器处理过程中对Redis进行操作的， 这种对redis的数据操作的API是不会在OpenResty的各个阶段被disabled，所以我们可以通过redis进行表数据共享，通过订阅与支持Redis客户端口的相应语言进行耦合通信与协作工作,比如我们可以通过publish IP数据让订阅者对当地的Iptable进行封禁。</p>\n<p>实际上下面的思路是，用Openrsty的Timer生成心跳，让OpenResty通过publish吐出一个二维结构的计划任务表，让对应订阅者去执行，这样在Openresty阶段做的就是这张表的维护与发布，基于OpenResty本身Timer设定的心跳的基础上。</p>\n","text":"做一个小实验： 先打开一个redis-cli, 监听所有事件： 12127.0.0.1:6379&gt; config set notify-keyspace-events KEA 127.0.0.1:6379&gt; psubscribe __key*@0__:* 再开一个re...","link":"","photos":[],"count_time":{"symbolsCount":951,"symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":308,"path":"api/categories/topic.json"}],"tags":[],"toc":"","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"MoonScript版的ngx.timer","uid":"e264d16f8d37da4ca95ff610b1733e03","slug":"old_topic/2016-09-17-344","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T07:45:09.174Z","comments":true,"path":"api/articles/old_topic/2016-09-17-344.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":null,"text":"实际如果是直接调用ngx.timer的API，moonscript和lua的ngx.timer的函数写法差别不是很大。 candylab.moon 123456789handler = (fill, params)-&gt; ok, err = ngx.timer.at(1, h...","link":"","photos":[],"count_time":{"symbolsCount":780,"symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":308,"path":"api/categories/topic.json"}],"tags":[],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"MoonScript与Redis客户端","uid":"55c8ceefd620d530c7de11d61153ba84","slug":"old_topic/2016-09-17-346","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T07:45:09.233Z","comments":true,"path":"api/articles/old_topic/2016-09-17-346.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":[],"text":"所谓的Redis LUA客户端有两种版本，一种就是本地可运行版本，还有一个版本是OpenResty的版本，下面介绍的这段Moonscript段代码是本地版的。 作者：糖果 candylab.moon 123456789redis = require &quot;redis&quo...","link":"","photos":[],"count_time":{"symbolsCount":675,"symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":308,"path":"api/categories/topic.json"}],"tags":[],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}