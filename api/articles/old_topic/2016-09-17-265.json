{"title":"Lapis快速分页查询","uid":"e7519b56d8be6d962f5762cfa924baa8","slug":"old_topic/2016-09-17-265","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T07:45:09.181Z","comments":true,"path":"api/articles/old_topic/2016-09-17-265.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<p>作者：糖果</p>\n<p>Lapis分页查询和一般的Django分页查询有明显的分别：</p>\n<p>lapis分页器对象的创建和查询条件的指定是同时的。</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\"><span class=\"token keyword\">local</span> lapis <span class=\"token operator\">=</span> require <span class=\"token string\">\"lapis\"</span>\n<span class=\"token keyword\">local</span> app <span class=\"token operator\">=</span> lapis<span class=\"token punctuation\">.</span><span class=\"token function\">Application</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">local</span> config <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"lapis.config\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">local</span> db <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"lapis.db\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">local</span> Model <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"lapis.db.model\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>Model\n<span class=\"token keyword\">local</span> schema <span class=\"token operator\">=</span> <span class=\"token function\">require</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"lapis.db.schema\"</span><span class=\"token punctuation\">)</span>\n\napp<span class=\"token punctuation\">:</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span>\n   \n    <span class=\"token keyword\">local</span> Cmt <span class=\"token operator\">=</span> Model<span class=\"token punctuation\">:</span><span class=\"token function\">extend</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">local</span> paginated <span class=\"token operator\">=</span> Cmt<span class=\"token punctuation\">:</span><span class=\"token function\">paginated</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"where id &lt;= ?\"</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> per_page <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span>\n        prepare_results <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>posts<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> posts\n    <span class=\"token keyword\">end</span>\n\n    <span class=\"token keyword\">local</span> page1 <span class=\"token operator\">=</span> paginated<span class=\"token punctuation\">:</span><span class=\"token function\">get_page</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span>\n<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>不像Django，Lapis不需要定义表的结构类，一句就可以解决这个问题：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">local Cmt &#x3D; Model:extend(&quot;user&quot;)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>接下来就是定义分页模式, 查询条件是id&lt;=100, 10行分一页：</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\"><span class=\"token keyword\">local</span> paginated <span class=\"token operator\">=</span> Cmt<span class=\"token punctuation\">:</span><span class=\"token function\">paginated</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"where id &lt;= ?\"</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> per_page <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span>\n    prepare_results <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>posts<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> posts\n<span class=\"token keyword\">end</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>查询第一分页数据：</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\"><span class=\"token keyword\">local</span> page1 <span class=\"token operator\">=</span> paginated<span class=\"token punctuation\">:</span><span class=\"token function\">get_page</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>lapis分页接口这样设计是可以接受的：</p>\n<p>看一下Python的接口设计：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">listing</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        words_list <span class=\"token operator\">=</span> Author<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>order_by<span class=\"token punctuation\">(</span><span class=\"token string\">'-dateTime'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span>\n        paginator <span class=\"token operator\">=</span> Paginator<span class=\"token punctuation\">(</span>words_list<span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span>\n        page <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>GET<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'page'</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n                contacts <span class=\"token operator\">=</span> paginator<span class=\"token punctuation\">.</span>page<span class=\"token punctuation\">(</span>page<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">except</span> PageNotAnInteger<span class=\"token punctuation\">:</span>\n                contacts <span class=\"token operator\">=</span> paginator<span class=\"token punctuation\">.</span>page<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">except</span> EmptyPage<span class=\"token punctuation\">:</span>\n                contacts <span class=\"token operator\">=</span> paginator<span class=\"token punctuation\">.</span>page<span class=\"token punctuation\">(</span>paginator<span class=\"token punctuation\">.</span>num_pages<span class=\"token punctuation\">)</span>\n\n        t <span class=\"token operator\">=</span> loader<span class=\"token punctuation\">.</span>get_template<span class=\"token punctuation\">(</span><span class=\"token string\">'tests/list.html'</span><span class=\"token punctuation\">)</span>\n\n        c <span class=\"token operator\">=</span> RequestContext<span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token string\">'words_list'</span><span class=\"token punctuation\">:</span>contacts<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> HttpResponse<span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">.</span>render<span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>把直接从Model里取出的数据全集，直接给分页器，当分页器持有这些数据后，通过自己的接口，来操作返回分页的数据结果。</p>\n<p>在Django中,第一次正常的查询动作和分页动作执行是分开的，先按条件查询，返回所有数据集合，然后，再作为入参给分页器对像。</p>\n<p>而Lapis的方式是二和一的，赋予查询条件查询和返回结果给分页，是一个动作，model和分页器，不是两个数据结构，是一个对象控制的，这是好还是不好呢？各有好处！</p>\n<p>www.lua.ren</p>\n","text":"作者：糖果 Lapis分页查询和一般的Django分页查询有明显的分别： lapis分页器对象的创建和查询条件的指定是同时的。 local lapis = require \"lapis\" local app = lapis.Application() local config =...","link":"","photos":[],"count_time":{"symbolsCount":"1.7k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[],"toc":"","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"PIL与Pylibmc","uid":"7a3c5a1d23bfd5b9726de20fd52ae700","slug":"old_topic/2016-09-17-262","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T07:45:09.209Z","comments":true,"path":"api/articles/old_topic/2016-09-17-262.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"作者：糖果 要用一个小系统，需要装PIL和Pylibmc。 PIL就不用pip装了，直接用apt-get装： sudo apt-get install python-imaging Pylibmc需要安装下面的依赖库： Ubuntu sudo apt-get install me...","link":"","photos":[],"count_time":{"symbolsCount":327,"symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"爬虫小工具BeautifulSoup","uid":"916d00d5ac3386eee42a586e5f38ef7d","slug":"old_topic/2016-09-17-264","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T07:45:09.157Z","comments":true,"path":"api/articles/old_topic/2016-09-17-264.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"BeautifulSoup是一种用于分析网页HTML内容元素的工具，还有类似的Request也可完成相关工作。 下面是一小段程序，翻出来： from urllib2 import urlopen, URLError from bs4 import BeautifulSoup de...","link":"","photos":[],"count_time":{"symbolsCount":901,"symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}