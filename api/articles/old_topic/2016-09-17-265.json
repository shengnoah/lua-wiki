{"title":"Lapis快速分页查询","uid":"e7519b56d8be6d962f5762cfa924baa8","slug":"old_topic/2016-09-17-265","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T07:45:09.181Z","comments":true,"path":"api/articles/old_topic/2016-09-17-265.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":null,"content":"<p>作者：糖果</p>\n<p>Lapis分页查询和一般的Django分页查询有明显的分别：</p>\n<p>lapis分页器对象的创建和查询条件的指定是同时的。</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">local</span> lapis = <span class=\"built_in\">require</span> <span class=\"string\">&quot;lapis&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">local</span> app = lapis.Application()</span><br><span class=\"line\"><span class=\"keyword\">local</span> <span class=\"built_in\">config</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;lapis.config&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">local</span> db = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;lapis.db&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">local</span> Model = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;lapis.db.model&quot;</span>).Model</span><br><span class=\"line\"><span class=\"keyword\">local</span> schema = <span class=\"built_in\">require</span> (<span class=\"string\">&quot;lapis.db.schema&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">app:get(<span class=\"string\">&quot;/&quot;</span>,</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(self)</span></span></span><br><span class=\"line\">   </span><br><span class=\"line\">    <span class=\"keyword\">local</span> Cmt = Model:extend(<span class=\"string\">&quot;user&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">local</span> paginated = Cmt:paginated(<span class=\"string\">&quot;where id &lt;= ?&quot;</span> , <span class=\"number\">100</span>, &#123; per_page = <span class=\"number\">10</span>,</span><br><span class=\"line\">        prepare_results = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(posts)</span></span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> posts</span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">local</span> page1 = paginated:get_page(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<p>不像Django，Lapis不需要定义表的结构类，一句就可以解决这个问题：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">local Cmt = Model:extend(&quot;user&quot;)</span><br></pre></td></tr></table></figure>\n<p>接下来就是定义分页模式, 查询条件是id&lt;=100, 10行分一页：</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">local</span> paginated = Cmt:paginated(<span class=\"string\">&quot;where id &lt;= ?&quot;</span> , <span class=\"number\">100</span>, &#123; per_page = <span class=\"number\">10</span>,</span><br><span class=\"line\">    prepare_results = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(posts)</span></span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> posts</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<p>查询第一分页数据：</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">local</span> page1 = paginated:get_page(<span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure>\n<p>lapis分页接口这样设计是可以接受的：</p>\n<p>看一下Python的接口设计：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">listing</span>(<span class=\"params\">request</span>):</span><br><span class=\"line\">        words_list = Author.objects.order_by(<span class=\"string\">&#x27;-dateTime&#x27;</span>)[:<span class=\"number\">100</span>]</span><br><span class=\"line\">        paginator = Paginator(words_list, <span class=\"number\">16</span>)</span><br><span class=\"line\">        page = request.GET.get(<span class=\"string\">&#x27;page&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">                contacts = paginator.page(page)</span><br><span class=\"line\">        <span class=\"keyword\">except</span> PageNotAnInteger:</span><br><span class=\"line\">                contacts = paginator.page(<span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">except</span> EmptyPage:</span><br><span class=\"line\">                contacts = paginator.page(paginator.num_pages)</span><br><span class=\"line\"></span><br><span class=\"line\">        t = loader.get_template(<span class=\"string\">&#x27;tests/list.html&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        c = RequestContext(request, &#123;</span><br><span class=\"line\">                <span class=\"string\">&#x27;words_list&#x27;</span>:contacts,</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> HttpResponse(t.render(c))</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>把直接从Model里取出的数据全集，直接给分页器，当分页器持有这些数据后，通过自己的接口，来操作返回分页的数据结果。</p>\n<p>在Django中,第一次正常的查询动作和分页动作执行是分开的，先按条件查询，返回所有数据集合，然后，再作为入参给分页器对像。</p>\n<p>而Lapis的方式是二和一的，赋予查询条件查询和返回结果给分页，是一个动作，model和分页器，不是两个数据结构，是一个对象控制的，这是好还是不好呢？各有好处！</p>\n<p>www.lua.ren</p>\n","text":"作者：糖果 Lapis分页查询和一般的Django分页查询有明显的分别： lapis分页器对象的创建和查询条件的指定是同时的。 1234567891011121314151617181920local lapis = require &quot;lapis&quot;local ...","link":"","photos":[],"count_time":{"symbolsCount":"1.9k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":308,"path":"api/categories/topic.json"}],"tags":[],"toc":"","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"PIL与Pylibmc","uid":"7a3c5a1d23bfd5b9726de20fd52ae700","slug":"old_topic/2016-09-17-262","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T07:45:09.209Z","comments":true,"path":"api/articles/old_topic/2016-09-17-262.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":null,"text":"作者：糖果 要用一个小系统，需要装PIL和Pylibmc。 PIL就不用pip装了，直接用apt-get装： 1sudo apt-get install python-imaging Pylibmc需要安装下面的依赖库： Ubuntu 123sudo apt-get instal...","link":"","photos":[],"count_time":{"symbolsCount":331,"symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":308,"path":"api/categories/topic.json"}],"tags":[],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"地理位置信息库PyGeoIP","uid":"0c2b4d50783b3962d80c6ee9ac8f9c11","slug":"old_topic/2016-09-17-266","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T07:45:09.219Z","comments":true,"path":"api/articles/old_topic/2016-09-17-266.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":null,"text":"地理位置信息库PyGeoIP 1234567wget http://geolite.maxmind.com/download/geoip/database/GeoLiteCity.dat.gz &amp;&amp; gzip -d GeoLiteCity.dat.gzwget h...","link":"","photos":[],"count_time":{"symbolsCount":514,"symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":308,"path":"api/categories/topic.json"}],"tags":[],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}