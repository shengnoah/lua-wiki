{"title":"与其他 location 配合","uid":"66c1d79a932fd4e754d2057db394f613","slug":"old_topic/2016-09-17-311","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T07:45:09.179Z","comments":true,"path":"api/articles/old_topic/2016-09-17-311.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<h1 id=\"与其他-location-配合\"><a class=\"markdownIt-Anchor\" href=\"#与其他-location-配合\"></a> 与其他 location 配合</h1>\n<p>nginx 世界的 location 是异常强大的，毕竟 nginx 的主要应用场景是在负载均衡、API server，在不同 server、location 之间跳转更是家常便饭。利用不同 location 的功能组合，我们可以完成内部调用、流水线方式跳转、外部重定向等几大不同方式，下面将给大家介绍几个主要应用，就当抛砖引玉。</p>\n<h2 id=\"内部调用\"><a class=\"markdownIt-Anchor\" href=\"#内部调用\"></a> 内部调用</h2>\n<p>例如对数据库、内部公共函数的统一接口，可以把它们放到统一的 location 中。通常情况下，为了保护这些内部接口，都会把这些接口设置为 internal 。这么做的最主要好处就是可以让这个内部接口相对独立，不受外界干扰。</p>\n<p>示例代码：</p>\n<pre class=\"line-numbers language-nginx\" data-language=\"nginx\"><code class=\"language-nginx\"><span class=\"token directive\"><span class=\"token keyword\">location</span> = /sum</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\"># 只允许内部调用</span>\n    <span class=\"token directive\"><span class=\"token keyword\">internal</span></span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\"># 这里做了一个求和运算只是一个例子，可以在这里完成一些数据库、</span>\n    <span class=\"token comment\"># 缓存服务器的操作，达到基础模块和业务逻辑分离目的</span>\n    <span class=\"token directive\"><span class=\"token keyword\">content_by_lua_block</span></span> <span class=\"token punctuation\">&#123;</span>\n        local args = ngx.req.get_uri_args()\n        ngx.say(tonumber(args.a) + tonumber(args.b))\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token directive\"><span class=\"token keyword\">location</span> = /app/test</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token directive\"><span class=\"token keyword\">content_by_lua_block</span></span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token directive\"><span class=\"token keyword\">local</span> res = ngx.location.capture(\n                        <span class=\"token string\">\"/sum\"</span>,</span> <span class=\"token punctuation\">&#123;</span>args=<span class=\"token punctuation\">&#123;</span>a=3, b=8<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span>\n                        )\n        ngx.say(\"status:\", res.status, \" response:\", res.body)\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>紧接着，稍微扩充一下，并行请求的效果，示例如下：</p>\n<pre class=\"line-numbers language-nginx\" data-language=\"nginx\"><code class=\"language-nginx\"><span class=\"token directive\"><span class=\"token keyword\">location</span> = /sum</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token directive\"><span class=\"token keyword\">internal</span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token directive\"><span class=\"token keyword\">content_by_lua_block</span></span> <span class=\"token punctuation\">&#123;</span>\n        ngx.sleep(0.1)\n        local args = ngx.req.get_uri_args()\n        ngx.print(tonumber(args.a) + tonumber(args.b))\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token directive\"><span class=\"token keyword\">location</span> = /subduction</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token directive\"><span class=\"token keyword\">internal</span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token directive\"><span class=\"token keyword\">content_by_lua_block</span></span> <span class=\"token punctuation\">&#123;</span>\n        ngx.sleep(0.1)\n        local args = ngx.req.get_uri_args()\n        ngx.print(tonumber(args.a) - tonumber(args.b))\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token directive\"><span class=\"token keyword\">location</span> = /app/test_parallels</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token directive\"><span class=\"token keyword\">content_by_lua_block</span></span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token directive\"><span class=\"token keyword\">local</span> start_time = ngx.now()\n        local res1, res2 = ngx.location.capture_multi(</span> <span class=\"token punctuation\">&#123;</span>\n                        <span class=\"token punctuation\">&#123;</span>\"/sum\", <span class=\"token punctuation\">&#123;</span>args=<span class=\"token punctuation\">&#123;</span>a=3, b=8<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span>,\n                        <span class=\"token punctuation\">&#123;</span>\"/subduction\", <span class=\"token punctuation\">&#123;</span>args=<span class=\"token punctuation\">&#123;</span>a=3, b=8<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span>\n                    <span class=\"token punctuation\">&#125;</span>)\n        ngx.say(\"status:\", res1.status, \" response:\", res1.body)\n        ngx.say(\"status:\", res2.status, \" response:\", res2.body)\n        ngx.say(\"time used:\", ngx.now() - start_time)\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token directive\"><span class=\"token keyword\">location</span> = /app/test_queue</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token directive\"><span class=\"token keyword\">content_by_lua_block</span></span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token directive\"><span class=\"token keyword\">local</span> start_time = ngx.now()\n        local res1 = ngx.location.capture_multi(</span> <span class=\"token punctuation\">&#123;</span>\n                        <span class=\"token punctuation\">&#123;</span>\"/sum\", <span class=\"token punctuation\">&#123;</span>args=<span class=\"token punctuation\">&#123;</span>a=3, b=8<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span>\n                    <span class=\"token punctuation\">&#125;</span>)\n        <span class=\"token directive\"><span class=\"token keyword\">local</span> res2 = ngx.location.capture_multi(</span> <span class=\"token punctuation\">&#123;</span>\n                        <span class=\"token punctuation\">&#123;</span>\"/subduction\", <span class=\"token punctuation\">&#123;</span>args=<span class=\"token punctuation\">&#123;</span>a=3, b=8<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span>\n                    <span class=\"token punctuation\">&#125;</span>)\n        ngx.say(\"status:\", res1.status, \" response:\", res1.body)\n        ngx.say(\"status:\", res2.status, \" response:\", res2.body)\n        ngx.say(\"time used:\", ngx.now() - start_time)\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>测试结果：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">➜  ~ <span class=\"token function\">curl</span> <span class=\"token number\">127.0</span>.0.1/app/test_parallels\nstatus:200 response:11\nstatus:200 response:-5\n<span class=\"token function\">time</span> used:0.10099983215332\n➜  ~ <span class=\"token function\">curl</span> <span class=\"token number\">127.0</span>.0.1/app/test_queue\nstatus:200 response:11\nstatus:200 response:-5\n<span class=\"token function\">time</span> used:0.20199990272522<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>利用 <code>ngx.location.capture_multi</code> 函数，直接完成了两个子请求并行执行。当两个请求没有相互依赖，这种方法可以极大提高查询效率。两个无依赖请求，各自是 100ms，顺序执行需要 200ms，但通过并行执行可以在 100ms 完成两个请求。实际生产中查询时间可能没这么规整，但思想大同小异，这个特性是很有用的。</p>\n<p><img src=\"../images/work_location_flow_1.png\" alt=\"图例\" /></p>\n<p>该方法，可以被广泛应用于广告系统（1：N模型，一个请求，后端从N家供应商中获取条件最优广告）、高并发前端页面展示（并行无依赖界面、降级开关等）。</p>\n<h2 id=\"流水线方式跳转\"><a class=\"markdownIt-Anchor\" href=\"#流水线方式跳转\"></a> 流水线方式跳转</h2>\n<p>现在的网络请求，已经变得越来越拥挤。各种不同 API 、下载请求混杂在一起，就要求不同厂商对下载的动态调整有各种不同的定制策略，而这些策略在一天的不同时间段，规则可能还不一样。这时候我们还可以效仿工厂的流水线模式，逐层过滤、处理。</p>\n<p>示例代码：</p>\n<pre class=\"line-numbers language-nginx\" data-language=\"nginx\"><code class=\"language-nginx\"><span class=\"token directive\"><span class=\"token keyword\">location</span> ~ ^/static/([-_a-zA-Z0-9/]+).jpg</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token directive\"><span class=\"token keyword\">set</span> <span class=\"token variable\">$image_name</span> <span class=\"token variable\">$1</span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token directive\"><span class=\"token keyword\">content_by_lua_block</span></span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token directive\"><span class=\"token keyword\">ngx.exec(\"/download_internal/images/\"</span>\n                .. ngx.var.image_name .. <span class=\"token string\">\".jpg\"</span>)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token directive\"><span class=\"token keyword\">location</span> /download_internal</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token directive\"><span class=\"token keyword\">internal</span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\"># 这里还可以有其他统一的 download 下载设置，例如限速等</span>\n    <span class=\"token directive\"><span class=\"token keyword\">alias</span> ../download</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>注意，ngx.exec 方法与 ngx.redirect 是完全不同的，前者是个纯粹的内部跳转并且没有引入任何额外 HTTP 信号。 这里的两个 location 更像是流水线上工人之间的协作关系。第一环节的工人对完成自己处理部分后，直接交给第二环节处理人（实际上可以有更多环节），它们之间的数据流是定向的。</p>\n<p><img src=\"../images/work_location_flow_2.png\" alt=\"图例\" /></p>\n<h2 id=\"外部重定向\"><a class=\"markdownIt-Anchor\" href=\"#外部重定向\"></a> 外部重定向</h2>\n<p>不知道大家什么时候开始注意的，百度的首页已经不再是 HTTP 协议，它已经全面修改到了 HTTPS 协议上。但是对于大家的输入习惯，估计还是在地址栏里面输入 <code>baidu.com</code> ，回车后发现它会自动跳转到 <code>https://www.baidu.com</code> ，这时候就需要的外部重定向了。</p>\n<pre class=\"line-numbers language-nginx\" data-language=\"nginx\"><code class=\"language-nginx\"><span class=\"token directive\"><span class=\"token keyword\">location</span> = /foo</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token directive\"><span class=\"token keyword\">content_by_lua_block</span></span> <span class=\"token punctuation\">&#123;</span>\n        ngx.say([[I am foo]])\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token directive\"><span class=\"token keyword\">location</span> = /</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token directive\"><span class=\"token keyword\">rewrite_by_lua_block</span></span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token directive\"><span class=\"token keyword\">return</span> ngx.redirect(<span class=\"token string\">'/foo'</span>)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>执行测试，结果如下：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">➜  ~  <span class=\"token function\">curl</span> <span class=\"token number\">127.0</span>.0.1 <span class=\"token parameter variable\">-i</span>\nHTTP/1.1 <span class=\"token number\">302</span> Moved Temporarily\nServer: openresty/1.9.3.2rc3\nDate: Sun, <span class=\"token number\">22</span> Nov <span class=\"token number\">2015</span> <span class=\"token number\">11</span>:04:03 GMT\nContent-Type: text/html\nContent-Length: <span class=\"token number\">169</span>\nConnection: keep-alive\nLocation: /foo\n\n<span class=\"token operator\">&lt;</span>html<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>head<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span>title<span class=\"token operator\">></span><span class=\"token number\">302</span> Found<span class=\"token operator\">&lt;</span>/title<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span>/head<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>body <span class=\"token assign-left variable\">bgcolor</span><span class=\"token operator\">=</span><span class=\"token string\">\"white\"</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>center<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span>h<span class=\"token operator\"><span class=\"token file-descriptor important\">1</span>></span><span class=\"token number\">302</span> Found<span class=\"token operator\">&lt;</span>/h<span class=\"token operator\"><span class=\"token file-descriptor important\">1</span>></span><span class=\"token operator\">&lt;</span>/center<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>hr<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span>center<span class=\"token operator\">></span>openresty/1.9.3.2rc<span class=\"token operator\"><span class=\"token file-descriptor important\">3</span>&lt;</span>/center<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>/body<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>/html<span class=\"token operator\">></span>\n\n➜  ~  <span class=\"token function\">curl</span> <span class=\"token number\">127.0</span>.0.1/foo <span class=\"token parameter variable\">-i</span>\nHTTP/1.1 <span class=\"token number\">200</span> OK\nServer: openresty/1.9.3.2rc3\nDate: Sun, <span class=\"token number\">22</span> Nov <span class=\"token number\">2015</span> <span class=\"token number\">10</span>:43:51 GMT\nContent-Type: text/html\nTransfer-Encoding: chunked\nConnection: keep-alive\n\nI am foo<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>当我们使用浏览器访问页面 <code>http://127.0.0.1</code> 就可以发现浏览器会自动跳转到 <code>http://127.0.0.1/foo</code> 。</p>\n<p>与之前两个应用实例不同的，外部重定向是可以跨域名的。例如从 A 网站跳转到 B 网站是绝对允许的。在 CDN 场景的大量下载应用中，一般分为调度、存储两个重要环节。调度就是通过根据请求方 IP 、下载文件等信息寻找最近、最快节点，应答跳转给请求方完成下载。</p>\n","text":" 与其他 location 配合 nginx 世界的 location 是异常强大的，毕竟 nginx 的主要应用场景是在负载均衡、API server，在不同 server、location 之间跳转更是家常便饭。利用不同 location 的功能组合，我们可以完成内部调用、流...","link":"","photos":[],"count_time":{"symbolsCount":"4.8k","symbolsTime":"4 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%B8%8E%E5%85%B6%E4%BB%96-location-%E9%85%8D%E5%90%88\"><span class=\"toc-text\"> 与其他 location 配合</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%86%85%E9%83%A8%E8%B0%83%E7%94%A8\"><span class=\"toc-text\"> 内部调用</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%B5%81%E6%B0%B4%E7%BA%BF%E6%96%B9%E5%BC%8F%E8%B7%B3%E8%BD%AC\"><span class=\"toc-text\"> 流水线方式跳转</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%A4%96%E9%83%A8%E9%87%8D%E5%AE%9A%E5%90%91\"><span class=\"toc-text\"> 外部重定向</span></a></li></ol></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"不同阶段共享变量","uid":"4b4caaa9aaa4e586708012dea3b735d1","slug":"old_topic/2016-09-17-310","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T07:45:09.155Z","comments":true,"path":"api/articles/old_topic/2016-09-17-310.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":" 不同阶段共享变量 在 OpenResty 的体系中，可以通过共享内存的方式完成不同工作进程的数据共享，可以通过 Lua 模块方式完成单个进程内不同请求的数据共享。如何完成单个请求内不同阶段的数据共享呢？最典型的例子，估计就是在 log 阶段记录一些请求的特殊变量。 ngx.ct...","link":"","photos":[],"count_time":{"symbolsCount":"1.3k","symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"日志输出","uid":"7971c98c6c54521c1f721d0c7bf2b182","slug":"old_topic/2016-09-17-312","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T07:45:09.217Z","comments":true,"path":"api/articles/old_topic/2016-09-17-312.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":" 日志输出 你如何测试和调试你的代码呢？Lua 的两个主力作者是这样回复的： Luiz Henrique de Figueiredo：我主要是一块一块的构建，分块测试。我很少使用调试器。即使用调试器，也只是调试 C 代码。我从不用调试器调试 Lua 代码。对于 Lua 来说，在适...","link":"","photos":[],"count_time":{"symbolsCount":"3.5k","symbolsTime":"3 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}