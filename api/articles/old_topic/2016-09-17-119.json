{"title":"Lua Lapis的模板系统etlua","uid":"e071224e90a59c391520b50afdda50c7","slug":"old_topic/2016-09-17-119","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T07:45:09.187Z","comments":true,"path":"api/articles/old_topic/2016-09-17-119.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":null,"content":"<p>作者：糖果</p>\n<p>主流的WEB开发框架都有模板系统，或是支持第三方的模板插件。Lua Lapis也不例外，也有自己的模板系统，叫做etlua。</p>\n<p>说到模板系统，另外要提一下静态资源的问题，模板的话难免要使用css、js、image这种静态文件，为了扫除一部分障碍先说一下Openresty是如何设定静态目标的。（相对Django相对要简单很多。）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location /static/ &#123;                                                                                                                                                           </span><br><span class=\"line\">  alias static/;                                                                                                                                                              </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在nginx.conf中加入这句话就可以了，在用lapis命令创建工程的时候就已经默认加入了。</p>\n<p>对比看一下django对static的配置。</p>\n<p>Django的静态文件设定，与Nginx的static设定方式存在差异，需要在对应应用的setting文件中进行配置，配置的内容如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SITE_ROOT=os.path.join(os.path.abspath(os.path.dirname(__file__)),<span class=\"string\">&#x27;..&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">STATIC_ROOT = os.path.join(SITE_ROOT,<span class=\"string\">&#x27;static&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">STATIC_URL=<span class=\"string\">&#x27;/static/&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">STATICFILES_DIRS = (</span><br><span class=\"line\"></span><br><span class=\"line\">    (<span class=\"string\">&quot;css&quot;</span>, os.path.join(STATIC_ROOT,<span class=\"string\">&#x27;css&#x27;</span>)),</span><br><span class=\"line\"></span><br><span class=\"line\">    (<span class=\"string\">&quot;js&quot;</span>, os.path.join(STATIC_ROOT,<span class=\"string\">&#x27;js&#x27;</span>)),</span><br><span class=\"line\"></span><br><span class=\"line\">   (<span class=\"string\">&quot;img&quot;</span>, os.path.join(STATIC_ROOT,<span class=\"string\">&#x27;img&#x27;</span>)),</span><br><span class=\"line\"></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<p>在工程的Static目录下，只要添加一个新的静态目录，需追加定义到&quot;STATICFILES_DIRS&quot;中。</p>\n<p>下面就是Lapis使用模板的例子。</p>\n<p>1.创建工程。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir tangguo</span><br><span class=\"line\">cd tangguo</span><br><span class=\"line\">lapis new </span><br></pre></td></tr></table></figure>\n<p>创建一个新工程后，系统创建了三个文件。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.moon mime.types nginx.conf</span><br></pre></td></tr></table></figure>\n<p>具体文件的内容功能不介绍了，之前一篇已经写过了。</p>\n<p>2.创建模板目录与模板文件。</p>\n<p>使用lapis模板，要在默认生成的目录构成的基础上，新创建一个目录：“views” 目录 。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir views</span><br></pre></td></tr></table></figure>\n<p>之后所有的ETLUA模板文件，都会发到这个目录中。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd views</span><br></pre></td></tr></table></figure>\n<p>我们创建一个最简单的模板文件。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">touch index.etlua</span><br><span class=\"line\">echo &quot;say hi&quot; &gt; index.etlua</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">index.etlua</span><br><span class=\"line\">say hi</span><br></pre></td></tr></table></figure>\n<p>3.创建后端LUA代码。</p>\n<p>让Lapis Lua代码支持模板，只要在原有的app.lua中加入一个“开关”和一段处理代码。</p>\n<p>a).  加入一行代码，打开etlua支持。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app:enable(&quot;etlua&quot;)</span><br></pre></td></tr></table></figure>\n<p>b).加入对应的路入处理代码，此处的处理是什么都不做，只渲染一表模板网页。</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app:<span class=\"built_in\">match</span>(<span class=\"string\">&quot;/index&quot;</span>, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(self)</span></span>                                                                                             </span><br><span class=\"line\">       <span class=\"comment\">--这就是LUA Web的风格，只需要一句，Lapis就会去views</span></span><br><span class=\"line\">       <span class=\"comment\">--目录下找到index.etlua，然后进行渲染显示。</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123; render = <span class=\"string\">&quot;index&quot;</span>&#125;                                                                                             </span><br><span class=\"line\"><span class=\"keyword\">end</span>)</span><br></pre></td></tr></table></figure>\n<p>总结：</p>\n<p>以上基本上是最简单的Lapis模板创建流程了。</p>\n<p>回到tangguo目录下，运行lapis server。</p>\n<p>打开浏览器，输入<a href=\"http://127.0.0.1:8000\">http://127.0.0.1:8000</a>，就会在浏览器上显示文本“say hi”。</p>\n<p>PS:在用VIM编辑.etlua文件的时候，默认是不显示语法高亮的，打开高亮需要在第一行加入：</p>\n<!DOCTYPE html>\n<p>PS:转载到其它平台请注明作者姓名及原文链接，请勿用于商业用途。</p>\n","text":"作者：糖果 主流的WEB开发框架都有模板系统，或是支持第三方的模板插件。Lua Lapis也不例外，也有自己的模板系统，叫做etlua。 说到模板系统，另外要提一下静态资源的问题，模板的话难免要使用css、js、image这种静态文件，为了扫除一部分障碍先说一下Openresty...","link":"","photos":[],"count_time":{"symbolsCount":"2.2k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":308,"path":"api/categories/topic.json"}],"tags":[{"name":"lua","slug":"lua","count":124,"path":"api/tags/lua.json"}],"toc":"","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"MoonScript脚本开发简介","uid":"ae80098b451be0ee99995547baaebc08","slug":"old_topic/2016-09-17-115","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T07:45:09.221Z","comments":true,"path":"api/articles/old_topic/2016-09-17-115.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":null,"text":"Coffescript是一种中间的脚本，可以把这种脚本翻译成JavaScript。而MoonScript，是可以翻译成lua语言的中间脚本。 本文简单的介绍的： 如何在VIM中，实现MoonScript语法高亮。 如何简单的编译MoonScript脚本。 1.安装MoonScri...","link":"","photos":[],"count_time":{"symbolsCount":"1.5k","symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":308,"path":"api/categories/topic.json"}],"tags":[{"name":"lua","slug":"lua","count":124,"path":"api/tags/lua.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"DokuWiki系统介绍与部署安装","uid":"320b17a08211ddc564acc990b3ffd7ba","slug":"old_topic/2016-09-17-120","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T07:45:09.216Z","comments":true,"path":"api/articles/old_topic/2016-09-17-120.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":null,"text":"作者：糖果 http://www.lua.ren DokuWiki 这个Wiki系统之前都没有用过，因为最近一个机会使用了DokuWiki，感觉Wiki系统也大有内容。XML-RPC, Atom协议，Wiki的进化越来越强大。DokuWiki是一个轻量级的 Wiki系统。对说需求...","link":"","photos":[],"count_time":{"symbolsCount":"1.3k","symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":308,"path":"api/categories/topic.json"}],"tags":[{"name":"lua","slug":"lua","count":124,"path":"api/tags/lua.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}