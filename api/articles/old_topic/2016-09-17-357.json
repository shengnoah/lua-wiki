{"title":"关于Lua的LazyTable的实现","uid":"a345db901c4262d0d7e3998d536c82d4","slug":"old_topic/2016-09-17-357","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T06:15:59.752Z","comments":true,"path":"api/articles/old_topic/2016-09-17-357.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":null,"content":"<p>作者：糖果</p>\n<h2 id=\"LazyTable源码\"><a href=\"#LazyTable源码\" class=\"headerlink\" title=\"LazyTable源码\"></a>LazyTable源码</h2><figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">local</span> ngx_req = &#123;</span><br><span class=\"line\">      headers = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span></span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"string\">&quot;testcase&quot;</span></span><br><span class=\"line\">      <span class=\"keyword\">end</span>,</span><br><span class=\"line\">      method = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span></span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"string\">&quot;GET&quot;</span></span><br><span class=\"line\">      <span class=\"keyword\">end</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">local</span> lazy_tbl</span><br><span class=\"line\">lazy_tbl = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(tbl, index)</span></span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">setmetatable</span>(tbl, &#123;</span><br><span class=\"line\">    <span class=\"built_in\">__index</span> = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(self, key)</span></span></span><br><span class=\"line\">      <span class=\"keyword\">for</span> k,v <span class=\"keyword\">in</span> <span class=\"built_in\">pairs</span>(index) <span class=\"keyword\">do</span></span><br><span class=\"line\">          <span class=\"built_in\">print</span>(k, v)</span><br><span class=\"line\">      <span class=\"keyword\">end</span></span><br><span class=\"line\">      <span class=\"comment\">--print(key)</span></span><br><span class=\"line\">      <span class=\"keyword\">for</span> k,v <span class=\"keyword\">in</span> <span class=\"built_in\">pairs</span>(<span class=\"built_in\">self</span>) <span class=\"keyword\">do</span></span><br><span class=\"line\">          <span class=\"built_in\">print</span>(k, v)</span><br><span class=\"line\">      <span class=\"keyword\">end</span></span><br><span class=\"line\">      <span class=\"keyword\">local</span> fn = index[key]</span><br><span class=\"line\">      <span class=\"keyword\">if</span> fn <span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"keyword\">do</span></span><br><span class=\"line\">          <span class=\"comment\">--此处fn(self)和fn()，传入self形参与否的效果是一样，table中的匿名函数</span></span><br><span class=\"line\">          <span class=\"comment\">--定义是没有参数的，这个形参是moonscript翻译后加上去的。</span></span><br><span class=\"line\">          <span class=\"keyword\">local</span> res = fn(<span class=\"built_in\">self</span>)</span><br><span class=\"line\">          <span class=\"comment\">--local res = fn(self)        </span></span><br><span class=\"line\">          <span class=\"keyword\">local</span> res = fn()</span><br><span class=\"line\">          <span class=\"built_in\">self</span>[key] = res</span><br><span class=\"line\">          <span class=\"comment\">--实际把return res去掉也不会影响这个程序的运行结果， 在此函数中</span></span><br><span class=\"line\">          <span class=\"comment\">--从了这个return语句再也没有return调用了，而设定工作在self[key] = res这句就已经完成。</span></span><br><span class=\"line\">          <span class=\"keyword\">return</span> res</span><br><span class=\"line\">        <span class=\"keyword\">end</span></span><br><span class=\"line\">      <span class=\"keyword\">end</span></span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">local</span> build_request</span><br><span class=\"line\">build_request = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(unlazy)</span></span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> unlazy == <span class=\"literal\">nil</span> <span class=\"keyword\">then</span></span><br><span class=\"line\">    unlazy = <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"comment\">--unlazy = true</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\">  <span class=\"keyword\">do</span></span><br><span class=\"line\">    <span class=\"keyword\">local</span> t = lazy_tbl(&#123; &#125;, ngx_req)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> unlazy <span class=\"keyword\">then</span></span><br><span class=\"line\">      <span class=\"keyword\">for</span> k <span class=\"keyword\">in</span> <span class=\"built_in\">pairs</span>(ngx_req) <span class=\"keyword\">do</span></span><br><span class=\"line\">        <span class=\"comment\">--这里遍历的ngx_req，但是调用的函数是t的。</span></span><br><span class=\"line\">        <span class=\"keyword\">local</span> _ = t[k]</span><br><span class=\"line\">      <span class=\"keyword\">end</span></span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> t</span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">req = build_request(<span class=\"string\">&quot;unlazy&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> k,v <span class=\"keyword\">in</span> <span class=\"built_in\">pairs</span>(req) <span class=\"keyword\">do</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(k, v)</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"重置setmetatable\"><a href=\"#重置setmetatable\" class=\"headerlink\" title=\"重置setmetatable\"></a>重置setmetatable</h2><p>在一个匿名函数中，return setmetatable,通过对函数形参传入的table的变量的__index属<br>性进行统一修改，而新设定的__index对应函数的形参self和key,分别对应新table的本身，<br>和table对应的key。</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">__index</span> = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(self, key)</span></span></span><br><span class=\"line\"> lazy_tbl(&#123; &#125;, ngx_req)</span><br></pre></td></tr></table></figure>\n<p> self:是ngx_req的引用。<br> key:是ngx_req的key。</p>\n<p> 如果发现,ngx_req的元素类型是function就执行下，然后，把返回结果（字符串）<br> 替换原value值。</p>\n<h2 id=\"核心原理\"><a href=\"#核心原理\" class=\"headerlink\" title=\"核心原理\"></a>核心原理</h2><p> lazy table实现的核心部分是，是在return setmetatable做table复制时，并统一的设定<br> 新table的__index属性， 然后在遍历我们要批量设定的table时，得用table的__index对<br> 应函数中的设置，修改要修改table的成员变量值，把table中，对应key的值是function<br> 的元素，改成key的值等于，这个key对应匿名函数的返回值。 </p>\n<p> 修改table元素的是由setmetatable指定的__index方法来完成。而遍历循环执行table中的<br> 所有匿名函数，由一次外层的循环来完成。</p>\n<h2 id=\"moonscript的lua翻译特征\"><a href=\"#moonscript的lua翻译特征\" class=\"headerlink\" title=\"moonscript的lua翻译特征\"></a>moonscript的lua翻译特征</h2><p> do end 结构是为了让local型的局部变量，在 do end 结构外不可见。</p>\n <figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">do</span> </span><br><span class=\"line\">   <span class=\"keyword\">local</span> tmp = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">end</span> </span><br><span class=\"line\"><span class=\"built_in\">print</span>(tmp)</span><br></pre></td></tr></table></figure>\n<h3 id=\"结果是：nil\"><a href=\"#结果是：nil\" class=\"headerlink\" title=\"结果是：nil\"></a>结果是：nil</h3> <figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">do</span> </span><br><span class=\"line\">   tmp = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">end</span> </span><br><span class=\"line\"><span class=\"built_in\">print</span>(tmp)</span><br></pre></td></tr></table></figure>\n<h3 id=\"结果是：1\"><a href=\"#结果是：1\" class=\"headerlink\" title=\"结果是：1\"></a>结果是：1</h3><p> 下面的代码有明显的moonscript翻译成lua的特征：</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">local</span> test </span><br><span class=\"line\">test = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span></span><br><span class=\"line\">    <span class=\"keyword\">do</span>  </span><br><span class=\"line\">        <span class=\"keyword\">local</span> tmp = <span class=\"string\">&quot;do end&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> tmp </span><br><span class=\"line\">    <span class=\"keyword\">end</span> </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;ret&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">ret = test()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(ret)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"简化后的LazyTable代码\"><a href=\"#简化后的LazyTable代码\" class=\"headerlink\" title=\"简化后的LazyTable代码\"></a>简化后的LazyTable代码</h2><figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">local</span> ngx = &#123; </span><br><span class=\"line\">    url = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span> </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;url&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">end</span>,</span><br><span class=\"line\">    method = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;method&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">end</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">local</span> lazy</span><br><span class=\"line\"></span><br><span class=\"line\">lazy = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(tbl, index)</span></span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">setmetatable</span> (tbl, &#123;</span><br><span class=\"line\">        <span class=\"built_in\">__index</span> = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(self, key)</span></span></span><br><span class=\"line\">            <span class=\"built_in\">print</span>(key)</span><br><span class=\"line\">        <span class=\"keyword\">end</span> </span><br><span class=\"line\">    &#125;)  </span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">local</span> build_request</span><br><span class=\"line\">build_request = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(unlazy)</span></span></span><br><span class=\"line\">        ret = lazy(&#123;&#125;, ngx)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> k <span class=\"keyword\">in</span> <span class=\"built_in\">pairs</span>(ngx) <span class=\"keyword\">do</span></span><br><span class=\"line\">             <span class=\"keyword\">local</span> _ = ret[k]</span><br><span class=\"line\">        <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">build_request(<span class=\"string\">&quot;&quot;</span>)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>lazy的核心是通过lazy函数，重新设置table的__index对应函数<br>，在函数中调用元素值是function类型的函数，用函数返回结果修<br>改当前元素的value值。</p>\n<p>通过LazyTable可把Table表的声明和元素值的动态设定在一个<br>封装调用周期内完成。</p>\n<h2 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h2><p>LazyTable在应用在Lapis的获取nginx变量的一个功能，我们把这个功能<br>移到HiLua演示框架里，看LazyTable如何在实际应用场景应用的。</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">local</span> ngx_request = &#123;</span><br><span class=\"line\">  headers = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> ngx.req.get_headers()</span><br><span class=\"line\">  <span class=\"keyword\">end</span>,</span><br><span class=\"line\">  cmd_meth = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> ngx.var.request_method</span><br><span class=\"line\">  <span class=\"keyword\">end</span>,</span><br><span class=\"line\">  cmd_url = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> ngx.var.request_uri</span><br><span class=\"line\">  <span class=\"keyword\">end</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">local</span> lazy_tbl</span><br><span class=\"line\">lazy_tbl = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(tbl, index)</span></span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">setmetatable</span>(tbl, &#123;</span><br><span class=\"line\">    <span class=\"built_in\">__index</span> = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(self, key)</span></span></span><br><span class=\"line\">      <span class=\"keyword\">local</span> fn = index[key]</span><br><span class=\"line\">      <span class=\"keyword\">if</span> fn <span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"keyword\">do</span>  </span><br><span class=\"line\">          <span class=\"keyword\">local</span> res = fn(<span class=\"built_in\">self</span>)</span><br><span class=\"line\">          <span class=\"built_in\">self</span>[key] = res </span><br><span class=\"line\">          <span class=\"keyword\">return</span> res </span><br><span class=\"line\">        <span class=\"keyword\">end</span> </span><br><span class=\"line\">      <span class=\"keyword\">end</span> </span><br><span class=\"line\">    <span class=\"keyword\">end</span> </span><br><span class=\"line\">  &#125;)  </span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">return</span> ngx_request</span><br></pre></td></tr></table></figure>\n\n<p>Moonscript是有OO的类的组织结构，但是用Moonscript写的Lapis框架，有的一些文件并没有<br>按类的形式组织，比如上面这个截取的代码，最后返回的就是一个ngx_request的table，通过<br>引用table中的函数类型元素进行调用，即可返回你想要的数据，这个类似之前lapis ES的写法<br>一个孙数的调用过程，可以整个组织成一个table声明的过程，在其过程中就完成了各种行为的<br>调用，看起来很整洁，调用时序隐含在声明里，而不是传统的若干个函数过程顺序调用的方式。</p>\n<p>在一个数据结构中定义若干函数的调用，要是和路由器比较的话，路由器需要正则匹配判断<br>而这个是顺序执行。</p>\n<p>在HiLua中的调用形式如下：</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">local</span> req = <span class=\"built_in\">require</span> <span class=\"string\">&quot;nginx&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">app:get(<span class=\"string\">&quot;/hilua&quot;</span>, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(request,id)</span></span></span><br><span class=\"line\">    ngx.say(<span class=\"built_in\">type</span>(req.cmd_meth))</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<p>nginx中ngx_request取得HTTP请求阶段的各种变量,这个数据结构在HiLua进行路由匹配处理<br>从这个数据结构中，取得相关变量。</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">local</span> req = <span class=\"built_in\">require</span> <span class=\"string\">&quot;nginx&quot;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Route:run</span><span class=\"params\">(router)</span></span></span><br><span class=\"line\">        <span class=\"keyword\">local</span> url = req.cmd_url()</span><br><span class=\"line\">        <span class=\"keyword\">local</span> method = req.cmd_meth()</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<p>LazyTable本身是一种设计实现的思路，可以用Moonscript实现，也可以用Lua实现，也可以<br>C/CPP实现。</p>\n","text":"作者：糖果 LazyTable源码1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465lo...","link":"","photos":[],"count_time":{"symbolsCount":"4.4k","symbolsTime":"4 mins."},"categories":[{"name":"topic","slug":"topic","count":308,"path":"api/categories/topic.json"}],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#LazyTable%E6%BA%90%E7%A0%81\"><span class=\"toc-text\">LazyTable源码</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%87%8D%E7%BD%AEsetmetatable\"><span class=\"toc-text\">重置setmetatable</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">核心原理</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#moonscript%E7%9A%84lua%E7%BF%BB%E8%AF%91%E7%89%B9%E5%BE%81\"><span class=\"toc-text\">moonscript的lua翻译特征</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BB%93%E6%9E%9C%E6%98%AF%EF%BC%9Anil\"><span class=\"toc-text\">结果是：nil</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BB%93%E6%9E%9C%E6%98%AF%EF%BC%9A1\"><span class=\"toc-text\">结果是：1</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%AE%80%E5%8C%96%E5%90%8E%E7%9A%84LazyTable%E4%BB%A3%E7%A0%81\"><span class=\"toc-text\">简化后的LazyTable代码</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF\"><span class=\"toc-text\">应用场景</span></a></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"MoonScript实现Map按值排序","uid":"8df307659316a77ab2a33659c2147085","slug":"old_topic/2016-09-17-353","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T06:15:59.752Z","comments":true,"path":"api/articles/old_topic/2016-09-17-353.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":null,"text":"作者：糖果 MoonScript代码：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051board = &#123; [&#x27;0.0.0....","link":"","photos":[],"count_time":{"symbolsCount":"2k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":308,"path":"api/categories/topic.json"}],"tags":[],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"LUA遍历所有Table变量元素与cjson.null的意义","uid":"49340cb296849c990c24a5280443ee37","slug":"old_topic/2016-09-17-359","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T06:15:59.752Z","comments":true,"path":"api/articles/old_topic/2016-09-17-359.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":null,"text":"作者：糖果 Lapis使用JSON解析的代层库就是CJSON。 遍历Table变量的所有元素。util.moon 12345678910111213json_encodable = (obj, seen=&#123;&#125;) -&gt; switch type obj wh...","link":"","photos":[],"count_time":{"symbolsCount":"6.9k","symbolsTime":"6 mins."},"categories":[{"name":"topic","slug":"topic","count":308,"path":"api/categories/topic.json"}],"tags":[],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}