{"title":"关于Lua的LazyTable的实现","uid":"a345db901c4262d0d7e3998d536c82d4","slug":"old_topic/2016-09-17-357","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T07:45:09.207Z","comments":true,"path":"api/articles/old_topic/2016-09-17-357.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<p>作者：糖果</p>\n<h2 id=\"lazytable源码\"><a class=\"markdownIt-Anchor\" href=\"#lazytable源码\"></a> LazyTable源码</h2>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\"><span class=\"token keyword\">local</span> ngx_req <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n      headers <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n          <span class=\"token keyword\">return</span> <span class=\"token string\">\"testcase\"</span>\n      <span class=\"token keyword\">end</span><span class=\"token punctuation\">,</span>\n      method <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n          <span class=\"token keyword\">return</span> <span class=\"token string\">\"GET\"</span>\n      <span class=\"token keyword\">end</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span>\n\n\n<span class=\"token keyword\">local</span> lazy_tbl\nlazy_tbl <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>tbl<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">setmetatable</span><span class=\"token punctuation\">(</span>tbl<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>\n    __index <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">for</span> k<span class=\"token punctuation\">,</span>v <span class=\"token keyword\">in</span> <span class=\"token function\">pairs</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>\n          <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">end</span>\n      <span class=\"token comment\">--print(key)</span>\n      <span class=\"token keyword\">for</span> k<span class=\"token punctuation\">,</span>v <span class=\"token keyword\">in</span> <span class=\"token function\">pairs</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>\n          <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">end</span>\n      <span class=\"token keyword\">local</span> fn <span class=\"token operator\">=</span> index<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span>\n      <span class=\"token keyword\">if</span> fn <span class=\"token keyword\">then</span>\n        <span class=\"token keyword\">do</span>\n          <span class=\"token comment\">--此处fn(self)和fn()，传入self形参与否的效果是一样，table中的匿名函数</span>\n          <span class=\"token comment\">--定义是没有参数的，这个形参是moonscript翻译后加上去的。</span>\n          <span class=\"token keyword\">local</span> res <span class=\"token operator\">=</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span>\n          <span class=\"token comment\">--local res = fn(self)        </span>\n          <span class=\"token keyword\">local</span> res <span class=\"token operator\">=</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n          self<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> res\n          <span class=\"token comment\">--实际把return res去掉也不会影响这个程序的运行结果， 在此函数中</span>\n          <span class=\"token comment\">--从了这个return语句再也没有return调用了，而设定工作在self[key] = res这句就已经完成。</span>\n          <span class=\"token keyword\">return</span> res\n        <span class=\"token keyword\">end</span>\n      <span class=\"token keyword\">end</span>\n    <span class=\"token keyword\">end</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span>\n\n\n<span class=\"token keyword\">local</span> build_request\nbuild_request <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>unlazy<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">if</span> unlazy <span class=\"token operator\">==</span> <span class=\"token keyword\">nil</span> <span class=\"token keyword\">then</span>\n    unlazy <span class=\"token operator\">=</span> <span class=\"token keyword\">false</span>\n    <span class=\"token comment\">--unlazy = true</span>\n  <span class=\"token keyword\">end</span>\n  <span class=\"token keyword\">do</span>\n    <span class=\"token keyword\">local</span> t <span class=\"token operator\">=</span> <span class=\"token function\">lazy_tbl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> ngx_req<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> unlazy <span class=\"token keyword\">then</span>\n      <span class=\"token keyword\">for</span> k <span class=\"token keyword\">in</span> <span class=\"token function\">pairs</span><span class=\"token punctuation\">(</span>ngx_req<span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>\n        <span class=\"token comment\">--这里遍历的ngx_req，但是调用的函数是t的。</span>\n        <span class=\"token keyword\">local</span> _ <span class=\"token operator\">=</span> t<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span>\n      <span class=\"token keyword\">end</span>\n    <span class=\"token keyword\">end</span>\n    <span class=\"token keyword\">return</span> t\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span>\n\n\nreq <span class=\"token operator\">=</span> <span class=\"token function\">build_request</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"unlazy\"</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">for</span> k<span class=\"token punctuation\">,</span>v <span class=\"token keyword\">in</span> <span class=\"token function\">pairs</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"重置setmetatable\"><a class=\"markdownIt-Anchor\" href=\"#重置setmetatable\"></a> 重置setmetatable</h2>\n<p>在一个匿名函数中，return setmetatable,通过对函数形参传入的table的变量的__index属<br />\n性进行统一修改，而新设定的__index对应函数的形参self和key,分别对应新table的本身，<br />\n和table对应的key。</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">__index <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span>\n <span class=\"token function\">lazy_tbl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> ngx_req<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>self:是ngx_req的引用。<br />\nkey:是ngx_req的key。</p>\n<p>如果发现,ngx_req的元素类型是function就执行下，然后，把返回结果（字符串）<br />\n替换原value值。</p>\n<h2 id=\"核心原理\"><a class=\"markdownIt-Anchor\" href=\"#核心原理\"></a> 核心原理</h2>\n<p>lazy table实现的核心部分是，是在return setmetatable做table复制时，并统一的设定<br />\n新table的__index属性， 然后在遍历我们要批量设定的table时，得用table的__index对<br />\n应函数中的设置，修改要修改table的成员变量值，把table中，对应key的值是function<br />\n的元素，改成key的值等于，这个key对应匿名函数的返回值。</p>\n<p>修改table元素的是由setmetatable指定的__index方法来完成。而遍历循环执行table中的<br />\n所有匿名函数，由一次外层的循环来完成。</p>\n<h2 id=\"moonscript的lua翻译特征\"><a class=\"markdownIt-Anchor\" href=\"#moonscript的lua翻译特征\"></a> moonscript的lua翻译特征</h2>\n<p>do end 结构是为了让local型的局部变量，在 do end 结构外不可见。</p>\n <pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\"><span class=\"token keyword\">do</span> \n   <span class=\"token keyword\">local</span> tmp <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n<span class=\"token keyword\">end</span> \n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>tmp<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"结果是nil\"><a class=\"markdownIt-Anchor\" href=\"#结果是nil\"></a> 结果是：nil</h3>\n <pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\"><span class=\"token keyword\">do</span> \n   tmp <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n<span class=\"token keyword\">end</span> \n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>tmp<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"结果是1\"><a class=\"markdownIt-Anchor\" href=\"#结果是1\"></a> 结果是：1</h3>\n<p>下面的代码有明显的moonscript翻译成lua的特征：</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\"><span class=\"token keyword\">local</span> test \ntest <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">do</span>  \n        <span class=\"token keyword\">local</span> tmp <span class=\"token operator\">=</span> <span class=\"token string\">\"do end\"</span>\n        <span class=\"token keyword\">return</span> tmp \n    <span class=\"token keyword\">end</span> \n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"ret\"</span>\n<span class=\"token keyword\">end</span>\n\nret <span class=\"token operator\">=</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"简化后的lazytable代码\"><a class=\"markdownIt-Anchor\" href=\"#简化后的lazytable代码\"></a> 简化后的LazyTable代码</h2>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\"><span class=\"token keyword\">local</span> ngx <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> \n    url <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> \n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"url\"</span>\n    <span class=\"token keyword\">end</span><span class=\"token punctuation\">,</span>\n    method <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"method\"</span>\n    <span class=\"token keyword\">end</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">local</span> lazy\n\nlazy <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>tbl<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">setmetatable</span> <span class=\"token punctuation\">(</span>tbl<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>\n        __index <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span>\n            <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">end</span> \n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>  \n<span class=\"token keyword\">end</span>\n\n\n<span class=\"token keyword\">local</span> build_request\nbuild_request <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>unlazy<span class=\"token punctuation\">)</span>\n        ret <span class=\"token operator\">=</span> <span class=\"token function\">lazy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> ngx<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">for</span> k <span class=\"token keyword\">in</span> <span class=\"token function\">pairs</span><span class=\"token punctuation\">(</span>ngx<span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>\n             <span class=\"token keyword\">local</span> _ <span class=\"token operator\">=</span> ret<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span>\n\n<span class=\"token function\">build_request</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>lazy的核心是通过lazy函数，重新设置table的__index对应函数<br />\n，在函数中调用元素值是function类型的函数，用函数返回结果修<br />\n改当前元素的value值。</p>\n<p>通过LazyTable可把Table表的声明和元素值的动态设定在一个<br />\n封装调用周期内完成。</p>\n<h2 id=\"应用场景\"><a class=\"markdownIt-Anchor\" href=\"#应用场景\"></a> 应用场景</h2>\n<p>LazyTable在应用在Lapis的获取nginx变量的一个功能，我们把这个功能<br />\n移到HiLua演示框架里，看LazyTable如何在实际应用场景应用的。</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\"><span class=\"token keyword\">local</span> ngx_request <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  headers <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> ngx<span class=\"token punctuation\">.</span>req<span class=\"token punctuation\">.</span><span class=\"token function\">get_headers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">end</span><span class=\"token punctuation\">,</span>\n  cmd_meth <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> ngx<span class=\"token punctuation\">.</span>var<span class=\"token punctuation\">.</span>request_method\n  <span class=\"token keyword\">end</span><span class=\"token punctuation\">,</span>\n  cmd_url <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> ngx<span class=\"token punctuation\">.</span>var<span class=\"token punctuation\">.</span>request_uri\n  <span class=\"token keyword\">end</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">local</span> lazy_tbl\nlazy_tbl <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>tbl<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">setmetatable</span><span class=\"token punctuation\">(</span>tbl<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>\n    __index <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">local</span> fn <span class=\"token operator\">=</span> index<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span>\n      <span class=\"token keyword\">if</span> fn <span class=\"token keyword\">then</span>\n        <span class=\"token keyword\">do</span>  \n          <span class=\"token keyword\">local</span> res <span class=\"token operator\">=</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span>\n          self<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> res \n          <span class=\"token keyword\">return</span> res \n        <span class=\"token keyword\">end</span> \n      <span class=\"token keyword\">end</span> \n    <span class=\"token keyword\">end</span> \n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>  \n<span class=\"token keyword\">end</span>\n\n<span class=\"token keyword\">return</span> ngx_request<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>Moonscript是有OO的类的组织结构，但是用Moonscript写的Lapis框架，有的一些文件并没有<br />\n按类的形式组织，比如上面这个截取的代码，最后返回的就是一个ngx_request的table，通过<br />\n引用table中的函数类型元素进行调用，即可返回你想要的数据，这个类似之前lapis ES的写法<br />\n一个孙数的调用过程，可以整个组织成一个table声明的过程，在其过程中就完成了各种行为的<br />\n调用，看起来很整洁，调用时序隐含在声明里，而不是传统的若干个函数过程顺序调用的方式。</p>\n<p>在一个数据结构中定义若干函数的调用，要是和路由器比较的话，路由器需要正则匹配判断<br />\n而这个是顺序执行。</p>\n<p>在HiLua中的调用形式如下：</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\"><span class=\"token keyword\">local</span> req <span class=\"token operator\">=</span> require <span class=\"token string\">\"nginx\"</span>\n\napp<span class=\"token punctuation\">:</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/hilua\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span>id<span class=\"token punctuation\">)</span>\n    ngx<span class=\"token punctuation\">.</span><span class=\"token function\">say</span><span class=\"token punctuation\">(</span><span class=\"token function\">type</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>cmd_meth<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>nginx中ngx_request取得HTTP请求阶段的各种变量,这个数据结构在HiLua进行路由匹配处理<br />\n从这个数据结构中，取得相关变量。</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\"><span class=\"token keyword\">local</span> req <span class=\"token operator\">=</span> require <span class=\"token string\">\"nginx\"</span>\n<span class=\"token keyword\">function</span> Route<span class=\"token punctuation\">:</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span>router<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">local</span> url <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span><span class=\"token function\">cmd_url</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">local</span> method <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span><span class=\"token function\">cmd_meth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>LazyTable本身是一种设计实现的思路，可以用Moonscript实现，也可以用Lua实现，也可以<br />\nC/CPP实现。</p>\n","text":"作者：糖果 LazyTable源码 local ngx_req = &#123; headers = function() return \"testcase\" end, method = function() return \"GET\" end, &#125; local lazy...","link":"","photos":[],"count_time":{"symbolsCount":"4.2k","symbolsTime":"4 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#lazytable%E6%BA%90%E7%A0%81\"><span class=\"toc-text\"> LazyTable源码</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%87%8D%E7%BD%AEsetmetatable\"><span class=\"toc-text\"> 重置setmetatable</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86\"><span class=\"toc-text\"> 核心原理</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#moonscript%E7%9A%84lua%E7%BF%BB%E8%AF%91%E7%89%B9%E5%BE%81\"><span class=\"toc-text\"> moonscript的lua翻译特征</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BB%93%E6%9E%9C%E6%98%AFnil\"><span class=\"toc-text\"> 结果是：nil</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BB%93%E6%9E%9C%E6%98%AF1\"><span class=\"toc-text\"> 结果是：1</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%AE%80%E5%8C%96%E5%90%8E%E7%9A%84lazytable%E4%BB%A3%E7%A0%81\"><span class=\"toc-text\"> 简化后的LazyTable代码</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF\"><span class=\"toc-text\"> 应用场景</span></a></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"MoonScript如何使用RESTY-HTTP","uid":"f1a8029c8728847e5961c7e694008279","slug":"old_topic/2016-09-17-356","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T07:45:09.229Z","comments":true,"path":"api/articles/old_topic/2016-09-17-356.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"作者：糖果 在OpenResty中发起HTTP请求，一般情况下，有两种方式： 1.通过内部Proxy。 2.使用RESTY-HTTP库发起访问。 Lapis使用的是interal proxy,之前文章有提到，下面提到的是RESTY-HTTP的MoonScript调用 实现。 RE...","link":"","photos":[],"count_time":{"symbolsCount":"1.5k","symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Django Guide","uid":"6621c44acdf5f08884e1627cc08cfbf8","slug":"old_topic/2016-09-17-36","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T07:45:09.205Z","comments":true,"path":"api/articles/old_topic/2016-09-17-36.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"给Django做一个索引。 Form http://www.djangobook.com/en/2.0/chapter07.html 打字少，功能实现快。 开发备忘录 1.创建空工程 django-admin.py startproject djproject 2.创建空应用 p...","link":"","photos":[],"count_time":{"symbolsCount":"1.2k","symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua","slug":"lua","count":124,"path":"api/tags/lua.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}