{"title":"Lua功能模块之“加密”","uid":"70c113f1b89df0b719f9ae169720a491","slug":"old_topic/2016-09-17-147","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T07:45:09.150Z","comments":true,"path":"api/articles/old_topic/2016-09-17-147.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":null,"content":"<p>作者：糖果</p>\n<p>在Lua开发的世界中，有很多开源的模块，分布在一些网站（比如开普勒项目），github上，有的都已经配置好了，可以向python的pip工具一样，只不过在lua世界中使用luarocks安装工具快速的安装。</p>\n<p>我们在开发的工作中，难免要对一些数据进行加密处理，而加密模块的使用有是就必不可少。</p>\n<p>在lua官方的WIKI列表中就列出了，很多lua程序写的加密库，这写加密库有的是用纯lua写的，也有用lua调用C的程序实现加密。不过有些时候甄选这些库还是需要花一些时间精力，只是需要测试一下这是加密算是否是好用的</p>\n<p>这是lua组织列出的一览列表。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://lua-users.org/wiki/CryptographyStuff</span><br></pre></td></tr></table></figure>\n<p>说一下为什么要加密，我们面临的任务是什么！我们现在面临的任务是，要对一段字符串进行sha256算法加密。</p>\n<p>我们从列表中选出了几个支持sha256加密的包，并说明一下这几个工具包。</p>\n<h3>1.SecureHashAlgorithm和SecureHashAlgorithmBW</h3> \n这个工具包是支持sha256加密的，而且是纯lua方法的实现，问题是，这两个包分别依赖lua5.2和lua5.3。\n<p>而我们系统的运行环境是lua5.1，因为大部分的生产环境都是lua5.1，因为历史原因暂时没法改变。如果要把5.2的程序移植到5.1下运行，还需要移植一个lua5.2才独有的包，这是lua5.2升级之后才有的部件：bit32,而在lua5.3中又将这个部件去掉了,移植的动力不大，暂时不使用这个包。</p>\n<h3>2.Lcrypt</h3> \n<p>这个包不是纯lua的实现，底层加密用的是C语言，而且额外还有依赖另外另个工具包 libTomCrypt和libTomMath，这两个包的官网已经被和谐了，github上有源码，所以要想让这个包正常运行需要手动make安装3个源码工程，还是算了，有时间的时候再装好测试一下，先暂时不用。</p>\n<p>网站：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://www.eder.us/projects/lcrypt/</span><br></pre></td></tr></table></figure>\n<h3>3.LuaCrypto</h3> \n<p>这个包的安装用的是luarocks，就比较简单了 luarocks install luacrypto ，我们选用这个包进行加密处理。</p>\n<p>LuaCrypto其实是openssl库的前端lua调用，依赖openssl，openssl库显然会支持sha256加密，相对也比一般的第三方实现更可靠。</p>\n<p>写一个简单的加密程序：</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">local</span> crypto = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;crypto&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">local</span> hmac = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;crypto.hmac&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">local</span> ret = hmac.digest(<span class=\"string\">&quot;sha256&quot;</span>, <span class=\"string\">&quot;abcdefg&quot;</span>, <span class=\"string\">&quot;hmackey&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(ret)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>ret的返回结果是，如下这个字符串。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">704d25d116a700656bfa5a6a7b0f462efdc7df828cdbafa6fbf8b39a12e83f24</span><br></pre></td></tr></table></figure>\n<p>我们需要改造一下代码，在调用digest的时候指定输出的形式是raw二进制数据形式，然后在编码成base64的数据形式。</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">local</span> ret = hmac.digest(<span class=\"string\">&quot;sha256&quot;</span>, <span class=\"string\">&quot;abcdefg&quot;</span>, <span class=\"string\">&quot;hmackey&quot;</span>,<span class=\"built_in\">rawequal</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(ret)</span><br></pre></td></tr></table></figure>\n<p>这时候的输出结果是：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cE0l0RanAGVr+lpqew9GLv3H34KM26+m+/izmhLoPyQ=</span><br></pre></td></tr></table></figure>\n<p>lua-base64使用的是下面的库，lua库就是这样，有很多功能程序有很多的实现，并且很多非官方的第三方实现。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://github.com/toastdriven/lua-base64</span><br></pre></td></tr></table></figure>\n<p>=============================================================</p>\n<p>同样的我们再写一个php的测试程序：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$ret</span> = <span class=\"title function_ invoke__\">hash_hmac</span>(<span class=\"string\">&#x27;sha256&#x27;</span>, <span class=\"string\">&#x27;abcdefg&#x27;</span>, <span class=\"string\">&#x27;hmackey&#x27;</span>, <span class=\"literal\">false</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">print</span>(<span class=\"variable\">$ret</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<p>ret的返回结果是，如下这个字符串。</p>\n<p>704d25d116a700656bfa5a6a7b0f462efdc7df828cdbafa6fbf8b39a12e83f24</p>\n<p>没有确认php的hash_hamc是否底层调用的也是openssl的加密算法，至少从目前的测试结果来看，两种语言加密返回的结果是一致的。</p>\n<p>我们同样需要改造一下php代码的调用加密的方式：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$ret</span> = <span class=\"title function_ invoke__\">hash_hmac</span>(<span class=\"string\">&#x27;sha256&#x27;</span>, <span class=\"string\">&#x27;abcdefg&#x27;</span>, <span class=\"string\">&#x27;hmackey&#x27;</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">print</span>(<span class=\"variable\">$ret</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<p>函数调用的最后一个参数，true表示用raw二进制形式输出，false是以16进制字符串的形式输出。</p>\n<p>最后的结果是：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cE0l0RanAGVr+lpqew9GLv3H34KM26+m+/izmhLoPyQ=</span><br></pre></td></tr></table></figure>\n<p>=============================================================</p>\n<p>我们测试一下python的sha256加密：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> hmac</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> base64</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> hashlib</span><br><span class=\"line\"></span><br><span class=\"line\">ret = base64.b64encode(hmac.new(<span class=\"string\">&#x27;hmackey&#x27;</span>, <span class=\"string\">&#x27;abcdefg&#x27;</span>, hashlib.sha256).digest())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(ret)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>最后的输出结果是：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cE0l0RanAGVr+lpqew9GLv3H34KM26+m+/izmhLoPyQ=</span><br></pre></td></tr></table></figure>\n<p>通过这次测试我们会发现，lua的库很多都是第三方程序员实现的，并且有很多的实现版本，而php和python的库，相对更统一。</p>\n<p>如果你真的花了时间去了解lua，能驾驭lua，可以有精力去解决前期遇到的问题，排除库的匹配查找的问题，lua处理的效率会慢慢的展现出来，在之后我们会举出例子来说明lua的好处和不足。</p>\n<p>PS:转载到其它平台请注明作者姓名及原文链接。</p>\n<p><a href=\"http://www.lua.ren\">http://www.lua.ren</a></p>\n","text":"作者：糖果 在Lua开发的世界中，有很多开源的模块，分布在一些网站（比如开普勒项目），github上，有的都已经配置好了，可以向python的pip工具一样，只不过在lua世界中使用luarocks安装工具快速的安装。 我们在开发的工作中，难免要对一些数据进行加密处理，而加密模块...","link":"","photos":[],"count_time":{"symbolsCount":"2.7k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":308,"path":"api/categories/topic.json"}],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">1.SecureHashAlgorithm和SecureHashAlgorithmBW</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">2.Lcrypt</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">3.LuaCrypto</span></a></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Windows下LUA配置环境变量(LDT)","uid":"7f033721bb83cf2964dc352671260885","slug":"old_topic/2016-09-17-149","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T07:45:09.184Z","comments":true,"path":"api/articles/old_topic/2016-09-17-149.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":null,"text":"下面举个例子，在LDT下，如保设定环境变量，让IDE知道Lua安装的位置。 1LUA_CPATH=/usr/lib64/lua/5.1/?.so;?.so;/home/merge/1209/Core/lua_client/?.so;?.so;/usr/local/lib/lua/...","link":"","photos":[],"count_time":{"symbolsCount":277,"symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":308,"path":"api/categories/topic.json"}],"tags":[],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Lua中ipair和pair关键字的区别是什么？","uid":"9898726b61c279db4684cd03b2a439c0","slug":"old_topic/2016-09-17-151","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T07:45:09.210Z","comments":true,"path":"api/articles/old_topic/2016-09-17-151.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":null,"text":"ipair是从key=1，开始累加，遇到val是nil就结束循环。 pair输出的结果和table定义的顺序是一致的(非数组不保证与声明的顺序一致)。 pairs()可以遍历整个table，即包括数组及非数组部分。 ipairs()函数用于遍历table中的数组部分。 i= in...","link":"","photos":[],"count_time":{"symbolsCount":"2.8k","symbolsTime":"3 mins."},"categories":[{"name":"topic","slug":"topic","count":308,"path":"api/categories/topic.json"}],"tags":[],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}