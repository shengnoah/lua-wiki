{"title":"Nginx+Lua返回JSON类型数据","uid":"054f428f76705613481e9cfa45f6bed2","slug":"old_topic/2016-09-17-Nginx+Lua返回JSON类型数据","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T07:45:09.194Z","comments":true,"path":"api/articles/old_topic/2016-09-17-Nginx+Lua返回JSON类型数据.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<p>作者：糖果</p>\n<p>Nginx返回JSON数据，一种是直接在配置文件里设置，一种是通过Lua代码封装完成，讲Nginx中执行Lua返回JSON的关键，一个用API函数ngx.say，同时配合json.encode对JSON格式的字符串进行编码，然后设定响应头信息的类型。</p>\n<h1 id=\"nginx-conf中返回json的方式\"><a class=\"markdownIt-Anchor\" href=\"#nginx-conf中返回json的方式\"></a> Nginx Conf中返回JSON的方式</h1>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">location <span class=\"token operator\">/</span>json<span class=\"token operator\">/</span> <span class=\"token punctuation\">&#123;</span>\n\n\t    default_type application<span class=\"token operator\">/</span>json<span class=\"token punctuation\">;</span>\n\t    add_header Content<span class=\"token operator\">-</span>Type <span class=\"token string\">'text/html; charset=utf-8'</span><span class=\"token punctuation\">;</span>\n\t    <span class=\"token keyword\">return</span> <span class=\"token number\">200</span> <span class=\"token string\">'&#123;\"about\":\"糖果的Lua教程,\"sites\":\"lua.ren\"&#125;'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h1 id=\"nginx-lua返回json的方式\"><a class=\"markdownIt-Anchor\" href=\"#nginx-lua返回json的方式\"></a> Nginx Lua返回JSON的方式</h1>\n<p>三步操作：</p>\n<h2 id=\"1设置http的响应头信息\"><a class=\"markdownIt-Anchor\" href=\"#1设置http的响应头信息\"></a> 1.设置HTTP的响应头信息：</h2>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">ngx<span class=\"token punctuation\">.</span>header<span class=\"token punctuation\">[</span><span class=\"token string\">'Content-Type'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'application/json; charset=utf-8'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h2 id=\"2jsonencodelua的table型变量\"><a class=\"markdownIt-Anchor\" href=\"#2jsonencodelua的table型变量\"></a> 2.json.encode(“Lua的Table型变量”)：</h2>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">json <span class=\"token operator\">=</span> require <span class=\"token string\">\"cjson\"</span> \nres_json_data <span class=\"token operator\">=</span> json<span class=\"token punctuation\">.</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h2 id=\"3用say函数显示经过encode的json数据\"><a class=\"markdownIt-Anchor\" href=\"#3用say函数显示经过encode的json数据\"></a> 3.用say函数显示，经过encode的JSON数据。</h2>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">ngx<span class=\"token punctuation\">.</span><span class=\"token function\">say</span><span class=\"token punctuation\">(</span>res_json_data<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>用Lua实现以上3个步骤，就实同了JSON数据返回。</p>\n<h2 id=\"完整代码片段以下\"><a class=\"markdownIt-Anchor\" href=\"#完整代码片段以下\"></a> 完整代码片段，以下：</h2>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">json <span class=\"token operator\">=</span> require <span class=\"token string\">\"cjson\"</span>\nngx<span class=\"token punctuation\">.</span>header<span class=\"token punctuation\">[</span><span class=\"token string\">'Content-Type'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'application/json; charset=utf-8'</span>\nngx<span class=\"token punctuation\">.</span><span class=\"token function\">say</span><span class=\"token punctuation\">(</span>json<span class=\"token punctuation\">.</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>下面的内容就是用Lua封装了几个函数，通过封装快实现了JSON数据的返回。</p>\n<p>一般的Python的WEB框架，都可以的指定返回JSON数据，基本的原理，还是通过指定返回JSON格式的字符串，并且设定HTTP返回时header的Content-Type属性为application/json，来实现返回JSON数据的目地。</p>\n<p>而在Openresty+Lua的框架模式下，不用同时指返回的header类，直接在路由对应的匿名函数中，指定返回一个table类型的即可， 在web框架部分区分判断，如果用户返回的是table类型的数据，直接就用cjson这种库，把table数据渲染成JSON返回。</p>\n<p>依Blues演示框架为例：</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">app<span class=\"token punctuation\">.</span>run <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        fun <span class=\"token operator\">=</span> Route<span class=\"token punctuation\">:</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">.</span>router<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> fun <span class=\"token keyword\">then</span>\n            <span class=\"token keyword\">local</span> ret <span class=\"token operator\">=</span> <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">.</span>req<span class=\"token punctuation\">,</span> app<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">local</span> rtype <span class=\"token operator\">=</span> <span class=\"token function\">type</span><span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span> rtype <span class=\"token operator\">==</span> <span class=\"token string\">\"table\"</span>  <span class=\"token keyword\">then</span>\n                json <span class=\"token operator\">=</span> require <span class=\"token string\">\"cjson\"</span>\n                ngx<span class=\"token punctuation\">.</span>header<span class=\"token punctuation\">[</span><span class=\"token string\">'Content-Type'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'application/json; charset=utf-8'</span>\n                ngx<span class=\"token punctuation\">.</span><span class=\"token function\">say</span><span class=\"token punctuation\">(</span>json<span class=\"token punctuation\">.</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">end</span> \n        <span class=\"token keyword\">end</span> \n\n<span class=\"token keyword\">end</span> <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>显然，这里只是对返回值的类型是“talbe”的做了处理，也可以对返回类型是“string”或是其它类型的数据做处理。</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">app<span class=\"token punctuation\">.</span>run <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        fun <span class=\"token operator\">=</span> Route<span class=\"token punctuation\">:</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">.</span>router<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> fun <span class=\"token keyword\">then</span>\n            <span class=\"token keyword\">local</span> ret <span class=\"token operator\">=</span> <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">.</span>req<span class=\"token punctuation\">,</span> app<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">local</span> rtype <span class=\"token operator\">=</span> <span class=\"token function\">type</span><span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span> rtype <span class=\"token operator\">==</span> <span class=\"token string\">\"table\"</span>  <span class=\"token keyword\">then</span>\n                json <span class=\"token operator\">=</span> require <span class=\"token string\">\"cjson\"</span>\n                ngx<span class=\"token punctuation\">.</span>header<span class=\"token punctuation\">[</span><span class=\"token string\">'Content-Type'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'application/json; charset=utf-8'</span>\n                ngx<span class=\"token punctuation\">.</span><span class=\"token function\">say</span><span class=\"token punctuation\">(</span>json<span class=\"token punctuation\">.</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">end</span>\n            <span class=\"token keyword\">if</span> rtype <span class=\"token operator\">==</span> <span class=\"token string\">\"string\"</span>  <span class=\"token keyword\">then</span>\n                ngx<span class=\"token punctuation\">.</span>header<span class=\"token punctuation\">[</span><span class=\"token string\">'Content-Type'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'text/plain; charset=UTF-8'</span>\n                ngx<span class=\"token punctuation\">.</span><span class=\"token function\">say</span><span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">end</span>\n        <span class=\"token keyword\">end</span>\n        <span class=\"token function\">le</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Application.app.run'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>没有把这种分类型处理，单独封装成一个方法，简单用这段代码说明问题。</p>\n<p>上面是框架中的代码实现，再来看看如何在测试项目中驱动这个功能。</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">require <span class=\"token string\">\"log\"</span>\n<span class=\"token keyword\">local</span> HiLog <span class=\"token operator\">=</span> require <span class=\"token string\">\"HiLog\"</span>\n<span class=\"token keyword\">local</span> utils <span class=\"token operator\">=</span> require <span class=\"token string\">\"utils.utils\"</span>\n<span class=\"token keyword\">local</span> Application <span class=\"token operator\">=</span> require <span class=\"token string\">\"orc\"</span>\napp <span class=\"token operator\">=</span> Application<span class=\"token punctuation\">.</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\napp<span class=\"token punctuation\">:</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/json\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span>id<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span>k<span class=\"token operator\">=</span><span class=\"token string\">'key'</span><span class=\"token punctuation\">,</span> v<span class=\"token operator\">=</span><span class=\"token string\">'value'</span><span class=\"token punctuation\">&#125;</span>    \n<span class=\"token keyword\">end</span><span class=\"token punctuation\">)</span>\n\napp<span class=\"token punctuation\">:</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/string\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span>id<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"Waterfall\"</span>\n<span class=\"token keyword\">end</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">return</span> app<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>这样以来，我们就可以快速的用Openresty + Lua构建超级微级的路由系统，管理渲染JSON数据，构建一个简单的JSON数据请求服务。</p>\n<p><a href=\"https://github.com/shengnoah/Blues\">Blues</a><br />\n<a href=\"https://github.com/shengnoah/Waterfall\">Waterfall</a></p>\n","text":"作者：糖果 Nginx返回JSON数据，一种是直接在配置文件里设置，一种是通过Lua代码封装完成，讲Nginx中执行Lua返回JSON的关键，一个用API函数ngx.say，同时配合json.encode对JSON格式的字符串进行编码，然后设定响应头信息的类型。 Nginx Co...","link":"","photos":[],"count_time":{"symbolsCount":"2.6k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua","slug":"lua","count":124,"path":"api/tags/lua.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#nginx-conf%E4%B8%AD%E8%BF%94%E5%9B%9Ejson%E7%9A%84%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\"> Nginx Conf中返回JSON的方式</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#nginx-lua%E8%BF%94%E5%9B%9Ejson%E7%9A%84%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\"> Nginx Lua返回JSON的方式</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1%E8%AE%BE%E7%BD%AEhttp%E7%9A%84%E5%93%8D%E5%BA%94%E5%A4%B4%E4%BF%A1%E6%81%AF\"><span class=\"toc-text\"> 1.设置HTTP的响应头信息：</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2jsonencodelua%E7%9A%84table%E5%9E%8B%E5%8F%98%E9%87%8F\"><span class=\"toc-text\"> 2.json.encode(“Lua的Table型变量”)：</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3%E7%94%A8say%E5%87%BD%E6%95%B0%E6%98%BE%E7%A4%BA%E7%BB%8F%E8%BF%87encode%E7%9A%84json%E6%95%B0%E6%8D%AE\"><span class=\"toc-text\"> 3.用say函数显示，经过encode的JSON数据。</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AE%8C%E6%95%B4%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5%E4%BB%A5%E4%B8%8B\"><span class=\"toc-text\"> 完整代码片段，以下：</span></a></li></ol></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Lua判断空表的正确姿势","uid":"713e977b7d1b8fcae8cb4a255a6ea756","slug":"old_topic/2016-09-17-Lua判断空表的正确姿势","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T07:45:09.224Z","comments":true,"path":"api/articles/old_topic/2016-09-17-Lua判断空表的正确姿势.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"作者:ms2008 编辑:糖果 if t == &#123;&#125; then 这样的结果就是 t == {} 永远返回 false，是一个逻辑错误。因为这里比较的是 table t 和一个匿名 table 的内存地址。 if table.maxn(t) == 0 then ...","link":"","photos":[],"count_time":{"symbolsCount":385,"symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"二分查找","uid":"d843ced03f40ac612213952de4b63ad2","slug":"old_topic/2016-17-Lua二分查找算法实现","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T07:45:09.209Z","comments":true,"path":"api/articles/old_topic/2016-17-Lua二分查找算法实现.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"#include&lt;stdio.h> int bseek(int key) &#123; int array[10] = &#123;1,2,3,4,5,6,7,8,9,10&#125;; int low = 0; int high = (sizeof(array) / 4)...","link":"","photos":[],"count_time":{"symbolsCount":"1.7k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua","slug":"lua","count":124,"path":"api/tags/lua.json"},{"name":"折半查找","slug":"折半查找","count":2,"path":"api/tags/折半查找.json"},{"name":"二分查找","slug":"二分查找","count":2,"path":"api/tags/二分查找.json"},{"name":"lua二分查找","slug":"lua二分查找","count":2,"path":"api/tags/lua二分查找.json"},{"name":"c","slug":"c","count":2,"path":"api/tags/c.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}