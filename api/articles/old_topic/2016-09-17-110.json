{"title":"如何创建部署WSGI类型的（Django, Tornado, Flask）Python应用","uid":"834dc1c98ae0dfc3f6c8b6dfa350a594","slug":"old_topic/2016-09-17-110","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T07:45:09.207Z","comments":true,"path":"api/articles/old_topic/2016-09-17-110.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<p>作者：糖果</p>\n<h3>第一部分：安装必要工具。</h3> \n<h4>1.因为这是部署Python开发环境，所以安装pip可以简化一些软件的安装过程。（PIP对应Lua的luarocks）</h4> \n<pre class=\"line-numbers language-none\"><code class=\"language-none\">sudo apt-get install python-pip<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>安装三个Python框架</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">sudo pip install flask\nsudo pip install django&#x3D;&#x3D;1.5.1\nsudo pip install tornado&#x3D;&#x3D;3.1.1<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h4>2.安装Gunicorn，这是运行Python的WSGI HTTP服务。</h4> \n<pre class=\"line-numbers language-none\"><code class=\"language-none\">sudo pip install gunicorn<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h4>3.Virtualenv, 安装这个是因为，在部署Django的时候，使用了不同的版本。</h4> \n<pre class=\"line-numbers language-none\"><code class=\"language-none\">sudo pip install virtualenv<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3>第二部分：创建部署应用。</h3> \n<h4>1.创建一个WSGI类型的Tornado应用。</h4> \n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> tornado<span class=\"token punctuation\">.</span>web\n<span class=\"token keyword\">import</span> tornado<span class=\"token punctuation\">.</span>wsgi\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MainHandler</span><span class=\"token punctuation\">(</span>tornado<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>RequestHandler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">\"My source code in the MoPaas server by python Tornado!\"</span><span class=\"token punctuation\">)</span>\n\nsettings <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token string\">\"debug\"</span> <span class=\"token punctuation\">:</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"static_path\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"static\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">#####</span>\nurls <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">(</span><span class=\"token string\">r\"/\"</span><span class=\"token punctuation\">,</span> MainHandler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span>\n\napp <span class=\"token operator\">=</span> tornado<span class=\"token punctuation\">.</span>wsgi<span class=\"token punctuation\">.</span>WSGIApplication<span class=\"token punctuation\">(</span>urls<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>settings<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>启动这个服务：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">gunicorn -w 4 torapp:app -b 0.0.0.0:8888<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h4>2.创建一个Flask应用。</h4> \n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> flask <span class=\"token keyword\">import</span> Flask\napp <span class=\"token operator\">=</span> Flask<span class=\"token punctuation\">(</span>__name__<span class=\"token punctuation\">)</span>\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">hello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"My source code in the MoPaas server by python Tornado!\"</span>\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">\"__main__\"</span><span class=\"token punctuation\">:</span>\n    app<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>启动这个服务：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">gunicorn -w 4 server:app -b 0.0.0.0:8888 --log-level debug<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h4>3.创建Django应用。</h4> \n<blockquote>Django是一个比较大的WEB应用，创建各部署的过程，稍微复杂一些。</blockquote> \n<p><strong>创建工程</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">django-admin.py startproject hotdoc<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><strong>创建应用</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">python manage.py startapp verp<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><strong>创建数据库表</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">python manage.py syncdb<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><strong>启动工程</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">gunicorn hotdoc.wsgi:application -b 0.0.0.0:8888<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<blockquote>需要在修改工程目录下的settings.py在INSTALLED_APPS中加入，verup和gunicorn：</blockquote> \n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">INSTALLED_APPS <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token string\">'django.contrib.admin'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'django.contrib.auth'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'django.contrib.contenttypes'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'django.contrib.sessions'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'django.contrib.messages'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'django.contrib.staticfiles'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'verup'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'gunicorn'</span>\n<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>以上，本地开发环境是没问题的。</strong></p>\n<blockquote>这些步骤也可以用virtualenv新创建一个虚拟环境完成，本地创virtualenv可以目前在WEB IDE上没有测试通过，理论上说，如果coding的WEB IDE是基于Docker的，virtualevn也应该好用。</blockquote> \n<pre class=\"line-numbers language-none\"><code class=\"language-none\">mkdir ~&#x2F;environments&#x2F;\nvirtualenv ~&#x2F;environments&#x2F;tutorial&#x2F;\ncd  ~&#x2F;environments&#x2F;tutorial&#x2F;bin\nsource bin&#x2F;activate<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>目前的Paas平台上的Python服务就是WSGI形式的应用，比如Mopaas，不同的是，在SAE上有些现成的例子。Mopaas需要自己从头写，这三个例子在Mopaas生产环境下都运行测试通过。在coding.net的WEB IDE也可成功运行。</blockquote> \n<p>PS:转载到其它平台请注明作者姓名及原文链接。</p>\n","text":"作者：糖果 第一部分：安装必要工具。 1.因为这是部署Python开发环境，所以安装pip可以简化一些软件的安装过程。（PIP对应Lua的luarocks） sudo apt-get install python-pip 安装三个Python框架 sudo pip install...","link":"","photos":[],"count_time":{"symbolsCount":"2k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua","slug":"lua","count":124,"path":"api/tags/lua.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">第一部分：安装必要工具。</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\"><span class=\"toc-text\">1.因为这是部署Python开发环境，所以安装pip可以简化一些软件的安装过程。（PIP对应Lua的luarocks）</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\"><span class=\"toc-text\">2.安装Gunicorn，这是运行Python的WSGI HTTP服务。</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\"><span class=\"toc-text\">3.Virtualenv, 安装这个是因为，在部署Django的时候，使用了不同的版本。</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">第二部分：创建部署应用。</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\"><span class=\"toc-text\">1.创建一个WSGI类型的Tornado应用。</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\"><span class=\"toc-text\">2.创建一个Flask应用。</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\"><span class=\"toc-text\">3.创建Django应用。</span></a></li></ol></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Lua中脚本中加载C语言的.SO共享库","uid":"f95942805ad9929705bec3ec56164a8b","slug":"old_topic/2016-09-17-109","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T07:45:09.188Z","comments":true,"path":"api/articles/old_topic/2016-09-17-109.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"作者：糖果 在Lua中，可以使用loadlib的方式直接的加载C语言写的库，如同加载.lua文件一样。C写的模块可以做一些对效率要求相对比较高的模块，或是一些底层操作。下面举例 说明： 第一步：创建C模块文件。 foo.h头文件 #ifndef foo_h__ #define f...","link":"","photos":[],"count_time":{"symbolsCount":"3.8k","symbolsTime":"3 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua","slug":"lua","count":124,"path":"api/tags/lua.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"《Lua游戏AI开发指南 --- Lua调用C/C++函数》","uid":"e724a88ffa1659f5de4d93477c189f2b","slug":"old_topic/2016-09-17-111","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T07:45:09.230Z","comments":true,"path":"api/articles/old_topic/2016-09-17-111.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"作者：糖果 Exposing C++ functions to Lua takes place through a process called function binding. Any bound functions exposed to Lua become accessi...","link":"","photos":[],"count_time":{"symbolsCount":"3.4k","symbolsTime":"3 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua","slug":"lua","count":124,"path":"api/tags/lua.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}