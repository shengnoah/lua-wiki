{"title":"如何创建部署WSGI类型的（Django, Tornado, Flask）Python应用","uid":"834dc1c98ae0dfc3f6c8b6dfa350a594","slug":"old_topic/2016-09-17-110","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T07:45:09.207Z","comments":true,"path":"api/articles/old_topic/2016-09-17-110.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":null,"content":"<p>作者：糖果</p>\n<h3>第一部分：安装必要工具。</h3> \n<h4>1.因为这是部署Python开发环境，所以安装pip可以简化一些软件的安装过程。（PIP对应Lua的luarocks）</h4> \n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install python-pip</span><br></pre></td></tr></table></figure>\n<p>安装三个Python框架</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo pip install flask</span><br><span class=\"line\">sudo pip install django==1.5.1</span><br><span class=\"line\">sudo pip install tornado==3.1.1</span><br></pre></td></tr></table></figure>\n<h4>2.安装Gunicorn，这是运行Python的WSGI HTTP服务。</h4> \n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo pip install gunicorn</span><br></pre></td></tr></table></figure>\n<h4>3.Virtualenv, 安装这个是因为，在部署Django的时候，使用了不同的版本。</h4> \n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo pip install virtualenv</span><br></pre></td></tr></table></figure>\n<h3>第二部分：创建部署应用。</h3> \n<h4>1.创建一个WSGI类型的Tornado应用。</h4> \n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> tornado.web</span><br><span class=\"line\"><span class=\"keyword\">import</span> tornado.wsgi</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MainHandler</span>(tornado.web.RequestHandler):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">get</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.write(<span class=\"string\">&quot;My source code in the MoPaas server by python Tornado!&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">settings = &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;debug&quot;</span> : <span class=\"literal\">True</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;static_path&quot;</span>: <span class=\"string\">&quot;static&quot;</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#####</span></span><br><span class=\"line\">urls = [</span><br><span class=\"line\">    (<span class=\"string\">r&quot;/&quot;</span>, MainHandler),</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\">app = tornado.wsgi.WSGIApplication(urls, **settings)</span><br></pre></td></tr></table></figure>\n<p><strong>启动这个服务：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gunicorn -w 4 torapp:app -b 0.0.0.0:8888</span><br></pre></td></tr></table></figure>\n<h4>2.创建一个Flask应用。</h4> \n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask</span><br><span class=\"line\">app = Flask(__name__)</span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&quot;/&quot;</span></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">hello</span>():</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;My source code in the MoPaas server by python Tornado!&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    app.run()</span><br></pre></td></tr></table></figure>\n<p><strong>启动这个服务：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gunicorn -w 4 server:app -b 0.0.0.0:8888 --log-level debug</span><br></pre></td></tr></table></figure>\n<h4>3.创建Django应用。</h4> \n<blockquote>Django是一个比较大的WEB应用，创建各部署的过程，稍微复杂一些。</blockquote> \n<p><strong>创建工程</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">django-admin.py startproject hotdoc</span><br></pre></td></tr></table></figure>\n<p><strong>创建应用</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python manage.py startapp verp</span><br></pre></td></tr></table></figure>\n<p><strong>创建数据库表</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python manage.py syncdb</span><br></pre></td></tr></table></figure>\n<p><strong>启动工程</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gunicorn hotdoc.wsgi:application -b 0.0.0.0:8888</span><br></pre></td></tr></table></figure>\n<blockquote>需要在修改工程目录下的settings.py在INSTALLED_APPS中加入，verup和gunicorn：</blockquote> \n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">INSTALLED_APPS = (</span><br><span class=\"line\">    <span class=\"string\">&#x27;django.contrib.admin&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;django.contrib.auth&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;django.contrib.contenttypes&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;django.contrib.sessions&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;django.contrib.messages&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;django.contrib.staticfiles&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;verup&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;gunicorn&#x27;</span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<p><strong>以上，本地开发环境是没问题的。</strong></p>\n<blockquote>这些步骤也可以用virtualenv新创建一个虚拟环境完成，本地创virtualenv可以目前在WEB IDE上没有测试通过，理论上说，如果coding的WEB IDE是基于Docker的，virtualevn也应该好用。</blockquote> \n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir ~/environments/</span><br><span class=\"line\">virtualenv ~/environments/tutorial/</span><br><span class=\"line\">cd  ~/environments/tutorial/bin</span><br><span class=\"line\">source bin/activate</span><br></pre></td></tr></table></figure>\n<blockquote>目前的Paas平台上的Python服务就是WSGI形式的应用，比如Mopaas，不同的是，在SAE上有些现成的例子。Mopaas需要自己从头写，这三个例子在Mopaas生产环境下都运行测试通过。在coding.net的WEB IDE也可成功运行。</blockquote> \n<p>PS:转载到其它平台请注明作者姓名及原文链接。</p>\n","text":"作者：糖果 第一部分：安装必要工具。 1.因为这是部署Python开发环境，所以安装pip可以简化一些软件的安装过程。（PIP对应Lua的luarocks） 1sudo apt-get install python-pip 安装三个Python框架 123sudo pip ins...","link":"","photos":[],"count_time":{"symbolsCount":"2.1k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":308,"path":"api/categories/topic.json"}],"tags":[{"name":"lua","slug":"lua","count":124,"path":"api/tags/lua.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">第一部分：安装必要工具。</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\"><span class=\"toc-text\">1.因为这是部署Python开发环境，所以安装pip可以简化一些软件的安装过程。（PIP对应Lua的luarocks）</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\"><span class=\"toc-text\">2.安装Gunicorn，这是运行Python的WSGI HTTP服务。</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\"><span class=\"toc-text\">3.Virtualenv, 安装这个是因为，在部署Django的时候，使用了不同的版本。</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">第二部分：创建部署应用。</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\"><span class=\"toc-text\">1.创建一个WSGI类型的Tornado应用。</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\"><span class=\"toc-text\">2.创建一个Flask应用。</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\"><span class=\"toc-text\">3.创建Django应用。</span></a></li></ol></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Lua中脚本中加载C语言的.SO共享库","uid":"f95942805ad9929705bec3ec56164a8b","slug":"old_topic/2016-09-17-109","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T07:45:09.188Z","comments":true,"path":"api/articles/old_topic/2016-09-17-109.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":null,"text":"作者：糖果 在Lua中，可以使用loadlib的方式直接的加载C语言写的库，如同加载.lua文件一样。C写的模块可以做一些对效率要求相对比较高的模块，或是一些底层操作。下面举例 说明： 第一步：创建C模块文件。 foo.h头文件 12345678#ifndef foo_h__#d...","link":"","photos":[],"count_time":{"symbolsCount":"3.9k","symbolsTime":"4 mins."},"categories":[{"name":"topic","slug":"topic","count":308,"path":"api/categories/topic.json"}],"tags":[{"name":"lua","slug":"lua","count":124,"path":"api/tags/lua.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Lapis安装与项目创建","uid":"91b599411eb2c81aa42989cad4814460","slug":"old_topic/2016-09-17-105","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T07:45:09.227Z","comments":true,"path":"api/articles/old_topic/2016-09-17-105.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":null,"text":"Lapis是程序员leaf写的一个lua语言的WEB框架，目前已经发布了1.3版本。要求的服务器开发环境是Openresty，而且支持moonscript,这个moonscript语言类似于Javascript的coffescript。起到的作用是，可以用简短moonscript...","link":"","photos":[],"count_time":{"symbolsCount":"2.4k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":308,"path":"api/categories/topic.json"}],"tags":[{"name":"lua","slug":"lua","count":124,"path":"api/tags/lua.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}