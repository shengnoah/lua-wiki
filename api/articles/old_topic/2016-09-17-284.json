{"title":"Lua判断空表的正确姿势","uid":"713e977b7d1b8fcae8cb4a255a6ea756","slug":"old_topic/2016-09-17-284","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T06:15:59.746Z","comments":true,"path":"api/articles/old_topic/2016-09-17-284.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":null,"content":"<p>作者:ms2008</p>\n<p>编辑:糖果</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> t == &#123;&#125; <span class=\"keyword\">then</span></span><br></pre></td></tr></table></figure>\n\n<p>这样的结果就是 t == {} 永远返回 false，是一个逻辑错误。因为这里比较的是 table t 和一个匿名 table 的内存地址。</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"built_in\">table</span>.<span class=\"built_in\">maxn</span>(t) == <span class=\"number\">0</span> <span class=\"keyword\">then</span></span><br></pre></td></tr></table></figure>\n\n\n<p>这样做也不保险，除非 table 的 key 都是数字，而没有 hash 部分。</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"built_in\">next</span>(t) == <span class=\"literal\">nil</span> <span class=\"keyword\">then</span></span><br></pre></td></tr></table></figure>\n\n\n<p>next 其实就是 pairs 遍历 table 时用来取下一个内容的函数。在项目的 module 中最好封装一下，免得 module 本地也有 next 函数。封装后判断的 lua table 是否为空的函数如下：</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">table_is_empty</span><span class=\"params\">(t)</span></span> </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">_G</span>.<span class=\"built_in\">next</span>(t) == <span class=\"literal\">nil</span> </span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n\n<p><a href=\"http://www.lua.ren/\">糖果实验室编辑整理</a></p>\n","text":"作者:ms2008 编辑:糖果 1if t == &#123;&#125; then 这样的结果就是 t == {} 永远返回 false，是一个逻辑错误。因为这里比较的是 table t 和一个匿名 table 的内存地址。 1if table.maxn(t) == 0 the...","link":"","photos":[],"count_time":{"symbolsCount":396,"symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":308,"path":"api/categories/topic.json"}],"tags":[],"toc":"","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Python的命令行解析工具OptParse","uid":"3d930fa3cf2f5987b2f125f1dac087cf","slug":"old_topic/2016-09-17-283","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T06:15:59.746Z","comments":true,"path":"api/articles/old_topic/2016-09-17-283.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":null,"text":"作者：糖果 无论是用C语言，还是用Java，有时都会写一些命令行的工具，解析用户在命令输入的参数，而Python有自己特色的命令行参数解析库，就是optparse。hpfeed-cli的源码就是用optparse来解析命令行参数的，hpfeed是给威胁地图发送威胁数据的，使用的是...","link":"","photos":[],"count_time":{"symbolsCount":"2.8k","symbolsTime":"3 mins."},"categories":[{"name":"topic","slug":"topic","count":308,"path":"api/categories/topic.json"}],"tags":[],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"VIM打开中文乱码","uid":"3da5126be99ac536e265734e0863e856","slug":"old_topic/2016-09-17-285","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T06:15:59.746Z","comments":true,"path":"api/articles/old_topic/2016-09-17-285.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":null,"text":"今天在coding下用vim，打开含有中文的文件乱码，找了一下解决方案。 在.vimrc中，加入下面的文件编码指定： set fileencodings=utf-8,ucs-bom,gb18030,gbk,gb2312,cp936set termencoding=utf-8set...","link":"","photos":[],"count_time":{"symbolsCount":156,"symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":308,"path":"api/categories/topic.json"}],"tags":[],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}