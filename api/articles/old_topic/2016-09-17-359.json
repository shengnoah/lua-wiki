{"title":"LUA遍历所有Table变量元素与cjson.null的意义","uid":"49340cb296849c990c24a5280443ee37","slug":"old_topic/2016-09-17-359","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T07:45:09.195Z","comments":true,"path":"api/articles/old_topic/2016-09-17-359.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":null,"content":"<p>作者：糖果</p>\n<p>Lapis使用JSON解析的代层库就是CJSON。</p>\n<h2 id=\"遍历Table变量的所有元素。\">遍历Table变量的所有元素。</h2>\n<p>util.moon</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">json_encodable = (obj, seen=&#123;&#125;) -&gt;</span><br><span class=\"line\">  switch type obj</span><br><span class=\"line\">    when &quot;table&quot;</span><br><span class=\"line\">      unless seen[obj]</span><br><span class=\"line\">        seen[obj] = true</span><br><span class=\"line\">        &#123; k, json_encodable(v) for k,v in pairs(obj) when type(k) == &quot;string&quot; or type(k) == &quot;number&quot; &#125;</span><br><span class=\"line\">    when &quot;function&quot;, &quot;userdata&quot;, &quot;thread&quot;</span><br><span class=\"line\">      nil</span><br><span class=\"line\">    else</span><br><span class=\"line\">      obj</span><br><span class=\"line\"></span><br><span class=\"line\">to_json = (obj) -&gt; json.encode json_encodable obj</span><br><span class=\"line\">from_json = (obj) -&gt; json.decode obj</span><br></pre></td></tr></table></figure>\n<p>json_encodable递归调用检查形参，seen={} 在形参列表里的应用。检查出所有字符中含有的JSON数据，放入Table返回。</p>\n<p>util.lua</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">json_encodable = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(obj, seen)</span></span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> seen == <span class=\"literal\">nil</span> <span class=\"keyword\">then</span></span><br><span class=\"line\">    seen = &#123; &#125;</span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\">  <span class=\"keyword\">local</span> _exp_0 = <span class=\"built_in\">type</span>(obj)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> <span class=\"string\">&quot;table&quot;</span> == _exp_0 <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> (seen[obj]) <span class=\"keyword\">then</span></span><br><span class=\"line\">      seen[obj] = <span class=\"literal\">true</span></span><br><span class=\"line\">      <span class=\"keyword\">local</span> _tbl_0 = &#123; &#125;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> k, v <span class=\"keyword\">in</span> <span class=\"built_in\">pairs</span>(obj) <span class=\"keyword\">do</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">type</span>(k) == <span class=\"string\">&quot;string&quot;</span> <span class=\"keyword\">or</span> <span class=\"built_in\">type</span>(k) == <span class=\"string\">&quot;number&quot;</span> <span class=\"keyword\">then</span></span><br><span class=\"line\">          _tbl_0[k] = json_encodable(v)</span><br><span class=\"line\">        <span class=\"keyword\">end</span></span><br><span class=\"line\">      <span class=\"keyword\">end</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> _tbl_0</span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\">  <span class=\"keyword\">elseif</span> <span class=\"string\">&quot;function&quot;</span> == _exp_0 <span class=\"keyword\">or</span> <span class=\"string\">&quot;userdata&quot;</span> == _exp_0 <span class=\"keyword\">or</span> <span class=\"string\">&quot;thread&quot;</span> == _exp_0 <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> obj</span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">to_json = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(obj)</span></span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> json.encode(json_encodable(obj))</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">from_json = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(obj)</span></span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> json.decode(obj)</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<p>Lua版因为没有像MoonScript支持When语句，被翻译成了很多的if elseif end语句。</p>\n<p>Lapis调用的JSON基础就是lua-cjson这个库，这个库同样有一个类似的递归调用就是：serialise_value。</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">local</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">is_array</span><span class=\"params\">(table)</span></span></span><br><span class=\"line\">    <span class=\"keyword\">local</span> <span class=\"built_in\">max</span> = <span class=\"number\">0</span> </span><br><span class=\"line\">    <span class=\"keyword\">local</span> count = <span class=\"number\">0</span> </span><br><span class=\"line\">    <span class=\"keyword\">for</span> k, v <span class=\"keyword\">in</span> <span class=\"built_in\">pairs</span>(<span class=\"built_in\">table</span>) <span class=\"keyword\">do</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">type</span>(k) == <span class=\"string\">&quot;number&quot;</span> <span class=\"keyword\">then</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> k &gt; <span class=\"built_in\">max</span> <span class=\"keyword\">then</span> <span class=\"built_in\">max</span> = k <span class=\"keyword\">end</span> </span><br><span class=\"line\">            count = count + <span class=\"number\">1</span> </span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">-1</span></span><br><span class=\"line\">        <span class=\"keyword\">end</span> </span><br><span class=\"line\">    <span class=\"keyword\">end</span> </span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">max</span> &gt; count * <span class=\"number\">2</span> <span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span></span><br><span class=\"line\">    <span class=\"keyword\">end</span> </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">max</span> </span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">local</span> serialise_value</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">local</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">serialise_table</span><span class=\"params\">(value, indent, depth)</span></span></span><br><span class=\"line\">    <span class=\"keyword\">local</span> spacing, spacing2, indent2</span><br><span class=\"line\">    <span class=\"keyword\">if</span> indent <span class=\"keyword\">then</span></span><br><span class=\"line\">        spacing = <span class=\"string\">&quot;\\n&quot;</span> .. indent</span><br><span class=\"line\">        spacing2 = spacing .. <span class=\"string\">&quot;  &quot;</span></span><br><span class=\"line\">        indent2 = indent .. <span class=\"string\">&quot;  &quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        spacing, spacing2, indent2 = <span class=\"string\">&quot; &quot;</span>, <span class=\"string\">&quot; &quot;</span>, <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"keyword\">end</span> </span><br><span class=\"line\">    depth = depth + <span class=\"number\">1</span> </span><br><span class=\"line\">    <span class=\"keyword\">if</span> depth &gt; <span class=\"number\">50</span> <span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;Cannot serialise any further: too many nested tables&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">local</span> <span class=\"built_in\">max</span> = is_array(value)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">local</span> comma = <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"keyword\">local</span> fragment = &#123; <span class=\"string\">&quot;&#123;&quot;</span> .. spacing2 &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">max</span> &gt; <span class=\"number\">0</span> <span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"comment\">-- Serialise array</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i = <span class=\"number\">1</span>, <span class=\"built_in\">max</span> <span class=\"keyword\">do</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> comma <span class=\"keyword\">then</span></span><br><span class=\"line\">                <span class=\"built_in\">table</span>.<span class=\"built_in\">insert</span>(fragment, <span class=\"string\">&quot;,&quot;</span> .. spacing2)</span><br><span class=\"line\">            <span class=\"keyword\">end</span></span><br><span class=\"line\">            <span class=\"built_in\">table</span>.<span class=\"built_in\">insert</span>(fragment, serialise_value(value[i], indent2, depth))</span><br><span class=\"line\">            comma = <span class=\"literal\">true</span></span><br><span class=\"line\">        <span class=\"keyword\">end</span></span><br><span class=\"line\">    <span class=\"keyword\">elseif</span> <span class=\"built_in\">max</span> &lt; <span class=\"number\">0</span> <span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"comment\">-- Serialise table</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> k, v <span class=\"keyword\">in</span> <span class=\"built_in\">pairs</span>(value) <span class=\"keyword\">do</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> comma <span class=\"keyword\">then</span></span><br><span class=\"line\">                <span class=\"built_in\">table</span>.<span class=\"built_in\">insert</span>(fragment, <span class=\"string\">&quot;,&quot;</span> .. spacing2)</span><br><span class=\"line\">            <span class=\"keyword\">end</span></span><br><span class=\"line\">            <span class=\"built_in\">table</span>.<span class=\"built_in\">insert</span>(fragment,</span><br><span class=\"line\">                (<span class=\"string\">&quot;[%s] = %s&quot;</span>):<span class=\"built_in\">format</span>(serialise_value(k, indent2, depth),</span><br><span class=\"line\">                                     serialise_value(v, indent2, depth)))</span><br><span class=\"line\">            comma = <span class=\"literal\">true</span></span><br><span class=\"line\">        <span class=\"keyword\">end</span></span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\">    <span class=\"built_in\">table</span>.<span class=\"built_in\">insert</span>(fragment, spacing .. <span class=\"string\">&quot;&#125;&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">table</span>.<span class=\"built_in\">concat</span>(fragment)</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">serialise_value</span><span class=\"params\">(value, indent, depth)</span></span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> indent == <span class=\"literal\">nil</span> <span class=\"keyword\">then</span> indent = <span class=\"string\">&quot;&quot;</span> <span class=\"keyword\">end</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> depth == <span class=\"literal\">nil</span> <span class=\"keyword\">then</span> depth = <span class=\"number\">0</span> <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> value == json.null <span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;json.null&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">elseif</span> <span class=\"built_in\">type</span>(value) == <span class=\"string\">&quot;string&quot;</span> <span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> (<span class=\"string\">&quot;%q&quot;</span>):<span class=\"built_in\">format</span>(value)</span><br><span class=\"line\">    <span class=\"keyword\">elseif</span> <span class=\"built_in\">type</span>(value) == <span class=\"string\">&quot;nil&quot;</span> <span class=\"keyword\">or</span> <span class=\"built_in\">type</span>(value) == <span class=\"string\">&quot;number&quot;</span> <span class=\"keyword\">or</span></span><br><span class=\"line\">           <span class=\"built_in\">type</span>(value) == <span class=\"string\">&quot;boolean&quot;</span> <span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">tostring</span>(value)</span><br><span class=\"line\">    <span class=\"keyword\">elseif</span> <span class=\"built_in\">type</span>(value) == <span class=\"string\">&quot;table&quot;</span> <span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> serialise_table(value, indent, depth)</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;\\&quot;&lt;&quot;</span> .. <span class=\"built_in\">type</span>(value) .. <span class=\"string\">&quot;&gt;\\&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<p>调用序列化，如果table变量里的value还是table就递归的调用serialise_value函数自己。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">meta_info = &#123; </span><br><span class=\"line\">    key = &quot;test key:&quot;,</span><br><span class=\"line\">    values = &#123; </span><br><span class=\"line\">        k = &quot;key&quot;,</span><br><span class=\"line\">        v = &quot;value&quot;</span><br><span class=\"line\">    &#125;,  </span><br><span class=\"line\">    testcase = &quot;null&quot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">print(serialise_value(meta_info))</span><br></pre></td></tr></table></figure>\n<p>以上函数是直接从CJSON中提取出来的，可以遍历任意的table，相关于pprint这种功能。</p>\n<p>打印结果如下：</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  [<span class=\"string\">&quot;testcase&quot;</span>] = json.null,</span><br><span class=\"line\">  [<span class=\"string\">&quot;key&quot;</span>] = <span class=\"string\">&quot;test key:&quot;</span>,</span><br><span class=\"line\">  [<span class=\"string\">&quot;values&quot;</span>] = &#123;</span><br><span class=\"line\">    [<span class=\"string\">&quot;k&quot;</span>] = <span class=\"string\">&quot;key&quot;</span>,</span><br><span class=\"line\">    [<span class=\"string\">&quot;v&quot;</span>] = <span class=\"string\">&quot;value&quot;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"cjson-null与nil、NULL是否等价。\">cjson.null与nil、NULL是否等价。</h2>\n<p>下面是@hambut老师的测试代码：</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">local</span> cjson = <span class=\"built_in\">require</span> <span class=\"string\">&quot;cjson&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">local</span> s = <span class=\"string\">[[&#123;&quot;key&quot;:null,&quot;key1&quot;:&quot;value&quot;&#125;]]</span></span><br><span class=\"line\"><span class=\"keyword\">local</span> sd = cjson.decode(s)</span><br><span class=\"line\">sd.key2 = <span class=\"string\">&quot;value2&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">ngx.say(cjson.encode(sd))</span><br></pre></td></tr></table></figure>\n<p>打印结果如下：</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;<span class=\"string\">&quot;key1&quot;</span>:<span class=\"string\">&quot;value&quot;</span>,<span class=\"string\">&quot;key&quot;</span>:null,<span class=\"string\">&quot;key2&quot;</span>:<span class=\"string\">&quot;value2&quot;</span>&#125;</span><br></pre></td></tr></table></figure>\n<p>再做一个实验， 我们直接写一个so库，同句函数cjson_new，只返回一个table结构数据。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"type\">int</span> <span class=\"title function_\">cjson_new</span><span class=\"params\">(lua_State* L)</span>; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">static</span> luaL_Reg libtangguo[] = &#123; </span><br><span class=\"line\">    &#123;<span class=\"string\">&quot;cjson_new&quot;</span>, cjson_new&#125;,</span><br><span class=\"line\">    &#123;<span class=\"literal\">NULL</span>, <span class=\"literal\">NULL</span>&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">cjson_new</span><span class=\"params\">(lua_State* L)</span> &#123;</span><br><span class=\"line\">    lua_newtable(L);</span><br><span class=\"line\">    <span class=\"comment\">/* Set cjson.null */</span></span><br><span class=\"line\">    lua_pushlightuserdata(L, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">    lua_setfield(L, <span class=\"number\">-2</span>, <span class=\"string\">&quot;null&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>cjson.null 就是.so库返回的一个table变量，中的一个key名为 “null”, value是userdata(nil)<br>\n的userdata类型的table元素，lightuserdata不归GC管理，就是一个的指针，一般就用于和其它的lightsuerdata比较， 而这个其它的lightuserdata变量，一般也都是C产生的，是产生<br>\nlightuserdata之间比，不是C的lightuserdata和lua的lightuserdata比法。</p>\n<p>lightuserdata和userdata也不一样， lightuserdata是指针，userdata是buffer。</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">local</span> cjson_new = <span class=\"built_in\">package</span>.<span class=\"built_in\">loadlib</span>(<span class=\"string\">&quot;libtangguo.so&quot;</span>, <span class=\"string\">&quot;cjson_new&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">local</span> cjson = cjson_new()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> k,v <span class=\"keyword\">in</span> <span class=\"built_in\">pairs</span>(cjson) <span class=\"keyword\">do</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(k, v, <span class=\"built_in\">type</span>(v))</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(cjson.null)</span><br><span class=\"line\">tmp = cjson.null</span><br><span class=\"line\"><span class=\"built_in\">print</span>(tmp, <span class=\"built_in\">type</span>(tmp))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> cjson.null == <span class=\"literal\">nil</span> <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;OK&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> cjson.null == <span class=\"string\">&quot;null&quot;</span> <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;OK&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> cjson.null == tmp <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;OK&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>cjson.null不是nil, 更不是&quot;null&quot;。数据在内存空间的存储形式是不一样的，但表示的现实意义是一样的，表示“啥也没有”。</p>\n<p>为了进一步说明是这样的，我们直接看一下pushlightusredata的C源码：</p>\n<p>lapi.c</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">** Union of all Lua values</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">union</span> <span class=\"title\">Value</span> &#123;</span></span><br><span class=\"line\">  GCObject *gc;    <span class=\"comment\">/* collectable objects */</span></span><br><span class=\"line\">  <span class=\"type\">void</span> *p;         <span class=\"comment\">/* light userdata */</span></span><br><span class=\"line\">  <span class=\"type\">int</span> b;           <span class=\"comment\">/* booleans */</span></span><br><span class=\"line\">  lua_CFunction f; <span class=\"comment\">/* light C functions */</span></span><br><span class=\"line\">  lua_Integer i;   <span class=\"comment\">/* integer numbers */</span></span><br><span class=\"line\">  lua_Number n;    <span class=\"comment\">/* float numbers */</span></span><br><span class=\"line\">&#125; Value;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">LUA_API <span class=\"type\">void</span> <span class=\"title function_\">lua_pushlightuserdata</span> <span class=\"params\">(lua_State *L, <span class=\"type\">void</span> *p)</span> &#123;</span><br><span class=\"line\">  lua_lock(L);</span><br><span class=\"line\">  setpvalue(L-&gt;top, p);</span><br><span class=\"line\">  api_incr_top(L);</span><br><span class=\"line\">  lua_unlock(L);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><a href=\"http://cjson.so\">cjson.so</a></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lua_newtable(L);</span><br><span class=\"line\">lua_pushlightuserdata(L, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">lua_setfield(L, <span class=\"number\">-2</span>, <span class=\"string\">&quot;null&quot;</span>);</span><br></pre></td></tr></table></figure>\n<p>这样在实际调用时，  setpvalue(L-&gt;top, p);<br>\n相当于 void *p = NULL，最后是被封装到table变量里返回的。</p>\n","text":"作者：糖果 Lapis使用JSON解析的代层库就是CJSON。 遍历Table变量的所有元素。 util.moon 12345678910111213json_encodable = (obj, seen=&#123;&#125;) -&gt; switch type obj w...","link":"","photos":[],"count_time":{"symbolsCount":"6.9k","symbolsTime":"6 mins."},"categories":[{"name":"topic","slug":"topic","count":308,"path":"api/categories/topic.json"}],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%81%8D%E5%8E%86Table%E5%8F%98%E9%87%8F%E7%9A%84%E6%89%80%E6%9C%89%E5%85%83%E7%B4%A0%E3%80%82\"><span class=\"toc-text\">遍历Table变量的所有元素。</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#cjson-null%E4%B8%8Enil%E3%80%81NULL%E6%98%AF%E5%90%A6%E7%AD%89%E4%BB%B7%E3%80%82\"><span class=\"toc-text\">cjson.null与nil、NULL是否等价。</span></a></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"关于Lua的LazyTable的实现","uid":"a345db901c4262d0d7e3998d536c82d4","slug":"old_topic/2016-09-17-357","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T07:45:09.207Z","comments":true,"path":"api/articles/old_topic/2016-09-17-357.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":null,"text":"作者：糖果 LazyTable源码 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465l...","link":"","photos":[],"count_time":{"symbolsCount":"4.3k","symbolsTime":"4 mins."},"categories":[{"name":"topic","slug":"topic","count":308,"path":"api/categories/topic.json"}],"tags":[],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Lua 5.1 リファレンスマニュアル","uid":"f203242dc5cc75b60df934903f73a39e","slug":"old_topic/2016-09-17-349","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T07:45:09.198Z","comments":true,"path":"api/articles/old_topic/2016-09-17-349.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":[],"text":"以下是引用原文： 程序员改Bug的时候 ​​​​ Lua Lua 5.1 リファレンスマニュアル Copyright © 2006 Lua.org, PUC-Rio. All rights reserved. 目次 索引 Top 0 - 日本語訳について 1 - 概要 2 - 言...","link":"","photos":[],"count_time":{"symbolsCount":"106k","symbolsTime":"1:36"},"categories":[{"name":"topic","slug":"topic","count":308,"path":"api/categories/topic.json"}],"tags":[],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}