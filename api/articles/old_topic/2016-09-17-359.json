{"title":"LUA遍历所有Table变量元素与cjson.null的意义","uid":"49340cb296849c990c24a5280443ee37","slug":"old_topic/2016-09-17-359","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T07:45:09.195Z","comments":true,"path":"api/articles/old_topic/2016-09-17-359.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<p>作者：糖果</p>\n<p>Lapis使用JSON解析的代层库就是CJSON。</p>\n<h2 id=\"遍历table变量的所有元素\"><a class=\"markdownIt-Anchor\" href=\"#遍历table变量的所有元素\"></a> 遍历Table变量的所有元素。</h2>\n<p>util.moon</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">json_encodable &#x3D; (obj, seen&#x3D;&#123;&#125;) -&gt;\n  switch type obj\n    when &quot;table&quot;\n      unless seen[obj]\n        seen[obj] &#x3D; true\n        &#123; k, json_encodable(v) for k,v in pairs(obj) when type(k) &#x3D;&#x3D; &quot;string&quot; or type(k) &#x3D;&#x3D; &quot;number&quot; &#125;\n    when &quot;function&quot;, &quot;userdata&quot;, &quot;thread&quot;\n      nil\n    else\n      obj\n\nto_json &#x3D; (obj) -&gt; json.encode json_encodable obj\nfrom_json &#x3D; (obj) -&gt; json.decode obj<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>json_encodable递归调用检查形参，seen={} 在形参列表里的应用。<br />\n检查出所有字符中含有的JSON数据，放入Table返回。</p>\n<p>util.lua</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">json_encodable <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> seen<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">if</span> seen <span class=\"token operator\">==</span> <span class=\"token keyword\">nil</span> <span class=\"token keyword\">then</span>\n    seen <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">end</span>\n  <span class=\"token keyword\">local</span> _exp_0 <span class=\"token operator\">=</span> <span class=\"token function\">type</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">if</span> <span class=\"token string\">\"table\"</span> <span class=\"token operator\">==</span> _exp_0 <span class=\"token keyword\">then</span>\n    <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> <span class=\"token punctuation\">(</span>seen<span class=\"token punctuation\">[</span>obj<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">then</span>\n      seen<span class=\"token punctuation\">[</span>obj<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">true</span>\n      <span class=\"token keyword\">local</span> _tbl_0 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token keyword\">for</span> k<span class=\"token punctuation\">,</span> v <span class=\"token keyword\">in</span> <span class=\"token function\">pairs</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>\n        <span class=\"token keyword\">if</span> <span class=\"token function\">type</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"string\"</span> <span class=\"token keyword\">or</span> <span class=\"token function\">type</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"number\"</span> <span class=\"token keyword\">then</span>\n          _tbl_0<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">json_encodable</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">end</span>\n      <span class=\"token keyword\">end</span>\n      <span class=\"token keyword\">return</span> _tbl_0\n    <span class=\"token keyword\">end</span>\n  <span class=\"token keyword\">elseif</span> <span class=\"token string\">\"function\"</span> <span class=\"token operator\">==</span> _exp_0 <span class=\"token keyword\">or</span> <span class=\"token string\">\"userdata\"</span> <span class=\"token operator\">==</span> _exp_0 <span class=\"token keyword\">or</span> <span class=\"token string\">\"thread\"</span> <span class=\"token operator\">==</span> _exp_0 <span class=\"token keyword\">then</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">nil</span>\n  <span class=\"token keyword\">else</span>\n    <span class=\"token keyword\">return</span> obj\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span>\n\nto_json <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> json<span class=\"token punctuation\">.</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span><span class=\"token function\">json_encodable</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span>\n\nfrom_json <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> json<span class=\"token punctuation\">.</span><span class=\"token function\">decode</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>Lua版因为没有像MoonScript支持When语句，被翻译成了很多的if elseif end语句。</p>\n<p>Lapis调用的JSON基础就是lua-cjson这个库，这个库同样有一个类似的递归调用就是<br />\n：serialise_value。</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">\n<span class=\"token keyword\">local</span> <span class=\"token keyword\">function</span> <span class=\"token function\">is_array</span><span class=\"token punctuation\">(</span>table<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">local</span> max <span class=\"token operator\">=</span> <span class=\"token number\">0</span> \n    <span class=\"token keyword\">local</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span> \n    <span class=\"token keyword\">for</span> k<span class=\"token punctuation\">,</span> v <span class=\"token keyword\">in</span> <span class=\"token function\">pairs</span><span class=\"token punctuation\">(</span>table<span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>\n        <span class=\"token keyword\">if</span> <span class=\"token function\">type</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"number\"</span> <span class=\"token keyword\">then</span>\n            <span class=\"token keyword\">if</span> k <span class=\"token operator\">></span> max <span class=\"token keyword\">then</span> max <span class=\"token operator\">=</span> k <span class=\"token keyword\">end</span> \n            count <span class=\"token operator\">=</span> count <span class=\"token operator\">+</span> <span class=\"token number\">1</span> \n        <span class=\"token keyword\">else</span>\n            <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\n        <span class=\"token keyword\">end</span> \n    <span class=\"token keyword\">end</span> \n    <span class=\"token keyword\">if</span> max <span class=\"token operator\">></span> count <span class=\"token operator\">*</span> <span class=\"token number\">2</span> <span class=\"token keyword\">then</span>\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\n    <span class=\"token keyword\">end</span> \n\n    <span class=\"token keyword\">return</span> max \n<span class=\"token keyword\">end</span>\n<span class=\"token keyword\">local</span> serialise_value\n\n<span class=\"token keyword\">local</span> <span class=\"token keyword\">function</span> <span class=\"token function\">serialise_table</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> indent<span class=\"token punctuation\">,</span> depth<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">local</span> spacing<span class=\"token punctuation\">,</span> spacing2<span class=\"token punctuation\">,</span> indent2\n    <span class=\"token keyword\">if</span> indent <span class=\"token keyword\">then</span>\n        spacing <span class=\"token operator\">=</span> <span class=\"token string\">\"\\n\"</span> <span class=\"token operator\">..</span> indent\n        spacing2 <span class=\"token operator\">=</span> spacing <span class=\"token operator\">..</span> <span class=\"token string\">\"  \"</span>\n        indent2 <span class=\"token operator\">=</span> indent <span class=\"token operator\">..</span> <span class=\"token string\">\"  \"</span>\n    <span class=\"token keyword\">else</span>\n        spacing<span class=\"token punctuation\">,</span> spacing2<span class=\"token punctuation\">,</span> indent2 <span class=\"token operator\">=</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">false</span>\n    <span class=\"token keyword\">end</span> \n    depth <span class=\"token operator\">=</span> depth <span class=\"token operator\">+</span> <span class=\"token number\">1</span> \n    <span class=\"token keyword\">if</span> depth <span class=\"token operator\">></span> <span class=\"token number\">50</span> <span class=\"token keyword\">then</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"Cannot serialise any further: too many nested tables\"</span>\n    <span class=\"token keyword\">end</span>\n\n    <span class=\"token keyword\">local</span> max <span class=\"token operator\">=</span> <span class=\"token function\">is_array</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">local</span> comma <span class=\"token operator\">=</span> <span class=\"token keyword\">false</span>\n    <span class=\"token keyword\">local</span> fragment <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"&#123;\"</span> <span class=\"token operator\">..</span> spacing2 <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">if</span> max <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token keyword\">then</span>\n        <span class=\"token comment\">-- Serialise array</span>\n        <span class=\"token keyword\">for</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> max <span class=\"token keyword\">do</span>\n            <span class=\"token keyword\">if</span> comma <span class=\"token keyword\">then</span>\n                table<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>fragment<span class=\"token punctuation\">,</span> <span class=\"token string\">\",\"</span> <span class=\"token operator\">..</span> spacing2<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">end</span>\n            table<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>fragment<span class=\"token punctuation\">,</span> <span class=\"token function\">serialise_value</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> indent2<span class=\"token punctuation\">,</span> depth<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            comma <span class=\"token operator\">=</span> <span class=\"token keyword\">true</span>\n        <span class=\"token keyword\">end</span>\n    <span class=\"token keyword\">elseif</span> max <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token keyword\">then</span>\n        <span class=\"token comment\">-- Serialise table</span>\n        <span class=\"token keyword\">for</span> k<span class=\"token punctuation\">,</span> v <span class=\"token keyword\">in</span> <span class=\"token function\">pairs</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>\n            <span class=\"token keyword\">if</span> comma <span class=\"token keyword\">then</span>\n                table<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>fragment<span class=\"token punctuation\">,</span> <span class=\"token string\">\",\"</span> <span class=\"token operator\">..</span> spacing2<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">end</span>\n            table<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>fragment<span class=\"token punctuation\">,</span>\n                <span class=\"token punctuation\">(</span><span class=\"token string\">\"[%s] = %s\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token function\">serialise_value</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">,</span> indent2<span class=\"token punctuation\">,</span> depth<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                                     <span class=\"token function\">serialise_value</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">,</span> indent2<span class=\"token punctuation\">,</span> depth<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            comma <span class=\"token operator\">=</span> <span class=\"token keyword\">true</span>\n        <span class=\"token keyword\">end</span>\n    <span class=\"token keyword\">end</span>\n    table<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>fragment<span class=\"token punctuation\">,</span> spacing <span class=\"token operator\">..</span> <span class=\"token string\">\"&#125;\"</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> table<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>fragment<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span>\n\n\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">serialise_value</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> indent<span class=\"token punctuation\">,</span> depth<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> indent <span class=\"token operator\">==</span> <span class=\"token keyword\">nil</span> <span class=\"token keyword\">then</span> indent <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span> <span class=\"token keyword\">end</span>\n    <span class=\"token keyword\">if</span> depth <span class=\"token operator\">==</span> <span class=\"token keyword\">nil</span> <span class=\"token keyword\">then</span> depth <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token keyword\">end</span>\n\n    <span class=\"token keyword\">if</span> value <span class=\"token operator\">==</span> json<span class=\"token punctuation\">.</span>null <span class=\"token keyword\">then</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"json.null\"</span>\n    <span class=\"token keyword\">elseif</span> <span class=\"token function\">type</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"string\"</span> <span class=\"token keyword\">then</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"%q\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">elseif</span> <span class=\"token function\">type</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"nil\"</span> <span class=\"token keyword\">or</span> <span class=\"token function\">type</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"number\"</span> <span class=\"token keyword\">or</span>\n           <span class=\"token function\">type</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"boolean\"</span> <span class=\"token keyword\">then</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">tostring</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">elseif</span> <span class=\"token function\">type</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"table\"</span> <span class=\"token keyword\">then</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">serialise_table</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> indent<span class=\"token punctuation\">,</span> depth<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">else</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"\\\"&lt;\"</span> <span class=\"token operator\">..</span> <span class=\"token function\">type</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token operator\">..</span> <span class=\"token string\">\">\\\"\"</span>\n    <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>调用序列化，如果table变量里的value还是table就递归的调用serialise_value函数自己。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">meta_info &#x3D; &#123; \n    key &#x3D; &quot;test key:&quot;,\n    values &#x3D; &#123; \n        k &#x3D; &quot;key&quot;,\n        v &#x3D; &quot;value&quot;\n    &#125;,  \n    testcase &#x3D; &quot;null&quot;\n&#125;\n\nprint(serialise_value(meta_info))<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>以上函数是直接从CJSON中提取出来的，可以遍历任意的table，相关于pprint这种功能。</p>\n<p>打印结果如下：</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\"><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token punctuation\">[</span><span class=\"token string\">\"testcase\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> json<span class=\"token punctuation\">.</span>null<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token string\">\"key\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"test key:\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token string\">\"values\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token punctuation\">[</span><span class=\"token string\">\"k\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"key\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token string\">\"v\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"value\"</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"cjsonnull与nil-null是否等价\"><a class=\"markdownIt-Anchor\" href=\"#cjsonnull与nil-null是否等价\"></a> cjson.null与nil、NULL是否等价。</h2>\n<p>下面是@hambut老师的测试代码：</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\"><span class=\"token keyword\">local</span> cjson <span class=\"token operator\">=</span> require <span class=\"token string\">\"cjson\"</span>\n\n<span class=\"token keyword\">local</span> s <span class=\"token operator\">=</span> <span class=\"token string\">[[&#123;\"key\":null,\"key1\":\"value\"&#125;]]</span>\n<span class=\"token keyword\">local</span> sd <span class=\"token operator\">=</span> cjson<span class=\"token punctuation\">.</span><span class=\"token function\">decode</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>\nsd<span class=\"token punctuation\">.</span>key2 <span class=\"token operator\">=</span> <span class=\"token string\">\"value2\"</span>\n\nngx<span class=\"token punctuation\">.</span><span class=\"token function\">say</span><span class=\"token punctuation\">(</span>cjson<span class=\"token punctuation\">.</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span>sd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>打印结果如下：</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\"><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"key1\"</span><span class=\"token punctuation\">:</span><span class=\"token string\">\"value\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"key\"</span><span class=\"token punctuation\">:</span>null<span class=\"token punctuation\">,</span><span class=\"token string\">\"key2\"</span><span class=\"token punctuation\">:</span><span class=\"token string\">\"value2\"</span><span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>再做一个实验， 我们直接写一个so库，同句函数cjson_new，只返回一个table结构数据。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">extern</span> <span class=\"token keyword\">int</span> <span class=\"token function\">cjson_new</span><span class=\"token punctuation\">(</span>lua_State<span class=\"token operator\">*</span> L<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n\n<span class=\"token keyword\">static</span> luaL_Reg libtangguo<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> \n    <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"cjson_new\"</span><span class=\"token punctuation\">,</span> cjson_new<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">&#123;</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">cjson_new</span><span class=\"token punctuation\">(</span>lua_State<span class=\"token operator\">*</span> L<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">lua_newtable</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">/* Set cjson.null */</span>\n    <span class=\"token function\">lua_pushlightuserdata</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">lua_setfield</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"null\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>cjson.null 就是.so库返回的一个table变量，中的一个key名为 “null”, value是userdata(nil)<br />\n的userdata类型的table元素，lightuserdata不归GC管理，就是一个的指针，一般就用于和<br />\n其它的lightsuerdata比较， 而这个其它的lightuserdata变量，一般也都是C产生的，是产生<br />\nlightuserdata之间比，不是C的lightuserdata和lua的lightuserdata比法。</p>\n<p>lightuserdata和userdata也不一样， lightuserdata是指针，userdata是buffer。</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\"><span class=\"token keyword\">local</span> cjson_new <span class=\"token operator\">=</span> package<span class=\"token punctuation\">.</span><span class=\"token function\">loadlib</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"libtangguo.so\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"cjson_new\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">local</span> cjson <span class=\"token operator\">=</span> <span class=\"token function\">cjson_new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">for</span> k<span class=\"token punctuation\">,</span>v <span class=\"token keyword\">in</span> <span class=\"token function\">pairs</span><span class=\"token punctuation\">(</span>cjson<span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">,</span> <span class=\"token function\">type</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span>\n\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>cjson<span class=\"token punctuation\">.</span>null<span class=\"token punctuation\">)</span>\ntmp <span class=\"token operator\">=</span> cjson<span class=\"token punctuation\">.</span>null\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>tmp<span class=\"token punctuation\">,</span> <span class=\"token function\">type</span><span class=\"token punctuation\">(</span>tmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">if</span> cjson<span class=\"token punctuation\">.</span>null <span class=\"token operator\">==</span> <span class=\"token keyword\">nil</span> <span class=\"token keyword\">then</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"OK\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span>\n\n<span class=\"token keyword\">if</span> cjson<span class=\"token punctuation\">.</span>null <span class=\"token operator\">==</span> <span class=\"token string\">\"null\"</span> <span class=\"token keyword\">then</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"OK\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span>\n\n\n<span class=\"token keyword\">if</span> cjson<span class=\"token punctuation\">.</span>null <span class=\"token operator\">==</span> tmp <span class=\"token keyword\">then</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"OK\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>cjson.null不是nil, 更不是&quot;null&quot;。数据在内存空间的存储形式是不一样的，但表示的现实意义是一样的，表示“啥也没有”。</p>\n<p>为了进一步说明是这样的，我们直接看一下pushlightusredata的C源码：</p>\n<p>lapi.c</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">/*\n** Union of all Lua values\n*/</span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">union</span> Value <span class=\"token punctuation\">&#123;</span>\n  GCObject <span class=\"token operator\">*</span>gc<span class=\"token punctuation\">;</span>    <span class=\"token comment\">/* collectable objects */</span>\n  <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">;</span>         <span class=\"token comment\">/* light userdata */</span>\n  <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">;</span>           <span class=\"token comment\">/* booleans */</span>\n  lua_CFunction f<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* light C functions */</span>\n  lua_Integer i<span class=\"token punctuation\">;</span>   <span class=\"token comment\">/* integer numbers */</span>\n  lua_Number n<span class=\"token punctuation\">;</span>    <span class=\"token comment\">/* float numbers */</span>\n<span class=\"token punctuation\">&#125;</span> Value<span class=\"token punctuation\">;</span>\n\n\nLUA_API <span class=\"token keyword\">void</span> <span class=\"token function\">lua_pushlightuserdata</span> <span class=\"token punctuation\">(</span>lua_State <span class=\"token operator\">*</span>L<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">lua_lock</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">setpvalue</span><span class=\"token punctuation\">(</span>L<span class=\"token operator\">-></span>top<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">api_incr_top</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">lua_unlock</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><a href=\"http://cjson.so\">cjson.so</a></p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token function\">lua_newtable</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">lua_pushlightuserdata</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">lua_setfield</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"null\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>这样在实际调用时，  setpvalue(L-&gt;top, p);<br />\n相当于 void *p = NULL，<br />\n最后是被封装到table变量里返回的。</p>\n","text":"作者：糖果 Lapis使用JSON解析的代层库就是CJSON。 遍历Table变量的所有元素。 util.moon json_encodable &#x3D; (obj, seen&#x3D;&#123;&#125;) -&gt; switch type obj when &qu...","link":"","photos":[],"count_time":{"symbolsCount":"6.2k","symbolsTime":"6 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%81%8D%E5%8E%86table%E5%8F%98%E9%87%8F%E7%9A%84%E6%89%80%E6%9C%89%E5%85%83%E7%B4%A0\"><span class=\"toc-text\"> 遍历Table变量的所有元素。</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#cjsonnull%E4%B8%8Enil-null%E6%98%AF%E5%90%A6%E7%AD%89%E4%BB%B7\"><span class=\"toc-text\"> cjson.null与nil、NULL是否等价。</span></a></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Django Guide","uid":"6621c44acdf5f08884e1627cc08cfbf8","slug":"old_topic/2016-09-17-36","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T07:45:09.205Z","comments":true,"path":"api/articles/old_topic/2016-09-17-36.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"给Django做一个索引。 Form http://www.djangobook.com/en/2.0/chapter07.html 打字少，功能实现快。 开发备忘录 1.创建空工程 django-admin.py startproject djproject 2.创建空应用 p...","link":"","photos":[],"count_time":{"symbolsCount":"1.2k","symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua","slug":"lua","count":124,"path":"api/tags/lua.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"HiLua框架与MoonScript库的交互过程","uid":"e42217fa2cd64fc77d86460421fbfaca","slug":"old_topic/2016-09-17-360","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T07:45:09.169Z","comments":true,"path":"api/articles/old_topic/2016-09-17-360.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"作者：糖果 上一篇是用.so作为框架的库，这是接上回，用MoonScript实现库。 在HiLua工程中，创建/libs/moon目录，建立MoonScript库代码，如下： HiLog.moon class HiLog @log: => print(\"HiLog...\") re...","link":"","photos":[],"count_time":{"symbolsCount":"1.1k","symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}