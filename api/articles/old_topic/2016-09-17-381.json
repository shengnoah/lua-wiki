{"title":"函数返回的结果是函数的返回的结果不是函数","uid":"3e4806ea54f2e91c20a1148ca6b83f31","slug":"old_topic/2016-09-17-381","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T07:45:09.232Z","comments":true,"path":"api/articles/old_topic/2016-09-17-381.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<p>函数返回的结果是函数的返回的结果不是函数</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">\n<span class=\"token keyword\">function</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"key:\"</span><span class=\"token operator\">..</span>self<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span>\n\n\nenable <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">)</span>\n      self <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>key<span class=\"token operator\">=</span><span class=\"token string\">'value'</span><span class=\"token punctuation\">&#125;</span>\n      <span class=\"token keyword\">local</span> fn <span class=\"token operator\">=</span> func \n      <span class=\"token keyword\">if</span> <span class=\"token function\">type</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"function\"</span> <span class=\"token keyword\">then</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">end</span> \n<span class=\"token keyword\">end</span>\n\n<span class=\"token function\">enable</span><span class=\"token punctuation\">(</span>read<span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">true</span> \n<span class=\"token keyword\">end</span>\n\nparams <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> func <span class=\"token operator\">==</span> <span class=\"token keyword\">false</span> <span class=\"token keyword\">then</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'params error'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">end</span> \n    <span class=\"token keyword\">end</span> \n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">)</span> \n        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"request\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">end</span> \n<span class=\"token keyword\">end</span>\n\nret <span class=\"token operator\">=</span> <span class=\"token function\">params</span><span class=\"token punctuation\">(</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">ret</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">json</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token function\">type</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"function\"</span> <span class=\"token keyword\">then</span> \n        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'json'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> func\n    <span class=\"token keyword\">end</span> \n<span class=\"token keyword\">end</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">)</span> \n        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'get'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span> \n\n\nret <span class=\"token operator\">=</span> <span class=\"token function\">json</span><span class=\"token punctuation\">(</span>get<span class=\"token punctuation\">)</span>\n<span class=\"token function\">ret</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">pprint</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">...</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">...</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span>\n\n<span class=\"token function\">pprint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test pprint\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>","text":"函数返回的结果是函数的返回的结果不是函数 function read(self) print(\"key:\"..self.key) end enable = function(func) self = &#123;key='value'&#125; local fn = func ...","link":"","photos":[],"count_time":{"symbolsCount":809,"symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua","slug":"lua","count":124,"path":"api/tags/lua.json"}],"toc":"","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"如何在Openresty中实现一个REST服务","uid":"6f22cd23969a4d12ca816a42b73ce9e8","slug":"old_topic/2016-09-17-380","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T07:45:09.210Z","comments":true,"path":"api/articles/old_topic/2016-09-17-380.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"作者：糖果 使用Blues框架在Openresty中实现一个REST服务解析和返回JSON数据，并通过curl向openresty服务器端请求rest，采用GET请求方式，提交一个json,然后路由到对应的匿名函数，通过request.params.body直接取得json数据主...","link":"","photos":[],"count_time":{"symbolsCount":"1.6k","symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua","slug":"lua","count":124,"path":"api/tags/lua.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Lua的Table的成员函数声明中的形参self","uid":"68ecc63ec79c9905410118253d04884f","slug":"old_topic/2016-09-17-382","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T07:45:09.163Z","comments":true,"path":"api/articles/old_topic/2016-09-17-382.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"作者：糖果 Lua函数声明中的形参self Lua中有两种对Table结构的成员函数声明方式：“:“和”.”。 而对table的函数成员表量的调用也是这两种方试。 允许的： 第一种:用&quot;.“声明函数，用”:&quot;调用用函数。函数调用时lua会把table变量本身做...","link":"","photos":[],"count_time":{"symbolsCount":"2.2k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua","slug":"lua","count":124,"path":"api/tags/lua.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}