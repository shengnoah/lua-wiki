{"title":"MoonScript API","uid":"718dd50cb1bd8b8045cdc3956cf5b840","slug":"old_topic/2016-09-17-371","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T07:45:09.164Z","comments":true,"path":"api/articles/old_topic/2016-09-17-371.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":null,"content":"<p>{<br>\ntarget: “reference/api”<br>\ntemplate: “reference”<br>\ntitle: “Compiler API”<br>\nshort_name: “api”<br>\n}</p>\n<h1>MoonScript Compiler API</h1>\n<h2 id=\"Autocompiling-with-the-moonscript-Module\">Autocompiling with the <code>moonscript</code> Module</h2>\n<p>After installing MoonScript, you can include the <code>moonscript</code> module to make<br>\nany Lua script MoonScript aware.</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">require</span> <span class=\"string\">&quot;moonscript&quot;</span></span><br></pre></td></tr></table></figure>\n<p>After <code>moonscript</code> is required, Lua’s package loader is updated to search for<br>\n<code>.moon</code> files on any subsequent calls to <code>require</code>. The search path for <code>.moon</code><br>\nfiles is based on the current <code>package.path</code> value in Lua when <code>moonscript</code> is<br>\nrequired. Any search paths in <code>package.path</code> ending in <code>.lua</code> are copied,<br>\nrewritten to end in <code>.moon</code>, and then inserted in <code>package.moonpath</code>.</p>\n<p>The <code>moonloader</code> is the function that is responsible for searching<br>\n<code>package.moonpath</code> for a file available to be included. It is inserted in the<br>\nsecond position of the <code>package.loaders</code> table. This means that a matching <code>.moon</code> file<br>\nwill be loaded over a matching <code>.lua</code> file that has the same base name.</p>\n<p>For more information on Lua’s <code>package.loaders</code> see <a href=\"http://www.lua.org/manual/5.1/manual.html#pdf-package.loaders\">Lua Reference Manual<br>\n—<br>\npackage.loaders</a></p>\n<p>The <code>moonloader</code>, when finding a valid path to a <code>.moon</code> file, will parse and<br>\ncompile the file in memory. The code is then turned into a function using the<br>\nbuilt in <code>load</code> function, which is run as the module.</p>\n<p>If you are executing MoonScript code with the included <code>moon</code> command line tool<br>\nthen it is not required to include this module before including any other<br>\nMoonScript modules.</p>\n<h2 id=\"moonscript-base-Module\"><code>moonscript.base</code> Module</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">moonscript = require &quot;moonscript.base&quot;</span><br></pre></td></tr></table></figure>\n<p>This module contains an assortment of functions for loading and compiling<br>\nMoonScript code from within Lua.</p>\n<p>The module provides <code>load</code>, <code>loadfile</code>, <code>loadstring</code> functions, which are<br>\nanalogous to the similarly named Lua functions. The major difference is that<br>\nthey load MoonScript code instead of Lua code.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">moonscript = require &quot;moonscript.base&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">fn = moonscript.loadstring &#x27;print &quot;hi!&quot;&#x27;</span><br><span class=\"line\">fn!</span><br></pre></td></tr></table></figure>\n<p>All of these functions can take an optional last argument, a table of options.<br>\nThe only option right now is <code>implicitly_return_root</code>. Setting this to <code>false</code><br>\nmakes it so the file does not implicitly return its last statement.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">moonscript = require &quot;moonscript.base&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">fn = moonscript.loadstring &quot;10&quot;</span><br><span class=\"line\">print fn! -- prints &quot;10&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">fn = moonscript.loadstring &quot;10&quot;, implicitly_return_root: false</span><br><span class=\"line\">print fn! -- prints nothing</span><br></pre></td></tr></table></figure>\n<p>One more useful function is provided: <code>to_lua</code>. This function takes a string of<br>\nMoonScript code and returns the compiled Lua result along with the line mapping<br>\ntable. If there are any errors then <code>nil</code> and the error message are returned.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import to_lua from require &quot;moonscript.base&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">lua_code, line_tabel = to_lua [[</span><br><span class=\"line\">x = 124</span><br><span class=\"line\">print &quot;hello world #&#123;x&#125;&quot;</span><br><span class=\"line\">]]</span><br></pre></td></tr></table></figure>\n<p>Similar to the <code>load*</code> functions from above, <code>to_lua</code> can take an optional<br>\nfinal argument of a table of options.</p>\n<p>The second return value of <code>to_lua</code> is useful if you want to perform line<br>\nnumber reversal. It’s a table where the key is a Lua line number and the value<br>\nis a character offset from the original MoonScript source.</p>\n<h2 id=\"Programmatically-Compiling\">Programmatically Compiling</h2>\n<p>If you need finer grained control over the compilation process you can use the<br>\nraw parse and compile modules.</p>\n<p>Parsing converts a string of MoonScript into an abstract syntax tree. Compiling<br>\nconverts an abstract syntax tree into a Lua code string.</p>\n<p>Knowledge of this API may be useful for creating tools to aid the generation of<br>\nLua code from MoonScript code. For example, you could build a macro system by<br>\nanalyzing and manipulating the abstract syntax tree. Be warned though, the<br>\nformat of the abstract syntax tree is undocumented and may change in the<br>\nfuture.</p>\n<p>Here is a quick example of how you would compile a MoonScript string to a Lua<br>\nString (This is effectively the same as the <code>to_lua</code> function described above):</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">parse = require &quot;moonscript.parse&quot;</span><br><span class=\"line\">compile = require &quot;moonscript.compile&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">moon_code = [[(-&gt; print &quot;hello world&quot;)!]]</span><br><span class=\"line\"></span><br><span class=\"line\">tree, err = parse.string moon_code</span><br><span class=\"line\">unless tree</span><br><span class=\"line\">  error &quot;Parse error: &quot; .. err</span><br><span class=\"line\"></span><br><span class=\"line\">lua_code, err, pos = compile.tree tree</span><br><span class=\"line\">unless lua_code</span><br><span class=\"line\">  error compile.format_error err, pos, moon_code</span><br><span class=\"line\"></span><br><span class=\"line\">-- our code is ready</span><br><span class=\"line\">print lua_code</span><br></pre></td></tr></table></figure>","text":"{ target: “reference/api” template: “reference” title: “Compiler API” short_name: “api” } MoonScript Compiler API Autocompiling with the moo...","link":"","photos":[],"count_time":{"symbolsCount":"4.2k","symbolsTime":"4 mins."},"categories":[{"name":"topic","slug":"topic","count":308,"path":"api/categories/topic.json"}],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\"><span class=\"toc-text\">MoonScript Compiler API</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Autocompiling-with-the-moonscript-Module\"><span class=\"toc-text\">Autocompiling with the moonscript Module</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#moonscript-base-Module\"><span class=\"toc-text\">moonscript.base Module</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Programmatically-Compiling\"><span class=\"toc-text\">Programmatically Compiling</span></a></li></ol></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"反扫描可视化","uid":"9a08798d6ed47e5066c21c10dcfbe72f","slug":"old_topic/2016-09-17-372","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T07:45:09.232Z","comments":true,"path":"api/articles/old_topic/2016-09-17-372.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":[],"text":"威胁情报可视化，一直以来对安全人员分析安全事件起着有益的作用， 可视化是对分析的结果一种图形化的映射，是威胁行为的一种图形具象化。 针对蜜罐日志分析的流程来讲，溯源和展示攻击行为本身也是很重要的。 一般比较传统的日志分析方式是： 蜜罐向类似mysql这种库中写入被访问的IP地址和...","link":"","photos":[],"count_time":{"symbolsCount":887,"symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":308,"path":"api/categories/topic.json"}],"tags":[],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"善良比聪明重要---亚马逊 CEO 杰夫·贝佐斯（Jeff Bezos）在母校普林斯顿大学演讲","uid":"80b2bfed22c13e124acdd5132be472fa","slug":"old_topic/2016-09-17-373","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T07:45:09.210Z","comments":true,"path":"api/articles/old_topic/2016-09-17-373.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":null,"text":"2010 年，亚马逊 CEO 杰夫·贝佐斯（Jeff Bezos）在母校普林斯顿大学的毕业典礼上，勉励年轻人，善用自己的天赋，做出对的选择。因为，「人生到头来，我们的选择，决定了我们是什么样的人。」 以下是 Bezos 演讲内容： As a kid, I spent my sum...","link":"","photos":[],"count_time":{"symbolsCount":"9.6k","symbolsTime":"9 mins."},"categories":[{"name":"topic","slug":"topic","count":308,"path":"api/categories/topic.json"}],"tags":[{"name":"lua","slug":"lua","count":153,"path":"api/tags/lua.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}