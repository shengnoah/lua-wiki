{"title":"MoonScript API","uid":"718dd50cb1bd8b8045cdc3956cf5b840","slug":"old_topic/2016-09-17-371","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T07:45:09.164Z","comments":true,"path":"api/articles/old_topic/2016-09-17-371.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<p>{<br />\ntarget: “reference/api”<br />\ntemplate: “reference”<br />\ntitle: “Compiler API”<br />\nshort_name: “api”<br />\n}</p>\n<h1 id=\"moonscript-compiler-api\"><a class=\"markdownIt-Anchor\" href=\"#moonscript-compiler-api\"></a> MoonScript Compiler API</h1>\n<h2 id=\"autocompiling-with-the-moonscript-module\"><a class=\"markdownIt-Anchor\" href=\"#autocompiling-with-the-moonscript-module\"></a> Autocompiling with the <code>moonscript</code> Module</h2>\n<p>After installing MoonScript, you can include the <code>moonscript</code> module to make<br />\nany Lua script MoonScript aware.</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">require <span class=\"token string\">\"moonscript\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>After <code>moonscript</code> is required, Lua’s package loader is updated to search for<br />\n<code>.moon</code> files on any subsequent calls to <code>require</code>. The search path for <code>.moon</code><br />\nfiles is based on the current <code>package.path</code> value in Lua when <code>moonscript</code> is<br />\nrequired. Any search paths in <code>package.path</code> ending in <code>.lua</code> are copied,<br />\nrewritten to end in <code>.moon</code>, and then inserted in <code>package.moonpath</code>.</p>\n<p>The <code>moonloader</code> is the function that is responsible for searching<br />\n<code>package.moonpath</code> for a file available to be included. It is inserted in the<br />\nsecond position of the <code>package.loaders</code> table. This means that a matching <code>.moon</code> file<br />\nwill be loaded over a matching <code>.lua</code> file that has the same base name.</p>\n<p>For more information on Lua’s <code>package.loaders</code> see <a href=\"http://www.lua.org/manual/5.1/manual.html#pdf-package.loaders\">Lua Reference Manual<br />\n—<br />\npackage.loaders</a></p>\n<p>The <code>moonloader</code>, when finding a valid path to a <code>.moon</code> file, will parse and<br />\ncompile the file in memory. The code is then turned into a function using the<br />\nbuilt in <code>load</code> function, which is run as the module.</p>\n<p>If you are executing MoonScript code with the included <code>moon</code> command line tool<br />\nthen it is not required to include this module before including any other<br />\nMoonScript modules.</p>\n<h2 id=\"moonscriptbase-module\"><a class=\"markdownIt-Anchor\" href=\"#moonscriptbase-module\"></a> <code>moonscript.base</code> Module</h2>\n<pre class=\"line-numbers language-moononly\" data-language=\"moononly\"><code class=\"language-moononly\">moonscript &#x3D; require &quot;moonscript.base&quot;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>This module contains an assortment of functions for loading and compiling<br />\nMoonScript code from within Lua.</p>\n<p>The module provides <code>load</code>, <code>loadfile</code>, <code>loadstring</code> functions, which are<br />\nanalogous to the similarly named Lua functions. The major difference is that<br />\nthey load MoonScript code instead of Lua code.</p>\n<pre class=\"line-numbers language-moononly\" data-language=\"moononly\"><code class=\"language-moononly\">moonscript &#x3D; require &quot;moonscript.base&quot;\n\nfn &#x3D; moonscript.loadstring &#39;print &quot;hi!&quot;&#39;\nfn!<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>All of these functions can take an optional last argument, a table of options.<br />\nThe only option right now is <code>implicitly_return_root</code>. Setting this to <code>false</code><br />\nmakes it so the file does not implicitly return its last statement.</p>\n<pre class=\"line-numbers language-moononly\" data-language=\"moononly\"><code class=\"language-moononly\">moonscript &#x3D; require &quot;moonscript.base&quot;\n\nfn &#x3D; moonscript.loadstring &quot;10&quot;\nprint fn! -- prints &quot;10&quot;\n\nfn &#x3D; moonscript.loadstring &quot;10&quot;, implicitly_return_root: false\nprint fn! -- prints nothing<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>One more useful function is provided: <code>to_lua</code>. This function takes a string of<br />\nMoonScript code and returns the compiled Lua result along with the line mapping<br />\ntable. If there are any errors then <code>nil</code> and the error message are returned.</p>\n<pre class=\"line-numbers language-moononly\" data-language=\"moononly\"><code class=\"language-moononly\">import to_lua from require &quot;moonscript.base&quot;\n\nlua_code, line_tabel &#x3D; to_lua [[\nx &#x3D; 124\nprint &quot;hello world #&#123;x&#125;&quot;\n]]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>Similar to the <code>load*</code> functions from above, <code>to_lua</code> can take an optional<br />\nfinal argument of a table of options.</p>\n<p>The second return value of <code>to_lua</code> is useful if you want to perform line<br />\nnumber reversal. It’s a table where the key is a Lua line number and the value<br />\nis a character offset from the original MoonScript source.</p>\n<h2 id=\"programmatically-compiling\"><a class=\"markdownIt-Anchor\" href=\"#programmatically-compiling\"></a> Programmatically Compiling</h2>\n<p>If you need finer grained control over the compilation process you can use the<br />\nraw parse and compile modules.</p>\n<p>Parsing converts a string of MoonScript into an abstract syntax tree. Compiling<br />\nconverts an abstract syntax tree into a Lua code string.</p>\n<p>Knowledge of this API may be useful for creating tools to aid the generation of<br />\nLua code from MoonScript code. For example, you could build a macro system by<br />\nanalyzing and manipulating the abstract syntax tree. Be warned though, the<br />\nformat of the abstract syntax tree is undocumented and may change in the<br />\nfuture.</p>\n<p>Here is a quick example of how you would compile a MoonScript string to a Lua<br />\nString (This is effectively the same as the <code>to_lua</code> function described above):</p>\n<pre class=\"line-numbers language-moononly\" data-language=\"moononly\"><code class=\"language-moononly\">parse &#x3D; require &quot;moonscript.parse&quot;\ncompile &#x3D; require &quot;moonscript.compile&quot;\n\nmoon_code &#x3D; [[(-&gt; print &quot;hello world&quot;)!]]\n\ntree, err &#x3D; parse.string moon_code\nunless tree\n  error &quot;Parse error: &quot; .. err\n\nlua_code, err, pos &#x3D; compile.tree tree\nunless lua_code\n  error compile.format_error err, pos, moon_code\n\n-- our code is ready\nprint lua_code<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>","text":"{ target: “reference/api” template: “reference” title: “Compiler API” short_name: “api” } MoonScript Compiler API Autocompiling with the moo...","link":"","photos":[],"count_time":{"symbolsCount":"4.2k","symbolsTime":"4 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#moonscript-compiler-api\"><span class=\"toc-text\"> MoonScript Compiler API</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#autocompiling-with-the-moonscript-module\"><span class=\"toc-text\"> Autocompiling with the moonscript Module</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#moonscriptbase-module\"><span class=\"toc-text\"> moonscript.base Module</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#programmatically-compiling\"><span class=\"toc-text\"> Programmatically Compiling</span></a></li></ol></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"MoonScript Command Line.","uid":"b4e10a2e9208e3bffc49bf639e841080","slug":"old_topic/2016-09-17-370","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T07:45:09.172Z","comments":true,"path":"api/articles/old_topic/2016-09-17-370.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"{ target: “reference/command_line” template: “reference” title: “Command Line Tools” short_name: “command_line” } Command Line Tools Two too...","link":"","photos":[],"count_time":{"symbolsCount":"8k","symbolsTime":"7 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"反扫描可视化","uid":"9a08798d6ed47e5066c21c10dcfbe72f","slug":"old_topic/2016-09-17-372","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T07:45:09.232Z","comments":true,"path":"api/articles/old_topic/2016-09-17-372.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"威胁情报可视化，一直以来对安全人员分析安全事件起着有益的作用， 可视化是对分析的结 果一种图形化的映射，是威胁行为的一种图形具象化。 针对蜜罐日志分析的流程来讲，溯源和展示攻击行为本身也是很重要的。 一般比较传统的日志分析方式是： 蜜罐向类似mysql这种库中写入被访问的IP地址...","link":"","photos":[],"count_time":{"symbolsCount":899,"symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}