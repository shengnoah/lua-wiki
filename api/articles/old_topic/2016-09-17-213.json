{"title":"ConcurrentLua","uid":"8f06b9deb34ffdfee8f8030a216bc228","slug":"old_topic/2016-09-17-213","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T07:45:09.216Z","comments":true,"path":"api/articles/old_topic/2016-09-17-213.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<h3>介绍</h3> \n<p>ConcurrentLua 是一个无共享异步消息传递模型的实现.该模型来自Erlang语言.<br />\n她改编了Erlang的并发元素并整合进Lua里.</p>\n<p>ConcurrentLua的一个核心元素是 process(进程).一个进程是一个轻量级<br />\n虚拟机</p>\n<p>线程,扮演和操作系统的进程同样的角色;他们不共享内存而是使用某这进程间通讯<br />\n机制.这些进程能够根据需要被创建和销毁,并通过一个简单的环罗宾(轮训)算法来<br />\n调度他们.</p>\n<p>每一个进程关联到一个邮箱(临时存储消息的队列),通过邮箱来接受别的进程发来<br />\n的消息.进程可以在任何时候检查自己的邮箱有没有新消息抵达,如果有,进程可以<br />\n按照抵达的顺序依次读取.</p>\n<p>每个进程都有一个唯一的数字作为进程标识,叫 PID(process identifier).也可以<br />\n给进程取一个名字,并用名字来指代进程.进程名和进程的对应关系被保存到一个<br />\n中心储藏室–registry(注册表).进程可以编辑注册表,添加或者删除表项.</p>\n<p>错误捕捉机制也被实现成 monitors 和 links .通过 monitors 进程能够监视其他<br />\n进程,并在被监视进程异常终止的时候获得通知.通过 linker 进程绑定进程到一起,<br />\n当一个进程异常终止的时候,其他进程也被通知并终止.</p>\n<p>本系统还支持分布式编程和所有相关的组件.分布式的进程通过和本地进程一样的<br />\n方式来通讯.</p>\n<p>分布是基于 node(节点) 组件的.一个节点代表一个运行着很多进程的运行时环境.<br />\n节点们可以相互连接和通讯,于是建立了一个虚拟网络.分布的进程使用这个网络来<br />\n顺序交换信息.</p>\n<p>每个节点有个名字.其他的节点可以通过这个名字来连接.一个端口映射器精灵进程<br />\n(译注:就是服务进程,类似Erlang提供的名字服务)提供了名字解析服务.端口映射器<br />\n知晓虚拟网络中所有的节点的信息.</p>\n<p>正如进程可以在本地创建,进程已可以在远端节点被创建.一个远程进程能够被视同<br />\n为一个本地进程来操作.</p>\n<p>如果虚拟网络中的节点是全互联的(每一个节点双向连接其他的节点),那么可以使用<br />\n全局进程名.节点们相互交流和保养虚拟全局注册表并保持自己本地的注册表时时<br />\n更新.</p>\n<p>monitors 和 links 以同样的语义支持分布进程和本地进程.节点可以透明的处理<br />\n分布进程的错误.另外,进程可以像监视整个节点.</p>\n<p>节点可以在通讯前进行鉴权.一个已鉴权的节点才可以成为虚拟网络的一部分.这些<br />\n策略通过一个简单安全机制来保证.</p>\n<h3>实现</h3> \n<p>ConcurrentLua的实现是基于Lua组件系统实现的.这个系统负责组织和管理Lua的模块和子模块.主模块有两个,分别提供了并发功能和分布式编程功能.并发模块可以单独加载,每个模块都可以选择性加载需要使用的子模块.独立的端口映射器精灵进程也是实现的一部分.<br />\n系统中的进程是通过Lua的协程机制来实现的.一个进程其实就是一个Lua协程,<br />\n通过 yield 来挂起一个进程,通过 resume 来继续执行一个进程.</p>\n<p>进程的调度机制仍然是基于Lua使用的 协作式多线程模型. 进程自愿挂起自己,<br />\n从而让其它的进程获得运行的机会.然而,挂起和恢复进程被部分隐藏于高层机制<br />\n之下;当一个进程去等待消息抵达的时候挂起,而在消息抵达进程邮箱后准备恢复.<br />\n一个简单的环罗宾(轮训)调度器用来恢复进程的执行.</p>\n<p>任何类型的Lua数据,除了内存引用外,都可以通过消息来发送.消息可以是布尔值,<br />\n数字,字符串,表或者函数,或者他们的混合.数据自动在发送时被序列化,并在接受<br />\n时反序列化,所以的数据都是值传递.</p>\n<p>节点间的分布式进程间通讯机制是基于异步socket的.映射到网络层是非阻塞<br />\nsocket和定时轮训.这是如今大部分Lua模块采用的方法,非阻塞语义也应该被用<br />\n在例如文件和管道的IO操作上.</p>\n<h3>用法</h3> \n<p>一些例子提供了系统不要组件的用法,例如,创建进程,分布式进程的消息传递和错误捕获.<br />\n创建进程</p>\n<p>spawn()函数可以创建进程.spawn()函数接受至少一个参数,该参数标志进程的入口函数.其它附加参数则被直接转交给入口函数.<br />\n下面的例子示范创建一个进程.该进程输出指定次数的消息:</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">require <span class=\"token string\">'concurrent'</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">hello_world</span><span class=\"token punctuation\">(</span>times<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> times <span class=\"token keyword\">do</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello world'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">end</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'done'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span>\nconcurrent<span class=\"token punctuation\">.</span><span class=\"token function\">spawn</span><span class=\"token punctuation\">(</span>hello_world<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\nconcurrent<span class=\"token punctuation\">.</span><span class=\"token function\">loop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4>输出应该是:</h4> \n<pre class=\"line-numbers language-none\"><code class=\"language-none\">hello world\nhello world\nhello world\ndone<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h4>首先加载系统:</h4> \n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">require <span class=\"token string\">'concurrent'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h4>进程入口函数:</h4> \n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\"><span class=\"token keyword\">function</span> <span class=\"token function\">hello_world</span><span class=\"token punctuation\">(</span>times<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> times <span class=\"token keyword\">do</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello world'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">end</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'done'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h4>创建一个新进程:</h4> \n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">concurrent<span class=\"token punctuation\">.</span><span class=\"token function\">spawn</span><span class=\"token punctuation\">(</span>hello_world<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h4>最后调用系统无限循环:</h4> \n<p>concurrent.loop()消息交互进程通过 send() 和 receive() 函数来交换消息.同样,self()函数也被用来获取本进程ID.<br />\n下面的程序实现了两个进程交换消息然后终止:</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">require <span class=\"token string\">'concurrent'</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">pong</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">while</span> <span class=\"token keyword\">true</span> <span class=\"token keyword\">do</span>\n        <span class=\"token keyword\">local</span> msg <span class=\"token operator\">=</span> concurrent<span class=\"token punctuation\">.</span><span class=\"token function\">receive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> msg<span class=\"token punctuation\">.</span>body <span class=\"token operator\">==</span> <span class=\"token string\">'finished'</span> <span class=\"token keyword\">then</span>\n            <span class=\"token keyword\">break</span>\n        <span class=\"token keyword\">elseif</span> msg<span class=\"token punctuation\">.</span>body <span class=\"token operator\">==</span> <span class=\"token string\">'ping'</span> <span class=\"token keyword\">then</span>\n            <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'pong received ping'</span><span class=\"token punctuation\">)</span>\n            concurrent<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>from<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> body <span class=\"token operator\">=</span> <span class=\"token string\">'pong'</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">end</span>\n    <span class=\"token keyword\">end</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'pong finished'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">ping</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> pid<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> n <span class=\"token keyword\">do</span>\n        concurrent<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>pid<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>\n            from <span class=\"token operator\">=</span> concurrent<span class=\"token punctuation\">.</span><span class=\"token function\">self</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            body <span class=\"token operator\">=</span> <span class=\"token string\">'ping'</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">local</span> msg <span class=\"token operator\">=</span> concurrent<span class=\"token punctuation\">.</span><span class=\"token function\">receive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> msg<span class=\"token punctuation\">.</span>body <span class=\"token operator\">==</span> <span class=\"token string\">'pong'</span> <span class=\"token keyword\">then</span>\n            <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ping received pong'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">end</span>\n    <span class=\"token keyword\">end</span>\n    concurrent<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>pid<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>\n        from <span class=\"token operator\">=</span> concurrent<span class=\"token punctuation\">.</span><span class=\"token function\">self</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        body <span class=\"token operator\">=</span> <span class=\"token string\">'finished'</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ping finished'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span>\n\npid <span class=\"token operator\">=</span> concurrent<span class=\"token punctuation\">.</span><span class=\"token function\">spawn</span><span class=\"token punctuation\">(</span>pong<span class=\"token punctuation\">)</span>\nconcurrent<span class=\"token punctuation\">.</span><span class=\"token function\">spawn</span><span class=\"token punctuation\">(</span>ping<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> pid<span class=\"token punctuation\">)</span>\nconcurrent<span class=\"token punctuation\">.</span><span class=\"token function\">loop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4>输出应该是:</h4> \n<pre class=\"line-numbers language-none\"><code class=\"language-none\">pong received ping\nping received pong\npong received ping\nping received pong\npong received ping\nping received pong\npong finished\nping finished<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4>在 pong 进程被创建后, ping 进程获得了 pong 进程的 PID:</h4> \n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">pid <span class=\"token operator\">=</span> concurrent<span class=\"token punctuation\">.</span><span class=\"token function\">spawn</span><span class=\"token punctuation\">(</span>pong<span class=\"token punctuation\">)</span>\nconcurrent<span class=\"token punctuation\">.</span><span class=\"token function\">spawn</span><span class=\"token punctuation\">(</span>ping<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> pid<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h4>ping 进程发送一个消息:</h4> \n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">concurrent<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>pid<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>\n    from <span class=\"token operator\">=</span> concurrent<span class=\"token punctuation\">.</span><span class=\"token function\">self</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    body <span class=\"token operator\">=</span> <span class=\"token string\">'ping'</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h4>pong 进程等待消息抵达,然后把接收到的消息保存到一个变量中:</h4> \n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\"><span class=\"token keyword\">local</span> msg <span class=\"token operator\">=</span> concurrent<span class=\"token punctuation\">.</span><span class=\"token function\">receive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h4>pong 进程回复:</h4> \n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">concurrent<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>from<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> body <span class=\"token operator\">=</span> <span class=\"token string\">'pong'</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>pong 进程在接收到 ping 进程发来的一个提示后终结.<br />\n注册进程名可以用进程名替代PID来指定消息接收方. register() 函数可以用来在注册表<br />\n(译注:指系统的名字对应表,而不是Windows的注册表,顺便鄙视一下Windows. 😃 )</p>\n<h4>创建一个进程的名字:</h4> \n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">require <span class=\"token string\">'concurrent'</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">pong</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">while</span> <span class=\"token keyword\">true</span> <span class=\"token keyword\">do</span>\n        <span class=\"token keyword\">local</span> msg <span class=\"token operator\">=</span> concurrent<span class=\"token punctuation\">.</span><span class=\"token function\">receive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> msg<span class=\"token punctuation\">.</span>body <span class=\"token operator\">==</span> <span class=\"token string\">'finished'</span> <span class=\"token keyword\">then</span>\n            <span class=\"token keyword\">break</span>\n        <span class=\"token keyword\">elseif</span> msg<span class=\"token punctuation\">.</span>body <span class=\"token operator\">==</span> <span class=\"token string\">'ping'</span> <span class=\"token keyword\">then</span>\n            <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'pong received ping'</span><span class=\"token punctuation\">)</span>\n            concurrent<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>from<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> body <span class=\"token operator\">=</span> <span class=\"token string\">'pong'</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">end</span>\n    <span class=\"token keyword\">end</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'pong finished'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">ping</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> n <span class=\"token keyword\">do</span>\n        concurrent<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">'pong'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>\n            from <span class=\"token operator\">=</span> concurrent<span class=\"token punctuation\">.</span><span class=\"token function\">self</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            body <span class=\"token operator\">=</span> <span class=\"token string\">'ping'</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">local</span> msg <span class=\"token operator\">=</span> concurrent<span class=\"token punctuation\">.</span><span class=\"token function\">receive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> msg<span class=\"token punctuation\">.</span>body <span class=\"token operator\">==</span> <span class=\"token string\">'pong'</span> <span class=\"token keyword\">then</span>\n            <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ping received pong'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">end</span>\n    <span class=\"token keyword\">end</span>\n    concurrent<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">'pong'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>\n        from <span class=\"token operator\">=</span> concurrent<span class=\"token punctuation\">.</span><span class=\"token function\">self</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        body <span class=\"token operator\">=</span> <span class=\"token string\">'finished'</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ping finished'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span>\n\npid <span class=\"token operator\">=</span> concurrent<span class=\"token punctuation\">.</span><span class=\"token function\">spawn</span><span class=\"token punctuation\">(</span>pong<span class=\"token punctuation\">)</span>\nconcurrent<span class=\"token punctuation\">.</span><span class=\"token function\">register</span><span class=\"token punctuation\">(</span><span class=\"token string\">'pong'</span><span class=\"token punctuation\">,</span> pid<span class=\"token punctuation\">)</span>\nconcurrent<span class=\"token punctuation\">.</span><span class=\"token function\">spawn</span><span class=\"token punctuation\">(</span>ping<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\nconcurrent<span class=\"token punctuation\">.</span><span class=\"token function\">loop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4>相对前一个版本的改变就是 ping 进程发送消息的地方:</h4> \n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">concurrent<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">'pong'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>\n    from <span class=\"token operator\">=</span> concurrent<span class=\"token punctuation\">.</span><span class=\"token function\">self</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    body <span class=\"token operator\">=</span> <span class=\"token string\">'ping'</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h4>和:</h4> \n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">concurrent<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">'pong'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>\n    from <span class=\"token operator\">=</span> concurrent<span class=\"token punctuation\">.</span><span class=\"token function\">self</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    body <span class=\"token operator\">=</span> <span class=\"token string\">'finished'</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h4>以及现在 pong 进程注册了它的名字:</h4> \n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">concurrent<span class=\"token punctuation\">.</span><span class=\"token function\">register</span><span class=\"token punctuation\">(</span><span class=\"token string\">'pong'</span><span class=\"token punctuation\">,</span> pid<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>因此 ping 进程不需要知道 pong 进程的 PID 了.<br />\n分布式消息传递不同节点上的进程仍然可以使用同样的消息传递机制.远程进程通过 PID或进程名 加上<br />\n节点名来指定.先前的例子可以改造成两个程序,分别是一个独立进程.</p>\n<h4>pong 进程的代码如下:</h4> \n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">require <span class=\"token string\">'concurrent'</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">pong</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">while</span> <span class=\"token keyword\">true</span> <span class=\"token keyword\">do</span>\n        <span class=\"token keyword\">local</span> msg <span class=\"token operator\">=</span> concurrent<span class=\"token punctuation\">.</span><span class=\"token function\">receive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> msg<span class=\"token punctuation\">.</span>body <span class=\"token operator\">==</span> <span class=\"token string\">'finished'</span> <span class=\"token keyword\">then</span>\n            <span class=\"token keyword\">break</span>\n        <span class=\"token keyword\">elseif</span> msg<span class=\"token punctuation\">.</span>body <span class=\"token operator\">==</span> <span class=\"token string\">'ping'</span> <span class=\"token keyword\">then</span>\n            <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'pong received ping'</span><span class=\"token punctuation\">)</span>\n            concurrent<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>from<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> body <span class=\"token operator\">=</span> <span class=\"token string\">'pong'</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">end</span>\n    <span class=\"token keyword\">end</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'pong finished'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span>\nconcurrent<span class=\"token punctuation\">.</span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token string\">'pong@gaia'</span><span class=\"token punctuation\">)</span>\npid <span class=\"token operator\">=</span> concurrent<span class=\"token punctuation\">.</span><span class=\"token function\">spawn</span><span class=\"token punctuation\">(</span>pong<span class=\"token punctuation\">)</span>\nconcurrent<span class=\"token punctuation\">.</span><span class=\"token function\">register</span><span class=\"token punctuation\">(</span><span class=\"token string\">'pong'</span><span class=\"token punctuation\">,</span> pid<span class=\"token punctuation\">)</span>\nconcurrent<span class=\"token punctuation\">.</span><span class=\"token function\">loop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nconcurrent<span class=\"token punctuation\">.</span><span class=\"token function\">shutdown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4>ping 进程的代码如下:</h4> \n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">require <span class=\"token string\">'concurrent'</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">ping</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> n <span class=\"token keyword\">do</span>\n        concurrent<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> <span class=\"token string\">'pong'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'pong@gaia'</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>\n            from <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> concurrent<span class=\"token punctuation\">.</span><span class=\"token function\">self</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> concurrent<span class=\"token punctuation\">.</span><span class=\"token function\">node</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n            body <span class=\"token operator\">=</span> <span class=\"token string\">'ping'</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">local</span> msg <span class=\"token operator\">=</span> concurrent<span class=\"token punctuation\">.</span><span class=\"token function\">receive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> msg<span class=\"token punctuation\">.</span>body <span class=\"token operator\">==</span> <span class=\"token string\">'pong'</span> <span class=\"token keyword\">then</span>\n            <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ping received pong'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">end</span>\n    <span class=\"token keyword\">end</span>\n    concurrent<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> <span class=\"token string\">'pong'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'pong@gaia'</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>\n        from <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> concurrent<span class=\"token punctuation\">.</span><span class=\"token function\">self</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> concurrent<span class=\"token punctuation\">.</span><span class=\"token function\">node</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n        body <span class=\"token operator\">=</span> <span class=\"token string\">'finished'</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ping finished'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span>\nconcurrent<span class=\"token punctuation\">.</span><span class=\"token function\">spawn</span><span class=\"token punctuation\">(</span>ping<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\nconcurrent<span class=\"token punctuation\">.</span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ping@selene'</span><span class=\"token punctuation\">)</span>\nconcurrent<span class=\"token punctuation\">.</span><span class=\"token function\">loop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nconcurrent<span class=\"token punctuation\">.</span><span class=\"token function\">shutdown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>(译注: 如果你想自己跑这个例子需要修改上面的节点名后半部分的机器名部分,使之和你的网络环境相匹配.)pong 进程的输出应该是:</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">pong received ping\npong received ping\npong received ping\npong finished<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h4>ping 进程的输出应该是:</h4> \n<pre class=\"line-numbers language-none\"><code class=\"language-none\">ping received pong\nping received pong\nping received pong\nping finished<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h4>在这个例子里,运行时系统运行在分布式模式.为了看到结果,端口映射器必须先运行:</h4> \n<p>$ clpmd</p>\n<h4>初始化 pong 进程所在节点的代码:</h4> \n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">concurrent<span class=\"token punctuation\">.</span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token string\">'pong@gaia'</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h4>初始化 ping 进程所在节点的代码:</h4> \n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">concurrent<span class=\"token punctuation\">.</span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ping@selene'</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h4>上面两句代码注册节点到端口映射器.去注册是通过:</h4> \n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">concurrent<span class=\"token punctuation\">.</span><span class=\"token function\">shutdown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h4>这个例子的唯一改动是消息发送的目的地.node()函数会返回调用进程坐在节点的名字:</h4> \n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">concurrent<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> <span class=\"token string\">'pong'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'pong@gaia'</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>\n    from <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> concurrent<span class=\"token punctuation\">.</span><span class=\"token function\">self</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> concurrent<span class=\"token punctuation\">.</span><span class=\"token function\">node</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    body <span class=\"token operator\">=</span> <span class=\"token string\">'ping'</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h4>接下来:</h4> \n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">concurrent<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> <span class=\"token string\">'pong'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'pong@gaia'</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>\n    from <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> concurrent<span class=\"token punctuation\">.</span><span class=\"token function\">self</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> concurrent<span class=\"token punctuation\">.</span><span class=\"token function\">node</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    body <span class=\"token operator\">=</span> <span class=\"token string\">'finished'</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h4>错误处理一个捕获进程间错误的方法是连接进程.两个进程被绑定到一起,一个异常终止的后另一个也会终止.link()函数用来绑定进程:</h4> \n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">require <span class=\"token string\">'concurrent'</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">ping</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> pid<span class=\"token punctuation\">)</span>\n    concurrent<span class=\"token punctuation\">.</span><span class=\"token function\">link</span><span class=\"token punctuation\">(</span>pid<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> n <span class=\"token keyword\">do</span>\n        concurrent<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>pid<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>\n            from <span class=\"token operator\">=</span> concurrent<span class=\"token punctuation\">.</span><span class=\"token function\">self</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            body <span class=\"token operator\">=</span> <span class=\"token string\">'ping'</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">local</span> msg <span class=\"token operator\">=</span> concurrent<span class=\"token punctuation\">.</span><span class=\"token function\">receive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> msg<span class=\"token punctuation\">.</span>body <span class=\"token operator\">==</span> <span class=\"token string\">'pong'</span> <span class=\"token keyword\">then</span>\n            <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ping received pong'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">end</span>\n    <span class=\"token keyword\">end</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ping finished'</span><span class=\"token punctuation\">)</span>\n    concurrent<span class=\"token punctuation\">.</span><span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'finished'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">pong</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">while</span> <span class=\"token keyword\">true</span> <span class=\"token keyword\">do</span>\n        <span class=\"token keyword\">local</span> msg <span class=\"token operator\">=</span> concurrent<span class=\"token punctuation\">.</span><span class=\"token function\">receive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> msg<span class=\"token punctuation\">.</span>body <span class=\"token operator\">==</span> <span class=\"token string\">'ping'</span> <span class=\"token keyword\">then</span>\n            <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'pong received ping'</span><span class=\"token punctuation\">)</span>\n            concurrent<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>from<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> body <span class=\"token operator\">=</span> <span class=\"token string\">'pong'</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">end</span>\n    <span class=\"token keyword\">end</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'pong finished'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span>\npid <span class=\"token operator\">=</span> concurrent<span class=\"token punctuation\">.</span><span class=\"token function\">spawn</span><span class=\"token punctuation\">(</span>pong<span class=\"token punctuation\">)</span>\nconcurrent<span class=\"token punctuation\">.</span><span class=\"token function\">spawn</span><span class=\"token punctuation\">(</span>ping<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> pid<span class=\"token punctuation\">)</span>\nconcurrent<span class=\"token punctuation\">.</span><span class=\"token function\">loop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4>输出应该是:</h4> \n<pre class=\"line-numbers language-none\"><code class=\"language-none\">pong received ping\nping received pong\npong received ping\nping received pong\npong received ping\nping received pong\npong finished <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>– 译注:这里应该是: ping fininshedpong 进程永远不会运行到最后一行,因为他在接收到 ping 进程退出信号的时候会终止.</p>\n<h4>连接进程的代码如下:</h4> \n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">concurrent<span class=\"token punctuation\">.</span><span class=\"token function\">link</span><span class=\"token punctuation\">(</span>pid<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h4>也可以捕获进程终止导致的exit信号.被捕获的exit信号会转换成一个特殊的消息:</h4> \n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">require <span class=\"token string\">'concurrent'</span>\nconcurrent<span class=\"token punctuation\">.</span><span class=\"token function\">setoption</span><span class=\"token punctuation\">(</span><span class=\"token string\">'trapexit'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">true</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">pong</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">while</span> <span class=\"token keyword\">true</span> <span class=\"token keyword\">do</span>\n        <span class=\"token keyword\">local</span> msg <span class=\"token operator\">=</span> concurrent<span class=\"token punctuation\">.</span><span class=\"token function\">receive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> msg<span class=\"token punctuation\">.</span>signal <span class=\"token operator\">==</span> <span class=\"token string\">'EXIT'</span> <span class=\"token keyword\">then</span>\n            <span class=\"token keyword\">break</span>\n        <span class=\"token keyword\">elseif</span> msg<span class=\"token punctuation\">.</span>body <span class=\"token operator\">==</span> <span class=\"token string\">'ping'</span> <span class=\"token keyword\">then</span>\n            <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'pong received ping'</span><span class=\"token punctuation\">)</span>\n            concurrent<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>from<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> body <span class=\"token operator\">=</span> <span class=\"token string\">'pong'</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">end</span>\n    <span class=\"token keyword\">end</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'pong finished'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">ping</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> pid<span class=\"token punctuation\">)</span>\n    concurrent<span class=\"token punctuation\">.</span><span class=\"token function\">link</span><span class=\"token punctuation\">(</span>pid<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> n <span class=\"token keyword\">do</span>\n        concurrent<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>pid<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>\n            from <span class=\"token operator\">=</span> concurrent<span class=\"token punctuation\">.</span><span class=\"token function\">self</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            body <span class=\"token operator\">=</span> <span class=\"token string\">'ping'</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">local</span> msg <span class=\"token operator\">=</span> concurrent<span class=\"token punctuation\">.</span><span class=\"token function\">receive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> msg<span class=\"token punctuation\">.</span>body <span class=\"token operator\">==</span> <span class=\"token string\">'pong'</span> <span class=\"token keyword\">then</span>\n            <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ping received pong'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">end</span>\n    <span class=\"token keyword\">end</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ping finished'</span><span class=\"token punctuation\">)</span>\n    concurrent<span class=\"token punctuation\">.</span><span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'finished'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span>\n\npid <span class=\"token operator\">=</span> concurrent<span class=\"token punctuation\">.</span><span class=\"token function\">spawn</span><span class=\"token punctuation\">(</span>pong<span class=\"token punctuation\">)</span>\nconcurrent<span class=\"token punctuation\">.</span><span class=\"token function\">spawn</span><span class=\"token punctuation\">(</span>ping<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> pid<span class=\"token punctuation\">)</span>\nconcurrent<span class=\"token punctuation\">.</span><span class=\"token function\">loop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4>输出应该是:</h4> \n<pre class=\"line-numbers language-none\"><code class=\"language-none\">pong received ping\nping received pong\npong received ping\nping received pong\npong received ping\nping received pong\npong finished<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4>ping finished可以通过 setoption() 函数来设置进程链接的选项,这里是 trapexit 选项:</h4> \n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">concurrent<span class=\"token punctuation\">.</span><span class=\"token function\">setoption</span><span class=\"token punctuation\">(</span><span class=\"token string\">'trapexit'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">true</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h4>pong 进程会接收到一个退出消息:</h4> \n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\"><span class=\"token keyword\">if</span> msg<span class=\"token punctuation\">.</span>signal <span class=\"token operator\">==</span> <span class=\"token string\">'EXIT'</span> <span class=\"token keyword\">then</span>\n    <span class=\"token keyword\">break</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>基于提示消息的monitor, 也可以用来处理错误.</p>\n<p>原文连接：<br />\n<a href=\"http://floss.qiniucdn.com/data/20110831112702/index.html\">http://floss.qiniucdn.com/data/20110831112702/index.html</a></p>\n","text":"介绍 ConcurrentLua 是一个无共享异步消息传递模型的实现.该模型来自Erlang语言. 她改编了Erlang的并发元素并整合进Lua里. ConcurrentLua的一个核心元素是 process(进程).一个进程是一个轻量级 虚拟机 线程,扮演和操作系统的进程同样的...","link":"","photos":[],"count_time":{"symbolsCount":"9.3k","symbolsTime":"8 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">介绍</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">实现</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">用法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\"><span class=\"toc-text\">输出应该是:</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\"><span class=\"toc-text\">首先加载系统:</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\"><span class=\"toc-text\">进程入口函数:</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\"><span class=\"toc-text\">创建一个新进程:</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\"><span class=\"toc-text\">最后调用系统无限循环:</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\"><span class=\"toc-text\">输出应该是:</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\"><span class=\"toc-text\">在 pong 进程被创建后, ping 进程获得了 pong 进程的 PID:</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\"><span class=\"toc-text\">ping 进程发送一个消息:</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\"><span class=\"toc-text\">pong 进程等待消息抵达,然后把接收到的消息保存到一个变量中:</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\"><span class=\"toc-text\">pong 进程回复:</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\"><span class=\"toc-text\">创建一个进程的名字:</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\"><span class=\"toc-text\">相对前一个版本的改变就是 ping 进程发送消息的地方:</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\"><span class=\"toc-text\">和:</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\"><span class=\"toc-text\">以及现在 pong 进程注册了它的名字:</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\"><span class=\"toc-text\">pong 进程的代码如下:</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\"><span class=\"toc-text\">ping 进程的代码如下:</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\"><span class=\"toc-text\">ping 进程的输出应该是:</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\"><span class=\"toc-text\">在这个例子里,运行时系统运行在分布式模式.为了看到结果,端口映射器必须先运行:</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\"><span class=\"toc-text\">初始化 pong 进程所在节点的代码:</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\"><span class=\"toc-text\">初始化 ping 进程所在节点的代码:</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\"><span class=\"toc-text\">上面两句代码注册节点到端口映射器.去注册是通过:</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\"><span class=\"toc-text\">这个例子的唯一改动是消息发送的目的地.node()函数会返回调用进程坐在节点的名字:</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\"><span class=\"toc-text\">接下来:</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\"><span class=\"toc-text\">错误处理一个捕获进程间错误的方法是连接进程.两个进程被绑定到一起,一个异常终止的后另一个也会终止.link()函数用来绑定进程:</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\"><span class=\"toc-text\">输出应该是:</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\"><span class=\"toc-text\">连接进程的代码如下:</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\"><span class=\"toc-text\">也可以捕获进程终止导致的exit信号.被捕获的exit信号会转换成一个特殊的消息:</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\"><span class=\"toc-text\">输出应该是:</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\"><span class=\"toc-text\">ping finished可以通过 setoption() 函数来设置进程链接的选项,这里是 trapexit 选项:</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\"><span class=\"toc-text\">pong 进程会接收到一个退出消息:</span></a></li></ol></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"NGINX执行阶段概念","uid":"9430d64b8d40e629bac43d0184c0f2ac","slug":"old_topic/2016-09-17-214","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T07:45:09.167Z","comments":true,"path":"api/articles/old_topic/2016-09-17-214.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"图片：1079283195.png 原文连接：http://leandre.cn/web/79.html ","link":"","photos":[],"count_time":{"symbolsCount":54,"symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"LOR框架设计草图","uid":"ad959d61ae3ba0f4919be1ad782c86c1","slug":"old_topic/2016-09-17-216","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T07:45:09.229Z","comments":true,"path":"api/articles/old_topic/2016-09-17-216.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"下面图是LOR的框架的设计草图，是作者饭总当时为实现LOR画的，提供给大家参考： 想把route,router,layer那部分的設計畫清楚一些，饭總提供了一下現這個在線畫圖的工具： https://www.processon.com/ 图片：1.jpg 图片：2.jpg 图片：...","link":"","photos":[],"count_time":{"symbolsCount":177,"symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}