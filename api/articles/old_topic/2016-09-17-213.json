{"title":"ConcurrentLua","uid":"8f06b9deb34ffdfee8f8030a216bc228","slug":"old_topic/2016-09-17-213","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T07:45:09.216Z","comments":true,"path":"api/articles/old_topic/2016-09-17-213.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":null,"content":"<h3>介绍</h3> \n<p>ConcurrentLua 是一个无共享异步消息传递模型的实现.该模型来自Erlang语言.<br>\n她改编了Erlang的并发元素并整合进Lua里.</p>\n<p>ConcurrentLua的一个核心元素是 process(进程).一个进程是一个轻量级虚拟机</p>\n<p>线程,扮演和操作系统的进程同样的角色;他们不共享内存而是使用某这进程间通讯机制.这些进程能够根据需要被创建和销毁,并通过一个简单的环罗宾(轮训)算法来调度他们.</p>\n<p>每一个进程关联到一个邮箱(临时存储消息的队列),通过邮箱来接受别的进程发来的消息.进程可以在任何时候检查自己的邮箱有没有新消息抵达,如果有,进程可以按照抵达的顺序依次读取.</p>\n<p>每个进程都有一个唯一的数字作为进程标识,叫 PID(process identifier).也可以给进程取一个名字,并用名字来指代进程.进程名和进程的对应关系被保存到一个中心储藏室–registry(注册表).进程可以编辑注册表,添加或者删除表项.</p>\n<p>错误捕捉机制也被实现成 monitors 和 links .通过 monitors 进程能够监视其他进程,并在被监视进程异常终止的时候获得通知.通过 linker 进程绑定进程到一起,<br>\n当一个进程异常终止的时候,其他进程也被通知并终止.</p>\n<p>本系统还支持分布式编程和所有相关的组件.分布式的进程通过和本地进程一样的方式来通讯.</p>\n<p>分布是基于 node(节点) 组件的.一个节点代表一个运行着很多进程的运行时环境.<br>\n节点们可以相互连接和通讯,于是建立了一个虚拟网络.分布的进程使用这个网络来顺序交换信息.</p>\n<p>每个节点有个名字.其他的节点可以通过这个名字来连接.一个端口映射器精灵进程<br>\n(译注:就是服务进程,类似Erlang提供的名字服务)提供了名字解析服务.端口映射器知晓虚拟网络中所有的节点的信息.</p>\n<p>正如进程可以在本地创建,进程已可以在远端节点被创建.一个远程进程能够被视同为一个本地进程来操作.</p>\n<p>如果虚拟网络中的节点是全互联的(每一个节点双向连接其他的节点),那么可以使用全局进程名.节点们相互交流和保养虚拟全局注册表并保持自己本地的注册表时时更新.</p>\n<p>monitors 和 links 以同样的语义支持分布进程和本地进程.节点可以透明的处理分布进程的错误.另外,进程可以像监视整个节点.</p>\n<p>节点可以在通讯前进行鉴权.一个已鉴权的节点才可以成为虚拟网络的一部分.这些策略通过一个简单安全机制来保证.</p>\n<h3>实现</h3> \n<p>ConcurrentLua的实现是基于Lua组件系统实现的.这个系统负责组织和管理Lua的模块和子模块.主模块有两个,分别提供了并发功能和分布式编程功能.并发模块可以单独加载,每个模块都可以选择性加载需要使用的子模块.独立的端口映射器精灵进程也是实现的一部分.<br>\n系统中的进程是通过Lua的协程机制来实现的.一个进程其实就是一个Lua协程,<br>\n通过 yield 来挂起一个进程,通过 resume 来继续执行一个进程.</p>\n<p>进程的调度机制仍然是基于Lua使用的 协作式多线程模型. 进程自愿挂起自己,<br>\n从而让其它的进程获得运行的机会.然而,挂起和恢复进程被部分隐藏于高层机制之下;当一个进程去等待消息抵达的时候挂起,而在消息抵达进程邮箱后准备恢复.<br>\n一个简单的环罗宾(轮训)调度器用来恢复进程的执行.</p>\n<p>任何类型的Lua数据,除了内存引用外,都可以通过消息来发送.消息可以是布尔值,<br>\n数字,字符串,表或者函数,或者他们的混合.数据自动在发送时被序列化,并在接受时反序列化,所以的数据都是值传递.</p>\n<p>节点间的分布式进程间通讯机制是基于异步socket的.映射到网络层是非阻塞<br>\nsocket和定时轮训.这是如今大部分Lua模块采用的方法,非阻塞语义也应该被用在例如文件和管道的IO操作上.</p>\n<h3>用法</h3> \n<p>一些例子提供了系统不要组件的用法,例如,创建进程,分布式进程的消息传递和错误捕获.<br>\n创建进程</p>\n<p>spawn()函数可以创建进程.spawn()函数接受至少一个参数,该参数标志进程的入口函数.其它附加参数则被直接转交给入口函数.<br>\n下面的例子示范创建一个进程.该进程输出指定次数的消息:</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">require</span> <span class=\"string\">&#x27;concurrent&#x27;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hello_world</span><span class=\"params\">(times)</span></span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i = <span class=\"number\">1</span>, times <span class=\"keyword\">do</span> <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;hello world&#x27;</span>) <span class=\"keyword\">end</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;done&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\">concurrent.spawn(hello_world, <span class=\"number\">3</span>)</span><br><span class=\"line\">concurrent.loop()</span><br></pre></td></tr></table></figure>\n<h4>输出应该是:</h4> \n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hello world</span><br><span class=\"line\">hello world</span><br><span class=\"line\">hello world</span><br><span class=\"line\">done</span><br></pre></td></tr></table></figure>\n<h4>首先加载系统:</h4> \n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">require</span> <span class=\"string\">&#x27;concurrent&#x27;</span></span><br></pre></td></tr></table></figure>\n<h4>进程入口函数:</h4> \n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hello_world</span><span class=\"params\">(times)</span></span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i = <span class=\"number\">1</span>, times <span class=\"keyword\">do</span> <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;hello world&#x27;</span>) <span class=\"keyword\">end</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;done&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<h4>创建一个新进程:</h4> \n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">concurrent.spawn(hello_world, <span class=\"number\">3</span>)</span><br></pre></td></tr></table></figure>\n<h4>最后调用系统无限循环:</h4> \n<p>concurrent.loop()消息交互进程通过 send() 和 receive() 函数来交换消息.同样,self()函数也被用来获取本进程ID.<br>\n下面的程序实现了两个进程交换消息然后终止:</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">require</span> <span class=\"string\">&#x27;concurrent&#x27;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">pong</span><span class=\"params\">()</span></span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"literal\">true</span> <span class=\"keyword\">do</span></span><br><span class=\"line\">        <span class=\"keyword\">local</span> msg = concurrent.receive()</span><br><span class=\"line\">        <span class=\"keyword\">if</span> msg.body == <span class=\"string\">&#x27;finished&#x27;</span> <span class=\"keyword\">then</span></span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">        <span class=\"keyword\">elseif</span> msg.body == <span class=\"string\">&#x27;ping&#x27;</span> <span class=\"keyword\">then</span></span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;pong received ping&#x27;</span>)</span><br><span class=\"line\">            concurrent.send(msg.from, &#123; body = <span class=\"string\">&#x27;pong&#x27;</span> &#125;)</span><br><span class=\"line\">        <span class=\"keyword\">end</span></span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;pong finished&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ping</span><span class=\"params\">(n, pid)</span></span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i = <span class=\"number\">1</span>, n <span class=\"keyword\">do</span></span><br><span class=\"line\">        concurrent.send(pid, &#123;</span><br><span class=\"line\">            from = concurrent.<span class=\"built_in\">self</span>(),</span><br><span class=\"line\">            body = <span class=\"string\">&#x27;ping&#x27;</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        <span class=\"keyword\">local</span> msg = concurrent.receive()</span><br><span class=\"line\">        <span class=\"keyword\">if</span> msg.body == <span class=\"string\">&#x27;pong&#x27;</span> <span class=\"keyword\">then</span></span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;ping received pong&#x27;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">end</span></span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\">    concurrent.send(pid, &#123;</span><br><span class=\"line\">        from = concurrent.<span class=\"built_in\">self</span>(),</span><br><span class=\"line\">        body = <span class=\"string\">&#x27;finished&#x27;</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;ping finished&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">pid = concurrent.spawn(pong)</span><br><span class=\"line\">concurrent.spawn(ping, <span class=\"number\">3</span>, pid)</span><br><span class=\"line\">concurrent.loop()</span><br></pre></td></tr></table></figure>\n<h4>输出应该是:</h4> \n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pong received ping</span><br><span class=\"line\">ping received pong</span><br><span class=\"line\">pong received ping</span><br><span class=\"line\">ping received pong</span><br><span class=\"line\">pong received ping</span><br><span class=\"line\">ping received pong</span><br><span class=\"line\">pong finished</span><br><span class=\"line\">ping finished</span><br></pre></td></tr></table></figure>\n<h4>在 pong 进程被创建后, ping 进程获得了 pong 进程的 PID:</h4> \n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pid = concurrent.spawn(pong)</span><br><span class=\"line\">concurrent.spawn(ping, <span class=\"number\">3</span>, pid)</span><br></pre></td></tr></table></figure>\n<h4>ping 进程发送一个消息:</h4> \n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">concurrent.send(pid, &#123;</span><br><span class=\"line\">    from = concurrent.<span class=\"built_in\">self</span>(),</span><br><span class=\"line\">    body = <span class=\"string\">&#x27;ping&#x27;</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h4>pong 进程等待消息抵达,然后把接收到的消息保存到一个变量中:</h4> \n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">local</span> msg = concurrent.receive()</span><br></pre></td></tr></table></figure>\n<h4>pong 进程回复:</h4> \n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">concurrent.send(msg.from, &#123; body = <span class=\"string\">&#x27;pong&#x27;</span> &#125;)</span><br></pre></td></tr></table></figure>\n<p>pong 进程在接收到 ping 进程发来的一个提示后终结.<br>\n注册进程名可以用进程名替代PID来指定消息接收方. register() 函数可以用来在注册表<br>\n(译注:指系统的名字对应表,而不是Windows的注册表,顺便鄙视一下Windows. 😃 )</p>\n<h4>创建一个进程的名字:</h4> \n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">require</span> <span class=\"string\">&#x27;concurrent&#x27;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">pong</span><span class=\"params\">()</span></span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"literal\">true</span> <span class=\"keyword\">do</span></span><br><span class=\"line\">        <span class=\"keyword\">local</span> msg = concurrent.receive()</span><br><span class=\"line\">        <span class=\"keyword\">if</span> msg.body == <span class=\"string\">&#x27;finished&#x27;</span> <span class=\"keyword\">then</span></span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">        <span class=\"keyword\">elseif</span> msg.body == <span class=\"string\">&#x27;ping&#x27;</span> <span class=\"keyword\">then</span></span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;pong received ping&#x27;</span>)</span><br><span class=\"line\">            concurrent.send(msg.from, &#123; body = <span class=\"string\">&#x27;pong&#x27;</span> &#125;)</span><br><span class=\"line\">        <span class=\"keyword\">end</span></span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;pong finished&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ping</span><span class=\"params\">(n)</span></span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i = <span class=\"number\">1</span>, n <span class=\"keyword\">do</span></span><br><span class=\"line\">        concurrent.send(<span class=\"string\">&#x27;pong&#x27;</span>, &#123;</span><br><span class=\"line\">            from = concurrent.<span class=\"built_in\">self</span>(),</span><br><span class=\"line\">            body = <span class=\"string\">&#x27;ping&#x27;</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        <span class=\"keyword\">local</span> msg = concurrent.receive()</span><br><span class=\"line\">        <span class=\"keyword\">if</span> msg.body == <span class=\"string\">&#x27;pong&#x27;</span> <span class=\"keyword\">then</span></span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;ping received pong&#x27;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">end</span></span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\">    concurrent.send(<span class=\"string\">&#x27;pong&#x27;</span>, &#123;</span><br><span class=\"line\">        from = concurrent.<span class=\"built_in\">self</span>(),</span><br><span class=\"line\">        body = <span class=\"string\">&#x27;finished&#x27;</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;ping finished&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">pid = concurrent.spawn(pong)</span><br><span class=\"line\">concurrent.register(<span class=\"string\">&#x27;pong&#x27;</span>, pid)</span><br><span class=\"line\">concurrent.spawn(ping, <span class=\"number\">3</span>)</span><br><span class=\"line\">concurrent.loop()</span><br></pre></td></tr></table></figure>\n<h4>相对前一个版本的改变就是 ping 进程发送消息的地方:</h4> \n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">concurrent.send(<span class=\"string\">&#x27;pong&#x27;</span>, &#123;</span><br><span class=\"line\">    from = concurrent.<span class=\"built_in\">self</span>(),</span><br><span class=\"line\">    body = <span class=\"string\">&#x27;ping&#x27;</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h4>和:</h4> \n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">concurrent.send(<span class=\"string\">&#x27;pong&#x27;</span>, &#123;</span><br><span class=\"line\">    from = concurrent.<span class=\"built_in\">self</span>(),</span><br><span class=\"line\">    body = <span class=\"string\">&#x27;finished&#x27;</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h4>以及现在 pong 进程注册了它的名字:</h4> \n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">concurrent.register(<span class=\"string\">&#x27;pong&#x27;</span>, pid)</span><br></pre></td></tr></table></figure>\n<p>因此 ping 进程不需要知道 pong 进程的 PID 了.<br>\n分布式消息传递不同节点上的进程仍然可以使用同样的消息传递机制.远程进程通过 PID或进程名 加上节点名来指定.先前的例子可以改造成两个程序,分别是一个独立进程.</p>\n<h4>pong 进程的代码如下:</h4> \n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">require</span> <span class=\"string\">&#x27;concurrent&#x27;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">pong</span><span class=\"params\">()</span></span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"literal\">true</span> <span class=\"keyword\">do</span></span><br><span class=\"line\">        <span class=\"keyword\">local</span> msg = concurrent.receive()</span><br><span class=\"line\">        <span class=\"keyword\">if</span> msg.body == <span class=\"string\">&#x27;finished&#x27;</span> <span class=\"keyword\">then</span></span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">        <span class=\"keyword\">elseif</span> msg.body == <span class=\"string\">&#x27;ping&#x27;</span> <span class=\"keyword\">then</span></span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;pong received ping&#x27;</span>)</span><br><span class=\"line\">            concurrent.send(msg.from, &#123; body = <span class=\"string\">&#x27;pong&#x27;</span> &#125;)</span><br><span class=\"line\">        <span class=\"keyword\">end</span></span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;pong finished&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\">concurrent.init(<span class=\"string\">&#x27;pong@gaia&#x27;</span>)</span><br><span class=\"line\">pid = concurrent.spawn(pong)</span><br><span class=\"line\">concurrent.register(<span class=\"string\">&#x27;pong&#x27;</span>, pid)</span><br><span class=\"line\">concurrent.loop()</span><br><span class=\"line\">concurrent.shutdown()</span><br></pre></td></tr></table></figure>\n<h4>ping 进程的代码如下:</h4> \n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">require</span> <span class=\"string\">&#x27;concurrent&#x27;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ping</span><span class=\"params\">(n)</span></span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i = <span class=\"number\">1</span>, n <span class=\"keyword\">do</span></span><br><span class=\"line\">        concurrent.send(&#123; <span class=\"string\">&#x27;pong&#x27;</span>, <span class=\"string\">&#x27;pong@gaia&#x27;</span> &#125;, &#123;</span><br><span class=\"line\">            from = &#123; concurrent.<span class=\"built_in\">self</span>(), concurrent.node() &#125;,</span><br><span class=\"line\">            body = <span class=\"string\">&#x27;ping&#x27;</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        <span class=\"keyword\">local</span> msg = concurrent.receive()</span><br><span class=\"line\">        <span class=\"keyword\">if</span> msg.body == <span class=\"string\">&#x27;pong&#x27;</span> <span class=\"keyword\">then</span></span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;ping received pong&#x27;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">end</span></span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\">    concurrent.send(&#123; <span class=\"string\">&#x27;pong&#x27;</span>, <span class=\"string\">&#x27;pong@gaia&#x27;</span> &#125;, &#123;</span><br><span class=\"line\">        from = &#123; concurrent.<span class=\"built_in\">self</span>(), concurrent.node() &#125;,</span><br><span class=\"line\">        body = <span class=\"string\">&#x27;finished&#x27;</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;ping finished&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\">concurrent.spawn(ping, <span class=\"number\">3</span>)</span><br><span class=\"line\">concurrent.init(<span class=\"string\">&#x27;ping@selene&#x27;</span>)</span><br><span class=\"line\">concurrent.loop()</span><br><span class=\"line\">concurrent.shutdown()</span><br></pre></td></tr></table></figure>\n<p>(译注: 如果你想自己跑这个例子需要修改上面的节点名后半部分的机器名部分,使之和你的网络环境相匹配.)pong 进程的输出应该是:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pong received ping</span><br><span class=\"line\">pong received ping</span><br><span class=\"line\">pong received ping</span><br><span class=\"line\">pong finished</span><br></pre></td></tr></table></figure>\n<h4>ping 进程的输出应该是:</h4> \n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ping received pong</span><br><span class=\"line\">ping received pong</span><br><span class=\"line\">ping received pong</span><br><span class=\"line\">ping finished</span><br></pre></td></tr></table></figure>\n<h4>在这个例子里,运行时系统运行在分布式模式.为了看到结果,端口映射器必须先运行:</h4> \n<p>$ clpmd</p>\n<h4>初始化 pong 进程所在节点的代码:</h4> \n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">concurrent.init(<span class=\"string\">&#x27;pong@gaia&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<h4>初始化 ping 进程所在节点的代码:</h4> \n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">concurrent.init(<span class=\"string\">&#x27;ping@selene&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<h4>上面两句代码注册节点到端口映射器.去注册是通过:</h4> \n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">concurrent.shutdown()</span><br></pre></td></tr></table></figure>\n<h4>这个例子的唯一改动是消息发送的目的地.node()函数会返回调用进程坐在节点的名字:</h4> \n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">concurrent.send(&#123; <span class=\"string\">&#x27;pong&#x27;</span>, <span class=\"string\">&#x27;pong@gaia&#x27;</span> &#125;, &#123;</span><br><span class=\"line\">    from = &#123; concurrent.<span class=\"built_in\">self</span>(), concurrent.node() &#125;,</span><br><span class=\"line\">    body = <span class=\"string\">&#x27;ping&#x27;</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h4>接下来:</h4> \n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">concurrent.send(&#123; <span class=\"string\">&#x27;pong&#x27;</span>, <span class=\"string\">&#x27;pong@gaia&#x27;</span> &#125;, &#123;</span><br><span class=\"line\">    from = &#123; concurrent.<span class=\"built_in\">self</span>(), concurrent.node() &#125;,</span><br><span class=\"line\">    body = <span class=\"string\">&#x27;finished&#x27;</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h4>错误处理一个捕获进程间错误的方法是连接进程.两个进程被绑定到一起,一个异常终止的后另一个也会终止.link()函数用来绑定进程:</h4> \n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">require</span> <span class=\"string\">&#x27;concurrent&#x27;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ping</span><span class=\"params\">(n, pid)</span></span></span><br><span class=\"line\">    concurrent.link(pid)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i = <span class=\"number\">1</span>, n <span class=\"keyword\">do</span></span><br><span class=\"line\">        concurrent.send(pid, &#123;</span><br><span class=\"line\">            from = concurrent.<span class=\"built_in\">self</span>(),</span><br><span class=\"line\">            body = <span class=\"string\">&#x27;ping&#x27;</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        <span class=\"keyword\">local</span> msg = concurrent.receive()</span><br><span class=\"line\">        <span class=\"keyword\">if</span> msg.body == <span class=\"string\">&#x27;pong&#x27;</span> <span class=\"keyword\">then</span></span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;ping received pong&#x27;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">end</span></span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;ping finished&#x27;</span>)</span><br><span class=\"line\">    concurrent.<span class=\"built_in\">exit</span>(<span class=\"string\">&#x27;finished&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">pong</span><span class=\"params\">()</span></span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"literal\">true</span> <span class=\"keyword\">do</span></span><br><span class=\"line\">        <span class=\"keyword\">local</span> msg = concurrent.receive()</span><br><span class=\"line\">        <span class=\"keyword\">if</span> msg.body == <span class=\"string\">&#x27;ping&#x27;</span> <span class=\"keyword\">then</span></span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;pong received ping&#x27;</span>)</span><br><span class=\"line\">            concurrent.send(msg.from, &#123; body = <span class=\"string\">&#x27;pong&#x27;</span> &#125;)</span><br><span class=\"line\">        <span class=\"keyword\">end</span></span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;pong finished&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\">pid = concurrent.spawn(pong)</span><br><span class=\"line\">concurrent.spawn(ping, <span class=\"number\">3</span>, pid)</span><br><span class=\"line\">concurrent.loop()</span><br></pre></td></tr></table></figure>\n<h4>输出应该是:</h4> \n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pong received ping</span><br><span class=\"line\">ping received pong</span><br><span class=\"line\">pong received ping</span><br><span class=\"line\">ping received pong</span><br><span class=\"line\">pong received ping</span><br><span class=\"line\">ping received pong</span><br><span class=\"line\">pong finished </span><br></pre></td></tr></table></figure>\n<p>– 译注:这里应该是: ping fininshedpong 进程永远不会运行到最后一行,因为他在接收到 ping 进程退出信号的时候会终止.</p>\n<h4>连接进程的代码如下:</h4> \n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">concurrent.link(pid)</span><br></pre></td></tr></table></figure>\n<h4>也可以捕获进程终止导致的exit信号.被捕获的exit信号会转换成一个特殊的消息:</h4> \n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">require</span> <span class=\"string\">&#x27;concurrent&#x27;</span></span><br><span class=\"line\">concurrent.setoption(<span class=\"string\">&#x27;trapexit&#x27;</span>, <span class=\"literal\">true</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">pong</span><span class=\"params\">()</span></span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"literal\">true</span> <span class=\"keyword\">do</span></span><br><span class=\"line\">        <span class=\"keyword\">local</span> msg = concurrent.receive()</span><br><span class=\"line\">        <span class=\"keyword\">if</span> msg.signal == <span class=\"string\">&#x27;EXIT&#x27;</span> <span class=\"keyword\">then</span></span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">        <span class=\"keyword\">elseif</span> msg.body == <span class=\"string\">&#x27;ping&#x27;</span> <span class=\"keyword\">then</span></span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;pong received ping&#x27;</span>)</span><br><span class=\"line\">            concurrent.send(msg.from, &#123; body = <span class=\"string\">&#x27;pong&#x27;</span> &#125;)</span><br><span class=\"line\">        <span class=\"keyword\">end</span></span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;pong finished&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ping</span><span class=\"params\">(n, pid)</span></span></span><br><span class=\"line\">    concurrent.link(pid)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i = <span class=\"number\">1</span>, n <span class=\"keyword\">do</span></span><br><span class=\"line\">        concurrent.send(pid, &#123;</span><br><span class=\"line\">            from = concurrent.<span class=\"built_in\">self</span>(),</span><br><span class=\"line\">            body = <span class=\"string\">&#x27;ping&#x27;</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        <span class=\"keyword\">local</span> msg = concurrent.receive()</span><br><span class=\"line\">        <span class=\"keyword\">if</span> msg.body == <span class=\"string\">&#x27;pong&#x27;</span> <span class=\"keyword\">then</span></span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;ping received pong&#x27;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">end</span></span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;ping finished&#x27;</span>)</span><br><span class=\"line\">    concurrent.<span class=\"built_in\">exit</span>(<span class=\"string\">&#x27;finished&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">pid = concurrent.spawn(pong)</span><br><span class=\"line\">concurrent.spawn(ping, <span class=\"number\">3</span>, pid)</span><br><span class=\"line\">concurrent.loop()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4>输出应该是:</h4> \n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pong received ping</span><br><span class=\"line\">ping received pong</span><br><span class=\"line\">pong received ping</span><br><span class=\"line\">ping received pong</span><br><span class=\"line\">pong received ping</span><br><span class=\"line\">ping received pong</span><br><span class=\"line\">pong finished</span><br></pre></td></tr></table></figure>\n<h4>ping finished可以通过 setoption() 函数来设置进程链接的选项,这里是 trapexit 选项:</h4> \n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">concurrent.setoption(<span class=\"string\">&#x27;trapexit&#x27;</span>, <span class=\"literal\">true</span>)</span><br></pre></td></tr></table></figure>\n<h4>pong 进程会接收到一个退出消息:</h4> \n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> msg.signal == <span class=\"string\">&#x27;EXIT&#x27;</span> <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"keyword\">break</span></span><br></pre></td></tr></table></figure>\n<p>基于提示消息的monitor, 也可以用来处理错误.</p>\n<p>原文连接：<br>\n<a href=\"http://floss.qiniucdn.com/data/20110831112702/index.html\">http://floss.qiniucdn.com/data/20110831112702/index.html</a></p>\n","text":"介绍 ConcurrentLua 是一个无共享异步消息传递模型的实现.该模型来自Erlang语言. 她改编了Erlang的并发元素并整合进Lua里. ConcurrentLua的一个核心元素是 process(进程).一个进程是一个轻量级虚拟机 线程,扮演和操作系统的进程同样的角...","link":"","photos":[],"count_time":{"symbolsCount":"10k","symbolsTime":"9 mins."},"categories":[{"name":"topic","slug":"topic","count":308,"path":"api/categories/topic.json"}],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">介绍</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">实现</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">用法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\"><span class=\"toc-text\">输出应该是:</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\"><span class=\"toc-text\">首先加载系统:</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\"><span class=\"toc-text\">进程入口函数:</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\"><span class=\"toc-text\">创建一个新进程:</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\"><span class=\"toc-text\">最后调用系统无限循环:</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\"><span class=\"toc-text\">输出应该是:</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\"><span class=\"toc-text\">在 pong 进程被创建后, ping 进程获得了 pong 进程的 PID:</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\"><span class=\"toc-text\">ping 进程发送一个消息:</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\"><span class=\"toc-text\">pong 进程等待消息抵达,然后把接收到的消息保存到一个变量中:</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\"><span class=\"toc-text\">pong 进程回复:</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\"><span class=\"toc-text\">创建一个进程的名字:</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\"><span class=\"toc-text\">相对前一个版本的改变就是 ping 进程发送消息的地方:</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\"><span class=\"toc-text\">和:</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\"><span class=\"toc-text\">以及现在 pong 进程注册了它的名字:</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\"><span class=\"toc-text\">pong 进程的代码如下:</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\"><span class=\"toc-text\">ping 进程的代码如下:</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\"><span class=\"toc-text\">ping 进程的输出应该是:</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\"><span class=\"toc-text\">在这个例子里,运行时系统运行在分布式模式.为了看到结果,端口映射器必须先运行:</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\"><span class=\"toc-text\">初始化 pong 进程所在节点的代码:</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\"><span class=\"toc-text\">初始化 ping 进程所在节点的代码:</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\"><span class=\"toc-text\">上面两句代码注册节点到端口映射器.去注册是通过:</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\"><span class=\"toc-text\">这个例子的唯一改动是消息发送的目的地.node()函数会返回调用进程坐在节点的名字:</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\"><span class=\"toc-text\">接下来:</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\"><span class=\"toc-text\">错误处理一个捕获进程间错误的方法是连接进程.两个进程被绑定到一起,一个异常终止的后另一个也会终止.link()函数用来绑定进程:</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\"><span class=\"toc-text\">输出应该是:</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\"><span class=\"toc-text\">连接进程的代码如下:</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\"><span class=\"toc-text\">也可以捕获进程终止导致的exit信号.被捕获的exit信号会转换成一个特殊的消息:</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\"><span class=\"toc-text\">输出应该是:</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\"><span class=\"toc-text\">ping finished可以通过 setoption() 函数来设置进程链接的选项,这里是 trapexit 选项:</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\"><span class=\"toc-text\">pong 进程会接收到一个退出消息:</span></a></li></ol></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"LUA WEB架框LOR基础简介","uid":"e465db6ba9cb253a17d5f94de4f683b9","slug":"old_topic/2016-09-17-211","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T07:45:09.152Z","comments":true,"path":"api/articles/old_topic/2016-09-17-211.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":[],"text":"作者：糖果 LOR是最近国内的LUA WEB开发框架，目前已经发布到了0.3版，昨天晚上作者分享了他的初始设计图， 在QQ群里发的。 最开始的时候，lor是借鉴vanilla的，之后作者转向设计，开始向expressjs靠拢。 目前来看的，lor非常引人关注的是lor的路由设计。...","link":"","photos":[],"count_time":{"symbolsCount":"2.5k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":308,"path":"api/categories/topic.json"}],"tags":[],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"使用Pages服务创建静态博客(上)","uid":"a8389061bbd1e9023a83242f7e76acdb","slug":"old_topic/2016-09-17-215","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T07:45:09.159Z","comments":true,"path":"api/articles/old_topic/2016-09-17-215.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":[],"text":"作者：糖果 Coding.net同样提供了类似github的pages的功能， 这样就可以使用pages服务创建静态博客。 创建步骤： 配置本地git环境。 本地创建目录结构和静态文件。 初始化本地目录为git工程，创建本地分支，并上传文件。 启动配置coding上的pages，...","link":"","photos":[],"count_time":{"symbolsCount":"1.7k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":308,"path":"api/categories/topic.json"}],"tags":[],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}