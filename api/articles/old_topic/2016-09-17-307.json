{"title":"Socket 编程发展","uid":"bb3459175ba9079fc75c2b75c372ea8d","slug":"old_topic/2016-09-17-307","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T07:45:09.229Z","comments":true,"path":"api/articles/old_topic/2016-09-17-307.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<h1 id=\"socket-编程发展\"><a class=\"markdownIt-Anchor\" href=\"#socket-编程发展\"></a> Socket 编程发展</h1>\n<p>Linux Socket 编程领域，为了处理大量连接请求场景，需要使用非阻塞 I/O 和复用。select、poll 和 epoll 是 Linux API 提供的 I/O 复用方式，自从 Linux 2.6 中加入了 epoll 之后，高性能服务器领域得到广泛的应用，现在比较出名的 Nginx 就是使用 epoll 来实现 I/O 复用支持高并发，目前在高并发的场景下，Nginx 越来越收到欢迎。</p>\n<p>据 w3techs 在2015年8月10日的统计数据表明，在全球 Top 1000 的网站中，有 43.7% 的网站在使用 Nginx，这使得 Nginx 超越了 Apache，成为了高流量网站最信任的 Web 服务器足足有两年时间。已经确定在使用Nginx的站点有：Wikipedia，WordPress，Reddit，Tumblr，Pinterest，Dropbox，Slideshare，Stackexchange 等，可以持续罗列好几个小时，他们太多了。</p>\n<p>下图是统计数据：</p>\n<p><img src=\"../images/nginx.png\" alt=\"\" /></p>\n<h4 id=\"select-模型\"><a class=\"markdownIt-Anchor\" href=\"#select-模型\"></a> select 模型</h4>\n<p>下面是 select 函数接口：</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">select</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> fd_set <span class=\"token operator\">*</span>readfds<span class=\"token punctuation\">,</span> fd_set <span class=\"token operator\">*</span>writefds<span class=\"token punctuation\">,</span>\n        fd_set <span class=\"token operator\">*</span>exceptfds<span class=\"token punctuation\">,</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">timeval</span> <span class=\"token operator\">*</span>timeout<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>select 函数监视的文件描述符分 3 类，分别是 writefds、readfds和 exceptfds。调用后 select 函数会阻塞，直到有描述符就绪（有数据 可读、可写、或者有except），或者超时（timeout 指定等待时间，如果立即返回设为 null 即可）。当 select 函数返回后，通过遍历 fd_set，来找到就绪的描述符。</p>\n<p>select 目前几乎在所有的平台上支持，其良好跨平台支持是它的一大优点。select 的一个缺点在于单个进程能够监视的文件描述符的数量存在最大限制，在 Linux 上一般为1024，可以通过修改宏定义甚至重新编译内核的方式提升这一限制，但是这样也会造成效率的降低。</p>\n<h4 id=\"poll-模型\"><a class=\"markdownIt-Anchor\" href=\"#poll-模型\"></a> poll 模型</h4>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">poll</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">pollfd</span> <span class=\"token operator\">*</span>fds<span class=\"token punctuation\">,</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> nfds<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> timeout<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>不同与select使用三个位图来表示三个fdset的方式，poll 使用一个 pollfd 的指针实现。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">pollfd</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> fd<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* file descriptor */</span>\n    <span class=\"token keyword\">short</span> events<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* requested events to watch */</span>\n    <span class=\"token keyword\">short</span> revents<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* returned events witnessed */</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>pollfd 结构包含了要监视的 event 和发生的 event，不再使用 select “参数-值”传递的方式。同时，pollfd 并没有最大数量限制（但是数量过大后性能也是会下降）。 和 select 函数一样，poll 返回后，需要轮询 pollfd 来获取就绪的描述符。</p>\n<p>从上面看，select 和 poll 都需要在返回后，通过遍历文件描述符来获取已经就绪的 socket。事实上，同时连接的大量客户端在一时刻可能只有很少的处于就绪状态，因此随着监视的描述符数量的增长，其效率也会线性下降。</p>\n<h4 id=\"epoll-模型\"><a class=\"markdownIt-Anchor\" href=\"#epoll-模型\"></a> epoll 模型</h4>\n<p>epoll 的接口如下：</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">epoll_create</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> size<span class=\"token punctuation\">)</span>；\n<span class=\"token keyword\">int</span> <span class=\"token function\">epoll_ctl</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> epfd<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> op<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> fd<span class=\"token punctuation\">,</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">epoll_event</span> <span class=\"token operator\">*</span>event<span class=\"token punctuation\">)</span>；\n            <span class=\"token keyword\">typedef</span> <span class=\"token keyword\">union</span> epoll_data <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>ptr<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">int</span> fd<span class=\"token punctuation\">;</span>\n                __uint32_t u32<span class=\"token punctuation\">;</span>\n                __uint64_t u64<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token class-name\">epoll_data_t</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">struct</span> <span class=\"token class-name\">epoll_event</span> <span class=\"token punctuation\">&#123;</span>\n                __uint32_t events<span class=\"token punctuation\">;</span>      <span class=\"token comment\">/* Epoll events */</span>\n                <span class=\"token class-name\">epoll_data_t</span> data<span class=\"token punctuation\">;</span>      <span class=\"token comment\">/* User data variable */</span>\n            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">epoll_wait</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> epfd<span class=\"token punctuation\">,</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">epoll_event</span> <span class=\"token operator\">*</span> events<span class=\"token punctuation\">,</span>\n                <span class=\"token keyword\">int</span> maxevents<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> timeout<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>主要是 epoll_create，epoll_ctl 和 epoll_wait 三个函数。epoll_create 函数创建 epoll 文件描述符，参数 size 并不是限制了 epoll 所能监听的描述符最大个数，只是对内核初始分配内部数据结构的一个建议。epoll_ctl 完成对指定描述符 fd 执行 op 操作控制，event 是与 fd 关联的监听事件。op 操作有三种：添加 EPOLL_CTL_ADD，删除 EPOLL_CTL_DEL，修改 EPOLL_CTL_MOD。分别添加、删除和修改对 fd 的监听事件。epoll_wait 等待 epfd 上的 IO 事件，最多返回 maxevents 个事件。</p>\n<p>在 select/poll 中，进程只有在调用一定的方法后，内核才对所有监视的文件描述符进行扫描，而 epoll 事先通过 epoll_ctl() 来注册一个文件描述符，一旦基于某个文件描述符就绪时，内核会采用类似 callback 的回调机制，迅速激活这个文件描述符，当进程调用 epoll_wait 时便得到通知。</p>\n<p>epoll 的优点主要是一下几个方面：</p>\n<ol>\n<li class=\"lvl-3\">\n<p>监视的描述符数量不受限制，它所支持的 fd 上限是最大可以打开文件的数目，这个数字一般远大于 2048,举个例子,在 1GB 内存的机器上大约是 10 万左右，具体数目可以 cat /proc/sys/fs/file-max 察看,一般来说这个数目和系统内存关系很大。select 的最大缺点就是进程打开的 fd 是有数量限制的。这对于连接数量比较大的服务器来说根本不能满足。虽然也可以选择多进程的解决方案( Apache 就是这样实现的)，不过虽然 linux 上面创建进程的代价比较小，但仍旧是不可忽视的，加上进程间数据同步远比不上线程间同步的高效，所以也不是一种完美的方案。</p>\n</li>\n<li class=\"lvl-3\">\n<p>IO 的效率不会随着监视 fd 的数量的增长而下降。epoll 不同于 select 和 poll 轮询的方式，而是通过每个 fd 定义的回调函数来实现的。只有就绪的 fd 才会执行回调函数。</p>\n</li>\n<li class=\"lvl-3\">\n<p>支持水平触发和边沿触发两种模式：</p>\n<ul class=\"lvl-2\">\n<li class=\"lvl-6\">水平触发模式，文件描述符状态发生变化后，如果没有采取行动，它将后面反复通知，这种情况下编程相对简单，libevent 等开源库很多都是使用的这种模式。</li>\n<li class=\"lvl-6\">边沿触发模式，只告诉进程哪些文件描述符刚刚变为就绪状态，只说一遍，如果没有采取行动，那么它将不会再次告知。理论上边缘触发的性能要更高一些，但是代码实现相当复杂（Nginx 使用的边缘触发）。</li>\n</ul>\n</li>\n<li class=\"lvl-3\">\n<p>mmap 加速内核与用户空间的信息传递。epoll 是通过内核与用户空间 mmap 同一块内存，避免了无谓的内存拷贝。</p>\n</li>\n</ol>\n","text":" Socket 编程发展 Linux Socket 编程领域，为了处理大量连接请求场景，需要使用非阻塞 I/O 和复用。select、poll 和 epoll 是 Linux API 提供的 I/O 复用方式，自从 Linux 2.6 中加入了 epoll 之后，高性能服务器领域...","link":"","photos":[],"count_time":{"symbolsCount":"3.2k","symbolsTime":"3 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#socket-%E7%BC%96%E7%A8%8B%E5%8F%91%E5%B1%95\"><span class=\"toc-text\"> Socket 编程发展</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#select-%E6%A8%A1%E5%9E%8B\"><span class=\"toc-text\"> select 模型</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#poll-%E6%A8%A1%E5%9E%8B\"><span class=\"toc-text\"> poll 模型</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#epoll-%E6%A8%A1%E5%9E%8B\"><span class=\"toc-text\"> epoll 模型</span></a></li></ol></li></ol></li></ol></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"build_plugin.md","uid":"6c3ff5d54ee84215c9897a80659f0b5f","slug":"old_topic/2016-09-17-305","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T07:45:09.168Z","comments":true,"path":"api/articles/old_topic/2016-09-17-305.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":" category: Advanced redirect_from: - /docs/latest/advanced/build_plugin/ title: “创建自定义插件” sort_title: “3” to be continued… ","link":"","photos":[],"count_time":{"symbolsCount":124,"symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"dashboard_usage.md","uid":"a24b531fc5b1bbf2067f7e954574a317","slug":"old_topic/2016-09-17-306","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T07:45:09.206Z","comments":true,"path":"api/articles/old_topic/2016-09-17-306.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":" category: Advanced redirect_from: - /docs/latest/advanced/dashboard_usage/ title: “如何使用Dashboard” sort_title: “1” 启动Orange后，浏览器输入http://loc...","link":"","photos":[],"count_time":{"symbolsCount":801,"symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}