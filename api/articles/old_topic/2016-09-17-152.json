{"title":"LUA与STOMP协议","uid":"9aeff2cf84352e0facabfc6256b648d7","slug":"old_topic/2016-09-17-152","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T07:45:09.171Z","comments":true,"path":"api/articles/old_topic/2016-09-17-152.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<p>作者：糖果</p>\n<p>STOMP协议是一种简单的消息文本协议。协义本身简单明了，用消息头定义和消息体数据传输。</p>\n<p>RabbitMQ做为一种队列中间件，提供了STOMP协议的支持，我们可以通过STOMP协议向队列发送消息。下面的例子中，我们将使用LUA程序向RabbitMQ发送消息， 通过Python程序读取消息。</p>\n<p>send.lua文件</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\"><span class=\"token keyword\">local</span> client <span class=\"token operator\">=</span> require <span class=\"token string\">\"stomp\"</span>\n<span class=\"token keyword\">local</span> mq<span class=\"token punctuation\">,</span> err <span class=\"token operator\">=</span> client<span class=\"token punctuation\">:</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">local</span> ok<span class=\"token punctuation\">,</span> err <span class=\"token operator\">=</span> mq<span class=\"token punctuation\">:</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"127.0.0.1\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">61613</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">local</span> msg <span class=\"token operator\">=</span> <span class=\"token string\">\"say hi!\"</span>\n<span class=\"token keyword\">local</span> headers <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\nheaders<span class=\"token punctuation\">[</span><span class=\"token string\">\"destination\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"/queue/test\"</span>\nheaders<span class=\"token punctuation\">[</span><span class=\"token string\">\"app-id\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"APP\"</span>\n<span class=\"token keyword\">local</span> ok<span class=\"token punctuation\">,</span> err <span class=\"token operator\">=</span> mq<span class=\"token punctuation\">:</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>info_json<span class=\"token punctuation\">,</span> headers<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>对上面的代码说明一下：</p>\n<p>连接时候RabbitMQ的IP是本机的127.0.0.1， STOMP协议的服务的端口是默认的61613。</p>\n<p>在headers的头定义部分，指明了我们发送信息的目的地“/queue/test“名字为Test的队列。</p>\n<p>其实可以深入到STOMP的LUA的实现内部，仔细研究一下是如何实现，如何直接通过sock，发送数据帧到服务器，可以作为独立的章节。</p>\n<p>与LUA不同，Python对STOMP协议支持的比较好，不需要甄别第三库，然后再选择使用。用pythonstomp就好。</p>\n<p>receive.py文件</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> stomp\n<span class=\"token keyword\">import</span> time\n<span class=\"token keyword\">import</span> sys\n<span class=\"token keyword\">import</span> random\n<span class=\"token keyword\">import</span> json\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MyListener</span><span class=\"token punctuation\">(</span>stomp<span class=\"token punctuation\">.</span>ConnectionListener<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">on_error</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> headers<span class=\"token punctuation\">,</span> message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'received an error %s'</span> <span class=\"token operator\">%</span> message<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">on_message</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> headers<span class=\"token punctuation\">,</span> message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">for</span> k<span class=\"token punctuation\">,</span>v <span class=\"token keyword\">in</span> headers<span class=\"token punctuation\">.</span>iteritems<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'header: key %s , value %s'</span> <span class=\"token operator\">%</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">,</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'received message\\n %s'</span><span class=\"token operator\">%</span> message<span class=\"token punctuation\">)</span>\nconn<span class=\"token operator\">=</span>stomp<span class=\"token punctuation\">.</span>Connection<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token string\">'127.0.0.1'</span><span class=\"token punctuation\">,</span><span class=\"token number\">61613</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\nconn<span class=\"token punctuation\">.</span>set_listener<span class=\"token punctuation\">(</span><span class=\"token string\">'somename'</span><span class=\"token punctuation\">,</span>MyListener<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nconn<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nconn<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span>wait<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\nmessage<span class=\"token operator\">=</span><span class=\"token string\">'say hi!'</span>\ndest <span class=\"token operator\">=</span> <span class=\"token string\">'/queue/test'</span>\nheaders<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">'seltype'</span><span class=\"token punctuation\">:</span><span class=\"token string\">'mandi-age-to-man'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'type'</span><span class=\"token punctuation\">:</span><span class=\"token string\">'textMessage'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'MessageNumber'</span><span class=\"token punctuation\">:</span>random<span class=\"token punctuation\">.</span>randint<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">65535</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span>\n\nmetadata <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n<span class=\"token punctuation\">]</span>\n\n info_json <span class=\"token operator\">=</span> json<span class=\"token punctuation\">.</span>dumps<span class=\"token punctuation\">(</span>metadata<span class=\"token punctuation\">)</span>\nconn<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>body<span class=\"token operator\">=</span>info_json<span class=\"token punctuation\">,</span> destination<span class=\"token operator\">=</span><span class=\"token string\">'/queue/test'</span><span class=\"token punctuation\">)</span>\nconn<span class=\"token punctuation\">.</span>disconnect<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>接受程序和发送程序的主要流程区别是：要在接受端注册监听回调程序。</p>\n<p>上面的</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">conn<span class=\"token punctuation\">.</span>set_listener<span class=\"token punctuation\">(</span><span class=\"token string\">'somename'</span><span class=\"token punctuation\">,</span>MyListener<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nconn<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>这两行代码就是注册监听类，在队列上有消息的时候，就会调用监听回调。</p>\n<p>on_message。发生错误的时候调用。on_error函数。</p>\n<p>具体的实现不完全列出来，针对一般的STOMP连接过程，列出”连接“和</p>\n<p>发送的”消息包”的数据结构，结构采用的是LUA语法，table类型定义的。</p>\n<p>共计二帧的数据：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">connect_frame &#x3D; &#123;\n  &quot;CONNECT\\n&quot;,\n  &quot;accept-version:1.2\\n&quot;,\n  &quot;login:guest\\n&quot;,\n  &quot;passcode:guest\\n&quot;,\n  &quot;host:&#x2F;\\n&quot;,\n  &quot;\\n\\n&quot;,\n  &quot;\\0&quot;\n&#125;\n\nsend_frame &#x3D; &#123;\n  &quot;SEND\\n&quot;,\n  &quot;destination:&#x2F;queue&#x2F;test\\n&quot;,\n  &quot;app-id:APP\\n&quot;,\n  &quot;\\n&quot;,\n  &quot;say hi!\\n&quot;,\n  &quot;\\0&quot;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>包体的第一个字段“CONNECT,SEND”都是协议的命令，剩下的是说明字段。</p>\n<p>文字不能把所有的问题和协议都描述清楚，可参考以下网站：</p>\n<p><a href=\"http://stomp.github.io/stomp-specification-1.1.html\">http://stomp.github.io/stomp-specification-1.1.html</a></p>\n<p>PS:转载到其它平台请注明作者姓名及原文链接，请勿用于商业用途。</p>\n<p><a href=\"http://www.lua.ren/topic/133/lua-faq\" target=\"_blank\">点击查看Lua FAQ</a></p>\n","text":"作者：糖果 STOMP协议是一种简单的消息文本协议。协义本身简单明了，用消息头定义和消息体数据传输。 RabbitMQ做为一种队列中间件，提供了STOMP协议的支持，我们可以通过STOMP协议向队列发送消息。下面的例子中，我们将使用LUA程序向RabbitMQ发送消息， 通过Py...","link":"","photos":[],"count_time":{"symbolsCount":"2.3k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[],"toc":"","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"LUA的WEB开发框架Vanilla","uid":"087f4f77da99a0fec1375818d3495ed6","slug":"old_topic/2016-09-17-153","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T07:45:09.163Z","comments":true,"path":"api/articles/old_topic/2016-09-17-153.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"作者：糖果 图片：vanilla_logo.jpg 这次我们介绍的框架和以往有些不同，最大的不同是，这是介绍的是一个国产Openresty Lua WEB框架，名字叫做Vanilia 我们先简单的安装，和创建一个建工的工程，然后分析一下项目的源码。 我们假定用户用系统是cento...","link":"","photos":[],"count_time":{"symbolsCount":552,"symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Lua Curl的一般应用","uid":"85399f84f55b8c1291e5685cda57f473","slug":"old_topic/2016-09-17-154","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T07:45:09.227Z","comments":true,"path":"api/articles/old_topic/2016-09-17-154.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"作者：糖果 Curl是一个WEB开发常用的工具，直接用官网的翻译 curl是一个开源的命令行工具，也是一个库，用于传输URL语法的工具，支持DICT, FILE, FTP, FTPS, Gopher, HTTP, HTTPS, IMAP, IMAPS, LDAP, LDAPS, ...","link":"","photos":[],"count_time":{"symbolsCount":"3.3k","symbolsTime":"3 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}