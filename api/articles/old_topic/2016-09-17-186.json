{"title":"老衲，这代码不能要！","uid":"e5306b1f99d6e83b5a21496ff6f51752","slug":"old_topic/2016-09-17-186","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T06:15:59.738Z","comments":true,"path":"api/articles/old_topic/2016-09-17-186.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":null,"content":"<p>Christ people. This is just sh*t.</p>\n<p>The conflict I get is due to stupid new gcc header file crap. But what<br>makes me upset is that the crap is for completely bogus reasons.</p>\n<p>This is the old code in net/ipv6/ip6_output.c:</p>\n<p>mtu -= hlen + sizeof(struct frag_hdr);</p>\n<p>and this is the new “improved” code that uses fancy stuff that wants<br>magical built-in compiler support and has silly wrapper functions for<br>when it doesn’t exist:<br>[code]<br>if (overflow_usub(mtu, hlen + sizeof(struct frag_hdr), &amp;mtu) ||<br>mtu &lt;= 7)<br>goto fail_toobig;<br>[/code]<br>and anybody who thinks that the above is</p>\n<p>(a) legible<br>(b) efficient (even with the magical compiler support)<br>(c) particularly safe</p>\n<p>is just incompetent and out to lunch.</p>\n<p>The above code is sh*t, and it generates shit code. It looks bad, and<br>there’s no reason for it.</p>\n<p>The code could <em>easily</em> have been done with just a single and<br>understandable conditional, and the compiler would actually have<br>generated better code, and the code would look better and more<br>understandable. Why is this not</p>\n<p>[code]<br>if (mtu &lt; hlen + sizeof(struct frag_hdr) + 8)<br>goto fail_toobig;<br>mtu -= hlen + sizeof(struct frag_hdr);<br>[/code]<br>which is the same number of lines, doesn’t use crazy helper functions<br>that nobody knows what they do, and is much more obvious what it<br>actually does.</p>\n<p>I guarantee that the second more obvious version is easier to read and<br>understand. Does anybody really want to dispute this?</p>\n<p>Really. Give me <em>one</em> reason why it was written in that idiotic way<br>with two different conditionals, and a shiny new nonstandard function<br>that wants particular compiler support to generate even half-way sane<br>code, and even then generates worse code? A shiny function that we<br>have never ever needed anywhere else, and that is just<br>compiler-masturbation.</p>\n<p>And yes, you still could have overflow issues if the whole “hlen +<br>xyz” expression overflows, but quite frankly, the “overflow_usub()”<br>code had that too. So if you worry about that, then you damn well<br>didn’t do the right thing to begin with.</p>\n<p>So I really see no reason for this kind of complete idiotic crap.</p>\n<p>Tell me why. Because I’m not pulling this kind of completely insane<br>stuff that generates conflicts at rc7 time, and that seems to have<br>absolutely no reason for being anm idiotic unreadable mess.</p>\n<p>The code seems <em>designed</em> to use that new “overflow_usub()” code. It<br>seems to be an excuse to use that function.</p>\n<p>And it’s a f*cking bad excuse for that braindamage.</p>\n<p>I’m sorry, but we don’t add idiotic new interfaces like this for<br>idiotic new code like that.</p>\n<p>Yes, yes, if this had stayed inside the network layer I would never<br>have noticed. But since I <em>did</em> notice, I really don’t want to pull<br>this. In fact, I want to make it clear to <em>everybody</em> that code like<br>this is completely unacceptable. Anybody who thinks that code like<br>this is “safe” and “secure” because it uses fancy overflow detection<br>functions is so far out to lunch that it’s not even funny. All this<br>kind of crap does is to make the code a unreadable mess with code that<br>no sane person will ever really understand what it actually does.</p>\n<p>Get rid of it. And I don’t <em>ever</em> want to see that shit again.</p>\n<p>Linus</p>\n<p><a href=\"http://lkml.iu.edu/hypermail/linux/kernel/1510.3/02866.html\">http://lkml.iu.edu/hypermail/linux/kernel/1510.3/02866.html</a></p>\n","text":"Christ people. This is just sh*t. The conflict I get is due to stupid new gcc header file crap. But whatmakes me upset is that the crap is f...","link":"","photos":[],"count_time":{"symbolsCount":"3.1k","symbolsTime":"3 mins."},"categories":[{"name":"topic","slug":"topic","count":308,"path":"api/categories/topic.json"}],"tags":[],"toc":"","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Moonscript的循环结构","uid":"b8a0477ffed33bd6d0efdb938e9ec4db","slug":"old_topic/2016-09-17-187","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T06:15:59.738Z","comments":true,"path":"api/articles/old_topic/2016-09-17-187.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":null,"text":"除了使用迭代器，某些应用场合，我们还需要使用固定次数的循环结构，Moonscript提供While风格的固定循环控制。 Moonscript 1234567class extends lapis.Application [loop: &quot;/loop&quot;]:=&gt...","link":"","photos":[],"count_time":{"symbolsCount":654,"symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":308,"path":"api/categories/topic.json"}],"tags":[],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Moonscript的Busted单体测试","uid":"43450fb948daac9a77b252ddeba99506","slug":"old_topic/2016-09-17-189","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T06:15:59.739Z","comments":true,"path":"api/articles/old_topic/2016-09-17-189.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":null,"text":"作者：糖果 Busted是Lua的单体测试工具。去官网Github看一下，也支持Moonscript的单体测试。 moonunit.moon 123456describe &#x27;moonscript tests&#x27;, -&gt; it &#x27;works&#x2...","link":"","photos":[],"count_time":{"symbolsCount":"1.1k","symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":308,"path":"api/categories/topic.json"}],"tags":[],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}