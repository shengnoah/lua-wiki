{"title":"Django超级简单的MVC实例","uid":"b886d3e0a930ce8de7df46cdd311c487","slug":"old_topic/2016-09-17-37","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T06:15:59.753Z","comments":true,"path":"api/articles/old_topic/2016-09-17-37.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":null,"content":"<p>【前言】<br>写一遍django的入门例子，基于MVC设计模式，本程序有输入，处理，输出。开始用django搬运互联网上的数据。简单介绍一下什么是MVC模式。MVC就是把程序成分3部分职责。</p>\n<p>【MVC】<br>V(View)：系统的界面，django中就是网页。UI部分，用于接受用户的数据，输出用户的数据。<br>M(Model)： 处理用户输入的数据，对数据进行加工。django中就是py文件中的方法。<br>C（Control）:处理用户的功能请求，分配给不同的模块进行处理。django中就url的分发。</p>\n<p>【功能概要】<br>    提供一个表单，接受用户输入的数据（输入V），将用户的数据写出到数据库中（处理M），并将写入的结果显示在网页上(输出V)。这就是数据搬运的一个简单流程，在此最基本的模式上，会衍生出数据库的CRUD(增加，查询，更新，删除)操作。</p>\n<pre><code>以上这些动作，基本都是熟能生巧的技术工作，某种角度来说，就是模式化重复的体力活，不同的是，django可以快速的完成这些任务，短小精干，并且快速。\n</code></pre>\n<p>【HTTP】<br>[code]<br>[08/Mar/2014 14:53:01] “GET /search/?name=%E9%83%9D%E5%BB%BA&amp;email=<a href=\"mailto:&#x73;&#x68;&#101;&#110;&#x67;&#x40;&#118;&#x65;&#x72;&#x75;&#x70;&#x2e;&#99;&#110;\">&#x73;&#x68;&#101;&#110;&#x67;&#x40;&#118;&#x65;&#x72;&#x75;&#x70;&#x2e;&#99;&#110;</a> HTTP/1.1” 200 17<br>[/code]</p>\n<p>这个是有两个输入项目表单提交的一条HTTP的get请求。<br>【CGI】<br>上面的那条Http的get请用，可以用各种类型的CGI程序去处理，比如说java,C,C++,PHP,ruby,python.可但是，功能最全打字越少，快速的处理HTTP请求，Get和Post的语言最好，先举出一个C语言写的CGI程序。</p>\n<p>[code]</p>\n<form action=\"/cgi-bin/dachengzi.cgi\" method=\"get\">\n<input name=\"name\" size=\"100\">\n<input name=\"email\" size=\"100\"></br>\n<input type=\"submit\" value=\"ok\">\n</form>\n[/code]\n\n<p>[code]<br>#include &lt;stdio.h&gt;<br>#include &lt;stdlib.h&gt;<br>#include &lt;string.h&gt;</p>\n<p>int main(int argc, char** argv)<br>{<br>  char *data;<br>  printf(“Content-type:text/html;charset=gb2312\\n\\n”);<br>  data = getenv(“QUERY_STRING”);<br>  return 0;<br>}<br>[/code]</p>\n<p>“Content-type:text/html;charset=gb2312\\n\\n”<br>这个必须有，声明MIME类型。没有的话，结果网页无法正常显示，因为浏览器不知道程序输出的是什么。</p>\n<p>上面的变量data就是用户发送过来的字典数据，从“&amp;”符号分开的key pair数据，没一对数据的key和value在用“等号分割”</p>\n<p>GET /search/?name=sheng&amp;email=<a href=\"mailto:&#116;&#101;&#101;&#x31;&#54;&#56;&#64;&#113;&#x71;&#46;&#x63;&#111;&#109;\">&#116;&#101;&#101;&#x31;&#54;&#56;&#64;&#113;&#x71;&#46;&#x63;&#111;&#109;</a><br>name=sheng<br>&amp;<br>email=<a href=\"mailto:&#116;&#101;&#x65;&#49;&#x36;&#56;&#64;&#113;&#x71;&#x2e;&#x63;&#111;&#109;\">&#116;&#101;&#x65;&#49;&#x36;&#56;&#64;&#113;&#x71;&#x2e;&#x63;&#111;&#109;</a></p>\n<p>用户需要先对”&amp;”符号进行split,判断有多少组数据，然后在对每一组的数据进行“=”split，得到最后的数据，如下<br>char* name=”sheng”;<br>char* email=”<a href=\"mailto:&#116;&#101;&#101;&#49;&#54;&#x38;&#x40;&#x71;&#x71;&#x2e;&#x63;&#x6f;&#x6d;\">&#116;&#101;&#101;&#49;&#54;&#x38;&#x40;&#x71;&#x71;&#x2e;&#x63;&#x6f;&#x6d;</a>“;</p>\n<p>得到了key和value</p>\n<p>【视图实现(View)】<br>本功能数据的源头就是用户从表单输入的输入，所以视图V一部分是HTML表单。另外一部分是对用户在网页上发出的http请求的响应处理，python的CGI程序。<br>[code]</p>\n<html>\n<head>\n        <title>www.verup.cn</title>\n</head>\n<body>\n        <form action=\"/search/\" method=\"get\">\n                <input type=\"text\" name=\"name\">\n                <input type=\"text\" name=\"email\">\n                <input type=\"submit\" value=\"enter\">\n        </form>\n</body>\n</html>\n[/code]\n\n<p>在接受到用户输入的数据后，会对用户的数据进行处理，<br>[code]<br>from hotwords.models import Author</p>\n<p>def GetAuthorInfo(request):<br>        return render_to_response(‘Author.html’)</p>\n<p>def search(request):<br>        if ‘key’ in request.GET:<br>                message = request.GET[‘name’] + request.GET[‘email’]</p>\n<pre><code>    name = request.GET[&#39;name&#39;]\n    email = request.GET[&#39;email&#39;]\n    #在创建Author的models后，就会有对应的Autor对象产生（参考【模型(M)】）\n    #引用Author的models,创建构造对象，调用一下save()方法，就完成了一条记录的插入，创造一个author对象，相当于表格的一条记录，用表单传入的数据，去构造对象，完成一条表记录的插入。\n    author = Author(1, name, email)\n    author.save()\n    return HttpResponse(message)\n</code></pre>\n<p>[/code]</p>\n<p>对表输入的插入，删除，修改是常用的DB操作，map和list,这也都是主要的数据搬用动作，也是很没意思的部分。但是，你还得写。</p>\n<p>【CRUD】</p>\n<p>【模型(M)】<br>使用django的ORM，通过定义数据对象类来创建数据库的table,几乎就不用再直接SQL打交道了。下面就。。。看！</p>\n<p>[code]<br>from django.db import models<br>from django.contrib import admin</p>\n<p>class Author(models.Model):<br>        name = models.CharField(max_length=50)<br>        email = models.EmailField()</p>\n<pre><code>    def __unicode__(self):\n            return self.name\n</code></pre>\n<p>[/code]</p>\n<p>看到了没一共就两个字段，运行如下命令：</p>\n<p>[code]<br>python manage.py syncdb<br>[/code]</p>\n<p>django就会在数据库中创建名author表格。</p>\n<p>[code]<br>+——-+————-+——+—–+———+—————-+<br>| Field | Type        | Null | Key | Default | Extra          |<br>+——-+————-+——+—–+———+—————-+<br>| id    | int(11)     | NO   | PRI | NULL    | auto_increment |<br>| name  | varchar(50) | NO   |     | NULL    |                |<br>| email | varchar(75) | NO   |     | NULL    |                |<br>+——-+————-+——+—–+———+—————-+<br>[/code]</p>\n<p>作者：糖果</p>\n","text":"【前言】写一遍django的入门例子，基于MVC设计模式，本程序有输入，处理，输出。开始用django搬运互联网上的数据。简单介绍一下什么是MVC模式。MVC就是把程序成分3部分职责。 【MVC】V(View)：系统的界面，django中就是网页。UI部分，用于接受用户的数据，输...","link":"","photos":[],"count_time":{"symbolsCount":"3.2k","symbolsTime":"3 mins."},"categories":[{"name":"topic","slug":"topic","count":308,"path":"api/categories/topic.json"}],"tags":[{"name":"lua","slug":"lua","count":153,"path":"api/tags/lua.json"}],"toc":"","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"MoonScript for GrayLog","uid":"bace4a0f855ab931a94c6323590dcc00","slug":"old_topic/2016-09-17-368","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T06:15:59.753Z","comments":true,"path":"api/articles/old_topic/2016-09-17-368.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":null,"text":"GrayLog REST API Wrapper for Moonscript 此程序是Graylog REST对外提供的API的一个Moonscript的Wrapper封装，把REST接口提供的数据服务，变成通过函数调用的方式取得相应REST接口返回的数据。 下面是一个实际的基...","link":"","photos":[],"count_time":{"symbolsCount":"1.7k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":308,"path":"api/categories/topic.json"}],"tags":[],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"MoonScript Command Line.","uid":"b4e10a2e9208e3bffc49bf639e841080","slug":"old_topic/2016-09-17-370","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T06:15:59.753Z","comments":true,"path":"api/articles/old_topic/2016-09-17-370.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":null,"text":"{ target: “reference/command_line” template: “reference” title: “Command Line Tools” short_name: “command_line”} Command Line ToolsTwo tools...","link":"","photos":[],"count_time":{"symbolsCount":"8k","symbolsTime":"7 mins."},"categories":[{"name":"topic","slug":"topic","count":308,"path":"api/categories/topic.json"}],"tags":[],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}