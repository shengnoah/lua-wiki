{"title":"OPENRESTY 中的简易HTTP加密","uid":"ceeda26fcc5b2c890a2ed530be0ef341","slug":"old_topic/2016-09-17-136","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T07:45:09.165Z","comments":true,"path":"api/articles/old_topic/2016-09-17-136.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<p>需求<br />\n速度快；<br />\n可逆；<br />\n容易实现，不存在语言障碍；<br />\n思考<br />\n将一个任意内容的字符串作为密钥，从明文中取等长字符串，逐字节将明文和密钥进行异或计算，得到密文。循环处理整个明文，得到完整密文。对密文进行同样的运算即可解密。</p>\n<p>算法</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\"><span class=\"token keyword\">local</span> bit <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bit\"</span><span class=\"token punctuation\">)</span>\n \n<span class=\"token comment\">--- 使用密钥对字符串进行加密(解密)</span>\n<span class=\"token comment\">--</span>\n<span class=\"token comment\">-- @param string str 原始字符串(加密后的密文)</span>\n<span class=\"token comment\">-- @param string key 密钥</span>\n<span class=\"token comment\">-- @return string 加密后的密文(原始字符串)</span>\n<span class=\"token keyword\">local</span> <span class=\"token keyword\">function</span> <span class=\"token function\">encrypt</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">local</span> strBytes <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> str<span class=\"token punctuation\">:</span><span class=\"token function\">byte</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">#</span>str<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">local</span> keyBytes <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> key<span class=\"token punctuation\">:</span><span class=\"token function\">byte</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">#</span>key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">local</span> n<span class=\"token punctuation\">,</span> keyLen <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">#</span>keyBytes\n \n    <span class=\"token keyword\">for</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">#</span>strBytes <span class=\"token keyword\">do</span>\n        strBytes<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> bit<span class=\"token punctuation\">.</span><span class=\"token function\">bxor</span><span class=\"token punctuation\">(</span>strBytes<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> keyBytes<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n \n        n <span class=\"token operator\">=</span> n <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n \n        <span class=\"token keyword\">if</span> n <span class=\"token operator\">></span> keyLen <span class=\"token keyword\">then</span>\n            n <span class=\"token operator\">=</span> n <span class=\"token operator\">-</span> keyLen\n        <span class=\"token keyword\">end</span>\n    <span class=\"token keyword\">end</span>\n \n    <span class=\"token keyword\">return</span> string<span class=\"token punctuation\">.</span><span class=\"token function\">char</span><span class=\"token punctuation\">(</span><span class=\"token function\">unpack</span><span class=\"token punctuation\">(</span>strBytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>测试</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\"><span class=\"token comment\">-- 加密密钥</span>\n<span class=\"token keyword\">local</span> ENCRYPT_KEY <span class=\"token operator\">=</span> <span class=\"token string\">\"EFH@^&amp;%#^&amp;*@#G@&amp;()*!&amp;*@)(#$!@$GJHGHJ$G#HJ!$G\"</span>\n \n<span class=\"token comment\">-- 原始字符串</span>\n<span class=\"token keyword\">local</span> originalStr <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello, world! Hello, world! Hello, world! Hello, world! Hello, world! Hello, world!\"</span>\n \n<span class=\"token comment\">-- 加密字符串</span>\n<span class=\"token keyword\">local</span> encryptStr <span class=\"token operator\">=</span> <span class=\"token function\">encrypt</span><span class=\"token punctuation\">(</span>originalStr<span class=\"token punctuation\">,</span> ENCRYPT_KEY<span class=\"token punctuation\">)</span>\n \n<span class=\"token comment\">-- 打印密文</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"encryptStr:\"</span> <span class=\"token operator\">..</span> encryptStr<span class=\"token punctuation\">)</span>\n \n<span class=\"token comment\">-- 打印原文</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"originalStr:\"</span> <span class=\"token operator\">..</span> <span class=\"token function\">encrypt</span><span class=\"token punctuation\">(</span>encryptStr<span class=\"token punctuation\">,</span> ENCRYPT_KEY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>处理加密 POST 数据<br />\n客户端将通讯数据组成 URI 模式字符串，并用本地语言实现加密算法，将加密后的密文通过 POST 方式提交，服务端使用加密算法将 POST 数据还原成明文并解析成参数表。</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\"><span class=\"token comment\">-- 准备body数据</span>\nngx<span class=\"token punctuation\">.</span>req<span class=\"token punctuation\">.</span><span class=\"token function\">read_body</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n \n<span class=\"token comment\">-- 解密body数据，并解析成table格式</span>\n<span class=\"token keyword\">local</span> postData <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">local</span> encryptData <span class=\"token operator\">=</span> ngx<span class=\"token punctuation\">.</span>req<span class=\"token punctuation\">.</span><span class=\"token function\">get_body_data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n \n<span class=\"token keyword\">if</span> encryptData <span class=\"token keyword\">then</span>\n    postData <span class=\"token operator\">=</span> ngx<span class=\"token punctuation\">.</span><span class=\"token function\">decode_args</span><span class=\"token punctuation\">(</span><span class=\"token function\">encrypt</span><span class=\"token punctuation\">(</span>encryptData<span class=\"token punctuation\">,</span> ENCRYPT_KEY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>感谢原作者分享：<br />\n<a href=\"http://zivn.me/?p=183\">http://zivn.me/?p=183</a></p>\n","text":"需求 速度快； 可逆； 容易实现，不存在语言障碍； 思考 将一个任意内容的字符串作为密钥，从明文中取等长字符串，逐字节将明文和密钥进行异或计算，得到密文。循环处理整个明文，得到完整密文。对密文进行同样的运算即可解密。 算法 local bit = require(\"bit\") -...","link":"","photos":[],"count_time":{"symbolsCount":"1.4k","symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua","slug":"lua","count":124,"path":"api/tags/lua.json"}],"toc":"","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"NGINX配置初始化过程","uid":"e77113c5554b3f904d7fab1c518f6770","slug":"old_topic/2016-09-17-134","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T07:45:09.213Z","comments":true,"path":"api/articles/old_topic/2016-09-17-134.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"nginx解析配置文件，将解析出来得配置存放在ngx_cycle_s的conf_ctx中，conf_ctx是个四级指针，因为保存这些配置需要context，而这些context是有层级关系，最终的配置结构如图： 图片：27767798_1370416906jegE.png htt...","link":"","photos":[],"count_time":{"symbolsCount":"4.4k","symbolsTime":"4 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua","slug":"lua","count":124,"path":"api/tags/lua.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Python的List和C++的Vector的对比","uid":"62ab39d0bc32c5ce1245ceed42efb629","slug":"old_topic/2016-09-17-14","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T07:45:09.190Z","comments":true,"path":"api/articles/old_topic/2016-09-17-14.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"作者：糖果 简单的对比了一下Python的List和C的Vector操作，用Python代替C的 注释。 另外推荐一个在线的编译器，codepad.org。 1.定义数据 Python candyList &#x3D; [&quot;Red Candy&quot;, &quot;...","link":"","photos":[],"count_time":{"symbolsCount":"3.1k","symbolsTime":"3 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua","slug":"lua","count":124,"path":"api/tags/lua.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}