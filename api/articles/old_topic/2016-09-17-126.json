{"title":"使用ZeroBrane远程在线调试Openresty, Nginx的Lua程序","uid":"24bcb0d528509f76dbffa1fbd58c1141","slug":"old_topic/2016-09-17-126","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T07:45:09.160Z","comments":true,"path":"api/articles/old_topic/2016-09-17-126.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<p>作者：糖果</p>\n<p>ZeroBrane是一个开源的Lua编辑器IDE,自带Lua运行程序和基本的库。最主要的一点，就是ZB可以远程在线的调试，nginx或是openresty上运行的lua脚本。</p>\n<p>在编辑方面可以和VIM及插件互补，多去一句，如果花点时间，给VIM按装补全插件，目录插件，tmux, tup，在分屏状态下，vim还是不错的，其实也可以把ZB的远程调试功能，也做插件，让VIM可以进行远程在线调试。</p>\n<p>毕竟把系统的Log打的很全，如果可以在线调试，给WEB服务上运行的脚本程序下断点，对调试工作，也大有裨益。</p>\n<p>下面就开始介绍，ZB如何进行在线调试。</p>\n<p>1.下载ZB。</p>\n<p><a href=\"https://github.com/pkulchenko/ZeroBraneStudio\">https://github.com/pkulchenko/ZeroBraneStudio</a></p>\n<p>里面有一个.sh文件，就是在linux上运行ZB的启动程序。因为我们的Lua WEB程序在VPS上，运行ZB需要给VPS安装Desktop，用VNC连上去。可以参考另外一篇文章。</p>\n<p>图片：1.jpg<br />\n<img src=\"http://orchina-blog.stor.sinaapp.com/1446015115.jpg\" alt=\"1.jpg\" /></p>\n<p>这是运行起来的ZB界面，这个已经进入的调试工作状态。</p>\n<p>2.创建一个Lapis工程，使用如下的命令：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">lapis new<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>关于lapis更具体工程创建，也可以参考别一篇文章。</p>\n<p>图片：2.png<br />\n<img src=\"http://orchina-blog.stor.sinaapp.com/1446015132.png\" alt=\"2.png\" /></p>\n<p>创建工程后，会自动的创建一些文件，在这些文件中关键的文件有：</p>\n<p>nginx.conf（OpenResty的配置文件）</p>\n<p>test.lua （我们准备调试的主程序）</p>\n<p>mobdebug.lua（ZB开源工程中自带的程序，需要拷贝到当前目录。lualibs/mobdebug）</p>\n<p>socket.lua（ZB开源工程中自带的程序，需要拷贝到当前目录。lualibs/ ）</p>\n<p>3.修改配置文件。</p>\n<p>nginx.conf</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">worker_processes $&#123;&#123;NUM_WORKERS&#125;&#125;;\n\nerror_log stderr notice;\n\ndaemon off;\n\npid logs&#x2F;nginx.pid;\n\nevents &#123;\n\n  worker_connections 1024;\n\n&#125;\n\nhttp &#123;\n\n  include mime.types;\n\n  lua_package_path &#39;&#x2F;usr&#x2F;home&#x2F;coding&#x2F;ide&#x2F;zerob&#x2F;lualibs&#x2F;?&#x2F;?.lua;&#x2F;usr&#x2F;home&#x2F;coding&#x2F;ide&#x2F;zerob&#x2F;lualibs&#x2F;?.lua;;&#39;;\n\n  lua_package_cpath &#39;&#x2F;usr&#x2F;home&#x2F;coding&#x2F;ide&#x2F;zerob&#x2F;bin&#x2F;clibs&#x2F;?.so;;&#39;;\n\n  server &#123;\n\n    listen $&#123;&#123;PORT&#125;&#125;;\n\n    lua_code_cache $&#123;&#123;CODE_CACHE&#125;&#125;;\n\n    location &#x2F; &#123;\n\n      default_type text&#x2F;html;\n\n      content_by_lua_file &#39;test.lua&#39;;\n\n    &#125;\n\n    location &#x2F;static&#x2F; &#123;\n\n      alias static&#x2F;;\n\n    &#125;\n\n    location &#x2F;favicon.ico &#123;\n\n      alias static&#x2F;favicon.ico;\n\n    &#125;\n\n  &#125;\n\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>lua_package_path和 lua_package_cpath，这两个变量是关键的，需要指向你实际ZB的目录。</p>\n<p>lapis自动生成的工程配置文件中，location下面使用的是content_by_lua，直接运行lua语句</p>\n<p>此处，我们直接引用lua文件，改用content_by_lua_file。</p>\n<p>4.创建调试程序。</p>\n<p>test.lua</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\"><span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mobdebug'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token string\">'127.0.0.1'</span><span class=\"token punctuation\">)</span>\n\ntmp_str <span class=\"token operator\">=</span> <span class=\"token string\">\"Debug\"</span>\n\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Lua Lapis\"</span><span class=\"token punctuation\">)</span>\n\nngx<span class=\"token punctuation\">.</span><span class=\"token function\">say</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Openresty\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mobdebug'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>可以实现远程调试，很关健的一点就是引用了mobdebug.这个模块，这里的127.0.0.1就是openresty</p>\n<p>服务运行地址。</p>\n<p>5.起动IDE，执行调试。</p>\n<p>我们IDE菜单上的project-&gt; project directory-&gt; choose选择打开，我们这个工程的目录，</p>\n<p>选set from current file, 把工程中的test.lua作为当前要处理的文件。</p>\n<p>下面关键的一点，在project 菜单里，一定要点选 “Start Debugger Server”。</p>\n<p>图片：3.jpg<br />\n<img src=\"http://orchina-blog.stor.sinaapp.com/1446015138.jpg\" alt=\"3.jpg\" /></p>\n<p>国为选中后，ZB就会在后面开一端口监听：</p>\n<p>图片：4.jpg<br />\n<img src=\"http://orchina-blog.stor.sinaapp.com/1446015141.jpg\" alt=\"4.jpg\" /></p>\n<p>注意这个8172就是为调试准备的。</p>\n<p>图片：5.jpg<br />\n<img src=\"http://orchina-blog.stor.sinaapp.com/1446015145.jpg\" alt=\"5.jpg\" /></p>\n<p>远行WEB服务：lapis server</p>\n<p>图片：6.jpg<br />\n<img src=\"http://orchina-blog.stor.sinaapp.com/1446015149.jpg\" alt=\"6.jpg\" /></p>\n<p>下面这张图，就回到了最开始的那张图。</p>\n<p>图片：7.jpg<br />\n<img src=\"http://orchina-blog.stor.sinaapp.com/1446015152.jpg\" alt=\"7.jpg\" /></p>\n<p>我们在浏览器中输入：127.0.0.1:8080</p>\n<p>程序进入状态。</p>\n<p>我们进入Remote console标签页，进行在线调试，直接使用openresy的库函数ngx.say</p>\n<p>图片：8.jpg<br />\n<img src=\"http://orchina-blog.stor.sinaapp.com/1446015157.jpg\" alt=\"8.jpg\" /></p>\n<p>单步下一句，把程序中的tmp_str的内容打到，openresty服务器的控制台上。</p>\n<p>图片：9.jpg<br />\n<img src=\"http://orchina-blog.stor.sinaapp.com/1446015160.jpg\" alt=\"9.jpg\" /></p>\n<p>图片：11.jpg<br />\n<img src=\"http://orchina-blog.stor.sinaapp.com/1446015164.jpg\" alt=\"11.jpg\" /></p>\n<p>我们可以通过自己写一个函数，把输出重定向到文件里，看着更方便。</p>\n<p>使用shit-enter，还可以进行多行输入代码输入。</p>\n<p>我们结束调试，就会看到ngx.say打印的内容出现在网页上。</p>\n<p>图片：12.jpg<br />\n<img src=\"http://orchina-blog.stor.sinaapp.com/1446015168.jpg\" alt=\"12.jpg\" /></p>\n<p>下篇是如何用ZB在线调试Lua WEB程序。</p>\n<p>PS:转载到其它平台请注明作者姓名及原文链接，请勿用于商业用途。</p>\n<p>致敬英文作者：Paul Kulchenko</p>\n<p><a href=\"http://notebook.kulchenko.com/zerobrane/debugging-openresty-nginx-lua-scripts-with-zerobrane-studio\">http://notebook.kulchenko.com/zerobrane/debugging-openresty-nginx-lua-scripts-with-zerobrane-studio</a></p>\n","text":"作者：糖果 ZeroBrane是一个开源的Lua编辑器IDE,自带Lua运行程序和基本的库。最主要的一点，就是ZB可以远程在线的调试，nginx或是openresty上运行的lua脚本。 在编辑方面可以和VIM及插件互补，多去一句，如果花点时间，给VIM按装补全插件，目录插件，t...","link":"","photos":[],"count_time":{"symbolsCount":"2.8k","symbolsTime":"3 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua","slug":"lua","count":124,"path":"api/tags/lua.json"}],"toc":"","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Lua Lapis安装与项目创建","uid":"a7008d71061814b111858c062823c704","slug":"old_topic/2016-09-17-128","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T07:45:09.183Z","comments":true,"path":"api/articles/old_topic/2016-09-17-128.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"Lapis是程序员leafo写的一个lua语言的WEB框架，目前已经发布了1.3版本。要求的服务器开发环境是Openresty，而且支持moonscript,这个moonscript语言类似于Javascript的coffescript。起到的作用是，可以用简短moonscrip...","link":"","photos":[],"count_time":{"symbolsCount":"2.8k","symbolsTime":"3 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua","slug":"lua","count":124,"path":"api/tags/lua.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"LUA通过授权方式登录Redis","uid":"d4821869c1f22a5f8395c793ca14a30c","slug":"old_topic/2016-09-17-131","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T07:45:09.226Z","comments":true,"path":"api/articles/old_topic/2016-09-17-131.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"作者：糖果 require \"redis\" local redis = require 'redis' local client = redis.connect('127.0.0.1', 6379) local auth_flg = client:auth(\"这里是你的密码\") ...","link":"","photos":[],"count_time":{"symbolsCount":210,"symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua","slug":"lua","count":124,"path":"api/tags/lua.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}