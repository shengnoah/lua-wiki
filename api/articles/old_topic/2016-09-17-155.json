{"title":"CSRF攻击预防的Token生成原理","uid":"2caace3339612aabd4a60ee7889dcc5d","slug":"old_topic/2016-09-17-155","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T07:45:09.221Z","comments":true,"path":"api/articles/old_topic/2016-09-17-155.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<p>作者：糖果</p>\n<p>以往我们讲到CSRF，谈及都是CSRF的攻击原理，这次讲一下预防CSRF，生成Token背后的<br />\n加密原理和具体实现例示。</p>\n<p>1.Token构成。</p>\n<p>从需求功能上来讲，为了防止CSRF工具，token需要具有不重复，另外，还含有特定的功能<br />\n信息，比如过期时间戳。</p>\n<p>下面的图描述了一个token的数据构成：</p>\n<p>Token的数据结构。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">-----------------------------------------------------------------------------\n|             msg                  |        separator       |           signature                    |\n-----------------------------------------------------------------------------\n|     key     |   timestamp  |              .               |    Base64(sha256(msg))        |\n-----------------------------------------------------------------------------\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>token由三部分组成：a).msg b). separator c).signature。</p>\n<p>a). msg部分：而msg本身也有两部分组成：一部分，随机字符的主体，另一部分是过期时间戳。</p>\n<p>b). 分隔符号：用符号分隔msg部分，和加密后生成的signature签名部分，这里用的是”.“</p>\n<p>c). 签名signature。<br />\nsignature签名，是对上面提到的msg，按照msg中提到的msg的信息部分，按照特定的秘锁进行加密。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">token &#x3D; base64(msg)格式化..base64(sha256(&quot;秘锁&quot;, msg))<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>2.Token的加密。<br />\n首先，是按照合适得加密方法对数据进行加密。这里我们通用的就使用了sha256散列算法，然后进行BASE64的格式转换。然后，我们需要在token串中隐含过期时间的设定，从需求上讲，每条与服务器交互的token有是有过期时间的，超过这个时间范围，就无效了，需要重新从服务器中取得。</p>\n<p>3.Token的验证。</p>\n<p>当用户从客户端，得到了token,再次提交给服务器的时候，服务器需要判断token的有效性，否则不加判断直接处理数据，token的生成就无意义了。</p>\n<p>验证的过程是:</p>\n<p>a). token解包。</p>\n<p>先把接受到的token，进行分解。“.”为分隔符，分为msg部分+signature签名部分。</p>\n<p>b). 比对签名。</p>\n<p>对msg部分进行base64解码, decode_base64(msg)然后在对解码后的msg明文，进行同样的encode_base64(sha256(msg))加密。<br />\n秘锁相同，然后，判断加密后的数据和客户端传过来的token.signature的部分是否一致。如果一致，说明这个token是有效的。</p>\n<p>c). 判断时间过期。<br />\n如果是有效的,取出msg.timestamp，和当前系统时间进行比较，如果过期时间小于当前时间，那这个token是过期的，需要重新的取得token。</p>\n<p>原理都通用，此处使用lua对上处理过程进行描述。</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">\n<span class=\"token keyword\">local</span> gen_token <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> expires<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">--做成一个过期时间戳。</span>\n    <span class=\"token keyword\">if</span> expires <span class=\"token operator\">==</span> <span class=\"token keyword\">nil</span> <span class=\"token keyword\">then</span>\n     expires <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span><span class=\"token function\">time</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">60</span> <span class=\"token operator\">+</span> <span class=\"token number\">60</span> <span class=\"token operator\">*</span> <span class=\"token number\">8</span>\n    <span class=\"token keyword\">end</span>\n   \n    <span class=\"token comment\">--对msg部分进行base64编码。</span>\n    <span class=\"token keyword\">local</span> msg <span class=\"token operator\">=</span> <span class=\"token function\">encode_base64</span><span class=\"token punctuation\">(</span>\n     json<span class=\"token punctuation\">.</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n         key <span class=\"token operator\">=</span> key<span class=\"token punctuation\">,</span>\n         expires <span class=\"token operator\">=</span> expires\n     <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n     \n   <span class=\"token comment\">--进行sha256哈希。</span>\n    <span class=\"token keyword\">local</span> signature <span class=\"token operator\">=</span> <span class=\"token function\">encode_base64</span><span class=\"token punctuation\">(</span><span class=\"token function\">hmac_sha256</span><span class=\"token punctuation\">(</span><span class=\"token string\">'testkey'</span><span class=\"token punctuation\">,</span> msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    \n    <span class=\"token comment\">--拼接成一条token。</span>\n    <span class=\"token keyword\">return</span> msg <span class=\"token operator\">..</span> <span class=\"token string\">\".\"</span> <span class=\"token operator\">..</span>signature\n<span class=\"token keyword\">end</span>\n\n\n<span class=\"token keyword\">local</span>  val_token <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span>token<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">--对输入数据的判空操作</span>\n    <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> <span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">)</span> <span class=\"token keyword\">then</span>\n     <span class=\"token keyword\">return</span> <span class=\"token keyword\">nil</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'mssing csrf token'</span>\n    <span class=\"token keyword\">end</span>\n    \n    <span class=\"token comment\">--对token的msg部分，signature签名部分进行拆分。</span>\n    <span class=\"token keyword\">local</span> msg<span class=\"token punctuation\">,</span> sig <span class=\"token operator\">=</span> token<span class=\"token punctuation\">:</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"^(.*)%.(.*)$\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> <span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span> <span class=\"token keyword\">then</span>\n         <span class=\"token keyword\">return</span> <span class=\"token keyword\">nil</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"malformed csrf token\"</span>\n    <span class=\"token keyword\">end</span>\n\n\n    sig <span class=\"token operator\">=</span> encoding<span class=\"token punctuation\">.</span><span class=\"token function\">decode_base64</span><span class=\"token punctuation\">(</span>sig<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">--对解包后msg，按照相同的加密key:\"testkey\"，重新进行sha256哈希，比对signature，</span>\n    <span class=\"token comment\">--如果不一致，说明这个token中的数据有问题，无效的token。</span>\n    <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> <span class=\"token punctuation\">(</span>sig <span class=\"token operator\">==</span> <span class=\"token function\">hmac_sha256</span><span class=\"token punctuation\">(</span><span class=\"token string\">'testkey'</span><span class=\"token punctuation\">,</span> msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">then</span>\n         <span class=\"token keyword\">return</span> <span class=\"token keyword\">nil</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"invalid csrf token(bad sig)\"</span>\n    <span class=\"token keyword\">end</span>\n\n\n    <span class=\"token comment\">--对msg进行base64解码，判断其中的key和传入的key是否一致。</span>\n    <span class=\"token comment\">--如果不一致说明token也是无效的。</span>\n    msg <span class=\"token operator\">=</span>json<span class=\"token punctuation\">.</span><span class=\"token function\">decode</span><span class=\"token punctuation\">(</span><span class=\"token function\">decode_base64</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> <span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>key <span class=\"token operator\">==</span> key<span class=\"token punctuation\">)</span> <span class=\"token keyword\">then</span>\n     <span class=\"token keyword\">return</span> <span class=\"token keyword\">nil</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"invalid csrf token (bad key)\"</span>    \n    <span class=\"token keyword\">end</span>\n    \n    <span class=\"token comment\">--取出msg部分的时间戳，判断是否大于当前时间，如果大于，说明token过期无效了。</span>\n    <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">not</span> msg<span class=\"token punctuation\">.</span>expires <span class=\"token keyword\">or</span> msg<span class=\"token punctuation\">.</span>expires <span class=\"token operator\">></span> os<span class=\"token punctuation\">.</span><span class=\"token function\">time</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">then</span>\n         <span class=\"token keyword\">return</span> <span class=\"token keyword\">nil</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"csrf token expired\"</span>\n    <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>下面是关于Lua语言加密库，lua语言有别于其他语言，没有同意的官方指定加密库，为了便于读者，看后实践，下面对lua的加密库进行了补充描述。lua语言是一种弱类型的语言，简单明了，对于描述某些课题，便于表述，类似于伪语言，操作起来也很轻便，便于实践推敲算法。即使之后不适用lua，也可以很方面的迁移到其他语言。</p>\n<p>我们在开发的工作中，难免要对一些数据进行加密处理，而加密模块的使用有是就必不可少。在lua官方的WIKI列表中就列出了，很多lua程序写的加密库，这写加密库有的是用纯lua写的，也有用lua调用C的程序实现加密。不过有些时候甄选这些库还是需要花一些时间精力，只是需要测试一下这是加密算是否是好用的。这是lua组织列出的一览列表。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">http:&#x2F;&#x2F;lua-users.org&#x2F;wiki&#x2F;CryptographyStuff<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>说一下为什么要加密，我们面临的任务是什么！我们现在面临的任务是，要对一段字符串进行sha256算法加密。<br />\n我们从列表中选出了几个支持sha256加密的包，并说明一下这几个工具包。</p>\n<h3>1.SecureHashAlgorithm和SecureHashAlgorithmBW</h3> \n这个工具包是支持sha256加密的，而且是纯lua方法的实现，问题是，这两个包分别依赖lua5.2和lua5.3。\n而我们系统的运行环境是lua5.1，因为大部分的生产环境都是lua5.1，因为历史原因暂时没法改变。如果要把5.2的程序移植到5.1下运行，还需要移植一个lua5.2才独有的包，这是lua5.2升级之后才有的部件：bit32,而在lua5.3中又将这个部件去掉了,移植的动力不大，暂时不使用这个包。\n<h3>2.Lcrypt</h3> \n这个包不是纯lua的实现，底层加密用的是C语言，而且额外还有依赖另外另个工具包 libTomCrypt和libTomMath，这两个包的官网已经被和谐了，github上有源码，所以要想让这个包正常运行需要手动make安装3个源码工程，还是算了，有时间的时候再装好测试一下，先暂时不用。\n<p>网站：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">http:&#x2F;&#x2F;www.eder.us&#x2F;projects&#x2F;lcrypt&#x2F;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3>3.LuaCrypto</h3> \n这个包的安装用的是luarocks，就比较简单了 \n<pre class=\"line-numbers language-none\"><code class=\"language-none\">luarocks install luacrypto <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>我们选用这个包进行加密处理。<br />\nLuaCrypto其实是openssl库的前端lua调用，依赖openssl，openssl库显然会支持sha256加密，相对也比一般的第三方实现更可靠。<br />\n写一个简单的加密程序：</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\"><span class=\"token keyword\">local</span> crypto <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"crypto\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">local</span> hmac <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"crypto.hmac\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">local</span> ret <span class=\"token operator\">=</span> hmac<span class=\"token punctuation\">.</span><span class=\"token function\">digest</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sha256\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"abcdefg\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"hmackey\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>ret的返回结果是，如下这个字符串。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">704d25d116a700656bfa5a6a7b0f462efdc7df828cdbafa6fbf8b39a12e83f24<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>我们需要改造一下代码，在调用digest的时候指定输出的形式是raw二进制数据形式，然后在编码成base64的数据形式。</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\"><span class=\"token keyword\">local</span> ret <span class=\"token operator\">=</span> hmac<span class=\"token punctuation\">.</span><span class=\"token function\">digest</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sha256\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"abcdefg\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"hmackey\"</span><span class=\"token punctuation\">,</span>rawequal<span class=\"token punctuation\">)</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>这时候的输出结果是：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">cE0l0RanAGVr+lpqew9GLv3H34KM26+m+&#x2F;izmhLoPyQ&#x3D;\nlua-base64<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>使用的是下面的库，lua库就是这样，有很多功能程序有很多的实现，并且很多非官方的第三方实现。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">https:&#x2F;&#x2F;github.com&#x2F;toastdriven&#x2F;lua-base64<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>作者：糖果<br />\nPS:转载到其它平台请注明作者姓名及原文链接，请勿用于商业用途。</p>\n<p><a href=\"http://www.lua.ren/topic/133/lua-faq\" target=\"_blank\">点击查看Lua FAQ</a></p>\n","text":"作者：糖果 以往我们讲到CSRF，谈及都是CSRF的攻击原理，这次讲一下预防CSRF，生成Token背后的 加密原理和具体实现例示。 1.Token构成。 从需求功能上来讲，为了防止CSRF工具，token需要具有不重复，另外，还含有特定的功能 信息，比如过期时间戳。 下面的图描...","link":"","photos":[],"count_time":{"symbolsCount":"4.5k","symbolsTime":"4 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">1.SecureHashAlgorithm和SecureHashAlgorithmBW</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">2.Lcrypt</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\">3.LuaCrypto</span></a></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Lua Curl的一般应用","uid":"85399f84f55b8c1291e5685cda57f473","slug":"old_topic/2016-09-17-154","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T07:45:09.227Z","comments":true,"path":"api/articles/old_topic/2016-09-17-154.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"作者：糖果 Curl是一个WEB开发常用的工具，直接用官网的翻译 curl是一个开源的命令行工具，也是一个库，用于传输URL语法的工具，支持DICT, FILE, FTP, FTPS, Gopher, HTTP, HTTPS, IMAP, IMAPS, LDAP, LDAPS, ...","link":"","photos":[],"count_time":{"symbolsCount":"3.3k","symbolsTime":"3 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"LUA调用C语言实现的SO库","uid":"41a2ce410f87ba443188f31dccca5c41","slug":"old_topic/2016-09-17-156","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T07:45:09.180Z","comments":true,"path":"api/articles/old_topic/2016-09-17-156.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"作者：糖果 这篇文章归纳lua5.1的C语言模库so的“标准”写法，代码都是编译通过的，可直接参考使用！ tangguo.h #ifndef __tangguo_h__ #define __tangguo_h__ #include \"lauxlib.h\" #include \"lu...","link":"","photos":[],"count_time":{"symbolsCount":"3.5k","symbolsTime":"3 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}