{"title":"Vanilla的Control返回必须是String类型","uid":"9973dbca8e7d2bdfff8377e05eaa65ee","slug":"old_topic/2016-09-17-195","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T07:45:09.174Z","comments":true,"path":"api/articles/old_topic/2016-09-17-195.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":null,"content":"<p>这是今天社区里的一位朋友遇到的问题， Control最后return回去的数据是一个table类型，而不是一个字符串，这时候Vanilla报错了。</p>\n<p>社区里朋友的代码，如下：</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ResController:fetchData</span><span class=\"params\">()</span></span></span><br><span class=\"line\">    <span class=\"keyword\">local</span> hc = http:new()</span><br><span class=\"line\">    <span class=\"keyword\">local</span> resp, err = hc:request_uri(<span class=\"string\">&quot;http://xxx.xxx.x.xx&quot;</span>, &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">        metod = <span class=\"string\">&quot;GET&quot;</span></span><br><span class=\"line\">        <span class=\"built_in\">path</span> = <span class=\"string\">&quot;/sec/res/find?pid=&quot;</span>..id,</span><br><span class=\"line\">        headers = &#123;</span><br><span class=\"line\">            [<span class=\"string\">&quot;User-Agent&quot;</span>] = <span class=\"string\">&quot;Mozilla/5.0...&quot;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> resp <span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;request error :&quot;</span>..err</span><br><span class=\"line\">    <span class=\"keyword\">end</span> </span><br><span class=\"line\">    <span class=\"keyword\">return</span> resp.body</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<p>在看一下Vanilla的代码是如何处理这个逻辑的：</p>\n<p>vanilla的代码：</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Response:response</span><span class=\"params\">()</span></span></span><br><span class=\"line\">    <span class=\"keyword\">local</span> body = &#123;[<span class=\"number\">1</span>]=<span class=\"built_in\">self</span>.append_body, [<span class=\"number\">2</span>]=<span class=\"built_in\">self</span>.body, [<span class=\"number\">3</span>]=<span class=\"built_in\">self</span>.prepend_body&#125;</span><br><span class=\"line\">    ngx.<span class=\"built_in\">print</span>(<span class=\"built_in\">table</span>.<span class=\"built_in\">concat</span>( body, <span class=\"string\">&quot;&quot;</span>))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>","text":"这是今天社区里的一位朋友遇到的问题， Control最后return回去的数据是一个table类型，而不是一个字符串，这时候Vanilla报错了。 社区里朋友的代码，如下： 12345678910111213141516function ResController:fetchDa...","link":"","photos":[],"count_time":{"symbolsCount":771,"symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":308,"path":"api/categories/topic.json"}],"tags":[],"toc":"","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"LUA中实现面向对象","uid":"340b5f6f2b7fa198ce66c515bcec1223","slug":"old_topic/2016-09-17-196","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T07:45:09.212Z","comments":true,"path":"api/articles/old_topic/2016-09-17-196.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":null,"text":"我们引用云风大哥的代码： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546local _class=&#123;&#125; function class(sup...","link":"","photos":[],"count_time":{"symbolsCount":"1.6k","symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":308,"path":"api/categories/topic.json"}],"tags":[],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"来至英国朋友的消息","uid":"8b705c23d4a474e218260c1eafaf275e","slug":"old_topic/2016-09-17-197","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T07:45:09.233Z","comments":true,"path":"api/articles/old_topic/2016-09-17-197.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":null,"text":"[Alert] Importance message for British nationals in Beijing The British Embassy Beijing has received information of possible threats against...","link":"","photos":[],"count_time":{"symbolsCount":610,"symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":308,"path":"api/categories/topic.json"}],"tags":[],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}