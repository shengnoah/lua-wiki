{"title":"Nginx+Lua返回JSON类型数据","uid":"054f428f76705613481e9cfa45f6bed2","slug":"old_topic/2016-09-17-377","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T07:45:09.219Z","comments":true,"path":"api/articles/old_topic/2016-09-17-377.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":null,"content":"<p>作者：糖果</p>\n<p>Nginx返回JSON数据，一种是直接在配置文件里设置，一种是通过Lua代码封装完成，讲Nginx中执行Lua返回JSON的关键，一个用API函数ngx.say，同时配合json.encode对JSON格式的字符串进行编码，然后设定响应头信息的类型。</p>\n<h1>Nginx Conf中返回JSON的方式</h1>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location /json/ &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t    default_type application/json;</span><br><span class=\"line\">\t    add_header Content-Type <span class=\"string\">&#x27;text/html; charset=utf-8&#x27;</span>;</span><br><span class=\"line\">\t    <span class=\"keyword\">return</span> <span class=\"number\">200</span> <span class=\"string\">&#x27;&#123;&quot;about&quot;:&quot;糖果的Lua教程,&quot;sites&quot;:&quot;lua.ren&quot;&#125;&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h1>Nginx Lua返回JSON的方式</h1>\n<p>三步操作：</p>\n<h2 id=\"1-设置HTTP的响应头信息：\">1.设置HTTP的响应头信息：</h2>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ngx.header[<span class=\"string\">&#x27;Content-Type&#x27;</span>] = <span class=\"string\">&#x27;application/json; charset=utf-8&#x27;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"2-json-encode-“Lua的Table型变量”-：\">2.json.encode(“Lua的Table型变量”)：</h2>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">json = <span class=\"built_in\">require</span> <span class=\"string\">&quot;cjson&quot;</span> </span><br><span class=\"line\">res_json_data = json.encode(ret)</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-用say函数显示，经过encode的JSON数据。\">3.用say函数显示，经过encode的JSON数据。</h2>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ngx.say(res_json_data)</span><br></pre></td></tr></table></figure>\n<p>用Lua实现以上3个步骤，就实同了JSON数据返回。</p>\n<h2 id=\"完整代码片段，以下：\">完整代码片段，以下：</h2>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">json = <span class=\"built_in\">require</span> <span class=\"string\">&quot;cjson&quot;</span></span><br><span class=\"line\">ngx.header[<span class=\"string\">&#x27;Content-Type&#x27;</span>] = <span class=\"string\">&#x27;application/json; charset=utf-8&#x27;</span></span><br><span class=\"line\">ngx.say(json.encode(ret))</span><br></pre></td></tr></table></figure>\n<p>下面的内容就是用Lua封装了几个函数，通过封装快实现了JSON数据的返回。</p>\n<p>一般的Python的WEB框架，都可以的指定返回JSON数据，基本的原理，还是通过指定返回JSON格式的字符串，并且设定HTTP返回时header的Content-Type属性为application/json，来实现返回JSON数据的目地。</p>\n<p>而在Openresty+Lua的框架模式下，不用同时指返回的header类，直接在路由对应的匿名函数中，指定返回一个table类型的即可， 在web框架部分区分判断，如果用户返回的是table类型的数据，直接就用cjson这种库，把table数据渲染成JSON返回。</p>\n<p>依Blues演示框架为例：</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.run = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span></span><br><span class=\"line\">        fun = Route:run(app.router)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> fun <span class=\"keyword\">then</span></span><br><span class=\"line\">            <span class=\"keyword\">local</span> ret = fun(app.req, app.id)</span><br><span class=\"line\">            <span class=\"keyword\">local</span> rtype = <span class=\"built_in\">type</span>(ret)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> rtype == <span class=\"string\">&quot;table&quot;</span>  <span class=\"keyword\">then</span></span><br><span class=\"line\">                json = <span class=\"built_in\">require</span> <span class=\"string\">&quot;cjson&quot;</span></span><br><span class=\"line\">                ngx.header[<span class=\"string\">&#x27;Content-Type&#x27;</span>] = <span class=\"string\">&#x27;application/json; charset=utf-8&#x27;</span></span><br><span class=\"line\">                ngx.say(json.encode(ret))</span><br><span class=\"line\">            <span class=\"keyword\">end</span> </span><br><span class=\"line\">        <span class=\"keyword\">end</span> </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">end</span> </span><br></pre></td></tr></table></figure>\n<p>显然，这里只是对返回值的类型是“talbe”的做了处理，也可以对返回类型是“string”或是其它类型的数据做处理。</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.run = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span></span><br><span class=\"line\">        fun = Route:run(app.router)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> fun <span class=\"keyword\">then</span></span><br><span class=\"line\">            <span class=\"keyword\">local</span> ret = fun(app.req, app.id)</span><br><span class=\"line\">            <span class=\"keyword\">local</span> rtype = <span class=\"built_in\">type</span>(ret)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> rtype == <span class=\"string\">&quot;table&quot;</span>  <span class=\"keyword\">then</span></span><br><span class=\"line\">                json = <span class=\"built_in\">require</span> <span class=\"string\">&quot;cjson&quot;</span></span><br><span class=\"line\">                ngx.header[<span class=\"string\">&#x27;Content-Type&#x27;</span>] = <span class=\"string\">&#x27;application/json; charset=utf-8&#x27;</span></span><br><span class=\"line\">                ngx.say(json.encode(ret))</span><br><span class=\"line\">            <span class=\"keyword\">end</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> rtype == <span class=\"string\">&quot;string&quot;</span>  <span class=\"keyword\">then</span></span><br><span class=\"line\">                ngx.header[<span class=\"string\">&#x27;Content-Type&#x27;</span>] = <span class=\"string\">&#x27;text/plain; charset=UTF-8&#x27;</span></span><br><span class=\"line\">                ngx.say(ret)</span><br><span class=\"line\">            <span class=\"keyword\">end</span></span><br><span class=\"line\">        <span class=\"keyword\">end</span></span><br><span class=\"line\">        le(<span class=\"string\">&#x27;Application.app.run&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<p>没有把这种分类型处理，单独封装成一个方法，简单用这段代码说明问题。</p>\n<p>上面是框架中的代码实现，再来看看如何在测试项目中驱动这个功能。</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">require</span> <span class=\"string\">&quot;log&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">local</span> HiLog = <span class=\"built_in\">require</span> <span class=\"string\">&quot;HiLog&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">local</span> utils = <span class=\"built_in\">require</span> <span class=\"string\">&quot;utils.utils&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">local</span> Application = <span class=\"built_in\">require</span> <span class=\"string\">&quot;orc&quot;</span></span><br><span class=\"line\">app = Application.new()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">app:get(<span class=\"string\">&quot;/json&quot;</span>, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(request,id)</span></span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;k=<span class=\"string\">&#x27;key&#x27;</span>, v=<span class=\"string\">&#x27;value&#x27;</span>&#125;    </span><br><span class=\"line\"><span class=\"keyword\">end</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">app:get(<span class=\"string\">&quot;/string&quot;</span>, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(request,id)</span></span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;Waterfall&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">end</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">return</span> app.run()</span><br></pre></td></tr></table></figure>\n<p>这样以来，我们就可以快速的用Openresty + Lua构建超级微级的路由系统，管理渲染JSON数据，构建一个简单的JSON数据请求服务。</p>\n<p><a href=\"https://github.com/shengnoah/Blues\">Blues</a><br>\n<a href=\"https://github.com/shengnoah/Waterfall\">Waterfall</a></p>\n","text":"作者：糖果 Nginx返回JSON数据，一种是直接在配置文件里设置，一种是通过Lua代码封装完成，讲Nginx中执行Lua返回JSON的关键，一个用API函数ngx.say，同时配合json.encode对JSON格式的字符串进行编码，然后设定响应头信息的类型。 Nginx Co...","link":"","photos":[],"count_time":{"symbolsCount":"2.9k","symbolsTime":"3 mins."},"categories":[{"name":"topic","slug":"topic","count":308,"path":"api/categories/topic.json"}],"tags":[{"name":"lua","slug":"lua","count":153,"path":"api/tags/lua.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\"><span class=\"toc-text\">Nginx Conf中返回JSON的方式</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\"><span class=\"toc-text\">Nginx Lua返回JSON的方式</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-%E8%AE%BE%E7%BD%AEHTTP%E7%9A%84%E5%93%8D%E5%BA%94%E5%A4%B4%E4%BF%A1%E6%81%AF%EF%BC%9A\"><span class=\"toc-text\">1.设置HTTP的响应头信息：</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-json-encode-%E2%80%9CLua%E7%9A%84Table%E5%9E%8B%E5%8F%98%E9%87%8F%E2%80%9D-%EF%BC%9A\"><span class=\"toc-text\">2.json.encode(“Lua的Table型变量”)：</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-%E7%94%A8say%E5%87%BD%E6%95%B0%E6%98%BE%E7%A4%BA%EF%BC%8C%E7%BB%8F%E8%BF%87encode%E7%9A%84JSON%E6%95%B0%E6%8D%AE%E3%80%82\"><span class=\"toc-text\">3.用say函数显示，经过encode的JSON数据。</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AE%8C%E6%95%B4%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5%EF%BC%8C%E4%BB%A5%E4%B8%8B%EF%BC%9A\"><span class=\"toc-text\">完整代码片段，以下：</span></a></li></ol></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"如何读取request的body数据","uid":"805020bcfe4a2b05d104deeb78f27106","slug":"old_topic/2016-09-17-379","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T07:45:09.194Z","comments":true,"path":"api/articles/old_topic/2016-09-17-379.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":null,"text":"作者：糖果 我们通过curl向openresty服务器端请求rest，采用GET请求方式，提交一个json,然后路由到对应的匿名函数，通过request.params.body直接取得json数据主体，解析成table变量，放回渲染。下面： 1curl -X GET http:/...","link":"","photos":[],"count_time":{"symbolsCount":816,"symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":308,"path":"api/categories/topic.json"}],"tags":[{"name":"lua","slug":"lua","count":153,"path":"api/tags/lua.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Openresty OOM 臭虫","uid":"90f8068c136a1c725371f517843fe478","slug":"old_topic/2016-09-17-376","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T07:45:09.226Z","comments":true,"path":"api/articles/old_topic/2016-09-17-376.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":null,"text":"Openresty OOM 臭虫 最近我在线上改变了一个的 Nginx 配置，导致 OOM（Out of Memory） killer 在 Nginx 加载新配置的过程中 杀死了 Nginx 进程。这是添加到配置中的行： lua_ssl_trusted_certificate /...","link":"","photos":[],"count_time":{"symbolsCount":"20k","symbolsTime":"19 mins."},"categories":[{"name":"topic","slug":"topic","count":308,"path":"api/categories/topic.json"}],"tags":[{"name":"lua","slug":"lua","count":153,"path":"api/tags/lua.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}