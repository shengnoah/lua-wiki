{"title":"NGINX配置初始化过程","uid":"e77113c5554b3f904d7fab1c518f6770","slug":"old_topic/2016-09-17-134","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T06:15:59.735Z","comments":true,"path":"api/articles/old_topic/2016-09-17-134.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":[],"content":"<p>nginx解析配置文件，将解析出来得配置存放在ngx_cycle_s的conf_ctx中，conf_ctx是个四级指针，因为保存这些配置需要context，而这些context是有层级关系，最终的配置结构如图：</p>\n<p>图片：27767798_1370416906jegE.png<br><img src=\"http://orchina-blog.stor.sinaapp.com/1446608142.png\" alt=\"27767798_1370416906jegE.png\" /> </p>\n<p> http模块的配置有些复杂，由于server的配置还可以出现在http模块中，同时location的配置可以出现在http模块或者server模块中，所以对于http来说也就是最上面的那个ngx_http_ctx_conf_t有srv_conf和loc_conf是十分有必要的，这两个指针后面的结构体数组保存了在http中的那些server的和location的配置。同样对于每个server来说，不需要单独的main配置了，直接引用main的就可以。每个server必须有自己单独的ngx_http_core_srv_conf_t，来保存当前server块内的配置，这个配置最后会和http的里面的ngx_http_core_srv_conf_t做merge，这个merge是把父server的配置merge到子server配置上面。对于location的配置，在http和server中都可以配置，那么merge的操作需要首先把http的location配置merge到每个server配置中，然后每个server的location配置再和每个location模块中的配置进行merge，这里location配置需要merge两次。举例ngx_http_core_module模块merge的过程：</p>\n<p>图片：27767798_1370417515HdmN.png<br><img src=\"http://orchina-blog.stor.sinaapp.com/1446608052.png\" alt=\"27767798_1370417515HdmN.png\" /></p>\n<p> merge过程是按照module一个一个module的merge，第一步从main配置里面的servers，遍历每个server，把main里面的server配置merge到每个server的配置中，然后把main里面的location配置merge到每个server的location的配置中。第二步再次遍历每个server的locations，把这个server的location的配置merge到具体的每个location中。<br>代码：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">char</span> *</span><br><span class=\"line\"><span class=\"title function_\">ngx_http_merge_servers</span><span class=\"params\">(<span class=\"type\">ngx_conf_t</span> *cf, <span class=\"type\">ngx_http_core_main_conf_t</span> *cmcf,</span></span><br><span class=\"line\"><span class=\"params\">    <span class=\"type\">ngx_http_module_t</span> *module, <span class=\"type\">ngx_uint_t</span> ctx_index)</span> <span class=\"comment\">//cmcf代表http的main配置</span></span><br><span class=\"line\">&#123; </span><br><span class=\"line\">    <span class=\"type\">char</span> *rv; </span><br><span class=\"line\">    <span class=\"type\">ngx_uint_t</span> s; </span><br><span class=\"line\">    <span class=\"type\">ngx_http_conf_ctx_t</span> *ctx, saved;</span><br><span class=\"line\">    <span class=\"type\">ngx_http_core_loc_conf_t</span> *clcf;</span><br><span class=\"line\">    <span class=\"type\">ngx_http_core_srv_conf_t</span> **cscfp;</span><br><span class=\"line\"></span><br><span class=\"line\">    cscfp = cmcf-&gt;servers.elts;             <span class=\"comment\">//得到servers数组，cmcf是main层的配置</span></span><br><span class=\"line\">    ctx = (<span class=\"type\">ngx_http_conf_ctx_t</span> *) cf-&gt;ctx; <span class=\"comment\">//ctx是main的 ngx_http_conf_ctx_t</span></span><br><span class=\"line\">    saved = *ctx;</span><br><span class=\"line\">    rv = NGX_CONF_OK;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (s = <span class=\"number\">0</span>; s &lt; cmcf-&gt;servers.nelts; s++) &#123; <span class=\"comment\">//遍历每个server，把main的配置merge到每个server中</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/* merge the server&#123;&#125;s&#x27; srv_conf&#x27;s */</span></span><br><span class=\"line\"></span><br><span class=\"line\">        ctx-&gt;srv_conf = cscfp[s]-&gt;ctx-&gt;srv_conf; </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (module-&gt;merge_srv_conf) &#123;           <span class=\"comment\">//调用模块的merge server操作</span></span><br><span class=\"line\">            rv = module-&gt;merge_srv_conf(cf, saved.srv_conf[ctx_index],</span><br><span class=\"line\">                                        cscfp[s]-&gt;ctx-&gt;srv_conf[ctx_index]); <span class=\"comment\">//save.srv_conf是父server配置，cscf-&gt;ctx-&gt;srv_conf是当前server的配置，相当于图中的第一步</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (rv != NGX_CONF_OK) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">goto</span> failed;</span><br><span class=\"line\">            &#125; </span><br><span class=\"line\">        &#125; </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (module-&gt;merge_loc_conf) &#123; <span class=\"comment\">//调用模块的merge location操作，把父location配置merge到每个server的location配置相当于图中的第一步</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">/* merge the server&#123;&#125;&#x27;s loc_conf */</span></span><br><span class=\"line\"></span><br><span class=\"line\">            ctx-&gt;loc_conf = cscfp[s]-&gt;ctx-&gt;loc_conf;</span><br><span class=\"line\"></span><br><span class=\"line\">            rv = module-&gt;merge_loc_conf(cf, saved.loc_conf[ctx_index],</span><br><span class=\"line\">                                        cscfp[s]-&gt;ctx-&gt;loc_conf[ctx_index]);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (rv != NGX_CONF_OK) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">goto</span> failed;</span><br><span class=\"line\">            &#125; </span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">/* merge the locations&#123;&#125;&#x27; loc_conf&#x27;s */</span></span><br><span class=\"line\">            clcf = cscfp[s]-&gt;ctx-&gt;loc_conf[ngx_http_core_module.ctx_index];</span><br><span class=\"line\"></span><br><span class=\"line\">            rv = ngx_http_merge_locations(cf, clcf-&gt;locations,</span><br><span class=\"line\">                                          cscfp[s]-&gt;ctx-&gt;loc_conf,</span><br><span class=\"line\">                                          module, ctx_index); <span class=\"comment\">//该merge每个server的location配置到每个location的配置中了，相当于图中的第二步</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (rv != NGX_CONF_OK) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">goto</span> failed;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>server中location和location的merge过程</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">char</span> *</span><br><span class=\"line\"><span class=\"title function_\">ngx_http_merge_locations</span><span class=\"params\">(<span class=\"type\">ngx_conf_t</span> *cf, <span class=\"type\">ngx_queue_t</span> *locations,</span></span><br><span class=\"line\"><span class=\"params\">    <span class=\"type\">void</span> **loc_conf, <span class=\"type\">ngx_http_module_t</span> *module, <span class=\"type\">ngx_uint_t</span> ctx_index)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">char</span> *rv;</span><br><span class=\"line\">    <span class=\"type\">ngx_queue_t</span> *q;</span><br><span class=\"line\">    <span class=\"type\">ngx_http_conf_ctx_t</span> *ctx, saved;</span><br><span class=\"line\">    <span class=\"type\">ngx_http_core_loc_conf_t</span> *clcf;</span><br><span class=\"line\">    <span class=\"type\">ngx_http_location_queue_t</span> *lq;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (locations == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> NGX_CONF_OK;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    ctx = (<span class=\"type\">ngx_http_conf_ctx_t</span> *) cf-&gt;ctx;</span><br><span class=\"line\">    saved = *ctx;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (q = ngx_queue_head(locations);      <span class=\"comment\">//遍历server中的locations队列</span></span><br><span class=\"line\">         q != ngx_queue_sentinel(locations);</span><br><span class=\"line\">         q = ngx_queue_next(q))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        lq = (<span class=\"type\">ngx_http_location_queue_t</span> *) q;</span><br><span class=\"line\"></span><br><span class=\"line\">        clcf = lq-&gt;exact ? lq-&gt;exact : lq-&gt;inclusive; </span><br><span class=\"line\">        ctx-&gt;loc_conf = clcf-&gt;loc_conf;</span><br><span class=\"line\"></span><br><span class=\"line\">        rv = module-&gt;merge_loc_conf(cf, loc_conf[ctx_index],</span><br><span class=\"line\">                                    clcf-&gt;loc_conf[ctx_index]); <span class=\"comment\">//loc_conf代表server下location配置，clcf-&gt;loc_conf代表每个location的配置</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (rv != NGX_CONF_OK) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> rv;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        rv = ngx_http_merge_locations(cf, clcf-&gt;locations, clcf-&gt;loc_conf,</span><br><span class=\"line\">                                      module, ctx_index);        <span class=\"comment\">//递归嵌套location</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (rv != NGX_CONF_OK) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> rv;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n\n<p>感谢作者分享，原文地址：<br><a href=\"http://blog.chinaunix.net/uid-27767798-id-3757684.html\">http://blog.chinaunix.net/uid-27767798-id-3757684.html</a></p>\n","text":"nginx解析配置文件，将解析出来得配置存放在ngx_cycle_s的conf_ctx中，conf_ctx是个四级指针，因为保存这些配置需要context，而这些context是有层级关系，最终的配置结构如图： 图片：27767798_1370416906jegE.png htt...","link":"","photos":[],"count_time":{"symbolsCount":"4.6k","symbolsTime":"4 mins."},"categories":[{"name":"topic","slug":"topic","count":308,"path":"api/categories/topic.json"}],"tags":[{"name":"lua","slug":"lua","count":153,"path":"api/tags/lua.json"}],"toc":"","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"OPENRESTY 中的简易HTTP加密","uid":"ceeda26fcc5b2c890a2ed530be0ef341","slug":"old_topic/2016-09-17-136","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T06:15:59.735Z","comments":true,"path":"api/articles/old_topic/2016-09-17-136.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":null,"text":"需求速度快；可逆；容易实现，不存在语言障碍；思考将一个任意内容的字符串作为密钥，从明文中取等长字符串，逐字节将明文和密钥进行异或计算，得到密文。循环处理整个明文，得到完整密文。对密文进行同样的运算即可解密。 算法 123456789101112131415161718192021...","link":"","photos":[],"count_time":{"symbolsCount":"1.5k","symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":308,"path":"api/categories/topic.json"}],"tags":[{"name":"lua","slug":"lua","count":153,"path":"api/tags/lua.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"如何在SAE上架设RPC服务与Openresty的Lua服务通信","uid":"1c16f4ddd5c0935af18ce72063de0291","slug":"old_topic/2016-09-17-123","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T06:15:59.734Z","comments":true,"path":"api/articles/old_topic/2016-09-17-123.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":null,"text":"作者：糖果 有时候我们写的服务可能会部署到很同种不同类型的服务器上，有一些数据，可能不便于存在本地，需要一个数据中心，保存这些数据。 我们要求是这样的： 1．客户端服务要周期性的去服务器上拉取数据。（存在SAE MySQL中）。 2．不使用长连接的方式通信，使用基于HTTP的协议...","link":"","photos":[],"count_time":{"symbolsCount":"4.5k","symbolsTime":"4 mins."},"categories":[{"name":"topic","slug":"topic","count":308,"path":"api/categories/topic.json"}],"tags":[{"name":"lua","slug":"lua","count":153,"path":"api/tags/lua.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}