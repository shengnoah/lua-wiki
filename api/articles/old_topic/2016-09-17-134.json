{"title":"NGINX配置初始化过程","uid":"e77113c5554b3f904d7fab1c518f6770","slug":"old_topic/2016-09-17-134","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T07:45:09.213Z","comments":true,"path":"api/articles/old_topic/2016-09-17-134.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<p>nginx解析配置文件，将解析出来得配置存放在ngx_cycle_s的conf_ctx中，conf_ctx是个四级指针，因为保存这些配置需要context，而这些context是有层级关系，最终的配置结构如图：</p>\n<p>图片：27767798_1370416906jegE.png<br />\n<img src=\"http://orchina-blog.stor.sinaapp.com/1446608142.png\" alt=\"27767798_1370416906jegE.png\" /></p>\n<p>http模块的配置有些复杂，由于server的配置还可以出现在http模块中，同时location的配置可以出现在http模块或者server模块中，所以对于http来说也就是最上面的那个ngx_http_ctx_conf_t有srv_conf和loc_conf是十分有必要的，这两个指针后面的结构体数组保存了在http中的那些server的和location的配置。同样对于每个server来说，不需要单独的main配置了，直接引用main的就可以。每个server必须有自己单独的ngx_http_core_srv_conf_t，来保存当前server块内的配置，这个配置最后会和http的里面的ngx_http_core_srv_conf_t做merge，这个merge是把父server的配置merge到子server配置上面。对于location的配置，在http和server中都可以配置，那么merge的操作需要首先把http的location配置merge到每个server配置中，然后每个server的location配置再和每个location模块中的配置进行merge，这里location配置需要merge两次。举例ngx_http_core_module模块merge的过程：</p>\n<p>图片：27767798_1370417515HdmN.png<br />\n<img src=\"http://orchina-blog.stor.sinaapp.com/1446608052.png\" alt=\"27767798_1370417515HdmN.png\" /></p>\n<p>merge过程是按照module一个一个module的merge，第一步从main配置里面的servers，遍历每个server，把main里面的server配置merge到每个server的配置中，然后把main里面的location配置merge到每个server的location的配置中。第二步再次遍历每个server的locations，把这个server的location的配置merge到具体的每个location中。<br />\n代码：</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">static</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>\n<span class=\"token function\">ngx_http_merge_servers</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ngx_conf_t</span> <span class=\"token operator\">*</span>cf<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ngx_http_core_main_conf_t</span> <span class=\"token operator\">*</span>cmcf<span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">ngx_http_module_t</span> <span class=\"token operator\">*</span>module<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ngx_uint_t</span> ctx_index<span class=\"token punctuation\">)</span> <span class=\"token comment\">//cmcf代表http的main配置</span>\n<span class=\"token punctuation\">&#123;</span> \n    <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>rv<span class=\"token punctuation\">;</span> \n    <span class=\"token class-name\">ngx_uint_t</span> s<span class=\"token punctuation\">;</span> \n    <span class=\"token class-name\">ngx_http_conf_ctx_t</span> <span class=\"token operator\">*</span>ctx<span class=\"token punctuation\">,</span> saved<span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">ngx_http_core_loc_conf_t</span> <span class=\"token operator\">*</span>clcf<span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">ngx_http_core_srv_conf_t</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>cscfp<span class=\"token punctuation\">;</span>\n\n    cscfp <span class=\"token operator\">=</span> cmcf<span class=\"token operator\">-></span>servers<span class=\"token punctuation\">.</span>elts<span class=\"token punctuation\">;</span>             <span class=\"token comment\">//得到servers数组，cmcf是main层的配置</span>\n    ctx <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ngx_http_conf_ctx_t</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> cf<span class=\"token operator\">-></span>ctx<span class=\"token punctuation\">;</span> <span class=\"token comment\">//ctx是main的 ngx_http_conf_ctx_t</span>\n    saved <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>ctx<span class=\"token punctuation\">;</span>\n    rv <span class=\"token operator\">=</span> NGX_CONF_OK<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>s <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> s <span class=\"token operator\">&lt;</span> cmcf<span class=\"token operator\">-></span>servers<span class=\"token punctuation\">.</span>nelts<span class=\"token punctuation\">;</span> s<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">//遍历每个server，把main的配置merge到每个server中</span>\n\n        <span class=\"token comment\">/* merge the server&#123;&#125;s' srv_conf's */</span>\n\n        ctx<span class=\"token operator\">-></span>srv_conf <span class=\"token operator\">=</span> cscfp<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">]</span><span class=\"token operator\">-></span>ctx<span class=\"token operator\">-></span>srv_conf<span class=\"token punctuation\">;</span> \n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>module<span class=\"token operator\">-></span>merge_srv_conf<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>           <span class=\"token comment\">//调用模块的merge server操作</span>\n            rv <span class=\"token operator\">=</span> module<span class=\"token operator\">-></span><span class=\"token function\">merge_srv_conf</span><span class=\"token punctuation\">(</span>cf<span class=\"token punctuation\">,</span> saved<span class=\"token punctuation\">.</span>srv_conf<span class=\"token punctuation\">[</span>ctx_index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                                        cscfp<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">]</span><span class=\"token operator\">-></span>ctx<span class=\"token operator\">-></span>srv_conf<span class=\"token punctuation\">[</span>ctx_index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//save.srv_conf是父server配置，cscf->ctx->srv_conf是当前server的配置，相当于图中的第一步</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rv <span class=\"token operator\">!=</span> NGX_CONF_OK<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">goto</span> failed<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> \n        <span class=\"token punctuation\">&#125;</span> \n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>module<span class=\"token operator\">-></span>merge_loc_conf<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">//调用模块的merge location操作，把父location配置merge到每个server的location配置相当于图中的第一步</span>\n\n            <span class=\"token comment\">/* merge the server&#123;&#125;'s loc_conf */</span>\n\n            ctx<span class=\"token operator\">-></span>loc_conf <span class=\"token operator\">=</span> cscfp<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">]</span><span class=\"token operator\">-></span>ctx<span class=\"token operator\">-></span>loc_conf<span class=\"token punctuation\">;</span>\n\n            rv <span class=\"token operator\">=</span> module<span class=\"token operator\">-></span><span class=\"token function\">merge_loc_conf</span><span class=\"token punctuation\">(</span>cf<span class=\"token punctuation\">,</span> saved<span class=\"token punctuation\">.</span>loc_conf<span class=\"token punctuation\">[</span>ctx_index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                                        cscfp<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">]</span><span class=\"token operator\">-></span>ctx<span class=\"token operator\">-></span>loc_conf<span class=\"token punctuation\">[</span>ctx_index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rv <span class=\"token operator\">!=</span> NGX_CONF_OK<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">goto</span> failed<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> \n\n            <span class=\"token comment\">/* merge the locations&#123;&#125;' loc_conf's */</span>\n            clcf <span class=\"token operator\">=</span> cscfp<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">]</span><span class=\"token operator\">-></span>ctx<span class=\"token operator\">-></span>loc_conf<span class=\"token punctuation\">[</span>ngx_http_core_module<span class=\"token punctuation\">.</span>ctx_index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n            rv <span class=\"token operator\">=</span> <span class=\"token function\">ngx_http_merge_locations</span><span class=\"token punctuation\">(</span>cf<span class=\"token punctuation\">,</span> clcf<span class=\"token operator\">-></span>locations<span class=\"token punctuation\">,</span>\n                                          cscfp<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">]</span><span class=\"token operator\">-></span>ctx<span class=\"token operator\">-></span>loc_conf<span class=\"token punctuation\">,</span>\n                                          module<span class=\"token punctuation\">,</span> ctx_index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//该merge每个server的location配置到每个location的配置中了，相当于图中的第二步</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rv <span class=\"token operator\">!=</span> NGX_CONF_OK<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">goto</span> failed<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>server中location和location的merge过程</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">static</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>\n<span class=\"token function\">ngx_http_merge_locations</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ngx_conf_t</span> <span class=\"token operator\">*</span>cf<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ngx_queue_t</span> <span class=\"token operator\">*</span>locations<span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>loc_conf<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ngx_http_module_t</span> <span class=\"token operator\">*</span>module<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ngx_uint_t</span> ctx_index<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>rv<span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">ngx_queue_t</span> <span class=\"token operator\">*</span>q<span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">ngx_http_conf_ctx_t</span> <span class=\"token operator\">*</span>ctx<span class=\"token punctuation\">,</span> saved<span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">ngx_http_core_loc_conf_t</span> <span class=\"token operator\">*</span>clcf<span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">ngx_http_location_queue_t</span> <span class=\"token operator\">*</span>lq<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>locations <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> NGX_CONF_OK<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    ctx <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ngx_http_conf_ctx_t</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> cf<span class=\"token operator\">-></span>ctx<span class=\"token punctuation\">;</span>\n    saved <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>ctx<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>q <span class=\"token operator\">=</span> <span class=\"token function\">ngx_queue_head</span><span class=\"token punctuation\">(</span>locations<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">//遍历server中的locations队列</span>\n         q <span class=\"token operator\">!=</span> <span class=\"token function\">ngx_queue_sentinel</span><span class=\"token punctuation\">(</span>locations<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         q <span class=\"token operator\">=</span> <span class=\"token function\">ngx_queue_next</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        lq <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ngx_http_location_queue_t</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> q<span class=\"token punctuation\">;</span>\n\n        clcf <span class=\"token operator\">=</span> lq<span class=\"token operator\">-></span>exact <span class=\"token operator\">?</span> lq<span class=\"token operator\">-></span>exact <span class=\"token operator\">:</span> lq<span class=\"token operator\">-></span>inclusive<span class=\"token punctuation\">;</span> \n        ctx<span class=\"token operator\">-></span>loc_conf <span class=\"token operator\">=</span> clcf<span class=\"token operator\">-></span>loc_conf<span class=\"token punctuation\">;</span>\n\n        rv <span class=\"token operator\">=</span> module<span class=\"token operator\">-></span><span class=\"token function\">merge_loc_conf</span><span class=\"token punctuation\">(</span>cf<span class=\"token punctuation\">,</span> loc_conf<span class=\"token punctuation\">[</span>ctx_index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                                    clcf<span class=\"token operator\">-></span>loc_conf<span class=\"token punctuation\">[</span>ctx_index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//loc_conf代表server下location配置，clcf->loc_conf代表每个location的配置</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rv <span class=\"token operator\">!=</span> NGX_CONF_OK<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> rv<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        rv <span class=\"token operator\">=</span> <span class=\"token function\">ngx_http_merge_locations</span><span class=\"token punctuation\">(</span>cf<span class=\"token punctuation\">,</span> clcf<span class=\"token operator\">-></span>locations<span class=\"token punctuation\">,</span> clcf<span class=\"token operator\">-></span>loc_conf<span class=\"token punctuation\">,</span>\n                                      module<span class=\"token punctuation\">,</span> ctx_index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">//递归嵌套location</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rv <span class=\"token operator\">!=</span> NGX_CONF_OK<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> rv<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>感谢作者分享，原文地址：<br />\n<a href=\"http://blog.chinaunix.net/uid-27767798-id-3757684.html\">http://blog.chinaunix.net/uid-27767798-id-3757684.html</a></p>\n","text":"nginx解析配置文件，将解析出来得配置存放在ngx_cycle_s的conf_ctx中，conf_ctx是个四级指针，因为保存这些配置需要context，而这些context是有层级关系，最终的配置结构如图： 图片：27767798_1370416906jegE.png htt...","link":"","photos":[],"count_time":{"symbolsCount":"4.4k","symbolsTime":"4 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua","slug":"lua","count":124,"path":"api/tags/lua.json"}],"toc":"","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"关于 OPENRESTY 的两三事","uid":"a924894efc1b5c05addcec2e153c3f2f","slug":"old_topic/2016-09-17-135","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T07:45:09.235Z","comments":true,"path":"api/articles/old_topic/2016-09-17-135.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"编辑：糖果 基础原理 Nginx 采用的是 master-worker 模型，一个 master 进程管理多个 worker 进程，基本的事件处理都是放在 woker 中，master 负责一些全局初始化，以及对 worker 的管理。 每个 woker 使用一个 LuaVM，当...","link":"","photos":[],"count_time":{"symbolsCount":"10k","symbolsTime":"9 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua","slug":"lua","count":124,"path":"api/tags/lua.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"OPENRESTY 中的简易HTTP加密","uid":"ceeda26fcc5b2c890a2ed530be0ef341","slug":"old_topic/2016-09-17-136","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T07:45:09.165Z","comments":true,"path":"api/articles/old_topic/2016-09-17-136.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"需求 速度快； 可逆； 容易实现，不存在语言障碍； 思考 将一个任意内容的字符串作为密钥，从明文中取等长字符串，逐字节将明文和密钥进行异或计算，得到密文。循环处理整个明文，得到完整密文。对密文进行同样的运算即可解密。 算法 local bit = require(\"bit\") -...","link":"","photos":[],"count_time":{"symbolsCount":"1.4k","symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua","slug":"lua","count":124,"path":"api/tags/lua.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}