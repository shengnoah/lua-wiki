{"title":"不同阶段共享变量","uid":"4b4caaa9aaa4e586708012dea3b735d1","slug":"old_topic/2016-09-17-310","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T07:45:09.155Z","comments":true,"path":"api/articles/old_topic/2016-09-17-310.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":null,"content":"<h1>不同阶段共享变量</h1>\n<p>在 OpenResty 的体系中，可以通过共享内存的方式完成不同工作进程的数据共享，可以通过 Lua 模块方式完成单个进程内不同请求的数据共享。如何完成单个请求内不同阶段的数据共享呢？最典型的例子，估计就是在 log 阶段记录一些请求的特殊变量。</p>\n<p>ngx.ctx 表就是为了解决这类问题而设计的。参考下面例子：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">location</span> /test &#123;</span><br><span class=\"line\">     <span class=\"attribute\">rewrite_by_lua</span> <span class=\"string\">&#x27;</span></span><br><span class=\"line\"><span class=\"string\">         ngx.ctx.foo = 76</span></span><br><span class=\"line\"><span class=\"string\">     &#x27;</span>;</span><br><span class=\"line\">     <span class=\"attribute\">access_by_lua</span> <span class=\"string\">&#x27;</span></span><br><span class=\"line\"><span class=\"string\">         ngx.ctx.foo = ngx.ctx.foo + 3</span></span><br><span class=\"line\"><span class=\"string\">     &#x27;</span>;</span><br><span class=\"line\">     <span class=\"attribute\">content_by_lua</span> <span class=\"string\">&#x27;</span></span><br><span class=\"line\"><span class=\"string\">         ngx.say(ngx.ctx.foo)</span></span><br><span class=\"line\"><span class=\"string\">     &#x27;</span>;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>首先 ngx.ctx 是一个表，所以我们可以对他添加、修改。它用来存储基于请求的 Lua 环境数据，其生存周期与当前请求相同 (类似 Nginx 变量)。它有一个最重要的特性：单个请求内的 rewrite (重写)，access (访问)，和 content (内容) 等各处理阶段是保持一致的。</p>\n<p>额外注意，每个请求，包括子请求，都有一份自己的 ngx.ctx 表。例如：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">location</span> /sub &#123;</span><br><span class=\"line\">    <span class=\"attribute\">content_by_lua</span> <span class=\"string\">&#x27;</span></span><br><span class=\"line\"><span class=\"string\">        ngx.say(&quot;sub pre: &quot;, ngx.ctx.blah)</span></span><br><span class=\"line\"><span class=\"string\">        ngx.ctx.blah = 32</span></span><br><span class=\"line\"><span class=\"string\">        ngx.say(&quot;sub post: &quot;, ngx.ctx.blah)</span></span><br><span class=\"line\"><span class=\"string\">    &#x27;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">location</span> /main &#123;</span><br><span class=\"line\">    <span class=\"attribute\">content_by_lua</span> <span class=\"string\">&#x27;</span></span><br><span class=\"line\"><span class=\"string\">        ngx.ctx.blah = 73</span></span><br><span class=\"line\"><span class=\"string\">        ngx.say(&quot;main pre: &quot;, ngx.ctx.blah)</span></span><br><span class=\"line\"><span class=\"string\">        local res = ngx.location.capture(&quot;/sub&quot;)</span></span><br><span class=\"line\"><span class=\"string\">        ngx.print(res.body)</span></span><br><span class=\"line\"><span class=\"string\">        ngx.say(&quot;main post: &quot;, ngx.ctx.blah)</span></span><br><span class=\"line\"><span class=\"string\">    &#x27;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>访问 GET /main 输出</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">main pre: 73</span><br><span class=\"line\">sub pre: nil</span><br><span class=\"line\">sub post: 32</span><br><span class=\"line\">main post: 73</span><br></pre></td></tr></table></figure>\n<p>任意数据值，包括 Lua 闭包与嵌套表，都可以被插入这个“魔法”表，也允许注册自定义元方法。</p>\n<p>也可以将 ngx.ctx 覆盖为一个新 Lua 表，例如，</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ngx.ctx = &#123; foo = <span class=\"number\">32</span>, bar = <span class=\"number\">54</span> &#125;</span><br></pre></td></tr></table></figure>\n<p><code>ngx.ctx</code> 表查询需要相对昂贵的元方法调用，这比通过用户自己的函数参数直接传递基于请求的数据要慢得多。所以不要为了节约用户函数参数而滥用此 API，因为它可能对性能有明显影响。</p>\n<p>由于 ngx.ctx 保存的是指定请求资源，所以这个变量是不能直接共享给其他请求使用的。</p>\n","text":"不同阶段共享变量 在 OpenResty 的体系中，可以通过共享内存的方式完成不同工作进程的数据共享，可以通过 Lua 模块方式完成单个进程内不同请求的数据共享。如何完成单个请求内不同阶段的数据共享呢？最典型的例子，估计就是在 log 阶段记录一些请求的特殊变量。 ngx.ctx...","link":"","photos":[],"count_time":{"symbolsCount":"1.4k","symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":308,"path":"api/categories/topic.json"}],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\"><span class=\"toc-text\">不同阶段共享变量</span></a></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"contributing.md","uid":"34e290003619093bbec60504e43213d8","slug":"old_topic/2016-09-17-294","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T07:45:09.227Z","comments":true,"path":"api/articles/old_topic/2016-09-17-294.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":null,"text":" category: Guides redirect_from: - /docs/v0.4.0/guides/contributing/ - /docs/latest/guides/contributing/ title: “参与开发” sort_title: “5” 如何做？ ...","link":"","photos":[],"count_time":{"symbolsCount":500,"symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":308,"path":"api/categories/topic.json"}],"tags":[],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"与其他 location 配合","uid":"66c1d79a932fd4e754d2057db394f613","slug":"old_topic/2016-09-17-311","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T07:45:09.179Z","comments":true,"path":"api/articles/old_topic/2016-09-17-311.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":[],"text":"与其他 location 配合 nginx 世界的 location 是异常强大的，毕竟 nginx 的主要应用场景是在负载均衡、API server，在不同 server、location 之间跳转更是家常便饭。利用不同 location 的功能组合，我们可以完成内部调用、流水...","link":"","photos":[],"count_time":{"symbolsCount":"5.1k","symbolsTime":"5 mins."},"categories":[{"name":"topic","slug":"topic","count":308,"path":"api/categories/topic.json"}],"tags":[],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}