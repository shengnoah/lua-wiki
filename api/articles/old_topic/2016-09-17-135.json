{"title":"关于 OPENRESTY 的两三事","uid":"a924894efc1b5c05addcec2e153c3f2f","slug":"old_topic/2016-09-17-135","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T06:15:59.735Z","comments":true,"path":"api/articles/old_topic/2016-09-17-135.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":null,"content":"<p>编辑：糖果</p>\n<p>基础原理<br>Nginx 采用的是 master-worker 模型，一个 master 进程管理多个 worker 进程，基本的事件处理都是放在 woker 中，master 负责一些全局初始化，以及对 worker 的管理。</p>\n<p>每个 woker 使用一个 LuaVM，当请求被分配到 woker 时，将在这个 LuaVM 里创建一个 coroutine。协程之间数据隔离，每个协程具有独立的全局变量 _G。</p>\n<p>关于 LUA_CODE_CACHE<br>关闭 lua_code_cache 时，require 的处理方式是每次都强制重新加载和解析，也就是说，你对代码的任何修改的效果，都将在上传后立即体现。</p>\n<p>开启 lua_code_cache 时，在同一个 LuaVM 中，模块将在首次加载并解析后被缓存，之后再次 require 将直接返回缓存的内容。换句话说，同一 worker 上的所有请求将共享已加载的模块，任意一个请求对于模块属性的修改，都将影响到同一 worker 上的其他请求。</p>\n<p>不应使用模块级的局部变量以及模块属性，存放任何请求级的数据。否则在 lua_code_cache 开启时，会造成请求间相互影响和数据竞争，产生不可预知的异常状况。</p>\n<p>关闭 lua_code_cache 会极大的降低性能，在生产环境中应开启 lua_code_cache 。</p>\n<p>虽然开发环境中关闭 lua_code_cache 会有一些便利性，但我强烈建议开启 lua_code_cache ，与线上保持一致，以减少不必要的差异性问题和额外测试需求。</p>\n<p>开启 lua_code_cache 时，可用 nginx -s reload 或 kill -HUP masterPID 方式热重载代码，无需重启 Nginx。</p>\n<p>关于 PATH 和 CPATH<br>OpenResty 会将它的 lib 目录加入 package.path 和 package.cpath，但你的项目目录需要自己处理。</p>\n<p>在入口文件中，将项目目录加入 package.path 和 package.cpath 是不可取的。因为 lua_code_cache 开启时，package 模块是同一 worker 上所有请求共享的，如果无条件追加，package.path 和 package.cpath 将不断变长，并最终导致内存溢出。</p>\n<p>以下是我采用的解决方案：</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">local</span> ok, app = <span class=\"built_in\">pcall</span>(<span class=\"built_in\">require</span>, <span class=\"string\">&quot;core.app&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> ok <span class=\"keyword\">then</span></span><br><span class=\"line\">    app:run()</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"keyword\">local</span> rootPath = ngx.var.document_root</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> (<span class=\"built_in\">package</span>.<span class=\"built_in\">path</span>:<span class=\"built_in\">find</span>(rootPath)) <span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"built_in\">package</span>.<span class=\"built_in\">path</span> = <span class=\"built_in\">package</span>.<span class=\"built_in\">path</span> .. <span class=\"string\">&quot;;&quot;</span> .. rootPath .. <span class=\"string\">&quot;/?.lua;;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> (<span class=\"built_in\">package</span>.<span class=\"built_in\">cpath</span>:<span class=\"built_in\">find</span>(rootPath)) <span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"built_in\">package</span>.<span class=\"built_in\">cpath</span> = <span class=\"built_in\">package</span>.<span class=\"built_in\">cpath</span> .. <span class=\"string\">&quot;;&quot;</span> .. rootPath .. <span class=\"string\">&quot;/?.so;;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">require</span>(<span class=\"string\">&quot;core.app&quot;</span>):run()</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<p>关于 LUA-RESTY-MYSQL 和 LUA-RESTY-REDIS<br>不应使用模块级的局部变量以及模块属性，存放 resty.mysql 和 resty.redis 实例。否则，在 lua_code_cache 开启时，同一 worker 的所有请求将共享该实例，造成数据竞争问题。建议将 resty.mysql 和 resty.redis 实例存放到 ngx.ctx 中。</p>\n<p>不能在 require 过程中实例化 resty.mysql 和 resty.redis 实例，否则会报错。例如，模块返回一个 function，此 function 直接或间接调用实例化 resty.mysql 和 resty.redis 的代码，将会导致报错。</p>\n<p>在首次查询时实例化是一个比较好的解决方案：</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">local</span> mysql = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;resty.mysql&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">local</span> exception = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;core.exception&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">local</span> dbConf = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;config.mysql&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">local</span> sysConf = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;config.system&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">local</span> MySQL = &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--- 获取连接</span></span><br><span class=\"line\"><span class=\"comment\">--</span></span><br><span class=\"line\"><span class=\"comment\">-- @return resty.mysql MySQL连接</span></span><br><span class=\"line\"><span class=\"comment\">-- @error mysql.socketFailed socket建立失败</span></span><br><span class=\"line\"><span class=\"comment\">-- @error mysql.cantConnect 无法连接数据库</span></span><br><span class=\"line\"><span class=\"comment\">-- @error mysql.queryFailed 数据查询失败</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">MySQL:getClient</span><span class=\"params\">()</span></span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ngx.ctx[MySQL] <span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> ngx.ctx[MySQL]</span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">local</span> client, errmsg = mysql:new()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> client <span class=\"keyword\">then</span></span><br><span class=\"line\">        exception:raise(<span class=\"string\">&quot;mysql.socketFailed&quot;</span>, &#123; message = errmsg &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">    client:set_timeout(<span class=\"number\">3000</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">local</span> options = &#123;</span><br><span class=\"line\">        user = dbConf.USER,</span><br><span class=\"line\">        password = dbConf.PASSWORD,</span><br><span class=\"line\">        database = dbConf.DATABASE</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> dbConf.SOCK <span class=\"keyword\">then</span></span><br><span class=\"line\">        options.<span class=\"built_in\">path</span> = dbConf.SOCK</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        options.host = dbConf.HOST</span><br><span class=\"line\">        options.port = dbConf.PORT</span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">local</span> result, errmsg, errno, sqlstate = client:connect(options)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> result <span class=\"keyword\">then</span></span><br><span class=\"line\">        exception:raise(<span class=\"string\">&quot;mysql.cantConnect&quot;</span>, &#123;</span><br><span class=\"line\">            message = errmsg,</span><br><span class=\"line\">            code = errno,</span><br><span class=\"line\">            state = sqlstate</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">local</span> query = <span class=\"string\">&quot;SET NAMES &quot;</span> .. sysConf.DEFAULT_CHARSET</span><br><span class=\"line\">    <span class=\"keyword\">local</span> result, errmsg, errno, sqlstate = client:query(query)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> result <span class=\"keyword\">then</span></span><br><span class=\"line\">        exception:raise(<span class=\"string\">&quot;mysql.queryFailed&quot;</span>, &#123;</span><br><span class=\"line\">            query = query,</span><br><span class=\"line\">            message = errmsg,</span><br><span class=\"line\">            code = errno,</span><br><span class=\"line\">            state = sqlstate</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">    ngx.ctx[MySQL] = client</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ngx.ctx[MySQL]</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--- 关闭连接</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">MySQL:close</span><span class=\"params\">()</span></span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ngx.ctx[MySQL] <span class=\"keyword\">then</span></span><br><span class=\"line\">        ngx.ctx[MySQL]:set_keepalive(<span class=\"number\">0</span>, <span class=\"number\">100</span>)</span><br><span class=\"line\">        ngx.ctx[MySQL] = <span class=\"literal\">nil</span></span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--- 执行查询</span></span><br><span class=\"line\"><span class=\"comment\">--</span></span><br><span class=\"line\"><span class=\"comment\">-- 有结果数据集时返回结果数据集</span></span><br><span class=\"line\"><span class=\"comment\">-- 无数据数据集时返回查询影响，如：</span></span><br><span class=\"line\"><span class=\"comment\">-- &#123; insert_id = 0, server_status = 2, warning_count = 1, affected_rows = 32, message = nil&#125;</span></span><br><span class=\"line\"><span class=\"comment\">--</span></span><br><span class=\"line\"><span class=\"comment\">-- @param string query 查询语句</span></span><br><span class=\"line\"><span class=\"comment\">-- @return table 查询结果</span></span><br><span class=\"line\"><span class=\"comment\">-- @error mysql.queryFailed 查询失败</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">MySQL:query</span><span class=\"params\">(query)</span></span></span><br><span class=\"line\">    <span class=\"keyword\">local</span> result, errmsg, errno, sqlstate = <span class=\"built_in\">self</span>:getClient():query(query)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> result <span class=\"keyword\">then</span></span><br><span class=\"line\">        exception:raise(<span class=\"string\">&quot;mysql.queryFailed&quot;</span>, &#123;</span><br><span class=\"line\">            query = query,</span><br><span class=\"line\">            message = errmsg,</span><br><span class=\"line\">            code = errno,</span><br><span class=\"line\">            state = sqlstate</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">return</span> MySQL</span><br></pre></td></tr></table></figure>\n\n<p>使用 set_keepalive(max_idle_timeout, pool_size) 替代 close() 将启用连接池特性。set_keepalive 的意思可以理解为，保持连接，并将连接归还到连接池内。这样在下次连接时，会首先会尝试从连接池获取连接，获取不成功才会创建新的连接。在高并发下，连接池能大大的减少连接 MySQL 和 Redis 的次数，明显的提升性能。</p>\n<p>使用模块缓存静态数据<br>利用 lua_code_cache 开启时模块会被缓存的特性，我们可以使用模块来缓存静态数据，其效率接近于将数据缓存在内存中。</p>\n<p>存储方法：</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">local</span> exception = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;core.exception&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">local</span> mysql = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;core.driver.mysql&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--- 实现示例，可以根据项目情况，完善后封装在数据查询层</span></span><br><span class=\"line\"><span class=\"keyword\">local</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">makeCityCache</span><span class=\"params\">()</span></span></span><br><span class=\"line\">    <span class=\"keyword\">local</span> citys = mysql:query(<span class=\"string\">&quot;SELECT * FROM `data_city` WHERE 1&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">local</span> cityData = &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> _, city <span class=\"keyword\">in</span> <span class=\"built_in\">ipairs</span>(citys) <span class=\"keyword\">do</span></span><br><span class=\"line\">        cityData[city.id] = city</span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">package</span>.<span class=\"built_in\">loaded</span>[<span class=\"string\">&quot;cache.city&quot;</span>] = cityData</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<p>读取方法：</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--- 实现示例，可以根据项目情况，完善后封装在数据查询层</span></span><br><span class=\"line\"><span class=\"keyword\">local</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getCityCache</span><span class=\"params\">(id)</span></span></span><br><span class=\"line\">    <span class=\"keyword\">local</span> ok, cacheData = <span class=\"built_in\">pcall</span>(<span class=\"built_in\">require</span>, <span class=\"string\">&quot;cache.city&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ok <span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> cacheData[id]</span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<p>清理方法：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--- 实现示例，可以根据项目情况，完善后封装在数据查询层</span><br><span class=\"line\">local function clearCityCache()</span><br><span class=\"line\">    package.loaded[<span class=\"string\">&quot;cache.city&quot;</span>] = nil</span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure>\n\n<p>关于 OPENRESTY 的两三事<br>火星梅梅 | 5 八月, 2013 | OpenResty, 爱 Coding | 2条评论<br>基础原理<br>Nginx 采用的是 master-worker 模型，一个 master 进程管理多个 worker 进程，基本的事件处理都是放在 woker 中，master 负责一些全局初始化，以及对 worker 的管理。</p>\n<p>每个 woker 使用一个 LuaVM，当请求被分配到 woker 时，将在这个 LuaVM 里创建一个 coroutine。协程之间数据隔离，每个协程具有独立的全局变量 _G。</p>\n<p>关于 LUA_CODE_CACHE<br>关闭 lua_code_cache 时，require 的处理方式是每次都强制重新加载和解析，也就是说，你对代码的任何修改的效果，都将在上传后立即体现。</p>\n<p>开启 lua_code_cache 时，在同一个 LuaVM 中，模块将在首次加载并解析后被缓存，之后再次 require 将直接返回缓存的内容。换句话说，同一 worker 上的所有请求将共享已加载的模块，任意一个请求对于模块属性的修改，都将影响到同一 worker 上的其他请求。</p>\n<p>不应使用模块级的局部变量以及模块属性，存放任何请求级的数据。否则在 lua_code_cache 开启时，会造成请求间相互影响和数据竞争，产生不可预知的异常状况。</p>\n<p>关闭 lua_code_cache 会极大的降低性能，在生产环境中应开启 lua_code_cache 。</p>\n<p>虽然开发环境中关闭 lua_code_cache 会有一些便利性，但我强烈建议开启 lua_code_cache ，与线上保持一致，以减少不必要的差异性问题和额外测试需求。</p>\n<p>开启 lua_code_cache 时，可用 nginx -s reload 或 kill -HUP masterPID 方式热重载代码，无需重启 Nginx。</p>\n<p>关于 PATH 和 CPATH<br>OpenResty 会将它的 lib 目录加入 package.path 和 package.cpath，但你的项目目录需要自己处理。</p>\n<p>在入口文件中，将项目目录加入 package.path 和 package.cpath 是不可取的。因为 lua_code_cache 开启时，package 模块是同一 worker 上所有请求共享的，如果无条件追加，package.path 和 package.cpath 将不断变长，并最终导致内存溢出。</p>\n<p>以下是我采用的解决方案：</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">local</span> ok, app = <span class=\"built_in\">pcall</span>(<span class=\"built_in\">require</span>, <span class=\"string\">&quot;core.app&quot;</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">if</span> ok <span class=\"keyword\">then</span></span><br><span class=\"line\">    app:run()</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"keyword\">local</span> rootPath = ngx.var.document_root</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> (<span class=\"built_in\">package</span>.<span class=\"built_in\">path</span>:<span class=\"built_in\">find</span>(rootPath)) <span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"built_in\">package</span>.<span class=\"built_in\">path</span> = <span class=\"built_in\">package</span>.<span class=\"built_in\">path</span> .. <span class=\"string\">&quot;;&quot;</span> .. rootPath .. <span class=\"string\">&quot;/?.lua;;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> (<span class=\"built_in\">package</span>.<span class=\"built_in\">cpath</span>:<span class=\"built_in\">find</span>(rootPath)) <span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"built_in\">package</span>.<span class=\"built_in\">cpath</span> = <span class=\"built_in\">package</span>.<span class=\"built_in\">cpath</span> .. <span class=\"string\">&quot;;&quot;</span> .. rootPath .. <span class=\"string\">&quot;/?.so;;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"built_in\">require</span>(<span class=\"string\">&quot;core.app&quot;</span>):run()</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<p>关于 LUA-RESTY-MYSQL 和 LUA-RESTY-REDIS<br>不应使用模块级的局部变量以及模块属性，存放 resty.mysql 和 resty.redis 实例。否则，在 lua_code_cache 开启时，同一 worker 的所有请求将共享该实例，造成数据竞争问题。建议将 resty.mysql 和 resty.redis 实例存放到 ngx.ctx 中。</p>\n<p>不能在 require 过程中实例化 resty.mysql 和 resty.redis 实例，否则会报错。例如，模块返回一个 function，此 function 直接或间接调用实例化 resty.mysql 和 resty.redis 的代码，将会导致报错。</p>\n<p>在首次查询时实例化是一个比较好的解决方案：</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">local</span> mysql = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;resty.mysql&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">local</span> exception = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;core.exception&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">local</span> dbConf = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;config.mysql&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">local</span> sysConf = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;config.system&quot;</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">local</span> MySQL = &#123;&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">--- 获取连接</span></span><br><span class=\"line\"><span class=\"comment\">--</span></span><br><span class=\"line\"><span class=\"comment\">-- @return resty.mysql MySQL连接</span></span><br><span class=\"line\"><span class=\"comment\">-- @error mysql.socketFailed socket建立失败</span></span><br><span class=\"line\"><span class=\"comment\">-- @error mysql.cantConnect 无法连接数据库</span></span><br><span class=\"line\"><span class=\"comment\">-- @error mysql.queryFailed 数据查询失败</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">MySQL:getClient</span><span class=\"params\">()</span></span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ngx.ctx[MySQL] <span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> ngx.ctx[MySQL]</span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">local</span> client, errmsg = mysql:new()</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> client <span class=\"keyword\">then</span></span><br><span class=\"line\">        exception:raise(<span class=\"string\">&quot;mysql.socketFailed&quot;</span>, &#123; message = errmsg &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    client:set_timeout(<span class=\"number\">3000</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">local</span> options = &#123;</span><br><span class=\"line\">        user = dbConf.USER,</span><br><span class=\"line\">        password = dbConf.PASSWORD,</span><br><span class=\"line\">        database = dbConf.DATABASE</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">if</span> dbConf.SOCK <span class=\"keyword\">then</span></span><br><span class=\"line\">        options.<span class=\"built_in\">path</span> = dbConf.SOCK</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        options.host = dbConf.HOST</span><br><span class=\"line\">        options.port = dbConf.PORT</span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">local</span> result, errmsg, errno, sqlstate = client:connect(options)</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> result <span class=\"keyword\">then</span></span><br><span class=\"line\">        exception:raise(<span class=\"string\">&quot;mysql.cantConnect&quot;</span>, &#123;</span><br><span class=\"line\">            message = errmsg,</span><br><span class=\"line\">            code = errno,</span><br><span class=\"line\">            state = sqlstate</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">local</span> query = <span class=\"string\">&quot;SET NAMES &quot;</span> .. sysConf.DEFAULT_CHARSET</span><br><span class=\"line\">    <span class=\"keyword\">local</span> result, errmsg, errno, sqlstate = client:query(query)</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> result <span class=\"keyword\">then</span></span><br><span class=\"line\">        exception:raise(<span class=\"string\">&quot;mysql.queryFailed&quot;</span>, &#123;</span><br><span class=\"line\">            query = query,</span><br><span class=\"line\">            message = errmsg,</span><br><span class=\"line\">            code = errno,</span><br><span class=\"line\">            state = sqlstate</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    ngx.ctx[MySQL] = client</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ngx.ctx[MySQL]</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">--- 关闭连接</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">MySQL:close</span><span class=\"params\">()</span></span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ngx.ctx[MySQL] <span class=\"keyword\">then</span></span><br><span class=\"line\">        ngx.ctx[MySQL]:set_keepalive(<span class=\"number\">0</span>, <span class=\"number\">100</span>)</span><br><span class=\"line\">        ngx.ctx[MySQL] = <span class=\"literal\">nil</span></span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">--- 执行查询</span></span><br><span class=\"line\"><span class=\"comment\">--</span></span><br><span class=\"line\"><span class=\"comment\">-- 有结果数据集时返回结果数据集</span></span><br><span class=\"line\"><span class=\"comment\">-- 无数据数据集时返回查询影响，如：</span></span><br><span class=\"line\"><span class=\"comment\">-- &#123; insert_id = 0, server_status = 2, warning_count = 1, affected_rows = 32, message = nil&#125;</span></span><br><span class=\"line\"><span class=\"comment\">--</span></span><br><span class=\"line\"><span class=\"comment\">-- @param string query 查询语句</span></span><br><span class=\"line\"><span class=\"comment\">-- @return table 查询结果</span></span><br><span class=\"line\"><span class=\"comment\">-- @error mysql.queryFailed 查询失败</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">MySQL:query</span><span class=\"params\">(query)</span></span></span><br><span class=\"line\">    <span class=\"keyword\">local</span> result, errmsg, errno, sqlstate = <span class=\"built_in\">self</span>:getClient():query(query)</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> result <span class=\"keyword\">then</span></span><br><span class=\"line\">        exception:raise(<span class=\"string\">&quot;mysql.queryFailed&quot;</span>, &#123;</span><br><span class=\"line\">            query = query,</span><br><span class=\"line\">            message = errmsg,</span><br><span class=\"line\">            code = errno,</span><br><span class=\"line\">            state = sqlstate</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">return</span> MySQL</span><br></pre></td></tr></table></figure>\n\n<p>使用 set_keepalive(max_idle_timeout, pool_size) 替代 close() 将启用连接池特性。set_keepalive 的意思可以理解为，保持连接，并将连接归还到连接池内。这样在下次连接时，会首先会尝试从连接池获取连接，获取不成功才会创建新的连接。在高并发下，连接池能大大的减少连接 MySQL 和 Redis 的次数，明显的提升性能。</p>\n<p>使用模块缓存静态数据<br>利用 lua_code_cache 开启时模块会被缓存的特性，我们可以使用模块来缓存静态数据，其效率接近于将数据缓存在内存中。</p>\n<p>存储方法：</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">local</span> exception = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;core.exception&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">local</span> mysql = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;core.driver.mysql&quot;</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">--- 实现示例，可以根据项目情况，完善后封装在数据查询层</span></span><br><span class=\"line\"><span class=\"keyword\">local</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">makeCityCache</span><span class=\"params\">()</span></span></span><br><span class=\"line\">    <span class=\"keyword\">local</span> citys = mysql:query(<span class=\"string\">&quot;SELECT * FROM `data_city` WHERE 1&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">local</span> cityData = &#123;&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">for</span> _, city <span class=\"keyword\">in</span> <span class=\"built_in\">ipairs</span>(citys) <span class=\"keyword\">do</span></span><br><span class=\"line\">        cityData[city.id] = city</span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"built_in\">package</span>.<span class=\"built_in\">loaded</span>[<span class=\"string\">&quot;cache.city&quot;</span>] = cityData</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>读取方法：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--- 实现示例，可以根据项目情况，完善后封装在数据查询层</span><br><span class=\"line\">local function getCityCache(<span class=\"built_in\">id</span>)</span><br><span class=\"line\">    local ok, cacheData = pcall(require, <span class=\"string\">&quot;cache.city&quot;</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">if</span> ok then</span><br><span class=\"line\">        <span class=\"keyword\">return</span> cacheData[<span class=\"built_in\">id</span>]</span><br><span class=\"line\">    end</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">return</span> nil</span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure>\n<p>清理方法：</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--- 实现示例，可以根据项目情况，完善后封装在数据查询层</span></span><br><span class=\"line\"><span class=\"keyword\">local</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">clearCityCache</span><span class=\"params\">()</span></span></span><br><span class=\"line\">    <span class=\"built_in\">package</span>.<span class=\"built_in\">loaded</span>[<span class=\"string\">&quot;cache.city&quot;</span>] = <span class=\"literal\">nil</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<p>数据存储<br>_G</p>\n<p>请求级 table 变量，生命周期为本次请求，可存储请求级任意 Lua 数据。</p>\n<p>NGX.CTX</p>\n<p>请求级 table 变量，生命周期为本次请求，可存储请求级任意 Lua 数据。</p>\n<p>NGX.SHARED.DICT</p>\n<p>全局级 key-value 字典，使用共享内存实现，实现了读写锁，所有请求均可安全读写。<br>value 只能为布尔值、数字和字符串。Reload Nginx 时不会受影响，只有当 Nginx 被关闭时才会丢失。</p>\n<p>模块属性和模块级局部变量</p>\n<p>worker 级变量，同一 worker 的所有请求共享，没有读写锁，多个请求同时写入时不安全。</p>\n<p>多谢原作者的分享：<br><a href=\"http://zivn.me/?p=157\">http://zivn.me/?p=157</a></p>\n","text":"编辑：糖果 基础原理Nginx 采用的是 master-worker 模型，一个 master 进程管理多个 worker 进程，基本的事件处理都是放在 woker 中，master 负责一些全局初始化，以及对 worker 的管理。 每个 woker 使用一个 LuaVM，当请...","link":"","photos":[],"count_time":{"symbolsCount":"11k","symbolsTime":"10 mins."},"categories":[{"name":"topic","slug":"topic","count":308,"path":"api/categories/topic.json"}],"tags":[{"name":"lua","slug":"lua","count":153,"path":"api/tags/lua.json"}],"toc":"","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"LUA如何遍历返回的JSON数据","uid":"222b2df1d56a571ace7dc7573b0f68fd","slug":"old_topic/2016-09-17-132","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T06:15:59.735Z","comments":true,"path":"api/articles/old_topic/2016-09-17-132.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":null,"text":"作者：糖果 代码如下： 12345678910111213141516171819202122232425function get_json_key(key) if not key then return end local json_var = client:get(key) ...","link":"","photos":[],"count_time":{"symbolsCount":"1.1k","symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":308,"path":"api/categories/topic.json"}],"tags":[{"name":"lua","slug":"lua","count":153,"path":"api/tags/lua.json"},{"name":"lua json","slug":"lua-json","count":1,"path":"api/tags/lua-json.json"},{"name":"lua循环","slug":"lua循环","count":1,"path":"api/tags/lua循环.json"},{"name":"lua循环遍历","slug":"lua循环遍历","count":1,"path":"api/tags/lua循环遍历.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"OPENRESTY 中的简易HTTP加密","uid":"ceeda26fcc5b2c890a2ed530be0ef341","slug":"old_topic/2016-09-17-136","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T06:15:59.735Z","comments":true,"path":"api/articles/old_topic/2016-09-17-136.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":null,"text":"需求速度快；可逆；容易实现，不存在语言障碍；思考将一个任意内容的字符串作为密钥，从明文中取等长字符串，逐字节将明文和密钥进行异或计算，得到密文。循环处理整个明文，得到完整密文。对密文进行同样的运算即可解密。 算法 123456789101112131415161718192021...","link":"","photos":[],"count_time":{"symbolsCount":"1.5k","symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":308,"path":"api/categories/topic.json"}],"tags":[{"name":"lua","slug":"lua","count":153,"path":"api/tags/lua.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}