{"title":"关于 OPENRESTY 的两三事","uid":"a924894efc1b5c05addcec2e153c3f2f","slug":"old_topic/2016-09-17-135","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T07:45:09.235Z","comments":true,"path":"api/articles/old_topic/2016-09-17-135.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<p>编辑：糖果</p>\n<p>基础原理<br />\nNginx 采用的是 master-worker 模型，一个 master 进程管理多个 worker 进程，基本的事件处理都是放在 woker 中，master 负责一些全局初始化，以及对 worker 的管理。</p>\n<p>每个 woker 使用一个 LuaVM，当请求被分配到 woker 时，将在这个 LuaVM 里创建一个 coroutine。协程之间数据隔离，每个协程具有独立的全局变量 _G。</p>\n<p>关于 LUA_CODE_CACHE<br />\n关闭 lua_code_cache 时，require 的处理方式是每次都强制重新加载和解析，也就是说，你对代码的任何修改的效果，都将在上传后立即体现。</p>\n<p>开启 lua_code_cache 时，在同一个 LuaVM 中，模块将在首次加载并解析后被缓存，之后再次 require 将直接返回缓存的内容。换句话说，同一 worker 上的所有请求将共享已加载的模块，任意一个请求对于模块属性的修改，都将影响到同一 worker 上的其他请求。</p>\n<p>不应使用模块级的局部变量以及模块属性，存放任何请求级的数据。否则在 lua_code_cache 开启时，会造成请求间相互影响和数据竞争，产生不可预知的异常状况。</p>\n<p>关闭 lua_code_cache 会极大的降低性能，在生产环境中应开启 lua_code_cache 。</p>\n<p>虽然开发环境中关闭 lua_code_cache 会有一些便利性，但我强烈建议开启 lua_code_cache ，与线上保持一致，以减少不必要的差异性问题和额外测试需求。</p>\n<p>开启 lua_code_cache 时，可用 nginx -s reload 或 kill -HUP masterPID 方式热重载代码，无需重启 Nginx。</p>\n<p>关于 PATH 和 CPATH<br />\nOpenResty 会将它的 lib 目录加入 package.path 和 package.cpath，但你的项目目录需要自己处理。</p>\n<p>在入口文件中，将项目目录加入 package.path 和 package.cpath 是不可取的。因为 lua_code_cache 开启时，package 模块是同一 worker 上所有请求共享的，如果无条件追加，package.path 和 package.cpath 将不断变长，并最终导致内存溢出。</p>\n<p>以下是我采用的解决方案：</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\"><span class=\"token keyword\">local</span> ok<span class=\"token punctuation\">,</span> app <span class=\"token operator\">=</span> <span class=\"token function\">pcall</span><span class=\"token punctuation\">(</span>require<span class=\"token punctuation\">,</span> <span class=\"token string\">\"core.app\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">if</span> ok <span class=\"token keyword\">then</span>\n    app<span class=\"token punctuation\">:</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">else</span>\n    <span class=\"token keyword\">local</span> rootPath <span class=\"token operator\">=</span> ngx<span class=\"token punctuation\">.</span>var<span class=\"token punctuation\">.</span>document_root\n\n    <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> <span class=\"token punctuation\">(</span>package<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">:</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>rootPath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">then</span>\n        package<span class=\"token punctuation\">.</span>path <span class=\"token operator\">=</span> package<span class=\"token punctuation\">.</span>path <span class=\"token operator\">..</span> <span class=\"token string\">\";\"</span> <span class=\"token operator\">..</span> rootPath <span class=\"token operator\">..</span> <span class=\"token string\">\"/?.lua;;\"</span>\n    <span class=\"token keyword\">end</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> <span class=\"token punctuation\">(</span>package<span class=\"token punctuation\">.</span>cpath<span class=\"token punctuation\">:</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>rootPath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">then</span>\n        package<span class=\"token punctuation\">.</span>cpath <span class=\"token operator\">=</span> package<span class=\"token punctuation\">.</span>cpath <span class=\"token operator\">..</span> <span class=\"token string\">\";\"</span> <span class=\"token operator\">..</span> rootPath <span class=\"token operator\">..</span> <span class=\"token string\">\"/?.so;;\"</span>\n    <span class=\"token keyword\">end</span>\n\n    <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"core.app\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>关于 LUA-RESTY-MYSQL 和 LUA-RESTY-REDIS<br />\n不应使用模块级的局部变量以及模块属性，存放 resty.mysql 和 resty.redis 实例。否则，在 lua_code_cache 开启时，同一 worker 的所有请求将共享该实例，造成数据竞争问题。建议将 resty.mysql 和 resty.redis 实例存放到 ngx.ctx 中。</p>\n<p>不能在 require 过程中实例化 resty.mysql 和 resty.redis 实例，否则会报错。例如，模块返回一个 function，此 function 直接或间接调用实例化 resty.mysql 和 resty.redis 的代码，将会导致报错。</p>\n<p>在首次查询时实例化是一个比较好的解决方案：</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\"><span class=\"token keyword\">local</span> mysql <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"resty.mysql\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">local</span> exception <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"core.exception\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">local</span> dbConf <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"config.mysql\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">local</span> sysConf <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"config.system\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">local</span> MySQL <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">--- 获取连接</span>\n<span class=\"token comment\">--</span>\n<span class=\"token comment\">-- @return resty.mysql MySQL连接</span>\n<span class=\"token comment\">-- @error mysql.socketFailed socket建立失败</span>\n<span class=\"token comment\">-- @error mysql.cantConnect 无法连接数据库</span>\n<span class=\"token comment\">-- @error mysql.queryFailed 数据查询失败</span>\n<span class=\"token keyword\">function</span> MySQL<span class=\"token punctuation\">:</span><span class=\"token function\">getClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> ngx<span class=\"token punctuation\">.</span>ctx<span class=\"token punctuation\">[</span>MySQL<span class=\"token punctuation\">]</span> <span class=\"token keyword\">then</span>\n        <span class=\"token keyword\">return</span> ngx<span class=\"token punctuation\">.</span>ctx<span class=\"token punctuation\">[</span>MySQL<span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">end</span>\n\n    <span class=\"token keyword\">local</span> client<span class=\"token punctuation\">,</span> errmsg <span class=\"token operator\">=</span> mysql<span class=\"token punctuation\">:</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> client <span class=\"token keyword\">then</span>\n        exception<span class=\"token punctuation\">:</span><span class=\"token function\">raise</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mysql.socketFailed\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> message <span class=\"token operator\">=</span> errmsg <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">end</span>\n\n    client<span class=\"token punctuation\">:</span><span class=\"token function\">set_timeout</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">local</span> options <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n        user <span class=\"token operator\">=</span> dbConf<span class=\"token punctuation\">.</span>USER<span class=\"token punctuation\">,</span>\n        password <span class=\"token operator\">=</span> dbConf<span class=\"token punctuation\">.</span>PASSWORD<span class=\"token punctuation\">,</span>\n        database <span class=\"token operator\">=</span> dbConf<span class=\"token punctuation\">.</span>DATABASE\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">if</span> dbConf<span class=\"token punctuation\">.</span>SOCK <span class=\"token keyword\">then</span>\n        options<span class=\"token punctuation\">.</span>path <span class=\"token operator\">=</span> dbConf<span class=\"token punctuation\">.</span>SOCK\n    <span class=\"token keyword\">else</span>\n        options<span class=\"token punctuation\">.</span>host <span class=\"token operator\">=</span> dbConf<span class=\"token punctuation\">.</span>HOST\n        options<span class=\"token punctuation\">.</span>port <span class=\"token operator\">=</span> dbConf<span class=\"token punctuation\">.</span>PORT\n    <span class=\"token keyword\">end</span>\n\n    <span class=\"token keyword\">local</span> result<span class=\"token punctuation\">,</span> errmsg<span class=\"token punctuation\">,</span> errno<span class=\"token punctuation\">,</span> sqlstate <span class=\"token operator\">=</span> client<span class=\"token punctuation\">:</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> result <span class=\"token keyword\">then</span>\n        exception<span class=\"token punctuation\">:</span><span class=\"token function\">raise</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mysql.cantConnect\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>\n            message <span class=\"token operator\">=</span> errmsg<span class=\"token punctuation\">,</span>\n            code <span class=\"token operator\">=</span> errno<span class=\"token punctuation\">,</span>\n            state <span class=\"token operator\">=</span> sqlstate\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">end</span>\n\n    <span class=\"token keyword\">local</span> query <span class=\"token operator\">=</span> <span class=\"token string\">\"SET NAMES \"</span> <span class=\"token operator\">..</span> sysConf<span class=\"token punctuation\">.</span>DEFAULT_CHARSET\n    <span class=\"token keyword\">local</span> result<span class=\"token punctuation\">,</span> errmsg<span class=\"token punctuation\">,</span> errno<span class=\"token punctuation\">,</span> sqlstate <span class=\"token operator\">=</span> client<span class=\"token punctuation\">:</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> result <span class=\"token keyword\">then</span>\n        exception<span class=\"token punctuation\">:</span><span class=\"token function\">raise</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mysql.queryFailed\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>\n            query <span class=\"token operator\">=</span> query<span class=\"token punctuation\">,</span>\n            message <span class=\"token operator\">=</span> errmsg<span class=\"token punctuation\">,</span>\n            code <span class=\"token operator\">=</span> errno<span class=\"token punctuation\">,</span>\n            state <span class=\"token operator\">=</span> sqlstate\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">end</span>\n\n    ngx<span class=\"token punctuation\">.</span>ctx<span class=\"token punctuation\">[</span>MySQL<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> client\n    <span class=\"token keyword\">return</span> ngx<span class=\"token punctuation\">.</span>ctx<span class=\"token punctuation\">[</span>MySQL<span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">end</span>\n\n<span class=\"token comment\">--- 关闭连接</span>\n<span class=\"token keyword\">function</span> MySQL<span class=\"token punctuation\">:</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> ngx<span class=\"token punctuation\">.</span>ctx<span class=\"token punctuation\">[</span>MySQL<span class=\"token punctuation\">]</span> <span class=\"token keyword\">then</span>\n        ngx<span class=\"token punctuation\">.</span>ctx<span class=\"token punctuation\">[</span>MySQL<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span><span class=\"token function\">set_keepalive</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n        ngx<span class=\"token punctuation\">.</span>ctx<span class=\"token punctuation\">[</span>MySQL<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">nil</span>\n    <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span>\n\n<span class=\"token comment\">--- 执行查询</span>\n<span class=\"token comment\">--</span>\n<span class=\"token comment\">-- 有结果数据集时返回结果数据集</span>\n<span class=\"token comment\">-- 无数据数据集时返回查询影响，如：</span>\n<span class=\"token comment\">-- &#123; insert_id = 0, server_status = 2, warning_count = 1, affected_rows = 32, message = nil&#125;</span>\n<span class=\"token comment\">--</span>\n<span class=\"token comment\">-- @param string query 查询语句</span>\n<span class=\"token comment\">-- @return table 查询结果</span>\n<span class=\"token comment\">-- @error mysql.queryFailed 查询失败</span>\n<span class=\"token keyword\">function</span> MySQL<span class=\"token punctuation\">:</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">local</span> result<span class=\"token punctuation\">,</span> errmsg<span class=\"token punctuation\">,</span> errno<span class=\"token punctuation\">,</span> sqlstate <span class=\"token operator\">=</span> self<span class=\"token punctuation\">:</span><span class=\"token function\">getClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> result <span class=\"token keyword\">then</span>\n        exception<span class=\"token punctuation\">:</span><span class=\"token function\">raise</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mysql.queryFailed\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>\n            query <span class=\"token operator\">=</span> query<span class=\"token punctuation\">,</span>\n            message <span class=\"token operator\">=</span> errmsg<span class=\"token punctuation\">,</span>\n            code <span class=\"token operator\">=</span> errno<span class=\"token punctuation\">,</span>\n            state <span class=\"token operator\">=</span> sqlstate\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">end</span>\n\n    <span class=\"token keyword\">return</span> result\n<span class=\"token keyword\">end</span>\n\n<span class=\"token keyword\">return</span> MySQL<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>使用 set_keepalive(max_idle_timeout, pool_size) 替代 close() 将启用连接池特性。set_keepalive 的意思可以理解为，保持连接，并将连接归还到连接池内。这样在下次连接时，会首先会尝试从连接池获取连接，获取不成功才会创建新的连接。在高并发下，连接池能大大的减少连接 MySQL 和 Redis 的次数，明显的提升性能。</p>\n<p>使用模块缓存静态数据<br />\n利用 lua_code_cache 开启时模块会被缓存的特性，我们可以使用模块来缓存静态数据，其效率接近于将数据缓存在内存中。</p>\n<p>存储方法：</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\"><span class=\"token keyword\">local</span> exception <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"core.exception\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">local</span> mysql <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"core.driver.mysql\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">--- 实现示例，可以根据项目情况，完善后封装在数据查询层</span>\n<span class=\"token keyword\">local</span> <span class=\"token keyword\">function</span> <span class=\"token function\">makeCityCache</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">local</span> citys <span class=\"token operator\">=</span> mysql<span class=\"token punctuation\">:</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SELECT * FROM `data_city` WHERE 1\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">local</span> cityData <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">for</span> _<span class=\"token punctuation\">,</span> city <span class=\"token keyword\">in</span> <span class=\"token function\">ipairs</span><span class=\"token punctuation\">(</span>citys<span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>\n        cityData<span class=\"token punctuation\">[</span>city<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> city\n    <span class=\"token keyword\">end</span>\n\n    package<span class=\"token punctuation\">.</span>loaded<span class=\"token punctuation\">[</span><span class=\"token string\">\"cache.city\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> cityData\n<span class=\"token keyword\">end</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>读取方法：</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\"><span class=\"token comment\">--- 实现示例，可以根据项目情况，完善后封装在数据查询层</span>\n<span class=\"token keyword\">local</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getCityCache</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">local</span> ok<span class=\"token punctuation\">,</span> cacheData <span class=\"token operator\">=</span> <span class=\"token function\">pcall</span><span class=\"token punctuation\">(</span>require<span class=\"token punctuation\">,</span> <span class=\"token string\">\"cache.city\"</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">if</span> ok <span class=\"token keyword\">then</span>\n        <span class=\"token keyword\">return</span> cacheData<span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">end</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">nil</span>\n<span class=\"token keyword\">end</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>清理方法：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span> 实现示例，可以根据项目情况，完善后封装在数据查询层\nlocal function clearCityCache<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    package<span class=\"token punctuation\">.</span>loaded<span class=\"token punctuation\">[</span><span class=\"token string\">\"cache.city\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> nil\nend<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>关于 OPENRESTY 的两三事<br />\n火星梅梅 | 5 八月, 2013 | OpenResty, 爱 Coding | 2条评论<br />\n基础原理<br />\nNginx 采用的是 master-worker 模型，一个 master 进程管理多个 worker 进程，基本的事件处理都是放在 woker 中，master 负责一些全局初始化，以及对 worker 的管理。</p>\n<p>每个 woker 使用一个 LuaVM，当请求被分配到 woker 时，将在这个 LuaVM 里创建一个 coroutine。协程之间数据隔离，每个协程具有独立的全局变量 _G。</p>\n<p>关于 LUA_CODE_CACHE<br />\n关闭 lua_code_cache 时，require 的处理方式是每次都强制重新加载和解析，也就是说，你对代码的任何修改的效果，都将在上传后立即体现。</p>\n<p>开启 lua_code_cache 时，在同一个 LuaVM 中，模块将在首次加载并解析后被缓存，之后再次 require 将直接返回缓存的内容。换句话说，同一 worker 上的所有请求将共享已加载的模块，任意一个请求对于模块属性的修改，都将影响到同一 worker 上的其他请求。</p>\n<p>不应使用模块级的局部变量以及模块属性，存放任何请求级的数据。否则在 lua_code_cache 开启时，会造成请求间相互影响和数据竞争，产生不可预知的异常状况。</p>\n<p>关闭 lua_code_cache 会极大的降低性能，在生产环境中应开启 lua_code_cache 。</p>\n<p>虽然开发环境中关闭 lua_code_cache 会有一些便利性，但我强烈建议开启 lua_code_cache ，与线上保持一致，以减少不必要的差异性问题和额外测试需求。</p>\n<p>开启 lua_code_cache 时，可用 nginx -s reload 或 kill -HUP masterPID 方式热重载代码，无需重启 Nginx。</p>\n<p>关于 PATH 和 CPATH<br />\nOpenResty 会将它的 lib 目录加入 package.path 和 package.cpath，但你的项目目录需要自己处理。</p>\n<p>在入口文件中，将项目目录加入 package.path 和 package.cpath 是不可取的。因为 lua_code_cache 开启时，package 模块是同一 worker 上所有请求共享的，如果无条件追加，package.path 和 package.cpath 将不断变长，并最终导致内存溢出。</p>\n<p>以下是我采用的解决方案：</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\"><span class=\"token keyword\">local</span> ok<span class=\"token punctuation\">,</span> app <span class=\"token operator\">=</span> <span class=\"token function\">pcall</span><span class=\"token punctuation\">(</span>require<span class=\"token punctuation\">,</span> <span class=\"token string\">\"core.app\"</span><span class=\"token punctuation\">)</span>\n \n<span class=\"token keyword\">if</span> ok <span class=\"token keyword\">then</span>\n    app<span class=\"token punctuation\">:</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">else</span>\n    <span class=\"token keyword\">local</span> rootPath <span class=\"token operator\">=</span> ngx<span class=\"token punctuation\">.</span>var<span class=\"token punctuation\">.</span>document_root\n \n    <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> <span class=\"token punctuation\">(</span>package<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">:</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>rootPath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">then</span>\n        package<span class=\"token punctuation\">.</span>path <span class=\"token operator\">=</span> package<span class=\"token punctuation\">.</span>path <span class=\"token operator\">..</span> <span class=\"token string\">\";\"</span> <span class=\"token operator\">..</span> rootPath <span class=\"token operator\">..</span> <span class=\"token string\">\"/?.lua;;\"</span>\n    <span class=\"token keyword\">end</span>\n \n    <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> <span class=\"token punctuation\">(</span>package<span class=\"token punctuation\">.</span>cpath<span class=\"token punctuation\">:</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>rootPath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">then</span>\n        package<span class=\"token punctuation\">.</span>cpath <span class=\"token operator\">=</span> package<span class=\"token punctuation\">.</span>cpath <span class=\"token operator\">..</span> <span class=\"token string\">\";\"</span> <span class=\"token operator\">..</span> rootPath <span class=\"token operator\">..</span> <span class=\"token string\">\"/?.so;;\"</span>\n    <span class=\"token keyword\">end</span>\n \n    <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"core.app\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>关于 LUA-RESTY-MYSQL 和 LUA-RESTY-REDIS<br />\n不应使用模块级的局部变量以及模块属性，存放 resty.mysql 和 resty.redis 实例。否则，在 lua_code_cache 开启时，同一 worker 的所有请求将共享该实例，造成数据竞争问题。建议将 resty.mysql 和 resty.redis 实例存放到 ngx.ctx 中。</p>\n<p>不能在 require 过程中实例化 resty.mysql 和 resty.redis 实例，否则会报错。例如，模块返回一个 function，此 function 直接或间接调用实例化 resty.mysql 和 resty.redis 的代码，将会导致报错。</p>\n<p>在首次查询时实例化是一个比较好的解决方案：</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\"><span class=\"token keyword\">local</span> mysql <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"resty.mysql\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">local</span> exception <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"core.exception\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">local</span> dbConf <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"config.mysql\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">local</span> sysConf <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"config.system\"</span><span class=\"token punctuation\">)</span>\n \n<span class=\"token keyword\">local</span> MySQL <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n \n<span class=\"token comment\">--- 获取连接</span>\n<span class=\"token comment\">--</span>\n<span class=\"token comment\">-- @return resty.mysql MySQL连接</span>\n<span class=\"token comment\">-- @error mysql.socketFailed socket建立失败</span>\n<span class=\"token comment\">-- @error mysql.cantConnect 无法连接数据库</span>\n<span class=\"token comment\">-- @error mysql.queryFailed 数据查询失败</span>\n<span class=\"token keyword\">function</span> MySQL<span class=\"token punctuation\">:</span><span class=\"token function\">getClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> ngx<span class=\"token punctuation\">.</span>ctx<span class=\"token punctuation\">[</span>MySQL<span class=\"token punctuation\">]</span> <span class=\"token keyword\">then</span>\n        <span class=\"token keyword\">return</span> ngx<span class=\"token punctuation\">.</span>ctx<span class=\"token punctuation\">[</span>MySQL<span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">end</span>\n \n    <span class=\"token keyword\">local</span> client<span class=\"token punctuation\">,</span> errmsg <span class=\"token operator\">=</span> mysql<span class=\"token punctuation\">:</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n \n    <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> client <span class=\"token keyword\">then</span>\n        exception<span class=\"token punctuation\">:</span><span class=\"token function\">raise</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mysql.socketFailed\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> message <span class=\"token operator\">=</span> errmsg <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">end</span>\n \n    client<span class=\"token punctuation\">:</span><span class=\"token function\">set_timeout</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">)</span>\n \n    <span class=\"token keyword\">local</span> options <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n        user <span class=\"token operator\">=</span> dbConf<span class=\"token punctuation\">.</span>USER<span class=\"token punctuation\">,</span>\n        password <span class=\"token operator\">=</span> dbConf<span class=\"token punctuation\">.</span>PASSWORD<span class=\"token punctuation\">,</span>\n        database <span class=\"token operator\">=</span> dbConf<span class=\"token punctuation\">.</span>DATABASE\n    <span class=\"token punctuation\">&#125;</span>\n \n    <span class=\"token keyword\">if</span> dbConf<span class=\"token punctuation\">.</span>SOCK <span class=\"token keyword\">then</span>\n        options<span class=\"token punctuation\">.</span>path <span class=\"token operator\">=</span> dbConf<span class=\"token punctuation\">.</span>SOCK\n    <span class=\"token keyword\">else</span>\n        options<span class=\"token punctuation\">.</span>host <span class=\"token operator\">=</span> dbConf<span class=\"token punctuation\">.</span>HOST\n        options<span class=\"token punctuation\">.</span>port <span class=\"token operator\">=</span> dbConf<span class=\"token punctuation\">.</span>PORT\n    <span class=\"token keyword\">end</span>\n \n    <span class=\"token keyword\">local</span> result<span class=\"token punctuation\">,</span> errmsg<span class=\"token punctuation\">,</span> errno<span class=\"token punctuation\">,</span> sqlstate <span class=\"token operator\">=</span> client<span class=\"token punctuation\">:</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">)</span>\n \n    <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> result <span class=\"token keyword\">then</span>\n        exception<span class=\"token punctuation\">:</span><span class=\"token function\">raise</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mysql.cantConnect\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>\n            message <span class=\"token operator\">=</span> errmsg<span class=\"token punctuation\">,</span>\n            code <span class=\"token operator\">=</span> errno<span class=\"token punctuation\">,</span>\n            state <span class=\"token operator\">=</span> sqlstate\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">end</span>\n \n    <span class=\"token keyword\">local</span> query <span class=\"token operator\">=</span> <span class=\"token string\">\"SET NAMES \"</span> <span class=\"token operator\">..</span> sysConf<span class=\"token punctuation\">.</span>DEFAULT_CHARSET\n    <span class=\"token keyword\">local</span> result<span class=\"token punctuation\">,</span> errmsg<span class=\"token punctuation\">,</span> errno<span class=\"token punctuation\">,</span> sqlstate <span class=\"token operator\">=</span> client<span class=\"token punctuation\">:</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">)</span>\n \n    <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> result <span class=\"token keyword\">then</span>\n        exception<span class=\"token punctuation\">:</span><span class=\"token function\">raise</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mysql.queryFailed\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>\n            query <span class=\"token operator\">=</span> query<span class=\"token punctuation\">,</span>\n            message <span class=\"token operator\">=</span> errmsg<span class=\"token punctuation\">,</span>\n            code <span class=\"token operator\">=</span> errno<span class=\"token punctuation\">,</span>\n            state <span class=\"token operator\">=</span> sqlstate\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">end</span>\n \n    ngx<span class=\"token punctuation\">.</span>ctx<span class=\"token punctuation\">[</span>MySQL<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> client\n    <span class=\"token keyword\">return</span> ngx<span class=\"token punctuation\">.</span>ctx<span class=\"token punctuation\">[</span>MySQL<span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">end</span>\n \n<span class=\"token comment\">--- 关闭连接</span>\n<span class=\"token keyword\">function</span> MySQL<span class=\"token punctuation\">:</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> ngx<span class=\"token punctuation\">.</span>ctx<span class=\"token punctuation\">[</span>MySQL<span class=\"token punctuation\">]</span> <span class=\"token keyword\">then</span>\n        ngx<span class=\"token punctuation\">.</span>ctx<span class=\"token punctuation\">[</span>MySQL<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span><span class=\"token function\">set_keepalive</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n        ngx<span class=\"token punctuation\">.</span>ctx<span class=\"token punctuation\">[</span>MySQL<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">nil</span>\n    <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span>\n \n<span class=\"token comment\">--- 执行查询</span>\n<span class=\"token comment\">--</span>\n<span class=\"token comment\">-- 有结果数据集时返回结果数据集</span>\n<span class=\"token comment\">-- 无数据数据集时返回查询影响，如：</span>\n<span class=\"token comment\">-- &#123; insert_id = 0, server_status = 2, warning_count = 1, affected_rows = 32, message = nil&#125;</span>\n<span class=\"token comment\">--</span>\n<span class=\"token comment\">-- @param string query 查询语句</span>\n<span class=\"token comment\">-- @return table 查询结果</span>\n<span class=\"token comment\">-- @error mysql.queryFailed 查询失败</span>\n<span class=\"token keyword\">function</span> MySQL<span class=\"token punctuation\">:</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">local</span> result<span class=\"token punctuation\">,</span> errmsg<span class=\"token punctuation\">,</span> errno<span class=\"token punctuation\">,</span> sqlstate <span class=\"token operator\">=</span> self<span class=\"token punctuation\">:</span><span class=\"token function\">getClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">)</span>\n \n    <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> result <span class=\"token keyword\">then</span>\n        exception<span class=\"token punctuation\">:</span><span class=\"token function\">raise</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mysql.queryFailed\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>\n            query <span class=\"token operator\">=</span> query<span class=\"token punctuation\">,</span>\n            message <span class=\"token operator\">=</span> errmsg<span class=\"token punctuation\">,</span>\n            code <span class=\"token operator\">=</span> errno<span class=\"token punctuation\">,</span>\n            state <span class=\"token operator\">=</span> sqlstate\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">end</span>\n \n    <span class=\"token keyword\">return</span> result\n<span class=\"token keyword\">end</span>\n \n<span class=\"token keyword\">return</span> MySQL<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>使用 set_keepalive(max_idle_timeout, pool_size) 替代 close() 将启用连接池特性。set_keepalive 的意思可以理解为，保持连接，并将连接归还到连接池内。这样在下次连接时，会首先会尝试从连接池获取连接，获取不成功才会创建新的连接。在高并发下，连接池能大大的减少连接 MySQL 和 Redis 的次数，明显的提升性能。</p>\n<p>使用模块缓存静态数据<br />\n利用 lua_code_cache 开启时模块会被缓存的特性，我们可以使用模块来缓存静态数据，其效率接近于将数据缓存在内存中。</p>\n<p>存储方法：</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\"><span class=\"token keyword\">local</span> exception <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"core.exception\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">local</span> mysql <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"core.driver.mysql\"</span><span class=\"token punctuation\">)</span>\n \n<span class=\"token comment\">--- 实现示例，可以根据项目情况，完善后封装在数据查询层</span>\n<span class=\"token keyword\">local</span> <span class=\"token keyword\">function</span> <span class=\"token function\">makeCityCache</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">local</span> citys <span class=\"token operator\">=</span> mysql<span class=\"token punctuation\">:</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SELECT * FROM `data_city` WHERE 1\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">local</span> cityData <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n \n    <span class=\"token keyword\">for</span> _<span class=\"token punctuation\">,</span> city <span class=\"token keyword\">in</span> <span class=\"token function\">ipairs</span><span class=\"token punctuation\">(</span>citys<span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>\n        cityData<span class=\"token punctuation\">[</span>city<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> city\n    <span class=\"token keyword\">end</span>\n \n    package<span class=\"token punctuation\">.</span>loaded<span class=\"token punctuation\">[</span><span class=\"token string\">\"cache.city\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> cityData\n<span class=\"token keyword\">end</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>读取方法：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span> 实现示例，可以根据项目情况，完善后封装在数据查询层\nlocal function getCityCache<span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">)</span>\n    local ok<span class=\"token punctuation\">,</span> cacheData <span class=\"token operator\">=</span> pcall<span class=\"token punctuation\">(</span>require<span class=\"token punctuation\">,</span> <span class=\"token string\">\"cache.city\"</span><span class=\"token punctuation\">)</span>\n \n    <span class=\"token keyword\">if</span> ok then\n        <span class=\"token keyword\">return</span> cacheData<span class=\"token punctuation\">[</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">]</span>\n    end\n \n    <span class=\"token keyword\">return</span> nil\nend<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>清理方法：</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\"><span class=\"token comment\">--- 实现示例，可以根据项目情况，完善后封装在数据查询层</span>\n<span class=\"token keyword\">local</span> <span class=\"token keyword\">function</span> <span class=\"token function\">clearCityCache</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    package<span class=\"token punctuation\">.</span>loaded<span class=\"token punctuation\">[</span><span class=\"token string\">\"cache.city\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">nil</span>\n<span class=\"token keyword\">end</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>数据存储<br />\n_G</p>\n<p>请求级 table 变量，生命周期为本次请求，可存储请求级任意 Lua 数据。</p>\n<p>NGX.CTX</p>\n<p>请求级 table 变量，生命周期为本次请求，可存储请求级任意 Lua 数据。</p>\n<p>NGX.SHARED.DICT</p>\n<p>全局级 key-value 字典，使用共享内存实现，实现了读写锁，所有请求均可安全读写。<br />\nvalue 只能为布尔值、数字和字符串。Reload Nginx 时不会受影响，只有当 Nginx 被关闭时才会丢失。</p>\n<p>模块属性和模块级局部变量</p>\n<p>worker 级变量，同一 worker 的所有请求共享，没有读写锁，多个请求同时写入时不安全。</p>\n<p>多谢原作者的分享：<br />\n<a href=\"http://zivn.me/?p=157\">http://zivn.me/?p=157</a></p>\n","text":"编辑：糖果 基础原理 Nginx 采用的是 master-worker 模型，一个 master 进程管理多个 worker 进程，基本的事件处理都是放在 woker 中，master 负责一些全局初始化，以及对 worker 的管理。 每个 woker 使用一个 LuaVM，当...","link":"","photos":[],"count_time":{"symbolsCount":"10k","symbolsTime":"9 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua","slug":"lua","count":124,"path":"api/tags/lua.json"}],"toc":"","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"LUA FAQ","uid":"a7f454cd8b8cc1ba699e660a76d25326","slug":"old_topic/2016-09-17-133","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T07:45:09.179Z","comments":true,"path":"api/articles/old_topic/2016-09-17-133.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"LUA FAQ Lua判断空表的正确姿势 Lua中ipair和pair关键字的区别是什么？ Lua的转义符号“%” Nginx用户权限(文件读写时候应该注意到的问题) 关于 OPENRESTY 的两三事 NGINX配置初始化过程 OPENRESTY 中的简易HTTP加密 ","link":"","photos":[],"count_time":{"symbolsCount":137,"symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua","slug":"lua","count":124,"path":"api/tags/lua.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"NGINX配置初始化过程","uid":"e77113c5554b3f904d7fab1c518f6770","slug":"old_topic/2016-09-17-134","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T07:45:09.213Z","comments":true,"path":"api/articles/old_topic/2016-09-17-134.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"nginx解析配置文件，将解析出来得配置存放在ngx_cycle_s的conf_ctx中，conf_ctx是个四级指针，因为保存这些配置需要context，而这些context是有层级关系，最终的配置结构如图： 图片：27767798_1370416906jegE.png htt...","link":"","photos":[],"count_time":{"symbolsCount":"4.4k","symbolsTime":"4 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua","slug":"lua","count":124,"path":"api/tags/lua.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}