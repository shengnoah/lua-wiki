{"title":"json解析的异常捕获","uid":"759fac4aaf0afc50492499e7963a1c92","slug":"old_topic/2016-09-17-328","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T06:15:59.749Z","comments":true,"path":"api/articles/old_topic/2016-09-17-328.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":null,"content":"<h1 id=\"json解析的异常捕获\"><a href=\"#json解析的异常捕获\" class=\"headerlink\" title=\"json解析的异常捕获\"></a>json解析的异常捕获</h1><p>首先来看最最普通的一个json解析的例子（被解析的json字符串是错误的，缺少一个双引号）：</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- http://www.kyne.com.au/~mark/software/lua-cjson.php</span></span><br><span class=\"line\"><span class=\"comment\">-- version: 2.1 devel</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">local</span> json = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;cjson&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">local</span> str  = <span class=\"string\">[[ &#123;&quot;key:&quot;value&quot;&#125; ]]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">local</span> t    = json.decode(str)</span><br><span class=\"line\">ngx.say(<span class=\"string\">&quot; --&gt; &quot;</span>, <span class=\"built_in\">type</span>(t))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- ... do the other things</span></span><br><span class=\"line\">ngx.say(<span class=\"string\">&quot;all fine&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>代码执行错误日志如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2015/06/27 00:01:42 [error] 2714#0: *25 lua entry thread aborted: runtime error: ...ork/git/github.com/lua-resty-memcached-server/t/test.lua:8: Expected colon but found invalid token at character 9</span><br><span class=\"line\">stack traceback:</span><br><span class=\"line\">coroutine 0:</span><br><span class=\"line\">    [C]: in function &#x27;decode&#x27;</span><br><span class=\"line\">    ...ork/git/github.com/lua-resty-memcached-server/t/test.lua:8: in function &lt;...ork/git/github.com/lua-resty-memcached-server/t/test.lua:1&gt;, client: 127.0.0.1, server: localhost, request: &quot;GET /test HTTP/1.1&quot;, host: &quot;127.0.0.1:8001&quot;</span><br></pre></td></tr></table></figure>\n\n<p>这可不是我们期望的，decode失败，居然500错误直接退了。改良了一下我们的代码：</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">local</span> json = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;cjson&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">json_decode</span><span class=\"params\">( str )</span></span></span><br><span class=\"line\">    <span class=\"keyword\">local</span> json_value = <span class=\"literal\">nil</span></span><br><span class=\"line\">    <span class=\"built_in\">pcall</span>(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(str)</span></span> json_value = json.decode(str) <span class=\"keyword\">end</span>, str)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> json_value</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<p>如果需要在Lua中处理错误，必须使用函数pcall（protected call）来包装需要执行的代码。<br>pcall接收一个函数和要传递给后者的参数，并执行，执行结果：有错误、无错误；返回值true或者或false, errorinfo。pcall以一种”保护模式”来调用第一个参数，因此pcall可以捕获函数执行中的任何错误。有兴趣的同学，请更多了解下Lua中的异常处理。</p>\n<p>另外，可以使用CJSON 2.1.0，该版本新增一个cjson.safe模块接口，该接口兼容cjson模块，并且在解析错误时不抛出异常，而是返回nil。</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">local</span> json = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;cjson.safe&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">local</span> str  = <span class=\"string\">[[ &#123;&quot;key:&quot;value&quot;&#125; ]]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">local</span> t    = json.decode(str)</span><br><span class=\"line\"><span class=\"keyword\">if</span> t <span class=\"keyword\">then</span></span><br><span class=\"line\">    ngx.say(<span class=\"string\">&quot; --&gt; &quot;</span>, <span class=\"built_in\">type</span>(t))</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>","text":"json解析的异常捕获首先来看最最普通的一个json解析的例子（被解析的json字符串是错误的，缺少一个双引号）： 123456789101112-- http://www.kyne.com.au/~mark/software/lua-cjson.php-- version: 2...","link":"","photos":[],"count_time":{"symbolsCount":"1.6k","symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":308,"path":"api/categories/topic.json"}],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#json%E8%A7%A3%E6%9E%90%E7%9A%84%E5%BC%82%E5%B8%B8%E6%8D%95%E8%8E%B7\"><span class=\"toc-text\">json解析的异常捕获</span></a></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"稀疏数组","uid":"6e867546fc7beccba02bf189db02a81f","slug":"old_topic/2016-09-17-329","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T06:15:59.749Z","comments":true,"path":"api/articles/old_topic/2016-09-17-329.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":null,"text":"稀疏数组请看示例代码（注意data的数组下标）： 12345678910-- http://www.kyne.com.au/~mark/software/lua-cjson.php-- version: 2.1 devellocal json = require(&quot;cj...","link":"","photos":[],"count_time":{"symbolsCount":"1k","symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":308,"path":"api/categories/topic.json"}],"tags":[],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Crontab在SAE中的应用。","uid":"9c523cb4f2eea401eabec06d4f595a71","slug":"old_topic/2016-09-17-33","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T06:15:59.749Z","comments":true,"path":"api/articles/old_topic/2016-09-17-33.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":null,"text":"例行性工作（crontab) 【闲话】 现在是在用蓝牙和手机无限键盘在写这篇博客，测试一下，发现用系统默认的输入法比较痛苦，不知道为什么，光标焦点在手机屏幕上飞来飞去，根本就没有办法正常的进行编辑，换了一个输入法以后，此问题基本上不发生了。 ［问题］什么事crontab? 如果简...","link":"","photos":[],"count_time":{"symbolsCount":391,"symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":308,"path":"api/categories/topic.json"}],"tags":[{"name":"lua","slug":"lua","count":153,"path":"api/tags/lua.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}