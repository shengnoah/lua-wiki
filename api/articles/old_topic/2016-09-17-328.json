{"title":"json解析的异常捕获","uid":"759fac4aaf0afc50492499e7963a1c92","slug":"old_topic/2016-09-17-328","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T07:45:09.193Z","comments":true,"path":"api/articles/old_topic/2016-09-17-328.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<h1 id=\"json解析的异常捕获\"><a class=\"markdownIt-Anchor\" href=\"#json解析的异常捕获\"></a> json解析的异常捕获</h1>\n<p>首先来看最最普通的一个json解析的例子（被解析的json字符串是错误的，缺少一个双引号）：</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\"><span class=\"token comment\">-- http://www.kyne.com.au/~mark/software/lua-cjson.php</span>\n<span class=\"token comment\">-- version: 2.1 devel</span>\n\n<span class=\"token keyword\">local</span> json <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cjson\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">local</span> str  <span class=\"token operator\">=</span> <span class=\"token string\">[[ &#123;\"key:\"value\"&#125; ]]</span>\n\n<span class=\"token keyword\">local</span> t    <span class=\"token operator\">=</span> json<span class=\"token punctuation\">.</span><span class=\"token function\">decode</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span>\nngx<span class=\"token punctuation\">.</span><span class=\"token function\">say</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" --> \"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">type</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token comment\">-- ... do the other things</span>\nngx<span class=\"token punctuation\">.</span><span class=\"token function\">say</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"all fine\"</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>代码执行错误日志如下：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">2015&#x2F;06&#x2F;27 00:01:42 [error] 2714#0: *25 lua entry thread aborted: runtime error: ...ork&#x2F;git&#x2F;github.com&#x2F;lua-resty-memcached-server&#x2F;t&#x2F;test.lua:8: Expected colon but found invalid token at character 9\nstack traceback:\ncoroutine 0:\n    [C]: in function &#39;decode&#39;\n    ...ork&#x2F;git&#x2F;github.com&#x2F;lua-resty-memcached-server&#x2F;t&#x2F;test.lua:8: in function &lt;...ork&#x2F;git&#x2F;github.com&#x2F;lua-resty-memcached-server&#x2F;t&#x2F;test.lua:1&gt;, client: 127.0.0.1, server: localhost, request: &quot;GET &#x2F;test HTTP&#x2F;1.1&quot;, host: &quot;127.0.0.1:8001&quot;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>这可不是我们期望的，decode失败，居然500错误直接退了。改良了一下我们的代码：</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\"><span class=\"token keyword\">local</span> json <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cjson\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">json_decode</span><span class=\"token punctuation\">(</span> str <span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">local</span> json_value <span class=\"token operator\">=</span> <span class=\"token keyword\">nil</span>\n    <span class=\"token function\">pcall</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span> json_value <span class=\"token operator\">=</span> json<span class=\"token punctuation\">.</span><span class=\"token function\">decode</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span> <span class=\"token keyword\">end</span><span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> json_value\n<span class=\"token keyword\">end</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>如果需要在Lua中处理错误，必须使用函数pcall（protected call）来包装需要执行的代码。<br />\npcall接收一个函数和要传递给后者的参数，并执行，执行结果：有错误、无错误；返回值true或者或false, errorinfo。pcall以一种&quot;保护模式&quot;来调用第一个参数，因此pcall可以捕获函数执行中的任何错误。有兴趣的同学，请更多了解下Lua中的异常处理。</p>\n<p>另外，可以使用CJSON 2.1.0，该版本新增一个cjson.safe模块接口，该接口兼容cjson模块，并且在解析错误时不抛出异常，而是返回nil。</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\"><span class=\"token keyword\">local</span> json <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cjson.safe\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">local</span> str  <span class=\"token operator\">=</span> <span class=\"token string\">[[ &#123;\"key:\"value\"&#125; ]]</span>\n\n<span class=\"token keyword\">local</span> t    <span class=\"token operator\">=</span> json<span class=\"token punctuation\">.</span><span class=\"token function\">decode</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">if</span> t <span class=\"token keyword\">then</span>\n    ngx<span class=\"token punctuation\">.</span><span class=\"token function\">say</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" --> \"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">type</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>","text":" json解析的异常捕获 首先来看最最普通的一个json解析的例子（被解析的json字符串是错误的，缺少一个双引号）： -- http://www.kyne.com.au/~mark/software/lua-cjson.php -- version: 2.1 devel loc...","link":"","photos":[],"count_time":{"symbolsCount":"1.6k","symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#json%E8%A7%A3%E6%9E%90%E7%9A%84%E5%BC%82%E5%B8%B8%E6%8D%95%E8%8E%B7\"><span class=\"toc-text\"> json解析的异常捕获</span></a></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"编码为array还是object","uid":"dcced3e4781903088f00b4d841a17520","slug":"old_topic/2016-09-17-326","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T07:45:09.220Z","comments":true,"path":"api/articles/old_topic/2016-09-17-326.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"编码为array还是object 首先大家请看这段源码： -- http://www.kyne.com.au/~mark/software/lua-cjson.php -- version: 2.1 devel local json = require(\"cjson\") ngx....","link":"","photos":[],"count_time":{"symbolsCount":"1.9k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"跨平台的库选择","uid":"9292b5d7db49cf3a15a4dacf7bf55d0e","slug":"old_topic/2016-09-17-327","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T07:45:09.226Z","comments":true,"path":"api/articles/old_topic/2016-09-17-327.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":" 跨平台的库选择 大家看过上面三个json的例子就发现，都是围绕cjson库的。原因也比较简单，就是cjson是默认绑定到openresty上的。很多开发喜欢 windows 系统，可以选择 dkjson（编解码效率没有cjson快，优势是纯Lua，完美跨任何平台）。 并且我们的...","link":"","photos":[],"count_time":{"symbolsCount":706,"symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}