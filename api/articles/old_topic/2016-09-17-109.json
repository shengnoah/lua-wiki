{"title":"Lua中脚本中加载C语言的.SO共享库","uid":"f95942805ad9929705bec3ec56164a8b","slug":"old_topic/2016-09-17-109","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T07:45:09.188Z","comments":true,"path":"api/articles/old_topic/2016-09-17-109.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<p>作者：糖果</p>\n<p>在Lua中，可以使用loadlib的方式直接的加载C语言写的库，如同加载.lua文件一样。C写的模块可以做一些对效率要求相对比较高的模块，或是一些底层操作。下面举例</p>\n<p>说明：</p>\n<p>第一步：创建C模块文件。</p>\n<p>foo.h头文件</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifndef</span> <span class=\"token expression\">foo_h__</span></span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">foot_h__</span></span>\n\n<span class=\"token keyword\">extern</span> <span class=\"token keyword\">void</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span>lua_State<span class=\"token operator\">*</span> L<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>foo.c实现文件</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"lauxlib.h\"</span></span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span>lua_State<span class=\"token operator\">*</span> L<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello, I'm a shared library\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>第二步：创建.o文件。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">gcc -c -Wall -Werror -fpic foo.c -I&#x2F;usr&#x2F;include&#x2F;lua5.1<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>注意一下的是.h文件中包含了&quot;lauxlib.h&quot;文件，所以要在编译的时候加上-I选项，后面追加.h文件的路径。</p>\n<p>第三步：创建.so文件。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">gcc -shared -o libfoo.so foo.o<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>如此操作后，”.so“文件就完成了生成，在使用libfoo.so动态库的时候，有以下几种方式让Lua找到库文件。</p>\n<p>a). 设置LD_LIBRARY_PATH环境变量。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">export LD_LIBRARY_PATH&#x3D;&#x2F;home&#x2F;username&#x2F;foo:$LD_LIBRARY_PATH<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>b). 复制库文件到系统目录。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">sudo cp &#x2F;home&#x2F;coding&#x2F;workspace&#x2F;libfoo.so &#x2F;usr&#x2F;lib\nldconfig <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>用ldconfig更新一下缓冲，然后看是否生效。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">ldconfig -p | grep foo<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>(也可以看一下.so文件是否关联到其他的库。ldd XXX{XXX为非lua文件，可以含有main函数的C程序。}</p>\n<p>c). 把.so文件放到当前目录。</p>\n<p>第四步：在lua中加载.so库。</p>\n<p>test.lua文件。</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">f <span class=\"token operator\">=</span> package<span class=\"token punctuation\">.</span><span class=\"token function\">loadlib</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"libfoo.so\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>以上，就是如何创建.so共享库，然后在Lua加载调用的过程，使用Lua版本是Lua5.15, 开发环境是在coding.net的WEB IDE的terminal终端环境。</p>\n<p>之前so库，是没有传递参数的，下面我们用一个简单传参的例子来说明问题，然后以Makefile的形式编译共享程序。</p>\n<p>首先要定义就是.h文件，定义最常见的接口add, sub。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifndef</span> <span class=\"token expression\">__tangguo_h__</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">__tangguo_h__</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"lua.h\"</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"lualib.h\"</span> </span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"lauxlib.h\"</span></span>\n\n<span class=\"token keyword\">extern</span> <span class=\"token keyword\">int</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>lua_State<span class=\"token operator\">*</span> L<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">extern</span> <span class=\"token keyword\">int</span> <span class=\"token function\">sub</span><span class=\"token punctuation\">(</span>lua_State<span class=\"token operator\">*</span> L<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">static</span> luaL_Reg libtangguo<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"add\"</span><span class=\"token punctuation\">,</span> add<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"sub\"</span><span class=\"token punctuation\">,</span> sub<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">&#123;</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>  \n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span> </span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>luaL_Reg 这个结构体相对很重要，下面是引用这个结构全的原型：</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">luaL_Reg</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>name<span class=\"token punctuation\">;</span>\n  lua_CFunction func<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span> luaL_Reg<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>主要的元素:一个函数名字符串，另外一个是lua_CFunction的函数指针。<br />\n在定义时地函数最后要用两个NULL,作业结构体数据的结尾。</p>\n<blockquote>Type for arrays of functions to be registered byluaL_register.name is the function name and func is a pointer to the function.Any array of luaL_Reg must end with an sentinel entry in which both name and func are NULL.</blockquote> \n<p>lua_CFunction函数指针原型定义，如下：</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">int</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>lua_CFunction<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>lua_State <span class=\"token operator\">*</span>L<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>下面是函数体的实体部分，所有函数的接口定义都是遵循lua_CFunction指针函数的原型定义，形参都是lua_State* L。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"tangguo.h\"</span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">sub</span><span class=\"token punctuation\">(</span>lua_State<span class=\"token operator\">*</span> L<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">double</span> op1 <span class=\"token operator\">=</span> <span class=\"token function\">luaL_checknumber</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">double</span> op2 <span class=\"token operator\">=</span> <span class=\"token function\">luaL_checknumber</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">lua_pushnumber</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span> op1 <span class=\"token operator\">-</span> op2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>lua_State<span class=\"token operator\">*</span> L<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">double</span> op1 <span class=\"token operator\">=</span> <span class=\"token function\">luaL_checknumber</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">double</span> op2 <span class=\"token operator\">=</span> <span class=\"token function\">luaL_checknumber</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">lua_pushnumber</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span> op1 <span class=\"token operator\">+</span> op2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">luaopen_libtangguo</span><span class=\"token punctuation\">(</span>lua_State<span class=\"token operator\">*</span> L<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">luaL_openlibs</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>libName <span class=\"token operator\">=</span> <span class=\"token string\">\"libtangguo\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">luaL_register</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span> libName<span class=\"token punctuation\">,</span> libtangguo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>涉及到lua调用c语言，面对的一个课题是，如何在c函数中取得lua传递的对数，如果将计算结果，返回给lua程序。在这种最常见的add、sub函数例子都数字运算，我们用luaL_checknumber这个函数，原型如下：</p>\n<p>lua_Number luaL_checknumber (lua_State *L, int narg);</p>\n<blockquote>Checks whether the function argument narg is a numberand returns this number.</blockquote> \n<p>检查函数的参数是不是数字，返回这个数字。第一个参数是入参的状态机，第二个参数是lua调用c函数时，形参列表里第几个形参。</p>\n<p>还有一个比较重要的函数，luaopen_libtangguo，这函数是用来注册这此函数。</p>\n<p>luaL_register</p>\n<p>lua_pushnumber</p>\n<p>为了更好的适应编译环境，生成一个简单的Makefile， 需要注意的是LUALIB的定义要与你自己的环境相符。主要的参数是就是-I来指定.h的位置，-L用来定义用了那些库。</p>\n<p>默认的编辑选项是要提定平台。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">make linux<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>Makefile文件如下。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">LUALIB&#x3D;-I&#x2F;usr&#x2F;include&#x2F;lua5.1 -L&#x2F;usr&#x2F;local&#x2F;lib -ldl -lm\n\n.PHONY: all win linux\n\nall:\n        @echo Please do \\&#39;make PLATFROM\\&#39; where PLATFORM is one of these;\n        @echo win linux\n\nwin:\n\nlinux: libtangguo.so\n\nlibtangguo.so : tangguo.c\n        #gcc --shared -Wall -fPIC -O2 $^ -o $@ $(LUALIB)\n        gcc --shared -fPIC -O2 $^ -o $@ $(LUALIB)\n\nclean:\n        rm -f libtangguo.so\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>编译后会在当前目录生成.so文件，我们要以把.so文件复制到/usr/lib下</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">sudo ldconfig<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>我们来测试一下库是否工作，用package.loadlib直接了复对应的函数指钍。</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\"><span class=\"token keyword\">local</span> aadd <span class=\"token operator\">=</span> package<span class=\"token punctuation\">.</span><span class=\"token function\">loadlib</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"libtangguo.so\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"add\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">local</span> asub <span class=\"token operator\">=</span> package<span class=\"token punctuation\">.</span><span class=\"token function\">loadlib</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"libtangguo.so\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"sub\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">local</span> ret <span class=\"token operator\">=</span> <span class=\"token function\">aadd</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">local</span> ret <span class=\"token operator\">=</span> <span class=\"token function\">asub</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>输出的结是：</p>\n<p>3</p>\n<p>6</p>\n<p><strong>后记：</strong><br />\n涉及到lua调用c语言，面对的一个课题是，如何在c函数中取得lua传递的对数，如果将计算结果，返回给lua程序。</p>\n<p><a href=\"https://github.com/shengnoah/c_lua_so\" target=\"_blank\">源码地址：</a></p>\n","text":"作者：糖果 在Lua中，可以使用loadlib的方式直接的加载C语言写的库，如同加载.lua文件一样。C写的模块可以做一些对效率要求相对比较高的模块，或是一些底层操作。下面举例 说明： 第一步：创建C模块文件。 foo.h头文件 #ifndef foo_h__ #define f...","link":"","photos":[],"count_time":{"symbolsCount":"3.8k","symbolsTime":"3 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua","slug":"lua","count":124,"path":"api/tags/lua.json"}],"toc":"","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"有意思的脚本moonscript","uid":"4e932e195ef501e41ad67f12814a88d1","slug":"old_topic/2016-09-17-100","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T07:45:09.211Z","comments":true,"path":"api/articles/old_topic/2016-09-17-100.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"这是一个测试 这又是一个测试 新测试 想看看lua到底有什么web框架，为了找到和openresty有点关系的框架，就找到了lapis，lapis是可以在openresty上跑的，更有意思的是，lapis可以使用moonscript,moonscript是一位叫做leafo的人写...","link":"","photos":[],"count_time":{"symbolsCount":171,"symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua","slug":"lua","count":124,"path":"api/tags/lua.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"如何创建部署WSGI类型的（Django, Tornado, Flask）Python应用","uid":"834dc1c98ae0dfc3f6c8b6dfa350a594","slug":"old_topic/2016-09-17-110","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T07:45:09.207Z","comments":true,"path":"api/articles/old_topic/2016-09-17-110.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"作者：糖果 第一部分：安装必要工具。 1.因为这是部署Python开发环境，所以安装pip可以简化一些软件的安装过程。（PIP对应Lua的luarocks） sudo apt-get install python-pip 安装三个Python框架 sudo pip install...","link":"","photos":[],"count_time":{"symbolsCount":"2k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua","slug":"lua","count":124,"path":"api/tags/lua.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}