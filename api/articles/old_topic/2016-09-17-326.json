{"title":"编码为array还是object","uid":"dcced3e4781903088f00b4d841a17520","slug":"old_topic/2016-09-17-326","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T07:45:09.220Z","comments":true,"path":"api/articles/old_topic/2016-09-17-326.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<p>编码为array还是object</p>\n<p>首先大家请看这段源码：</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\"><span class=\"token comment\">-- http://www.kyne.com.au/~mark/software/lua-cjson.php</span>\n<span class=\"token comment\">-- version: 2.1 devel</span>\n\n<span class=\"token keyword\">local</span> json <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cjson\"</span><span class=\"token punctuation\">)</span>\nngx<span class=\"token punctuation\">.</span><span class=\"token function\">say</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"value --> \"</span><span class=\"token punctuation\">,</span> json<span class=\"token punctuation\">.</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>dogs<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>输出结果</p>\n<blockquote>\n<p>value --&gt; {“dogs”:{}}</p>\n</blockquote>\n<p>注意看下encode后key的值类型，“{}” 代表key的值是个object，“[]” 则代表key的值是个数组。对于强类型语言(c/c++, java等)，这时候就有点不爽。因为类型不是他期望的要做容错。对于Lua本身，是把数组和字典融合到一起了，所以他是无法区分空数组和空字典的。</p>\n<p>参考openresty-cjson中额外贴出测试案例，我们就很容易找到思路了。</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">\n<span class=\"token comment\">-- 内容节选lua-cjson-2.1.0.2/tests/agentzh.t</span>\n<span class=\"token operator\">==</span><span class=\"token operator\">=</span> TEST <span class=\"token number\">1</span><span class=\"token punctuation\">:</span> empty tables as objects\n<span class=\"token comment\">--- lua</span>\n<span class=\"token keyword\">local</span> cjson <span class=\"token operator\">=</span> require <span class=\"token string\">\"cjson\"</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>cjson<span class=\"token punctuation\">.</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>cjson<span class=\"token punctuation\">.</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>dogs <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">--- out</span>\n<span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"dogs\"</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span>\n\n\n<span class=\"token operator\">==</span><span class=\"token operator\">=</span> TEST <span class=\"token number\">2</span><span class=\"token punctuation\">:</span> empty tables as arrays\n<span class=\"token comment\">--- lua</span>\n<span class=\"token keyword\">local</span> cjson <span class=\"token operator\">=</span> require <span class=\"token string\">\"cjson\"</span>\ncjson<span class=\"token punctuation\">.</span><span class=\"token function\">encode_empty_table_as_object</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">false</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>cjson<span class=\"token punctuation\">.</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>cjson<span class=\"token punctuation\">.</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>dogs <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">--- out</span>\n<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"dogs\"</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>综合本章节提到的各种问题，我们可以封装一个json encode的示例函数：</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\"><span class=\"token keyword\">function</span> <span class=\"token function\">json_encode</span><span class=\"token punctuation\">(</span> data<span class=\"token punctuation\">,</span> empty_table_as_object <span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">--Lua的数据类型里面，array和dict是同一个东西。对应到json encode的时候，就会有不同的判断</span>\n  <span class=\"token comment\">--对于linux，我们用的是cjson库：A Lua table with only positive integer keys of type number will be encoded as a JSON array. All other tables will be encoded as a JSON object.</span>\n  <span class=\"token comment\">--cjson对于空的table，就会被处理为object，也就是&#123;&#125;</span>\n  <span class=\"token comment\">--dkjson默认对空table会处理为array，也就是[]</span>\n  <span class=\"token comment\">--处理方法：对于cjson，使用encode_empty_table_as_object这个方法。文档里面没有，看源码</span>\n  <span class=\"token comment\">--对于dkjson，需要设置meta信息。local a= &#123;&#125;；a.s = &#123;&#125;;a.b='中文';setmetatable(a.s,  &#123; __jsontype = 'object' &#125;);ngx.say(comm.json_encode(a))</span>\n\n    <span class=\"token keyword\">local</span> json_value <span class=\"token operator\">=</span> <span class=\"token keyword\">nil</span>\n    <span class=\"token keyword\">if</span> json<span class=\"token punctuation\">.</span>encode_empty_table_as_object <span class=\"token keyword\">then</span>\n        json<span class=\"token punctuation\">.</span><span class=\"token function\">encode_empty_table_as_object</span><span class=\"token punctuation\">(</span>empty_table_as_object <span class=\"token keyword\">or</span> <span class=\"token keyword\">false</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">-- 空的table默认为array</span>\n    <span class=\"token keyword\">end</span>\n    <span class=\"token keyword\">if</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ffi\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>os <span class=\"token operator\">~=</span> <span class=\"token string\">\"Windows\"</span> <span class=\"token keyword\">then</span>\n        json<span class=\"token punctuation\">.</span><span class=\"token function\">encode_sparse_array</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">true</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">end</span>\n    <span class=\"token function\">pcall</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> json_value <span class=\"token operator\">=</span> json<span class=\"token punctuation\">.</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> <span class=\"token keyword\">end</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> json_value\n<span class=\"token keyword\">end</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>","text":"编码为array还是object 首先大家请看这段源码： -- http://www.kyne.com.au/~mark/software/lua-cjson.php -- version: 2.1 devel local json = require(\"cjson\") ngx....","link":"","photos":[],"count_time":{"symbolsCount":"1.9k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[],"toc":"","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"输出响应体","uid":"9aa16bf014a426133910ab8bd80b8292","slug":"old_topic/2016-09-17-325","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T07:45:09.182Z","comments":true,"path":"api/articles/old_topic/2016-09-17-325.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":" 输出响应体 HTTP响应报文分为三个部分： 响应行 响应头 响应体 对于 HTTP 响应体的输出，在 OpenResty 中调用 ngx.say 或 ngx.print 即可。经过查看官方 wiki ，这两者都是输出响应体，区别是 ngx.say 会对输出响应体多输出一个 \\n...","link":"","photos":[],"count_time":{"symbolsCount":"2.6k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"json解析的异常捕获","uid":"759fac4aaf0afc50492499e7963a1c92","slug":"old_topic/2016-09-17-328","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T07:45:09.193Z","comments":true,"path":"api/articles/old_topic/2016-09-17-328.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":" json解析的异常捕获 首先来看最最普通的一个json解析的例子（被解析的json字符串是错误的，缺少一个双引号）： -- http://www.kyne.com.au/~mark/software/lua-cjson.php -- version: 2.1 devel loc...","link":"","photos":[],"count_time":{"symbolsCount":"1.6k","symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}