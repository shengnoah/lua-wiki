{"title":"LUA调用C语言实现的SO库","uid":"41a2ce410f87ba443188f31dccca5c41","slug":"old_topic/2016-09-17-156","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T07:45:09.180Z","comments":true,"path":"api/articles/old_topic/2016-09-17-156.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<p>作者：糖果</p>\n<p>这篇文章归纳lua5.1的C语言模库so的“标准”写法，代码都是编译通过的，可直接参考使用！</p>\n<p>tangguo.h</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifndef</span> <span class=\"token expression\">__tangguo_h__</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">__tangguo_h__</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"lauxlib.h\"</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"lua.h\"</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"lualib.h\"</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"lauxlib.h\"</span></span>\n\n<span class=\"token keyword\">extern</span> <span class=\"token keyword\">int</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>lua_State<span class=\"token operator\">*</span> L<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">extern</span> <span class=\"token keyword\">int</span> <span class=\"token function\">sub</span><span class=\"token punctuation\">(</span>lua_State<span class=\"token operator\">*</span> L<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">extern</span> <span class=\"token keyword\">int</span> <span class=\"token function\">luaopen_libtangguo</span><span class=\"token punctuation\">(</span>lua_State<span class=\"token operator\">*</span> L<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">static</span> luaL_Reg libtangguo<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"add\"</span><span class=\"token punctuation\">,</span> add<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"sub\"</span><span class=\"token punctuation\">,</span> sub<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">&#123;</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>tangguo.c</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"tangguo.h\"</span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">sub</span><span class=\"token punctuation\">(</span>lua_State<span class=\"token operator\">*</span> L<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">double</span> op1 <span class=\"token operator\">=</span> <span class=\"token function\">luaL_checknumber</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">double</span> op2 <span class=\"token operator\">=</span> <span class=\"token function\">luaL_checknumber</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">lua_pushnumber</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span> op1 <span class=\"token operator\">-</span> op2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>lua_State<span class=\"token operator\">*</span> L<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">double</span> op1 <span class=\"token operator\">=</span> <span class=\"token function\">luaL_checknumber</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">double</span> op2 <span class=\"token operator\">=</span> <span class=\"token function\">luaL_checknumber</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">lua_pushnumber</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span> op1 <span class=\"token operator\">+</span> op2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">luaopen_libtangguo</span><span class=\"token punctuation\">(</span>lua_State<span class=\"token operator\">*</span> L<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">luaL_openlibs</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> libName <span class=\"token operator\">=</span> <span class=\"token string\">\"libtangguo\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">luaL_register</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span> libName<span class=\"token punctuation\">,</span> libtangguo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>Makefile</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">#LUALIB&#x3D;-I&#x2F;usr&#x2F;include&#x2F;lua5.1 -L&#x2F;usr&#x2F;local&#x2F;lib -llua -ldl -lm\nLUALIB&#x3D;-I&#x2F;usr&#x2F;include&#x2F;lua5.1 -L&#x2F;usr&#x2F;local&#x2F;lib -ldl -lm\n\n\n.PHONY: all win linux\n\nall:\n        @echo Please do \\&#39;make PLATFORM\\&#39; where PLATFORM is one of these:\n        @echo win linux\n\nwin:\n\nlinux: libtangguo.so\n\nlibtangguo.so : tangguo.c\n        #gcc --shared -Wall -fPIC -O2 $^ -o$@\n        gcc --shared -Wall -fPIC -O2 $^ -o$@\n\nclean:\n        rm -f libtangguo.so\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>2016.6.7日的时候，重新看了一下这篇文章，发现gcc的一个有开关没加，lib库又多加了一个。追加了$(LUALIB), 去掉了 -llua 编译选项。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;*\n** Try to find a load function for module &#39;modname&#39; at file &#39;filename&#39;.\n** First, change &#39;.&#39; to &#39;_&#39; in &#39;modname&#39;; then, if &#39;modname&#39; has\n** the form X-Y (that is, it has an &quot;ignore mark&quot;), build a function\n** name &quot;luaopen_X&quot; and look for it. (For compatibility, if that\n** fails, it also tries &quot;luaopen_Y&quot;.) If there is no ignore mark,\n** look for a function named &quot;luaopen_modname&quot;.\n*&#x2F;\nstatic int loadfunc (lua_State *L, const char *filename, const char *modname) &#123;\n  const char *openfunc;\n  const char *mark;\n  modname &#x3D; luaL_gsub(L, modname, &quot;.&quot;, LUA_OFSEP);\n  mark &#x3D; strchr(modname, *LUA_IGMARK);\n  if (mark) &#123;\n    int stat;\n    openfunc &#x3D; lua_pushlstring(L, modname, mark - modname);\n    openfunc &#x3D; lua_pushfstring(L, LUA_POF&quot;%s&quot;, openfunc);\n    stat &#x3D; lookforfunc(L, filename, openfunc);\n    if (stat !&#x3D; ERRFUNC) return stat;\n    modname &#x3D; mark + 1;  &#x2F;* else go ahead and try old-style name *&#x2F;\n  &#125;\n  openfunc &#x3D; lua_pushfstring(L, LUA_POF&quot;%s&quot;, modname);\n  return lookforfunc(L, filename, openfunc);\n&#125;\n\nstatic int ll_loadlib (lua_State *L) &#123;\n  const char *path &#x3D; luaL_checkstring(L, 1);\n  const char *init &#x3D; luaL_checkstring(L, 2);\n  int stat &#x3D; lookforfunc(L, path, init);\n  if (stat &#x3D;&#x3D; 0)  &#x2F;* no errors? *&#x2F;\n    return 1;  &#x2F;* return the loaded function *&#x2F;\n  else &#123;  &#x2F;* error; error message is on stack top *&#x2F;\n    lua_pushnil(L);\n    lua_insert(L, -2);\n    lua_pushstring(L, (stat &#x3D;&#x3D; ERRLIB) ?  LIB_FAIL : &quot;init&quot;);\n    return 3;  &#x2F;* return nil, error message, and where *&#x2F;\n  &#125;\n&#125;\n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><a href=\"https://github.com/lua/lua/blob/e354c6355e7f48e087678ec49e340ca0696725b1/loadlib.c\">https://github.com/lua/lua/blob/e354c6355e7f48e087678ec49e340ca0696725b1/loadlib.c</a></p>\n<p>作者：糖果<br />\nPS:转载到其它平台请注明作者姓名及原文链接，请勿用于商业用途。</p>\n<p><a href=\"http://www.lua.ren/topic/133/lua-faq\" target=\"_blank\">点击查看Lua FAQ</a></p>\n","text":"作者：糖果 这篇文章归纳lua5.1的C语言模库so的“标准”写法，代码都是编译通过的，可直接参考使用！ tangguo.h #ifndef __tangguo_h__ #define __tangguo_h__ #include \"lauxlib.h\" #include \"lu...","link":"","photos":[],"count_time":{"symbolsCount":"3.5k","symbolsTime":"3 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[],"toc":"","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"CSRF攻击预防的Token生成原理","uid":"2caace3339612aabd4a60ee7889dcc5d","slug":"old_topic/2016-09-17-155","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T07:45:09.221Z","comments":true,"path":"api/articles/old_topic/2016-09-17-155.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"作者：糖果 以往我们讲到CSRF，谈及都是CSRF的攻击原理，这次讲一下预防CSRF，生成Token背后的 加密原理和具体实现例示。 1.Token构成。 从需求功能上来讲，为了防止CSRF工具，token需要具有不重复，另外，还含有特定的功能 信息，比如过期时间戳。 下面的图描...","link":"","photos":[],"count_time":{"symbolsCount":"4.5k","symbolsTime":"4 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Lua动态加载脚本( loadstring )","uid":"9eeeb777591d00c19e4d4fed3011ba33","slug":"old_topic/2016-09-17-158","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T07:45:09.188Z","comments":true,"path":"api/articles/old_topic/2016-09-17-158.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"作者：糖果 下面是代码： local lua_script = [[ local var = 1 print(var) ]] local script = lua_script local tb=assert(loadstring(script))() print(tb[0].t...","link":"","photos":[],"count_time":{"symbolsCount":551,"symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}