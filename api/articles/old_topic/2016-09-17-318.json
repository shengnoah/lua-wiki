{"title":"获取 uri 参数","uid":"d5ff1ed8ad9b9d2c1a73f4d27ebd5027","slug":"old_topic/2016-09-17-318","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T07:45:09.197Z","comments":true,"path":"api/articles/old_topic/2016-09-17-318.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<h1 id=\"获取-uri-参数\"><a class=\"markdownIt-Anchor\" href=\"#获取-uri-参数\"></a> 获取 uri 参数</h1>\n<p>上一章节，主要介绍了一下如何使用不同 location 进行协作，对 location 进行糅合，往往都是要需要参数的二次调整。如何正确获取传递参数、设置参数，就是你的必修课了。本章目的是给出在 OpenResty 的世界中，我们如何正确获取、设置 uri 参数。</p>\n<h3 id=\"获取请求-uri-参数\"><a class=\"markdownIt-Anchor\" href=\"#获取请求-uri-参数\"></a> 获取请求 uri 参数</h3>\n<p>首先看一下官方 API 文档，获取一个 uri 有两个方法：<code>ngx.req.get_uri_args</code>、<code>ngx.req.get_post_args</code>，二者主要的区别是参数来源有区别。</p>\n<p>参考下面例子：</p>\n<pre class=\"line-numbers language-nginx\" data-language=\"nginx\"><code class=\"language-nginx\"><span class=\"token directive\"><span class=\"token keyword\">server</span></span> <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token directive\"><span class=\"token keyword\">listen</span>    <span class=\"token number\">80</span></span><span class=\"token punctuation\">;</span>\n   <span class=\"token directive\"><span class=\"token keyword\">server_name</span>  localhost</span><span class=\"token punctuation\">;</span>\n\n   <span class=\"token directive\"><span class=\"token keyword\">location</span> /print_param</span> <span class=\"token punctuation\">&#123;</span>\n       <span class=\"token directive\"><span class=\"token keyword\">content_by_lua_block</span></span> <span class=\"token punctuation\">&#123;</span>\n           local arg = ngx.req.get_uri_args()\n           for k,v in pairs(arg) do\n               ngx.say(\"[GET ] key:\", k, \" v:\", v)\n           end\n\n           ngx.req.read_body() -- 解析 body 参数之前一定要先读取 body\n           local arg = ngx.req.get_post_args()\n           for k,v in pairs(arg) do\n               ngx.say(\"[POST] key:\", k, \" v:\", v)\n           end\n       <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>输出结果：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">➜  ~  <span class=\"token function\">curl</span> <span class=\"token string\">'127.0.0.1/print_param?a=1&amp;b=2%26'</span> <span class=\"token parameter variable\">-d</span> <span class=\"token string\">'c=3&amp;d=4%26'</span>\n<span class=\"token punctuation\">[</span>GET <span class=\"token punctuation\">]</span> key:b v:2<span class=\"token operator\">&amp;</span>\n<span class=\"token punctuation\">[</span>GET <span class=\"token punctuation\">]</span> key:a v:1\n<span class=\"token punctuation\">[</span>POST<span class=\"token punctuation\">]</span> key:d v:4<span class=\"token operator\">&amp;</span>\n<span class=\"token punctuation\">[</span>POST<span class=\"token punctuation\">]</span> key:c v:3<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>从这个例子中，我们可以很明显看到两个函数 <code>ngx.req.get_uri_args</code>、<code>ngx.req.get_post_args</code> 获取数据来源是有明显区别的，前者来自 uri 请求参数，而后者来自 post 请求内容。</p>\n<h3 id=\"传递请求-uri-参数\"><a class=\"markdownIt-Anchor\" href=\"#传递请求-uri-参数\"></a> 传递请求 uri 参数</h3>\n<p>当我们可以获取到请求参数，自然是需要这些参数来完成业务控制目的。大家都知道，URI 内容传递过程中是需要调用 ngx.encode_args 进行规则转义。</p>\n<p>参看下面例子：</p>\n<pre class=\"line-numbers language-nignx\" data-language=\"nignx\"><code class=\"language-nignx\">location &#x2F;test &#123;\n    content_by_lua_block &#123;\n        local res &#x3D; ngx.location.capture(\n                 &#39;&#x2F;print_param&#39;,\n                 &#123;\n                    method &#x3D; ngx.HTTP_POST,\n                    args &#x3D; ngx.encode_args(&#123;a &#x3D; 1, b &#x3D; &#39;2&amp;&#39;&#125;),\n                    body &#x3D; ngx.encode_args(&#123;c &#x3D; 3, d &#x3D; &#39;4&amp;&#39;&#125;)\n                &#125;\n             )\n        ngx.say(res.body)\n    &#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>输出结果：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">➜  ~  <span class=\"token function\">curl</span> <span class=\"token string\">'127.0.0.1/test'</span>\n<span class=\"token punctuation\">[</span>GET<span class=\"token punctuation\">]</span>  key:b v:2<span class=\"token operator\">&amp;</span>\n<span class=\"token punctuation\">[</span>GET<span class=\"token punctuation\">]</span>  key:a v:1\n<span class=\"token punctuation\">[</span>POST<span class=\"token punctuation\">]</span> key:d v:4<span class=\"token operator\">&amp;</span>\n<span class=\"token punctuation\">[</span>POST<span class=\"token punctuation\">]</span> key:c v:3<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>与我们预期是一样的。</p>\n<p>如果这里不调用<code>ngx.encode_args</code> ，可能就会比较丑了，看下面例子：</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\"><span class=\"token keyword\">local</span> res <span class=\"token operator\">=</span> ngx<span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">.</span><span class=\"token function\">capture</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/print_param'</span><span class=\"token punctuation\">,</span>\n         <span class=\"token punctuation\">&#123;</span>\n            method <span class=\"token operator\">=</span> ngx<span class=\"token punctuation\">.</span>HTTP_POST<span class=\"token punctuation\">,</span>\n            args <span class=\"token operator\">=</span> <span class=\"token string\">'a=1&amp;b=2%26'</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\">-- 注意这里的 %26 ,代表的是 &amp; 字符</span>\n            body <span class=\"token operator\">=</span> <span class=\"token string\">'c=3&amp;d=4%26'</span>\n        <span class=\"token punctuation\">&#125;</span>\n     <span class=\"token punctuation\">)</span>\nngx<span class=\"token punctuation\">.</span><span class=\"token function\">say</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>PS：对于 ngx.location.capture 这里有个小技巧，args 参数可以接受字符串或Lua 表的，这样我们的代码就更加简洁直观。</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\"><span class=\"token keyword\">local</span> res <span class=\"token operator\">=</span> ngx<span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">.</span><span class=\"token function\">capture</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/print_param'</span><span class=\"token punctuation\">,</span>\n         <span class=\"token punctuation\">&#123;</span>\n            method <span class=\"token operator\">=</span> ngx<span class=\"token punctuation\">.</span>HTTP_POST<span class=\"token punctuation\">,</span>\n            args <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> b <span class=\"token operator\">=</span> <span class=\"token string\">'2&amp;'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n            body <span class=\"token operator\">=</span> <span class=\"token string\">'c=3&amp;d=4%26'</span>\n        <span class=\"token punctuation\">&#125;</span>\n     <span class=\"token punctuation\">)</span>\nngx<span class=\"token punctuation\">.</span><span class=\"token function\">say</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>","text":" 获取 uri 参数 上一章节，主要介绍了一下如何使用不同 location 进行协作，对 location 进行糅合，往往都是要需要参数的二次调整。如何正确获取传递参数、设置参数，就是你的必修课了。本章目的是给出在 OpenResty 的世界中，我们如何正确获取、设置 uri ...","link":"","photos":[],"count_time":{"symbolsCount":"2.3k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E8%8E%B7%E5%8F%96-uri-%E5%8F%82%E6%95%B0\"><span class=\"toc-text\"> 获取 uri 参数</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%8E%B7%E5%8F%96%E8%AF%B7%E6%B1%82-uri-%E5%8F%82%E6%95%B0\"><span class=\"toc-text\"> 获取请求 uri 参数</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BC%A0%E9%80%92%E8%AF%B7%E6%B1%82-uri-%E5%8F%82%E6%95%B0\"><span class=\"toc-text\"> 传递请求 uri 参数</span></a></li></ol></li></ol></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"helloworld","uid":"7feb1bc48352a2bd04c7a6d1cf8eb726","slug":"old_topic/2016-09-17-314","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T07:45:09.165Z","comments":true,"path":"api/articles/old_topic/2016-09-17-314.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":" HelloWorld HelloWorld 是我们亘古不变的第一个入门程序。但是 OpenResty 不是一门编程语言，跟其他编程语言的 HelloWorld 不一样，让我们看看都有哪些不一样吧。 创建工作目录 OpenResty 安装之后就有配置文件及相关的目录的，为了工作目...","link":"","photos":[],"count_time":{"symbolsCount":"1.7k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"环境搭建","uid":"4180c84379ce1a0a588121e5cfa4f15f","slug":"old_topic/2016-09-17-319","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T07:45:09.201Z","comments":true,"path":"api/articles/old_topic/2016-09-17-319.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":" 环境搭建 实践的前提是搭建环境，本节的几个小节将介绍在几种常见操作平台上 OpenResty 的安装。 为了降低用户安装门槛，对于不同系统安装，部分章节存在比较大的重复内容。读者只需要选择自己需要的平台并尝试安装即可。除了 windows 版本是以二进制发行，其他平台由于系统自...","link":"","photos":[],"count_time":{"symbolsCount":239,"symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}