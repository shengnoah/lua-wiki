{"title":"获取 uri 参数","uid":"d5ff1ed8ad9b9d2c1a73f4d27ebd5027","slug":"old_topic/2016-09-17-318","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T07:45:09.197Z","comments":true,"path":"api/articles/old_topic/2016-09-17-318.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":null,"content":"<h1>获取 uri 参数</h1>\n<p>上一章节，主要介绍了一下如何使用不同 location 进行协作，对 location 进行糅合，往往都是要需要参数的二次调整。如何正确获取传递参数、设置参数，就是你的必修课了。本章目的是给出在 OpenResty 的世界中，我们如何正确获取、设置 uri 参数。</p>\n<h3 id=\"获取请求-uri-参数\">获取请求 uri 参数</h3>\n<p>首先看一下官方 API 文档，获取一个 uri 有两个方法：<code>ngx.req.get_uri_args</code>、<code>ngx.req.get_post_args</code>，二者主要的区别是参数来源有区别。</p>\n<p>参考下面例子：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">   <span class=\"attribute\">listen</span>    <span class=\"number\">80</span>;</span><br><span class=\"line\">   <span class=\"attribute\">server_name</span>  localhost;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"section\">location</span> /print_param &#123;</span><br><span class=\"line\">       <span class=\"section\">content_by_lua_block</span> &#123;</span><br><span class=\"line\">           <span class=\"attribute\">local</span> arg = ngx.req.get_uri_args()</span><br><span class=\"line\">           for k,v in pairs(arg) do</span><br><span class=\"line\">               ngx.say(<span class=\"string\">&quot;[GET ] key:&quot;</span>, k, <span class=\"string\">&quot; v:&quot;</span>, v)</span><br><span class=\"line\">           end</span><br><span class=\"line\"></span><br><span class=\"line\">           ngx.req.read_body() -- 解析 body 参数之前一定要先读取 body</span><br><span class=\"line\">           local arg = ngx.req.get_post_args()</span><br><span class=\"line\">           for k,v in pairs(arg) do</span><br><span class=\"line\">               ngx.say(<span class=\"string\">&quot;[POST] key:&quot;</span>, k, <span class=\"string\">&quot; v:&quot;</span>, v)</span><br><span class=\"line\">           end</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜  ~  curl &#x27;127.0.0.1/print_param?a=1&amp;b=2%26&#x27; -d &#x27;c=3&amp;d=4%26&#x27;</span><br><span class=\"line\">[GET ] key:b v:2&amp;</span><br><span class=\"line\">[GET ] key:a v:1</span><br><span class=\"line\">[POST] key:d v:4&amp;</span><br><span class=\"line\">[POST] key:c v:3</span><br></pre></td></tr></table></figure>\n<p>从这个例子中，我们可以很明显看到两个函数 <code>ngx.req.get_uri_args</code>、<code>ngx.req.get_post_args</code> 获取数据来源是有明显区别的，前者来自 uri 请求参数，而后者来自 post 请求内容。</p>\n<h3 id=\"传递请求-uri-参数\">传递请求 uri 参数</h3>\n<p>当我们可以获取到请求参数，自然是需要这些参数来完成业务控制目的。大家都知道，URI 内容传递过程中是需要调用 ngx.encode_args 进行规则转义。</p>\n<p>参看下面例子：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location /test &#123;</span><br><span class=\"line\">    content_by_lua_block &#123;</span><br><span class=\"line\">        local res = ngx.location.capture(</span><br><span class=\"line\">                 &#x27;/print_param&#x27;,</span><br><span class=\"line\">                 &#123;</span><br><span class=\"line\">                    method = ngx.HTTP_POST,</span><br><span class=\"line\">                    args = ngx.encode_args(&#123;a = 1, b = &#x27;2&amp;&#x27;&#125;),</span><br><span class=\"line\">                    body = ngx.encode_args(&#123;c = 3, d = &#x27;4&amp;&#x27;&#125;)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">             )</span><br><span class=\"line\">        ngx.say(res.body)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜  ~  curl &#x27;127.0.0.1/test&#x27;</span><br><span class=\"line\">[GET]  key:b v:2&amp;</span><br><span class=\"line\">[GET]  key:a v:1</span><br><span class=\"line\">[POST] key:d v:4&amp;</span><br><span class=\"line\">[POST] key:c v:3</span><br></pre></td></tr></table></figure>\n<p>与我们预期是一样的。</p>\n<p>如果这里不调用<code>ngx.encode_args</code> ，可能就会比较丑了，看下面例子：</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">local</span> res = ngx.location.capture(<span class=\"string\">&#x27;/print_param&#x27;</span>,</span><br><span class=\"line\">         &#123;</span><br><span class=\"line\">            method = ngx.HTTP_POST,</span><br><span class=\"line\">            args = <span class=\"string\">&#x27;a=1&amp;b=2%26&#x27;</span>,  <span class=\"comment\">-- 注意这里的 %26 ,代表的是 &amp; 字符</span></span><br><span class=\"line\">            body = <span class=\"string\">&#x27;c=3&amp;d=4%26&#x27;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">     )</span><br><span class=\"line\">ngx.say(res.body)</span><br></pre></td></tr></table></figure>\n<p>PS：对于 ngx.location.capture 这里有个小技巧，args 参数可以接受字符串或Lua 表的，这样我们的代码就更加简洁直观。</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">local</span> res = ngx.location.capture(<span class=\"string\">&#x27;/print_param&#x27;</span>,</span><br><span class=\"line\">         &#123;</span><br><span class=\"line\">            method = ngx.HTTP_POST,</span><br><span class=\"line\">            args = &#123;a = <span class=\"number\">1</span>, b = <span class=\"string\">&#x27;2&amp;&#x27;</span>&#125;,</span><br><span class=\"line\">            body = <span class=\"string\">&#x27;c=3&amp;d=4%26&#x27;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">     )</span><br><span class=\"line\">ngx.say(res.body)</span><br></pre></td></tr></table></figure>","text":"获取 uri 参数 上一章节，主要介绍了一下如何使用不同 location 进行协作，对 location 进行糅合，往往都是要需要参数的二次调整。如何正确获取传递参数、设置参数，就是你的必修课了。本章目的是给出在 OpenResty 的世界中，我们如何正确获取、设置 uri 参...","link":"","photos":[],"count_time":{"symbolsCount":"2.4k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":308,"path":"api/categories/topic.json"}],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\"><span class=\"toc-text\">获取 uri 参数</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%8E%B7%E5%8F%96%E8%AF%B7%E6%B1%82-uri-%E5%8F%82%E6%95%B0\"><span class=\"toc-text\">获取请求 uri 参数</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BC%A0%E9%80%92%E8%AF%B7%E6%B1%82-uri-%E5%8F%82%E6%95%B0\"><span class=\"toc-text\">传递请求 uri 参数</span></a></li></ol></li></ol></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"简单API Server框架","uid":"00e0afc1c0a95123fda2364773b4d3e8","slug":"old_topic/2016-09-17-316","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T07:45:09.212Z","comments":true,"path":"api/articles/old_topic/2016-09-17-316.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":null,"text":"简单API Server框架 实现一个最最简单的数学计算：加、减、乘、除，给大家演示如何搭建简单的 API Server。 按照前面几章的写法，先来看看加法、减法示例代码： 12345678910111213141516171819202122232425262728293031...","link":"","photos":[],"count_time":{"symbolsCount":"5k","symbolsTime":"5 mins."},"categories":[{"name":"topic","slug":"topic","count":308,"path":"api/categories/topic.json"}],"tags":[],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"获取请求 body","uid":"61064bea0a023b51846839ff3c2e6c07","slug":"old_topic/2016-09-17-317","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T07:45:09.234Z","comments":true,"path":"api/articles/old_topic/2016-09-17-317.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":null,"text":"获取请求 body 在 Nginx 的典型应用场景中，几乎都是只读取 HTTP 头即可，例如负载均衡、正反向代理等场景。但是对于 API Server 或者 Web Application ，对 body 可以说就比较敏感了。由于 OpenResty 基于 Nginx ，所以天然...","link":"","photos":[],"count_time":{"symbolsCount":"3.1k","symbolsTime":"3 mins."},"categories":[{"name":"topic","slug":"topic","count":308,"path":"api/categories/topic.json"}],"tags":[],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}