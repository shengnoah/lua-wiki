{"title":"Openresty的Lua定时器（计划任务）","uid":"1e5b544e537ce9e8013f8d5d976629a9","slug":"old_topic/2016-09-17-114","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T06:15:59.733Z","comments":true,"path":"api/articles/old_topic/2016-09-17-114.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":null,"content":"<p>在系统中有一类需求是：周期性的执行某些任务，利用定时的timer去实现这种操作。</p>\n<p>Openresty为Lua提供了这种机制实现的API，通过设定timer来完成这种类似计划任务功能。</p>\n<p>下面，就是一个典型的Openresty的timer API的使用例子：</p>\n<p>实现思路是，通过一个timer设定调用一个函数，在函数内部还有一个循环递归的timer调用，调用函数自身，实现周期性的函数执行。</p>\n<p>–此函数的主要的目的是6秒钟的时间，对redis中某Key，进行数值累加。</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">local</span> handler</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">handler</span><span class=\"params\">(premature, params)</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--定时执行一个redis的累加计数操作。</span></span><br><span class=\"line\"></span><br><span class=\"line\">RedisCommon.add()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--递归的timer，重复调用handler函数。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">local</span> ok, err = ngx.timer.at(<span class=\"number\">6</span>, handler, <span class=\"string\">&quot;params-data&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        ngx.<span class=\"built_in\">log</span>(ngx.DEBUG, <span class=\"string\">&quot;ok:&quot;</span>, ok, <span class=\"string\">&quot; err:&quot;</span>, err)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<p>–第一次设定timer，调用hander函数。</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">local</span> ok, err = ngx.timer.at(<span class=\"number\">6</span>, handler, <span class=\"string\">&quot;params-data&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">ngx.<span class=\"built_in\">log</span>(ngx.DEBUG, <span class=\"string\">&quot;ok:&quot;</span>, ok, <span class=\"string\">&quot; err:&quot;</span>, err)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">not</span> ok <span class=\"keyword\">then</span></span><br><span class=\"line\"></span><br><span class=\"line\">        ngx.<span class=\"built_in\">log</span>(ngx.ERR, <span class=\"string\">&quot;err:&quot;</span>, err)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>timer一般用于，定时去服务器上取一些数据，或是定时扫描本地文件是否有变动，根据目地不同功能也不一样。</p>\n<p>作者：糖果</p>\n<p>PS:转载到其它平台请注明作者姓名及原文链接，请勿用于商业用途。</p>\n","text":"在系统中有一类需求是：周期性的执行某些任务，利用定时的timer去实现这种操作。 Openresty为Lua提供了这种机制实现的API，通过设定timer来完成这种类似计划任务功能。 下面，就是一个典型的Openresty的timer API的使用例子： 实现思路是，通过一个ti...","link":"","photos":[],"count_time":{"symbolsCount":824,"symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":308,"path":"api/categories/topic.json"}],"tags":[{"name":"lua","slug":"lua","count":153,"path":"api/tags/lua.json"}],"toc":"","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"《Lua游戏AI开发指南 --- C/C++中调用Lua函数》","uid":"878333f17299242d2af5675db3efb934","slug":"old_topic/2016-09-17-112","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T06:15:59.733Z","comments":true,"path":"api/articles/old_topic/2016-09-17-112.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":[],"text":"C/C++ calling Lua functions The sandbox hooks into the Lua script through three predefined global Lua functions: Sandbox_Initialize, Sandbox...","link":"","photos":[],"count_time":{"symbolsCount":"3.3k","symbolsTime":"3 mins."},"categories":[{"name":"topic","slug":"topic","count":308,"path":"api/categories/topic.json"}],"tags":[{"name":"lua","slug":"lua","count":153,"path":"api/tags/lua.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"LUA与STOMP协议","uid":"9aeff2cf84352e0facabfc6256b648d7","slug":"old_topic/2016-09-17-117","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T06:15:59.734Z","comments":true,"path":"api/articles/old_topic/2016-09-17-117.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":null,"text":"作者：糖果 STOMP协议是一种简单的消息文本协议。协义本身简单明了，用消息头定义和消息体数据传输。 RabbitMQ做为一种队列中间件，提供了STOMP协议的支持，我们可以通过STOMP协议向队列发送消息。下面的例子中，我们将使用LUA程序向RabbitMQ发送消息， 通过Py...","link":"","photos":[],"count_time":{"symbolsCount":"2.5k","symbolsTime":"2 mins."},"categories":[{"name":"topic","slug":"topic","count":308,"path":"api/categories/topic.json"}],"tags":[{"name":"lua","slug":"lua","count":153,"path":"api/tags/lua.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}