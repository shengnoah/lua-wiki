{"title":"如何在Openresty中实现一个REST服务","uid":"6f22cd23969a4d12ca816a42b73ce9e8","slug":"old_topic/2016-09-17-380","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T07:45:09.210Z","comments":true,"path":"api/articles/old_topic/2016-09-17-380.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<p>作者：糖果</p>\n<p>使用Blues框架在Openresty中实现一个REST服务解析和返回JSON数据，并通过curl向openresty服务器端请求rest，采用GET请求方式，提交一个json,然后路由到对应的匿名函数，通过request.params.body直接取得json数据主体，解析成table变量，放回渲染。<br />\n下面：</p>\n<h3 id=\"1-1接口测试\"><a class=\"markdownIt-Anchor\" href=\"#1-1接口测试\"></a> 1-1.接口测试</h3>\n<p>通过CURL调用我们将要实现的REST接口:</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">curl -X GET  http:&#x2F;&#x2F;0.0.0.0&#x2F;blues -d  &#39;&#123;&quot;key&quot;:&quot;value&quot;&#125;&#39;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>在app.lua加入如下函数:</p>\n<h3 id=\"1-2接口实现案a\"><a class=\"markdownIt-Anchor\" href=\"#1-2接口实现案a\"></a> 1-2.接口实现（案A）</h3>\n<p>app.lua</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">app<span class=\"token punctuation\">:</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/blues\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span>id<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">--读取用户请求中的body数据</span>\n    <span class=\"token keyword\">local</span> ret <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">.</span>body\n    \n    <span class=\"token comment\">--调用cjso库</span>\n    <span class=\"token keyword\">local</span> json <span class=\"token operator\">=</span> require <span class=\"token string\">\"cjson\"</span>\n    <span class=\"token keyword\">local</span> util <span class=\"token operator\">=</span> require <span class=\"token string\">\"cjson.util\"</span>\n    \n    <span class=\"token comment\">--对用户请求的数据进入JSON编码， 转成Table变量。</span>\n    <span class=\"token keyword\">local</span> t <span class=\"token operator\">=</span> json<span class=\"token punctuation\">.</span><span class=\"token function\">decode</span><span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">)</span>\n    \n    <span class=\"token comment\">--递归显示JSON结构中的所有数据。</span>\n    ngx<span class=\"token punctuation\">.</span><span class=\"token function\">say</span><span class=\"token punctuation\">(</span>util<span class=\"token punctuation\">.</span><span class=\"token function\">serialise_value</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    \n    <span class=\"token comment\">--返回一个JSON数据结构</span>\n    <span class=\"token keyword\">return</span> ret\n<span class=\"token keyword\">end</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"1-3返回结果\"><a class=\"markdownIt-Anchor\" href=\"#1-3返回结果\"></a> 1-3.返回结果</h3>\n<p>调用结果，如下：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#123;\n  [&quot;key&quot;] &#x3D; &quot;value&quot;\n&#125;\n&#123;&quot;key&quot;:&quot;value&quot;&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"2-1接口实现案b\"><a class=\"markdownIt-Anchor\" href=\"#2-1接口实现案b\"></a> 2-1.接口实现（案B）</h3>\n<p>下面我们去掉多余的JSON遍历部分，直接将用户请求中的JSON数据转成LUA的Table变量，然后<br />\n再把个Table变量，返回为一个JSON进行渲染。</p>\n<p>app.lua</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">app<span class=\"token punctuation\">:</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/blues\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span>id<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">local</span> ret <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">.</span>body\n    <span class=\"token keyword\">local</span> json <span class=\"token operator\">=</span> require <span class=\"token string\">\"cjson\"</span>\n    <span class=\"token keyword\">local</span> t <span class=\"token operator\">=</span> json<span class=\"token punctuation\">.</span><span class=\"token function\">decode</span><span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> t\n<span class=\"token keyword\">end</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"2-2返回结果\"><a class=\"markdownIt-Anchor\" href=\"#2-2返回结果\"></a> 2-2.返回结果</h3>\n<p>调用结果，如下：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#123;&quot;key&quot;:&quot;value&quot;&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"3-1接口实现案c\"><a class=\"markdownIt-Anchor\" href=\"#3-1接口实现案c\"></a> 3-1.接口实现（案c）</h3>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">app<span class=\"token punctuation\">:</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/blues\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span>id<span class=\"token punctuation\">)</span>\n    ngx<span class=\"token punctuation\">.</span><span class=\"token function\">say</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"==============\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">local</span> t <span class=\"token operator\">=</span> utils<span class=\"token punctuation\">:</span><span class=\"token function\">to_json</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> t \n<span class=\"token keyword\">end</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"3-2返回结果\"><a class=\"markdownIt-Anchor\" href=\"#3-2返回结果\"></a> 3-2.返回结果</h3>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;\n&#123;&quot;key&quot;:&quot;value&quot;&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>C方案就是我们将之前的cjson做的json编码工作进行了封装，封装成了一个叫to_json函数来完成这个工作。</p>\n<p>PS:转载到其它平台请注明作者姓名及原文链接，请勿用于商业用途。</p>\n<p><a href=\"http://www.candylab.net\">糖果实验室</a></p>\n<p><a href=\"http://www.candylab.net\">http://www.candylab.net</a></p>\n","text":"作者：糖果 使用Blues框架在Openresty中实现一个REST服务解析和返回JSON数据，并通过curl向openresty服务器端请求rest，采用GET请求方式，提交一个json,然后路由到对应的匿名函数，通过request.params.body直接取得json数据主...","link":"","photos":[],"count_time":{"symbolsCount":"1.6k","symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua","slug":"lua","count":124,"path":"api/tags/lua.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-1%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95\"><span class=\"toc-text\"> 1-1.接口测试</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-2%E6%8E%A5%E5%8F%A3%E5%AE%9E%E7%8E%B0%E6%A1%88a\"><span class=\"toc-text\"> 1-2.接口实现（案A）</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-3%E8%BF%94%E5%9B%9E%E7%BB%93%E6%9E%9C\"><span class=\"toc-text\"> 1-3.返回结果</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-1%E6%8E%A5%E5%8F%A3%E5%AE%9E%E7%8E%B0%E6%A1%88b\"><span class=\"toc-text\"> 2-1.接口实现（案B）</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-2%E8%BF%94%E5%9B%9E%E7%BB%93%E6%9E%9C\"><span class=\"toc-text\"> 2-2.返回结果</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-1%E6%8E%A5%E5%8F%A3%E5%AE%9E%E7%8E%B0%E6%A1%88c\"><span class=\"toc-text\"> 3-1.接口实现（案c）</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-2%E8%BF%94%E5%9B%9E%E7%BB%93%E6%9E%9C\"><span class=\"toc-text\"> 3-2.返回结果</span></a></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"如何读取request的body数据","uid":"805020bcfe4a2b05d104deeb78f27106","slug":"old_topic/2016-09-17-379","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T07:45:09.194Z","comments":true,"path":"api/articles/old_topic/2016-09-17-379.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"作者：糖果 我们通过curl向openresty服务器端请求rest，采用GET请求方式，提交一个json,然后路由到对应的匿名函数，通过request.params.body直接取得json数据主体，解析成table变量，放回渲染。 下面： curl -X GET http:&...","link":"","photos":[],"count_time":{"symbolsCount":780,"symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua","slug":"lua","count":124,"path":"api/tags/lua.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"函数返回的结果是函数的返回的结果不是函数","uid":"3e4806ea54f2e91c20a1148ca6b83f31","slug":"old_topic/2016-09-17-381","date":"2016-09-17T14:50:18.000Z","updated":"2024-03-14T07:45:09.232Z","comments":true,"path":"api/articles/old_topic/2016-09-17-381.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"函数返回的结果是函数的返回的结果不是函数 function read(self) print(\"key:\"..self.key) end enable = function(func) self = &#123;key='value'&#125; local fn = func ...","link":"","photos":[],"count_time":{"symbolsCount":809,"symbolsTime":"1 mins."},"categories":[{"name":"topic","slug":"topic","count":1441,"path":"api/categories/topic.json"}],"tags":[{"name":"lua","slug":"lua","count":124,"path":"api/tags/lua.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}