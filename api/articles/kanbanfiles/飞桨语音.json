{"title":"飞桨语音","uid":"6ee69322158c2a4501bafa2499ab7c23","slug":"kanbanfiles/飞桨语音","date":"2024-03-14T07:45:09.029Z","updated":"2024-03-14T07:45:09.029Z","comments":true,"path":"api/articles/kanbanfiles/飞桨语音.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<p>paddlespeech tts --input &quot;你 好 ， 欢 迎 使 用 百 度 飞 桨 深 度 学 习 框 架 ！ &quot; --output testout.wav</p>\n<p>conda 环境</p>\n<p>ppocr_rosetta</p>\n<p>如何用paddlespeech asr 实现语音转文字的命令操作？</p>\n<p>要使用PaddleSpeech ASR实现语音转文字的命令操作，可以按照以下步骤进行：</p>\n<ol>\n<li class=\"lvl-3\">\n<p>安装PaddleSpeech库：首先需要在Python环境中安装PaddleSpeech库。可以使用pip命令进行安装：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">pip install paddlespeech<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li class=\"lvl-3\">\n<p>导入所需的库和模型：导入PaddleSpeech库以及使用的ASR模型，例如DeepSpeech2Model。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> paddle\n<span class=\"token keyword\">from</span> paddlespeech<span class=\"token punctuation\">.</span>models<span class=\"token punctuation\">.</span>deepspeech2 <span class=\"token keyword\">import</span> DeepSpeech2Model\n<span class=\"token keyword\">from</span> paddlespeech<span class=\"token punctuation\">.</span>utils <span class=\"token keyword\">import</span> io<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n</li>\n<li class=\"lvl-3\">\n<p>加载ASR模型和字典：使用PaddleSpeech提供的函数加载预训练的ASR模型和字典。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">model_path <span class=\"token operator\">=</span> <span class=\"token string\">'path/to/model'</span>\ndict_path <span class=\"token operator\">=</span> <span class=\"token string\">'path/to/dict'</span>\n\nmodel <span class=\"token operator\">=</span> DeepSpeech2Model<span class=\"token punctuation\">.</span>from_pretrained<span class=\"token punctuation\">(</span>model_path<span class=\"token punctuation\">)</span>\nvocab_dict <span class=\"token operator\">=</span> io<span class=\"token punctuation\">.</span>load_dict<span class=\"token punctuation\">(</span>dict_path<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li class=\"lvl-3\">\n<p>初始化音频处理器：根据ASR模型的要求，初始化音频处理器，并设置采样率、特征类型等参数。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">audio_processor <span class=\"token operator\">=</span> model<span class=\"token punctuation\">.</span>audio_processor<span class=\"token punctuation\">(</span>sample_rate<span class=\"token operator\">=</span><span class=\"token number\">16000</span><span class=\"token punctuation\">,</span> feature_type<span class=\"token operator\">=</span><span class=\"token string\">'fbank'</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li class=\"lvl-3\">\n<p>定义预处理函数：定义一个函数来对输入音频进行预处理，将其转换为模型可接受的格式。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">preprocess</span><span class=\"token punctuation\">(</span>audio_file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n   <span class=\"token comment\"># 读取音频文件</span>\n   audio_data <span class=\"token operator\">=</span> io<span class=\"token punctuation\">.</span>read_audio<span class=\"token punctuation\">(</span>audio_file<span class=\"token punctuation\">)</span>\n   \n   <span class=\"token comment\"># 预处理音频数据</span>\n   processed_data <span class=\"token operator\">=</span> audio_processor<span class=\"token punctuation\">.</span>process<span class=\"token punctuation\">(</span>audio_data<span class=\"token punctuation\">)</span>\n   <span class=\"token keyword\">return</span> processed_data<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li class=\"lvl-3\">\n<p>进行语音转文字的命令操作：使用加载的ASR模型对预处理后的音频数据进行推理，得到转换后的文本结果。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">speech_to_text</span><span class=\"token punctuation\">(</span>audio_file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n   <span class=\"token comment\"># 预处理音频数据</span>\n   processed_data <span class=\"token operator\">=</span> preprocess<span class=\"token punctuation\">(</span>audio_file<span class=\"token punctuation\">)</span>\n   \n   <span class=\"token comment\"># 将预处理后的音频数据输入ASR模型进行推理</span>\n   result <span class=\"token operator\">=</span> model<span class=\"token punctuation\">.</span>decode_batch<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>processed_data<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> vocab_dict<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n   \n   <span class=\"token keyword\">return</span> result<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li class=\"lvl-3\">\n<p>调用函数进行语音转文字：通过传入音频文件路径调用<code>speech_to_text</code>函数进行语音转文字操作。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">audio_file <span class=\"token operator\">=</span> <span class=\"token string\">'path/to/audio.wav'</span>\ntext <span class=\"token operator\">=</span> speech_to_text<span class=\"token punctuation\">(</span>audio_file<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n</ol>\n<p>通过以上步骤，您可以使用PaddleSpeech ASR实现语音转文字的命令操作。请确保已安装所需库和模型，并将路径替换为您自己的路径。</p>\n<p>在Mac系统上，如何afinfo命令实现wav文件的切割</p>\n<p>在Mac系统上，我们可以使用afinfo命令来获取wav文件的信息，但是无法直接使用afinfo命令来实现wav文件的切割。要实现wav文件的切割，可以使用其他命令行工具或编程语言来完成。</p>\n<p>以下是一种使用SoX（Sound eXchange）命令行工具来切割wav文件的方法：</p>\n<ol>\n<li class=\"lvl-3\">\n<p>首先确保已经安装了SoX命令行工具。可以在终端中运行<code>brew install sox</code>来安装。</p>\n</li>\n<li class=\"lvl-3\">\n<p>打开终端，并进入包含要切割的wav文件的目录。</p>\n</li>\n<li class=\"lvl-3\">\n<p>使用以下命令来切割wav文件：</p>\n</li>\n</ol>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">sox input.wav output.wav trim start_time duration<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>其中，</p>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>input.wav为要切割的源文件名。</p>\n</li>\n<li class=\"lvl-2\">\n<p>output.wav为生成的切割后的目标文件名。</p>\n</li>\n<li class=\"lvl-2\">\n<p>start_time表示起始时间点，可以使用hh:mm:ss.sss格式或以秒为单位。</p>\n</li>\n<li class=\"lvl-2\">\n<p>duration表示要保留的时长，同样可以使用hh:mm:ss.sss格式或以秒为单位。</p>\n</li>\n</ul>\n<p>例如，如果要从input.wav中提取从第10秒开始时长为5秒的片段，并保存为output.wav，可以使用以下命令：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">sox input.wav output.wav trim <span class=\"token number\">10</span> <span class=\"token number\">5</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>注意：以上方法是通过SoX工具实现wav文件切割，在使用之前请确保已正确安装和配置SoX。</p>\n<p>SoX如何查看Wav文件的时间</p>\n<p>使用SoX命令行工具，可以通过以下命令查看Wav文件的时间信息：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">soxi <span class=\"token parameter variable\">-D</span> filename.wav<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>其中，<code>filename.wav</code>是你要查看的Wav文件的路径和文件名。</p>\n<p>执行以上命令后，会输出Wav文件的总时长（以秒为单位）。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">\n<span class=\"token keyword\">from</span> paddlespeech<span class=\"token punctuation\">.</span>cli<span class=\"token punctuation\">.</span>asr<span class=\"token punctuation\">.</span>infer <span class=\"token keyword\">import</span> ASRExecutor\n\n<span class=\"token comment\"># 创 建 ASRExecutor对 象</span>\n\nasr <span class=\"token operator\">=</span> ASRExecutor<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 调 用 语 音 转 文 字 模 型 进 行 推 理</span>\n\nresult <span class=\"token operator\">=</span> asr<span class=\"token punctuation\">(</span>audio_file<span class=\"token operator\">=</span><span class=\"token string\">\"siem-part2.wav\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 在 这 里 替 换 为 你 的 音 频 文 件 名</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> paddlespeech<span class=\"token punctuation\">.</span>cli<span class=\"token punctuation\">.</span>tts<span class=\"token punctuation\">.</span>infer <span class=\"token keyword\">import</span> TTSExecutor\ntts <span class=\"token operator\">=</span> TTSExecutor<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\ntts<span class=\"token punctuation\">(</span>text<span class=\"token operator\">=</span><span class=\"token string\">\"今 天 天 气 十 分 不 错 ,你 觉 得 呢 ？ 是 不 什 么 ， 真 的 不 错 吗 ？ 。 \"</span><span class=\"token punctuation\">,</span> output<span class=\"token operator\">=</span><span class=\"token string\">\"output.wav\"</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>mpg123命令如何播放.wav文件</p>\n<p>要使用mpg123命令播放.wav文件，可以在终端中输入以下命令：</p>\n<p>mpg123 文件路径.wav</p>\n<p>其中，文件路径是.wav文件的实际路径和名称。请确保在输入命令之前已经安装了mpg123软件。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token punctuation\">[</span>build_ext<span class=\"token punctuation\">]</span>\ninclude_dirs<span class=\"token operator\">=</span><span class=\"token operator\">/</span>opt<span class=\"token operator\">/</span>homebrew<span class=\"token operator\">/</span>Cellar<span class=\"token operator\">/</span>portaudio<span class=\"token operator\">/</span>HEAD<span class=\"token operator\">-</span>0c19240<span class=\"token operator\">/</span>include\nlibrary_dirs<span class=\"token operator\">=</span><span class=\"token operator\">/</span>opt<span class=\"token operator\">/</span>homebrew<span class=\"token operator\">/</span>Cellar<span class=\"token operator\">/</span>portaudio<span class=\"token operator\">/</span>HEAD<span class=\"token operator\">-</span>0c19240<span class=\"token operator\">/</span>lib<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test\"</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n","text":"paddlespeech tts --input &quot;你 好 ， 欢 迎 使 用 百 度 飞 桨 深 度 学 习 框 架 ！ &quot; --output testout.wav conda 环境 ppocr_rosetta 如何用paddlespeech asr 实现...","link":"","photos":[],"count_time":{"symbolsCount":"2.8k","symbolsTime":"3 mins."},"categories":[{"name":"AIGC","slug":"AIGC","count":117,"path":"api/categories/AIGC.json"}],"tags":[{"name":"百度AI","slug":"百度AI","count":1,"path":"api/tags/百度AI.json"}],"toc":"","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Hexo使用Gitee+PicGO图墙图片不显示","uid":"70ccad85c177ffedfa95e18f77517e68","slug":"kanbanfiles/Hexo使用Gitee+PicGO图墙图片不显示","date":"2024-03-14T07:45:09.029Z","updated":"2024-03-14T07:45:09.030Z","comments":true,"path":"api/articles/kanbanfiles/Hexo使用Gitee+PicGO图墙图片不显示.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":" 如何只对网页中的img标签进行no-referrer限制。 要对网页中的img标签进行no-referrer限制，您可以使用以下方法： 使用JavaScript：在网页中插入以下JavaScript代码，它将遍历所有的img标签，并为每个img标签设置rel属性为&quot;n...","link":"","photos":[],"count_time":{"symbolsCount":"1.3k","symbolsTime":"1 mins."},"categories":[{"name":"obsidian","slug":"obsidian","count":8,"path":"api/categories/obsidian.json"},{"name":"hexo","slug":"obsidian/hexo","count":3,"path":"api/categories/obsidian/hexo.json"}],"tags":[{"name":"obsidian","slug":"obsidian","count":3,"path":"api/tags/obsidian.json"},{"name":"hexo","slug":"hexo","count":1,"path":"api/tags/hexo.json"},{"name":"picgo","slug":"picgo","count":1,"path":"api/tags/picgo.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"AI Agents 地图","uid":"77ed20ae201c3c7dc5957973d20f4a5c","slug":"aigc/AI Agents 地图","date":"2024-03-14T07:45:09.028Z","updated":"2024-03-14T07:45:09.028Z","comments":true,"path":"api/articles/aigc/AI Agents 地图.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":" AI Agents 地图 A16z 消费领域合伙人 Olivia Moore 整理的 AI Agents 地图。 她将 Agents 定义为跨系统工作并为用户执行任务的 bots。 3 月份，Agents 这一概念通过Auto-GPT 成为主流，一个月内就在 Github 上获...","link":"","photos":[],"count_time":{"symbolsCount":452,"symbolsTime":"1 mins."},"categories":[{"name":"AIGC","slug":"AIGC","count":117,"path":"api/categories/AIGC.json"},{"name":"weibo","slug":"AIGC/weibo","count":59,"path":"api/categories/AIGC/weibo.json"}],"tags":[{"name":"weibo","slug":"weibo","count":62,"path":"api/tags/weibo.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}