{"title":"","uid":"f73a8e23e6f6f669cf99c7dba8fa0722","slug":"kanbanfiles/Go语言实现代理","date":"2024-03-14T07:45:09.034Z","updated":"2024-03-14T07:45:09.034Z","comments":true,"path":"api/articles/kanbanfiles/Go语言实现代理.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":null,"content":"<p>如何用Go语言实现代理转发HTTP请求的流量，从80端口转发给实际服务上的8000端口。</p>\n<p>要使用Go语言实现代理转发HTTP请求的流量，可以使用net/http包和httputil包来处理。以下是一个简单的示例代码：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;log&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;net/http&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;net/http/httputil&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;net/url&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 创建反向代理的目标URL</span></span><br><span class=\"line\">\ttargetURL, err := url.Parse(<span class=\"string\">&quot;http://localhost:8000&quot;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tlog.Fatal(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 创建反向代理处理器</span></span><br><span class=\"line\">\tproxy := httputil.NewSingleHostReverseProxy(targetURL)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 创建HTTP服务器</span></span><br><span class=\"line\">\tserver := http.Server&#123;</span><br><span class=\"line\">\t\tAddr:    <span class=\"string\">&quot;:80&quot;</span>,</span><br><span class=\"line\">\t\tHandler: proxy,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tlog.Println(<span class=\"string\">&quot;Starting server on :80...&quot;</span>)</span><br><span class=\"line\">\terr = server.ListenAndServe()</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tlog.Fatal(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在上述代码中，我们首先创建了一个<code>targetURL</code>，它是实际服务所在的地址。然后，我们使用<code>httputil.NewSingleHostReverseProxy()</code>函数创建了一个反向代理处理器。最后，我们创建了一个HTTP服务器，并将反向代理处理器作为其处理程序。</p>\n<p>当有请求到达80端口时，HTTP服务器将会将请求转发给实际服务上的8000端口，并将响应返回给客户端。</p>\n<p>请注意，在运行此代码之前，请确保实际服务已经在8000端口上运行，并且您具有足够的权限来监听和使用80端口。</p>\n<p>用Go语言创建一个HTTP服务， 响应用户的请求， 并在服务后端打印出用户请求的URL和请求的IP。</p>\n<p>以下是使用Go语言创建一个HTTP服务的示例代码：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;log&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;net/http&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">helloHandler</span><span class=\"params\">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 打印用户请求的URL和请求的IP</span></span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;URL:&quot;</span>, r.URL.Path)</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;IP:&quot;</span>, r.RemoteAddr)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 响应用户请求</span></span><br><span class=\"line\">\tfmt.Fprintf(w, <span class=\"string\">&quot;Hello, World!&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\thttp.HandleFunc(<span class=\"string\">&quot;/&quot;</span>, helloHandler)</span><br><span class=\"line\"></span><br><span class=\"line\">\tlog.Println(<span class=\"string\">&quot;Server started on localhost:8080&quot;</span>)</span><br><span class=\"line\">\tlog.Fatal(http.ListenAndServe(<span class=\"string\">&quot;:8080&quot;</span>, <span class=\"literal\">nil</span>))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在上面的示例代码中，我们定义了一个名为<code>helloHandler</code>的处理函数来处理用户的请求。在该函数中，我们打印了用户请求的URL和请求的IP，并通过<code>fmt.Fprintf</code>将&quot;Hello, World!&quot;作为响应返回给用户。</p>\n<p>在<code>main</code>函数中，我们使用<code>http.HandleFunc</code>将<code>helloHandler</code>函数与根路径&quot;/“绑定。然后，我们调用<code>http.ListenAndServe</code>启动一个HTTP服务器，并指定监听地址为”:8080&quot;。</p>\n<p>运行这个程序后，你可以在浏览器中访问&quot;<a href=\"http://localhost:8080\">http://localhost:8080</a>&quot;来发送一个GET请求。然后你将会在服务端看到类似以下输出：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">URL: /</span><br><span class=\"line\">IP: 127.0.0.1:57679</span><br></pre></td></tr></table></figure>\n<p>其中URL是用户请求的路径，IP是用户请求的IP地址。</p>\n<p>用Go语言实现一个Web服务，处理用户的HTTP请求。</p>\n<p>package main</p>\n<p>import (<br>\n“fmt”<br>\n“log”<br>\n“net/http”<br>\n)</p>\n<p>func main() {<br>\nhttp.HandleFunc(“/”, handler)<br>\nlog.Fatal(http.ListenAndServe(“:8080”, nil))<br>\n}</p>\n<p>func handler(w http.ResponseWriter, r *http.Request) {<br>\nfmt.Fprintf(w, “Hello, World!”)<br>\n}</p>\n<p>要向Graylog4的GELF HTTP接口发送POST请求，可以使用任何HTTP客户端工具或编程语言来实现。下面是使用Python的示例代码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"></span><br><span class=\"line\">url = <span class=\"string\">&#x27;http://graylog4-server:12201/gelf&#x27;</span>  <span class=\"comment\"># 替换为你的Graylog4服务器地址和端口号</span></span><br><span class=\"line\"></span><br><span class=\"line\">data = &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;version&quot;</span>: <span class=\"string\">&quot;1.1&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;host&quot;</span>: <span class=\"string\">&quot;example.com&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;short_message&quot;</span>: <span class=\"string\">&quot;This is a test message&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;timestamp&quot;</span>: <span class=\"number\">1609459200</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;level&quot;</span>: <span class=\"number\">6</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">response = requests.post(url, json=data)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> response.status_code == <span class=\"number\">202</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Message sent successfully&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Failed to send message:&quot;</span>, response.text)</span><br></pre></td></tr></table></figure>\n<p>上述代码使用<code>requests</code>库发送一个包含GELF消息的POST请求到指定的URL。请确保将<code>url</code>变量替换为你自己的Graylog4服务器地址和端口号。在<code>data</code>字典中，你可以设置GELF消息的各个字段，如版本、主机、短消息、时间戳和日志级别等。</p>\n<p>如果成功发送了消息，服务器将返回状态码202；否则，将返回错误信息。在Graylog4里，如何向一个GLEF的HTTP接口发送POST请求</p>\n","text":"如何用Go语言实现代理转发HTTP请求的流量，从80端口转发给实际服务上的8000端口。 要使用Go语言实现代理转发HTTP请求的流量，可以使用net/http包和httputil包来处理。以下是一个简单的示例代码： 1234567891011121314151617181920...","link":"","photos":[],"count_time":{"symbolsCount":"3k","symbolsTime":"3 mins."},"categories":[],"tags":[],"toc":"","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"","uid":"f73a8e23e6f6f669cf99c7dba8fa0722","slug":"kanbanfiles/安全网格","date":"2024-03-14T07:45:09.036Z","updated":"2024-03-14T07:45:09.036Z","comments":true,"path":"api/articles/kanbanfiles/安全网格.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":null,"text":"网络安全中的安全网格指的是什么？ 安全网格是一种网络安全架构，旨在提高网络的可靠性、可扩展性和安全性。它通过将网络划分为多个区域，并在每个区域中部署安全设备和控制机制，来实现对整个网络的保护。每个区域被称为一个网格节点，它们之间通过安全网关进行连接。安全网格可以帮助组织实现对网络...","link":"","photos":[],"count_time":{"symbolsCount":174,"symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"X79和X99主板之间差多少？","uid":"6f69935454a41ee16cb899c98008b9e3","slug":"kanbanfiles/X79和X99主板之间差多少？","date":"2024-03-14T07:45:09.034Z","updated":"2024-03-14T07:45:09.034Z","comments":true,"path":"api/articles/kanbanfiles/X79和X99主板之间差多少？.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":null,"text":"X79和X99主板之间差多少？ X79和X99主板之间的差异主要体现在以下几个方面： 芯片组：X79主板采用的是Intel X79芯片组，而X99主板采用的是Intel X99芯片组。X99芯片组相对于X79芯片组有更高级别的功能和性能。 处理器支持：X79主板支持LGA 201...","link":"","photos":[],"count_time":{"symbolsCount":"1.7k","symbolsTime":"2 mins."},"categories":[{"name":"主机硬件","slug":"主机硬件","count":1,"path":"api/categories/主机硬件.json"}],"tags":[{"name":"主板","slug":"主板","count":1,"path":"api/tags/主板.json"},{"name":"x79","slug":"x79","count":1,"path":"api/tags/x79.json"},{"name":"x99","slug":"x99","count":1,"path":"api/tags/x99.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}