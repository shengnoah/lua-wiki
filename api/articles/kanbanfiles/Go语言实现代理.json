{"title":"","uid":"f73a8e23e6f6f669cf99c7dba8fa0722","slug":"kanbanfiles/Go语言实现代理","date":"2024-03-14T07:45:09.034Z","updated":"2024-03-14T07:45:09.034Z","comments":true,"path":"api/articles/kanbanfiles/Go语言实现代理.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<p>如何用Go语言实现代理转发HTTP请求的流量，从80端口转发给实际服务上的8000端口。</p>\n<p>要使用Go语言实现代理转发HTTP请求的流量，可以使用net/http包和httputil包来处理。<br />\n以下是一个简单的示例代码：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"log\"</span>\n\t<span class=\"token string\">\"net/http\"</span>\n\t<span class=\"token string\">\"net/http/httputil\"</span>\n\t<span class=\"token string\">\"net/url\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">// 创建反向代理的目标URL</span>\n\ttargetURL<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> url<span class=\"token punctuation\">.</span><span class=\"token function\">Parse</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http://localhost:8000\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\tlog<span class=\"token punctuation\">.</span><span class=\"token function\">Fatal</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token comment\">// 创建反向代理处理器</span>\n\tproxy <span class=\"token operator\">:=</span> httputil<span class=\"token punctuation\">.</span><span class=\"token function\">NewSingleHostReverseProxy</span><span class=\"token punctuation\">(</span>targetURL<span class=\"token punctuation\">)</span>\n\n\t<span class=\"token comment\">// 创建HTTP服务器</span>\n\tserver <span class=\"token operator\">:=</span> http<span class=\"token punctuation\">.</span>Server<span class=\"token punctuation\">&#123;</span>\n\t\tAddr<span class=\"token punctuation\">:</span>    <span class=\"token string\">\":80\"</span><span class=\"token punctuation\">,</span>\n\t\tHandler<span class=\"token punctuation\">:</span> proxy<span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\tlog<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Starting server on :80...\"</span><span class=\"token punctuation\">)</span>\n\terr <span class=\"token operator\">=</span> server<span class=\"token punctuation\">.</span><span class=\"token function\">ListenAndServe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\tlog<span class=\"token punctuation\">.</span><span class=\"token function\">Fatal</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>在上述代码中，我们首先创建了一个<code>targetURL</code>，它是实际服务所在的地址。然后，我们使用<code>httputil.NewSingleHostReverseProxy()</code>函数创建了一个反向代理处理器。最后，我们创建了一个HTTP服务器，并将反向代理处理器作为其处理程序。</p>\n<p>当有请求到达80端口时，HTTP服务器将会将请求转发给实际服务上的8000端口，并将响应返回给客户端。</p>\n<p>请注意，在运行此代码之前，请确保实际服务已经在8000端口上运行，并且您具有足够的权限来监听和使用80端口。</p>\n<p>用Go语言创建一个HTTP服务， 响应用户的请求， 并在服务后端打印出用户请求的URL和请求的IP。</p>\n<p>以下是使用Go语言创建一个HTTP服务的示例代码：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"fmt\"</span>\n\t<span class=\"token string\">\"log\"</span>\n\t<span class=\"token string\">\"net/http\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">helloHandler</span><span class=\"token punctuation\">(</span>w http<span class=\"token punctuation\">.</span>ResponseWriter<span class=\"token punctuation\">,</span> r <span class=\"token operator\">*</span>http<span class=\"token punctuation\">.</span>Request<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">// 打印用户请求的URL和请求的IP</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"URL:\"</span><span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">.</span>URL<span class=\"token punctuation\">.</span>Path<span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"IP:\"</span><span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">.</span>RemoteAddr<span class=\"token punctuation\">)</span>\n\n\t<span class=\"token comment\">// 响应用户请求</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Fprintf</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Hello, World!\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\thttp<span class=\"token punctuation\">.</span><span class=\"token function\">HandleFunc</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> helloHandler<span class=\"token punctuation\">)</span>\n\n\tlog<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Server started on localhost:8080\"</span><span class=\"token punctuation\">)</span>\n\tlog<span class=\"token punctuation\">.</span><span class=\"token function\">Fatal</span><span class=\"token punctuation\">(</span>http<span class=\"token punctuation\">.</span><span class=\"token function\">ListenAndServe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\":8080\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>在上面的示例代码中，我们定义了一个名为<code>helloHandler</code>的处理函数来处理用户的请求。在该函数中，我们打印了用户请求的URL和请求的IP，并通过<code>fmt.Fprintf</code>将&quot;Hello, World!&quot;作为响应返回给用户。</p>\n<p>在<code>main</code>函数中，我们使用<code>http.HandleFunc</code>将<code>helloHandler</code>函数与根路径&quot;/“绑定。然后，我们调用<code>http.ListenAndServe</code>启动一个HTTP服务器，并指定监听地址为”:8080&quot;。</p>\n<p>运行这个程序后，你可以在浏览器中访问&quot;<a href=\"http://localhost:8080\">http://localhost:8080</a>&quot;来发送一个GET请求。然后你将会在服务端看到类似以下输出：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">URL: &#x2F;\nIP: 127.0.0.1:57679<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>其中URL是用户请求的路径，IP是用户请求的IP地址。</p>\n<p>用Go语言实现一个Web服务，处理用户的HTTP请求。</p>\n<p>package main</p>\n<p>import (<br />\n“fmt”<br />\n“log”<br />\n“net/http”<br />\n)</p>\n<p>func main() {<br />\nhttp.HandleFunc(“/”, handler)<br />\nlog.Fatal(http.ListenAndServe(“:8080”, nil))<br />\n}</p>\n<p>func handler(w http.ResponseWriter, r *http.Request) {<br />\nfmt.Fprintf(w, “Hello, World!”)<br />\n}</p>\n<p>要向Graylog4的GELF HTTP接口发送POST请求，可以使用任何HTTP客户端工具或编程语言来实现。下面是使用Python的示例代码：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> requests\n\nurl <span class=\"token operator\">=</span> <span class=\"token string\">'http://graylog4-server:12201/gelf'</span>  <span class=\"token comment\"># 替换为你的Graylog4服务器地址和端口号</span>\n\ndata <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token string\">\"version\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"1.1\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"host\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"example.com\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"short_message\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"This is a test message\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"timestamp\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1609459200</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"level\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">6</span>\n<span class=\"token punctuation\">&#125;</span>\n\nresponse <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>post<span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> json<span class=\"token operator\">=</span>data<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">if</span> response<span class=\"token punctuation\">.</span>status_code <span class=\"token operator\">==</span> <span class=\"token number\">202</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Message sent successfully\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Failed to send message:\"</span><span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>上述代码使用<code>requests</code>库发送一个包含GELF消息的POST请求到指定的URL。请确保将<code>url</code>变量替换为你自己的Graylog4服务器地址和端口号。在<code>data</code>字典中，你可以设置GELF消息的各个字段，如版本、主机、短消息、时间戳和日志级别等。</p>\n<p>如果成功发送了消息，服务器将返回状态码202；否则，将返回错误信息。在Graylog4里，如何向一个GLEF的HTTP接口发送POST请求</p>\n","text":"如何用Go语言实现代理转发HTTP请求的流量，从80端口转发给实际服务上的8000端口。 要使用Go语言实现代理转发HTTP请求的流量，可以使用net/http包和httputil包来处理。 以下是一个简单的示例代码： package main import ( \"log\" \"n...","link":"","photos":[],"count_time":{"symbolsCount":"2.7k","symbolsTime":"2 mins."},"categories":[],"tags":[],"toc":"","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"","uid":"f73a8e23e6f6f669cf99c7dba8fa0722","slug":"kanbanfiles/安全网格","date":"2024-03-14T07:45:09.036Z","updated":"2024-03-14T07:45:09.036Z","comments":true,"path":"api/articles/kanbanfiles/安全网格.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"网络安全中的安全网格指的是什么？ 安全网格是一种网络安全架构，旨在提高网络的可靠性、可扩展性和安全性。它通过将网络划分为多个区域，并在每个区域中部署安全设备和控制机制，来实现对整个网络的保护。每个区域被称为一个网格节点，它们之间通过安全网关进行连接。安全网格可以帮助组织实现对网络...","link":"","photos":[],"count_time":{"symbolsCount":174,"symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"hexo显示gitee图床图片","uid":"7951604bcce5cb8d2f8131e9a9d0848a","slug":"kanbanfiles/hexo显示gitee图床图片不显示图","date":"2024-03-14T07:45:09.034Z","updated":"2024-03-14T07:45:09.034Z","comments":true,"path":"api/articles/kanbanfiles/hexo显示gitee图床图片不显示图.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"\\themes\\butterfly\\layout\\includes目录下有一个head.pug文件，修改该文件的meta信息，会使生成的所有页面都带有该head。 meta(name=\"referrer\" content=\"no-referrer\") 新测，这种方式是好用的， 直...","link":"","photos":[],"count_time":{"symbolsCount":170,"symbolsTime":"1 mins."},"categories":[{"name":"Sec","slug":"Sec","count":5,"path":"api/categories/Sec.json"},{"name":"Graylog","slug":"Sec/Graylog","count":3,"path":"api/categories/Sec/Graylog.json"}],"tags":[{"name":"Graylog","slug":"Graylog","count":4,"path":"api/tags/Graylog.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}