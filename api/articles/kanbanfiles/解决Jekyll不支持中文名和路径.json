{"title":"解决Jekyll不支持中文名和路径","uid":"e09423791aea3ea2acc209247b83773c","slug":"kanbanfiles/解决Jekyll不支持中文名和路径","date":"2024-03-14T07:45:09.032Z","updated":"2024-03-14T07:45:09.032Z","comments":true,"path":"api/articles/kanbanfiles/解决Jekyll不支持中文名和路径.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","content":"<h1 id=\"解决jekyll不支持中文名和路径\"><a class=\"markdownIt-Anchor\" href=\"#解决jekyll不支持中文名和路径\"></a> 解决Jekyll不支持中文名和路径</h1>\n<p>Jekyll如果在Mac系统中，目录有中文字，生成新文件的时候会报错，主要原因是因为Ruby做字符串连接的时候，不支持中文，这样需要把一些字符，通过.force_encoding(“UTF-8”)转换成中文这样就不出错。 在部署的时候， 不是直接用GitPages的Jekyll服务，而且生成HTML静态文件，所以Github上 Jekyll支持不支持中文字符没关系， 本地Jekyll生成文件的时候不出错就达到目的了。</p>\n<p>因为用的是rbenv虚拟的ruby运行环境，有多个ruby运行环境，代码改动的位置，在对应的Ruby版本目录下进行修改。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">/Users/username/.rbenv/versions/2.7.2/lib/ruby/2.7.0/webrick/httpservlet/filehandler.rb<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>在这个文件中有一个，set_filename方法，把base这个变量强制改成base.force_encoding(“UTF-8”)))<br />\nJekyll项目所在的系统路径中出现中文，</p>\n<pre class=\"line-numbers language-ruby\" data-language=\"ruby\"><code class=\"language-ruby\">\n<span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">set_filename</span></span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span>\n       res<span class=\"token punctuation\">.</span>filename <span class=\"token operator\">=</span> <span class=\"token variable\">@root</span><span class=\"token punctuation\">.</span>dup\n       path_info <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>path_info<span class=\"token punctuation\">.</span>scan<span class=\"token punctuation\">(</span><span class=\"token regex-literal\"><span class=\"token regex\">%r|/[^/]*|</span></span><span class=\"token punctuation\">)</span>\n\n       path_info<span class=\"token punctuation\">.</span>unshift<span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"\"</span></span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># dummy for checking @root dir</span>\n       <span class=\"token keyword\">while</span> base <span class=\"token operator\">=</span> path_info<span class=\"token punctuation\">.</span>first\n         <span class=\"token keyword\">break</span> <span class=\"token keyword\">if</span> base <span class=\"token operator\">==</span> <span class=\"token string-literal\"><span class=\"token string\">\"/\"</span></span>\n         <span class=\"token keyword\">break</span> <span class=\"token keyword\">unless</span> <span class=\"token builtin\">File</span><span class=\"token punctuation\">.</span>directory<span class=\"token operator\">?</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">File</span><span class=\"token punctuation\">.</span>expand_path<span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>filename <span class=\"token operator\">+</span> base<span class=\"token punctuation\">.</span>force_encoding<span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"UTF-8\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n         shift_path_info<span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> path_info<span class=\"token punctuation\">)</span>\n         call_callback<span class=\"token punctuation\">(</span><span class=\"token symbol\">:DirectoryCallback</span><span class=\"token punctuation\">,</span> req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span>\n       <span class=\"token keyword\">end</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>不支持中文的问题， 不限于只有本地路径有中文，还有其他与中文字符连接的时候都有这个问题。比如，文件名， title名，各种属性的设置都有可能不支持中文，基本的解决方法原则，就转成UTF-8字符再进行字符连接。<br />\nJekyll在读取中文目录的时间报错，不能实时的监控文件变化，一遇到变更中文文件名的markdown文件就出错。<br />\n根本原因， 在原有英文代码里，没有考虑bit asc与UTF-8数据join连接造成的出错。</p>\n<p>出现问题呢的文件是：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">/System/Library/Frameworks/Ruby.framework/Versions/2.6/usr/lib/ruby/2.6.0/pathname.rb<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>解决的方法是直接修改源码：</p>\n<p>原始代码：</p>\n<pre class=\"line-numbers language-ruby\" data-language=\"ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">children</span></span><span class=\"token punctuation\">(</span>with_directory<span class=\"token operator\">=</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n    with_directory <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span> <span class=\"token keyword\">if</span> <span class=\"token variable\">@path</span> <span class=\"token operator\">==</span> <span class=\"token string-literal\"><span class=\"token string\">'.'</span></span>\n    result <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token builtin\">Dir</span><span class=\"token punctuation\">.</span>foreach<span class=\"token punctuation\">(</span><span class=\"token variable\">@path</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token operator\">|</span>e<span class=\"token operator\">|</span>\n      <span class=\"token keyword\">next</span> <span class=\"token keyword\">if</span> e <span class=\"token operator\">==</span> <span class=\"token string-literal\"><span class=\"token string\">'.'</span></span> <span class=\"token operator\">||</span> e <span class=\"token operator\">==</span> <span class=\"token string-literal\"><span class=\"token string\">'..'</span></span>\n      <span class=\"token keyword\">if</span> with_directory\n        result <span class=\"token operator\">&lt;&lt;</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">File</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token variable\">@path</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">else</span>\n        result <span class=\"token operator\">&lt;&lt;</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">end</span>\n    <span class=\"token punctuation\">&#125;</span>\n    result\n  <span class=\"token keyword\">end</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>修改代码，如下：</p>\n<pre class=\"line-numbers language-ruby\" data-language=\"ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">children</span></span><span class=\"token punctuation\">(</span>with_directory<span class=\"token operator\">=</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n    with_directory <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span> <span class=\"token keyword\">if</span> <span class=\"token variable\">@path</span> <span class=\"token operator\">==</span> <span class=\"token string-literal\"><span class=\"token string\">'.'</span></span>\n    result <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token builtin\">Dir</span><span class=\"token punctuation\">.</span>foreach<span class=\"token punctuation\">(</span><span class=\"token variable\">@path</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token operator\">|</span>e<span class=\"token operator\">|</span>\n      <span class=\"token keyword\">next</span> <span class=\"token keyword\">if</span> e <span class=\"token operator\">==</span> <span class=\"token string-literal\"><span class=\"token string\">'.'</span></span> <span class=\"token operator\">||</span> e <span class=\"token operator\">==</span> <span class=\"token string-literal\"><span class=\"token string\">'..'</span></span>\n      <span class=\"token keyword\">if</span> with_directory\n        <span class=\"token comment\">#print e, \"\\n\"</span>\n        <span class=\"token comment\">#print @path, \"\\n\"</span>\n        result <span class=\"token operator\">&lt;&lt;</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">File</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token variable\">@path</span><span class=\"token punctuation\">.</span>force_encoding<span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"UTF-8\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">else</span>\n        result <span class=\"token operator\">&lt;&lt;</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">end</span>\n    <span class=\"token punctuation\">&#125;</span>\n    result\n  <span class=\"token keyword\">end</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>关键的地方是，是将@path变成 @path.force_encoding(“UTF-8”) ， 这样就可以和后面的“e&quot;的UTF-8的内容进行join字符串连接了。</p>\n<p>这样修改问题就解决了。</p>\n<p>要是出现了“Encoding::CompatibilityError: incompatible character encodings: UTF-8 and GBK”</p>\n<p>有可能是之前设置成了：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">chcp <span class=\"token number\">850</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>改回</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">chcp <span class=\"token number\">936</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>这个改环境，而不是文件的编码格式，如果不想改文件的编码格式就，可以直接把UTF-８改成GBK，这个问题也解决了。</p>\n<pre class=\"line-numbers language-ruby\" data-language=\"ruby\"><code class=\"language-ruby\">result <span class=\"token operator\">&lt;&lt;</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">File</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token variable\">@path</span><span class=\"token punctuation\">.</span>force_encoding<span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"GBK\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>后来又出问题了，在Windows10上用choco装的Jekyll是3.x，用的Ruby也是是3.x但是， Bunlde是 2.2,　Bundle install 出来的Jekyll是 4.x，最后运行不起来有，少了webrick，gem install 装了也装不到4.x中，Bundle Update也没用，就把Ruby降级到了2.7好用了，但是，又不支持中文名了。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">C:/tools/Ruby27-x64/lib/ruby/gems/2.7.0/gems/liquid-4.0.3/lib/liquid/block_body.rb<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>直接改了， 和上面的思路一样，强转。</p>\n<pre class=\"line-numbers language-ruby\" data-language=\"ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">render</span></span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span>\n  output <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  context<span class=\"token punctuation\">.</span>resource_limits<span class=\"token punctuation\">.</span>render_score <span class=\"token operator\">+=</span> <span class=\"token variable\">@nodelist</span><span class=\"token punctuation\">.</span>length\n\n  idx <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n  <span class=\"token keyword\">while</span> node <span class=\"token operator\">=</span> <span class=\"token variable\">@nodelist</span><span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">case</span> node\n    <span class=\"token keyword\">when</span> <span class=\"token builtin\">String</span>\n      check_resources<span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">)</span>\n      output <span class=\"token operator\">&lt;&lt;</span> node\n    <span class=\"token keyword\">when</span> Variable\n      render_node_to_output<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span> output<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">when</span> Block\n      render_node_to_output<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span> output<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">.</span>blank<span class=\"token operator\">?</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">break</span> <span class=\"token keyword\">if</span> context<span class=\"token punctuation\">.</span>interrupt<span class=\"token operator\">?</span> <span class=\"token comment\"># might have happened in a for-block</span>\n    <span class=\"token keyword\">when</span> Continue<span class=\"token punctuation\">,</span> Break\n      <span class=\"token comment\"># If we get an Interrupt that means the block must stop processing. An</span>\n      <span class=\"token comment\"># Interrupt is any command that stops block execution such as &#123;% break %&#125;</span>\n      <span class=\"token comment\"># or &#123;% continue %&#125;</span>\n      context<span class=\"token punctuation\">.</span>push_interrupt<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>interrupt<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">break</span>\n    <span class=\"token keyword\">else</span> <span class=\"token comment\"># Other non-Block tags</span>\n      render_node_to_output<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span> output<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">break</span> <span class=\"token keyword\">if</span> context<span class=\"token punctuation\">.</span>interrupt<span class=\"token operator\">?</span> <span class=\"token comment\"># might have happened through an include</span>\n    <span class=\"token keyword\">end</span>\n    idx <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n  <span class=\"token keyword\">end</span>\n  output <span class=\"token operator\">=</span> output<span class=\"token punctuation\">.</span>map<span class=\"token punctuation\">&#123;</span> <span class=\"token operator\">|</span>i<span class=\"token operator\">|</span> i<span class=\"token punctuation\">.</span>dup<span class=\"token punctuation\">.</span>force_encoding<span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"UTF-8\"</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#125;</span>\n  output<span class=\"token punctuation\">.</span>join\n<span class=\"token keyword\">end</span>\n\n<span class=\"token keyword\">private</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>就在</p>\n<pre class=\"line-numbers language-ruby\" data-language=\"ruby\"><code class=\"language-ruby\">output<span class=\"token punctuation\">.</span>join<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>的前面硬加一句</p>\n<pre class=\"line-numbers language-ruby\" data-language=\"ruby\"><code class=\"language-ruby\">output <span class=\"token operator\">=</span> output<span class=\"token punctuation\">.</span>map<span class=\"token punctuation\">&#123;</span> <span class=\"token operator\">|</span>i<span class=\"token operator\">|</span> i<span class=\"token punctuation\">.</span>dup<span class=\"token punctuation\">.</span>force_encoding<span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"UTF-8\"</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>然后就好用了。</p>\n<p>在Windows平台上还有一个问题，在WSL1升级成WSL2之后， Jekyll的自动生成功能不好用了，VSC的Jekyll Run插件也不好用，这时候需要加一句。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">--force-polling<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>加全了就是</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token parameter variable\">--watch</span> <span class=\"token parameter variable\">--trace</span> <span class=\"token parameter variable\">--incremental</span>  --force-polling<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>这样Jekyll在WSL、PowerShell中，就又可以自动根据文件变更，重新将Markdown自动生成新的HTML文件里。一个是解决是文件名不支持中文，一个是路径不支持中文，以上的修改都是解决这些问题的。后期为了生产速度和便利性，用Node JS的Hexo做博客系统更方便一些。</p>\n","text":" 解决Jekyll不支持中文名和路径 Jekyll如果在Mac系统中，目录有中文字，生成新文件的时候会报错，主要原因是因为Ruby做字符串连接的时候，不支持中文，这样需要把一些字符，通过.force_encoding(“UTF-8”)转换成中文这样就不出错。 在部署的时候， 不是...","link":"","photos":[],"count_time":{"symbolsCount":"4k","symbolsTime":"4 mins."},"categories":[{"name":"ruby","slug":"ruby","count":1,"path":"api/categories/ruby.json"}],"tags":[{"name":"jekyll","slug":"jekyll","count":1,"path":"api/tags/jekyll.json"},{"name":"blog","slug":"blog","count":1,"path":"api/tags/blog.json"},{"name":"不支持中文","slug":"不支持中文","count":1,"path":"api/tags/不支持中文.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E8%A7%A3%E5%86%B3jekyll%E4%B8%8D%E6%94%AF%E6%8C%81%E4%B8%AD%E6%96%87%E5%90%8D%E5%92%8C%E8%B7%AF%E5%BE%84\"><span class=\"toc-text\"> 解决Jekyll不支持中文名和路径</span></a></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"语言暴力和冷暴力","uid":"f26e4f0954aebe31a1ed6bfbacd82d92","slug":"kanbanfiles/语言暴力和冷暴力","date":"2024-03-14T07:45:09.032Z","updated":"2024-03-14T07:45:09.032Z","comments":true,"path":"api/articles/kanbanfiles/语言暴力和冷暴力.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":" 语言暴力和冷暴力 语言暴力和冷暴力 语言暴力是指使用恶言恶语、威胁、辱骂等方式来伤害他人的言辞行为。这种暴力形式主要是通过口头表达来实施，目的是让对方感到羞辱、恐惧或痛苦。语言暴力可以在现实生活中发生，也可以通过网络和社交媒体传播。 冷暴力是指以冷漠、无视或沉默等方式来伤害他人...","link":"","photos":[],"count_time":{"symbolsCount":790,"symbolsTime":"1 mins."},"categories":[{"name":"知识","slug":"知识","count":11,"path":"api/categories/知识.json"}],"tags":[{"name":"人际关系","slug":"人际关系","count":1,"path":"api/tags/人际关系.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"","uid":"f73a8e23e6f6f669cf99c7dba8fa0722","slug":"kanbanfiles/喝奶的时间段会影响身高的增长吗？","date":"2024-03-14T07:45:09.031Z","updated":"2024-03-14T07:45:09.031Z","comments":true,"path":"api/articles/kanbanfiles/喝奶的时间段会影响身高的增长吗？.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","text":"喝奶的时间段可能会对身高的增长产生一定影响，但影响程度相对较小。喝奶是获取钙质的重要途径之一，而钙质是骨骼发育所必需的营养素。由于骨骼发育主要集中在儿童和青少年时期，因此在这个阶段确保足够的钙质摄取对于促进身高增长至关重要。 然而，喝奶的时间段对身高增长的影响并不是主要因素。更重...","link":"","photos":[],"count_time":{"symbolsCount":339,"symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}