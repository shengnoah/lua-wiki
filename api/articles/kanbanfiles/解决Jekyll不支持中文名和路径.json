{"title":"解决Jekyll不支持中文名和路径","uid":"e09423791aea3ea2acc209247b83773c","slug":"kanbanfiles/解决Jekyll不支持中文名和路径","date":"2024-03-14T06:15:59.720Z","updated":"2024-03-14T06:15:59.720Z","comments":true,"path":"api/articles/kanbanfiles/解决Jekyll不支持中文名和路径.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":null,"content":"<h1 id=\"解决Jekyll不支持中文名和路径\"><a href=\"#解决Jekyll不支持中文名和路径\" class=\"headerlink\" title=\"解决Jekyll不支持中文名和路径\"></a>解决Jekyll不支持中文名和路径</h1><p>Jekyll如果在Mac系统中，目录有中文字，生成新文件的时候会报错，主要原因是因为Ruby做字符串连接的时候，不支持中文，这样需要把一些字符，通过.force_encoding(“UTF-8”)转换成中文这样就不出错。 在部署的时候， 不是直接用GitPages的Jekyll服务，而且生成HTML静态文件，所以Github上 Jekyll支持不支持中文字符没关系， 本地Jekyll生成文件的时候不出错就达到目的了。</p>\n<p>因为用的是rbenv虚拟的ruby运行环境，有多个ruby运行环境，代码改动的位置，在对应的Ruby版本目录下进行修改。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/Users/username/.rbenv/versions/2.7.2/lib/ruby/2.7.0/webrick/httpservlet/filehandler.rb</span><br></pre></td></tr></table></figure>\n<p>在这个文件中有一个，set_filename方法，把base这个变量强制改成base.force_encoding(“UTF-8”)))<br>Jekyll项目所在的系统路径中出现中文，</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">set_filename</span>(<span class=\"params\">req, res</span>)</span><br><span class=\"line\">       res.filename = <span class=\"variable\">@root</span>.dup</span><br><span class=\"line\">       path_info = req.path_info.scan(%r|<span class=\"params\">/[^/]*</span>|)</span><br><span class=\"line\"></span><br><span class=\"line\">       path_info.unshift(<span class=\"string\">&quot;&quot;</span>)  <span class=\"comment\"># dummy for checking <span class=\"doctag\">@root</span> dir</span></span><br><span class=\"line\">       <span class=\"keyword\">while</span> base = path_info.first</span><br><span class=\"line\">         <span class=\"keyword\">break</span> <span class=\"keyword\">if</span> base == <span class=\"string\">&quot;/&quot;</span></span><br><span class=\"line\">         <span class=\"keyword\">break</span> <span class=\"keyword\">unless</span> <span class=\"title class_\">File</span>.directory?(<span class=\"title class_\">File</span>.expand_path(res.filename + base.force_encoding(<span class=\"string\">&quot;UTF-8&quot;</span>)))</span><br><span class=\"line\">         shift_path_info(req, res, path_info)</span><br><span class=\"line\">         call_callback(<span class=\"symbol\">:DirectoryCallback</span>, req, res)</span><br><span class=\"line\">       <span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>不支持中文的问题， 不限于只有本地路径有中文，还有其他与中文字符连接的时候都有这个问题。比如，文件名， title名，各种属性的设置都有可能不支持中文，基本的解决方法原则，就转成UTF-8字符再进行字符连接。<br>Jekyll在读取中文目录的时间报错，不能实时的监控文件变化，一遇到变更中文文件名的markdown文件就出错。<br>根本原因， 在原有英文代码里，没有考虑bit asc与UTF-8数据join连接造成的出错。</p>\n<p>出现问题呢的文件是：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/System/Library/Frameworks/Ruby.framework/Versions/2.6/usr/lib/ruby/2.6.0/pathname.rb</span><br></pre></td></tr></table></figure>\n<p>解决的方法是直接修改源码：</p>\n<p>原始代码：</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">children</span>(<span class=\"params\">with_directory=<span class=\"literal\">true</span></span>)</span><br><span class=\"line\">    with_directory = <span class=\"literal\">false</span> <span class=\"keyword\">if</span> <span class=\"variable\">@path</span> == <span class=\"string\">&#x27;.&#x27;</span></span><br><span class=\"line\">    result = []</span><br><span class=\"line\">    <span class=\"title class_\">Dir</span>.foreach(<span class=\"variable\">@path</span>) &#123;|<span class=\"params\">e</span>|</span><br><span class=\"line\">      <span class=\"keyword\">next</span> <span class=\"keyword\">if</span> e == <span class=\"string\">&#x27;.&#x27;</span> |<span class=\"params\"></span>| e == <span class=\"string\">&#x27;..&#x27;</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> with_directory</span><br><span class=\"line\">        result &lt;&lt; <span class=\"variable language_\">self</span>.<span class=\"keyword\">class</span>.new(<span class=\"title class_\">File</span>.join(<span class=\"variable\">@path</span>, e))</span><br><span class=\"line\">      <span class=\"keyword\">else</span></span><br><span class=\"line\">        result &lt;&lt; <span class=\"variable language_\">self</span>.<span class=\"keyword\">class</span>.new(e)</span><br><span class=\"line\">      <span class=\"keyword\">end</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    result</span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<p>修改代码，如下：</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">children</span>(<span class=\"params\">with_directory=<span class=\"literal\">true</span></span>)</span><br><span class=\"line\">    with_directory = <span class=\"literal\">false</span> <span class=\"keyword\">if</span> <span class=\"variable\">@path</span> == <span class=\"string\">&#x27;.&#x27;</span></span><br><span class=\"line\">    result = []</span><br><span class=\"line\">    <span class=\"title class_\">Dir</span>.foreach(<span class=\"variable\">@path</span>) &#123;|<span class=\"params\">e</span>|</span><br><span class=\"line\">      <span class=\"keyword\">next</span> <span class=\"keyword\">if</span> e == <span class=\"string\">&#x27;.&#x27;</span> |<span class=\"params\"></span>| e == <span class=\"string\">&#x27;..&#x27;</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> with_directory</span><br><span class=\"line\">        <span class=\"comment\">#print e, &quot;\\n&quot;</span></span><br><span class=\"line\">        <span class=\"comment\">#print <span class=\"doctag\">@path</span>, &quot;\\n&quot;</span></span><br><span class=\"line\">        result &lt;&lt; <span class=\"variable language_\">self</span>.<span class=\"keyword\">class</span>.new(<span class=\"title class_\">File</span>.join(<span class=\"variable\">@path</span>.force_encoding(<span class=\"string\">&quot;UTF-8&quot;</span>), e))</span><br><span class=\"line\">      <span class=\"keyword\">else</span></span><br><span class=\"line\">        result &lt;&lt; <span class=\"variable language_\">self</span>.<span class=\"keyword\">class</span>.new(e)</span><br><span class=\"line\">      <span class=\"keyword\">end</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    result</span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<p>关键的地方是，是将@path变成 @path.force_encoding(“UTF-8”) ， 这样就可以和后面的“e”的UTF-8的内容进行join字符串连接了。</p>\n<p>这样修改问题就解决了。</p>\n<p>要是出现了“Encoding::CompatibilityError: incompatible character encodings: UTF-8 and GBK”</p>\n<p>有可能是之前设置成了：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chcp 850</span><br></pre></td></tr></table></figure>\n<p>改回</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chcp 936</span><br></pre></td></tr></table></figure>\n<p>这个改环境，而不是文件的编码格式，如果不想改文件的编码格式就，可以直接把UTF-８改成GBK，这个问题也解决了。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">result &lt;&lt; <span class=\"variable language_\">self</span>.<span class=\"keyword\">class</span>.new(<span class=\"title class_\">File</span>.join(<span class=\"variable\">@path</span>.force_encoding(<span class=\"string\">&quot;GBK&quot;</span>), e))</span><br></pre></td></tr></table></figure>\n<p>后来又出问题了，在Windows10上用choco装的Jekyll是3.x，用的Ruby也是是3.x但是， Bunlde是 2.2,　Bundle install 出来的Jekyll是 4.x，最后运行不起来有，少了webrick，gem install 装了也装不到4.x中，Bundle Update也没用，就把Ruby降级到了2.7好用了，但是，又不支持中文名了。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C:/tools/Ruby27-x64/lib/ruby/gems/2.7.0/gems/liquid-4.0.3/lib/liquid/block_body.rb</span><br></pre></td></tr></table></figure>\n\n<p>直接改了， 和上面的思路一样，强转。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">render</span>(<span class=\"params\">context</span>)</span><br><span class=\"line\">  output = []</span><br><span class=\"line\">  context.resource_limits.render_score += <span class=\"variable\">@nodelist</span>.length</span><br><span class=\"line\"></span><br><span class=\"line\">  idx = <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> node = <span class=\"variable\">@nodelist</span>[idx]</span><br><span class=\"line\">    <span class=\"keyword\">case</span> node</span><br><span class=\"line\">    <span class=\"keyword\">when</span> <span class=\"title class_\">String</span></span><br><span class=\"line\">      check_resources(context, node)</span><br><span class=\"line\">      output &lt;&lt; node</span><br><span class=\"line\">    <span class=\"keyword\">when</span> <span class=\"title class_\">Variable</span></span><br><span class=\"line\">      render_node_to_output(node, output, context)</span><br><span class=\"line\">    <span class=\"keyword\">when</span> <span class=\"title class_\">Block</span></span><br><span class=\"line\">      render_node_to_output(node, output, context, node.blank?)</span><br><span class=\"line\">      <span class=\"keyword\">break</span> <span class=\"keyword\">if</span> context.interrupt? <span class=\"comment\"># might have happened in a for-block</span></span><br><span class=\"line\">    <span class=\"keyword\">when</span> <span class=\"title class_\">Continue</span>, <span class=\"title class_\">Break</span></span><br><span class=\"line\">      <span class=\"comment\"># If we get an Interrupt that means the block must stop processing. An</span></span><br><span class=\"line\">      <span class=\"comment\"># Interrupt is any command that stops block execution such as &#123;% break %&#125;</span></span><br><span class=\"line\">      <span class=\"comment\"># or &#123;% continue %&#125;</span></span><br><span class=\"line\">      context.push_interrupt(node.interrupt)</span><br><span class=\"line\">      <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"comment\"># Other non-Block tags</span></span><br><span class=\"line\">      render_node_to_output(node, output, context)</span><br><span class=\"line\">      <span class=\"keyword\">break</span> <span class=\"keyword\">if</span> context.interrupt? <span class=\"comment\"># might have happened through an include</span></span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\">    idx += <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\">  output = output.map&#123; |<span class=\"params\">i</span>| i.dup.force_encoding(<span class=\"string\">&quot;UTF-8&quot;</span>) &#125;</span><br><span class=\"line\">  output.join</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span></span><br></pre></td></tr></table></figure>\n\n<p>就在</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">output.join</span><br></pre></td></tr></table></figure>\n<p>的前面硬加一句</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">output = output.map&#123; |<span class=\"params\">i</span>| i.dup.force_encoding(<span class=\"string\">&quot;UTF-8&quot;</span>) &#125;</span><br></pre></td></tr></table></figure>\n<p>然后就好用了。</p>\n<p>在Windows平台上还有一个问题，在WSL1升级成WSL2之后， Jekyll的自动生成功能不好用了，VSC的Jekyll Run插件也不好用，这时候需要加一句。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--force-polling</span><br></pre></td></tr></table></figure>\n<p>加全了就是</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--watch --trace --incremental  --force-polling</span><br></pre></td></tr></table></figure>\n<p>这样Jekyll在WSL、PowerShell中，就又可以自动根据文件变更，重新将Markdown自动生成新的HTML文件里。一个是解决是文件名不支持中文，一个是路径不支持中文，以上的修改都是解决这些问题的。后期为了生产速度和便利性，用Node JS的Hexo做博客系统更方便一些。</p>\n","text":"解决Jekyll不支持中文名和路径Jekyll如果在Mac系统中，目录有中文字，生成新文件的时候会报错，主要原因是因为Ruby做字符串连接的时候，不支持中文，这样需要把一些字符，通过.force_encoding(“UTF-8”)转换成中文这样就不出错。 在部署的时候， 不是直接...","link":"","photos":[],"count_time":{"symbolsCount":"4.2k","symbolsTime":"4 mins."},"categories":[{"name":"ruby","slug":"ruby","count":1,"path":"api/categories/ruby.json"}],"tags":[{"name":"jekyll","slug":"jekyll","count":1,"path":"api/tags/jekyll.json"},{"name":"blog","slug":"blog","count":1,"path":"api/tags/blog.json"},{"name":"不支持中文","slug":"不支持中文","count":1,"path":"api/tags/不支持中文.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E8%A7%A3%E5%86%B3Jekyll%E4%B8%8D%E6%94%AF%E6%8C%81%E4%B8%AD%E6%96%87%E5%90%8D%E5%92%8C%E8%B7%AF%E5%BE%84\"><span class=\"toc-text\">解决Jekyll不支持中文名和路径</span></a></li></ol>","author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"给Obsidian添加免费图床","uid":"62b43e325ee935c5f5c3beb2114c6251","slug":"kanbanfiles/给Obsidian添加免费图床","date":"2024-03-14T06:15:59.720Z","updated":"2024-03-14T06:15:59.720Z","comments":true,"path":"api/articles/kanbanfiles/给Obsidian添加免费图床.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":[],"text":"向Obsidian的文档中复制图片，图片自动上传到自己的图床中。 实现这个功能，需要联合使用的软件，如下： 1.Obsidian的Image auto upload Plugin插件。2.PicGO图床管理软件。3.Gitee的git分支。 Image auto upload P...","link":"","photos":[],"count_time":{"symbolsCount":"1.9k","symbolsTime":"2 mins."},"categories":[{"name":"obsidian","slug":"obsidian","count":8,"path":"api/categories/obsidian.json"},{"name":"hexo","slug":"obsidian/hexo","count":3,"path":"api/categories/obsidian/hexo.json"}],"tags":[{"name":"obsidian","slug":"obsidian","count":3,"path":"api/tags/obsidian.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"语言暴力和冷暴力","uid":"f26e4f0954aebe31a1ed6bfbacd82d92","slug":"kanbanfiles/语言暴力和冷暴力","date":"2024-03-14T06:15:59.720Z","updated":"2024-03-14T06:15:59.720Z","comments":true,"path":"api/articles/kanbanfiles/语言暴力和冷暴力.json","keywords":"AIGC,LLM,糖果AIGC实验室","cover":null,"text":"语言暴力和冷暴力语言暴力和冷暴力语言暴力是指使用恶言恶语、威胁、辱骂等方式来伤害他人的言辞行为。这种暴力形式主要是通过口头表达来实施，目的是让对方感到羞辱、恐惧或痛苦。语言暴力可以在现实生活中发生，也可以通过网络和社交媒体传播。 冷暴力是指以冷漠、无视或沉默等方式来伤害他人的行为...","link":"","photos":[],"count_time":{"symbolsCount":784,"symbolsTime":"1 mins."},"categories":[{"name":"知识","slug":"知识","count":11,"path":"api/categories/知识.json"}],"tags":[{"name":"人际关系","slug":"人际关系","count":1,"path":"api/tags/人际关系.json"}],"author":{"name":"安全书","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"《墨守之道-Web服务安全架构与实践》","socials":{"github":"https://github.com/shengnoah","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/3732639263","zhihu":"https://www.zhihu.com/people/openresty","csdn":"","juejin":"","customs":{}}}}}